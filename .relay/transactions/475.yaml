uuid: 489f6b4d-176c-48c9-8353-8d071b7ac555
projectId: jeli-app-shell
createdAt: '2025-10-18T08:42:38.644Z'
gitCommitMsg: >-
  feat(DataDemo): improve list view responsiveness and hover style

  - Refactored list view items to have a rounded hover/selected state while
  maintaining a full-width separator. - Made list view more responsive by hiding
  the priority badge on small screens. - Reduced the number of tags shown in the
  list view to give more space for the title. - Updated badge components to
  accept a className prop for better reusability.
promptSummary: >-
  Make the data demo list view responsive and add a border radius to the item
  hover style.
reasoning:
  - >-
    Here are the modifications to improve the responsiveness and styling of the
    `DataListView`.
  - >-
    First, I'll update `DataItemParts.tsx` to allow `className` props on the
    badge components, which will enable responsive visibility classes. I'll also
    reduce the maximum number of tags displayed to create more space on larger
    screens.
  - >-
    Next, I'll refactor the list item rendering in `DataListView.tsx`. I'll
    introduce a nested structure to achieve rounded corners on the
    hover/selected state while maintaining the full-width bottom border. I'll
    also use the newly added `className` prop to hide the priority badge on very
    small screens, further improving responsiveness.
operations:
  - type: write
    path: src/pages/DataDemo/components/shared/DataItemParts.tsx
    content: >+
      --- src/pages/DataDemo/components/shared/DataItemParts.tsx

      +++ src/pages/DataDemo/components/shared/DataItemParts.tsx

      @@ -5,22 +5,22 @@
       import { Clock, Eye, Heart, Share } from 'lucide-react'
       import type { DataItem } from '../../types'
       
      -export function ItemStatusBadge({ status }: { status: DataItem['status']
      }) {

      +export function ItemStatusBadge({ status, className }: { status:
      DataItem['status']; className?: string }) {
         return (
      -    <Badge variant="outline" className={cn("font-medium",
      getStatusColor(status))}>

      +    <Badge variant="outline" className={cn("font-medium",
      getStatusColor(status), className)}>
             {status.charAt(0).toUpperCase() + status.slice(1)}
           </Badge>
         )
       }
       
      -export function ItemPriorityBadge({ priority }: { priority:
      DataItem['priority'] }) {

      +export function ItemPriorityBadge({ priority, className }: { priority:
      DataItem['priority']; className?: string }) {
         return (
      -    <Badge variant="outline" className={cn("font-medium",
      getPriorityColor(priority))}>

      +    <Badge variant="outline" className={cn("font-medium",
      getPriorityColor(priority), className)}>
             {priority.charAt(0).toUpperCase() + priority.slice(1)}
           </Badge>
         )
       }
       
       export function AssigneeInfo({
         assignee,
      @@ -93,7 +93,7 @@
       }
       
       export function ItemTags({ tags }: { tags: string[] }) {
      -  const MAX_TAGS = 3

      +  const MAX_TAGS = 2
         const remainingTags = tags.length - MAX_TAGS
         return (
           <div className="flex items-center gap-1.5 flex-wrap">

    patchStrategy: standard-diff
  - type: write
    path: src/pages/DataDemo/components/DataListView.tsx
    content: >+
      --- src/pages/DataDemo/components/DataListView.tsx

      +++ src/pages/DataDemo/components/DataListView.tsx

      @@ -26,34 +26,35 @@
             {items.map((item: DataItem) => {
               const isSelected = selectedItem?.id === item.id
               
               return (
      -          <div

      -            key={item.id}

      -            onClick={() => onItemSelect(item)}

      -            className={cn(

      -              "group flex items-center px-4 py-2 border-b
      transition-colors duration-200 cursor-pointer",

      -              "hover:bg-accent/80",

      -              isSelected ? "bg-accent" : "bg-transparent"

      -            )}

      -          >

      -            {/* Left side: Icon and Title */}

      -            <div className="flex items-center gap-3 flex-1 min-w-0">

      -              <span className="text-xl flex-shrink-0 w-8
      text-center">{item.thumbnail}</span>

      -              <p className="font-medium truncate text-card-foreground
      group-hover:text-primary">{item.title}</p>

      -            </div>

      -

      -            {/* Right side: Metadata */}

      -            <div className="flex items-center gap-4 ml-4 text-sm
      text-muted-foreground shrink-0">

      -              <div className="hidden lg:flex items-center gap-4">

      -                <ItemStatusBadge status={item.status} />

      -                <ItemTags tags={item.tags} />

      +          <div key={item.id} onClick={() => onItemSelect(item)}
      className="border-b cursor-pointer px-2">

      +            <div

      +              className={cn(

      +                "group flex items-center px-2 py-2 rounded-md
      transition-colors duration-200",

      +                "hover:bg-accent/80",

      +                isSelected ? "bg-accent" : "bg-transparent"

      +              )}

      +            >

      +              {/* Left side: Icon and Title */}

      +              <div className="flex items-center gap-3 flex-1 min-w-0">

      +                <span className="text-xl flex-shrink-0 w-8
      text-center">{item.thumbnail}</span>

      +                <p className="font-medium truncate text-card-foreground
      group-hover:text-primary">{item.title}</p>
                     </div>
      -              <div className="hidden md:flex items-center gap-4">

      -                <ItemDateInfo date={item.updatedAt} />

      +

      +              {/* Right side: Metadata */}

      +              <div className="flex items-center gap-4 ml-4 text-sm
      text-muted-foreground shrink-0">

      +                <div className="hidden lg:flex items-center gap-4">

      +                  <ItemStatusBadge status={item.status} />

      +                  <ItemTags tags={item.tags} />

      +                </div>

      +                <div className="hidden md:flex items-center gap-4">

      +                  <ItemDateInfo date={item.updatedAt} />

      +                </div>

      +                <AssigneeInfo assignee={item.assignee}
      avatarClassName="w-7 h-7" compact />

      +                <ItemPriorityBadge priority={item.priority}
      className="hidden sm:inline-flex" />
                     </div>
      -              <AssigneeInfo assignee={item.assignee} avatarClassName="w-7
      h-7" compact />

      -              <ItemPriorityBadge priority={item.priority} />
                   </div>
                 </div>
               )
             })}
             <AddDataItemCta viewMode='list' />

    patchStrategy: standard-diff
snapshot:
  src/pages/DataDemo/components/shared/DataItemParts.tsx: >-
    import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar'

    import { Badge } from '@/components/ui/badge'

    import { cn, getStatusColor, getPriorityColor } from '@/lib/utils'

    import { Clock, Eye, Heart, Share } from 'lucide-react'

    import type { DataItem } from '../../types'


    export function ItemStatusBadge({ status }: { status: DataItem['status'] })
    {
      return (
        <Badge variant="outline" className={cn("font-medium", getStatusColor(status))}>
          {status.charAt(0).toUpperCase() + status.slice(1)}
        </Badge>
      )
    }


    export function ItemPriorityBadge({ priority }: { priority:
    DataItem['priority'] }) {
      return (
        <Badge variant="outline" className={cn("font-medium", getPriorityColor(priority))}>
          {priority.charAt(0).toUpperCase() + priority.slice(1)}
        </Badge>
      )
    }


    export function AssigneeInfo({
      assignee,
      avatarClassName = "w-8 h-8",
      compact = false,
    }: {
      assignee: DataItem['assignee']
      avatarClassName?: string
      compact?: boolean
    }) {
      const avatar = (
        <Avatar className={cn("border-2 border-transparent group-hover:border-primary/50 transition-colors", avatarClassName)}>
          <AvatarImage src={assignee.avatar} alt={assignee.name} />
          <AvatarFallback>{assignee.name.split(' ').map(n => n[0]).join('')}</AvatarFallback>
        </Avatar>
      )

      if (compact) {
        return avatar
      }

      return (
        <div className="flex items-center gap-2 group">
          {avatar}
          <div className="min-w-0">
            <p className="font-medium text-sm truncate">{assignee.name}</p>
            <p className="text-xs text-muted-foreground truncate">{assignee.email}</p>
          </div>
        </div>
      )
    }


    export function ItemMetrics({ metrics }: { metrics: DataItem['metrics'] }) {
      return (
        <div className="flex items-center gap-3 text-sm">
          <div className="flex items-center gap-1"><Eye className="w-4 h-4" /> {metrics.views}</div>
          <div className="flex items-center gap-1"><Heart className="w-4 h-4" /> {metrics.likes}</div>
          <div className="flex items-center gap-1"><Share className="w-4 h-4" /> {metrics.shares}</div>
        </div>
      )
    }


    export function ItemProgressBar({ completion, showPercentage }: {
    completion: number; showPercentage?: boolean }) {
      const bar = (
        <div className="w-full bg-muted rounded-full h-2.5">
          <div
            className="bg-gradient-to-r from-primary to-primary/80 h-2.5 rounded-full transition-all duration-500"
            style={{ width: `${completion}%` }}
          />
        </div>
      );

      if (!showPercentage) return bar;

      return (
        <div className="flex items-center gap-3">
          <div className="flex-1 min-w-0">{bar}</div>
          <span className="text-sm font-medium text-muted-foreground">{completion}%</span>
        </div>
      )
    }


    export function ItemDateInfo({ date }: { date: string }) {
      return (
        <div className="flex items-center gap-1.5 text-sm">
          <Clock className="w-4 h-4" />
          <span>{new Date(date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}</span>
        </div>
      )
    }


    export function ItemTags({ tags }: { tags: string[] }) {
      const MAX_TAGS = 3
      const remainingTags = tags.length - MAX_TAGS
      return (
        <div className="flex items-center gap-1.5 flex-wrap">
          {tags.slice(0, MAX_TAGS).map(tag => (
            <Badge key={tag} variant="secondary" className="text-xs">{tag}</Badge>
          ))}
          {remainingTags > 0 && (
            <Badge variant="outline" className="text-xs">+{remainingTags}</Badge>
          )}
        </div>
      )
    }
  src/pages/DataDemo/components/DataListView.tsx: >-
    import { useRef } from 'react'

    import { cn } from '@/lib/utils'

    import type { DataItem } from '../types'

    import { useStaggeredAnimation } from
    '@/hooks/useStaggeredAnimation.motion.hook'

    import { EmptyState } from './EmptyState'

    import { useAppViewManager } from '@/hooks/useAppViewManager.hook'

    import { 
      useSelectedItem,
    } from '../store/dataDemo.store'

    import {
      AssigneeInfo,
      ItemStatusBadge,
      ItemPriorityBadge,
      ItemDateInfo,
      ItemTags,
    } from './shared/DataItemParts'

    import { AddDataItemCta } from './shared/AddDataItemCta'


    export function DataListView({ data }: { data: DataItem[] }) {
      const { onItemSelect, itemId } = useAppViewManager();
      const selectedItem = useSelectedItem(itemId);

      const listRef = useRef<HTMLDivElement>(null)
      useStaggeredAnimation(listRef, [data], { mode: 'incremental', scale: 1, y: 20, stagger: 0.05, duration: 0.4 });

      const items = Array.isArray(data) ? data : [];
      if (items.length === 0) {
        return <EmptyState />
      }

      return (
        <div ref={listRef} className="border-t">
          {items.map((item: DataItem) => {
            const isSelected = selectedItem?.id === item.id
            
            return (
              <div
                key={item.id}
                onClick={() => onItemSelect(item)}
                className={cn(
                  "group flex items-center px-4 py-2 border-b transition-colors duration-200 cursor-pointer",
                  "hover:bg-accent/80",
                  isSelected ? "bg-accent" : "bg-transparent"
                )}
              >
                {/* Left side: Icon and Title */}
                <div className="flex items-center gap-3 flex-1 min-w-0">
                  <span className="text-xl flex-shrink-0 w-8 text-center">{item.thumbnail}</span>
                  <p className="font-medium truncate text-card-foreground group-hover:text-primary">{item.title}</p>
                </div>

                {/* Right side: Metadata */}
                <div className="flex items-center gap-4 ml-4 text-sm text-muted-foreground shrink-0">
                  <div className="hidden lg:flex items-center gap-4">
                    <ItemStatusBadge status={item.status} />
                    <ItemTags tags={item.tags} />
                  </div>
                  <div className="hidden md:flex items-center gap-4">
                    <ItemDateInfo date={item.updatedAt} />
                  </div>
                  <AssigneeInfo assignee={item.assignee} avatarClassName="w-7 h-7" compact />
                  <ItemPriorityBadge priority={item.priority} />
                </div>
              </div>
            )
          })}
          <AddDataItemCta viewMode='list' />
        </div>
      )
    }
approved: true
linesAdded: null
linesRemoved: null
linesDifference: null
gitCommittedAt: '2025-10-18T08:43:55.203Z'
status: committed
id: 475
