uuid: 440263f3-94c6-43e3-8515-5e0e0f3f6e80
projectId: jeli-app-shell
createdAt: '2025-10-15T02:56:49.688Z'
gitCommitMsg: >-
  fix(AppShell): Ensure top bar can be revealed on hover in split view

  The previous implementation for auto-hiding the top bar in split view mode
  failed because the `onMouseEnter` event listener was on the top bar container
  itself. When the container was translated off-screen, it could no longer
  receive mouse events.

  This commit resolves the issue by adding a static, invisible `div` that acts
  as a persistent hover trigger zone at the top of the main content area. This
  trigger is always present in split view and is responsible for initiating the
  "reveal" animation. The top bar container retains its `onMouseLeave` logic to
  hide itself when the cursor moves away.
promptSummary: >-
  The user reported that the auto-hiding top bar in split-view mode was not
  reappearing on hover. The issue was that the hover event listener was on the
  top bar itself, which was moved off-screen when hidden. I fixed this by adding
  a persistent, invisible hover trigger zone at the top of the screen.
reasoning:
  - >-
    Of course. It seems we've run into a classic chicken-and-egg scenario. The
    hover event can't trigger on an element that's been moved off-screen. My
    apologies for that oversight.
  - >-
    To fix this, we'll introduce a dedicated, invisible "hover trigger" area
    that will always be present at the top of the screen in split-view mode.
    When your mouse enters this zone, it will tell the top bar to animate into
    view. The top bar itself will then keep itself visible as long as the mouse
    is over it.
  - Here is the precise fix for `AppShell.tsx`.
  - '### Step 1: Add the Hover Trigger Zone'
  - >-
    I'll modify `src/components/layout/AppShell.tsx` to add a new `div` that
    will serve as the persistent hover target. This div will be a thin,
    transparent strip at the top of the main content area, positioned just
    behind the top bar's z-index.
  - >-
    This change introduces the necessary trigger zone that was missing. It
    ensures that even when the top bar is hidden (`translateY(-100%)`), there's
    still a "hot zone" at the top of the screen to detect the user's intent to
    reveal it. This should resolve the issue completely.
  - '---'
operations:
  - type: write
    path: src/components/layout/AppShell.tsx
    content: |+
      --- src/components/layout/AppShell.tsx
      +++ src/components/layout/AppShell.tsx
      @@ -176,17 +176,29 @@
                     isFullscreen && "z-0"
                   )}
                   onMouseEnter={() => {
                     if (isSplitView) {
                       setTopBarHovered(true);
                       setHoveredPane(null);
                     }
                   }}
                   onMouseLeave={() => {
      -              if (isSplitView)
      -                setTopBarHovered(false);
      +              if (isSplitView) {
      +                setTopBarHovered(false);
      +              }
                   }}
                 >
                   {topBar}
                 </div>
       
      +          {/* Invisible trigger area for top bar in split view */}
      +          {isSplitView && (
      +            <div
      +              className="absolute top-0 left-0 right-0 h-4 z-20"
      +              onMouseEnter={() => {
      +                setTopBarHovered(true);
      +                setHoveredPane(null);
      +              }}
      +            />
      +          )}
      +
                 <div className="flex flex-1 min-h-0">
                   <div
                     ref={mainAreaRef}

    patchStrategy: standard-diff
snapshot:
  src/components/layout/AppShell.tsx: >-
    import React, { useRef, type ReactElement, useEffect, useLayoutEffect } from
    'react'

    import { useLocation } from 'react-router-dom';

    import { cn } from '@/lib/utils'

    import { gsap } from 'gsap';

    import { CommandPalette } from '@/components/global/CommandPalette';

    import { useAppShellStore } from '@/store/appShell.store';

    import { SIDEBAR_STATES, BODY_STATES } from '@/lib/utils'

    import { useResizableSidebar, useResizableRightPane } from
    '@/hooks/useResizablePanes.hook'

    import { useSidebarAnimations, useBodyStateAnimations } from
    '@/hooks/useAppShellAnimations.hook'

    import { ViewModeSwitcher } from './ViewModeSwitcher';

    import { usePaneDnd } from '@/hooks/usePaneDnd.hook';


    interface AppShellProps {
      sidebar: ReactElement;
      topBar: ReactElement;
      mainContent: ReactElement;
      rightPane: ReactElement;
      commandPalette?: ReactElement;
      onOverlayClick?: () => void;
    }


    const pageToPaneMap: Record<string, 'main' | 'settings' | 'toaster' |
    'notifications' | 'dataDemo'> = {
      dashboard: 'main',
      settings: 'settings',
      toaster: 'toaster',
      notifications: 'notifications',
      'data-demo': 'dataDemo',
    };


    // Helper hook to get the previous value of a prop or state

    function usePrevious<T>(value: T): T | undefined {
      const ref = useRef<T>();
      useEffect(() => {
        ref.current = value;
      }, [value]);
      return ref.current;
    }



    export function AppShell({ sidebar, topBar, mainContent, rightPane,
    commandPalette, onOverlayClick }: AppShellProps) {
      const sidebarState = useAppShellStore(s => s.sidebarState);
      const autoExpandSidebar = useAppShellStore(s => s.autoExpandSidebar);
      const hoveredPane = useAppShellStore(s => s.hoveredPane);
      const draggedPage = useAppShellStore(s => s.draggedPage);
      const dragHoverTarget = useAppShellStore(s => s.dragHoverTarget);
      const bodyState = useAppShellStore(s => s.bodyState);
      const sidePaneContent = useAppShellStore(s => s.sidePaneContent);
      const reducedMotion = useAppShellStore(s => s.reducedMotion);
      const isTopBarVisible = useAppShellStore(s => s.isTopBarVisible);
      const isDarkMode = useAppShellStore(s => s.isDarkMode);
      const { setSidebarState, peekSidebar, setHoveredPane, setTopBarHovered } = useAppShellStore.getState();
      
      const isFullscreen = bodyState === BODY_STATES.FULLSCREEN;
      const isSidePaneOpen = bodyState === BODY_STATES.SIDE_PANE;
      const location = useLocation();
      const activePage = location.pathname.split('/')[1] || 'dashboard';
      const appRef = useRef<HTMLDivElement>(null)
      const sidebarRef = useRef<HTMLDivElement>(null)
      const mainContentRef = useRef<HTMLDivElement>(null)
      const rightPaneRef = useRef<HTMLDivElement>(null)
      const resizeHandleRef = useRef<HTMLDivElement>(null)
      const topBarContainerRef = useRef<HTMLDivElement>(null)
      const mainAreaRef = useRef<HTMLDivElement>(null)

      const prevActivePage = usePrevious(activePage);
      const prevSidePaneContent = usePrevious(sidePaneContent);

      const isSplitView = bodyState === BODY_STATES.SPLIT_VIEW;
      const dndHandlers = usePaneDnd();

      // Custom hooks for logic
      useResizableSidebar(sidebarRef, resizeHandleRef);
      useResizableRightPane();
      useSidebarAnimations(sidebarRef, resizeHandleRef);
      useBodyStateAnimations(appRef, mainContentRef, rightPaneRef, topBarContainerRef, mainAreaRef);
      
      // Animation for pane swapping
      useLayoutEffect(() => {
        if (reducedMotion || bodyState !== BODY_STATES.SPLIT_VIEW || !prevActivePage || !prevSidePaneContent) {
          return;
        }

        const pageForPrevSidePane = Object.keys(pageToPaneMap).find(
          key => pageToPaneMap[key as keyof typeof pageToPaneMap] === prevSidePaneContent
        );

        // Check if a swap occurred by comparing current state with previous state
        if (activePage === pageForPrevSidePane && sidePaneContent === pageToPaneMap[prevActivePage as keyof typeof pageToPaneMap]) {
          const mainEl = mainAreaRef.current;
          const rightEl = rightPaneRef.current;

          if (mainEl && rightEl) {
            const mainWidth = mainEl.offsetWidth;
            const rightWidth = rightEl.offsetWidth;

            const tl = gsap.timeline();
            
            // Animate main content FROM where right pane was TO its new place
            tl.from(mainEl, {
              x: rightWidth, duration: 0.4, ease: 'power3.inOut'
            });

            // Animate right pane FROM where main content was TO its new place
            tl.from(rightEl, {
              x: -mainWidth, duration: 0.4, ease: 'power3.inOut'
            }, 0); // Start at the same time
          }
        }
      }, [activePage, sidePaneContent, bodyState, prevActivePage, prevSidePaneContent, reducedMotion]);
      
      const sidebarWithProps = React.cloneElement(sidebar, { 
        ref: sidebarRef,
        onMouseEnter: () => {
          if (autoExpandSidebar && sidebarState === SIDEBAR_STATES.COLLAPSED) {
            peekSidebar()
          }
        },
        onMouseLeave: () => {
          if (autoExpandSidebar && sidebarState === SIDEBAR_STATES.PEEK) {
            setSidebarState(SIDEBAR_STATES.COLLAPSED);
          }
        }
      });

      const mainContentWithProps = React.cloneElement(mainContent, {
        ref: mainContentRef,
      });

      const rightPaneWithProps = React.cloneElement(rightPane, { ref: rightPaneRef });

      return (
        <div 
          ref={appRef}
          className={cn(
            "relative h-screen w-screen overflow-hidden bg-background transition-colors duration-300",
            isDarkMode && "dark"
          )}
        >
          <div className="flex h-screen overflow-hidden">
            {/* Enhanced Sidebar */}
            {sidebarWithProps}

            {/* Resize Handle */}
            {sidebarState !== SIDEBAR_STATES.HIDDEN && (
              <div
                ref={resizeHandleRef}
                className={cn(
                  "absolute top-0 w-2 h-full bg-transparent hover:bg-primary/20 cursor-col-resize z-50 transition-colors duration-200 group -translate-x-1/2"
                )}
                onMouseDown={(e) => {
                  e.preventDefault()
                  useAppShellStore.getState().setIsResizing(true);
                }}
              >
                <div className="w-0.5 h-full bg-border group-hover:bg-primary transition-colors duration-200 mx-auto" />
              </div>
            )}

            {/* Main area wrapper */}
            <div className="flex-1 flex flex-col overflow-hidden relative">
              <div
                ref={topBarContainerRef}
                className={cn(
                  "absolute top-0 left-0 right-0 z-30",
                  isFullscreen && "z-0"
                )}
                onMouseEnter={() => {
                  if (isSplitView) {
                    setTopBarHovered(true);
                    setHoveredPane(null);
                  }
                }}
                onMouseLeave={() => {
                  if (isSplitView)
                    setTopBarHovered(false);
                }}
              >
                {topBar}
              </div>

              <div className="flex flex-1 min-h-0">
                <div
                  ref={mainAreaRef}
                  className="relative flex-1 overflow-hidden bg-background"
                  onMouseEnter={() => { if (isSplitView && !draggedPage) setHoveredPane('left'); }}
                  onMouseLeave={() => { if (isSplitView && !draggedPage) setHoveredPane(null); }}
                >
                  {/* Side Pane Overlay */}
                  <div
                    role="button"
                    aria-label="Close side pane"
                    tabIndex={isSidePaneOpen ? 0 : -1}
                    className={cn(
                      "absolute inset-0 bg-black/40 z-40 transition-opacity duration-300",
                      isSidePaneOpen
                        ? "opacity-100 pointer-events-auto"
                        : "opacity-0 pointer-events-none"
                    )}
                    onClick={onOverlayClick}
                  />
                  {/* Left drop overlay */}
                  <div
                    className={cn(
                      "absolute inset-y-0 left-0 z-40 border-2 border-transparent transition-all",
                      draggedPage
                        ? cn("pointer-events-auto", isSplitView ? 'w-full' : 'w-1/2')
                        : "pointer-events-none w-0",
                      dragHoverTarget === 'left' && "bg-primary/10 border-primary"
                    )}
                    onDragOver={dndHandlers.handleDragOverLeft}
                    onDrop={dndHandlers.handleDropLeft}
                    onDragLeave={dndHandlers.handleDragLeave}
                  >
                    {draggedPage && dragHoverTarget === 'left' && (
                      <div className="absolute inset-0 flex items-center justify-center text-sm font-medium text-primary-foreground/80 pointer-events-none">
                        <span className="px-3 py-1 rounded-md bg-primary/70">{isSplitView ? 'Drop to Replace' : 'Drop to Left'}</span>
                      </div>
                    )}
                  </div>
                  {mainContentWithProps}
                  {isSplitView && hoveredPane === 'left' && !draggedPage && (
                    <div className={cn("absolute right-4 z-50 transition-all", isTopBarVisible ? 'top-24' : 'top-4')}>
                      <ViewModeSwitcher pane="main" />
                    </div>
                  )}
                  {/* Right drop overlay (over main area, ONLY when NOT in split view) */}
                  {!isSplitView && (
                    <div
                      className={cn(
                        "absolute inset-y-0 right-0 z-40 border-2 border-transparent",
                        draggedPage ? "pointer-events-auto w-1/2" : "pointer-events-none",
                        dragHoverTarget === 'right' && "bg-primary/10 border-primary"
                      )}
                      onDragOver={dndHandlers.handleDragOverRight}
                      onDrop={dndHandlers.handleDropRight}
                      onDragLeave={dndHandlers.handleDragLeave}
                    >
                      {draggedPage && dragHoverTarget === 'right' && (
                        <div className="absolute inset-0 flex items-center justify-center pointer-events-none">
                          <span className="px-3 py-1 rounded-md bg-primary/70 text-sm font-medium text-primary-foreground/80">Drop to Right</span>
                        </div>
                      )}
                    </div>
                  )}
                </div>
                {isSplitView ? (
                  <div
                    className="relative"
                    onMouseEnter={() => { if (isSplitView && !draggedPage) setHoveredPane('right'); }}
                    onMouseLeave={() => { if (isSplitView && !draggedPage) setHoveredPane(null); }}
                    onDragOver={dndHandlers.handleDragOverRight}
                  >
                    {rightPaneWithProps}
                    {draggedPage && (
                      <div
                        className={cn(
                          'absolute inset-0 z-50 transition-all',
                          dragHoverTarget === 'right'
                            ? 'bg-primary/10 border-2 border-primary'
                            : 'pointer-events-none'
                        )}
                        onDragLeave={dndHandlers.handleDragLeave}
                        onDrop={dndHandlers.handleDropRight}
                        onDragOver={(e) => e.preventDefault()}
                      >
                        {dragHoverTarget === 'right' && (
                          <div className="absolute inset-0 flex items-center justify-center pointer-events-none">
                            <span className="px-3 py-1 rounded-md bg-primary/70 text-sm font-medium text-primary-foreground/80">
                              Drop to Replace
                            </span>
                          </div>
                        )}
                      </div>
                    )}
                    {hoveredPane === 'right' && !draggedPage && (
                      <div className={cn("absolute right-4 z-[70] transition-all", isTopBarVisible ? 'top-24' : 'top-4')}>
                        <ViewModeSwitcher pane="right" />
                      </div>
                    )}
                  </div>
                ) : rightPaneWithProps}
              </div>
            </div>
          </div>
          {commandPalette || <CommandPalette />}
        </div>
      )
    }
approved: true
linesAdded: null
linesRemoved: null
linesDifference: null
gitCommittedAt: '2025-10-15T02:57:55.501Z'
status: committed
id: 306
