uuid: 1530743b-8d07-4e3a-969c-6a16187766f7
projectId: jeli-app-shell
createdAt: '2025-10-13T03:53:50.854Z'
gitCommitMsg: >-
  refactor(sidebar): use popover for view mode switcher

  This commit refactors the sidebar's view mode selection feature to improve
  UI/UX and solve layout constraints.

  - Replaced the on-hover `ViewModeSwitcher` with a `Popover` that is triggered
  by a contextual icon button appearing on menu item hover. - The `Popover` uses
  a portal, which resolves the previous issue of the switcher being clipped by
  the sidebar's `overflow` container. - The trigger button is now absolutely
  positioned within the menu item for a cleaner, more integrated look. - This
  provides a more robust and deliberate user interaction for selecting a page's
  view mode directly from the sidebar.
promptSummary: >-
  The user was unhappy with the previous implementation for showing the
  ViewModeSwitcher on sidebar item hover. They disliked the layout and the fact
  that it was constrained within the sidebar's overflow. I've now implemented a
  much cleaner solution using a Popover.
reasoning:
  - >-
    I understand. The previous implementation wasn't ideal. Placing the
    `ViewModeSwitcher` as a sibling element created layout issues and it was
    constrained by the sidebar's scroll container.
  - >-
    You're right, it should have a "super index" (a higher `z-index`) and not be
    clipped by the sidebar. The best way to achieve this using the existing
    components is to use a `Popover`, which renders its content in a portal,
    effectively breaking it out of the parent's stacking context and overflow
    constraints.
  - >-
    To improve the UI, instead of showing the whole switcher on hover, I will
    show a small trigger icon. Clicking this icon will open the
    `ViewModeSwitcher` in a popover. This is a cleaner, more deliberate user
    interaction that solves both the layout and the z-index problems.
  - 'Here is my updated plan:'
  - '1.  **Modify `EnhancedSidebar.tsx`**:'
  - '*   For sidebar items that link to a page, I will add a `Popover` component.'
  - >-
    *   An icon button will act as the `PopoverTrigger`. This button will be
    absolutely positioned inside the menu item and will only appear on hover,
    providing a clean, contextual action.
  - >-
    *   The `ViewModeSwitcher` will be placed inside the `PopoverContent`.
    Because `PopoverContent` uses a portal, it will render on top of all other
    elements and will not be clipped by the sidebar.
  - >-
    *   I'll ensure clicking the trigger button doesn't accidentally navigate
    the page.
  - >-
    2.  **No changes to `ViewModeSwitcher.tsx`**: The change I made in the
    previous step to make it context-aware via the `targetPage` prop is still
    necessary and correct for this new approach.
  - 'Here are the changes for `EnhancedSidebar.tsx`:'
operations:
  - type: write
    path: src/components/layout/EnhancedSidebar.tsx
    content: >+
      --- src/components/layout/EnhancedSidebar.tsx

      +++ src/components/layout/EnhancedSidebar.tsx

      @@ -9,6 +9,7 @@
         Bell,
         Search,
         FileText,
      +  Layers,
         Star,
         Trash2,
         FolderOpen,
      @@ -27,6 +28,11 @@
         DropdownMenuItem,
         DropdownMenuTrigger,
       } from '@/components/ui/dropdown-menu';
      +import {

      +  Popover,

      +  PopoverContent,

      +  PopoverTrigger,

      +} from '@/components/ui/popover';
       import {
         Sidebar,
         SidebarContent,
      @@ -43,6 +49,8 @@
         SidebarIcon,
         useSidebar,
       } from './Sidebar';
      +import { ViewModeSwitcher } from './ViewModeSwitcher';

      +import { Button } from '@/components/ui/button';
       import { cn } from '@/lib/utils';
       
       interface MyWorkspace extends Workspace {
      @@ -194,6 +202,32 @@
                 <SidebarTooltip label={label} badge={badge} />
               </SidebarMenuButton>
       
      +        {page && !isCollapsed && (

      +          <Popover>

      +            <PopoverTrigger asChild>

      +              <Button

      +                variant="ghost"

      +                size="icon"

      +                className={cn(

      +                  'absolute top-1/2 -translate-y-1/2 h-8 w-8 rounded-md
      z-10',

      +                  hasActions ? 'right-9' : 'right-1',

      +                  'opacity-0 group-hover/item:opacity-100
      transition-opacity',

      +                  'focus:opacity-100',

      +                )}

      +                onClick={(e) => {

      +                  e.stopPropagation();

      +                }}

      +                aria-label="Open view mode switcher"

      +              >

      +                <Layers className="h-4 w-4" />

      +              </Button>

      +            </PopoverTrigger>

      +            <PopoverContent side="right" align="center" sideOffset={10}
      className="w-auto p-0 border-none bg-transparent shadow-none">

      +              <ViewModeSwitcher targetPage={page} />

      +            </PopoverContent>

      +          </Popover>

      +        )}

      +
               {hasActions && (
                 <DropdownMenu>
                   <DropdownMenuTrigger asChild>

    patchStrategy: standard-diff
snapshot:
  src/components/layout/EnhancedSidebar.tsx: >-
    import React from 'react';

    import {
      Home,
      Settings,
      HelpCircle,
      Component,
      Rocket,
      MoreHorizontal,
      Bell,
      Search,
      FileText,
      Star,
      Trash2,
      FolderOpen,
      Mail,
      Bookmark,
      Download,
      User,
      Plus,
      Database
    } from 'lucide-react';

    import { useAppStore, type ActivePage } from '@/store/appStore';

    import { useAppShell } from '@/context/AppShellContext';

    import { BODY_STATES } from '@/lib/utils';

    import {
      Workspaces,
      WorkspaceTrigger,
      WorkspaceContent,
      type Workspace,
    } from './WorkspaceSwitcher';

    import {
      DropdownMenu,
      DropdownMenuContent,
      DropdownMenuItem,
      DropdownMenuTrigger,
    } from '@/components/ui/dropdown-menu';

    import {
      Sidebar,
      SidebarContent,
      SidebarHeader,
      SidebarTitle,
      SidebarBody,
      SidebarFooter,
      SidebarSection,
      SidebarMenuItem,
      SidebarMenuButton,
      SidebarMenuAction,
      SidebarLabel,
      SidebarBadge,
      SidebarTooltip,
      SidebarIcon,
      useSidebar,
    } from './Sidebar';

    import { ViewModeSwitcher } from './ViewModeSwitcher';

    import { cn } from '@/lib/utils';


    interface MyWorkspace extends Workspace {
      logo: string;
      plan: string;
    }


    const mockWorkspaces: MyWorkspace[] = [
      { id: 'ws1', name: 'Acme Inc.', logo: 'https://avatar.vercel.sh/acme.png', plan: 'Pro' },
      { id: 'ws2', name: 'Monsters Inc.', logo: 'https://avatar.vercel.sh/monsters.png', plan: 'Free' },
      { id: 'ws3', name: 'Stark Industries', logo: 'https://avatar.vercel.sh/stark.png', plan: 'Enterprise' },
    ];


    const SidebarWorkspaceTrigger = () => {
      const { isCollapsed, compactMode } = useSidebar();

      return (
        <WorkspaceTrigger
          collapsed={isCollapsed}
          className={cn(
            'rounded-xl transition-colors hover:bg-accent/50 w-full',
            isCollapsed ? 'p-2' : 'p-3 bg-accent/50',
          )}
          avatarClassName={cn(compactMode ? 'h-8 w-8' : 'h-10 w-10')}
        />
      );
    };


    interface SidebarProps {
      onMouseEnter?: () => void;
      onMouseLeave?: () => void;
    }


    export const EnhancedSidebar = React.forwardRef<HTMLDivElement,
    SidebarProps>(
      ({ onMouseEnter, onMouseLeave }, ref) => {
        const { sidebarWidth, compactMode, appName, appLogo } = useAppShell();
        const [selectedWorkspace, setSelectedWorkspace] = React.useState(mockWorkspaces[0]);

        return (
          <Sidebar
            ref={ref}
            style={{ width: sidebarWidth }}
            onMouseEnter={onMouseEnter}
            onMouseLeave={onMouseLeave}
          >
            <SidebarContent>
              <SidebarHeader>
                {appLogo || (
                  <div className="p-2 bg-primary/20 rounded-lg">
                    <Rocket className="w-5 h-5 text-primary" />
                  </div>
                )}
                <SidebarTitle>{appName}</SidebarTitle>
              </SidebarHeader>

              <SidebarBody>
                <SidebarSection title="Main">
                  <AppMenuItem icon={Home} label="Dashboard" page="dashboard" />
                  <AppMenuItem icon={Database} label="Data Demo" page="data-demo" />
                  <AppMenuItem icon={Search} label="Search" />
                  <AppMenuItem icon={Bell} label="Notifications" badge={3} page="notifications" opensInSidePane />
                </SidebarSection>
                
                <SidebarSection title="Workspace" collapsible defaultExpanded>
                  <AppMenuItem icon={FileText} label="Documents" hasActions>
                    <AppMenuItem icon={FileText} label="Recent" isSubItem />
                    <AppMenuItem icon={Star} label="Starred" isSubItem />
                    <AppMenuItem icon={Trash2} label="Trash" isSubItem />
                  </AppMenuItem>
                  <AppMenuItem icon={FolderOpen} label="Projects" hasActions />
                  <AppMenuItem icon={Mail} label="Messages" badge={12} />
                </SidebarSection>
                
                <SidebarSection title="Personal" collapsible>
                  <AppMenuItem icon={Bookmark} label="Bookmarks" />
                  <AppMenuItem icon={Star} label="Favorites" />
                  <AppMenuItem icon={Download} label="Downloads" />
                </SidebarSection>

                <SidebarSection title="Components" collapsible defaultExpanded>
                  <AppMenuItem icon={Component} label="Toaster" page="toaster" />
                </SidebarSection>
              </SidebarBody>

              <SidebarFooter>
                <SidebarSection>
                  <AppMenuItem icon={User} label="Profile" />
                  <AppMenuItem icon={Settings} label="Settings" page="settings" />
                  <AppMenuItem icon={HelpCircle} label="Help" />
                </SidebarSection>

                <div className={cn(compactMode ? 'mt-4' : 'mt-6')}>
                  <Workspaces
                    workspaces={mockWorkspaces}
                    selectedWorkspaceId={selectedWorkspace.id}
                    onWorkspaceChange={setSelectedWorkspace}
                  >
                    <SidebarWorkspaceTrigger />
                    <WorkspaceContent>
                      <button className="flex w-full items-center gap-2 rounded-sm px-2 py-2 text-left text-sm hover:bg-accent hover:text-accent-foreground focus:outline-none">
                        <Plus className="h-4 w-4" />
                        <span>Create Workspace</span>
                      </button>
                    </WorkspaceContent>
                  </Workspaces>
                </div>
              </SidebarFooter>
            </SidebarContent>
          </Sidebar>
        );
      },
    );

    EnhancedSidebar.displayName = 'EnhancedSidebar';



    // Example of a reusable menu item component built with the new Sidebar
    primitives

    interface AppMenuItemProps {
      icon: React.ElementType;
      label: string;
      badge?: number;
      hasActions?: boolean;
      children?: React.ReactNode;
      isSubItem?: boolean;
      page?: ActivePage;
      opensInSidePane?: boolean;
    }


    const AppMenuItem: React.FC<AppMenuItemProps> = ({ icon: Icon, label, badge,
    hasActions, children, isSubItem = false, page, opensInSidePane = false }) =>
    {
      const { handleNavigation, activePage } = useAppStore()
      const { compactMode, bodyState, sidePaneContent, openSidePane, dispatch } = useAppShell()
      const { isCollapsed } = useSidebar();

      const isPageActive = (page: ActivePage) => {
        const pageToSidePaneContent: { [key in ActivePage]?: 'main' | 'settings' | 'toaster' | 'notifications' } = {
          dashboard: 'main',
          settings: 'settings',
          toaster: 'toaster',
          notifications: 'notifications',
          'data-demo': 'main',
        };
        return activePage === page || (bodyState === BODY_STATES.SIDE_PANE && sidePaneContent === pageToSidePaneContent[page]);
      };
      
      const isActive = page ? isPageActive(page) : false;

      const handleClick = () => {
        if (page) {
          if (opensInSidePane) {
            const pageToPaneMap: { [key in ActivePage]?: 'main' | 'settings' | 'toaster' | 'notifications' } = {
              dashboard: 'main',
              settings: 'settings',
              toaster: 'toaster',
              notifications: 'notifications',
              'data-demo': 'main',
            };
            if (pageToPaneMap[page]) openSidePane(pageToPaneMap[page]!)
          } else {
            handleNavigation(page);
          }
        }
      };

      return (
        <div className={isSubItem ? (compactMode ? 'ml-4' : 'ml-6') : ''}>
          <SidebarMenuItem>
            <SidebarMenuButton
              onClick={handleClick}
              isActive={isActive}
              draggable={!!page}
              onDragStart={(_e) => {
                if (page) {
                  // set dragged page in AppShell context
                  dispatch({ type: 'SET_DRAGGED_PAGE', payload: page });
                }
              }}
              onDragEnd={() => {
                dispatch({ type: 'SET_DRAGGED_PAGE', payload: null });
                dispatch({ type: 'SET_DRAG_HOVER_TARGET', payload: null });
              }}
            >
              <SidebarIcon>
                <Icon className={isSubItem ? "w-3 h-3" : "w-4 h-4"}/>
              </SidebarIcon>
              <SidebarLabel>{label}</SidebarLabel>
              {badge && <SidebarBadge>{badge}</SidebarBadge>}
              <SidebarTooltip label={label} badge={badge} />
            </SidebarMenuButton>

            {page && !isCollapsed && (
              <div className={cn(
                "opacity-0 group-hover/item:opacity-100 group-focus-within/item:opacity-100",
                "transition-opacity pointer-events-none group-hover/item:pointer-events-auto shrink-0"
              )}>
                <ViewModeSwitcher targetPage={page} />
              </div>
            )}

            {hasActions && (
              <DropdownMenu>
                <DropdownMenuTrigger asChild>
                  <SidebarMenuAction>
                    <MoreHorizontal className="h-4 w-4" />
                  </SidebarMenuAction>
                </DropdownMenuTrigger>
                <DropdownMenuContent side="right" align="start">
                  <DropdownMenuItem>
                    <span>Edit {label}</span>
                  </DropdownMenuItem>
                  <DropdownMenuItem>
                    <span>Delete {label}</span>
                  </DropdownMenuItem>
                </DropdownMenuContent>
              </DropdownMenu>
            )}
          </SidebarMenuItem>
          {!isCollapsed && children && (
            <div className="space-y-1 mt-1">{children}</div>
          )}
        </div>
      );
    };
approved: false
linesAdded: null
linesRemoved: null
linesDifference: null
gitCommittedAt: null
status: undone
id: 202
