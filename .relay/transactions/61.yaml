uuid: c25cfb07-6b08-466d-9799-a414b4369a47
projectId: amazing-app-shell
createdAt: '2025-10-10T14:28:23.659Z'
gitCommitMsg: >-
  feat(view-management): Integrate Toaster page into view management system

  This commit fully integrates the Toaster Demo page into the app shell's view
  management system, allowing it to be displayed in either the main content area
  or the side pane.

  - Updated the global state to recognize 'toaster' as a valid side pane content
  type. - Sidebar navigation now defaults to opening the Toaster Demo in the
  side pane. - Added controls in the TopBar and RightPane to move the Toaster
  Demo between views. - The MainContent area now displays a placeholder when the
  Toaster Demo is in the side pane. - Adapted the ToasterDemo component with an
  `isInSidePane` prop to prevent layout issues.
promptSummary: >-
  I need to enable the toaster demo page to be movable between the main content
  view and the side pane, similar to the dashboard and settings pages. The
  toaster page should open in the side pane by default when clicked from the
  sidebar.
reasoning:
  - >-
    Of course. As an expert AI programmer, I will implement the requested
    changes to make the "Toaster" page fully integrated into the app shell's
    view management system, including support for main content and side pane
    views.
  - 'Here are the step-by-step changes:'
  - '### Step 1: Update Application State'
  - >-
    First, I'll update the global Zustand store to recognize `'toaster'` as a
    valid content type for the side pane. This allows the app to track when the
    toaster demo is open in the side pane.
  - '### Step 2: Adapt Toaster Demo Component'
  - >-
    To ensure the `ToasterDemo` component displays correctly in both the main
    content area and the more constrained side pane, I'll add an `isInSidePane`
    prop. This prop will conditionally apply the `h-full` class, preventing
    nested scrollbar issues.
  - '### Step 3: Enhance Sidebar Navigation'
  - >-
    I'll modify the `EnhancedSidebar` component. The "Toaster" link will now
    default to opening in the side pane. If it's already open in the main view,
    clicking the link will minimize it to the side pane. I will also update its
    active state logic to reflect when it's open in either view.
  - '### Step 4: Update Top Bar Controls'
  - >-
    I will add a "Move to Side Pane" button to the `TopBar`. This button will
    appear when the Toaster Demo is the active main page, allowing the user to
    minimize it to the side pane.
  - '### Step 5: Update the Right Pane'
  - >-
    Now, I'll enable the `RightPane` to render the `ToasterDemo` component. This
    includes adding the appropriate header, icon, and a "maximize" button to
    move it back to the main content area.
  - '### Step 6: Update Main Content View'
  - >-
    Finally, I'll update the `MainContent` component. When the toaster demo is
    moved to the side pane, the main area will display a placeholder with an
    option to bring the demo back to the main view, ensuring a consistent user
    experience.
  - >-
    These changes fully integrate the Toaster Demo page into the application
    shell's dynamic view system, fulfilling your request.
operations:
  - type: write
    path: src/store/appStore.ts
    content: >+
      --- src/store/appStore.ts

      +++ src/store/appStore.ts

      @@ -8,7 +8,7 @@
         sidebarState: SidebarState
         bodyState: BodyState
         isDarkMode: boolean
      -  sidePaneContent: 'details' | 'settings' | 'main'

      +  sidePaneContent: 'details' | 'settings' | 'main' | 'toaster'
         activePage: ActivePage
         sidebarWidth: number
         rightPaneWidth: number
      @@ -34,7 +34,7 @@
         hideSidebar: () => void
         showSidebar: () => void
         peekSidebar: () => void
         toggleFullscreen: () => void
      -  openSidePane: (content: 'details' | 'settings' | 'main') => void

      +  openSidePane: (content: 'details' | 'settings' | 'main' | 'toaster') =>
      void
         closeSidePane: () => void
         resetToDefaults: () => void
       }
      @@ -103,7 +103,7 @@
               })
             },
             
      -      openSidePane: (content) => {

      +      openSidePane: (content: 'details' | 'settings' | 'main' |
      'toaster') => {
               const { bodyState, sidePaneContent } = get()
               if (bodyState === BODY_STATES.SIDE_PANE && sidePaneContent === content) {
                 // If it's open with same content, close it.

    patchStrategy: standard-diff
  - type: write
    path: src/components/ToasterDemo.tsx
    content: >+
      --- src/components/ToasterDemo.tsx

      +++ src/components/ToasterDemo.tsx

      @@ -17,10 +17,10 @@
         warning: 'border-amber-600 text-amber-600 hover:bg-amber-600/10 dark:hover:bg-amber-400/20',
       }
       
      -export function ToasterDemo() {

      +export function ToasterDemo({ isInSidePane = false }: { isInSidePane?:
      boolean }) {
         const toast = useToast();
       
         const showToast = (variant: Variant, position: Position = 'bottom-right') => {
      @@ -70,7 +70,7 @@
         };
       
         return (
      -    <div className="h-full overflow-y-auto p-6 lg:px-12 space-y-8">

      +    <div className={cn("overflow-y-auto p-6 lg:px-12 space-y-8",
      !isInSidePane && "h-full")}>
             {/* Header */}
             <div className="flex items-center justify-between">
               <div>

    patchStrategy: standard-diff
  - type: write
    path: src/components/EnhancedSidebar.tsx
    content: >+
      --- src/components/EnhancedSidebar.tsx

      +++ src/components/EnhancedSidebar.tsx

      @@ -141,8 +141,8 @@
       
             const isDashboardActive = activePage === 'dashboard';
             const isSettingsActive = activePage === 'settings' || (bodyState === BODY_STATES.SIDE_PANE && sidePaneContent === 'settings');
      -      const isToasterActive = activePage === 'toaster';

      -      const isPageActive = (isDashboard && isDashboardActive) ||
      (isSettings && isSettingsActive) || (isToaster && isToasterActive);

      +      const isToasterActive = activePage === 'toaster' || (bodyState ===
      BODY_STATES.SIDE_PANE && sidePaneContent === 'toaster');

      +      const isPageActive = (isDashboard && isDashboardActive) ||
      (isSettings && isSettingsActive) || (isToaster && isToasterActive);
       
             const handleClick = () => {
               if (isDashboard) {
      @@ -158,7 +158,16 @@
                   openSidePane('settings');
                 }
               } else if (isToaster) {
      -          setActivePage('toaster');

      +          const isToasterInSidePane = bodyState === BODY_STATES.SIDE_PANE
      && sidePaneContent === 'toaster'

      +          // If we're on the toaster page and it's not in the side pane,
      treat this as a "minimize" action.

      +          if (activePage === 'toaster' && !isToasterInSidePane) {

      +            openSidePane('toaster');

      +            setActivePage('dashboard');

      +          } else {

      +            // In all other cases (on dashboard page, or toaster already
      in pane), just toggle the toaster side pane.

      +            openSidePane('toaster');

      +          }
               }
               // Could add logic for other links here if routing was implemented
             };

    patchStrategy: standard-diff
  - type: write
    path: src/components/TopBar.tsx
    content: >+
      --- src/components/TopBar.tsx

      +++ src/components/TopBar.tsx

      @@ -52,6 +52,11 @@
           setActivePage('dashboard');
         }
       
      +  const handleToasterMoveToSidePane = () => {

      +    openSidePane('toaster');

      +    setActivePage('dashboard');

      +  }

      +
         return (
           <div className={cn(
             "h-20 bg-card/80 backdrop-blur-sm border-b border-border flex items-center justify-between px-6 z-50 gap-4",
      @@ -107,12 +112,15 @@
                 {activePage === 'settings' && (
                   <button onClick={handleSettingsMoveToSidePane} className="h-10 w-10 flex items-center justify-center hover:bg-accent rounded-full transition-colors" title="Move to Side Pane"><PanelRight className="w-5 h-5" /></button>
                 )}
      +          {activePage === 'toaster' && (

      +            <button onClick={handleToasterMoveToSidePane} className="h-10
      w-10 flex items-center justify-center hover:bg-accent rounded-full
      transition-colors" title="Move to Side Pane"><PanelRight className="w-5
      h-5" /></button>

      +          )}
               </div>
       
               {/* Separator */}
               <div className={cn(
                 'w-px h-6 bg-border mx-2', 
      -          (activePage !== 'dashboard' && activePage !== 'settings') ||
      (isSearchFocused && activePage === 'dashboard') ? 'hidden' : ''

      +          (activePage !== 'dashboard' && activePage !== 'settings' &&
      activePage !== 'toaster') || (isSearchFocused && activePage ===
      'dashboard') ? 'hidden' : ''
               )} />
       
               {/* Quick Actions */}

    patchStrategy: standard-diff
  - type: write
    path: src/components/RightPane.tsx
    content: >+
      --- src/components/RightPane.tsx

      +++ src/components/RightPane.tsx

      @@ -1,17 +1,19 @@
       import { forwardRef } from 'react'
      -import { SlidersHorizontal, Settings, ChevronRight, LayoutDashboard,
      ChevronsLeftRight } from 'lucide-react'

      +import { SlidersHorizontal, Settings, ChevronRight, LayoutDashboard,
      ChevronsLeftRight, Component } from 'lucide-react'
       import { useAppStore } from '@/store/appStore'
       import { cn } from '@/lib/utils'
       import { SettingsContent } from './SettingsContent'
       import { DashboardContent } from './DashboardContent'
      +import { ToasterDemo } from './ToasterDemo'
       
       export const RightPane = forwardRef<HTMLDivElement>((_props, ref) => {
         const { closeSidePane, setIsResizingRightPane, sidePaneContent, setActivePage } = useAppStore()
       
         const isSettings = sidePaneContent === 'settings'
         const isMain = sidePaneContent === 'main'
      +  const isToaster = sidePaneContent === 'toaster'
       
         const handleMaximize = () => {
           if (isMain) {
             setActivePage('dashboard')
           } else if (isSettings) {
             setActivePage('settings')
      +    } else if (isToaster) {

      +      setActivePage('toaster')
           }
           closeSidePane()
         }
      @@ -37,14 +39,15 @@
               <div className="flex items-center gap-2">
                 {isMain && <LayoutDashboard className="w-5 h-5" />}
                 {isSettings && <Settings className="w-5 h-5" />}
      -          {!isMain && !isSettings && <SlidersHorizontal className="w-5
      h-5" />}

      +          {isToaster && <Component className="w-5 h-5" />}

      +          {!isMain && !isSettings && !isToaster && <SlidersHorizontal
      className="w-5 h-5" />}
                 <h2 className="text-lg font-semibold whitespace-nowrap">
      -            {isMain ? 'Dashboard' : isSettings ? 'Settings' : 'Details
      Panel'}

      +            {isMain ? 'Dashboard' : isSettings ? 'Settings' : isToaster ?
      'Toaster Demo' : 'Details Panel'}
                 </h2>
               </div>
               
      -        {(isMain || isSettings) && (

      +        {(isMain || isSettings || isToaster) && (
                 <button
                   onClick={handleMaximize}
                   className="h-10 w-10 flex items-center justify-center hover:bg-accent rounded-full transition-colors mr-2"
      @@ -58,6 +61,8 @@
                 <div className="px-8 py-6 h-full"><DashboardContent isInSidePane={true} /></div>
               ) : isSettings ? (
                 <div className="px-8 py-6"><SettingsContent /></div>
      +        ) : isToaster ? (

      +          <div className="px-8 py-6 h-full"><ToasterDemo
      isInSidePane={true} /></div>
               ) : (
                 <div className="px-8 py-6"><p className="text-muted-foreground">This is the side pane. It can be used to display contextual information, forms, or actions related to the main content.</p></div>
               )}

    patchStrategy: standard-diff
  - type: write
    path: src/components/MainContent.tsx
    content: >+
      --- src/components/MainContent.tsx

      +++ src/components/MainContent.tsx

      @@ -4,6 +4,7 @@
         LayoutDashboard,
         ChevronsLeftRight,
         Settings,
      +  Component,
       } from 'lucide-react'
       import { cn } from '@/lib/utils'
       import { BODY_STATES, type BodyState } from '@/lib/utils'
      @@ -19,6 +20,7 @@
       
           const isDashboardInSidePane = sidePaneContent === 'main' && bodyState === BODY_STATES.SIDE_PANE
           const isSettingsInSidePane = sidePaneContent === 'settings' && bodyState === BODY_STATES.SIDE_PANE
      +    const isToasterInSidePane = sidePaneContent === 'toaster' &&
      bodyState === BODY_STATES.SIDE_PANE
       
           const renderContent = () => {
             if (activePage === 'dashboard') {
      @@ -62,13 +64,36 @@
               return <SettingsPage />
             }
             if (activePage === 'toaster') {
      +        if (isToasterInSidePane) {

      +          return (

      +            <div className="flex-1 flex flex-col items-center
      justify-center text-center">

      +              <Component className="w-16 h-16 text-muted-foreground/50
      mb-4" />

      +              <h2 className="text-2xl font-bold">Toaster Demo is in Side
      Pane</h2>

      +              <p className="text-muted-foreground mt-2 max-w-md">

      +                You've moved the toaster demo to the side pane. You can
      bring it back to the main view.

      +              </p>

      +              <button

      +                onClick={() => {

      +                  openSidePane('toaster'); // This will close it

      +                  setActivePage('toaster');

      +                }}

      +                className="mt-6 bg-primary text-primary-foreground px-4
      py-2 rounded-full hover:bg-primary/90 transition-colors flex items-center
      gap-2 h-10"

      +              >

      +                <ChevronsLeftRight className="w-5 h-5" />

      +                <span>Bring Toaster Demo Back</span>

      +              </button>

      +            </div>

      +          )

      +        }
               return <ToasterDemo />
             }
             return null;
           }
           
      -    const isContentVisible = (activePage === 'dashboard' &&
      !isDashboardInSidePane) || (activePage === 'settings' &&
      !isSettingsInSidePane) || activePage === 'toaster';

      +    const isContentVisible = (activePage === 'dashboard' &&
      !isDashboardInSidePane) || 

      +                           (activePage === 'settings' &&
      !isSettingsInSidePane) || 

      +                           (activePage === 'toaster' &&
      !isToasterInSidePane);
       
           return (
             <div

    patchStrategy: standard-diff
snapshot:
  src/components/ToasterDemo.tsx: |-
    import { Button } from '@/components/ui/button';
    import { useToast } from '@/components/ui/toast';
    import { cn } from '@/lib/utils';

    type Variant = 'default' | 'success' | 'error' | 'warning';
    type Position =
      | 'top-left'
      | 'top-center'
      | 'top-right'
      | 'bottom-left'
      | 'bottom-center'
      | 'bottom-right';

    const variantColors = {
      default: 'border-border text-foreground hover:bg-muted/10 dark:hover:bg-muted/20',
      success: 'border-green-600 text-green-600 hover:bg-green-600/10 dark:hover:bg-green-400/20',
      error: 'border-destructive text-destructive hover:bg-destructive/10 dark:hover:bg-destructive/20',
      warning: 'border-amber-600 text-amber-600 hover:bg-amber-600/10 dark:hover:bg-amber-400/20',
    }

    export function ToasterDemo() {
      const toast = useToast();

      const showToast = (variant: Variant, position: Position = 'bottom-right') => {
        toast.show({
          title: `${variant.charAt(0).toUpperCase() + variant.slice(1)} Notification`,
          message: `This is a ${variant} toast notification.`,
          variant,
          position,
          duration: 3000,
          onDismiss: () =>
            console.log(`${variant} toast at ${position} dismissed`),
        });
      };

      const simulateApiCall = async () => {
        toast.show({
          title: 'Scheduling...',
          message: 'Please wait while we schedule your meeting.',
          variant: 'default',
          position: 'bottom-right',
        });

        try {
          await new Promise((resolve) => setTimeout(resolve, 2000));

          toast.show({
            title: 'Meeting Scheduled',
            message: 'Your meeting is scheduled for July 4, 2025, at 3:42 PM IST.',
            variant: 'success',
            position: 'bottom-right',
            highlightTitle: true,
            actions: {
              label: 'Undo',
              onClick: () => console.log('Undoing meeting schedule'),
              variant: 'outline',
            },
          });
        } catch (error) {
          toast.show({
            title: 'Error Scheduling Meeting',
            message: 'Failed to schedule the meeting. Please try again.',
            variant: 'error',
            position: 'bottom-right',
          });
        }
      };

      return (
        <div className="h-full overflow-y-auto p-6 lg:px-12 space-y-8">
          {/* Header */}
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-3xl font-bold tracking-tight">Toaster</h1>
              <p className="text-muted-foreground">
                A customizable toast component for notifications.
              </p>
            </div>
          </div>

          <div className="space-y-6">
            <div className="space-y-6">
              <section>
                <h2 className="text-lg font-semibold mb-2">Toast Variants</h2>
                <div className="flex flex-wrap gap-4">
                  {(['default', 'success', 'error', 'warning'] as Variant[]).map((variantKey) => (
                    <Button
                      key={variantKey}
                      variant="outline"
                      onClick={() => showToast(variantKey as Variant)}
                      className={cn(variantColors[variantKey])}
                    >
                      {variantKey.charAt(0).toUpperCase() + variantKey.slice(1)} Toast
                    </Button>
                  ))}
                </div>
              </section>

              <section>
                <h2 className="text-lg font-semibold mb-2">Toast Positions</h2>
                <div className="flex flex-wrap gap-4">
                  {[
                    'top-left',
                    'top-center',
                    'top-right',
                    'bottom-left',
                    'bottom-center',
                    'bottom-right',
                  ].map((positionKey) => (
                    <Button
                      key={positionKey}
                      variant="outline"
                      onClick={() =>
                        showToast('default', positionKey as Position)
                      }
                      className="border-border text-foreground hover:bg-muted/10 dark:hover:bg-muted/20"
                    >
                      {positionKey
                        .replace('-', ' ')
                        .replace(/\b\w/g, (char) => char.toUpperCase())}
                    </Button>
                  ))}
                </div>
              </section>

              <section>
                <h2 className="text-lg font-semibold mb-2">Real‑World Example</h2>
                <Button
                  variant="outline"
                  onClick={simulateApiCall}
                  className="border-border text-foreground hover:bg-muted/10 dark:hover:bg-muted/20"
                >
                  Schedule Meeting
                </Button>
              </section>
            </div>
          </div>
        </div>
      );
    }
  src/components/EnhancedSidebar.tsx: |-
    import React, { forwardRef, useRef, useEffect } from 'react'
    import { gsap } from 'gsap'
    import { 
      Home, 
      Search, 
      Bell, 
      User, 
      Settings, 
      HelpCircle, 
      FileText, 
      Calendar, 
      Mail,
      FolderOpen,
      Bookmark,
      Download,
      Star,
      Trash2,
      ChevronDown,
      Layout,
      Component
    } from 'lucide-react'
    import { cn } from '@/lib/utils'
    import { useAppStore } from '@/store/appStore'
    import { SIDEBAR_STATES, BODY_STATES } from '@/lib/utils'

    interface NavItem {
      icon: React.ReactNode
      label: string
      href: string
      badge?: number
      isActive?: boolean
      children?: NavItem[]
    }

    interface NavSection {
      title: string
      items: NavItem[]
      collapsible?: boolean
      defaultExpanded?: boolean
    }

    const navigationSections: NavSection[] = [
      {
        title: "Main",
        items: [
          { icon: <Home className="w-4 h-4" />, label: "Dashboard", href: "/" },
          { icon: <Search className="w-4 h-4" />, label: "Search", href: "/search" },
          { icon: <Bell className="w-4 h-4" />, label: "Notifications", href: "/notifications", badge: 3 },
        ]
      },
      {
        title: "Workspace",
        collapsible: true,
        defaultExpanded: true,
        items: [
          { 
            icon: <FileText className="w-4 h-4" />, 
            label: "Documents", 
            href: "/documents",
            children: [
              { icon: <FileText className="w-3 h-3" />, label: "Recent", href: "/documents/recent" },
              { icon: <Star className="w-3 h-3" />, label: "Starred", href: "/documents/starred" },
              { icon: <Trash2 className="w-3 h-3" />, label: "Trash", href: "/documents/trash" },
            ]
          },
          { icon: <FolderOpen className="w-4 h-4" />, label: "Projects", href: "/projects" },
          { icon: <Calendar className="w-4 h-4" />, label: "Calendar", href: "/calendar" },
          { icon: <Mail className="w-4 h-4" />, label: "Messages", href: "/messages", badge: 12 },
        ]
      },
      {
        title: "Personal",
        collapsible: true,
        defaultExpanded: false,
        items: [
          { icon: <Bookmark className="w-4 h-4" />, label: "Bookmarks", href: "/bookmarks" },
          { icon: <Star className="w-4 h-4" />, label: "Favorites", href: "/favorites" },
          { icon: <Download className="w-4 h-4" />, label: "Downloads", href: "/downloads" },
        ]
      },
      {
        title: "Components",
        collapsible: true,
        defaultExpanded: true,
        items: [
          { icon: <Component className="w-4 h-4" />, label: "Toaster", href: "/toaster" }
        ]
      }
    ]

    const bottomNavItems: NavItem[] = [
      { icon: <User className="w-4 h-4" />, label: "Profile", href: "/profile" },
      { icon: <Settings className="w-4 h-4" />, label: "Settings", href: "/settings" },
      { icon: <HelpCircle className="w-4 h-4" />, label: "Help", href: "/help" },
    ]

    interface SidebarProps {
      onMouseEnter?: () => void
      onMouseLeave?: () => void
    }

    export const EnhancedSidebar = forwardRef<HTMLDivElement, SidebarProps>(
      ({ onMouseEnter, onMouseLeave }, ref) => {
        const { sidebarState, sidebarWidth, reducedMotion, compactMode, activePage, setActivePage, openSidePane, bodyState, sidePaneContent } = useAppStore()
        const contentRef = useRef<HTMLDivElement>(null)
        const sectionsRef = useRef<(HTMLDivElement | null)[]>([])
        const [expandedSections, setExpandedSections] = React.useState<Set<string>>(
          new Set(navigationSections.filter(s => s.defaultExpanded).map(s => s.title))
        )

        const isCollapsed = sidebarState === SIDEBAR_STATES.COLLAPSED
        const isHidden = sidebarState === SIDEBAR_STATES.HIDDEN
        const isPeek = sidebarState === SIDEBAR_STATES.PEEK
        const animationDuration = reducedMotion ? 0.1 : 0.3

        // Toggle section expansion
        const toggleSection = (sectionTitle: string) => {
          setExpandedSections(prev => {
            const newSet = new Set(prev)
            if (newSet.has(sectionTitle)) {
              newSet.delete(sectionTitle)
            } else {
              newSet.add(sectionTitle)
            }
            return newSet
          })
        }

        // Animate content visibility
        useEffect(() => {
          if (!contentRef.current) return

          const labels = contentRef.current.querySelectorAll('.nav-label')
          const badges = contentRef.current.querySelectorAll('.nav-badge')
          const sectionTitles = contentRef.current.querySelectorAll('.section-title')
          const chevrons = contentRef.current.querySelectorAll('.section-chevron')

          if (isCollapsed) {
            gsap.to([labels, badges, sectionTitles, chevrons], {
              opacity: 0,
              scale: 0.8,
              duration: animationDuration,
              ease: "power2.out"
            })
          } else {
            gsap.to([labels, badges, sectionTitles, chevrons], {
              opacity: 1,
              scale: 1,
              duration: animationDuration,
              delay: 0.1,
              ease: "power2.out"
            })
          }
        }, [isCollapsed, animationDuration])

        // Hover animations for nav items
        const handleItemHover = (element: HTMLElement, isHovering: boolean) => {
          if (!element) return

          gsap.to(element, {
            scale: isHovering ? 1.02 : 1,
            x: isHovering ? 4 : 0,
            duration: animationDuration,
            ease: "power2.out"
          })
        }

        if (isHidden) {
          return null
        }

        const renderNavItem = (item: NavItem, depth = 0) => {
          const pageName = item.label.toLowerCase();
          const isDashboard = pageName === 'dashboard';
          const isSettings = pageName === 'settings';
          const isToaster = pageName === 'toaster';

          const isDashboardActive = activePage === 'dashboard';
          const isSettingsActive = activePage === 'settings' || (bodyState === BODY_STATES.SIDE_PANE && sidePaneContent === 'settings');
          const isToasterActive = activePage === 'toaster';
          const isPageActive = (isDashboard && isDashboardActive) || (isSettings && isSettingsActive) || (isToaster && isToasterActive);

          const handleClick = () => {
            if (isDashboard) {
              setActivePage('dashboard');
            } else if (isSettings) {
              const isSettingsInSidePane = bodyState === BODY_STATES.SIDE_PANE && sidePaneContent === 'settings'
              // If we're on the settings page and it's not in the side pane, treat this as a "minimize" action.
              if (activePage === 'settings' && !isSettingsInSidePane) {
                openSidePane('settings');
                setActivePage('dashboard');
              } else {
                // In all other cases (on dashboard page, or settings already in pane), just toggle the settings side pane.
                openSidePane('settings');
              }
            } else if (isToaster) {
              setActivePage('toaster');
            }
            // Could add logic for other links here if routing was implemented
          };

          return (
            <div key={item.label} className={cn("space-y-1", depth > 0 && "ml-6")}>
            <button
              className={cn(
                "group relative flex items-center gap-3 rounded-lg cursor-pointer transition-all duration-200 w-full text-left",
                compactMode ? "px-2 py-1.5" : "px-4 py-2.5",
                "hover:bg-accent",
                (item.isActive || isPageActive) && "bg-primary text-primary-foreground hover:bg-primary/90",
                depth > 0 && "text-sm",
                isCollapsed && "justify-center"
              )}
              onMouseEnter={(e) => handleItemHover(e.currentTarget, true)}
              onMouseLeave={(e) => handleItemHover(e.currentTarget, false)}
              onClick={handleClick}
            >
              <div className="flex-shrink-0">
                {item.icon}
              </div>
              
              {!isCollapsed && (
                <>
                  <span className="nav-label flex-1 font-medium truncate">
                    {item.label}
                  </span>
                  
                  {item.badge && (
                    <span className="nav-badge bg-destructive text-destructive-foreground text-xs px-1.5 py-0.5 rounded-full min-w-[1.25rem] text-center">
                      {item.badge > 99 ? '99+' : item.badge}
                    </span>
                  )}

                  {item.children && (
                    <ChevronDown className="w-3 h-3 transition-transform" />
                  )}
                </>
              )}

              {/* Tooltip for collapsed state */}
              {isCollapsed && (
                <div className="absolute left-full ml-2 px-2 py-1 bg-popover text-popover-foreground text-sm rounded-md shadow-lg opacity-0 group-hover:opacity-100 transition-opacity pointer-events-none whitespace-nowrap z-50">
                  {item.label}
                  {item.badge && (
                    <span className="ml-2 bg-destructive text-destructive-foreground text-xs px-1.5 py-0.5 rounded-full">
                      {item.badge > 99 ? '99+' : item.badge}
                    </span>
                  )}
                </div>
              )}
            </button>

            {/* Children items */}
            {item.children && !isCollapsed && (
              <div className="space-y-1">
                {item.children.map(child => renderNavItem(child, depth + 1))}
              </div>
            )}
          </div>
          )
        }

        return (
          <div
            ref={ref}
            className={cn(
              "relative bg-card flex-shrink-0",
              "h-full overflow-hidden",
              isPeek && "shadow-xl z-40",
              compactMode && "text-sm"
            )}
            style={{ width: sidebarWidth }}
            onMouseEnter={onMouseEnter}
            onMouseLeave={onMouseLeave}
          >
            {/* Background blur effect for peek mode */}
            {isPeek && (
              <div className="absolute inset-0 bg-background/80 backdrop-blur-sm" />
            )}

            <div 
              ref={contentRef}
              className={cn(
                "relative z-10 h-full flex flex-col",
                compactMode ? "p-3" : "p-4"
              )}
            >
              {/* Logo */}
              <div
                className={cn(
                  "flex items-center gap-3",
                  isCollapsed ? "justify-center" : "",
                  compactMode ? "h-10" : "h-16"
                )}
              >
                <div className="w-10 h-10 bg-gradient-to-br from-primary to-primary/60 rounded-full flex items-center justify-center flex-shrink-0">
                  <Layout className="w-5 h-5 text-primary-foreground" />
                </div>
                {!isCollapsed && (
                  <span className="font-semibold text-xl text-foreground nav-label truncate">
                    AppShell
                  </span>
                )}
              </div>

              {/* Navigation Sections */}
              <div className="flex-1 overflow-y-auto overflow-x-hidden space-y-6 pt-4">
                {navigationSections.map((section, sectionIndex) => {
                  const isExpanded = expandedSections.has(section.title)
                  
                  return (
                    <div 
                      key={section.title}
                      ref={el => sectionsRef.current[sectionIndex] = el}
                      className="space-y-1"
                    >
                      {!isCollapsed && (
                        <div 
                          className={cn(
                            "flex items-center justify-between px-3 text-xs font-medium text-muted-foreground uppercase tracking-wider",
                            section.collapsible && "cursor-pointer hover:text-foreground transition-colors"
                          )}
                          onClick={() => section.collapsible && toggleSection(section.title)}
                        >
                          <span className="section-title">{section.title}</span>
                          {section.collapsible && (
                            <ChevronDown 
                              className={cn(
                                "section-chevron w-3 h-3 transition-transform",
                                isExpanded ? "rotate-0" : "-rotate-90"
                              )} 
                            />
                          )}
                        </div>
                      )}
                      
                      {(!section.collapsible || isExpanded || isCollapsed) && (
                        <nav className="space-y-1">
                          {section.items.map(item => renderNavItem(item))}
                        </nav>
                      )}
                    </div>
                  )
                })}
              </div>

              {/* Bottom Navigation */}
              <div className={cn("pt-4 border-t border-border", compactMode && "pt-3")}>
                <nav className="space-y-1">
                  {bottomNavItems.map((item) => renderNavItem(item))}
                </nav>

                {/* User Profile */}
                {!isCollapsed && (
                  <div className={cn("mt-6 p-3 bg-accent/50 rounded-xl", compactMode && "mt-4 p-2")}>
                    <div className="flex items-center gap-3">
                      <div className={cn("bg-primary rounded-full flex items-center justify-center", compactMode ? "w-8 h-8" : "w-10 h-10")}>
                        <User className={cn("text-primary-foreground", compactMode ? "w-4 h-4" : "w-5 h-5")} />
                      </div>
                      <div className="flex-1 min-w-0">
                        <p className={cn("font-medium truncate nav-label", compactMode ? "text-xs" : "text-sm")}>John Doe</p>
                        <p className={cn("text-muted-foreground truncate nav-label", compactMode ? "text-[11px]" : "text-xs")}>john@example.com</p>
                      </div>
                    </div>
                  </div>
                )}
              </div>
            </div>
          </div>
        )
      }
    )

    EnhancedSidebar.displayName = "EnhancedSidebar"
  src/store/appStore.ts: >-
    import { create } from 'zustand'

    import { persist } from 'zustand/middleware'

    import { SIDEBAR_STATES, BODY_STATES, type SidebarState, type BodyState }
    from '@/lib/utils'


    export type ActivePage = 'dashboard' | 'settings' | 'toaster';


    interface AppState {
      // UI States
      sidebarState: SidebarState
      bodyState: BodyState
      isDarkMode: boolean
      sidePaneContent: 'details' | 'settings' | 'main'
      activePage: ActivePage
      sidebarWidth: number
      rightPaneWidth: number
      isResizing: boolean
      isResizingRightPane: boolean
      isTopBarVisible: boolean
      searchTerm: string
      
      // User Preferences
      autoExpandSidebar: boolean
      reducedMotion: boolean
      compactMode: boolean
      primaryColor: string
      
      // Actions
      setSidebarState: (state: SidebarState) => void
      setBodyState: (state: BodyState) => void
      toggleDarkMode: () => void
      setActivePage: (page: ActivePage) => void
      setSidebarWidth: (width: number) => void
      setRightPaneWidth: (width: number) => void
      setIsResizing: (resizing: boolean) => void
      setIsResizingRightPane: (resizing: boolean) => void
      setTopBarVisible: (visible: boolean) => void
      setAutoExpandSidebar: (auto: boolean) => void
      setReducedMotion: (reduced: boolean) => void
      setCompactMode: (compact: boolean) => void
      setPrimaryColor: (color: string) => void
      setSearchTerm: (term: string) => void
      
      // Composite Actions
      toggleSidebar: () => void
      hideSidebar: () => void
      showSidebar: () => void
      peekSidebar: () => void
      toggleFullscreen: () => void
      openSidePane: (content: 'details' | 'settings' | 'main') => void
      closeSidePane: () => void
      resetToDefaults: () => void
    }


    const defaultState = {
      sidebarState: SIDEBAR_STATES.EXPANDED as SidebarState,
      bodyState: BODY_STATES.NORMAL as BodyState,
      sidePaneContent: 'details' as const,
      activePage: 'dashboard' as ActivePage,
      isDarkMode: false,
      sidebarWidth: 280,
      rightPaneWidth: typeof window !== 'undefined' ? Math.max(300, Math.round(window.innerWidth * 0.6)) : 400,
      isResizing: false,
      isResizingRightPane: false,
      isTopBarVisible: true,
      autoExpandSidebar: true,
      reducedMotion: false,
      compactMode: false,
      primaryColor: '220 84% 60%',
      searchTerm: '',
    }


    export const useAppStore = create<AppState>()(
      persist(
        (set, get) => ({
          ...defaultState,
          
          // Basic setters
          sidePaneContent: 'details',
          setSidebarState: (state) => set({ sidebarState: state }),
          setBodyState: (state) => set({ bodyState: state }),
          setActivePage: (page) => set({ activePage: page }),
          toggleDarkMode: () => {
            const newMode = !get().isDarkMode
            set({ isDarkMode: newMode })
            document.documentElement.classList.toggle('dark', newMode)
          },
          setSidebarWidth: (width) => set({ sidebarWidth: Math.max(200, Math.min(500, width)) }),
          setRightPaneWidth: (width) => set({ rightPaneWidth: Math.max(300, Math.min(window.innerWidth * 0.8, width)) }),
          setIsResizing: (resizing) => set({ isResizing: resizing }),
          setIsResizingRightPane: (resizing) => set({ isResizingRightPane: resizing }),
          setTopBarVisible: (visible) => set({ isTopBarVisible: visible }),
          setAutoExpandSidebar: (auto) => set({ autoExpandSidebar: auto }),
          setReducedMotion: (reduced) => set({ reducedMotion: reduced }),
          setCompactMode: (compact) => set({ compactMode: compact }),
          setPrimaryColor: (color) => set({ primaryColor: color }),
          setSearchTerm: (term) => set({ searchTerm: term }),
          
          // Composite actions
          toggleSidebar: () => {
            const current = get().sidebarState
            if (current === SIDEBAR_STATES.HIDDEN) {
              set({ sidebarState: SIDEBAR_STATES.COLLAPSED })
            } else if (current === SIDEBAR_STATES.COLLAPSED) {
              set({ sidebarState: SIDEBAR_STATES.EXPANDED })
            } else if (current === SIDEBAR_STATES.EXPANDED) {
              set({ sidebarState: SIDEBAR_STATES.COLLAPSED })
            }
          },
          
          hideSidebar: () => set({ sidebarState: SIDEBAR_STATES.HIDDEN }),
          showSidebar: () => set({ sidebarState: SIDEBAR_STATES.EXPANDED }),
          peekSidebar: () => set({ sidebarState: SIDEBAR_STATES.PEEK }),
          
          toggleFullscreen: () => {
            const current = get().bodyState
            set({ 
              bodyState: current === BODY_STATES.FULLSCREEN ? BODY_STATES.NORMAL : BODY_STATES.FULLSCREEN 
            })
          },
          
          openSidePane: (content) => {
            const { bodyState, sidePaneContent } = get()
            if (bodyState === BODY_STATES.SIDE_PANE && sidePaneContent === content) {
              // If it's open with same content, close it.
              set({ bodyState: BODY_STATES.NORMAL });
            } else {
              // If closed, or different content, open with new content.
              set({ bodyState: BODY_STATES.SIDE_PANE, sidePaneContent: content });
            }
          },
          closeSidePane: () => {
            set({ bodyState: BODY_STATES.NORMAL })
          },
          
          resetToDefaults: () => {
            set(defaultState)
            // Also reset dark mode class on html element
            if (defaultState.isDarkMode) {
              document.documentElement.classList.add('dark')
            } else {
              document.documentElement.classList.remove('dark')
            }
          },
        }),
        {
          name: 'app-preferences',
          partialize: (state) => ({
            sidebarState: state.sidebarState,
            bodyState: state.bodyState,
            activePage: state.activePage,
            sidePaneContent: state.sidePaneContent,
            isDarkMode: state.isDarkMode,
            sidebarWidth: state.sidebarWidth,
            rightPaneWidth: state.rightPaneWidth,
            autoExpandSidebar: state.autoExpandSidebar,
            reducedMotion: state.reducedMotion,
            compactMode: state.compactMode,
            primaryColor: state.primaryColor,
            // searchTerm is not persisted
          }),
        }
      )
    )


    // Initialize dark mode on load

    if (typeof window !== 'undefined') {
      const stored = localStorage.getItem('app-preferences')
      if (stored) {
        const parsed = JSON.parse(stored)
        if (parsed.state?.isDarkMode) {
          document.documentElement.classList.add('dark')
        }
      }
    }
  src/components/TopBar.tsx: |-
    import { useState } from 'react'
    import {
      Menu, 
      Maximize, 
      Minimize, 
      Moon, 
      Sun,
      Settings,
      Command,
      Zap,
      ChevronRight,
      Search,
      Filter,
      Plus,
      PanelRight,
    } from 'lucide-react'
    import { cn } from '@/lib/utils'
    import { BODY_STATES } from '@/lib/utils'
    import { useAppStore } from '@/store/appStore'

    interface TopBarProps {
      onToggleSidebar: () => void
      onToggleFullscreen: () => void
      onToggleDarkMode: () => void
    }

    export function TopBar({
      onToggleSidebar,
      onToggleFullscreen,
      onToggleDarkMode
    }: TopBarProps) {
      const { 
        bodyState, 
        isDarkMode, 
        openSidePane,
        sidePaneContent,
        activePage,
        setActivePage,
        searchTerm,
        setSearchTerm,
      } = useAppStore()

      const [isSearchFocused, setIsSearchFocused] = useState(false)

      const handleSettingsClick = () => {
        const isSettingsInSidePane = bodyState === BODY_STATES.SIDE_PANE && sidePaneContent === 'settings'

        // If we're on the settings page and it's not in the side pane, treat this as a "minimize" action.
        if (activePage === 'settings' && !isSettingsInSidePane) {
          openSidePane('settings');
          setActivePage('dashboard');
        } else {
          // In all other cases (on dashboard page, or settings already in pane),
          // just toggle the settings side pane.
          openSidePane('settings');
        }
      }

      const handleDashboardMoveToSidePane = () => {
        openSidePane('main');
      };

      const handleSettingsMoveToSidePane = () => {
        openSidePane('settings');
        setActivePage('dashboard');
      }

      return (
        <div className={cn(
          "h-20 bg-card/80 backdrop-blur-sm border-b border-border flex items-center justify-between px-6 z-50 gap-4",
          {
            'transition-all duration-300 ease-in-out': activePage === 'dashboard',
          }
        )}>
          {/* Left Section - Sidebar Controls & Breadcrumbs */}
          <div className="flex items-center gap-4">
            {/* Sidebar Controls */}
            <button
              onClick={onToggleSidebar}
              className={cn(
                "h-10 w-10 flex items-center justify-center rounded-full hover:bg-accent transition-colors"
              )}
              title="Toggle Sidebar"
            >
              <Menu className="w-5 h-5" />
            </button>

            {/* Breadcrumbs */}
            <div className={cn("hidden md:flex items-center gap-2 text-sm transition-opacity", {
              "opacity-0 pointer-events-none": isSearchFocused && activePage === 'dashboard'
            })}>
              <a href="#" className="text-muted-foreground hover:text-foreground transition-colors">Home</a>
              <ChevronRight className="w-4 h-4 text-muted-foreground" />
              <span className="font-medium text-foreground capitalize">{activePage}</span>
            </div>
          </div>

          {/* Right Section - Search, page controls, and global controls */}
          <div className={cn("flex items-center gap-3", isSearchFocused && activePage === 'dashboard' ? 'flex-1' : '')}>
            {/* Page-specific: Dashboard search and actions */}
            {activePage === 'dashboard' && (
              <div className="flex items-center gap-2 flex-1 justify-end">
                <div className={cn("relative transition-all duration-300 ease-in-out", isSearchFocused ? 'flex-1 max-w-lg' : 'w-auto')}>
                  <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4 pointer-events-none" />
                  <input
                    type="text"
                    placeholder="Search..."
                    value={searchTerm}
                    onFocus={() => setIsSearchFocused(true)}
                    onBlur={() => setIsSearchFocused(false)}
                    onChange={(e) => setSearchTerm(e.target.value)}
                    className={cn(
                      "pl-9 pr-4 py-2 h-10 border-none rounded-lg bg-card focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent transition-all duration-300 ease-in-out w-full",
                      isSearchFocused ? 'bg-background' : 'w-48'
                    )}
                  />
                </div>
                 <button className="h-10 w-10 flex-shrink-0 flex items-center justify-center hover:bg-accent rounded-full transition-colors">
                  <Filter className="w-5 h-5" />
                </button>
                 <button className="bg-primary text-primary-foreground px-4 py-2 rounded-full hover:bg-primary/90 transition-colors flex items-center gap-2 h-10 flex-shrink-0">
                  <Plus className="w-5 h-5" />
                  <span className={cn(isSearchFocused ? 'hidden sm:inline' : 'inline')}>New Project</span>
                </button>
              </div>
            )}
            
            {/* Page-specific: Move to side pane */}
            <div className={cn('flex items-center', isSearchFocused && activePage === 'dashboard' ? 'hidden md:flex' : '')}>
              {activePage === 'dashboard' && (
                <button onClick={handleDashboardMoveToSidePane} className="h-10 w-10 flex items-center justify-center hover:bg-accent rounded-full transition-colors" title="Move to Side Pane"><PanelRight className="w-5 h-5" /></button>
              )}
              {activePage === 'settings' && (
                <button onClick={handleSettingsMoveToSidePane} className="h-10 w-10 flex items-center justify-center hover:bg-accent rounded-full transition-colors" title="Move to Side Pane"><PanelRight className="w-5 h-5" /></button>
              )}
            </div>

            {/* Separator */}
            <div className={cn(
              'w-px h-6 bg-border mx-2', 
              (activePage !== 'dashboard' && activePage !== 'settings') || (isSearchFocused && activePage === 'dashboard') ? 'hidden' : ''
            )} />

            {/* Quick Actions */}
            <div className={cn('flex items-center gap-3', isSearchFocused && activePage === 'dashboard' ? 'hidden lg:flex' : '')}>

              <button
                className="h-10 w-10 flex items-center justify-center rounded-full hover:bg-accent transition-colors group"
                title="Command Palette (Ctrl+K)"
              >
                <Command className="w-5 h-5 group-hover:scale-110 transition-transform" />
              </button>

            <button
              className="h-10 w-10 flex items-center justify-center rounded-full hover:bg-accent transition-colors group"
              title="Quick Actions"
            >
              <Zap className="w-5 h-5 group-hover:scale-110 transition-transform" />
            </button>

            {/* Body State Controls */}
            <button
              onClick={() => openSidePane('details')}
              className={cn(
                "h-10 w-10 flex items-center justify-center rounded-full hover:bg-accent transition-colors group",
                bodyState === BODY_STATES.SIDE_PANE && sidePaneContent === 'details' && "bg-accent"
              )}
              title="Toggle Side Pane"
            >
              <div className="w-5 h-5 flex group-hover:scale-110 transition-transform">
                <div className="w-1/2 h-full bg-current opacity-60 rounded-l-sm" />
                <div className="w-1/2 h-full bg-current rounded-r-sm" />
              </div>
            </button>

            <button
              onClick={onToggleFullscreen}
              className={cn(
                "h-10 w-10 flex items-center justify-center rounded-full hover:bg-accent transition-colors group",
                bodyState === BODY_STATES.FULLSCREEN && "bg-accent"
              )}
              title="Toggle Fullscreen"
            >
              {bodyState === BODY_STATES.FULLSCREEN ? (
                <Minimize className="w-5 h-5 group-hover:scale-110 transition-transform" />
              ) : (
                <Maximize className="w-5 h-5 group-hover:scale-110 transition-transform" />
              )}
            </button>

            <div className="w-px h-6 bg-border mx-2" />

            {/* Theme and Settings */}
            <button
              onClick={onToggleDarkMode}
              className="h-10 w-10 flex items-center justify-center rounded-full hover:bg-accent transition-colors group"
              title="Toggle Dark Mode"
            >
              {isDarkMode ? (
                <Sun className="w-5 h-5 group-hover:scale-110 transition-transform" />
              ) : (
                <Moon className="w-5 h-5 group-hover:scale-110 transition-transform" />
              )}
            </button>

            <button
              onClick={handleSettingsClick}
              className="h-10 w-10 flex items-center justify-center rounded-full hover:bg-accent transition-colors group"
              title="Settings"
            >
              <Settings className="w-5 h-5 group-hover:rotate-90 transition-transform duration-300" />
            </button>
            </div>
          </div>
        </div>
      )
    }
  src/components/RightPane.tsx: >-
    import { forwardRef } from 'react'

    import { SlidersHorizontal, Settings, ChevronRight, LayoutDashboard,
    ChevronsLeftRight } from 'lucide-react'

    import { useAppStore } from '@/store/appStore'

    import { cn } from '@/lib/utils'

    import { SettingsContent } from './SettingsContent'

    import { DashboardContent } from './DashboardContent'


    export const RightPane = forwardRef<HTMLDivElement>((_props, ref) => {
      const { closeSidePane, setIsResizingRightPane, sidePaneContent, setActivePage } = useAppStore()

      const isSettings = sidePaneContent === 'settings'
      const isMain = sidePaneContent === 'main'

      const handleMaximize = () => {
        if (isMain) {
          setActivePage('dashboard')
        } else if (isSettings) {
          setActivePage('settings')
        }
        closeSidePane()
      }

      return (
        <aside ref={ref} className="bg-card border-l border-border flex flex-col h-full overflow-hidden fixed top-0 right-0 z-[60]">
          <button
            onClick={closeSidePane}
            className="absolute top-1/2 -left-px -translate-y-1/2 -translate-x-full w-8 h-16 bg-card border border-r-0 border-border rounded-l-lg flex items-center justify-center hover:bg-accent transition-colors group z-10"
            title="Close pane"
          >
            <ChevronRight className="w-5 h-5 text-muted-foreground group-hover:text-foreground transition-colors" />
          </button>
          <div 
            className={cn(
              "absolute top-0 left-0 w-2 h-full bg-transparent hover:bg-primary/20 cursor-col-resize z-50 transition-colors duration-200 group -translate-x-1/2"
            )}
            onMouseDown={(e) => {
              e.preventDefault()
              setIsResizingRightPane(true)
            }}
          >
            <div className="w-0.5 h-full bg-border group-hover:bg-primary transition-colors duration-200 mx-auto" />
          </div>
          <div className="flex items-center justify-between p-4 border-b border-border h-20 flex-shrink-0 pl-6">
            <div className="flex items-center gap-2">
              {isMain && <LayoutDashboard className="w-5 h-5" />}
              {isSettings && <Settings className="w-5 h-5" />}
              {!isMain && !isSettings && <SlidersHorizontal className="w-5 h-5" />}
              <h2 className="text-lg font-semibold whitespace-nowrap">
                {isMain ? 'Dashboard' : isSettings ? 'Settings' : 'Details Panel'}
              </h2>
            </div>
            
            {(isMain || isSettings) && (
              <button
                onClick={handleMaximize}
                className="h-10 w-10 flex items-center justify-center hover:bg-accent rounded-full transition-colors mr-2"
                title="Move to Main View"
              >
                <ChevronsLeftRight className="w-5 h-5" />
              </button>
            )}
          </div>
          <div className="flex-1 overflow-y-auto">
            {isMain ? (
              <div className="px-8 py-6 h-full"><DashboardContent isInSidePane={true} /></div>
            ) : isSettings ? (
              <div className="px-8 py-6"><SettingsContent /></div>
            ) : (
              <div className="px-8 py-6"><p className="text-muted-foreground">This is the side pane. It can be used to display contextual information, forms, or actions related to the main content.</p></div>
            )}
          </div>
        </aside>
      )
    })


    RightPane.displayName = "RightPane"
  src/components/MainContent.tsx: |-
    import { forwardRef } from 'react'
    import { 
      X,
      LayoutDashboard,
      ChevronsLeftRight,
      Settings,
    } from 'lucide-react'
    import { cn } from '@/lib/utils'
    import { BODY_STATES, type BodyState } from '@/lib/utils'
    import { DashboardContent } from './DashboardContent'
    import { SettingsPage } from './SettingsPage'
    import { ToasterDemo } from './ToasterDemo'
    import { useAppStore } from '@/store/appStore'

    interface MainContentProps {
      bodyState: BodyState
      onToggleFullscreen: () => void
    }

    export const MainContent = forwardRef<HTMLDivElement, MainContentProps>(
      ({ bodyState, onToggleFullscreen }, ref) => {
        const { sidePaneContent, openSidePane, activePage, setActivePage } = useAppStore()

        const isDashboardInSidePane = sidePaneContent === 'main' && bodyState === BODY_STATES.SIDE_PANE
        const isSettingsInSidePane = sidePaneContent === 'settings' && bodyState === BODY_STATES.SIDE_PANE

        const renderContent = () => {
          if (activePage === 'dashboard') {
            if (isDashboardInSidePane) {
              return (
                <div className="flex-1 flex flex-col items-center justify-center text-center">
                  <LayoutDashboard className="w-16 h-16 text-muted-foreground/50 mb-4" />
                  <h2 className="text-2xl font-bold">Dashboard is in Side Pane</h2>
                  <p className="text-muted-foreground mt-2 max-w-md">
                    You've moved the dashboard to the side pane. You can bring it back or continue to navigate.
                  </p>
                  <button
                    onClick={() => openSidePane('main')} // This will close it
                    className="mt-6 bg-primary text-primary-foreground px-4 py-2 rounded-full hover:bg-primary/90 transition-colors flex items-center gap-2 h-10"
                  >
                    <ChevronsLeftRight className="w-5 h-5" />
                    <span>Bring Dashboard Back</span>
                  </button>
                </div>
              )
            }
            return <DashboardContent />
          }

          if (activePage === 'settings') {
            if (isSettingsInSidePane) {
              return (
                <div className="flex-1 flex flex-col items-center justify-center text-center">
                  <Settings className="w-16 h-16 text-muted-foreground/50 mb-4" />
                  <h2 className="text-2xl font-bold">Settings are in Side Pane</h2>
                  <p className="text-muted-foreground mt-2 max-w-md">
                    You've moved settings to the side pane. You can bring them back to the main view.
                  </p>
                  <button
                    onClick={() => {
                      openSidePane('settings'); // This will close it
                      setActivePage('settings');
                    }}
                    className="mt-6 bg-primary text-primary-foreground px-4 py-2 rounded-full hover:bg-primary/90 transition-colors flex items-center gap-2 h-10"
                  >
                    <ChevronsLeftRight className="w-5 h-5" />
                    <span>Bring Settings Back</span>
                  </button>
                </div>
              )
            }
            return <SettingsPage />
          }
          if (activePage === 'toaster') {
            return <ToasterDemo />
          }
          return null;
        }
        
        const isContentVisible = (activePage === 'dashboard' && !isDashboardInSidePane) || (activePage === 'settings' && !isSettingsInSidePane) || activePage === 'toaster';

        return (
          <div
            ref={ref}
            className={cn(
            "flex flex-col h-full overflow-hidden",
            bodyState === BODY_STATES.FULLSCREEN && "absolute inset-0 z-40 bg-background"
            )}
          >
            {bodyState === BODY_STATES.FULLSCREEN && isContentVisible && (
              <button
                onClick={onToggleFullscreen}
                className="fixed top-6 right-6 lg:right-12 z-[100] h-12 w-12 flex items-center justify-center rounded-full bg-card/50 backdrop-blur-sm hover:bg-card/75 transition-colors group"
                title="Exit Fullscreen"
              >
                <X className="w-6 h-6 group-hover:scale-110 group-hover:rotate-90 transition-all duration-300" />
              </button>
            )}

            <div className="flex-1 min-h-0">
              {renderContent()}
            </div>
          </div>
        )
      }
    )
approved: true
linesAdded: null
linesRemoved: null
linesDifference: null
gitCommittedAt: null
status: committed
id: 61
