uuid: 4220b22a-f887-43ca-a0c3-f01b16e45ff3
projectId: jeli-app-shell
createdAt: '2025-10-13T01:43:49.504Z'
gitCommitMsg: >-
  refactor(DataDemo): improve UI/UX with a cohesive and minimalist layout

  This commit refactors the DataDemo page to enhance its user interface and
  experience by: - Restructuring the header to separate the view mode selector
  from the main data toolbar, giving it more prominence and creating a clearer
  visual hierarchy. - Simplifying the data toolbar to focus solely on search,
  filtering, and sorting. - Removing excessive shadows and noisy styles (e.g.,
  dashed borders) from components like cards, buttons, and the view selector to
  achieve a cleaner, more minimalist aesthetic. - Replacing the missing
  PageLayout component with a standard padded container to ensure consistent
  spacing and prevent horizontal overflow.
promptSummary: >-
  Refactor the data demo page for a more cohesive and minimalist UI/UX, ensuring
  no horizontal overflow while keeping the existing view mode selector.
reasoning:
  - >-
    Excellent! As an expert AI programmer, I've analyzed your request to make
    the data demo page's UI/UX more cohesive and minimalist, while retaining the
    cool `DataViewModeSelector` and preventing horizontal overflow.
  - 'Here is my plan to achieve this:'
  - >-
    1.  **Restructure the Page Header**: I'll refactor the main page layout in
    `src/pages/DataDemo/index.tsx`. I will move the `DataViewModeSelector` out
    of the toolbar and place it at the top level, next to the page title. This
    gives it prominence and separates the view-switching logic from the
    data-filtering logic, creating a cleaner hierarchy.
  - >-
    2.  **Simplify the Toolbar**: In
    `src/pages/DataDemo/components/DataToolbar.tsx`, I will remove the
    `DataViewModeSelector` and its props. I'll also change the filter buttons'
    style from `border-dashed` to a standard outline for a less cluttered,
    minimalist feel.
  - '3.  **Refine Component Styles for Minimalism**:'
  - >-
    *   I'll remove the `shadow-lg` from `DataViewModeSelector` to make it
    appear more integrated and less "heavy".
  - >-
    *   For `DataCardView` and `DataListView`, I will remove the hover and
    selection shadows. Interaction will be conveyed more subtly through border
    colors and slight movements, aligning with a minimalist aesthetic.
  - >-
    4.  **Ensure Layout Integrity**: By replacing the non-provided `PageLayout`
    component with a `div` that has responsive padding, I will ensure the
    content has proper spacing and avoids any horizontal overflow issues.
  - >-
    These changes will result in a cleaner, more intuitive, and visually
    cohesive interface.
  - '### 1. Simplify the Data Toolbar'
  - >-
    I'll start by modifying `DataToolbar.tsx`. I'm removing the
    `DataViewModeSelector` and its related props. Additionally, I'm updating the
    filter buttons to use a solid border instead of a dashed one for a cleaner
    look.
  - '### 2. Refine the View Mode Selector''s Style'
  - >-
    Next, I'll remove the `shadow-lg` from the `DataViewModeSelector` to give it
    a flatter, more modern appearance that fits better with the new minimalist
    layout.
  - '### 3. Apply Minimalist Styles to Card View'
  - >-
    To align with the minimalist goal, I'm removing the shadows on hover and
    selection from the `DataCardView`. The interaction feedback will now be more
    subtle, relying on border color changes and a slight lift effect.
  - '### 4. Apply Minimalist Styles to List View'
  - >-
    For consistency, I'll also remove the hover shadows from the `DataListView`,
    ensuring a cohesive look across all view modes.
  - '### 5. Restructure the Main Page Layout'
  - >-
    Finally, I'll update `DataDemoPage/index.tsx` to implement the new, more
    cohesive layout. The `PageLayout` component is removed and replaced with a
    padded `div` since it was not provided. The header area is restructured to
    place the title and view selector together, followed by the now-simplified
    toolbar.
  - '---'
operations:
  - type: write
    path: src/pages/DataDemo/components/DataToolbar.tsx
    content: >+
      --- src/pages/DataDemo/components/DataToolbar.tsx

      +++ src/pages/DataDemo/components/DataToolbar.tsx

      @@ -9,16 +9,15 @@
         DropdownMenuLabel,
         DropdownMenuTrigger,
       } from '@/components/ui/dropdown-menu'
       import {
         Command,
         CommandEmpty,
         CommandGroup,
         CommandInput,
         CommandItem,
         CommandList,
         CommandSeparator,
       } from '@/components/ui/command'
       
      -import { DataViewModeSelector } from './DataViewModeSelector'

      -import type { ViewMode, SortConfig, SortableField, Status, Priority }
      from '../types'

      +import type { SortConfig, SortableField, Status, Priority } from
      '../types'
       
       export interface FilterConfig {
         searchTerm: string
      @@ -27,8 +26,6 @@
       }
       
       interface DataToolbarProps {
      -  viewMode: ViewMode

      -  onViewModeChange: (mode: ViewMode) => void
         filters: FilterConfig
         onFiltersChange: (filters: FilterConfig) => void
         sortConfig: SortConfig | null
      @@ -58,8 +55,6 @@
       
       
       export function DataToolbar({
      -  viewMode,

      -  onViewModeChange,
         filters,
         onFiltersChange,
         sortConfig,
      @@ -140,8 +135,6 @@
                 </DropdownMenuContent>
               </DropdownMenu>
       
      -        <DataViewModeSelector viewMode={viewMode}
      onChange={onViewModeChange} />
             </div>
           </div>
         )
      @@ -162,7 +155,7 @@
         return (
           <Popover>
             <PopoverTrigger asChild>
      -        <Button variant="outline" size="sm" className="h-9 w-full
      sm:w-auto justify-start border-dashed">

      +        <Button variant="outline" size="sm" className="h-9 w-full
      sm:w-auto justify-start">
                 <ListFilter className="mr-2 h-4 w-4" />
                 {title}
                 {selected.length > 0 && (

    patchStrategy: standard-diff
  - type: write
    path: src/pages/DataDemo/components/DataViewModeSelector.tsx
    content: >+
      --- src/pages/DataDemo/components/DataViewModeSelector.tsx

      +++ src/pages/DataDemo/components/DataViewModeSelector.tsx

      @@ -32,7 +32,7 @@
         return (
           <div 
             ref={containerRef}
      -      className="relative flex items-center bg-card/50 backdrop-blur-sm
      border border-border/50 rounded-2xl p-1.5 shadow-lg"

      +      className="relative flex items-center bg-card/50 backdrop-blur-sm
      border border-border/50 rounded-2xl p-1.5"
           >
             {/* Animated indicator */}
             <div

    patchStrategy: standard-diff
  - type: write
    path: src/pages/DataDemo/components/DataCardView.tsx
    content: >+
      --- src/pages/DataDemo/components/DataCardView.tsx

      +++ src/pages/DataDemo/components/DataCardView.tsx

      @@ -47,10 +47,9 @@
                   key={item.id}
                   onClick={() => onItemSelect(item)}
                   className={cn(
      -              "group relative overflow-hidden rounded-3xl border
      bg-card/50 backdrop-blur-sm transition-all duration-500 cursor-pointer",

      -              "hover:bg-card/80 hover:shadow-xl hover:shadow-primary/10
      hover:border-primary/30 hover:-translate-y-2",

      +              "group relative overflow-hidden rounded-3xl border
      bg-card/50 backdrop-blur-sm transition-all duration-300 cursor-pointer",

      +              "hover:bg-card/80 hover:border-primary/30
      hover:-translate-y-1",
                     "active:scale-[0.98]",
      -              isSelected && "ring-2 ring-primary/30 border-primary/40
      bg-card/90 shadow-lg shadow-primary/20",

      +              isSelected && "ring-2 ring-primary/30 border-primary/40
      bg-card/90",
                     isGrid && "break-inside-avoid mb-6"
                   )}
                 >

    patchStrategy: standard-diff
  - type: write
    path: src/pages/DataDemo/components/DataListView.tsx
    content: >+
      --- src/pages/DataDemo/components/DataListView.tsx

      +++ src/pages/DataDemo/components/DataListView.tsx

      @@ -37,8 +37,8 @@
                   key={item.id}
                   onClick={() => onItemSelect(item)}
                   className={cn(
      -              "group relative overflow-hidden rounded-2xl border
      bg-card/50 backdrop-blur-sm transition-all duration-300 cursor-pointer",

      -              "hover:bg-card/80 hover:shadow-lg hover:shadow-primary/5
      hover:border-primary/20",

      +              "group relative overflow-hidden rounded-2xl border
      bg-card/50 backdrop-blur-sm transition-colors duration-200
      cursor-pointer",

      +              "hover:bg-card/80 hover:border-primary/20",
                     "active:scale-[0.99]",
                     isSelected && "ring-2 ring-primary/20 border-primary/30 bg-card/90"
                   )}
                 >

    patchStrategy: standard-diff
  - type: write
    path: src/pages/DataDemo/index.tsx
    content: >+
      --- src/pages/DataDemo/index.tsx

      +++ src/pages/DataDemo/index.tsx

      @@ -5,8 +5,8 @@
         Loader2
       } from 'lucide-react'
       import { gsap } from 'gsap'
      -import { PageLayout } from '@/components/shared/PageLayout'

      +import { DataViewModeSelector } from './components/DataViewModeSelector'
       import { DataListView } from './components/DataListView'
       import { DataCardView } from './components/DataCardView'
       import { DataTableView } from './components/DataTableView'
      @@ -15,7 +15,7 @@
       import { DataToolbar, FilterConfig } from './components/DataToolbar'
       import { useAppShell } from '@/context/AppShellContext'
       import { mockDataItems } from './data/mockData'
      -import type { DataItem, ViewMode, SortConfig, SortableField } from
      './types'

      +import type { DataItem, ViewMode, SortConfig, SortableField } from
      './types'
       
       type Stat = {
         title: string;
      @@ -242,34 +242,30 @@
         }
       
         return (
      -    <PageLayout

      -      // Note: Search functionality is handled by a separate SearchBar in
      the TopBar

      -    >

      +    <div className="p-4 sm:p-6 lg:p-8">
             <div className="space-y-8">
      -        {/* Header */}

      -        <div className="flex flex-col md:flex-row md:items-center
      md:justify-between gap-4">

      +        {/* Header & View Selector */}

      +        <div className="flex flex-col lg:flex-row lg:items-start
      lg:justify-between gap-6">
                 <div>
      -            <h1 className="text-2xl font-bold tracking-tight">Data
      Showcase</h1>

      -            <p className="text-muted-foreground">

      +            <h1 className="text-3xl font-bold tracking-tight">Data
      Showcase</h1>

      +            <p className="text-muted-foreground mt-1">
                     {isInitialLoading 
                       ? "Loading projects..." 
      -                : `Showing ${processedData.length} item(s)`}

      +                : `Showing ${items.length} of ${processedData.length}
      item(s)`}
                   </p>
                 </div>
      -        </div>

      -        <div className="flex flex-col md:flex-row md:items-center
      md:justify-between gap-4">

      -          <DataToolbar 

      -            viewMode={viewMode} onViewModeChange={setViewMode}

      -            filters={filters} onFiltersChange={handleFilterChange}

      -            sortConfig={sortConfig} onSortChange={handleSortChange} />

      +          <div className="flex-shrink-0">

      +            <DataViewModeSelector viewMode={viewMode}
      onChange={setViewMode} />

      +          </div>
               </div>
       
      +        <DataToolbar

      +          filters={filters} onFiltersChange={handleFilterChange}

      +          sortConfig={sortConfig} onSortChange={handleSortChange}

      +        />

      +
               {/* Stats Section */}
               {!isInitialLoading && (
                 <div ref={statsRef} className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
      @@ -312,8 +308,8 @@
               item={selectedItem}
               onClose={() => setSelectedItem(null)}
             />
      -    </PageLayout>

      +    </div>
         )
       }

    patchStrategy: standard-diff
snapshot:
  src/pages/DataDemo/components/DataViewModeSelector.tsx: >-
    import { useEffect, useRef } from 'react'

    import { gsap } from 'gsap'

    import { cn } from '@/lib/utils'

    import { List, Grid3X3, LayoutGrid, Table } from 'lucide-react'

    import type { ViewMode } from '../types'


    interface DataViewModeSelectorProps {
      viewMode: ViewMode
      onChange: (mode: ViewMode) => void
    }


    const viewModes = [
      { id: 'list' as ViewMode, label: 'List', icon: List, description: 'Compact list with details' },
      { id: 'cards' as ViewMode, label: 'Cards', icon: LayoutGrid, description: 'Rich card layout' },
      { id: 'grid' as ViewMode, label: 'Grid', icon: Grid3X3, description: 'Masonry grid view' },
      { id: 'table' as ViewMode, label: 'Table', icon: Table, description: 'Structured data table' }
    ]


    export function DataViewModeSelector({ viewMode, onChange }:
    DataViewModeSelectorProps) {
      const indicatorRef = useRef<HTMLDivElement>(null)
      const containerRef = useRef<HTMLDivElement>(null)

      useEffect(() => {
        if (!indicatorRef.current || !containerRef.current) return

        const activeButton = containerRef.current.querySelector(`[data-mode="${viewMode}"]`) as HTMLElement
        if (!activeButton) return

        const containerRect = containerRef.current.getBoundingClientRect()
        const buttonRect = activeButton.getBoundingClientRect()
        
        const left = buttonRect.left - containerRect.left
        const width = buttonRect.width

        gsap.to(indicatorRef.current, {
          duration: 0.3,
          x: left,
          width: width,
          ease: "power2.out"
        })
      }, [viewMode])

      return (
        <div 
          ref={containerRef}
          className="relative flex items-center bg-card/50 backdrop-blur-sm border border-border/50 rounded-2xl p-1.5 shadow-lg"
        >
          {/* Animated indicator */}
          <div
            ref={indicatorRef}
            className="absolute inset-y-1.5 bg-gradient-to-r from-primary/20 to-primary/10 border border-primary/20 rounded-xl transition-all duration-300"
            style={{ left: 0, width: 0 }}
          />
          
          {/* Mode buttons */}
          {viewModes.map((mode) => {
            const IconComponent = mode.icon
            const isActive = viewMode === mode.id
            
            return (
              <button
                key={mode.id}
                data-mode={mode.id}
                onClick={() => onChange(mode.id)}
                className={cn(
                  "relative flex items-center gap-3 px-6 py-3 rounded-xl transition-all duration-300 group min-w-[120px]",
                  "hover:bg-accent/20 active:scale-95",
                  isActive && "text-primary"
                )}
                title={mode.description}
              >
                <IconComponent className={cn(
                  "w-5 h-5 transition-all duration-300",
                  isActive && "scale-110",
                  "group-hover:scale-105"
                )} />
                <span className={cn(
                  "font-medium transition-all duration-300",
                  isActive ? "text-primary" : "text-muted-foreground",
                  "group-hover:text-foreground"
                )}>
                  {mode.label}
                </span>
              </button>
            )
          })}
        </div>
      )
    }
  src/pages/DataDemo/components/DataCardView.tsx: >-
    import { useRef, useLayoutEffect } from 'react'

    import { gsap } from 'gsap'

    import { cn } from '@/lib/utils'

    import { Badge } from '@/components/ui/badge'

    import { Avatar } from '@/components/ui/avatar'

    import { Calendar, Eye, Heart, Share, ArrowUpRight, Tag } from
    'lucide-react'

    import type { ViewProps } from '../types'

    import { getStatusColor, getPriorityColor } from '../utils'

    import { EmptyState } from './EmptyState'


    export function DataCardView({ data, onItemSelect, selectedItem, isGrid =
    false }: ViewProps) {
      const containerRef = useRef<HTMLDivElement>(null)
      const animatedItemsCount = useRef(0)

      useLayoutEffect(() => {
        if (containerRef.current && data.length > animatedItemsCount.current) {
          const newItems = Array.from(containerRef.current.children).slice(
            animatedItemsCount.current
          );
          gsap.fromTo(
            newItems,
            { y: 40, opacity: 0, scale: 0.95 },
            {
              duration: 0.6,
              y: 0,
              opacity: 1,
              scale: 1,
              stagger: 0.1,
              ease: 'power2.out',
            },
          );
          animatedItemsCount.current = data.length;
        }
      }, [data]);

      if (data.length === 0) {
        return <EmptyState />
      }

      return (
        <div 
          ref={containerRef}
          className={cn(
            "gap-6",
            isGrid 
              ? "columns-1 sm:columns-2 lg:columns-3 xl:columns-4 space-y-6" 
              : "grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 2xl:grid-cols-4"
          )}
        >
          {data.map((item) => {
            const isSelected = selectedItem?.id === item.id
            
            return (
              <div
                key={item.id}
                onClick={() => onItemSelect(item)}
                className={cn(
                  "group relative overflow-hidden rounded-3xl border bg-card/50 backdrop-blur-sm transition-all duration-500 cursor-pointer",
                  "hover:bg-card/80 hover:shadow-xl hover:shadow-primary/10 hover:border-primary/30 hover:-translate-y-2",
                  "active:scale-[0.98]",
                  isSelected && "ring-2 ring-primary/30 border-primary/40 bg-card/90 shadow-lg shadow-primary/20",
                  isGrid && "break-inside-avoid mb-6"
                )}
              >
                {/* Card Header with Thumbnail */}
                <div className="relative p-6 pb-4">
                  <div className="flex items-start justify-between mb-4">
                    <div className="w-16 h-16 bg-gradient-to-br from-primary/20 to-primary/10 rounded-2xl flex items-center justify-center text-3xl group-hover:scale-110 transition-transform duration-300">
                      {item.thumbnail}
                    </div>
                    <ArrowUpRight className="w-5 h-5 text-muted-foreground group-hover:text-primary group-hover:translate-x-1 group-hover:-translate-y-1 transition-all duration-300" />
                  </div>

                  {/* Priority indicator */}
                  <div className="absolute top-4 right-4">
                    <div className={cn(
                      "w-3 h-3 rounded-full",
                      item.priority === 'critical' && "bg-red-500",
                      item.priority === 'high' && "bg-orange-500",
                      item.priority === 'medium' && "bg-blue-500",
                      item.priority === 'low' && "bg-green-500"
                    )} />
                  </div>
                </div>

                {/* Card Content */}
                <div className="px-6 pb-6">
                  {/* Title and Description */}
                  <h3 className="font-semibold text-lg mb-2 group-hover:text-primary transition-colors line-clamp-2">
                    {item.title}
                  </h3>
                  <p className="text-muted-foreground text-sm mb-4 line-clamp-3">
                    {item.description}
                  </p>

                  {/* Status and Category */}
                  <div className="flex items-center gap-2 mb-4">
                    <Badge variant="outline" className={getStatusColor(item.status)}>
                      {item.status}
                    </Badge>
                    <Badge variant="outline" className="bg-accent/50 text-xs">
                      {item.category}
                    </Badge>
                  </div>

                  {/* Tags */}
                  <div className="flex items-center gap-1 mb-4">
                    <Tag className="w-3 h-3 text-muted-foreground" />
                    <div className="flex flex-wrap gap-1">
                      {item.tags.slice(0, 3).map((tag, index) => (
                        <span key={index} className="text-xs text-muted-foreground bg-muted/50 px-2 py-1 rounded-md">
                          {tag}
                        </span>
                      ))}
                      {item.tags.length > 3 && (
                        <span className="text-xs text-muted-foreground">
                          +{item.tags.length - 3}
                        </span>
                      )}
                    </div>
                  </div>

                  {/* Progress */}
                  <div className="mb-4">
                    <div className="flex items-center justify-between mb-2">
                      <span className="text-xs text-muted-foreground">Progress</span>
                      <span className="text-xs font-semibold">{item.metrics.completion}%</span>
                    </div>
                    <div className="w-full bg-muted rounded-full h-2">
                      <div 
                        className="bg-gradient-to-r from-primary to-primary/80 h-2 rounded-full transition-all duration-700 ease-out"
                        style={{ width: `${item.metrics.completion}%` }}
                      />
                    </div>
                  </div>

                  {/* Assignee */}
                  <div className="flex items-center gap-3 mb-4">
                    <Avatar className="w-8 h-8 text-sm">
                      {item.assignee.avatar}
                    </Avatar>
                    <div className="flex-1 min-w-0">
                      <p className="text-sm font-medium truncate">
                        {item.assignee.name}
                      </p>
                      <p className="text-xs text-muted-foreground truncate">
                        {item.assignee.email}
                      </p>
                    </div>
                  </div>

                  {/* Metrics */}
                  <div className="flex items-center justify-between text-xs text-muted-foreground">
                    <div className="flex items-center gap-3">
                      <div className="flex items-center gap-1">
                        <Eye className="w-3 h-3" />
                        {item.metrics.views}
                      </div>
                      <div className="flex items-center gap-1">
                        <Heart className="w-3 h-3" />
                        {item.metrics.likes}
                      </div>
                      <div className="flex items-center gap-1">
                        <Share className="w-3 h-3" />
                        {item.metrics.shares}
                      </div>
                    </div>
                    <div className="flex items-center gap-1">
                      <Calendar className="w-3 h-3" />
                      {new Date(item.updatedAt).toLocaleDateString()}
                    </div>
                  </div>
                </div>

                {/* Hover gradient overlay */}
                <div className="absolute inset-0 bg-gradient-to-br from-primary/5 via-transparent to-primary/5 opacity-0 group-hover:opacity-100 transition-opacity duration-500 pointer-events-none" />
                
                {/* Selection indicator */}
                {isSelected && (
                  <div className="absolute inset-0 bg-gradient-to-br from-primary/10 to-primary/5 pointer-events-none" />
                )}
              </div>
            )
          })}
        </div>
      )
    }
  src/pages/DataDemo/index.tsx: >-
    import { useState, useRef, useEffect, useCallback, useMemo } from 'react'

    import { 
      Layers, 
      AlertTriangle, 
      PlayCircle, 
      TrendingUp,
      Loader2
    } from 'lucide-react'

    import { gsap } from 'gsap'

    import { PageLayout } from '@/components/shared/PageLayout'

    import { DataListView } from './components/DataListView'

    import { DataCardView } from './components/DataCardView'

    import { DataTableView } from './components/DataTableView'

    import { DataDetailPanel } from './components/DataDetailPanel'

    import { AnimatedLoadingSkeleton } from
    './components/AnimatedLoadingSkeleton'

    import { StatChartCard } from './components/StatChartCard'

    import { DataToolbar, FilterConfig } from './components/DataToolbar'

    import { useAppShell } from '@/context/AppShellContext'

    import { mockDataItems } from './data/mockData'

    import type { DataItem, ViewMode, SortConfig, SortableField } from './types'


    type Stat = {
      title: string;
      value: string;
      icon: React.ReactNode;
      change: string;
      trend: 'up' | 'down';
      type?: 'card';
    };


    type ChartStat = {
      title: string;
      value: string;
      icon: React.ReactNode;
      change: string;
      trend: 'up' | 'down';
      type: 'chart';
      chartData: number[];
    };


    type StatItem = Stat | ChartStat;


    export default function DataDemoPage() {
      const [viewMode, setViewMode] = useState<ViewMode>('list')
      const [filters, setFilters] = useState<FilterConfig>({
        searchTerm: '',
        status: [],
        priority: [],
      })
      const [sortConfig, setSortConfig] = useState<SortConfig | null>({ key: 'updatedAt', direction: 'desc' })
      const [selectedItem, setSelectedItem] = useState<DataItem | null>(null)  
      const [items, setItems] = useState<DataItem[]>([])
      const [page, setPage] = useState(0) // Start at 0 to trigger initial load effect
      const [hasMore, setHasMore] = useState(true)
      const [isLoading, setIsLoading] = useState(true)
      const contentRef = useRef<HTMLDivElement>(null)
      const statsRef = useRef<HTMLDivElement>(null)
      const observer = useRef<IntersectionObserver>()
      const { openSidePane } = useAppShell()

      const isInitialLoading = isLoading && items.length === 0

      // Centralized data processing
      const processedData = useMemo(() => {
        let filteredItems = mockDataItems.filter(item => {
          const searchTermMatch =
            item.title.toLowerCase().includes(filters.searchTerm.toLowerCase()) ||
            item.description.toLowerCase().includes(filters.searchTerm.toLowerCase())

          const statusMatch = filters.status.length === 0 || filters.status.includes(item.status)
          const priorityMatch = filters.priority.length === 0 || filters.priority.includes(item.priority)

          return searchTermMatch && statusMatch && priorityMatch
        })

        if (sortConfig) {
          filteredItems.sort((a, b) => {
            let aValue: any
            let bValue: any

            const getNestedValue = (obj: any, path: string) => path.split('.').reduce((o, k) => (o || {})[k], obj)

            aValue = getNestedValue(a, sortConfig.key)
            bValue = getNestedValue(b, sortConfig.key)

            if (aValue === undefined || bValue === undefined) return 0;

            if (typeof aValue === 'string' && typeof bValue === 'string') {
              return sortConfig.direction === 'asc'
                ? aValue.localeCompare(bValue)
                : bValue.localeCompare(aValue)
            }
            if (typeof aValue === 'number' && typeof bValue === 'number') {
              return sortConfig.direction === 'asc' ? aValue - bValue : bValue - aValue
            }
            // Date sorting (assuming ISO strings)
            if (sortConfig.key === 'updatedAt' || sortConfig.key === 'createdAt') {
                return sortConfig.direction === 'asc'
                    ? new Date(aValue).getTime() - new Date(aValue).getTime()
                    : new Date(bValue).getTime() - new Date(bValue).getTime()
            }
            return 0
          })
        }
        return filteredItems
      }, [filters, sortConfig])

      // Calculate stats from data
      const totalItems = mockDataItems.length
      const activeItems = mockDataItems.filter(item => item.status === 'active').length
      const highPriorityItems = mockDataItems.filter(item => item.priority === 'high' || item.priority === 'critical').length
      const avgCompletion = totalItems > 0 ? Math.round(
        mockDataItems.reduce((acc, item) => acc + item.metrics.completion, 0) / totalItems
      ) : 0

      // Reset pagination when filters or sort change
      useEffect(() => {
        setItems([])
        setPage(0) // This will be incremented to 1 in the loader `useEffect`, triggering a fresh load
        setHasMore(true)
        // This timeout helps prevent a flicker between old and new filtered data
        setTimeout(() => setPage(1), 50)
      }, [processedData])

      // Infinite scroll logic
      useEffect(() => { // eslint-disable-line react-hooks/exhaustive-deps
        if (page === 0) return;

        const fetchItems = () => {
          setIsLoading(true);
          const isFirstPage = page === 1
          
          const pageSize = 12;
          const newItems = processedData.slice((page - 1) * pageSize, page * pageSize);
          
          // Simulate network delay, longer for initial load to showcase skeleton
          setTimeout(() => {
            setItems(prev => (isFirstPage ? newItems : [...prev, ...newItems]))
            setHasMore(processedData.length > page * pageSize)
            setIsLoading(false)
          }, isFirstPage && items.length === 0 ? 1500 : 500)
        };

        if (hasMore) fetchItems();
      }, [page]);

      const loaderRef = useCallback(node => {
        if (isLoading) return;
        if (observer.current) observer.current.disconnect();
        
        observer.current = new IntersectionObserver(entries => {
          if (entries[0].isIntersecting && hasMore) {
            setPage(prevPage => prevPage + 1);
          }
        });
        if (node) observer.current.observe(node);
      }, [isLoading, hasMore]);

      const stats: StatItem[] = [
        {
          title: "Total Projects",
          value: totalItems.toString(),
          icon: <Layers className="w-5 h-5" />,
          change: "+5.2% this month",
          trend: "up" as const,
          type: 'chart',
          chartData: [120, 125, 122, 130, 135, 138, 142]
        },
        {
          title: "Active Projects",
          value: activeItems.toString(),
          icon: <PlayCircle className="w-5 h-5" />,
          change: "+2 this week", 
          trend: "up" as const,
          type: 'chart',
          chartData: [45, 50, 48, 55, 53, 60, 58]
        },
        {
          title: "High Priority",
          value: highPriorityItems.toString(),
          icon: <AlertTriangle className="w-5 h-5" />,
          change: "-1 from last week",
          trend: "down" as const,
          type: 'chart',
          chartData: [25, 26, 28, 27, 26, 24, 23]
        },
        {
          title: "Avg. Completion",
          value: `${avgCompletion}%`,
          icon: <TrendingUp className="w-5 h-5" />,
          change: "+3.2%",
          trend: "up" as const,
          type: 'chart',
          chartData: [65, 68, 70, 69, 72, 75, 78]
        }
      ]

      useEffect(() => {
        // Animate stats cards in
        if (!isInitialLoading && statsRef.current) {
          gsap.fromTo(statsRef.current.children,
            { y: 30, opacity: 0 },
            {
              duration: 0.6,
              y: 0,
              opacity: 1,
              stagger: 0.1,
              ease: "power2.out"
            }
          )
        }
      }, [isInitialLoading])

      const handleSortChange = (config: SortConfig | null) => {
        setSortConfig(config)
      }

      // For table view header clicks
      const handleTableSort = (field: SortableField) => {
        if (sortConfig?.key === field) {
          if (sortConfig.direction === 'desc') {
            // Cycle: desc -> asc
            setSortConfig({ key: field, direction: 'asc' })
          } else {
            // Cycle: asc -> default
            setSortConfig(null)
          }
        } else {
          // New field, default to desc
          setSortConfig({ key: field, direction: 'desc' })
        }
      }

      const handleFilterChange = (newFilters: FilterConfig) => {
        setFilters(newFilters)
      }
      
      // Handle item selection and open side panel
      const handleItemSelect = (item: DataItem) => {
        setSelectedItem(item)
        openSidePane('data-details')
      }

      const renderView = () => {
        const commonProps = {
          data: items,
          onItemSelect: handleItemSelect,
          selectedItem,
          sortConfig,
          onSort: handleTableSort,
        }

        switch (viewMode) {
          case 'list':
            return <DataListView {...commonProps} />
          case 'cards':
            return <DataCardView {...commonProps} />
          case 'grid':
            return <DataCardView {...commonProps} isGrid />
          case 'table':
            return <DataTableView {...commonProps} />
          default:
            return <DataListView {...commonProps} />
        }
      }

      return (
        <PageLayout
          // Note: Search functionality is handled by a separate SearchBar in the TopBar
        >
          <div className="space-y-8">
            {/* Header */}
            <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-4">
              <div>
                <h1 className="text-2xl font-bold tracking-tight">Data Showcase</h1>
                <p className="text-muted-foreground">
                  {isInitialLoading 
                    ? "Loading projects..." 
                    : `Showing ${processedData.length} item(s)`}
                </p>
              </div>
            </div>
            <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-4">
              <DataToolbar 
                viewMode={viewMode} onViewModeChange={setViewMode}
                filters={filters} onFiltersChange={handleFilterChange}
                sortConfig={sortConfig} onSortChange={handleSortChange} />
            </div>

            {/* Stats Section */}
            {!isInitialLoading && (
              <div ref={statsRef} className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
                {stats.map((stat) => {
                  if (stat.type === 'chart') {
                    return (
                      <StatChartCard
                        key={stat.title}
                        title={stat.title}
                        value={stat.value}
                        change={stat.change}
                        trend={stat.trend}
                        icon={stat.icon}
                        chartData={stat.chartData}
                      />
                    )
                  }
                })}
              </div>
            )}

            <div ref={contentRef} className="min-h-[500px]">
              {isInitialLoading ? <AnimatedLoadingSkeleton viewMode={viewMode} /> : renderView()}
            </div>

            {/* Loader for infinite scroll */}
            <div ref={loaderRef} className="flex justify-center items-center py-6">
              {isLoading && !isInitialLoading && (
                <div className="flex items-center gap-2 text-muted-foreground">
                  <Loader2 className="w-5 h-5 animate-spin" />
                  <span>Loading more...</span>
                </div>
              )}
              {!isLoading && !hasMore && processedData.length > 0 && !isInitialLoading && (
                <p className="text-muted-foreground">You've reached the end.</p>
              )}
            </div>
          </div>

          {/* Detail Panel */}
          <DataDetailPanel 
            item={selectedItem}
            onClose={() => setSelectedItem(null)}
          />
        </PageLayout>
      )
    }
  src/pages/DataDemo/components/DataToolbar.tsx: >-
    import * as React from 'react'

    import { Check, ListFilter, Search, SortAsc, X } from 'lucide-react'


    import { cn } from '@/lib/utils'

    import { Button } from '@/components/ui/button'

    import { Input } from '@/components/ui/input'

    import { Badge } from '@/components/ui/badge'

    import { Popover, PopoverContent, PopoverTrigger } from
    '@/components/ui/popover'

    import {
      DropdownMenu,
      DropdownMenuContent,
      DropdownMenuRadioGroup,
      DropdownMenuRadioItem,
      DropdownMenuSeparator,
      DropdownMenuLabel,
      DropdownMenuTrigger,
    } from '@/components/ui/dropdown-menu'

    import {
      Command,
      CommandEmpty,
      CommandGroup,
      CommandInput,
      CommandItem,
      CommandList,
      CommandSeparator,
    } from '@/components/ui/command'


    import { DataViewModeSelector } from './DataViewModeSelector'

    import type { ViewMode, SortConfig, SortableField, Status, Priority } from
    '../types'


    export interface FilterConfig {
      searchTerm: string
      status: Status[]
      priority: Priority[]
    }


    interface DataToolbarProps {
      viewMode: ViewMode
      onViewModeChange: (mode: ViewMode) => void
      filters: FilterConfig
      onFiltersChange: (filters: FilterConfig) => void
      sortConfig: SortConfig | null
      onSortChange: (config: SortConfig | null) => void
    }


    const statusOptions: { value: Status; label: string }[] = [
      { value: 'active', label: 'Active' },
      { value: 'pending', label: 'Pending' },
      { value: 'completed', label: 'Completed' },
      { value: 'archived', label: 'Archived' },
    ]


    const priorityOptions: { value: Priority; label: string }[] = [
      { value: 'critical', label: 'Critical' },
      { value: 'high', label: 'High' },
      { value: 'medium', label: 'Medium' },
      { value: 'low', label: 'Low' },
    ]


    const sortOptions: { value: SortableField, label: string }[] = [
      { value: 'updatedAt', label: 'Last Updated' },
      { value: 'title', label: 'Title' },
      { value: 'status', label: 'Status' },
      { value: 'priority', label: 'Priority' },
      { value: 'metrics.completion', label: 'Progress' },
    ]



    export function DataToolbar({
      viewMode,
      onViewModeChange,
      filters,
      onFiltersChange,
      sortConfig,
      onSortChange,
    }: DataToolbarProps) {
      const handleSearchChange = (event: React.ChangeEvent<HTMLInputElement>) => {
        onFiltersChange({ ...filters, searchTerm: event.target.value })
      }
      
      const activeFilterCount =
        (filters.status.length > 0 ? 1 : 0) +
        (filters.priority.length > 0 ? 1 : 0)

      return (
        <div className="flex flex-col md:flex-row items-center justify-between gap-4">
          {/* Left side: Search and Filters */}
          <div className="flex flex-col sm:flex-row items-center gap-2 w-full md:w-auto">
            <div className="relative w-full sm:w-auto">
              <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground" />
              <Input
                placeholder="Search projects..."
                className="pl-9 w-full sm:w-64"
                value={filters.searchTerm}
                onChange={handleSearchChange}
              />
            </div>

            {/* Status Filter */}
            <MultiSelectFilter
              title="Status"
              options={statusOptions}
              selected={filters.status}
              onChange={(selected) => onFiltersChange({ ...filters, status: selected as Status[] })}
            />

            {/* Priority Filter */}
            <MultiSelectFilter
              title="Priority"
              options={priorityOptions}
              selected={filters.priority}
              onChange={(selected) => onFiltersChange({ ...filters, priority: selected as Priority[] })}
            />

            {activeFilterCount > 0 && (
              <Button
                variant="ghost"
                onClick={() => onFiltersChange({ searchTerm: filters.searchTerm, status: [], priority: [] })}
                className="h-9 px-2 lg:px-3"
              >
                Reset
                <X className="ml-2 h-4 w-4" />
              </Button>
            )}
          </div>

          {/* Right side: Sorter and View Mode */}
          <div className="flex items-center gap-2 w-full md:w-auto justify-end">
            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <Button variant="outline" className="w-full sm:w-auto justify-start">
                  <SortAsc className="mr-2 h-4 w-4" />
                  Sort by: {sortOptions.find(o => o.value === sortConfig?.key)?.label || 'Default'}
                </Button>
              </DropdownMenuTrigger>
              <DropdownMenuContent align="end" className="w-[200px]">
                <DropdownMenuLabel>Sort by</DropdownMenuLabel>
                <DropdownMenuRadioGroup
                  value={`${sortConfig?.key || 'default'}-${sortConfig?.direction || ''}`}
                  onValueChange={(value) => {
                    if (value.startsWith('default')) {
                      onSortChange(null)
                    } else {
                      const [key, direction] = value.split('-')
                      onSortChange({ key: key as SortableField, direction: direction as 'asc' | 'desc' })
                    }
                  }}
                >
                  <DropdownMenuRadioItem value="default-">Default</DropdownMenuRadioItem>
                  <DropdownMenuSeparator />
                  {sortOptions.map(option => (
                    <React.Fragment key={option.value}>
                      <DropdownMenuRadioItem value={`${option.value}-desc`}>{option.label} (Desc)</DropdownMenuRadioItem>
                      <DropdownMenuRadioItem value={`${option.value}-asc`}>{option.label} (Asc)</DropdownMenuRadioItem>
                    </React.Fragment>
                  ))}
                </DropdownMenuRadioGroup>
              </DropdownMenuContent>
            </DropdownMenu>

            <DataViewModeSelector viewMode={viewMode} onChange={onViewModeChange} />
          </div>
        </div>
      )
    }


    function MultiSelectFilter({
      title,
      options,
      selected,
      onChange,
    }: {
      title: string
      options: { value: string; label: string }[]
      selected: string[]
      onChange: (selected: string[]) => void
    }) {
      const selectedSet = new Set(selected)

      return (
        <Popover>
          <PopoverTrigger asChild>
            <Button variant="outline" size="sm" className="h-9 w-full sm:w-auto justify-start border-dashed">
              <ListFilter className="mr-2 h-4 w-4" />
              {title}
              {selected.length > 0 && (
                <>
                  <div className="mx-2 h-4 w-px bg-muted-foreground/50" />
                  <Badge variant="secondary" className="rounded-sm px-1 font-normal">
                    {selected.length}
                  </Badge>
                </>
              )}
            </Button>
          </PopoverTrigger>
          <PopoverContent className="w-[220px] p-0" align="start">
            <Command>
              <CommandInput placeholder={`Filter ${title.toLowerCase()}...`} />
              <CommandList>
                <CommandEmpty>No results found.</CommandEmpty>
                <CommandGroup>
                  {options.map((option) => {
                    const isSelected = selectedSet.has(option.value)
                    return (
                      <CommandItem
                        key={option.value}
                        onSelect={() => {
                          if (isSelected) {
                            selectedSet.delete(option.value)
                          } else {
                            selectedSet.add(option.value)
                          }
                          onChange(Array.from(selectedSet))
                        }}
                      >
                        <div
                          className={cn(
                            'mr-2 flex h-4 w-4 items-center justify-center rounded-sm border border-primary',
                            isSelected ? 'bg-primary text-primary-foreground' : 'opacity-50 [&_svg]:invisible'
                          )}
                        >
                          <Check className={cn('h-4 w-4')} />
                        </div>
                        <span>{option.label}</span>
                      </CommandItem>
                    )
                  })}
                </CommandGroup>
                {selected.length > 0 && (
                  <>
                    <CommandSeparator />
                    <CommandGroup>
                      <CommandItem
                        onSelect={() => onChange([])}
                        className="justify-center text-center"
                      >
                        Clear filters
                      </CommandItem>
                    </CommandGroup>
                  </>
                )}
              </CommandList>
            </Command>
          </PopoverContent>
        </Popover>
      )
    }
  src/pages/DataDemo/components/DataListView.tsx: >-
    import { useRef, useLayoutEffect } from 'react'

    import { gsap } from 'gsap'

    import { cn } from '@/lib/utils'

    import { Badge } from '@/components/ui/badge'

    import { Avatar } from '@/components/ui/avatar'

    import { Calendar, Eye, Heart, Share, ArrowRight } from 'lucide-react'

    import type { ViewProps } from '../types'

    import { getStatusColor, getPriorityColor } from '../utils'

    import { EmptyState } from './EmptyState'


    export function DataListView({ data, onItemSelect, selectedItem }:
    ViewProps) {
      const listRef = useRef<HTMLDivElement>(null)
      const animatedItemsCount = useRef(0)

      useLayoutEffect(() => {
        if (listRef.current && data.length > animatedItemsCount.current) {
          const newItems = Array.from(listRef.current.children).slice(animatedItemsCount.current);
          gsap.fromTo(newItems,
            { y: 30, opacity: 0 },
            {
              duration: 0.5,
              y: 0,
              opacity: 1,
              stagger: 0.08,
              ease: "power2.out",
            },
          );
          animatedItemsCount.current = data.length;
        }
      }, [data]);

      if (data.length === 0) {
        return <EmptyState />
      }

      return (
        <div ref={listRef} className="space-y-4">
          {data.map((item) => {
            const isSelected = selectedItem?.id === item.id
            
            return (
              <div
                key={item.id}
                onClick={() => onItemSelect(item)}
                className={cn(
                  "group relative overflow-hidden rounded-2xl border bg-card/50 backdrop-blur-sm transition-all duration-300 cursor-pointer",
                  "hover:bg-card/80 hover:shadow-lg hover:shadow-primary/5 hover:border-primary/20",
                  "active:scale-[0.99]",
                  isSelected && "ring-2 ring-primary/20 border-primary/30 bg-card/90"
                )}
              >
                <div className="p-6">
                  <div className="flex items-start gap-4">
                    {/* Thumbnail */}
                    <div className="flex-shrink-0">
                      <div className="w-14 h-14 bg-gradient-to-br from-primary/20 to-primary/10 rounded-xl flex items-center justify-center text-2xl">
                        {item.thumbnail}
                      </div>
                    </div>

                    {/* Content */}
                    <div className="flex-1 min-w-0">
                      <div className="flex items-start justify-between mb-3">
                        <div className="flex-1 min-w-0">
                          <h3 className="font-semibold text-lg mb-1 group-hover:text-primary transition-colors">
                            {item.title}
                          </h3>
                          <p className="text-muted-foreground text-sm mb-3 line-clamp-2">
                            {item.description}
                          </p>
                        </div>
                        <ArrowRight className="w-5 h-5 text-muted-foreground group-hover:text-primary group-hover:translate-x-1 transition-all duration-300 ml-4 flex-shrink-0" />
                      </div>

                      {/* Badges */}
                      <div className="flex items-center gap-2 mb-4">
                        <Badge variant="outline" className={getStatusColor(item.status)}>
                          {item.status}
                        </Badge>
                        <Badge variant="outline" className={getPriorityColor(item.priority)}>
                          {item.priority}
                        </Badge>
                        <Badge variant="outline" className="bg-accent/50">
                          {item.category}
                        </Badge>
                      </div>

                      {/* Meta info */}
                      <div className="flex items-center justify-between">
                        <div className="flex items-center gap-4">
                          {/* Assignee */}
                          <div className="flex items-center gap-2">
                            <Avatar className="w-7 h-7 text-sm">
                              {item.assignee.avatar}
                            </Avatar>
                            <span className="text-sm text-muted-foreground font-medium">
                              {item.assignee.name}
                            </span>
                          </div>

                          {/* Date */}
                          <div className="flex items-center gap-1 text-xs text-muted-foreground">
                            <Calendar className="w-3 h-3" />
                            {new Date(item.updatedAt).toLocaleDateString()}
                          </div>
                        </div>

                        {/* Metrics */}
                        <div className="flex items-center gap-4 text-xs text-muted-foreground">
                          <div className="flex items-center gap-1">
                            <Eye className="w-3 h-3" />
                            {item.metrics.views}
                          </div>
                          <div className="flex items-center gap-1">
                            <Heart className="w-3 h-3" />
                            {item.metrics.likes}
                          </div>
                          <div className="flex items-center gap-1">
                            <Share className="w-3 h-3" />
                            {item.metrics.shares}
                          </div>
                        </div>
                      </div>

                      {/* Progress bar */}
                      <div className="mt-4">
                        <div className="flex items-center justify-between mb-2">
                          <span className="text-xs text-muted-foreground">Progress</span>
                          <span className="text-xs font-medium">{item.metrics.completion}%</span>
                        </div>
                        <div className="w-full bg-muted rounded-full h-1.5">
                          <div 
                            className="bg-gradient-to-r from-primary to-primary/80 h-1.5 rounded-full transition-all duration-500 ease-out"
                            style={{ width: `${item.metrics.completion}%` }}
                          />
                        </div>
                      </div>
                    </div>
                  </div>
                </div>

                {/* Hover gradient overlay */}
                <div className="absolute inset-0 bg-gradient-to-r from-primary/5 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300 pointer-events-none" />
              </div>
            )
          })}
        </div>
      )
    }
approved: false
linesAdded: null
linesRemoved: null
linesDifference: null
gitCommittedAt: null
status: undone
id: 179
