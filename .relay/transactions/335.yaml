uuid: d8e5e8a1-c483-4a1d-a00d-58d349479b1d
projectId: jeli-app-shell
createdAt: '2025-10-16T07:58:59.666Z'
gitCommitMsg: >-
  refactor(messaging): improve layout cohesion and visual hierarchy

  Implements a series of UI refinements to the messaging interface to create a
  cleaner, more cohesive, and professional appearance.

  - Adds a new `ConversationHeader` to the central pane to restore immediate
  context of the conversation partner. - Groups the `TaskHeader` and context
  tabs in the right pane into a single, sticky control block for a unified feel.
  - Reduces the visual weight of `AnimatedTabs` by adjusting font size and
  padding, making them more suitable for secondary navigation. - Standardizes
  padding and background colors across all three panes (`TaskList`,
  `TaskDetail`, `MessagingContent`) to improve visual consistency. - Improves
  the empty state of the conversation view.
promptSummary: >-
  The user requested a cleaner and more cohesive layout for the messaging
  interface.
reasoning:
  - >-
    Of course. "Clean and cohesive" is an excellent goal. I'll make several
    targeted adjustments to improve the visual hierarchy, create a more unified
    feel across the panes, and reduce clutter.
  - 'My plan involves:'
  - >-
    1.  **Restoring Conversation Context**: I'll add a new, dedicated header to
    the central conversation pane (`TaskDetail`) to clearly show who the user is
    talking to. This was lost when we moved the task management controls.
  - >-
    2.  **Creating a Cohesive Control Block**: In the right-hand pane, I will
    visually merge the `TaskHeader` and the context tabs into a single, sticky
    "control block" so they feel like one unit.
  - >-
    3.  **Refining Tab Styles**: I'll make the `AnimatedTabs` component more
    subtle and less visually dominant, as it serves as secondary navigation.
  - >-
    4.  **Standardizing Layout**: I will harmonize padding and background colors
    across all panes (`TaskList`, `TaskDetail`, `MessagingContent`) to create a
    seamless and integrated experience.
  - '### Step 1: Create a New Conversation Header'
  - >-
    To bring back the immediate context of the conversation, I'll create a new
    header component specifically for the middle pane.
  - '### Step 2: Update the Main Conversation Pane'
  - >-
    Now I'll integrate the new `ConversationHeader` into `TaskDetail`, improve
    its empty state, and adjust background colors for better visual separation.
  - '### Step 3: Refine Reusable Tab Component'
  - >-
    To make the UI cleaner, I'll reduce the prominence of the `AnimatedTabs` by
    adjusting their size and font weight. This change will apply wherever they
    are used.
  - '### Step 4: Create a Cohesive Right Pane'
  - >-
    I'll restructure the right pane to group the task header and tabs into a
    single sticky block. I'll also adjust padding for a tighter, more modern
    feel.
  - '### Step 5: Unify Padding Across Components'
  - >-
    For consistency, I'll update the padding in the `ActivityFeed` and add a
    container for the tabs in the `TaskList`.
  - >-
    These changes work together to create a much cleaner, more cohesive, and
    professional-looking messaging interface.
operations:
  - type: write
    path: src/pages/Messaging/components/ConversationHeader.tsx
    content: >-
      import React from 'react';

      import type { Contact } from '../types';

      import { Avatar, AvatarFallback, AvatarImage } from
      '@/components/ui/avatar';

      import { Button } from '@/components/ui/button';

      import { Phone, MoreVertical, Video } from 'lucide-react';


      interface ConversationHeaderProps {
        contact: Contact;
      }


      export const ConversationHeader: React.FC<ConversationHeaderProps> = ({
      contact }) => {
        return (
          <div className="flex items-center justify-between p-4 border-b h-[73px] flex-shrink-0">
            <div className="flex items-center gap-3">
              <Avatar className="h-9 w-9">
                <AvatarImage src={contact.avatar} alt={contact.name} />
                <AvatarFallback>{contact.name.charAt(0)}</AvatarFallback>
              </Avatar>
              <div>
                <h3 className="font-semibold text-base">{contact.name}</h3>
                <p className="text-xs text-muted-foreground">
                  {contact.online ? <span className="text-green-500 flex items-center gap-1.5"><div className="w-2 h-2 rounded-full bg-green-500 animate-pulse" />Online</span> : `Last seen ${contact.lastSeen}`}
                </p>
              </div>
            </div>
            <div className="flex items-center gap-2">
              <Button variant="ghost" size="icon"><Phone className="w-4 h-4" /></Button>
              <Button variant="ghost" size="icon"><Video className="w-4 h-4" /></Button>
              <Button variant="ghost" size="icon"><MoreVertical className="w-4 h-4" /></Button>
            </div>
          </div>
        );
      };
    patchStrategy: replace
  - type: write
    path: src/pages/Messaging/components/TaskDetail.tsx
    content: >+
      --- src/pages/Messaging/components/TaskDetail.tsx

      +++ src/pages/Messaging/components/TaskDetail.tsx

      @@ -2,10 +2,10 @@
       import React from 'react';
       import { useParams } from 'react-router-dom';
       import { useMessagingStore } from '../store/messaging.store';
      +import { ConversationHeader } from './ConversationHeader';
       import { ActivityFeed } from './ActivityFeed';
      -import { Input } from '@/components/ui/input';
       import { Button } from '@/components/ui/button';
       import { Textarea } from '@/components/ui/textarea';
      -import { Paperclip, SendHorizontal, Smile, StickyNote } from
      'lucide-react';

      +import { Paperclip, SendHorizontal, Smile, StickyNote, MessageSquare }
      from 'lucide-react';
       import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
       
       
      @@ -16,16 +16,18 @@
         if (!taskId || !task) {
           return (
               <div className="h-full flex flex-col items-center justify-center p-6 bg-background">
      -            <p className="text-muted-foreground">Select a task to see its
      details.</p>

      +            <MessageSquare className="w-16 h-16 text-muted-foreground/30
      mb-4" />

      +            <p className="text-muted-foreground">Select a conversation to
      see its details.</p>
               </div>
           );
         }
       
         return (
      -    <div className="h-full flex flex-col bg-background">

      +    <div className="h-full flex flex-col bg-background/50">

      +      <ConversationHeader contact={task.contact} />
             <ActivityFeed messages={task.messages} contact={task.contact} />
       
             {/* Input Form */}
      -      <div className="p-4 border-t flex-shrink-0 bg-background/50">

      +      <div className="p-4 border-t flex-shrink-0 bg-background">
               <Tabs defaultValue="comment" className="w-full">
                 <TabsList className="grid w-full grid-cols-2 mb-2">
                   <TabsTrigger value="comment">Comment</TabsTrigger>

    patchStrategy: standard-diff
  - type: write
    path: src/components/ui/animated-tabs.tsx
    content: >+
      --- src/components/ui/animated-tabs.tsx

      +++ src/components/ui/animated-tabs.tsx

      @@ -51,13 +51,13 @@
                   key={tab.id}
                   ref={(el) => (tabRefs.current[index] = el)}
                   className={cn(
      -              "group relative cursor-pointer px-4 py-5 text-center
      transition-colors duration-300 focus:outline-none focus-visible:ring-2
      focus-visible:ring-ring focus-visible:ring-offset-2",

      +              "group relative cursor-pointer px-3 py-3 text-center
      transition-colors duration-300 focus:outline-none focus-visible:ring-2
      focus-visible:ring-ring focus-visible:ring-offset-2",
                     index === activeIndex 
                       ? "text-primary" 
                       : "text-muted-foreground hover:text-foreground"
                   )}
                   onClick={() => onTabChange(tab.id)}
                 >
      -            <span className="flex items-center gap-2 text-lg
      font-semibold whitespace-nowrap">{tab.label}</span>

      +            <span className="flex items-center gap-2 text-sm font-medium
      whitespace-nowrap">{tab.label}</span>
                 </button>
               ))}
             </div>

    patchStrategy: standard-diff
  - type: write
    path: src/pages/Messaging/components/MessagingContent.tsx
    content: >+
      --- src/pages/Messaging/components/MessagingContent.tsx

      +++ src/pages/Messaging/components/MessagingContent.tsx

      @@ -34,16 +34,18 @@
         }
         
         return (
      -    <div className="h-full flex-1 flex flex-col bg-background
      overflow-y-auto">

      -      {/* Task Management Header */}

      -      <div className="p-6 border-b">

      -        <TaskHeader task={task} />

      -      </div>

      -

      -      <div className="flex-shrink-0 border-b bg-background/80
      backdrop-blur-sm sticky top-0 z-10">

      -        <AnimatedTabs tabs={tabs} activeTab={activeTab}
      onTabChange={setActiveTab} className="px-6" />

      -      </div>

      -

      -      <div className="flex-1 p-6">

      +    <div className="h-full flex-1 flex flex-col bg-background/50
      overflow-y-auto">

      +      {/* Header and Context Tabs */}

      +      <div className="flex-shrink-0 border-b bg-background sticky top-0
      z-10">

      +        {/* Task Management Header */}

      +        <div className="p-4">

      +          <TaskHeader task={task} />

      +        </div>

      +        

      +        <AnimatedTabs tabs={tabs} activeTab={activeTab}
      onTabChange={setActiveTab} className="px-2" />

      +      </div>

      +

      +      <div className="flex-1 p-4">
               {activeTab === 'contact' && <ContactInfoPanel contact={task.contact} />}
               {activeTab === 'ai' && <AIInsightsPanel task={task} />}
               {activeTab === 'activity' && <ActivityPanel contact={task.contact} />}

    patchStrategy: standard-diff
  - type: write
    path: src/pages/Messaging/components/ActivityFeed.tsx
    content: |+
      --- src/pages/Messaging/components/ActivityFeed.tsx
      +++ src/pages/Messaging/components/ActivityFeed.tsx
      @@ -14,7 +14,7 @@
         const getAssigneeById = useMessagingStore(state => state.getAssigneeById);
       
         return (
      -    <div className="flex-1 overflow-y-auto p-6 space-y-6">
      +    <div className="flex-1 overflow-y-auto p-4 space-y-6">
             {messages.map((message) => {
               const assignee = message.userId ? getAssigneeById(message.userId) : null;
               
               if (message.type === 'system') {

    patchStrategy: standard-diff
  - type: write
    path: src/pages/Messaging/components/TaskList.tsx
    content: >+
      --- src/pages/Messaging/components/TaskList.tsx

      +++ src/pages/Messaging/components/TaskList.tsx

      @@ -73,7 +73,9 @@
                       </PopoverContent>
                   </Popover>
               </div>
             </div>
      -      <AnimatedTabs tabs={tabs} activeTab={activeTab}
      onTabChange={setActiveTab} />

      +      <div className="px-2 border-b">

      +        <AnimatedTabs tabs={tabs} activeTab={activeTab}
      onTabChange={setActiveTab} />

      +      </div>
       
             {/* Task List */}
             <div className="flex-1 overflow-y-auto">

    patchStrategy: standard-diff
snapshot:
  src/pages/Messaging/components/ConversationHeader.tsx: null
  src/pages/Messaging/components/TaskList.tsx: >-
    import { useState, useMemo } from 'react';

    import { Search, SlidersHorizontal, Check, Inbox, Clock, Zap, Shield } from
    'lucide-react';

    import { Link, useParams } from 'react-router-dom';

    import { formatDistanceToNow } from 'date-fns';

    import { useMessagingStore } from '../store/messaging.store';

    import { Button } from '@/components/ui/button';

    import { Input } from '@/components/ui/input';

    import { Avatar, AvatarFallback, AvatarImage } from
    '@/components/ui/avatar';

    import { Badge } from '@/components/ui/badge';

    import { Popover, PopoverContent, PopoverTrigger } from
    '@/components/ui/popover';

    import { Command, CommandEmpty, CommandGroup, CommandInput, CommandItem,
    CommandList, CommandSeparator } from '@/components/ui/command';

    import { cn } from '@/lib/utils';

    import { AnimatedTabs } from '@/components/ui/animated-tabs';

    import type { TaskStatus, TaskPriority } from '../types';


    // Local helpers for styling based on task properties

    const getStatusIcon = (status: TaskStatus) => {
        switch(status) {
            case 'open': return <Inbox className="w-3 h-3 text-blue-500" />;
            case 'in-progress': return <Zap className="w-3 h-3 text-yellow-500" />;
            case 'done': return <Shield className="w-3 h-3 text-green-500" />;
            case 'snoozed': return <Clock className="w-3 h-3 text-gray-500" />;
        }
    };


    const getPriorityIcon = (priority: TaskPriority) => {
        switch(priority) {
            case 'high': return <div className="w-2 h-2 rounded-full bg-red-500" />;
            case 'medium': return <div className="w-2 h-2 rounded-full bg-yellow-500" />;
            case 'low': return <div className="w-2 h-2 rounded-full bg-green-500" />;
            default: return <div className="w-2 h-2 rounded-full bg-gray-400" />;
        }
    };


    const statusOptions: { value: TaskStatus; label: string }[] = [
        { value: 'open', label: 'Open' }, { value: 'in-progress', label: 'In Progress' }, { value: 'done', label: 'Done' }, { value: 'snoozed', label: 'Snoozed' }
    ];

    const priorityOptions: { value: TaskPriority; label: string }[] = [
        { value: 'high', label: 'High' }, { value: 'medium', label: 'Medium' }, { value: 'low', label: 'Low' }, { value: 'none', label: 'None' }
    ];


    export const TaskList = () => {
      const { conversationId } = useParams<{ conversationId: string }>(); // This will be taskId later
      const { 
        getFilteredTasks,
        searchTerm,
        setSearchTerm,
        activeFilters,
       } = useMessagingStore();
      const tasks = getFilteredTasks();
      const [activeTab, setActiveTab] = useState('all');

      const tabs = useMemo(() => [{ id: 'all', label: 'All Tasks' }, { id: 'unread', label: 'Unread' }], []);

      const filteredTasks = useMemo(() => {
        if (activeTab === 'unread') {
          return tasks.filter(task => task.unreadCount > 0);
        }
        return tasks;
      }, [tasks, activeTab]);
      
      const activeFilterCount = Object.values(activeFilters).reduce((count, filterArray) => count + filterArray.length, 0);


      return (
        <div className="h-full flex flex-col border-r bg-background/80">
          {/* Header */}
          <div className="flex-shrink-0 border-b bg-background/80 p-4 space-y-4">
            <h2 className="text-xl font-bold tracking-tight">Inbox</h2>
            <div className="flex gap-2">
                <div className="relative flex-1">
                    <Search className="absolute left-3 top-1/2 -translate-y-1/2 w-4 h-4 text-muted-foreground" />
                    <Input placeholder="Search tasks..." className="pl-9" value={searchTerm} onChange={e => setSearchTerm(e.target.value)} />
                </div>
                <Popover>
                    <PopoverTrigger asChild>
                        <Button variant="outline" size="sm" className="h-10 border-dashed gap-2">
                            <SlidersHorizontal className="w-4 h-4" />
                            Filters
                            {activeFilterCount > 0 && <Badge variant="secondary" className="rounded-sm px-1 font-normal">{activeFilterCount}</Badge>}
                        </Button>
                    </PopoverTrigger>
                    <PopoverContent className="w-[240px] p-0" align="end">
                        <FilterCommand />
                    </PopoverContent>
                </Popover>
            </div>
          </div>
          <AnimatedTabs tabs={tabs} activeTab={activeTab} onTabChange={setActiveTab} />

          {/* Task List */}
          <div className="flex-1 overflow-y-auto">
            <nav className="p-2 space-y-1">
              {filteredTasks.map(task => (
                <Link
                  to={`/messaging/${task.id}`}
                  key={task.id}
                  className={cn(
                    "block p-3 rounded-lg text-left transition-all duration-200 hover:bg-accent/50",
                    "focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 outline-none",
                    conversationId === task.id && "bg-accent"
                  )}
                >
                  <div className="flex items-start gap-3">
                    <Avatar className="h-9 w-9 mt-1">
                      <AvatarImage src={task.contact.avatar} alt={task.contact.name} />
                      <AvatarFallback>{task.contact.name.charAt(0)}</AvatarFallback>
                    </Avatar>
                    <div className="flex-1 overflow-hidden">
                        <div className="flex justify-between items-center mb-1">
                            <p className="text-sm font-semibold truncate pr-2">{task.contact.name}</p>
                            <p className="text-xs text-muted-foreground whitespace-nowrap">{formatDistanceToNow(new Date(task.lastActivity.timestamp), { addSuffix: true })}</p>
                        </div>
                        <p className="text-sm truncate text-foreground">{task.title}</p>
                        <div className="flex items-center gap-3 mt-2 text-xs text-muted-foreground">
                            <div className="flex items-center gap-1.5" title={task.status}>
                                {getStatusIcon(task.status)}
                                <span className="capitalize">{task.status.replace('-', ' ')}</span>
                            </div>
                            <div className="flex items-center gap-1.5" title={task.priority}>
                                {getPriorityIcon(task.priority)}
                                <span className="capitalize">{task.priority}</span>
                            </div>
                            {task.assignee && (
                                <div className="flex items-center gap-1.5" title={`Assigned to ${task.assignee.name}`}>
                                    <Avatar className="h-4 w-4"><AvatarImage src={task.assignee.avatar} /></Avatar>
                                </div>
                            )}
                        </div>
                    </div>
                    {task.unreadCount > 0 && (
                        <div className="flex items-center justify-center self-center ml-auto">
                            <Badge className="bg-primary h-5 w-5 p-0 flex items-center justify-center">{task.unreadCount}</Badge>
                        </div>
                    )}
                  </div>
                </Link>
              ))}
            </nav>
          </div>
        </div>
      );
    };


    // Filter component for popover

    function FilterCommand() {
        const { activeFilters, setFilters, assignees, getAvailableTags } = useMessagingStore();
        const availableTags = useMemo(() => getAvailableTags(), [getAvailableTags]);

        const handleSelect = (type: 'status' | 'priority' | 'assigneeId' | 'tags', value: string) => {
            const current = new Set(activeFilters[type]);
            current.has(value) ? current.delete(value) : current.add(value);
            setFilters({ [type]: Array.from(current) });
        };

        const hasActiveFilters = Object.values(activeFilters).some(arr => arr.length > 0);

        return (
            <Command>
                <CommandInput placeholder="Filter by..." />
                <CommandList>
                    <CommandEmpty>No results found.</CommandEmpty>
                    <CommandGroup heading="Status">
                        {statusOptions.map(o => (
                            <CommandItem key={o.value} onSelect={() => handleSelect('status', o.value)}>
                                <div className={cn('mr-2 flex h-4 w-4 items-center justify-center rounded-sm border border-primary', activeFilters.status.includes(o.value) ? 'bg-primary text-primary-foreground' : 'opacity-50 [&_svg]:invisible')}><Check className="h-4 w-4" /></div>
                                <span>{o.label}</span>
                            </CommandItem>
                        ))}
                    </CommandGroup>
                    <CommandSeparator />
                    <CommandGroup heading="Priority">
                        {priorityOptions.map(o => (
                            <CommandItem key={o.value} onSelect={() => handleSelect('priority', o.value)}>
                                <div className={cn('mr-2 flex h-4 w-4 items-center justify-center rounded-sm border border-primary', activeFilters.priority.includes(o.value) ? 'bg-primary text-primary-foreground' : 'opacity-50 [&_svg]:invisible')}><Check className="h-4 w-4" /></div>
                                <span>{o.label}</span>
                            </CommandItem>
                        ))}
                    </CommandGroup>
                    <CommandSeparator />
                    <CommandGroup heading="Assignee">
                        {assignees.map(a => (
                            <CommandItem key={a.id} onSelect={() => handleSelect('assigneeId', a.id)}>
                                <div className={cn('mr-2 flex h-4 w-4 items-center justify-center rounded-sm border border-primary', activeFilters.assigneeId.includes(a.id) ? 'bg-primary text-primary-foreground' : 'opacity-50 [&_svg]:invisible')}><Check className="h-4 w-4" /></div>
                                <Avatar className="h-5 w-5 mr-2"><AvatarImage src={a.avatar} /><AvatarFallback>{a.name.charAt(0)}</AvatarFallback></Avatar>
                                <span>{a.name}</span>
                            </CommandItem>
                        ))}
                    </CommandGroup>
                    <CommandSeparator />
                    <CommandGroup heading="Tags">
                        {availableTags.map(t => (
                            <CommandItem key={t} onSelect={() => handleSelect('tags', t)}>
                                <div className={cn('mr-2 flex h-4 w-4 items-center justify-center rounded-sm border border-primary', activeFilters.tags.includes(t) ? 'bg-primary text-primary-foreground' : 'opacity-50 [&_svg]:invisible')}><Check className="h-4 w-4" /></div>
                                <span>{t}</span>
                            </CommandItem>
                        ))}
                    </CommandGroup>

                    {hasActiveFilters && (
                        <>
                            <CommandSeparator />
                            <CommandGroup>
                                <CommandItem onSelect={() => setFilters({ status: [], priority: [], assigneeId: [], tags: [], channels: [] })} className="justify-center text-center text-sm">Clear all filters</CommandItem>
                            </CommandGroup>
                        </>
                    )}
                </CommandList>
            </Command>
        );
    }
  src/pages/Messaging/components/MessagingContent.tsx: >-
    import React, { useState, useMemo } from 'react';

    import { useMessagingStore } from '../store/messaging.store';

    import { ContactInfoPanel } from './ContactInfoPanel';

    import { AIInsightsPanel } from './AIInsightsPanel';

    import { ActivityPanel } from './ActivityPanel';

    import { NotesPanel } from './NotesPanel';

    import { TaskHeader } from './TaskHeader';

    import { AnimatedTabs } from '@/components/ui/animated-tabs';

    import { TechOrbitDisplay } from '@/components/effects/OrbitingCircles';


    interface MessagingContentProps {
      conversationId?: string;
    }


    export const MessagingContent: React.FC<MessagingContentProps> = ({
    conversationId }) => {
      const [activeTab, setActiveTab] = useState('contact');
      const task = useMessagingStore(state => conversationId ? state.getTaskById(conversationId) : undefined);
      
      const tabs = useMemo(() => [
        { id: 'contact', label: 'Contact' },
        { id: 'ai', label: 'AI Insights' },
        { id: 'activity', label: 'Activity' },
        { id: 'notes', label: 'Notes' },
      ], []);

      if (!task) {
        return (
          <div className="h-full flex-1 flex flex-col items-center justify-center bg-background p-6 relative overflow-hidden">
            <TechOrbitDisplay text="Context" />
            <div className="text-center z-10 bg-background/50 backdrop-blur-sm p-6 rounded-lg">
                <h3 className="mt-4 text-lg font-medium">Select a Task</h3>
                <p className="mt-1 text-sm text-muted-foreground">
                    Task details and contact information will appear here.
                </p>
            </div>
          </div>
        );
      }
      
      return (
        <div className="h-full flex-1 flex flex-col bg-background overflow-y-auto">
          {/* Task Management Header */}
          <div className="p-6 border-b">
            <TaskHeader task={task} />
          </div>

          <div className="flex-shrink-0 border-b bg-background/80 backdrop-blur-sm sticky top-0 z-10">
            <AnimatedTabs tabs={tabs} activeTab={activeTab} onTabChange={setActiveTab} className="px-6" />
          </div>

          <div className="flex-1 p-6">
            {activeTab === 'contact' && <ContactInfoPanel contact={task.contact} />}
            {activeTab === 'ai' && <AIInsightsPanel task={task} />}
            {activeTab === 'activity' && <ActivityPanel contact={task.contact} />}
            {activeTab === 'notes' && <NotesPanel contact={task.contact} />}
          </div>
        </div>
      );
    };
  src/pages/Messaging/components/TaskDetail.tsx: >-
    import React from 'react';

    import { useParams } from 'react-router-dom';

    import { useMessagingStore } from '../store/messaging.store';

    import { ActivityFeed } from './ActivityFeed';

    import { Input } from '@/components/ui/input';

    import { Button } from '@/components/ui/button';

    import { Textarea } from '@/components/ui/textarea';

    import { Paperclip, SendHorizontal, Smile, StickyNote } from 'lucide-react';

    import { Tabs, TabsContent, TabsList, TabsTrigger } from
    "@/components/ui/tabs";



    export const TaskDetail: React.FC = () => {
      const { conversationId: taskId } = useParams<{ conversationId: string }>();
      const task = useMessagingStore(state => taskId ? state.getTaskById(taskId) : undefined);
      
      if (!taskId || !task) {
        return (
            <div className="h-full flex flex-col items-center justify-center p-6 bg-background">
                <p className="text-muted-foreground">Select a task to see its details.</p>
            </div>
        );
      }

      return (
        <div className="h-full flex flex-col bg-background">
          <ActivityFeed messages={task.messages} contact={task.contact} />

          {/* Input Form */}
          <div className="p-4 border-t flex-shrink-0 bg-background/50">
            <Tabs defaultValue="comment" className="w-full">
              <TabsList className="grid w-full grid-cols-2 mb-2">
                <TabsTrigger value="comment">Comment</TabsTrigger>
                <TabsTrigger value="note"><StickyNote className="w-4 h-4 mr-2" />Internal Note</TabsTrigger>
              </TabsList>
              <TabsContent value="comment">
                 <div className="relative">
                    <Textarea placeholder={`Reply to ${task.contact.name}...`} className="pr-24 min-h-[52px]" />
                    <div className="absolute right-2 top-2 flex items-center gap-1">
                        <Button variant="ghost" size="icon" className="rounded-full h-8 w-8"><Smile className="w-4 h-4" /></Button>
                        <Button variant="ghost" size="icon" className="rounded-full h-8 w-8"><Paperclip className="w-4 h-4" /></Button>
                        <Button size="icon" className="rounded-full h-8 w-8"><SendHorizontal className="w-4 h-4" /></Button>
                    </div>
                </div>
              </TabsContent>
              <TabsContent value="note">
                <div className="relative">
                    <Textarea placeholder="Add an internal note..." className="pr-24 min-h-[52px] bg-yellow-400/10 border-yellow-400/30 focus-visible:ring-yellow-500" />
                    <div className="absolute right-2 top-2 flex items-center gap-1">
                        <Button size="icon" className="rounded-full h-8 w-8"><SendHorizontal className="w-4 h-4" /></Button>
                    </div>
                </div>
              </TabsContent>
            </Tabs>
          </div>
        </div>
      );
    };
  src/pages/Messaging/components/ActivityFeed.tsx: >
    import React from 'react';

    import { useMessagingStore } from '../store/messaging.store';

    import type { Message, Contact, Assignee } from '../types';

    import { cn } from '@/lib/utils';

    import { Avatar, AvatarFallback, AvatarImage } from
    '@/components/ui/avatar';

    import { formatDistanceToNow } from 'date-fns';

    import { StickyNote, Info } from 'lucide-react';


    interface ActivityFeedProps {
      messages: Message[];
      contact: Contact;
    }


    export const ActivityFeed: React.FC<ActivityFeedProps> = ({ messages,
    contact }) => {
      const getAssigneeById = useMessagingStore(state => state.getAssigneeById);

      return (
        <div className="flex-1 overflow-y-auto p-6 space-y-6">
          {messages.map((message) => {
            const assignee = message.userId ? getAssigneeById(message.userId) : null;
            
            if (message.type === 'system') {
              return (
                <div key={message.id} className="flex items-center justify-center gap-2 text-xs text-muted-foreground">
                  <Info className="w-3.5 h-3.5" />
                  <p>{message.text}</p>
                  <p className="whitespace-nowrap">{formatDistanceToNow(new Date(message.timestamp), { addSuffix: true })}</p>
                </div>
              );
            }

            if (message.type === 'note') {
              return (
                <div key={message.id} className="flex items-start gap-3">
                  <div className="p-1.5 bg-yellow-400/20 text-yellow-600 rounded-full mt-1.5">
                    <StickyNote className="w-4 h-4" />
                  </div>
                  <div className="flex-1">
                    <div className="flex items-center gap-2 mb-1">
                      <p className="font-semibold text-sm">{assignee?.name || 'User'}</p>
                      <p className="text-xs text-muted-foreground">{formatDistanceToNow(new Date(message.timestamp), { addSuffix: true })}</p>
                    </div>
                    <div className="bg-card border rounded-lg p-3 text-sm">
                      <p>{message.text}</p>
                    </div>
                  </div>
                </div>
              )
            }

            // Default: 'comment' type
            return (
              <div key={message.id} className={cn(
                "flex items-end gap-3",
                message.sender === 'user' ? 'justify-end' : 'justify-start'
              )}>
                {message.sender === 'contact' && (
                  <Avatar className="h-8 w-8">
                    <AvatarImage src={contact.avatar} />
                    <AvatarFallback>{contact.name.charAt(0)}</AvatarFallback>
                  </Avatar>
                )}
                <div className={cn(
                  "max-w-xs md:max-w-md lg:max-w-lg p-3 rounded-2xl",
                  message.sender === 'user' 
                    ? 'bg-primary text-primary-foreground rounded-br-none' 
                    : 'bg-card border rounded-bl-none'
                )}>
                  <p className="text-sm">{message.text}</p>
                </div>
              </div>
            )
          })}
        </div>
      );
    };
  src/components/ui/animated-tabs.tsx: |-
    "use client"

    import * as React from "react"
    import { useState, useRef, useEffect, useLayoutEffect } from "react"
    import { cn } from "@/lib/utils"

    interface Tab {
      id: string
      label: React.ReactNode
    }

    interface AnimatedTabsProps extends React.HTMLAttributes<HTMLDivElement> {
      tabs: Tab[]
      activeTab: string
      onTabChange: (tabId: string) => void
    }

    const AnimatedTabs = React.forwardRef<HTMLDivElement, AnimatedTabsProps>(
      ({ className, tabs, activeTab, onTabChange, ...props }, ref) => {
        const [activeIndex, setActiveIndex] = useState(0)
        const [activeStyle, setActiveStyle] = useState({ left: "0px", width: "0px" })
        const tabRefs = useRef<(HTMLButtonElement | null)[]>([])

        // Update active index when controlled prop changes
        useEffect(() => {
          const newActiveIndex = tabs.findIndex(tab => tab.id === activeTab)
          if (newActiveIndex !== -1 && newActiveIndex !== activeIndex) {
            setActiveIndex(newActiveIndex)
          }
        }, [activeTab, tabs, activeIndex])
        
        // Update active indicator position
        useEffect(() => {
          const activeElement = tabRefs.current[activeIndex]
          if (activeElement) {
            const { offsetLeft, offsetWidth } = activeElement
            setActiveStyle({
              left: `${offsetLeft}px`,
              width: `${offsetWidth}px`,
            })
          }
        }, [activeIndex, tabs])

        // Set initial position of active indicator
        useLayoutEffect(() => {
            const initialActiveIndex = activeTab ? tabs.findIndex(tab => tab.id === activeTab) : 0
            const indexToUse = initialActiveIndex !== -1 ? initialActiveIndex : 0
            
            const firstElement = tabRefs.current[indexToUse]
            if (firstElement) {
              const { offsetLeft, offsetWidth } = firstElement
              setActiveStyle({
                left: `${offsetLeft}px`,
                width: `${offsetWidth}px`,
              })
            }
        }, [tabs, activeTab])

        return (
          <div 
            ref={ref} 
            className={cn("relative flex w-full items-center", className)} 
            {...props}
          >
            {/* Active Indicator */}
            <div
              className="absolute -bottom-px h-0.5 bg-primary transition-all duration-300 ease-out"
              style={activeStyle}
            />

            {/* Tabs */}
            {tabs.map((tab, index) => (
              <button
                key={tab.id}
                ref={(el) => (tabRefs.current[index] = el)}
                className={cn(
                  "group relative cursor-pointer px-4 py-5 text-center transition-colors duration-300 focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
                  index === activeIndex 
                    ? "text-primary" 
                    : "text-muted-foreground hover:text-foreground"
                )}
                onClick={() => onTabChange(tab.id)}
              >
                <span className="flex items-center gap-2 text-lg font-semibold whitespace-nowrap">{tab.label}</span>
              </button>
            ))}
          </div>
        )
      }
    )
    AnimatedTabs.displayName = "AnimatedTabs"

    export { AnimatedTabs }
approved: false
linesAdded: null
linesRemoved: null
linesDifference: null
gitCommittedAt: null
status: undone
id: 335
