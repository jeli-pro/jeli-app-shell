uuid: 489f688e-7e9b-4394-ae74-9d58a5c484a0
projectId: amazing-app-shell
createdAt: '2025-10-10T10:27:14.485Z'
gitCommitMsg: |-
  feat: Enhance UI with side pane settings and immersive fullscreen
  This commit introduces several user experience improvements:
  - Refactors the Settings panel from a modal into content for the right-side
    pane, allowing settings to be adjusted without a full-screen overlay.
  - Implements a sticky header within the main content area to keep primary
    actions and the page title visible during scrolling.
  - Adds a "scroll to bottom" button for easier navigation on long content
    pages.
  - Enhances the fullscreen mode to be fully immersive by hiding the TopBar and
    Sidebar, providing a distraction-free view.
promptSummary: >-
  The user requested several UI/UX enhancements including moving the settings
  panel to a side pane, making the main content header sticky, adding a
  scroll-to-bottom button, and creating a more immersive fullscreen mode that
  hides all chrome.
reasoning:
  - >-
    This set of changes introduces several enhancements to the application shell
    to improve user experience and functionality.
  - >-
    1.  **Settings in Side Pane**: The Settings panel, previously a modal, is
    now integrated into the right-hand side pane. Clicking the settings icon in
    the top bar now opens this pane, providing a more integrated feel. The
    "Details" panel is also accessible via the side pane, and the application
    state now manages which content is displayed.
  - >-
    2.  **Sticky Header in Main Content**: The header within the main content
    area (containing the "Dashboard" title and search bar) is now fixed at the
    top of the content area and does not scroll away. This keeps primary
    navigation and actions always accessible.
  - >-
    3.  **Scroll-to-Bottom Button**: A "scroll to bottom" button now appears in
    the main content area when you've scrolled down, allowing for quick
    navigation to the end of long content.
  - >-
    4.  **Immersive Fullscreen Mode**: Activating fullscreen mode is now more
    immersive. It completely hides the top bar and the sidebar, allowing the
    main content to take over the entire screen for a focused view.
  - 'Here are the step-by-step changes:'
  - >-
    First, I'll update the global state management in `appStore.ts` to handle
    the new side pane logic. This involves tracking which content (`details` or
    `settings`) should be in the side pane and providing actions to open and
    close it.
  - >-
    Next, I'll convert the `SettingsPanel` modal into a content component that
    can be placed inside the `RightPane`.
  - Now, I'll delete the old `SettingsPanel.tsx` file.
  - >-
    I'll modify `RightPane.tsx` to display the correct content based on the app
    state.
  - >-
    The `TopBar` needs to be updated to use the new actions for opening the side
    pane and to remove its local state management for the settings panel.
  - >-
    I will now refactor `MainContent.tsx` to have a sticky header and add the
    scroll-to-bottom button.
  - >-
    Finally, I'll update `AppShell.tsx` to orchestrate all these changes,
    including the immersive fullscreen mode animation.
  - >-
    These changes complete all the requested enhancements, resulting in a more
    polished and functional application shell.
operations:
  - type: write
    path: src/store/appStore.ts
    content: >+
      --- src/store/appStore.ts

      +++ src/store/appStore.ts

      @@ -6,6 +6,7 @@
         sidebarState: SidebarState
         bodyState: BodyState
         isDarkMode: boolean
      +  sidePaneContent: 'details' | 'settings'
         sidebarWidth: number
         rightPaneWidth: number
         isResizing: boolean
      @@ -29,15 +30,15 @@
         hideSidebar: () => void
         showSidebar: () => void
         peekSidebar: () => void
         toggleFullscreen: () => void
      -  toggleSidePane: () => void

      +  openSidePane: (content: 'details' | 'settings') => void

      +  closeSidePane: () => void
         resetToDefaults: () => void
       }
       
       const defaultState = {
         sidebarState: SIDEBAR_STATES.EXPANDED as SidebarState,
         bodyState: BODY_STATES.NORMAL as BodyState,
      +  sidePaneContent: 'details' as const,
         isDarkMode: false,
         sidebarWidth: 280,
         rightPaneWidth: typeof window !== 'undefined' ? Math.max(300, Math.round(window.innerWidth * 0.6)) : 400,
      @@ -53,6 +54,7 @@
             ...defaultState,
             
             // Basic setters
      +      sidePaneContent: 'details',
             setSidebarState: (state) => set({ sidebarState: state }),
             setBodyState: (state) => set({ bodyState: state }),
             toggleDarkMode: () => {
      @@ -93,12 +95,20 @@
               })
             },
             
      -      toggleSidePane: () => {

      -        const current = get().bodyState

      -        set({ 

      -          bodyState: current === BODY_STATES.SIDE_PANE ?
      BODY_STATES.NORMAL : BODY_STATES.SIDE_PANE 

      -        })

      +      openSidePane: (content: 'details' | 'settings') => {

      +        const { bodyState, sidePaneContent } = get()

      +        if (bodyState === BODY_STATES.SIDE_PANE && sidePaneContent ===
      content) {

      +          // If it's open with same content, close it.

      +          set({ bodyState: BODY_STATES.NORMAL });

      +        } else {

      +          // If closed, or different content, open with new content.

      +          set({ bodyState: BODY_STATES.SIDE_PANE, sidePaneContent:
      content });

      +        }

      +      },

      +      closeSidePane: () => {

      +        set({ bodyState: BODY_STATES.NORMAL })
             },
             
             resetToDefaults: () => set(defaultState),
      @@ -108,6 +118,7 @@
             partialize: (state) => ({
               sidebarState: state.sidebarState,
               bodyState: state.bodyState,
      +        sidePaneContent: state.sidePaneContent,
               isDarkMode: state.isDarkMode,
               sidebarWidth: state.sidebarWidth,
               rightPaneWidth: state.rightPaneWidth,

    patchStrategy: standard-diff
  - type: write
    path: src/components/SettingsContent.tsx
    content: |-
      import { useState } from 'react'
      import { 
        Settings, 
        X, 
        Moon, 
        Sun, 
        Zap, 
        Eye, 
        Minimize2, 
        RotateCcw,
        Monitor,
        Smartphone,
        Palette,
        Accessibility
      } from 'lucide-react'
      import { cn } from '@/lib/utils'
      import { useAppStore } from '@/store/appStore'

      export function SettingsContent() {
        const {
          isDarkMode,
          reducedMotion,
          compactMode,
          autoExpandSidebar,
          sidebarWidth,
          toggleDarkMode,
          setReducedMotion,
          setCompactMode,
          setAutoExpandSidebar,
          setSidebarWidth,
          resetToDefaults
        } = useAppStore()

        const [tempSidebarWidth, setTempSidebarWidth] = useState(sidebarWidth)

        const handleSidebarWidthChange = (width: number) => {
          setTempSidebarWidth(width)
          setSidebarWidth(width)
        }

        return (
          <div className="space-y-10">
            {/* Appearance */}
            <div className="space-y-4">
              <h3 className="text-sm font-semibold text-muted-foreground uppercase tracking-wider flex items-center gap-2">
                <Palette className="w-4 h-4" />
                Appearance
              </h3>
              
              {/* Dark Mode */}
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-3">
                  {isDarkMode ? <Moon className="w-4 h-4" /> : <Sun className="w-4 h-4" />}
                  <div>
                    <p className="font-medium">Dark Mode</p>
                    <p className="text-sm text-muted-foreground">Toggle dark theme</p>
                  </div>
                </div>
                <button
                  onClick={toggleDarkMode}
                  className={cn(
                    "relative inline-flex h-7 w-12 items-center rounded-full transition-colors",
                    isDarkMode ? "bg-primary" : "bg-muted"
                  )}
                >
                  <span
                    className={cn(
                      "inline-block h-5 w-5 transform rounded-full bg-background transition-transform",
                      isDarkMode ? "translate-x-6" : "translate-x-1"
                    )}
                  />
                </button>
              </div>

              {/* Compact Mode */}
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-3">
                  <Minimize2 className="w-4 h-4" />
                  <div>
                    <p className="font-medium">Compact Mode</p>
                    <p className="text-sm text-muted-foreground">Reduce spacing and sizes</p>
                  </div>
                </div>
                <button
                  onClick={() => setCompactMode(!compactMode)}
                  className={cn(
                    "relative inline-flex h-7 w-12 items-center rounded-full transition-colors",
                    compactMode ? "bg-primary" : "bg-muted"
                  )}
                >
                  <span
                    className={cn(
                      "inline-block h-5 w-5 transform rounded-full bg-background transition-transform",
                      compactMode ? "translate-x-6" : "translate-x-1"
                    )}
                  />
                </button>
              </div>
            </div>

            {/* Behavior */}
            <div className="space-y-4">
              <h3 className="text-sm font-semibold text-muted-foreground uppercase tracking-wider flex items-center gap-2">
                <Zap className="w-4 h-4" />
                Behavior
              </h3>

              {/* Auto Expand Sidebar */}
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-3">
                  <Eye className="w-4 h-4" />
                  <div>
                    <p className="font-medium">Auto Expand Sidebar</p>
                    <p className="text-sm text-muted-foreground">Expand on hover when collapsed</p>
                  </div>
                </div>
                <button
                  onClick={() => setAutoExpandSidebar(!autoExpandSidebar)}
                  className={cn(
                    "relative inline-flex h-7 w-12 items-center rounded-full transition-colors",
                    autoExpandSidebar ? "bg-primary" : "bg-muted"
                  )}
                >
                  <span
                    className={cn(
                      "inline-block h-5 w-5 transform rounded-full bg-background transition-transform",
                      autoExpandSidebar ? "translate-x-6" : "translate-x-1"
                    )}
                  />
                </button>
              </div>

              {/* Sidebar Width */}
              <div className="space-y-3">
                <div className="flex items-center gap-3">
                  <Monitor className="w-4 h-4" />
                  <div>
                    <p className="font-medium">Sidebar Width</p>
                    <p className="text-sm text-muted-foreground">{tempSidebarWidth}px</p>
                  </div>
                </div>
                <div className="space-y-2">
                  <input
                    type="range"
                    min="200"
                    max="500"
                    step="10"
                    value={tempSidebarWidth}
                    onChange={(e) => handleSidebarWidthChange(Number(e.target.value))}
                    className="w-full h-1.5 bg-muted rounded-lg appearance-none cursor-pointer slider"
                  />
                  <div className="flex justify-between text-xs text-muted-foreground">
                    <span>200px</span>
                    <span>350px</span>
                    <span>500px</span>
                  </div>
                </div>
              </div>
            </div>

            {/* Accessibility */}
            <div className="space-y-4">
              <h3 className="text-sm font-semibold text-muted-foreground uppercase tracking-wider flex items-center gap-2">
                <Accessibility className="w-4 h-4" />
                Accessibility
              </h3>

              {/* Reduced Motion */}
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-3">
                  <Zap className="w-4 h-4" />
                  <div>
                    <p className="font-medium">Reduced Motion</p>
                    <p className="text-sm text-muted-foreground">Minimize animations</p>
                  </div>
                </div>
                <button
                  onClick={() => setReducedMotion(!reducedMotion)}
                  className={cn(
                    "relative inline-flex h-7 w-12 items-center rounded-full transition-colors",
                    reducedMotion ? "bg-primary" : "bg-muted"
                  )}
                >
                  <span
                    className={cn(
                      "inline-block h-5 w-5 transform rounded-full bg-background transition-transform",
                      reducedMotion ? "translate-x-6" : "translate-x-1"
                    )}
                  />
                </button>
              </div>
            </div>

            {/* Presets */}
            <div className="space-y-4">
              <h3 className="text-sm font-semibold text-muted-foreground uppercase tracking-wider">
                Quick Presets
              </h3>
              
              <div className="grid grid-cols-2 gap-3">
                <button 
                  onClick={() => {
                    setCompactMode(false)
                    setReducedMotion(false)
                    setSidebarWidth(320)
                  }}
                  className="p-4 bg-accent/30 hover:bg-accent/50 rounded-xl transition-colors text-left"
                >
                  <Monitor className="w-4 h-4 mb-2" />
                  <p className="font-medium text-sm">Desktop</p>
                  <p className="text-xs text-muted-foreground">Spacious layout</p>
                </button>
                
                <button 
                  onClick={() => {
                    setCompactMode(true)
                    setReducedMotion(true)
                    setSidebarWidth(240)
                  }}
                  className="p-4 bg-accent/30 hover:bg-accent/50 rounded-xl transition-colors text-left"
                >
                  <Smartphone className="w-4 h-4 mb-2" />
                  <p className="font-medium text-sm">Mobile</p>
                  <p className="text-xs text-muted-foreground">Compact layout</p>
                </button>
              </div>
            </div>
            <div className="pt-6 border-t border-border">
              <button
                onClick={resetToDefaults}
                className="w-full flex items-center justify-center gap-2 px-4 py-2.5 bg-destructive/10 text-destructive hover:bg-destructive/20 rounded-lg transition-colors"
              >
                <RotateCcw className="w-4 h-4" />
                Reset to Defaults
              </button>
            </div>
          </div>
        )
      }

      // Custom slider styles
      const sliderStyles = `
      .slider::-webkit-slider-thumb {
        appearance: none;
        height: 18px;
        width: 18px;
        border-radius: 50%;
        background: hsl(var(--primary));
        cursor: pointer;
        border: 3px solid hsl(var(--background));
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        margin-top: -7px;
      }

      .slider::-moz-range-thumb {
        height: 18px;
        width: 18px;
        border-radius: 50%;
        background: hsl(var(--primary));
        cursor: pointer;
        border: 3px solid hsl(var(--background));
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
      }
      `

      // Inject styles
      if (typeof document !== 'undefined') {
        const styleSheet = document.createElement('style')
        styleSheet.textContent = sliderStyles
        document.head.appendChild(styleSheet)
      }
    patchStrategy: replace
  - type: delete
    path: src/components/SettingsPanel.tsx
  - type: write
    path: src/components/RightPane.tsx
    content: >+
      --- src/components/RightPane.tsx

      +++ src/components/RightPane.tsx

      @@ -1,10 +1,13 @@
       import { forwardRef } from 'react'
      -import { X, SlidersHorizontal } from 'lucide-react'

      +import { X, SlidersHorizontal, Settings } from 'lucide-react'
       import { useAppStore } from '@/store/appStore'
       import { cn } from '@/lib/utils'
      +import { SettingsContent } from './SettingsContent'
       
       export const RightPane = forwardRef<HTMLDivElement>((_props, ref) => {
      -  const { toggleSidePane, setIsResizingRightPane } = useAppStore()

      +  const { closeSidePane, setIsResizingRightPane, sidePaneContent } =
      useAppStore()

      +

      +  const isSettings = sidePaneContent === 'settings'
       
         return (
           <aside ref={ref} className="bg-card border-l border-border flex flex-col h-full overflow-hidden fixed top-0 right-0 z-[60]">
      @@ -21,19 +24,23 @@
             </div>
             <div className="flex items-center justify-between p-4 border-b border-border h-20 flex-shrink-0 pl-6">
               <div className="flex items-center gap-2">
      -          <SlidersHorizontal className="w-5 h-5" />

      -          <h2 className="text-lg font-semibold whitespace-nowrap">Details
      Panel</h2>

      +          {isSettings ? <Settings className="w-5 h-5" /> :
      <SlidersHorizontal className="w-5 h-5" />}

      +          <h2 className="text-lg font-semibold whitespace-nowrap">

      +            {isSettings ? 'Settings' : 'Details Panel'}

      +          </h2>
               </div>
               <button
      -          onClick={toggleSidePane}

      +          onClick={closeSidePane}
                 className="p-2 hover:bg-accent rounded-lg transition-colors"
               >
                 <X className="w-4 h-4" />
               </button>
             </div>
             <div className="flex-1 overflow-y-auto p-6">
      -        <p className="text-muted-foreground">

      -          This is the side pane. It can be used to display contextual
      information, forms, or actions related to the main content.

      -        </p>

      +        {isSettings ? <SettingsContent /> : (

      +          <p className="text-muted-foreground">

      +            This is the side pane. It can be used to display contextual
      information, forms, or actions related to the main content.

      +          </p>

      +        )}
             </div>
           </aside>
         )

    patchStrategy: standard-diff
  - type: write
    path: src/components/TopBar.tsx
    content: >+
      --- src/components/TopBar.tsx

      +++ src/components/TopBar.tsx

      @@ -1,4 +1,3 @@

      -import { useState } from 'react'
       import { 
         Menu, 
         Maximize, 
      @@ -10,29 +9,29 @@
         Zap,
         ChevronRight
       } from 'lucide-react'
      -import { SettingsPanel } from './SettingsPanel'
       import { cn } from '@/lib/utils'
      -import { BODY_STATES, type BodyState } from '@/lib/utils'

      +import { BODY_STATES } from '@/lib/utils'

      +import { useAppStore } from '@/store/appStore'
       
       interface TopBarProps {
      -  bodyState: BodyState

      -  isDarkMode: boolean
         onToggleSidebar: () => void
         onToggleFullscreen: () => void
      -  onToggleSidePane: () => void
         onToggleDarkMode: () => void
       }
       
       export function TopBar({
      -  bodyState,

      -  isDarkMode,
         onToggleSidebar,
         onToggleFullscreen,
      -  onToggleSidePane,
         onToggleDarkMode
       }: TopBarProps) {
      -  const [isSettingsOpen, setIsSettingsOpen] = useState(false)

      +  const { 

      +    bodyState, 

      +    isDarkMode, 

      +    openSidePane, 

      +    sidePaneContent 

      +  } = useAppStore()

      +
         return (
           <div className="h-20 bg-card/80 backdrop-blur-sm border-b border-border flex items-center justify-between px-6 z-50">
             {/* Left Section - Sidebar Controls & Breadcrumbs */}
      @@ -70,9 +69,9 @@
       
               {/* Body State Controls */}
               <button
      -          onClick={onToggleSidePane}

      +          onClick={() => openSidePane('details')}
                 className={cn(
                   "h-10 w-10 flex items-center justify-center rounded-full hover:bg-accent transition-colors group",
      -            bodyState === BODY_STATES.SIDE_PANE && "bg-accent"

      +            bodyState === BODY_STATES.SIDE_PANE && sidePaneContent ===
      'details' && "bg-accent"
                 )}
                 title="Toggle Side Pane"
               >
      @@ -110,18 +109,12 @@
               </button>
       
               <button
      -          onClick={() => setIsSettingsOpen(true)}

      +          onClick={() => openSidePane('settings')}
                 className="h-10 w-10 flex items-center justify-center rounded-full hover:bg-accent transition-colors group"
                 title="Settings"
               >
                 <Settings className="w-5 h-5 group-hover:rotate-90 transition-transform duration-300" />
               </button>
             </div>
      -

      -      {/* Settings Panel */}

      -      <SettingsPanel 

      -        isOpen={isSettingsOpen} 

      -        onClose={() => setIsSettingsOpen(false)} 

      -      />
           </div>
         )
       }

    patchStrategy: standard-diff
  - type: write
    path: src/components/MainContent.tsx
    content: >+
      --- src/components/MainContent.tsx

      +++ src/components/MainContent.tsx

      @@ -15,7 +15,8 @@
         Filter,
         Search,
         MoreVertical
      -} from 'lucide-react'

      +,  ArrowDown} from 'lucide-react'
       import { cn } from '@/lib/utils'
       import { BODY_STATES, type BodyState } from '@/lib/utils'
       import { DemoContent } from './DemoContent'
      @@ -101,6 +102,28 @@
           const contentRef = useRef<HTMLDivElement>(null)
           const cardsRef = useRef<(HTMLDivElement | null)[]>([])
           const [searchTerm, setSearchTerm] = useState("")
      +    const [showScrollToBottom, setShowScrollToBottom] = useState(false)

      +

      +    const handleScroll = () => {

      +      if (!contentRef.current) return

      +      const { scrollTop, scrollHeight, clientHeight } =
      contentRef.current

      +      // Show if scrolled down and not at the bottom

      +      setShowScrollToBottom(scrollTop > 200 && scrollTop < scrollHeight -
      clientHeight - 200)

      +    }

      +

      +    useEffect(() => {

      +      const contentEl = contentRef.current

      +      if (contentEl) {

      +        contentEl.addEventListener('scroll', handleScroll)

      +        return () => contentEl.removeEventListener('scroll',
      handleScroll)

      +      }

      +    }, [])

      +

      +    const scrollToBottom = () => {

      +      contentRef.current?.scrollTo({

      +        top: contentRef.current.scrollHeight,

      +        behavior: 'smooth'

      +      })

      +    }
       
           // Animate content based on body state
           useEffect(() => {
      @@ -151,10 +174,10 @@
             <div
               ref={ref}
               className={cn(
      -          "flex-1 h-[calc(100vh-80px)] overflow-hidden transition-all
      duration-300",

      -          bodyState === BODY_STATES.FULLSCREEN && "bg-background"

      +          "flex-1 flex flex-col h-[calc(100vh-80px)] overflow-hidden
      transition-all duration-300",

      +          bodyState === BODY_STATES.FULLSCREEN && "bg-background
      h-screen"
               )}
             >
      -        <div 

      -          ref={contentRef}

      -          className="h-full overflow-y-auto p-6 space-y-8"

      -        >
                 {/* Header */}
                 <div className="flex items-center justify-between">
                   <div>
      @@ -183,11 +206,12 @@
                     </button>
                   </div>
                 </div>
      -

      -          {/* Stats Cards */}

      -          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4
      gap-6">

      -            {statsCards.map((stat, index) => (

      -              <div

      +        <div 

      +          ref={contentRef}

      +          className="flex-1 overflow-y-auto p-6 space-y-8"

      +        >

      +            {/* Stats Cards */}

      +            <div className="grid grid-cols-1 md:grid-cols-2
      lg:grid-cols-4 gap-6">

      +              {statsCards.map((stat, index) => (

      +                <div
                       key={stat.title}
                       ref={el => cardsRef.current[index] = el}
                       className="bg-card p-6 rounded-2xl border border-border/50 hover:border-primary/30 transition-all duration-300 group cursor-pointer"
      @@ -207,13 +231,13 @@
                         <p className="text-sm text-muted-foreground mt-1">{stat.title}</p>
                       </div>
                     </div>
      -            ))}

      -          </div>

      -

      -          {/* Demo Content */}

      -          <DemoContent />

      -

      -          {/* Main Content Grid */}

      -          <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">

      +              ))}

      +            </div>

      +

      +            {/* Demo Content */}

      +            <DemoContent />

      +

      +            {/* Main Content Grid */}

      +            <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
                   {/* Chart Area */}
                   <div className="lg:col-span-2 space-y-6">
                     {/* Analytics Chart */}
      @@ -342,6 +366,17 @@
                     </div>
                   </div>
                 </div>
      +          {showScrollToBottom && (

      +            <button

      +              onClick={scrollToBottom}

      +              className="fixed bottom-8 right-8 w-12 h-12 bg-primary
      text-primary-foreground rounded-full flex items-center justify-center
      shadow-lg hover:bg-primary/90 transition-all animate-fade-in z-50"

      +              style={{ animation: 'bounce 2s infinite' }}

      +              title="Scroll to bottom"

      +            >

      +              <ArrowDown className="w-6 h-6" />

      +            </button>

      +          )}
               </div>
             </div>
           )

    patchStrategy: standard-diff
  - type: write
    path: src/components/AppShell.tsx
    content: |+
      --- src/components/AppShell.tsx
      +++ src/components/AppShell.tsx
      @@ -16,11 +16,11 @@
           isResizingRightPane,
           setRightPaneWidth,
           setSidebarState,
      +    openSidePane,
      +    closeSidePane,
           setIsResizing,
           setSidebarWidth,
           toggleSidebar,
           peekSidebar,
           toggleFullscreen,
      -    toggleSidePane,
           setIsResizingRightPane,
           toggleDarkMode,
           reducedMotion,
      @@ -32,6 +32,7 @@
         const mainContentRef = useRef<HTMLDivElement>(null)
         const rightPaneRef = useRef<HTMLDivElement>(null)
         const resizeHandleRef = useRef<HTMLDivElement>(null)
      +  const topBarContainerRef = useRef<HTMLDivElement>(null)
       
         // Animation duration based on reduced motion preference
         const animationDuration = reducedMotion ? 0.1 : 0.4
      @@ -147,6 +148,12 @@
             duration: animationDuration,
             ease,
           })
      +
      +    gsap.to(topBarContainerRef.current, {
      +      y: isFullscreen ? '-100%' : '0%',
      +      duration: animationDuration,
      +      ease,
      +    })
           
           // Add backdrop for side pane
           const backdrop = document.querySelector('.app-backdrop')
      @@ -156,14 +163,14 @@
               el.className = 'app-backdrop fixed inset-0 bg-black/30 z-[55]'
               appRef.current?.appendChild(el)
               gsap.fromTo(el, { opacity: 0 }, { opacity: 1, duration: animationDuration })
      -        el.onclick = () => toggleSidePane()
      +        el.onclick = () => closeSidePane()
             }
           } else {
             if (backdrop) {
               gsap.to(backdrop, { opacity: 0, duration: animationDuration, onComplete: () => backdrop.remove() })
             }
           }
      -  }, [bodyState, animationDuration, rightPaneWidth, toggleSidePane])
      +  }, [bodyState, animationDuration, rightPaneWidth, closeSidePane])
       
         return (
           <div 
      @@ -207,13 +214,12 @@
       
               {/* Main Content Area */}
               <div className="flex-1 flex flex-col overflow-hidden bg-background">
      -          {/* Top Bar */}
      -          <TopBar
      -            bodyState={bodyState}
      -            isDarkMode={isDarkMode}
      -            onToggleSidebar={toggleSidebar}
      -            onToggleFullscreen={toggleFullscreen}
      -            onToggleSidePane={toggleSidePane}
      -            onToggleDarkMode={toggleDarkMode}
      -          />
      +          <div ref={topBarContainerRef}>
      +            <TopBar
      +              onToggleSidebar={toggleSidebar}
      +              onToggleFullscreen={toggleFullscreen}
      +              onToggleDarkMode={toggleDarkMode}
      +            />
      +          </div>
                 
                 {/* Main Content */}
                 <MainContent

    patchStrategy: standard-diff
snapshot:
  src/components/SettingsContent.tsx: null
  src/store/appStore.ts: >-
    import { create } from 'zustand'

    import { persist } from 'zustand/middleware'

    import { SIDEBAR_STATES, BODY_STATES, type SidebarState, type BodyState }
    from '@/lib/utils'


    interface AppState {
      // UI States
      sidebarState: SidebarState
      bodyState: BodyState
      isDarkMode: boolean
      sidebarWidth: number
      rightPaneWidth: number
      isResizing: boolean
      isResizingRightPane: boolean
      
      // User Preferences
      autoExpandSidebar: boolean
      reducedMotion: boolean
      compactMode: boolean
      
      // Actions
      setSidebarState: (state: SidebarState) => void
      setBodyState: (state: BodyState) => void
      toggleDarkMode: () => void
      setSidebarWidth: (width: number) => void
      setRightPaneWidth: (width: number) => void
      setIsResizing: (resizing: boolean) => void
      setIsResizingRightPane: (resizing: boolean) => void
      setAutoExpandSidebar: (auto: boolean) => void
      setReducedMotion: (reduced: boolean) => void
      setCompactMode: (compact: boolean) => void
      
      // Composite Actions
      toggleSidebar: () => void
      hideSidebar: () => void
      showSidebar: () => void
      peekSidebar: () => void
      toggleFullscreen: () => void
      toggleSidePane: () => void
      resetToDefaults: () => void
    }


    const defaultState = {
      sidebarState: SIDEBAR_STATES.EXPANDED as SidebarState,
      bodyState: BODY_STATES.NORMAL as BodyState,
      isDarkMode: false,
      sidebarWidth: 280,
      rightPaneWidth: typeof window !== 'undefined' ? Math.max(300, Math.round(window.innerWidth * 0.6)) : 400,
      isResizing: false,
      isResizingRightPane: false,
      autoExpandSidebar: true,
      reducedMotion: false,
      compactMode: false,
    }


    export const useAppStore = create<AppState>()(
      persist(
        (set, get) => ({
          ...defaultState,
          
          // Basic setters
          setSidebarState: (state) => set({ sidebarState: state }),
          setBodyState: (state) => set({ bodyState: state }),
          toggleDarkMode: () => {
            const newMode = !get().isDarkMode
            set({ isDarkMode: newMode })
            document.documentElement.classList.toggle('dark', newMode)
          },
          setSidebarWidth: (width) => set({ sidebarWidth: Math.max(200, Math.min(500, width)) }),
          setRightPaneWidth: (width) => set({ rightPaneWidth: Math.max(300, Math.min(window.innerWidth * 0.8, width)) }),
          setIsResizing: (resizing) => set({ isResizing: resizing }),
          setIsResizingRightPane: (resizing) => set({ isResizingRightPane: resizing }),
          setAutoExpandSidebar: (auto) => set({ autoExpandSidebar: auto }),
          setReducedMotion: (reduced) => set({ reducedMotion: reduced }),
          setCompactMode: (compact) => set({ compactMode: compact }),
          
          // Composite actions
          toggleSidebar: () => {
            const current = get().sidebarState
            if (current === SIDEBAR_STATES.HIDDEN) {
              set({ sidebarState: SIDEBAR_STATES.COLLAPSED })
            } else if (current === SIDEBAR_STATES.COLLAPSED) {
              set({ sidebarState: SIDEBAR_STATES.EXPANDED })
            } else if (current === SIDEBAR_STATES.EXPANDED) {
              set({ sidebarState: SIDEBAR_STATES.COLLAPSED })
            }
          },
          
          hideSidebar: () => set({ sidebarState: SIDEBAR_STATES.HIDDEN }),
          showSidebar: () => set({ sidebarState: SIDEBAR_STATES.EXPANDED }),
          peekSidebar: () => set({ sidebarState: SIDEBAR_STATES.PEEK }),
          
          toggleFullscreen: () => {
            const current = get().bodyState
            set({ 
              bodyState: current === BODY_STATES.FULLSCREEN ? BODY_STATES.NORMAL : BODY_STATES.FULLSCREEN 
            })
          },
          
          toggleSidePane: () => {
            const current = get().bodyState
            set({ 
              bodyState: current === BODY_STATES.SIDE_PANE ? BODY_STATES.NORMAL : BODY_STATES.SIDE_PANE 
            })
          },
          
          resetToDefaults: () => set(defaultState),
        }),
        {
          name: 'app-preferences',
          partialize: (state) => ({
            sidebarState: state.sidebarState,
            bodyState: state.bodyState,
            isDarkMode: state.isDarkMode,
            sidebarWidth: state.sidebarWidth,
            rightPaneWidth: state.rightPaneWidth,
            autoExpandSidebar: state.autoExpandSidebar,
            reducedMotion: state.reducedMotion,
            compactMode: state.compactMode,
          }),
        }
      )
    )


    // Initialize dark mode on load

    if (typeof window !== 'undefined') {
      const stored = localStorage.getItem('app-preferences')
      if (stored) {
        const parsed = JSON.parse(stored)
        if (parsed.state?.isDarkMode) {
          document.documentElement.classList.add('dark')
        }
      }
    }
  src/components/SettingsPanel.tsx: |-
    import { useState } from 'react'
    import { 
      Settings, 
      X, 
      Moon, 
      Sun, 
      Zap, 
      Eye, 
      Minimize2, 
      RotateCcw,
      Monitor,
      Smartphone,
      Palette,
      Accessibility
    } from 'lucide-react'
    import { cn } from '@/lib/utils'
    import { useAppStore } from '@/store/appStore'

    interface SettingsPanelProps {
      isOpen: boolean
      onClose: () => void
    }

    export function SettingsPanel({ isOpen, onClose }: SettingsPanelProps) {
      const {
        isDarkMode,
        reducedMotion,
        compactMode,
        autoExpandSidebar,
        sidebarWidth,
        toggleDarkMode,
        setReducedMotion,
        setCompactMode,
        setAutoExpandSidebar,
        setSidebarWidth,
        resetToDefaults
      } = useAppStore()

      const [tempSidebarWidth, setTempSidebarWidth] = useState(sidebarWidth)

      const handleSidebarWidthChange = (width: number) => {
        setTempSidebarWidth(width)
        setSidebarWidth(width)
      }

      if (!isOpen) return null

      return (
        <div className="fixed inset-0 bg-background/80 backdrop-blur-sm z-[100] animate-in fade-in-0 duration-300">
          <div className="fixed right-4 top-4 bottom-4 w-full max-w-sm bg-card border border-border shadow-2xl rounded-2xl animate-in slide-in-from-right-8 duration-300">
            <div className="flex flex-col h-full">
              {/* Header */}
              <div className="flex items-center justify-between p-6 border-b border-border">
                <div className="flex items-center gap-2">
                  <Settings className="w-5 h-5" />
                  <h2 className="text-lg font-semibold">Settings</h2>
                </div>
                <button
                  onClick={onClose}
                  className="p-2 hover:bg-accent rounded-lg transition-colors"
                >
                  <X className="w-4 h-4" />
                </button>
              </div>

              {/* Content */}
              <div className="flex-1 overflow-y-auto p-6 space-y-10">
                {/* Appearance */}
                <div className="space-y-4">
                  <h3 className="text-sm font-semibold text-muted-foreground uppercase tracking-wider flex items-center gap-2">
                    <Palette className="w-4 h-4" />
                    Appearance
                  </h3>
                  
                  {/* Dark Mode */}
                  <div className="flex items-center justify-between">
                    <div className="flex items-center gap-3">
                      {isDarkMode ? <Moon className="w-4 h-4" /> : <Sun className="w-4 h-4" />}
                      <div>
                        <p className="font-medium">Dark Mode</p>
                        <p className="text-sm text-muted-foreground">Toggle dark theme</p>
                      </div>
                    </div>
                    <button
                      onClick={toggleDarkMode}
                      className={cn(
                        "relative inline-flex h-7 w-12 items-center rounded-full transition-colors",
                        isDarkMode ? "bg-primary" : "bg-muted"
                      )}
                    >
                      <span
                        className={cn(
                          "inline-block h-5 w-5 transform rounded-full bg-background transition-transform",
                          isDarkMode ? "translate-x-6" : "translate-x-1"
                        )}
                      />
                    </button>
                  </div>

                  {/* Compact Mode */}
                  <div className="flex items-center justify-between">
                    <div className="flex items-center gap-3">
                      <Minimize2 className="w-4 h-4" />
                      <div>
                        <p className="font-medium">Compact Mode</p>
                        <p className="text-sm text-muted-foreground">Reduce spacing and sizes</p>
                      </div>
                    </div>
                    <button
                      onClick={() => setCompactMode(!compactMode)}
                      className={cn(
                        "relative inline-flex h-7 w-12 items-center rounded-full transition-colors",
                        compactMode ? "bg-primary" : "bg-muted"
                      )}
                    >
                      <span
                        className={cn(
                          "inline-block h-5 w-5 transform rounded-full bg-background transition-transform",
                          compactMode ? "translate-x-6" : "translate-x-1"
                        )}
                      />
                    </button>
                  </div>
                </div>

                {/* Behavior */}
                <div className="space-y-4">
                  <h3 className="text-sm font-semibold text-muted-foreground uppercase tracking-wider flex items-center gap-2">
                    <Zap className="w-4 h-4" />
                    Behavior
                  </h3>

                  {/* Auto Expand Sidebar */}
                  <div className="flex items-center justify-between">
                    <div className="flex items-center gap-3">
                      <Eye className="w-4 h-4" />
                      <div>
                        <p className="font-medium">Auto Expand Sidebar</p>
                        <p className="text-sm text-muted-foreground">Expand on hover when collapsed</p>
                      </div>
                    </div>
                    <button
                      onClick={() => setAutoExpandSidebar(!autoExpandSidebar)}
                      className={cn(
                        "relative inline-flex h-7 w-12 items-center rounded-full transition-colors",
                        autoExpandSidebar ? "bg-primary" : "bg-muted"
                      )}
                    >
                      <span
                        className={cn(
                          "inline-block h-5 w-5 transform rounded-full bg-background transition-transform",
                          autoExpandSidebar ? "translate-x-6" : "translate-x-1"
                        )}
                      />
                    </button>
                  </div>

                  {/* Sidebar Width */}
                  <div className="space-y-3">
                    <div className="flex items-center gap-3">
                      <Monitor className="w-4 h-4" />
                      <div>
                        <p className="font-medium">Sidebar Width</p>
                        <p className="text-sm text-muted-foreground">{tempSidebarWidth}px</p>
                      </div>
                    </div>
                    <div className="space-y-2">
                      <input
                        type="range"
                        min="200"
                        max="500"
                        step="10"
                        value={tempSidebarWidth}
                        onChange={(e) => handleSidebarWidthChange(Number(e.target.value))}
                        className="w-full h-1.5 bg-muted rounded-lg appearance-none cursor-pointer slider"
                      />
                      <div className="flex justify-between text-xs text-muted-foreground">
                        <span>200px</span>
                        <span>350px</span>
                        <span>500px</span>
                      </div>
                    </div>
                  </div>
                </div>

                {/* Accessibility */}
                <div className="space-y-4">
                  <h3 className="text-sm font-semibold text-muted-foreground uppercase tracking-wider flex items-center gap-2">
                    <Accessibility className="w-4 h-4" />
                    Accessibility
                  </h3>

                  {/* Reduced Motion */}
                  <div className="flex items-center justify-between">
                    <div className="flex items-center gap-3">
                      <Zap className="w-4 h-4" />
                      <div>
                        <p className="font-medium">Reduced Motion</p>
                        <p className="text-sm text-muted-foreground">Minimize animations</p>
                      </div>
                    </div>
                    <button
                      onClick={() => setReducedMotion(!reducedMotion)}
                      className={cn(
                        "relative inline-flex h-7 w-12 items-center rounded-full transition-colors",
                        reducedMotion ? "bg-primary" : "bg-muted"
                      )}
                    >
                      <span
                        className={cn(
                          "inline-block h-5 w-5 transform rounded-full bg-background transition-transform",
                          reducedMotion ? "translate-x-6" : "translate-x-1"
                        )}
                      />
                    </button>
                  </div>
                </div>

                {/* Presets */}
                <div className="space-y-4">
                  <h3 className="text-sm font-semibold text-muted-foreground uppercase tracking-wider">
                    Quick Presets
                  </h3>
                  
                  <div className="grid grid-cols-2 gap-3">
                    <button 
                      onClick={() => {
                        setCompactMode(false)
                        setReducedMotion(false)
                        setSidebarWidth(320)
                      }}
                      className="p-4 bg-accent/30 hover:bg-accent/50 rounded-xl transition-colors text-left"
                    >
                      <Monitor className="w-4 h-4 mb-2" />
                      <p className="font-medium text-sm">Desktop</p>
                      <p className="text-xs text-muted-foreground">Spacious layout</p>
                    </button>
                    
                    <button 
                      onClick={() => {
                        setCompactMode(true)
                        setReducedMotion(true)
                        setSidebarWidth(240)
                      }}
                      className="p-4 bg-accent/30 hover:bg-accent/50 rounded-xl transition-colors text-left"
                    >
                      <Smartphone className="w-4 h-4 mb-2" />
                      <p className="font-medium text-sm">Mobile</p>
                      <p className="text-xs text-muted-foreground">Compact layout</p>
                    </button>
                  </div>
                </div>
              </div>

              {/* Footer */}
              <div className="p-6 border-t border-border">
                <button
                  onClick={resetToDefaults}
                  className="w-full flex items-center justify-center gap-2 px-4 py-2.5 bg-destructive/10 text-destructive hover:bg-destructive/20 rounded-lg transition-colors"
                >
                  <RotateCcw className="w-4 h-4" />
                  Reset to Defaults
                </button>
              </div>
            </div>
          </div>
        </div>
      )
    }

    // Custom slider styles
    const sliderStyles = `
    .slider::-webkit-slider-thumb {
      appearance: none;
      height: 18px;
      width: 18px;
      border-radius: 50%;
      background: hsl(var(--primary));
      cursor: pointer;
      border: 3px solid hsl(var(--background));
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
      margin-top: -7px;
    }

    .slider::-moz-range-thumb {
      height: 18px;
      width: 18px;
      border-radius: 50%;
      background: hsl(var(--primary));
      cursor: pointer;
      border: 3px solid hsl(var(--background));
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }
    `

    // Inject styles
    if (typeof document !== 'undefined') {
      const styleSheet = document.createElement('style')
      styleSheet.textContent = sliderStyles
      document.head.appendChild(styleSheet)
    }
  src/components/RightPane.tsx: |-
    import { forwardRef } from 'react'
    import { X, SlidersHorizontal } from 'lucide-react'
    import { useAppStore } from '@/store/appStore'
    import { cn } from '@/lib/utils'

    export const RightPane = forwardRef<HTMLDivElement>((_props, ref) => {
      const { toggleSidePane, setIsResizingRightPane } = useAppStore()

      return (
        <aside ref={ref} className="bg-card border-l border-border flex flex-col h-full overflow-hidden fixed top-0 right-0 z-[60]">
          <div 
            className={cn(
              "absolute top-0 left-0 w-2 h-full bg-transparent hover:bg-primary/20 cursor-col-resize z-50 transition-colors duration-200 group -translate-x-1/2"
            )}
            onMouseDown={(e) => {
              e.preventDefault()
              setIsResizingRightPane(true)
            }}
          >
            <div className="w-0.5 h-full bg-border group-hover:bg-primary transition-colors duration-200 mx-auto" />
          </div>
          <div className="flex items-center justify-between p-4 border-b border-border h-20 flex-shrink-0 pl-6">
            <div className="flex items-center gap-2">
              <SlidersHorizontal className="w-5 h-5" />
              <h2 className="text-lg font-semibold whitespace-nowrap">Details Panel</h2>
            </div>
            <button
              onClick={toggleSidePane}
              className="p-2 hover:bg-accent rounded-lg transition-colors"
            >
              <X className="w-4 h-4" />
            </button>
          </div>
          <div className="flex-1 overflow-y-auto p-6">
            <p className="text-muted-foreground">
              This is the side pane. It can be used to display contextual information, forms, or actions related to the main content.
            </p>
          </div>
        </aside>
      )
    })

    RightPane.displayName = "RightPane"
  src/components/TopBar.tsx: |-
    import { useState } from 'react'
    import { 
      Menu, 
      Maximize, 
      Minimize, 
      Moon, 
      Sun,
      Settings,
      Command,
      Zap,
      ChevronRight
    } from 'lucide-react'
    import { SettingsPanel } from './SettingsPanel'
    import { cn } from '@/lib/utils'
    import { BODY_STATES, type BodyState } from '@/lib/utils'

    interface TopBarProps {
      bodyState: BodyState
      isDarkMode: boolean
      onToggleSidebar: () => void
      onToggleFullscreen: () => void
      onToggleSidePane: () => void
      onToggleDarkMode: () => void
    }

    export function TopBar({
      bodyState,
      isDarkMode,
      onToggleSidebar,
      onToggleFullscreen,
      onToggleSidePane,
      onToggleDarkMode
    }: TopBarProps) {
      const [isSettingsOpen, setIsSettingsOpen] = useState(false)
      return (
        <div className="h-20 bg-card/80 backdrop-blur-sm border-b border-border flex items-center justify-between px-6 z-50">
          {/* Left Section - Sidebar Controls & Breadcrumbs */}
          <div className="flex items-center gap-4">
            {/* Sidebar Controls */}
            <button
              onClick={onToggleSidebar}
              className={cn(
                "h-10 w-10 flex items-center justify-center rounded-full hover:bg-accent transition-colors"
              )}
              title="Toggle Sidebar"
            >
              <Menu className="w-5 h-5" />
            </button>

            {/* Breadcrumbs */}
            <div className="hidden md:flex items-center gap-2 text-sm">
              <a href="#" className="text-muted-foreground hover:text-foreground transition-colors">Home</a>
              <ChevronRight className="w-4 h-4 text-muted-foreground" />
              <span className="font-medium text-foreground">Dashboard</span>
            </div>
          </div>

          {/* Right Section - View Controls */}
          <div className="flex items-center gap-3">
            {/* Quick Actions */}
            <button
              className="h-10 w-10 flex items-center justify-center rounded-full hover:bg-accent transition-colors group"
              title="Command Palette (Ctrl+K)"
            >
              <Command className="w-5 h-5 group-hover:scale-110 transition-transform" />
            </button>

            <button
              className="h-10 w-10 flex items-center justify-center rounded-full hover:bg-accent transition-colors group"
              title="Quick Actions"
            >
              <Zap className="w-5 h-5 group-hover:scale-110 transition-transform" />
            </button>

            <div className="w-px h-6 bg-border mx-2" />

            {/* Body State Controls */}
            <button
              onClick={onToggleSidePane}
              className={cn(
                "h-10 w-10 flex items-center justify-center rounded-full hover:bg-accent transition-colors group",
                bodyState === BODY_STATES.SIDE_PANE && "bg-accent"
              )}
              title="Toggle Side Pane"
            >
              <div className="w-5 h-5 flex group-hover:scale-110 transition-transform">
                <div className="w-1/2 h-full bg-current opacity-60 rounded-l-sm" />
                <div className="w-1/2 h-full bg-current rounded-r-sm" />
              </div>
            </button>

            <button
              onClick={onToggleFullscreen}
              className={cn(
                "h-10 w-10 flex items-center justify-center rounded-full hover:bg-accent transition-colors group",
                bodyState === BODY_STATES.FULLSCREEN && "bg-accent"
              )}
              title="Toggle Fullscreen"
            >
              {bodyState === BODY_STATES.FULLSCREEN ? (
                <Minimize className="w-5 h-5 group-hover:scale-110 transition-transform" />
              ) : (
                <Maximize className="w-5 h-5 group-hover:scale-110 transition-transform" />
              )}
            </button>

            <div className="w-px h-6 bg-border mx-2" />

            {/* Theme and Settings */}
            <button
              onClick={onToggleDarkMode}
              className="h-10 w-10 flex items-center justify-center rounded-full hover:bg-accent transition-colors group"
              title="Toggle Dark Mode"
            >
              {isDarkMode ? (
                <Sun className="w-5 h-5 group-hover:scale-110 transition-transform" />
              ) : (
                <Moon className="w-5 h-5 group-hover:scale-110 transition-transform" />
              )}
            </button>

            <button
              onClick={() => setIsSettingsOpen(true)}
              className="h-10 w-10 flex items-center justify-center rounded-full hover:bg-accent transition-colors group"
              title="Settings"
            >
              <Settings className="w-5 h-5 group-hover:rotate-90 transition-transform duration-300" />
            </button>
          </div>

          {/* Settings Panel */}
          <SettingsPanel 
            isOpen={isSettingsOpen} 
            onClose={() => setIsSettingsOpen(false)} 
          />
        </div>
      )
    }
  src/components/MainContent.tsx: |-
    import React, { forwardRef, useRef, useEffect, useState } from 'react'
    import { gsap } from 'gsap'
    import { 
      BarChart3, 
      TrendingUp, 
      Users, 
      DollarSign, 
      Activity,
      Calendar,
      Clock,
      MessageSquare,
      FileText,
      Star,
      ChevronRight,
      Plus,
      Filter,
      Search,
      MoreVertical
    } from 'lucide-react'
    import { cn } from '@/lib/utils'
    import { BODY_STATES, type BodyState } from '@/lib/utils'
    import { DemoContent } from './DemoContent'

    interface MainContentProps {
      bodyState: BodyState
    }

    interface StatsCard {
      title: string
      value: string
      change: string
      trend: 'up' | 'down'
      icon: React.ReactNode
    }

    interface ActivityItem {
      id: string
      type: 'comment' | 'file' | 'meeting' | 'task'
      title: string
      description: string
      time: string
      user: string
    }

    const statsCards: StatsCard[] = [
      {
        title: "Total Revenue",
        value: "$45,231.89",
        change: "+20.1%",
        trend: "up",
        icon: <DollarSign className="w-5 h-5" />
      },
      {
        title: "Active Users",
        value: "2,350",
        change: "+180.1%",
        trend: "up",
        icon: <Users className="w-5 h-5" />
      },
      {
        title: "Conversion Rate",
        value: "12.5%",
        change: "+19%",
        trend: "up",
        icon: <TrendingUp className="w-5 h-5" />
      },
      {
        title: "Performance",
        value: "573ms",
        change: "-5.3%",
        trend: "down",
        icon: <Activity className="w-5 h-5" />
      }
    ]

    const recentActivity: ActivityItem[] = [
      {
        id: "1",
        type: "comment",
        title: "New comment on Project Alpha",
        description: "Sarah Johnson added a comment to the design review",
        time: "2 minutes ago",
        user: "SJ"
      },
      {
        id: "2",
        type: "file",
        title: "Document uploaded",
        description: "quarterly-report.pdf was uploaded to Documents",
        time: "15 minutes ago",
        user: "MD"
      },
      {
        id: "3",
        type: "meeting",
        title: "Meeting scheduled",
        description: "Weekly standup meeting scheduled for tomorrow 9 AM",
        time: "1 hour ago",
        user: "RW"
      },
      {
        id: "4",
        type: "task",
        title: "Task completed",
        description: "UI wireframes for mobile app completed",
        time: "2 hours ago",
        user: "AL"
      }
    ]

    export const MainContent = forwardRef<HTMLDivElement, MainContentProps>(
      ({ bodyState }, ref) => {
        const contentRef = useRef<HTMLDivElement>(null)
        const cardsRef = useRef<(HTMLDivElement | null)[]>([])
        const [searchTerm, setSearchTerm] = useState("")

        // Animate content based on body state
        useEffect(() => {
          if (!contentRef.current) return

          const content = contentRef.current
          const cards = cardsRef.current.filter(Boolean)

          switch (bodyState) {
            case BODY_STATES.FULLSCREEN:
              gsap.to(content, {
                scale: 1.02,
                duration: 0.4,
                ease: "power3.out"
              })
              break
            default:
              gsap.to(content, {
                scale: 1,
                duration: 0.4,
                ease: "power3.out"
              })
              break
          }

          // Stagger animation for cards
          gsap.fromTo(cards, 
            { y: 20, opacity: 0 },
            { 
              y: 0, 
              opacity: 1, 
              duration: 0.6,
              stagger: 0.1,
              ease: "power3.out"
            }
          )

        }, [bodyState])

        const getTypeIcon = (type: ActivityItem['type']) => {
          switch (type) {
            case 'comment':
              return <MessageSquare className="w-4 h-4" />
            case 'file':
              return <FileText className="w-4 h-4" />
            case 'meeting':
              return <Calendar className="w-4 h-4" />
            case 'task':
              return <Star className="w-4 h-4" />
            default:
              return <Activity className="w-4 h-4" />
          }
        }

        return (
          <div
            ref={ref}
            className={cn(
              "flex-1 h-[calc(100vh-80px)] overflow-hidden transition-all duration-300",
              bodyState === BODY_STATES.FULLSCREEN && "bg-background"
            )}
          >
            <div 
              ref={contentRef}
              className="h-full overflow-y-auto p-6 space-y-8"
            >
              {/* Header */}
              <div className="flex items-center justify-between">
                <div>
                  <h1 className="text-3xl font-bold tracking-tight">Dashboard</h1>
                  <p className="text-muted-foreground">
                    Welcome to the amazing app shell demo! Explore all the features and customization options.
                  </p>
                </div>
                
                <div className="flex items-center gap-2">
                  <div className="relative">
                    <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4" />
                    <input
                      type="text"
                      placeholder="Search..."
                      value={searchTerm}
                      onChange={(e) => setSearchTerm(e.target.value)}
                      className="pl-9 pr-4 py-2 border-none rounded-lg bg-card focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent"
                    />
                  </div>
                  <button className="h-10 w-10 flex items-center justify-center hover:bg-accent rounded-full transition-colors">
                    <Filter className="w-5 h-5" />
                  </button>
                  <button className="bg-primary text-primary-foreground px-4 py-2 rounded-full hover:bg-primary/90 transition-colors flex items-center gap-2 h-10">
                    <Plus className="w-5 h-5" />
                    <span>New Project</span>
                  </button>
                </div>
              </div>

              {/* Stats Cards */}
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
                {statsCards.map((stat, index) => (
                  <div
                    key={stat.title}
                    ref={el => cardsRef.current[index] = el}
                    className="bg-card p-6 rounded-2xl border border-border/50 hover:border-primary/30 transition-all duration-300 group cursor-pointer"
                  >
                    <div className="flex items-center justify-between">
                      <div className="p-3 bg-primary/10 rounded-full group-hover:bg-primary/20 transition-colors">
                        {stat.icon}
                      </div>
                      <div className={cn(
                        "text-sm font-medium",
                        stat.trend === 'up' ? "text-green-600" : "text-red-600"
                      )}>
                        {stat.change}
                      </div>
                    </div>
                    <div className="mt-4">
                      <h3 className="text-2xl font-bold">{stat.value}</h3>
                      <p className="text-sm text-muted-foreground mt-1">{stat.title}</p>
                    </div>
                  </div>
                ))}
              </div>

              {/* Demo Content */}
              <DemoContent />

              {/* Main Content Grid */}
              <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
                {/* Chart Area */}
                <div className="lg:col-span-2 space-y-6">
                  {/* Analytics Chart */}
                  <div className="bg-card p-6 rounded-2xl border border-border/50">
                    <div className="flex items-center justify-between mb-6">
                      <h3 className="text-lg font-semibold">Analytics Overview</h3>
                      <button className="h-8 w-8 flex items-center justify-center hover:bg-accent rounded-full transition-colors">
                        <MoreVertical className="w-5 h-5" />
                      </button>
                    </div>
                    
                    {/* Mock Chart */}
                    <div className="h-64 bg-gradient-to-br from-primary/10 to-transparent rounded-xl flex items-center justify-center border border-border/50">
                      <div className="text-center">
                        <BarChart3 className="w-12 h-12 text-primary mx-auto mb-2" />
                        <p className="text-muted-foreground">Chart visualization would go here</p>
                      </div>
                    </div>
                  </div>

                  {/* Recent Projects */}
                  <div className="bg-card p-6 rounded-2xl border border-border/50">
                    <div className="flex items-center justify-between mb-6">
                      <h3 className="text-lg font-semibold">Recent Projects</h3>
                      <button className="text-primary hover:text-primary/80 text-sm font-medium flex items-center gap-1">
                        View All
                        <ChevronRight className="w-4 h-4" />
                      </button>
                    </div>
                    
                    <div className="space-y-4">
                      {[
                        { name: "E-commerce Platform", progress: 75, team: 5, deadline: "Dec 15" },
                        { name: "Mobile App Redesign", progress: 45, team: 3, deadline: "Jan 20" },
                        { name: "Marketing Website", progress: 90, team: 4, deadline: "Dec 5" }
                      ].map((project) => (
                        <div key={project.name} className="p-4 bg-accent/30 rounded-xl hover:bg-accent/50 transition-colors cursor-pointer">
                          <div className="flex items-center justify-between mb-2">
                            <h4 className="font-medium">{project.name}</h4>
                            <span className="text-sm text-muted-foreground">{project.progress}%</span>
                          </div>
                          <div className="w-full bg-muted rounded-full h-2 mb-3">
                            <div 
                              className="bg-primary h-2 rounded-full transition-all duration-500"
                              style={{ width: `${project.progress}%` }}
                            />
                          </div>
                          <div className="flex items-center justify-between text-sm text-muted-foreground">
                            <span>{project.team} team members</span>
                            <span>Due {project.deadline}</span>
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                </div>

                {/* Sidebar Content */}
                <div className="space-y-6">
                  {/* Quick Actions */}
                  <div className="bg-card p-6 rounded-2xl border border-border/50">
                    <h3 className="text-lg font-semibold mb-4">Quick Actions</h3>
                    <div className="space-y-3">
                      {[
                        { icon: <FileText className="w-4 h-4" />, label: "Create Document", color: "bg-blue-500/10 text-blue-600" },
                        { icon: <Calendar className="w-4 h-4" />, label: "Schedule Meeting", color: "bg-green-500/10 text-green-600" },
                        { icon: <Users className="w-4 h-4" />, label: "Invite Team", color: "bg-purple-500/10 text-purple-600" },
                        { icon: <BarChart3 className="w-4 h-4" />, label: "View Reports", color: "bg-orange-500/10 text-orange-600" }
                      ].map((action) => (
                        <button
                          key={action.label}
                          className="w-full flex items-center gap-3 p-3 hover:bg-accent rounded-lg transition-colors text-left"
                        >
                          <div className={cn("p-2 rounded-full", action.color)}>
                            {action.icon}
                          </div>
                          <span className="font-medium">{action.label}</span>
                        </button>
                      ))}
                    </div>
                  </div>

                  {/* Recent Activity */}
                  <div className="bg-card p-6 rounded-2xl border border-border/50">
                    <h3 className="text-lg font-semibold mb-4">Recent Activity</h3>
                    <div className="space-y-4">
                      {recentActivity.map((activity) => (
                        <div key={activity.id} className="flex items-start gap-3 p-3 hover:bg-accent/30 rounded-xl transition-colors cursor-pointer">
                          <div className="p-2 bg-primary/10 rounded-full flex-shrink-0">
                            {getTypeIcon(activity.type)}
                          </div>
                          <div className="flex-1 min-w-0">
                            <h4 className="font-medium text-sm mb-1">{activity.title}</h4>
                            <p className="text-xs text-muted-foreground mb-2">{activity.description}</p>
                            <div className="flex items-center gap-2 text-xs text-muted-foreground">
                              <Clock className="w-3 h-3" />
                              <span>{activity.time}</span>
                              <div className="w-5 h-5 bg-primary rounded-full flex items-center justify-center text-primary-foreground text-xs font-medium">
                                {activity.user}
                              </div>
                            </div>
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        )
      }
    )
  src/components/AppShell.tsx: |-
    import { useRef, useEffect } from 'react'
    import { gsap } from 'gsap'
    import { cn } from '@/lib/utils'
    import { EnhancedSidebar } from './EnhancedSidebar'
    import { MainContent } from './MainContent'
    import { RightPane } from './RightPane'
    import { TopBar } from './TopBar'
    import { useAppStore } from '@/store/appStore'
    import { SIDEBAR_STATES, BODY_STATES } from '@/lib/utils'

    export function AppShell() {
      const {
        sidebarState,
        bodyState,
        sidebarWidth,
        isDarkMode,
        isResizing,
        rightPaneWidth,
        isResizingRightPane,
        setRightPaneWidth,
        setSidebarState,
        setIsResizing,
        setSidebarWidth,
        toggleSidebar,
        peekSidebar,
        toggleFullscreen,
        toggleSidePane,
        setIsResizingRightPane,
        toggleDarkMode,
        reducedMotion,
        autoExpandSidebar
      } = useAppStore()
      
      const appRef = useRef<HTMLDivElement>(null)
      const sidebarRef = useRef<HTMLDivElement>(null)
      const mainContentRef = useRef<HTMLDivElement>(null)
      const rightPaneRef = useRef<HTMLDivElement>(null)
      const resizeHandleRef = useRef<HTMLDivElement>(null)

      // Animation duration based on reduced motion preference
      const animationDuration = reducedMotion ? 0.1 : 0.4

      // Resize functionality
      useEffect(() => {
        const handleMouseMove = (e: MouseEvent) => {
          if (!isResizing) return
          
          const newWidth = Math.max(200, Math.min(500, e.clientX))
          setSidebarWidth(newWidth)
          
          if (sidebarRef.current) {
            gsap.set(sidebarRef.current, { width: newWidth })
          }
          if (resizeHandleRef.current) {
            gsap.set(resizeHandleRef.current, { left: newWidth })
          }
        }

        const handleMouseUp = () => {
          setIsResizing(false)
          document.body.style.cursor = ''
          document.body.style.userSelect = ''
        }

        if (isResizing) {
          document.body.style.cursor = 'col-resize'
          document.body.style.userSelect = 'none'
          document.addEventListener('mousemove', handleMouseMove)
          document.addEventListener('mouseup', handleMouseUp)
        }

        return () => {
          document.removeEventListener('mousemove', handleMouseMove)
          document.removeEventListener('mouseup', handleMouseUp)
        }
      }, [isResizing, setIsResizing, setSidebarWidth])

      // Resize functionality for Right Pane
      useEffect(() => {
        const handleMouseMove = (e: MouseEvent) => {
          if (!isResizingRightPane) return
          
          const newWidth = window.innerWidth - e.clientX
          setRightPaneWidth(newWidth)
        }

        const handleMouseUp = () => {
          setIsResizingRightPane(false)
          document.body.style.cursor = ''
          document.body.style.userSelect = ''
        }

        if (isResizingRightPane) {
          document.body.style.cursor = 'col-resize'
          document.body.style.userSelect = 'none'
          document.addEventListener('mousemove', handleMouseMove)
          document.addEventListener('mouseup', handleMouseUp)
        }

        return () => {
          document.removeEventListener('mousemove', handleMouseMove)
          document.removeEventListener('mouseup', handleMouseUp)
          document.body.style.cursor = ''
        }
      }, [isResizingRightPane, setIsResizingRightPane, setRightPaneWidth])

      // GSAP animations for sidebar transitions
      useEffect(() => {
        if (!sidebarRef.current || !mainContentRef.current || !resizeHandleRef.current) return

        const sidebar = sidebarRef.current
        const handle = resizeHandleRef.current
        
        let targetWidth = 0
        let targetOpacity = 1
        let targetX = 0

        switch (sidebarState) {
          case SIDEBAR_STATES.HIDDEN:
            targetWidth = 0
            targetOpacity = 0
            targetX = -100
            break
          case SIDEBAR_STATES.COLLAPSED:
            targetWidth = 64
            targetOpacity = 1
            targetX = 0
            break
          case SIDEBAR_STATES.EXPANDED:
            targetWidth = sidebarWidth
            targetOpacity = 1
            targetX = 0
            break
          case SIDEBAR_STATES.PEEK:
            targetWidth = sidebarWidth * 0.8
            targetOpacity = 0.95
            targetX = 0
            break
        }

        const tl = gsap.timeline({ ease: "power3.out" })
        
        tl.to(sidebar, {
          width: targetWidth,
          opacity: targetOpacity,
          x: `${targetX}%`,
          duration: animationDuration,
        })
        tl.to(handle, {
          left: targetWidth,
          duration: animationDuration,
        }, 0)

      }, [sidebarState, sidebarWidth, bodyState, animationDuration])

      // GSAP animations for body state transitions
      useEffect(() => {
        if (!mainContentRef.current || !sidebarRef.current || !rightPaneRef.current) return

        const ease = "power3.out"
        const isFullscreen = bodyState === BODY_STATES.FULLSCREEN
        const isSidePane = bodyState === BODY_STATES.SIDE_PANE

        // Sidebar animation for body state changes
        gsap.to(sidebarRef.current, {
          x: isFullscreen ? '-100%' : '0%',
          duration: animationDuration,
          ease,
        })

        // Right pane animation
        gsap.to(rightPaneRef.current, {
          width: rightPaneWidth,
          x: isSidePane ? 0 : rightPaneWidth + 5, // +5 to hide border
          duration: animationDuration,
          ease,
        })
        
        // Add backdrop for side pane
        const backdrop = document.querySelector('.app-backdrop')
        if (isSidePane) {
          if (!backdrop) {
            const el = document.createElement('div')
            el.className = 'app-backdrop fixed inset-0 bg-black/30 z-[55]'
            appRef.current?.appendChild(el)
            gsap.fromTo(el, { opacity: 0 }, { opacity: 1, duration: animationDuration })
            el.onclick = () => toggleSidePane()
          }
        } else {
          if (backdrop) {
            gsap.to(backdrop, { opacity: 0, duration: animationDuration, onComplete: () => backdrop.remove() })
          }
        }
      }, [bodyState, animationDuration, rightPaneWidth, toggleSidePane])

      return (
        <div 
          ref={appRef}
          className={cn(
            "relative h-screen w-screen overflow-hidden bg-background transition-colors duration-300",
            isDarkMode && "dark"
          )}
        >
          <div className="flex h-screen overflow-hidden">
            {/* Enhanced Sidebar */}
            <EnhancedSidebar
              ref={sidebarRef}
              onMouseEnter={() => {
                if (autoExpandSidebar && sidebarState === SIDEBAR_STATES.COLLAPSED) {
                  peekSidebar()
                }
              }}
              onMouseLeave={() => {
                if (autoExpandSidebar && sidebarState === SIDEBAR_STATES.PEEK) {
                  setSidebarState(SIDEBAR_STATES.COLLAPSED)
                }
              }}
            />

            {/* Resize Handle */}
            {sidebarState !== SIDEBAR_STATES.HIDDEN && (
              <div
                ref={resizeHandleRef}
                className={cn(
                  "absolute top-0 w-2 h-full bg-transparent hover:bg-primary/20 cursor-col-resize z-50 transition-colors duration-200 group -translate-x-1/2"
                )}
                onMouseDown={(e) => {
                  e.preventDefault()
                  setIsResizing(true)
                }}
              >
                <div className="w-0.5 h-full bg-border group-hover:bg-primary transition-colors duration-200 mx-auto" />
              </div>
            )}

            {/* Main Content Area */}
            <div className="flex-1 flex flex-col overflow-hidden bg-background">
              {/* Top Bar */}
              <TopBar
                bodyState={bodyState}
                isDarkMode={isDarkMode}
                onToggleSidebar={toggleSidebar}
                onToggleFullscreen={toggleFullscreen}
                onToggleSidePane={toggleSidePane}
                onToggleDarkMode={toggleDarkMode}
              />
              
              {/* Main Content */}
              <MainContent
                ref={mainContentRef}
                bodyState={bodyState}
              />
            </div>
          </div>
          <RightPane ref={rightPaneRef} />
        </div>
      )
    }
approved: true
linesAdded: null
linesRemoved: null
linesDifference: null
gitCommittedAt: '2025-10-10T10:52:17.228Z'
status: committed
id: 14
