uuid: c2e28399-563b-4ab6-8798-10659648a3d5
projectId: jeli-app-shell
createdAt: '2025-10-12T01:48:11.780Z'
gitCommitMsg: >-
  feat: introduce centralized ViewModeSwitcher component

  This commit introduces a new `ViewModeSwitcher` component to serve as a
  single, centralized control for managing the application's view modes (Normal,
  Side Pane, Split View, Fullscreen).

  Key changes: - Created the `ViewModeSwitcher` component which is context-aware
  of the active page. - Removed disparate view control buttons from `TopBar` and
  the `App.tsx` demo. - Enhanced the `toggleSplitView` action in
  `AppShellContext` to allow direct transition from Normal to Split View. -
  Integrated the new switcher into the `TopBar`, simplifying its layout and
  logic.

  This refactor centralizes view management logic, improves UI consistency, and
  makes the codebase cleaner and more maintainable.
promptSummary: >-
  I want to centralize the UI controls for setting the view mode (normal, split
  view, side pane) into a single, context-aware component.
reasoning:
  - >-
    This is an excellent request. Centralizing UI controls is a key step in
    building a robust and maintainable application shell. By creating a single,
    context-aware `ViewModeSwitcher` component, we'll eliminate scattered logic,
    reduce code duplication, and provide a much more intuitive and consistent
    user experience.
  - 'Here is the plan to refactor the view mode controls:'
  - >-
    1.  **Create `ViewModeSwitcher.tsx`**: A new component that houses all view
    mode buttons (`Normal`, `Side Pane`, `Split View`, `Fullscreen`). It will be
    aware of the current page and application state to perform the correct
    actions.
  - >-
    2.  **Enhance `AppShellContext`**: Modify the `toggleSplitView` action to be
    smarter, allowing it to transition from a normal view directly to a split
    view.
  - >-
    3.  **Refactor `TopBar.tsx`**: Remove the old, individual buttons for
    fullscreen and side pane, and replace them with the new `ViewModeSwitcher`.
  - >-
    4.  **Clean up `AppShell.tsx`**: Remove the props that were passed down to
    the now-deleted buttons in the `TopBar`.
  - >-
    5.  **Clean up `App.tsx`**: Remove the redundant "Move to Side Pane" button
    from the demo application's top bar content.
  - >-
    6.  **Export the New Component**: Make `ViewModeSwitcher` available to
    consumers of the library by exporting it from `src/index.ts`.
  - Let's begin.
  - '### 1. Create the `ViewModeSwitcher` Component'
  - >-
    First, I'll create the new `ViewModeSwitcher.tsx` file. This component will
    serve as the centralized control for all view modes.
  - '### 2. Update the App Shell Context'
  - >-
    To support the new component, I'll export the state type and enhance the
    `toggleSplitView` action in our context provider.
  - '### 3. Integrate into `TopBar`'
  - >-
    Now, I'll replace the old buttons in the `TopBar` with our new, unified
    `ViewModeSwitcher`.
  - '### 4. Clean up `AppShell.tsx`'
  - >-
    I'll remove the now-unused `onToggleFullscreen` prop being passed to child
    components.
  - '### 5. Remove Redundant Controls from `App.tsx`'
  - >-
    The page-specific "Move to Side Pane" button in the demo app is no longer
    needed, as its functionality is handled globally.
  - '### 6. Export the `ViewModeSwitcher`'
  - >-
    Finally, I'll export the new component from the library's entry point to
    make it available for use.
  - >-
    This completes the refactoring. We have successfully centralized the view
    mode controls into a single, context-aware component, leading to a cleaner,
    more robust, and more intuitive application shell.
operations:
  - type: write
    path: src/components/layout/ViewModeSwitcher.tsx
    content: >-
      import { cn } from '@/lib/utils'

      import { useAppShell } from '@/context/AppShellContext'

      import { useAppStore, type ActivePage } from '@/store/appStore'

      import { BODY_STATES } from '@/lib/utils'

      import { type AppShellState } from '@/context/AppShellContext'

      import {
        Columns3,
        PanelRightOpen,
        SplitSquareHorizontal,
        Maximize,
        Minimize,
        Layers
      } from 'lucide-react'


      const pageToPaneMap: Record<ActivePage, AppShellState['sidePaneContent']>
      = {
        dashboard: 'main',
        settings: 'settings',
        toaster: 'toaster',
        notifications: 'notifications',
      };


      export function ViewModeSwitcher() {
        const {
          bodyState,
          sidePaneContent,
          openSidePane,
          closeSidePane,
          toggleFullscreen,
          toggleSplitView,
        } = useAppShell()
        const { activePage } = useAppStore()

        const handleSidePaneClick = () => {
          const paneContent = pageToPaneMap[activePage] || 'details';
          // If side pane is already open with the current page's content, clicking again should close it.
          if (bodyState === BODY_STATES.SIDE_PANE && sidePaneContent === paneContent) {
            closeSidePane();
          } else {
            openSidePane(paneContent);
          }
        };
        
        const handleSplitViewClick = () => {
            const paneContent = pageToPaneMap[activePage] || 'details';
            toggleSplitView(paneContent);
        }

        return (
          <div className="flex items-center gap-1 p-1 bg-card rounded-full border border-border">
            <button
              onClick={() => {
                  if (bodyState !== BODY_STATES.NORMAL) closeSidePane();
              }}
              className={cn(
                'h-8 w-8 flex items-center justify-center rounded-full hover:bg-accent transition-colors group',
                bodyState === BODY_STATES.NORMAL && 'bg-accent text-accent-foreground'
              )}
              title="Normal View"
            >
              <Columns3 className="w-4 h-4" />
            </button>
            <button
              onClick={handleSidePaneClick}
              className={cn(
                'h-8 w-8 flex items-center justify-center rounded-full hover:bg-accent transition-colors group',
                bodyState === BODY_STATES.SIDE_PANE && 'bg-accent text-accent-foreground'
              )}
              title="Side Pane View"
            >
              <PanelRightOpen className="w-4 h-4" />
            </button>
            <button
              onClick={handleSplitViewClick}
              className={cn(
                'h-8 w-8 flex items-center justify-center rounded-full hover:bg-accent transition-colors group',
                bodyState === BODY_STATES.SPLIT_VIEW && 'bg-accent text-accent-foreground'
              )}
              title={bodyState === BODY_STATES.SPLIT_VIEW ? 'Switch to Overlay View' : 'Switch to Split View'}
            >
              {bodyState === BODY_STATES.SPLIT_VIEW ? <Layers className="w-4 h-4" /> : <SplitSquareHorizontal className="w-4 h-4" />}
            </button>
            <button
              onClick={toggleFullscreen}
              className={cn(
                'h-8 w-8 flex items-center justify-center rounded-full hover:bg-accent transition-colors group',
                bodyState === BODY_STATES.FULLSCREEN && 'bg-accent text-accent-foreground'
              )}
              title="Toggle Fullscreen"
            >
              {bodyState === BODY_STATES.FULLSCREEN ? (
                <Minimize className="w-4 h-4" />
              ) : (
                <Maximize className="w-4 h-4" />
              )}
            </button>
          </div>
        )
      }
    patchStrategy: replace
  - type: write
    path: src/context/AppShellContext.tsx
    content: >+
      --- src/context/AppShellContext.tsx

      +++ src/context/AppShellContext.tsx

      @@ -8,7 +8,7 @@
       
       // --- State and Action Types ---
       
      -interface AppShellState {

      +export interface AppShellState {
         sidebarState: SidebarState;
         bodyState: BodyState;
         sidePaneContent: 'details' | 'settings' | 'main' | 'toaster' | 'notifications';
      @@ -107,18 +107,22 @@
           dispatch({ type: 'SET_BODY_STATE', payload: current === BODY_STATES.FULLSCREEN ? BODY_STATES.NORMAL : BODY_STATES.FULLSCREEN });
         }, [state.bodyState]);
       
      -  const toggleSplitView = useCallback(() => {

      +  const toggleSplitView = useCallback((content?:
      AppShellState['sidePaneContent']) => {
           const current = state.bodyState;
           if (current === BODY_STATES.SIDE_PANE) {
             dispatch({ type: 'SET_BODY_STATE', payload: BODY_STATES.SPLIT_VIEW });
             if (state.sidebarState === SIDE_STATES.EXPANDED) {
               dispatch({ type: 'SET_SIDEBAR_STATE', payload: SIDE_STATES.COLLAPSED });
             }
           } else if (current === BODY_STATES.SPLIT_VIEW) {
             dispatch({ type: 'SET_BODY_STATE', payload: BODY_STATES.SIDE_PANE });
      +    } else if (current === BODY_STATES.NORMAL && content) {

      +      // If we're in normal view, open the pane and switch to split view

      +      dispatch({ type: 'SET_SIDE_PANE_CONTENT', payload: content });

      +      dispatch({ type: 'SET_BODY_STATE', payload: BODY_STATES.SPLIT_VIEW
      });
           }
      -  }, [state.bodyState, state.sidebarState]);

      +  }, [state.bodyState, state.sidebarState]);
       
         const openSidePane = useCallback((content: AppShellState['sidePaneContent']) => {
           if (state.bodyState === BODY_STATES.SIDE_PANE && state.sidePaneContent === content) {

    patchStrategy: standard-diff
  - type: write
    path: src/components/layout/TopBar.tsx
    content: >+
      --- src/components/layout/TopBar.tsx

      +++ src/components/layout/TopBar.tsx

      @@ -1,6 +1,4 @@
       import {
         Menu, 
      -  Maximize, 

      -  Minimize, 
         Moon, 
         Sun,
         Settings,
      @@ -11,16 +9,15 @@
       import { useAppStore } from '@/store/appStore'
       import { useAppShell } from '@/context/AppShellContext'
       import { UserDropdown } from './UserDropdown'
      +import { ViewModeSwitcher } from './ViewModeSwitcher'
       
       interface TopBarProps {
         onToggleSidebar?: () => void
      -  onToggleFullscreen?: () => void
         onToggleDarkMode?: () => void
         children?: React.ReactNode
       }
       
       export function TopBar({
         onToggleSidebar,
      -  onToggleFullscreen,
         onToggleDarkMode,
         children,
       }: TopBarProps) {
      @@ -83,32 +80,8 @@
                 <Zap className="w-5 h-5 group-hover:scale-110 transition-transform" />
               </button>
       
      -        {/* Body State Controls */}

      -        <button

      -          onClick={() => openSidePane('details')}

      -          className={cn(

      -            "h-10 w-10 flex items-center justify-center rounded-full
      hover:bg-accent transition-colors group",

      -            bodyState === BODY_STATES.SIDE_PANE && sidePaneContent ===
      'details' && "bg-accent"

      -          )}

      -          title="Toggle Side Pane"

      -        >

      -          <div className="w-5 h-5 flex group-hover:scale-110
      transition-transform">

      -            <div className="w-1/2 h-full bg-current opacity-60
      rounded-l-sm" />

      -            <div className="w-1/2 h-full bg-current rounded-r-sm" />

      -          </div>

      -        </button>

      -

      -        <button

      -          onClick={() => onToggleFullscreen?.()}

      -          className={cn(

      -            "h-10 w-10 flex items-center justify-center rounded-full
      hover:bg-accent transition-colors group",

      -            bodyState === BODY_STATES.FULLSCREEN && "bg-accent"

      -          )}

      -          title="Toggle Fullscreen"

      -        >

      -          {bodyState === BODY_STATES.FULLSCREEN ? (

      -            <Minimize className="w-5 h-5 group-hover:scale-110
      transition-transform" />

      -          ) : (

      -            <Maximize className="w-5 h-5 group-hover:scale-110
      transition-transform" />

      -          )}

      -        </button>

      +        {/* View Mode Controls */}

      +        <ViewModeSwitcher />
       
               <div className="w-px h-6 bg-border mx-2" />
       

    patchStrategy: standard-diff
  - type: write
    path: src/components/layout/AppShell.tsx
    content: |+
      --- src/components/layout/AppShell.tsx
      +++ src/components/layout/AppShell.tsx
      @@ -42,12 +42,10 @@
       
         const topBarWithProps = React.cloneElement(topBar, {
           onToggleSidebar: toggleSidebar,
      -    onToggleFullscreen: toggleFullscreen,
           onToggleDarkMode: toggleDarkMode,
         });
       
         const mainContentWithProps = React.cloneElement(mainContent, {
           ref: mainContentRef,
      -    onToggleFullscreen: toggleFullscreen,
         });
       
         const rightPaneWithProps = React.cloneElement(rightPane, { ref: rightPaneRef });

    patchStrategy: standard-diff
  - type: write
    path: src/App.tsx
    content: >+
      --- src/App.tsx

      +++ src/App.tsx

      @@ -73,11 +73,6 @@
         const { activePage, searchTerm, setSearchTerm } = useAppStore()
         const { openSidePane } = useAppShell()
         const [isSearchFocused, setIsSearchFocused] = React.useState(false);
      -

      -  const handleMoveToSidePane = () => {

      -    const mapping = { dashboard: 'main', settings: 'settings', toaster:
      'toaster', notifications: 'notifications' } as const;

      -    if (mapping[activePage]) openSidePane(mapping[activePage]);

      -  };
       
         return (
           <div className="flex items-center gap-3 flex-1">
      @@ -120,11 +115,6 @@
               </button>
             </div>
             )}
      -

      -      {/* Page-specific: Move to side pane */}

      -      {['dashboard', 'settings', 'toaster',
      'notifications'].includes(activePage) && (

      -        <button onClick={handleMoveToSidePane} className="h-10 w-10 flex
      items-center justify-center hover:bg-accent rounded-full
      transition-colors" title="Move to Side Pane"><PanelRight className="w-5
      h-5" /></button>

      -      )}
           </div>
         )
       }

    patchStrategy: standard-diff
  - type: write
    path: src/index.ts
    content: |+
      --- src/index.ts
      +++ src/index.ts
      @@ -3,6 +3,7 @@
       // Layout Components
       export { AppShell } from './components/layout/AppShell';
       export { MainContent } from './components/layout/MainContent';
      +export { ViewModeSwitcher } from './components/layout/ViewModeSwitcher';
       export { RightPane } from './components/layout/RightPane';
       export { TopBar } from './components/layout/TopBar';
       export { UserDropdown } from './components/layout/UserDropdown';

    patchStrategy: standard-diff
snapshot:
  src/components/layout/ViewModeSwitcher.tsx: null
  src/context/AppShellContext.tsx: >-
    import {
      createContext,
      useContext,
      useReducer,
      useEffect,
      useMemo,
      useCallback,
      type ReactNode,
      type ReactElement,
      type Dispatch,
    } from 'react';

    import { SIDEBAR_STATES, BODY_STATES, type SidebarState, type BodyState }
    from '@/lib/utils';


    // --- State and Action Types ---


    interface AppShellState {
      sidebarState: SidebarState;
      bodyState: BodyState;
      sidePaneContent: 'details' | 'settings' | 'main' | 'toaster' | 'notifications';
      sidebarWidth: number;
      sidePaneWidth: number;
      splitPaneWidth: number;
      isResizing: boolean;
      isResizingRightPane: boolean;
      isTopBarVisible: boolean;
      autoExpandSidebar: boolean;
      reducedMotion: boolean;
      compactMode: boolean;
      primaryColor: string;
      appName?: string;
      appLogo?: ReactElement;
    }


    type AppShellAction =
      | { type: 'SET_SIDEBAR_STATE'; payload: SidebarState }
      | { type: 'SET_BODY_STATE'; payload: BodyState }
      | { type: 'SET_SIDE_PANE_CONTENT'; payload: AppShellState['sidePaneContent'] }
      | { type: 'SET_SIDEBAR_WIDTH'; payload: number }
      | { type: 'SET_SIDE_PANE_WIDTH'; payload: number }
      | { type: 'SET_SPLIT_PANE_WIDTH'; payload: number }
      | { type: 'SET_IS_RESIZING'; payload: boolean }
      | { type: 'SET_IS_RESIZING_RIGHT_PANE'; payload: boolean }
      | { type: 'SET_TOP_BAR_VISIBLE'; payload: boolean }
      | { type: 'SET_AUTO_EXPAND_SIDEBAR'; payload: boolean }
      | { type: 'SET_REDUCED_MOTION'; payload: boolean }
      | { type: 'SET_COMPACT_MODE'; payload: boolean }
      | { type: 'SET_PRIMARY_COLOR'; payload: string }
      | { type: 'RESET_TO_DEFAULTS' };

    // --- Reducer ---


    const defaultState: AppShellState = {
      sidebarState: SIDEBAR_STATES.EXPANDED,
      bodyState: BODY_STATES.NORMAL,
      sidePaneContent: 'details',
      sidebarWidth: 280,
      sidePaneWidth: typeof window !== 'undefined' ? Math.max(300, Math.round(window.innerWidth * 0.6)) : 400,
      splitPaneWidth: typeof window !== 'undefined' ? Math.max(300, Math.round(window.innerWidth * 0.35)) : 400,
      isResizing: false,
      isResizingRightPane: false,
      isTopBarVisible: true,
      autoExpandSidebar: true,
      reducedMotion: false,
      compactMode: false,
      primaryColor: '220 84% 60%',
      appName: 'Jeli App',
      appLogo: undefined,
    };


    function appShellReducer(state: AppShellState, action: AppShellAction):
    AppShellState {
      switch (action.type) {
        case 'SET_SIDEBAR_STATE': return { ...state, sidebarState: action.payload };
        case 'SET_BODY_STATE': return { ...state, bodyState: action.payload };
        case 'SET_SIDE_PANE_CONTENT': return { ...state, sidePaneContent: action.payload };
        case 'SET_SIDEBAR_WIDTH': return { ...state, sidebarWidth: Math.max(200, Math.min(500, action.payload)) };
        case 'SET_SIDE_PANE_WIDTH': return { ...state, sidePaneWidth: Math.max(300, Math.min(window.innerWidth * 0.8, action.payload)) };
        case 'SET_SPLIT_PANE_WIDTH': return { ...state, splitPaneWidth: Math.max(300, Math.min(window.innerWidth * 0.8, action.payload)) };
        case 'SET_IS_RESIZING': return { ...state, isResizing: action.payload };
        case 'SET_IS_RESIZING_RIGHT_PANE': return { ...state, isResizingRightPane: action.payload };
        case 'SET_TOP_BAR_VISIBLE': return { ...state, isTopBarVisible: action.payload };
        case 'SET_AUTO_EXPAND_SIDEBAR': return { ...state, autoExpandSidebar: action.payload };
        case 'SET_REDUCED_MOTION': return { ...state, reducedMotion: action.payload };
        case 'SET_COMPACT_MODE': return { ...state, compactMode: action.payload };
        case 'SET_PRIMARY_COLOR': return { ...state, primaryColor: action.payload };
        case 'RESET_TO_DEFAULTS':
          return {
            ...defaultState,
            appName: state.appName, // Preserve props passed to provider
            appLogo: state.appLogo,   // Preserve props passed to provider
          };
        default: return state;
      }
    }


    // --- Context and Provider ---


    interface AppShellContextValue extends AppShellState {
      dispatch: Dispatch<AppShellAction>;
      rightPaneWidth: number;
      // Composite actions for convenience
      toggleSidebar: () => void;
      hideSidebar: () => void;
      showSidebar: () => void;
      peekSidebar: () => void;
      toggleFullscreen: () => void;
      toggleSplitView: () => void;
      openSidePane: (content: AppShellState['sidePaneContent']) => void;
      closeSidePane: () => void;
      resetToDefaults: () => void;
    }


    const AppShellContext = createContext<AppShellContextValue | null>(null);


    interface AppShellProviderProps {
      children: ReactNode;
      appName?: string;
      appLogo?: ReactElement;
      defaultSplitPaneWidth?: number;
    }


    export function AppShellProvider({ children, appName, appLogo,
    defaultSplitPaneWidth }: AppShellProviderProps) {
      const [state, dispatch] = useReducer(appShellReducer, {
        ...defaultState,
        ...(appName && { appName }),
        ...(appLogo && { appLogo }),
        ...(defaultSplitPaneWidth && { splitPaneWidth: defaultSplitPaneWidth }),
      });

      // Side effect for primary color
      useEffect(() => {
        document.documentElement.style.setProperty('--primary-hsl', state.primaryColor);
      }, [state.primaryColor]);

      // Memoized composite actions using useCallback for stable function identities
      const toggleSidebar = useCallback(() => {
        const current = state.sidebarState;
        if (current === SIDEBAR_STATES.HIDDEN) dispatch({ type: 'SET_SIDEBAR_STATE', payload: SIDEBAR_STATES.COLLAPSED });
        else if (current === SIDEBAR_STATES.COLLAPSED) dispatch({ type: 'SET_SIDEBAR_STATE', payload: SIDEBAR_STATES.EXPANDED });
        else if (current === SIDEBAR_STATES.EXPANDED) dispatch({ type: 'SET_SIDEBAR_STATE', payload: SIDEBAR_STATES.COLLAPSED });
      }, [state.sidebarState]);

      const hideSidebar = useCallback(() => dispatch({ type: 'SET_SIDEBAR_STATE', payload: SIDEBAR_STATES.HIDDEN }), []);
      const showSidebar = useCallback(() => dispatch({ type: 'SET_SIDEBAR_STATE', payload: SIDEBAR_STATES.EXPANDED }), []);
      const peekSidebar = useCallback(() => dispatch({ type: 'SET_SIDEBAR_STATE', payload: SIDEBAR_STATES.PEEK }), []);
      
      const toggleFullscreen = useCallback(() => {
        const current = state.bodyState;
        dispatch({ type: 'SET_BODY_STATE', payload: current === BODY_STATES.FULLSCREEN ? BODY_STATES.NORMAL : BODY_STATES.FULLSCREEN });
      }, [state.bodyState]);

      const toggleSplitView = useCallback(() => {
        const current = state.bodyState;
        if (current === BODY_STATES.SIDE_PANE) {
          dispatch({ type: 'SET_BODY_STATE', payload: BODY_STATES.SPLIT_VIEW });
          if (state.sidebarState === SIDEBAR_STATES.EXPANDED) {
            dispatch({ type: 'SET_SIDEBAR_STATE', payload: SIDEBAR_STATES.COLLAPSED });
          }
        } else if (current === BODY_STATES.SPLIT_VIEW) {
          dispatch({ type: 'SET_BODY_STATE', payload: BODY_STATES.SIDE_PANE });
        }
      }, [state.bodyState, state.sidebarState]);

      const openSidePane = useCallback((content: AppShellState['sidePaneContent']) => {
        if (state.bodyState === BODY_STATES.SIDE_PANE && state.sidePaneContent === content) {
          // If it's open with same content, close it.
          dispatch({ type: 'SET_BODY_STATE', payload: BODY_STATES.NORMAL });
        } else {
          // If closed, or different content, open with new content.
          dispatch({ type: 'SET_SIDE_PANE_CONTENT', payload: content });
          dispatch({ type: 'SET_BODY_STATE', payload: BODY_STATES.SIDE_PANE });
        }
      }, [state.bodyState, state.sidePaneContent]);

      const closeSidePane = useCallback(() => dispatch({ type: 'SET_BODY_STATE', payload: BODY_STATES.NORMAL }), []);
      const resetToDefaults = useCallback(() => dispatch({ type: 'RESET_TO_DEFAULTS' }), []);

      const rightPaneWidth = useMemo(() => (
        state.bodyState === BODY_STATES.SPLIT_VIEW ? state.splitPaneWidth : state.sidePaneWidth
      ), [state.bodyState, state.splitPaneWidth, state.sidePaneWidth]);

      const value = useMemo(() => ({ 
        ...state, 
        dispatch,
        rightPaneWidth,
        toggleSidebar,
        hideSidebar,
        showSidebar,
        peekSidebar,
        toggleFullscreen,
        toggleSplitView,
        openSidePane,
        closeSidePane,
        resetToDefaults,
      }), [
        state, 
        rightPaneWidth,
        toggleSidebar,
        hideSidebar,
        showSidebar,
        peekSidebar,
        toggleFullscreen,
        toggleSplitView,
        openSidePane,
        closeSidePane,
        resetToDefaults
      ]);

      return (
        <AppShellContext.Provider value={value}>
          {children}
        </AppShellContext.Provider>
      );
    }


    // --- Hook ---


    export function useAppShell() {
      const context = useContext(AppShellContext);
      if (!context) {
        throw new Error('useAppShell must be used within an AppShellProvider');
      }
      return context;
    }
  src/components/layout/TopBar.tsx: |-
    import {
      Menu, 
      Maximize, 
      Minimize, 
      Moon, 
      Sun,
      Settings,
      Command,
      Zap,
    } from 'lucide-react'
    import { cn } from '@/lib/utils'
    import { BODY_STATES } from '@/lib/utils'
    import { useAppStore } from '@/store/appStore'
    import { useAppShell } from '@/context/AppShellContext'
    import { UserDropdown } from './UserDropdown'

    interface TopBarProps {
      onToggleSidebar?: () => void
      onToggleFullscreen?: () => void
      onToggleDarkMode?: () => void
      children?: React.ReactNode
    }

    export function TopBar({
      onToggleSidebar,
      onToggleFullscreen,
      onToggleDarkMode,
      children,
    }: TopBarProps) {
      const { bodyState, openSidePane, sidePaneContent } = useAppShell();
      const { 
        setCommandPaletteOpen,
        isDarkMode,
      } = useAppStore()

      const handleSettingsClick = () => {
        const isSettingsInSidePane = bodyState === BODY_STATES.SIDE_PANE && sidePaneContent === 'settings'

        // If we're on the settings page and it's not in the side pane, treat this as a "minimize" action.
        if (!isSettingsInSidePane) {
          openSidePane('settings');
        } else {
          // In all other cases (on dashboard page, or settings already in pane),
          // just toggle the settings side pane.
          openSidePane('settings')
        }
      };

      return (
        <div className={cn(
          "h-20 bg-background border-b border-border flex items-center justify-between px-6 z-50 gap-4",
          'transition-all duration-300 ease-in-out'
        )}>
          {/* Left Section - Sidebar Controls & Breadcrumbs */}
          <div className="flex items-center gap-4">
            {/* Sidebar Controls */}
            <button
              onClick={() => onToggleSidebar?.()}
              className={cn(
                "h-10 w-10 flex items-center justify-center rounded-full hover:bg-accent transition-colors"
              )}
              title="Toggle Sidebar"
            >
              <Menu className="w-5 h-5" />
            </button>

          </div>

          {/* Right Section - page controls, and global controls */}
          <div className="flex items-center gap-3">
            {children}

            {/* Separator */}
            <div className="w-px h-6 bg-border mx-2" />

            {/* Quick Actions */}
            <div className="flex items-center gap-3">

              <button
                onClick={() => setCommandPaletteOpen(true)}
                className="h-10 w-10 flex items-center justify-center rounded-full hover:bg-accent transition-colors group"
                title="Command Palette (Ctrl+K)"
              >
                <Command className="w-5 h-5 group-hover:scale-110 transition-transform" />
              </button>

            <button
              className="h-10 w-10 flex items-center justify-center rounded-full hover:bg-accent transition-colors group"
              title="Quick Actions"
            >
              <Zap className="w-5 h-5 group-hover:scale-110 transition-transform" />
            </button>

            {/* Body State Controls */}
            <button
              onClick={() => openSidePane('details')}
              className={cn(
                "h-10 w-10 flex items-center justify-center rounded-full hover:bg-accent transition-colors group",
                bodyState === BODY_STATES.SIDE_PANE && sidePaneContent === 'details' && "bg-accent"
              )}
              title="Toggle Side Pane"
            >
              <div className="w-5 h-5 flex group-hover:scale-110 transition-transform">
                <div className="w-1/2 h-full bg-current opacity-60 rounded-l-sm" />
                <div className="w-1/2 h-full bg-current rounded-r-sm" />
              </div>
            </button>

            <button
              onClick={() => onToggleFullscreen?.()}
              className={cn(
                "h-10 w-10 flex items-center justify-center rounded-full hover:bg-accent transition-colors group",
                bodyState === BODY_STATES.FULLSCREEN && "bg-accent"
              )}
              title="Toggle Fullscreen"
            >
              {bodyState === BODY_STATES.FULLSCREEN ? (
                <Minimize className="w-5 h-5 group-hover:scale-110 transition-transform" />
              ) : (
                <Maximize className="w-5 h-5 group-hover:scale-110 transition-transform" />
              )}
            </button>

            <div className="w-px h-6 bg-border mx-2" />

            {/* Theme and Settings */}
            <button
              onClick={() => onToggleDarkMode?.()}
              className="h-10 w-10 flex items-center justify-center rounded-full hover:bg-accent transition-colors group"
              title="Toggle Dark Mode"
            >
              {isDarkMode ? (
                <Sun className="w-5 h-5 group-hover:scale-110 transition-transform" />
              ) : (
                <Moon className="w-5 h-5 group-hover:scale-110 transition-transform" />
              )}
            </button>

            <button
              onClick={handleSettingsClick}
              className="h-10 w-10 flex items-center justify-center rounded-full hover:bg-accent transition-colors group"
              title="Settings"
            >
              <Settings className="w-5 h-5 group-hover:rotate-90 transition-transform duration-300" />
            </button>
            <UserDropdown />
            </div>
          </div>
        </div>
      )
    }
  src/components/layout/AppShell.tsx: >-
    import React, { useRef, type ReactElement } from 'react'

    import { cn } from '@/lib/utils'

    import { CommandPalette } from '@/components/global/CommandPalette';

    import { useAppStore } from '@/store/appStore';

    import { useAppShell } from '@/context/AppShellContext';

    import { SIDEBAR_STATES } from '@/lib/utils'

    import { useResizableSidebar, useResizableRightPane } from
    '@/hooks/useResizablePanes.hook'

    import { useSidebarAnimations, useBodyStateAnimations } from
    '@/hooks/useAppShellAnimations.hook'


    interface AppShellProps {
      sidebar: ReactElement;
      topBar: ReactElement;
      mainContent: ReactElement;
      rightPane: ReactElement;
      commandPalette?: ReactElement;
    }



    export function AppShell({ sidebar, topBar, mainContent, rightPane,
    commandPalette }: AppShellProps) {
      const {
        sidebarState,
        dispatch,
        autoExpandSidebar,
        toggleSidebar,
        peekSidebar,
        toggleFullscreen,
      } = useAppShell();
      
      const { isDarkMode, toggleDarkMode } = useAppStore();
      const appRef = useRef<HTMLDivElement>(null)
      const sidebarRef = useRef<HTMLDivElement>(null)
      const mainContentRef = useRef<HTMLDivElement>(null)
      const rightPaneRef = useRef<HTMLDivElement>(null)
      const resizeHandleRef = useRef<HTMLDivElement>(null)
      const topBarContainerRef = useRef<HTMLDivElement>(null)
      const mainAreaRef = useRef<HTMLDivElement>(null)

      // Custom hooks for logic
      useResizableSidebar(sidebarRef, resizeHandleRef);
      useResizableRightPane();
      useSidebarAnimations(sidebarRef, resizeHandleRef);
      useBodyStateAnimations(appRef, mainContentRef, rightPaneRef, topBarContainerRef, mainAreaRef);
      
      const sidebarWithProps = React.cloneElement(sidebar, { 
        ref: sidebarRef,
        onMouseEnter: () => {
          if (autoExpandSidebar && sidebarState === SIDEBAR_STATES.COLLAPSED) {
            peekSidebar()
          }
        },
        onMouseLeave: () => {
          if (autoExpandSidebar && sidebarState === SIDEBAR_STATES.PEEK) {
            dispatch({ type: 'SET_SIDEBAR_STATE', payload: SIDEBAR_STATES.COLLAPSED });
          }
        }
      });

      const topBarWithProps = React.cloneElement(topBar, {
        onToggleSidebar: toggleSidebar,
        onToggleFullscreen: toggleFullscreen,
        onToggleDarkMode: toggleDarkMode,
      });

      const mainContentWithProps = React.cloneElement(mainContent, {
        ref: mainContentRef,
        onToggleFullscreen: toggleFullscreen,
      });

      const rightPaneWithProps = React.cloneElement(rightPane, { ref: rightPaneRef });

      return (
        <div 
          ref={appRef}
          className={cn(
            "relative h-screen w-screen overflow-hidden bg-background transition-colors duration-300",
            isDarkMode && "dark"
          )}
        >
          <div className="flex h-screen overflow-hidden">
            {/* Enhanced Sidebar */}
            {sidebarWithProps}

            {/* Resize Handle */}
            {sidebarState !== SIDEBAR_STATES.HIDDEN && (
              <div
                ref={resizeHandleRef}
                className={cn(
                  "absolute top-0 w-2 h-full bg-transparent hover:bg-primary/20 cursor-col-resize z-50 transition-colors duration-200 group -translate-x-1/2"
                )}
                onMouseDown={(e) => {
                  e.preventDefault()
                  dispatch({ type: 'SET_IS_RESIZING', payload: true });
                }}
              >
                <div className="w-0.5 h-full bg-border group-hover:bg-primary transition-colors duration-200 mx-auto" />
              </div>
            )}

            {/* Main Content Area */}
            <div ref={mainAreaRef} className="relative flex-1 overflow-hidden bg-background">
              <div ref={topBarContainerRef} className="absolute inset-x-0 top-0 z-30">
                {topBarWithProps}
              </div>
              
              {/* Main Content */}
              {mainContentWithProps}
            </div>
          </div>
          {rightPaneWithProps}
          {commandPalette || <CommandPalette />}
        </div>
      )
    }
  src/App.tsx: >-
    import React, { useEffect } from 'react'

    import { AppShell } from './components/layout/AppShell'

    import { AppShellProvider, useAppShell } from './context/AppShellContext'

    import { useAppStore } from './store/appStore'

    import { useAuthStore } from './store/authStore'

    import './index.css'


    // Import library components

    import { EnhancedSidebar } from './components/layout/EnhancedSidebar'

    import { MainContent } from './components/layout/MainContent'

    import { RightPane } from './components/layout/RightPane'

    import { TopBar } from './components/layout/TopBar'

    import { CommandPalette } from './components/global/CommandPalette'


    // Import page/content components

    import { DashboardContent } from './pages/Dashboard'

    import { SettingsPage } from './pages/Settings'

    import { ToasterDemo } from './pages/ToasterDemo'

    import { NotificationsPage } from './pages/Notifications'

    import { ContentInSidePanePlaceholder } from
    './components/shared/ContentInSidePanePlaceholder'

    import { SettingsContent } from './features/settings/SettingsContent'

    import { LoginPage } from './components/auth/LoginPage'


    // Import icons

    import { LayoutDashboard, Settings, Component, Bell, SlidersHorizontal,
    ChevronsLeftRight, Search, Filter, Plus, PanelRight, ChevronRight, Rocket,
    Layers, SplitSquareHorizontal } from 'lucide-react'

    import { BODY_STATES } from './lib/utils'

    import { cn } from './lib/utils'



    // The content for the main area, with page routing logic

    function AppContent() {
      const { activePage, setActivePage } = useAppStore()
      const { bodyState, sidePaneContent, openSidePane } = useAppShell()

      const pageMap = {
        dashboard: {
          component: <DashboardContent />,
          sidePaneContent: 'main',
          icon: LayoutDashboard,
          name: 'dashboard',
        },
        settings: {
          component: <SettingsPage />,
          sidePaneContent: 'settings',
          icon: Settings,
          name: 'settings',
        },
        toaster: {
          component: <ToasterDemo />,
          sidePaneContent: 'toaster',
          icon: Component,
          name: 'toaster demo',
        },
        notifications: {
          component: <NotificationsPage />,
          sidePaneContent: 'notifications',
          icon: Bell,
          name: 'notifications',
        },
      } as const;

      const currentPage = pageMap[activePage];

      if (sidePaneContent === currentPage.sidePaneContent && bodyState === BODY_STATES.SIDE_PANE) {
        return (
          <ContentInSidePanePlaceholder 
            icon={currentPage.icon}
            title={`${currentPage.name.charAt(0).toUpperCase() + currentPage.name.slice(1)} is in Side Pane`}
            pageName={currentPage.name}
            onBringBack={() => {
              openSidePane(currentPage.sidePaneContent);
              setActivePage(activePage);
            }}
          />
        )
      }

      return currentPage.component;
    }


    // Content for the Top Bar

    function AppTopBar() {
      const { activePage, searchTerm, setSearchTerm } = useAppStore()
      const { openSidePane } = useAppShell()
      const [isSearchFocused, setIsSearchFocused] = React.useState(false);

      const handleMoveToSidePane = () => {
        const mapping = { dashboard: 'main', settings: 'settings', toaster: 'toaster', notifications: 'notifications' } as const;
        if (mapping[activePage]) openSidePane(mapping[activePage]);
      };

      return (
        <div className="flex items-center gap-3 flex-1">
          <div className={cn("hidden md:flex items-center gap-2 text-sm transition-opacity", {
              "opacity-0 pointer-events-none": isSearchFocused && activePage === 'dashboard'
          })}>
            <a href="#" className="text-muted-foreground hover:text-foreground transition-colors">Home</a>
            <ChevronRight className="w-4 h-4 text-muted-foreground" />
            <span className="font-medium text-foreground capitalize">{activePage}</span>
          </div>
          
          <div className="flex-1" />

          {/* Page-specific: Dashboard search and actions */}
          {activePage === 'dashboard' && (
          <div className="flex items-center gap-2 flex-1 justify-end">
            <div className={cn("relative transition-all duration-300 ease-in-out", isSearchFocused ? 'flex-1 max-w-lg' : 'w-auto')}>
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4 pointer-events-none" />
              <input
                type="text"
                placeholder="Search..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                onFocus={() => setIsSearchFocused(true)}
                onBlur={() => setIsSearchFocused(false)}
                className={cn(
                  "pl-9 pr-4 py-2 h-10 border-none rounded-lg bg-card focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent transition-all duration-300 ease-in-out w-full",
                  isSearchFocused ? 'bg-background' : 'w-48'
                )}
              />
            </div>
             <button className="h-10 w-10 flex-shrink-0 flex items-center justify-center hover:bg-accent rounded-full transition-colors">
              <Filter className="w-5 h-5" />
            </button>
             <button className="bg-primary text-primary-foreground px-4 py-2 rounded-full hover:bg-primary/90 transition-colors flex items-center gap-2 h-10 flex-shrink-0">
              <Plus className="w-5 h-5" />
              <span className={cn(isSearchFocused ? 'hidden sm:inline' : 'inline')}>New Project</span>
            </button>
          </div>
          )}

          {/* Page-specific: Move to side pane */}
          {['dashboard', 'settings', 'toaster', 'notifications'].includes(activePage) && (
            <button onClick={handleMoveToSidePane} className="h-10 w-10 flex items-center justify-center hover:bg-accent rounded-full transition-colors" title="Move to Side Pane"><PanelRight className="w-5 h-5" /></button>
          )}
        </div>
      )
    }


    // The main App component that composes the shell

    function ComposedApp() {
      const { sidePaneContent, closeSidePane, bodyState, toggleSplitView } = useAppShell();
      const { setActivePage } = useAppStore();

      const contentMap = {
        main: { title: 'Dashboard', icon: LayoutDashboard, page: 'dashboard', content: <DashboardContent isInSidePane /> },
        settings: { title: 'Settings', icon: Settings, page: 'settings', content: <SettingsContent /> },
        toaster: { title: 'Toaster Demo', icon: Component, page: 'toaster', content: <ToasterDemo isInSidePane /> },
        notifications: { title: 'Notifications', icon: Bell, page: 'notifications', content: <NotificationsPage isInSidePane /> },
        details: { title: 'Details Panel', icon: SlidersHorizontal, content: <p className="text-muted-foreground">This is the side pane. It can be used to display contextual information, forms, or actions related to the main content.</p> }
      } as const;

      const currentContent = contentMap[sidePaneContent as keyof typeof contentMap] || contentMap.details;
      const CurrentIcon = currentContent.icon;

      const handleMaximize = () => {
        if ('page' in currentContent && currentContent.page) {
          setActivePage(currentContent.page as any);
        }
        closeSidePane()
      }

      const rightPaneHeader = (
          <>
          <div className="flex items-center gap-2">
            <CurrentIcon className="w-5 h-5" />
            <h2 className="text-lg font-semibold whitespace-nowrap">
              {currentContent.title}
            </h2>
          </div>
          <div className="flex items-center">
            {(bodyState === BODY_STATES.SIDE_PANE || bodyState === BODY_STATES.SPLIT_VIEW) && (
              <button
                onClick={toggleSplitView}
                className="h-10 w-10 flex items-center justify-center hover:bg-accent rounded-full transition-colors"
                title={bodyState === BODY_STATES.SIDE_PANE ? 'Switch to Split View' : 'Switch to Overlay View'}
              >
                {bodyState === BODY_STATES.SPLIT_VIEW ? (
                  <Layers className="w-5 h-5" />
                ) : (
                  <SplitSquareHorizontal className="w-5 h-5" />
                )}
              </button>
            )}
            {'page' in currentContent && currentContent.page && (
              <button
                onClick={handleMaximize}
                className="h-10 w-10 flex items-center justify-center hover:bg-accent rounded-full transition-colors mr-2"
                title="Move to Main View"
              >
                <ChevronsLeftRight className="w-5 h-5" />
              </button>
            )}
          </div>
          </>
      );

      return (
        <AppShell
          sidebar={<EnhancedSidebar />}
          topBar={<TopBar><AppTopBar /></TopBar>}
          mainContent={<MainContent><AppContent /></MainContent>}
          rightPane={(
            <RightPane header={rightPaneHeader}>{currentContent.content}</RightPane>
          )}
          commandPalette={<CommandPalette />}
        />
      );
    }


    function App() {
      const isDarkMode = useAppStore((state) => state.isDarkMode)
      const { isAuthenticated, login, forgotPassword } = useAuthStore()

      useEffect(() => {
        document.documentElement.classList.toggle('dark', isDarkMode);
      }, [isDarkMode]);

      const handleLogin = async (email: string, password: string) => {
        try {
          await login(email, password)
        } catch (error) {
          console.error('Login failed:', error)
          // In a real app, you'd show an error message to the user
        }
      }

      const handleForgotPassword = async (email: string) => {
        try {
          await forgotPassword(email)
        } catch (error) {
          console.error('Forgot password failed:', error)
        }
      }

      const handleSignUp = () => {
        // In a real app, navigate to sign up page
        console.log('Navigate to sign up page')
      }

      if (!isAuthenticated) {
        return (
          <LoginPage
            onLogin={handleLogin}
            onForgotPassword={handleForgotPassword}
            onSignUp={handleSignUp}
          />
        )
      }

      return (
        <div className="h-screen w-screen overflow-hidden bg-background">
          <AppShellProvider
            appName="Jeli App"
            appLogo={
              <div className="p-2 bg-primary/20 rounded-lg">
                <Rocket className="w-5 h-5 text-primary" />
              </div>
            }
          >
            <ComposedApp />
          </AppShellProvider>
        </div>
      )
    }


    export default App
  src/index.ts: >-
    // Context

    export { AppShellProvider, useAppShell } from './context/AppShellContext';


    // Layout Components

    export { AppShell } from './components/layout/AppShell';

    export { MainContent } from './components/layout/MainContent';

    export { RightPane } from './components/layout/RightPane';

    export { TopBar } from './components/layout/TopBar';

    export { UserDropdown } from './components/layout/UserDropdown';

    export { Workspaces as WorkspaceProvider, WorkspaceTrigger, WorkspaceContent
    } from './components/layout/WorkspaceSwitcher';


    // Sidebar Primitives

    export {
      Sidebar,
      SidebarBody,
      SidebarContent,
      SidebarFooter,
      SidebarHeader,
      SidebarSection,
      SidebarTitle,
      SidebarMenuItem,
      SidebarMenuButton,
      SidebarMenuAction,
      SidebarLabel,
      SidebarBadge,
      SidebarTooltip,
      SidebarIcon,
      useSidebar,
    } from './components/layout/Sidebar';


    // Shared Components

    export { ContentInSidePanePlaceholder } from
    './components/shared/ContentInSidePanePlaceholder';

    export { PageHeader } from './components/shared/PageHeader';


    // Feature Components

    export { SettingsContent } from './features/settings/SettingsContent';

    export { SettingsSection } from './features/settings/SettingsSection';

    export { SettingsToggle } from './features/settings/SettingsToggle';

    export { LoginPage } from './components/auth/LoginPage';


    // UI Components

    export * from './components/ui/avatar';

    export * from './components/ui/badge';

    export * from './components/ui/button';

    export * from './components/ui/card';

    export * from './components/ui/command';

    export * from './components/ui/dialog';

    export * from './components/ui/dropdown-menu';

    export * from './components/ui/input';

    export * from './components/ui/label';

    export * from './components/ui/popover';

    export * from './components/ui/tabs';

    export * from './components/ui/toast';


    // Global Components

    export { CommandPalette } from './components/global/CommandPalette';


    // Hooks

    export { useAutoAnimateTopBar } from './hooks/useAutoAnimateTopBar';

    export { useCommandPaletteToggle } from
    './hooks/useCommandPaletteToggle.hook';


    // Lib

    export * from './lib/utils';


    // Store

    export { useAppStore, type ActivePage } from './store/appStore';

    export { useAuthStore } from './store/authStore';
approved: true
linesAdded: null
linesRemoved: null
linesDifference: null
gitCommittedAt: '2025-10-12T01:52:57.608Z'
status: committed
id: 124
