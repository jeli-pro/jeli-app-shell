uuid: d5e206ab-70a2-4a7b-a496-d2495d436329
projectId: jeli-app-shell
createdAt: '2025-10-16T22:17:36.262Z'
gitCommitMsg: >-
  feat: Refactor scroll-to-bottom and add to Data Demo

  Abstracted the scroll-to-bottom functionality into a reusable
  `useScrollToBottom` hook and a `ScrollToBottomButton` component.

  This change fixes a positioning bug on the Dashboard where the button was
  `fixed` to the viewport instead of being contained within its scrollable
  parent. The new component uses `position: absolute` relative to the
  `MainContent` area.

  As a demonstration of reusability and to improve UX, the same scroll-to-bottom
  feature has been added to the Data Demo page.
promptSummary: >-
  The user wants to fix the scroll-to-bottom button's positioning on the
  Dashboard and also apply it to the Data Demo page. This involves refactoring
  the functionality into a reusable hook and component.
reasoning:
  - >-
    Okay, let's get this done. I'll abstract the scroll-to-bottom logic into a
    reusable hook and component, fix the positioning bug on the Dashboard, and
    then add this feature to the Data Demo page for good measure.
  - '### Step 1: Create a Reusable Scroll-to-Bottom Hook'
  - >-
    First, I'll create a new, dedicated hook `useScrollToBottom.hook.ts` to
    encapsulate the scroll detection logic, keeping it separate from any other
    page-specific logic like top bar animations.
  - '### Step 2: Create a Reusable Button Component'
  - >-
    Next, I'll create a `ScrollToBottomButton.tsx` component. This component
    will use `position: absolute` so it stays within its parent scrolling
    container, fixing the original bug.
  - '### Step 3: Update `MainContent` for Correct Positioning'
  - >-
    To ensure our absolutely positioned button works correctly, its nearest
    ancestor needs `position: relative`. `MainContent` is the perfect candidate
    for this.
  - '### Step 4: Refactor the Dashboard Page'
  - >-
    Now I'll update the Dashboard to use our new reusable hook and component.
    This involves separating the top bar scroll logic from the scroll-to-bottom
    logic and combining their handlers.
  - '### Step 5: Clean Up by Deleting the Old Hook'
  - >-
    The old, page-specific hook is no longer needed. Let's remove it to prevent
    code rot.
  - '### Step 6: Enhance the Data Demo Page'
  - >-
    Finally, to demonstrate the reusability of our new solution, I'll add the
    scroll-to-bottom feature to the Data Demo page.
  - '---'
operations:
  - type: write
    path: src/hooks/useScrollToBottom.hook.ts
    content: |-
      import { useState, useCallback } from 'react';

      export function useScrollToBottom(
        contentRef: React.RefObject<HTMLDivElement>
      ) {
        const [showScrollToBottom, setShowScrollToBottom] = useState(false);

        const handleScroll = useCallback((e: React.UIEvent<HTMLDivElement>) => {
          if (!contentRef.current) return;
          const { scrollTop, scrollHeight, clientHeight } = contentRef.current;
          // Show button if scrolled down more than 200px, and there's more than 200px left to scroll
          setShowScrollToBottom(scrollTop > 200 && scrollTop < scrollHeight - clientHeight - 200);
        }, [contentRef]);

        const scrollToBottom = () => {
          contentRef.current?.scrollTo({
            top: contentRef.current.scrollHeight,
            behavior: 'smooth'
          });
        };

        return { showScrollToBottom, handleScroll, scrollToBottom };
      }
    patchStrategy: replace
  - type: write
    path: src/components/shared/ScrollToBottomButton.tsx
    content: >-
      import { ArrowDown } from 'lucide-react';


      interface ScrollToBottomButtonProps {
        isVisible: boolean;
        onClick: () => void;
      }


      export function ScrollToBottomButton({ isVisible, onClick }:
      ScrollToBottomButtonProps) {
        if (!isVisible) {
          return null;
        }

        return (
          <button
            onClick={onClick}
            className="absolute bottom-8 right-8 w-12 h-12 bg-primary text-primary-foreground rounded-full flex items-center justify-center shadow-lg hover:bg-primary/90 transition-all animate-fade-in z-[51]"
            style={{ animation: 'bounce 2s infinite' }}
            title="Scroll to bottom"
          >
            <ArrowDown className="w-6 h-6" />
          </button>
        );
      }
    patchStrategy: replace
  - type: write
    path: src/components/layout/MainContent.tsx
    content: |+
      --- src/components/layout/MainContent.tsx
      +++ src/components/layout/MainContent.tsx
      @@ -21,7 +21,7 @@
             <div
               ref={ref}
               className={cn(
      -        "flex flex-col h-full overflow-hidden bg-background",
      +        "relative flex flex-col h-full overflow-hidden bg-background",
               isFullscreen && "fixed inset-0 z-[60]"
               )}
             >

    patchStrategy: standard-diff
  - type: write
    path: src/pages/Dashboard/index.tsx
    content: >+
      --- src/pages/Dashboard/index.tsx

      +++ src/pages/Dashboard/index.tsx

      @@ -1,5 +1,5 @@

      -import { useRef } from 'react'

      -import { 

      +import { useRef, useCallback } from 'react'

      +import {
         BarChart3, 
         TrendingUp, 
         Users, 
      @@ -11,16 +11,17 @@
         FileText,
         Star,
         ChevronRight,
      -  MoreVertical,

      -  ArrowDown

      +  MoreVertical
       } from 'lucide-react'
       import { cn } from '@/lib/utils'
       import { DemoContent } from './DemoContent';
       import { useDashboardAnimations } from './hooks/useDashboardAnimations.motion.hook'
      -import { useDashboardScroll } from './hooks/useDashboardScroll.hook'

      +import { useAutoAnimateTopBar } from '@/hooks/useAutoAnimateTopBar';

      +import { useScrollToBottom } from '@/hooks/useScrollToBottom.hook';
       import { useAppShellStore } from '@/store/appShell.store'
       import { BODY_STATES } from '@/lib/utils'
       import { PageHeader } from '@/components/shared/PageHeader';
      +import { ScrollToBottomButton } from
      '@/components/shared/ScrollToBottomButton';
       import { StatCard } from '@/components/shared/StatCard';
       import { Card } from '@/components/ui/card';
       import { PageLayout } from '@/components/shared/PageLayout';
      @@ -124,7 +125,14 @@
           const featureCardsContainerRef = useRef<HTMLDivElement>(null);
           const bodyState = useAppShellStore(s => s.bodyState);
           const isInSidePane = bodyState === BODY_STATES.SIDE_PANE;
      -    const { showScrollToBottom, handleScroll, scrollToBottom } =
      useDashboardScroll(scrollRef, isInSidePane);

      +    

      +    const { onScroll: handleTopBarScroll } =
      useAutoAnimateTopBar(isInSidePane);

      +    const { showScrollToBottom, scrollToBottom, handleScroll:
      handleScrollToBottom } = useScrollToBottom(scrollRef);

      +

      +    const handleScroll = useCallback((e: React.UIEvent<HTMLDivElement>)
      => {

      +        handleTopBarScroll(e);

      +        handleScrollToBottom(e);

      +    }, [handleTopBarScroll, handleScrollToBottom]);
       
           useDashboardAnimations(contentRef, statsCardsContainerRef, featureCardsContainerRef);
       
      @@ -321,16 +329,7 @@
                 </Card>
               </div>
             </div>
      -      {showScrollToBottom && (

      -        <button

      -          onClick={scrollToBottom}

      -          className="fixed bottom-8 right-8 w-12 h-12 bg-primary
      text-primary-foreground rounded-full flex items-center justify-center
      shadow-lg hover:bg-primary/90 transition-all animate-fade-in z-[51]"

      -          style={{ animation: 'bounce 2s infinite' }}

      -          title="Scroll to bottom"

      -        >

      -          <ArrowDown className="w-6 h-6" />

      -        </button>

      -      )}

      +      <ScrollToBottomButton isVisible={showScrollToBottom}
      onClick={scrollToBottom} />
             </PageLayout>
           )
       }

    patchStrategy: standard-diff
  - type: delete
    path: src/pages/Dashboard/hooks/useDashboardScroll.hook.ts
  - type: write
    path: src/pages/DataDemo/index.tsx
    content: >+
      --- src/pages/DataDemo/index.tsx

      +++ src/pages/DataDemo/index.tsx

      @@ -14,6 +14,8 @@
         DropdownMenuTrigger 
       } from '@/components/ui/dropdown-menu'
       import { PageLayout } from '@/components/shared/PageLayout'
      +import { useScrollToBottom } from '@/hooks/useScrollToBottom.hook';

      +import { ScrollToBottomButton } from
      '@/components/shared/ScrollToBottomButton';
       import { DataListView } from './components/DataListView'
       import { DataCardView } from './components/DataCardView'
       import { DataTableView } from './components/DataTableView'
      @@ -128,9 +130,12 @@
           { id: 'none', label: 'None' }, { id: 'status', label: 'Status' }, { id: 'priority', label: 'Priority' }, { id: 'category', label: 'Category' }
         ]
         const statsRef = useRef<HTMLDivElement>(null)
      +  const scrollRef = useRef<HTMLDivElement>(null);
       
         // Calculate stats from data
         const totalItems = mockDataItems.length
      +  const { showScrollToBottom, scrollToBottom, handleScroll } =
      useScrollToBottom(scrollRef);

      +
         const activeItems = mockDataItems.filter(item => item.status === 'active').length
         const highPriorityItems = mockDataItems.filter(item => item.priority === 'high' || item.priority === 'critical').length
         const avgCompletion = totalItems > 0 ? Math.round(
      @@ -207,7 +212,9 @@
       
         return (
           <PageLayout
      +      scrollRef={scrollRef}

      +      onScroll={handleScroll}
             // Note: Search functionality is handled by a separate SearchBar in the TopBar
           >
             <div className="space-y-8">
      @@ -311,6 +318,7 @@
                 )}
               </div>
             </div>
      +      <ScrollToBottomButton isVisible={showScrollToBottom}
      onClick={scrollToBottom} />
           </PageLayout>
         )
       }

    patchStrategy: standard-diff
snapshot:
  src/components/shared/ScrollToBottomButton.tsx: null
  src/hooks/useScrollToBottom.hook.ts: null
  src/components/layout/MainContent.tsx: |-
    import { forwardRef } from 'react'
    import { X } from 'lucide-react'
    import { cn } from '@/lib/utils';
    import { BODY_STATES } from '@/lib/utils'
    import { useAppShellStore } from '@/store/appShell.store'

    interface MainContentProps {
      children?: React.ReactNode;
    }

    export const MainContent = forwardRef<HTMLDivElement, MainContentProps>(
      ({ children }, ref) => {
        const bodyState = useAppShellStore(s => s.bodyState);
        const fullscreenTarget = useAppShellStore(s => s.fullscreenTarget);
        const { toggleFullscreen } = useAppShellStore.getState();
        const isFullscreen = bodyState === BODY_STATES.FULLSCREEN;

        if (isFullscreen && fullscreenTarget === 'right') {
          return null;
        }

        return (
          <div
            ref={ref}
            className={cn(
            "flex flex-col h-full overflow-hidden bg-background",
            isFullscreen && "fixed inset-0 z-[60]"
            )}
          >
            {isFullscreen && (
              <button
                onClick={() => toggleFullscreen()}
                className="fixed top-6 right-6 lg:right-12 z-[100] h-12 w-12 flex items-center justify-center rounded-full bg-card/50 backdrop-blur-sm hover:bg-card/75 transition-colors group"
                title="Exit Fullscreen"
              >
                <X className="w-6 h-6 group-hover:scale-110 group-hover:rotate-90 transition-all duration-300" />
              </button>
            )}

            <div className="flex-1 min-h-0 flex flex-col">
              {children}
            </div>
          </div>
        )
      }
    )
    MainContent.displayName = 'MainContent'
  src/pages/Dashboard/hooks/useDashboardScroll.hook.ts: |-
    import { useState, useCallback } from 'react';
    import { useAutoAnimateTopBar } from '@/hooks/useAutoAnimateTopBar';

    export function useDashboardScroll(
      contentRef: React.RefObject<HTMLDivElement>,
      isInSidePane: boolean
    ) {
      const [showScrollToBottom, setShowScrollToBottom] = useState(false);
      const { onScroll: handleTopBarScroll } = useAutoAnimateTopBar(isInSidePane);

      const handleScroll = useCallback((e: React.UIEvent<HTMLDivElement>) => {
        handleTopBarScroll(e);
        if (!contentRef.current) return;
        const { scrollTop, scrollHeight, clientHeight } = contentRef.current;
        setShowScrollToBottom(scrollTop > 200 && scrollTop < scrollHeight - clientHeight - 200);
      }, [handleTopBarScroll, contentRef]);

      const scrollToBottom = () => {
        contentRef.current?.scrollTo({
          top: contentRef.current.scrollHeight,
          behavior: 'smooth'
        });
      };

      return { showScrollToBottom, handleScroll, scrollToBottom };
    }
  src/pages/Dashboard/index.tsx: >-
    import { useRef } from 'react'

    import { 
      BarChart3, 
      TrendingUp, 
      Users, 
      DollarSign, 
      Activity,
      Calendar,
      Clock,
      MessageSquare,
      FileText,
      Star,
      ChevronRight,
      MoreVertical,
      ArrowDown
    } from 'lucide-react'

    import { cn } from '@/lib/utils'

    import { DemoContent } from './DemoContent';

    import { useDashboardAnimations } from
    './hooks/useDashboardAnimations.motion.hook'

    import { useDashboardScroll } from './hooks/useDashboardScroll.hook'

    import { useAppShellStore } from '@/store/appShell.store'

    import { BODY_STATES } from '@/lib/utils'

    import { PageHeader } from '@/components/shared/PageHeader';

    import { StatCard } from '@/components/shared/StatCard';

    import { Card } from '@/components/ui/card';

    import { PageLayout } from '@/components/shared/PageLayout';


    interface StatsCard {
      title: string
      value: string
      change: string
      trend: 'up' | 'down'
      icon: React.ReactNode
    }


    interface ActivityItem {
      id: string
      type: 'comment' | 'file' | 'meeting' | 'task'
      title: string
      description: string
      time: string
      user: string
    }


    const statsCards: StatsCard[] = [
      {
        title: "Total Revenue",
        value: "$45,231.89",
        change: "+20.1%",
        trend: "up",
        icon: <DollarSign className="w-5 h-5" />
      },
      {
        title: "Active Users",
        value: "2,350",
        change: "+180.1%",
        trend: "up",
        icon: <Users className="w-5 h-5" />
      },
      {
        title: "Conversion Rate",
        value: "12.5%",
        change: "+19%",
        trend: "up",
        icon: <TrendingUp className="w-5 h-5" />
      },
      {
        title: "Performance",
        value: "573ms",
        change: "-5.3%",
        trend: "down",
        icon: <Activity className="w-5 h-5" />
      }
    ]


    const recentActivity: ActivityItem[] = [
      {
        id: "1",
        type: "comment",
        title: "New comment on Project Alpha",
        description: "Sarah Johnson added a comment to the design review",
        time: "2 minutes ago",
        user: "SJ"
      },
      {
        id: "2",
        type: "file",
        title: "Document uploaded",
        description: "quarterly-report.pdf was uploaded to Documents",
        time: "15 minutes ago",
        user: "MD"
      },
      {
        id: "3",
        type: "meeting",
        title: "Meeting scheduled",
        description: "Weekly standup meeting scheduled for tomorrow 9 AM",
        time: "1 hour ago",
        user: "RW"
      },
      {
        id: "4",
        type: "task",
        title: "Task completed",
        description: "UI wireframes for mobile app completed",
        time: "2 hours ago",
        user: "AL"
      }
    ]


    export function DashboardContent() {
        const scrollRef = useRef<HTMLDivElement>(null)
        const contentRef = useRef<HTMLDivElement>(null);
        const statsCardsContainerRef = useRef<HTMLDivElement>(null);
        const featureCardsContainerRef = useRef<HTMLDivElement>(null);
        const bodyState = useAppShellStore(s => s.bodyState);
        const isInSidePane = bodyState === BODY_STATES.SIDE_PANE;
        const { showScrollToBottom, handleScroll, scrollToBottom } = useDashboardScroll(scrollRef, isInSidePane);

        useDashboardAnimations(contentRef, statsCardsContainerRef, featureCardsContainerRef);

        const getTypeIcon = (type: ActivityItem['type']) => {
          switch (type) {
            case 'comment':
              return <MessageSquare className="w-4 h-4" />
            case 'file':
              return <FileText className="w-4 h-4" />
            case 'meeting':
              return <Calendar className="w-4 h-4" />
            case 'task':
              return <Star className="w-4 h-4" />
            default:
              return <Activity className="w-4 h-4" />
          }
        }

        return (
          <PageLayout scrollRef={scrollRef} onScroll={handleScroll} ref={contentRef}>
            {/* Header */}
            {!isInSidePane && (
              <PageHeader
                title="Dashboard"
                description="Welcome to the Jeli App Shell demo! Explore all the features and customization options."
              />
            )}
              {/* Stats Cards */}
            <div ref={statsCardsContainerRef} className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6">
              {statsCards.map((stat) => (
                <StatCard
                  key={stat.title}
                  title={stat.title}
                  value={stat.value}
                  change={stat.change}
                  trend={stat.trend}
                  icon={stat.icon}
                />
              ))}
            </div>

            {/* Demo Content */}
            <DemoContent ref={featureCardsContainerRef} />

            {/* Main Content Grid */}
            <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
            {/* Chart Area */}
            <div className="lg:col-span-2 space-y-6">
              {/* Analytics Chart */}
              <Card className="p-6 border-border/50">
                <div className="flex items-center justify-between mb-6">
                  <h3 className="text-lg font-semibold">Analytics Overview</h3>
                  <button className="h-8 w-8 flex items-center justify-center hover:bg-accent rounded-full transition-colors">
                    <MoreVertical className="w-5 h-5" />
                  </button>
                </div>
                
                {/* Mock Chart */}
                <div className="h-64 bg-gradient-to-br from-primary/10 to-transparent rounded-xl flex items-center justify-center border border-border/50">
                  <div className="text-center">
                    <BarChart3 className="w-12 h-12 text-primary mx-auto mb-2" />
                    <p className="text-muted-foreground">Chart visualization would go here</p>
                  </div>
                </div>
              </Card>

              {/* Recent Projects */}
              <Card className="p-6 border-border/50">
                <div className="flex items-center justify-between mb-6">
                  <h3 className="text-lg font-semibold">Recent Projects</h3>
                  <button className="text-primary hover:text-primary/80 text-sm font-medium flex items-center gap-1">
                    View All
                    <ChevronRight className="w-4 h-4" />
                  </button>
                </div>
                
                <div className="space-y-4">
                  {[
                    { name: "E-commerce Platform", progress: 75, team: 5, deadline: "Dec 15" },
                    { name: "Mobile App Redesign", progress: 45, team: 3, deadline: "Jan 20" },
                    { name: "Marketing Website", progress: 90, team: 4, deadline: "Dec 5" }
                  ].map((project) => (
                    <div key={project.name} className="p-4 bg-accent/30 rounded-xl hover:bg-accent/50 transition-colors cursor-pointer">
                      <div className="flex items-center justify-between mb-2">
                        <h4 className="font-medium">{project.name}</h4>
                        <span className="text-sm text-muted-foreground">{project.progress}%</span>
                      </div>
                      <div className="w-full bg-muted rounded-full h-2 mb-3">
                        <div 
                          className="bg-primary h-2 rounded-full transition-all duration-500"
                          style={{ width: `${project.progress}%` }}
                        />
                      </div>
                      <div className="flex items-center justify-between text-sm text-muted-foreground">
                        <span>{project.team} team members</span>
                        <span>Due {project.deadline}</span>
                        </div>
                    </div>
                  ))}
                </div>
              </Card>
            </div>

            {/* Sidebar Content */}
            <div className="space-y-6">
              {/* Quick Actions */}
              <Card className="p-6 border-border/50">
                <h3 className="text-lg font-semibold mb-4">Quick Actions</h3>
                <div className="space-y-3">
                  {[
                    { icon: <FileText className="w-4 h-4" />, label: "Create Document", color: "bg-blue-500/10 text-blue-600" },
                    { icon: <Calendar className="w-4 h-4" />, label: "Schedule Meeting", color: "bg-green-500/10 text-green-600" },
                    { icon: <Users className="w-4 h-4" />, label: "Invite Team", color: "bg-purple-500/10 text-purple-600" },
                    { icon: <BarChart3 className="w-4 h-4" />, label: "View Reports", color: "bg-orange-500/10 text-orange-600" }
                  ].map((action) => (
                    <button
                      key={action.label}
                      className="w-full flex items-center gap-3 p-3 hover:bg-accent rounded-lg transition-colors text-left"
                    >
                      <div className={cn("p-2 rounded-full", action.color)}>
                        {action.icon}
                      </div>
                      <span className="font-medium">{action.label}</span>
                    </button>
                  ))}
                </div>
              </Card>

              {/* Recent Activity */}
              <Card className="p-6 border-border/50">
                <h3 className="text-lg font-semibold mb-4">Recent Activity</h3>
                <div className="space-y-4">
                  {recentActivity.map((activity) => (
                    <div key={activity.id} className="flex items-start gap-3 p-3 hover:bg-accent/30 rounded-xl transition-colors cursor-pointer">
                      <div className="p-2 bg-primary/10 rounded-full flex-shrink-0">
                        {getTypeIcon(activity.type)}
                      </div>
                      <div className="flex-1 min-w-0">
                        <h4 className="font-medium text-sm mb-1">{activity.title}</h4>
                        <p className="text-xs text-muted-foreground mb-2">{activity.description}</p>
                        <div className="flex items-center gap-2 text-xs text-muted-foreground">
                          <Clock className="w-3 h-3" />
                          <span>{activity.time}</span>
                          <div className="w-5 h-5 bg-primary rounded-full flex items-center justify-center text-primary-foreground text-xs font-medium">
                            {activity.user}
                          </div>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </Card>
            </div>
          </div>
          {showScrollToBottom && (
            <button
              onClick={scrollToBottom}
              className="fixed bottom-8 right-8 w-12 h-12 bg-primary text-primary-foreground rounded-full flex items-center justify-center shadow-lg hover:bg-primary/90 transition-all animate-fade-in z-[51]"
              style={{ animation: 'bounce 2s infinite' }}
              title="Scroll to bottom"
            >
              <ArrowDown className="w-6 h-6" />
            </button>
          )}
          </PageLayout>
        )
    }
  src/pages/DataDemo/index.tsx: >
    import { useRef, useEffect, useCallback } from 'react'

    import {
      Layers, 
      AlertTriangle, 
      PlayCircle, 
      TrendingUp,
      Loader2,
      ChevronsUpDown
    } from 'lucide-react'

    import { gsap } from 'gsap'

    import { cn } from '@/lib/utils'

    import { Button } from '@/components/ui/button'

    import { 
      DropdownMenu, 
      DropdownMenuContent, 
      DropdownMenuRadioGroup, 
      DropdownMenuRadioItem, 
      DropdownMenuTrigger 
    } from '@/components/ui/dropdown-menu'

    import { PageLayout } from '@/components/shared/PageLayout'

    import { DataListView } from './components/DataListView'

    import { DataCardView } from './components/DataCardView'

    import { DataTableView } from './components/DataTableView'

    import { DataViewModeSelector } from './components/DataViewModeSelector'

    import { AnimatedTabs } from '@/components/ui/animated-tabs'

    import { StatCard } from '@/components/shared/StatCard'

    import { AnimatedLoadingSkeleton } from
    './components/AnimatedLoadingSkeleton'

    import { DataToolbar } from './components/DataToolbar'

    import { mockDataItems } from './data/mockData'

    import type { GroupableField } from './types'

    import { useAppViewManager } from '@/hooks/useAppViewManager.hook'

    import { 
      useDataDemoStore,
      useGroupTabs,
      useDataToRender,
    } from './store/dataDemo.store'


    type Stat = {
      title: string;
      value: string;
      icon: React.ReactNode;
      change: string;
      trend: 'up' | 'down';
      type?: 'card';
    };


    type ChartStat = {
      title: string;
      value: string;
      icon: React.ReactNode;
      change: string;
      trend: 'up' | 'down';
      type: 'chart';
      chartData: number[];
    };


    type StatItem = Stat | ChartStat;


    function DataDemoContent() {
      const {
        viewMode,
        groupBy,
        activeGroupTab,
        setGroupBy,
        setActiveGroupTab,
        page,
        filters,
        sortConfig,
        setPage,
      } = useAppViewManager();

      const { hasMore, isLoading, isInitialLoading, totalItemCount, loadData } = useDataDemoStore(state => ({
        hasMore: state.hasMore,
        isLoading: state.isLoading,
        isInitialLoading: state.isInitialLoading,
        totalItemCount: state.totalItemCount,
        loadData: state.loadData,
      }));

      const groupTabs = useGroupTabs(groupBy, activeGroupTab);
      const dataToRender = useDataToRender(groupBy, activeGroupTab);

      const groupOptions: { id: GroupableField | 'none'; label: string }[] = [
        { id: 'none', label: 'None' }, { id: 'status', label: 'Status' }, { id: 'priority', label: 'Priority' }, { id: 'category', label: 'Category' }
      ]
      const statsRef = useRef<HTMLDivElement>(null)

      // Calculate stats from data
      const totalItems = mockDataItems.length
      const activeItems = mockDataItems.filter(item => item.status === 'active').length
      const highPriorityItems = mockDataItems.filter(item => item.priority === 'high' || item.priority === 'critical').length
      const avgCompletion = totalItems > 0 ? Math.round(
        mockDataItems.reduce((acc, item) => acc + item.metrics.completion, 0) / totalItems
      ) : 0

      const stats: StatItem[] = [
        {
          title: "Total Projects",
          value: totalItems.toString(),
          icon: <Layers className="w-5 h-5" />,
          change: "+5.2% this month",
          trend: "up" as const,
          type: 'chart',
          chartData: [120, 125, 122, 130, 135, 138, 142]
        },
        {
          title: "Active Projects",
          value: activeItems.toString(),
          icon: <PlayCircle className="w-5 h-5" />,
          change: "+2 this week", 
          trend: "up" as const,
          type: 'chart',
          chartData: [45, 50, 48, 55, 53, 60, 58]
        },
        {
          title: "High Priority",
          value: highPriorityItems.toString(),
          icon: <AlertTriangle className="w-5 h-5" />,
          change: "-1 from last week",
          trend: "down" as const,
          type: 'chart',
          chartData: [25, 26, 28, 27, 26, 24, 23]
        },
        {
          title: "Avg. Completion",
          value: `${avgCompletion}%`,
          icon: <TrendingUp className="w-5 h-5" />,
          change: "+3.2%",
          trend: "up" as const,
          type: 'chart',
          chartData: [65, 68, 70, 69, 72, 75, 78]
        }
      ]

      useEffect(() => {
        // Animate stats cards in
        if (!isInitialLoading && statsRef.current) {
          gsap.fromTo(statsRef.current.children,
            { y: 30, opacity: 0 },
            {
              duration: 0.6,
              y: 0,
              opacity: 1,
              stagger: 0.1,
              ease: "power2.out"
            }
          )
        }
      }, [isInitialLoading]);

      useEffect(() => {
        loadData({ page, groupBy, filters, sortConfig });
      }, [page, groupBy, filters, sortConfig, loadData]);

      const observer = useRef<IntersectionObserver>();
      const loaderRef = useCallback(
        (node: Element | null) => {
          if (isLoading) return;
          if (observer.current) observer.current.disconnect();

          observer.current = new IntersectionObserver((entries) => {
            if (entries[0].isIntersecting && hasMore) {
              setPage(page + 1);
            }
          });
          if (node) observer.current.observe(node);
        },
        [isLoading, hasMore, page, setPage],
      );

      return (
        <PageLayout
          // Note: Search functionality is handled by a separate SearchBar in the TopBar
        >
          <div className="space-y-8">
            {/* Header */}
            <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-4">
              <div className="flex-1">
                <h1 className="text-2xl font-bold tracking-tight">Data Showcase</h1>
                <p className="text-muted-foreground">
                  {isInitialLoading 
                    ? "Loading projects..." 
                    : `Showing ${dataToRender.length} of ${totalItemCount} item(s)`}
                </p>
              </div>
              <DataViewModeSelector />
            </div>

            {/* Stats Section */}
            {!isInitialLoading && (
              <div ref={statsRef} className="grid grid-cols-[repeat(auto-fit,minmax(250px,1fr))] gap-6">
                {stats.map((stat) => (
                  <StatCard
                    key={stat.title}
                    title={stat.title}
                    value={stat.value}
                    change={stat.change}
                    trend={stat.trend}
                    icon={stat.icon}
                    chartData={stat.type === 'chart' ? stat.chartData : undefined}
                  />
                ))}
              </div>
            )}

            {/* Controls Area */}
            <div className="space-y-6">
              <DataToolbar />
            </div>

            {/* Group by and Tabs section */}
            <div className={cn(
              "flex items-center justify-between gap-4",
              groupBy !== 'none' && "border-b"
            )}>
              {/* Tabs on the left, takes up available space */}
              {groupBy !== 'none' && groupTabs.length > 1 ? (
                <AnimatedTabs
                  tabs={groupTabs}
                  activeTab={activeGroupTab}
                  onTabChange={setActiveGroupTab}
                  className="flex-grow"
                />
              ) : (
                <div className="h-[68px] flex-grow" /> // Placeholder for consistent height.
              )}
              
              {/* Group by dropdown on the right */}
              <div className="flex items-center gap-2 shrink-0">
                <span className="text-sm font-medium text-muted-foreground shrink-0">Group by:</span>
                <DropdownMenu>
                  <DropdownMenuTrigger asChild>
                    <Button variant="outline" className="w-[180px] justify-between">
                      {groupOptions.find(o => o.id === groupBy)?.label}
                      <ChevronsUpDown className="ml-2 h-4 w-4 shrink-0 opacity-50" />
                    </Button>
                  </DropdownMenuTrigger>
                  <DropdownMenuContent className="w-[180px]">
                    <DropdownMenuRadioGroup value={groupBy} onValueChange={setGroupBy}>
                      {groupOptions.map(option => (
                        <DropdownMenuRadioItem key={option.id} value={option.id}>
                          {option.label}
                        </DropdownMenuRadioItem>
                      ))}
                    </DropdownMenuRadioGroup>
                  </DropdownMenuContent>
                </DropdownMenu>
              </div>
            </div>

            <div className="min-h-[500px]">
              {isInitialLoading ? <AnimatedLoadingSkeleton viewMode={viewMode} /> : (
                <div>
                  {viewMode === 'table' ? <DataTableView /> : (
                    <>
                      {viewMode === 'list' && <DataListView />}
                      {viewMode === 'cards' && <DataCardView />}
                      {viewMode === 'grid' && <DataCardView isGrid />}
                    </>
                  )}
                </div>
              )}
            </div>

            {/* Loader for infinite scroll */}
            <div ref={loaderRef} className="flex justify-center items-center py-6">
              {isLoading && !isInitialLoading && groupBy === 'none' && (
                <div className="flex items-center gap-2 text-muted-foreground">
                  <Loader2 className="w-5 h-5 animate-spin" />
                  <span>Loading more...</span>
                </div>
              )}
              {!isLoading && !hasMore && dataToRender.length > 0 && !isInitialLoading && groupBy === 'none' && (
                <p className="text-muted-foreground">You've reached the end.</p>
              )}
            </div>
          </div>
        </PageLayout>
      )
    }


    export default function DataDemoPage() {
      return <DataDemoContent />;
    }
approved: true
linesAdded: null
linesRemoved: null
linesDifference: null
gitCommittedAt: null
status: committed
id: 370
