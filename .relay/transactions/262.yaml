uuid: c32c51b7-a068-450f-a494-b295f1345d1f
projectId: jeli-app-shell
createdAt: '2025-10-14T02:08:18.574Z'
gitCommitMsg: >-
  refactor(DataDemo): Atomize data display components for DRYness

  Extracted repetitive UI elements from `DataCardView`, `DataListView`,
  `DataTableView`, and `DataDetailPanel` into a new set of shared, atomic
  components in `DataItemParts.tsx`.

  - Created components for `AssigneeInfo`, `ItemMetrics`, `ItemProgressBar`,
  `ItemStatusBadge`, `ItemPriorityBadge`, `ItemTags`, and `ItemDateInfo`. -
  Replaced duplicated JSX in all data views with these new components. - This
  significantly reduces code duplication, enforces UI consistency, and improves
  maintainability across the data showcase feature.
promptSummary: >-
  I have executed Part 1 of the refactoring plan to make the codebase more DRY.
  This involved creating atomic components for displaying data item parts and
  then refactoring the various data views (card, list, table, detail) to use
  these new shared components.
reasoning:
  - >-
    Executing Part 1: Atomizing the data display components to eliminate
    repetition.
  - '### Step 1: Create Shared Data Item Components'
  - >-
    First, I'll create a new file,
    `src/pages/DataDemo/components/shared/DataItemParts.tsx`, to house all the
    small, reusable components that will be shared across the different data
    views. These components will handle rendering specific parts of a data item,
    such as assignee info, metrics, and progress bars.
  - '### Step 2: Refactor Data View Components'
  - >-
    Now I'll refactor the existing view components (`DataCardView`,
    `DataListView`, `DataTableView`, `DataDetailPanel`) to use these new,
    smaller components. This will dramatically reduce code duplication and
    centralize the presentation logic.
  - '#### Refactoring `DataCardView.tsx`'
  - '#### Refactoring `DataListView.tsx`'
  - '#### Refactoring `DataTableView.tsx`'
  - '#### Refactoring `DataDetailPanel.tsx`'
  - >-
    Lastly, I'll create a new `DataDetailActions` component to further clean up
    the detail panel. This wasn't explicitly in the plan but is a logical
    extension of atomizing the UI.
  - >-
    This completes Part 1. I have created a set of shared components and
    refactored the main data views to use them, significantly reducing code
    duplication and improving maintainability.
  - YAML block will be added at the end.
operations:
  - type: write
    path: src/pages/DataDemo/components/shared/DataItemParts.tsx
    content: >-
      import React from 'react';

      import { cn } from '@/lib/utils';

      import { Badge } from '@/components/ui/badge';

      import { Avatar } from '@/components/ui/avatar';

      import { getStatusColor, getPriorityColor } from '../../utils';

      import { Eye, Heart, Share, Calendar, Tag } from 'lucide-react';

      import type { DataItem } from '../../types';


      // Assignee Info

      export const AssigneeInfo: React.FC<{
        assignee: DataItem['assignee'];
        className?: string;
        avatarClassName?: string;
      }> = ({ assignee, className, avatarClassName }) => (
        <div className={cn('flex items-center gap-3', className)}>
          <Avatar className={cn('w-8 h-8 text-sm', avatarClassName)}>
            {assignee.avatar}
          </Avatar>
          <div className="flex-1 min-w-0">
            <p className="text-sm font-medium truncate">{assignee.name}</p>
            {assignee.email && (
              <p className="text-xs text-muted-foreground truncate">
                {assignee.email}
              </p>
            )}
          </div>
        </div>
      );


      // Metrics

      export const ItemMetrics: React.FC<{ metrics: DataItem['metrics'] }> = ({
      metrics }) => (
        <div className="flex items-center gap-4 text-xs text-muted-foreground">
          <div className="flex items-center gap-1">
            <Eye className="w-3 h-3" />
            {metrics.views}
          </div>
          <div className="flex items-center gap-1">
            <Heart className="w-3 h-3" />
            {metrics.likes}
          </div>
          <div className="flex items-center gap-1">
            <Share className="w-3 h-3" />
            {metrics.shares}
          </div>
        </div>
      );


      // Progress Bar

      export const ItemProgressBar: React.FC<{ completion: number, showLabel?:
      boolean }> = ({ completion, showLabel = true }) => (
        <div>
          {showLabel && (
            <div className="flex items-center justify-between mb-2">
              <span className="text-xs text-muted-foreground">Progress</span>
              <span className="text-xs font-semibold">{completion}%</span>
            </div>
          )}
          <div className="w-full bg-muted rounded-full h-2">
            <div
              className="bg-gradient-to-r from-primary to-primary/80 h-2 rounded-full transition-all duration-700 ease-out"
              style={{ width: `${completion}%` }}
            />
          </div>
        </div>
      );



      // Status Badge

      export const ItemStatusBadge: React.FC<{ status: DataItem['status'] }> =
      ({ status }) => (
        <Badge variant="outline" className={getStatusColor(status)}>
          {status}
        </Badge>
      );


      // Priority Badge

      export const ItemPriorityBadge: React.FC<{ priority: DataItem['priority']
      }> = ({ priority }) => (
        <Badge variant="outline" className={getPriorityColor(priority)}>
          {priority}
        </Badge>
      );


      // Tags

      export const ItemTags: React.FC<{ tags: DataItem['tags'] }> = ({ tags })
      => (
        <div className="flex items-center gap-1">
          <Tag className="w-3 h-3 text-muted-foreground shrink-0" />
          <div className="flex flex-wrap gap-1">
            {tags.slice(0, 3).map((tag) => (
              <span key={tag} className="text-xs text-muted-foreground bg-muted/50 px-2 py-1 rounded-md">
                {tag}
              </span>
            ))}
            {tags.length > 3 && (
              <span className="text-xs text-muted-foreground">
                +{tags.length - 3}
              </span>
            )}
          </div>
        </div>
      );


      // Date Info

      export const ItemDateInfo: React.FC<{ date: string }> = ({ date }) => (
        <div className="flex items-center gap-1 text-xs text-muted-foreground">
          <Calendar className="w-3 h-3" />
          {new Date(date).toLocaleDateString()}
        </div>
      );
    patchStrategy: replace
  - type: write
    path: src/pages/DataDemo/components/DataCardView.tsx
    content: >+
      --- src/pages/DataDemo/components/DataCardView.tsx

      +++ src/pages/DataDemo/components/DataCardView.tsx

      @@ -1,11 +1,18 @@
       import { useRef } from 'react'
       import { cn } from '@/lib/utils'
       import { Badge } from '@/components/ui/badge'
      -import { Avatar } from '@/components/ui/avatar'

      -import { Calendar, Eye, Heart, Share, ArrowUpRight, Tag } from
      'lucide-react'

      +import { ArrowUpRight } from 'lucide-react'
       import type { ViewProps } from '../types'
      -import { getStatusColor } from '../utils'
       import { useIncrementalStaggeredAnimation } from '@/hooks/useStaggeredAnimation.motion.hook'
       import { EmptyState } from './EmptyState'
      +import {

      +  AssigneeInfo,

      +  ItemMetrics,

      +  ItemProgressBar,

      +  ItemStatusBadge,

      +  ItemTags,

      +  ItemDateInfo,

      +} from './shared/DataItemParts'
       
       export function DataCardView({ data, onItemSelect, selectedItem, isGrid = false }: ViewProps) {
         const containerRef = useRef<HTMLDivElement>(null)
      @@ -70,72 +77,22 @@
       
                     {/* Status and Category */}
                     <div className="flex items-center gap-2 mb-4">
      -                <Badge variant="outline"
      className={getStatusColor(item.status)}>

      -                  {item.status}

      -                </Badge>

      +                <ItemStatusBadge status={item.status} />
                       <Badge variant="outline" className="bg-accent/50 text-xs">
                         {item.category}
                       </Badge>
                     </div>
       
                     {/* Tags */}
      -              <div className="flex items-center gap-1 mb-4">

      -                <Tag className="w-3 h-3 text-muted-foreground" />

      -                <div className="flex flex-wrap gap-1">

      -                  {item.tags.slice(0, 3).map((tag, index) => (

      -                    <span key={index} className="text-xs
      text-muted-foreground bg-muted/50 px-2 py-1 rounded-md">

      -                      {tag}

      -                    </span>

      -                  ))}

      -                  {item.tags.length > 3 && (

      -                    <span className="text-xs text-muted-foreground">

      -                      +{item.tags.length - 3}

      -                    </span>

      -                  )}

      -                </div>

      -              </div>

      +              <div className="mb-4"><ItemTags tags={item.tags} /></div>
       
                     {/* Progress */}
      -              <div className="mb-4">

      -                <div className="flex items-center justify-between mb-2">

      -                  <span className="text-xs
      text-muted-foreground">Progress</span>

      -                  <span className="text-xs
      font-semibold">{item.metrics.completion}%</span>

      -                </div>

      -                <div className="w-full bg-muted rounded-full h-2">

      -                  <div 

      -                    className="bg-gradient-to-r from-primary
      to-primary/80 h-2 rounded-full transition-all duration-700 ease-out"

      -                    style={{ width: `${item.metrics.completion}%` }}

      -                  />

      -                </div>

      -              </div>

      +              <div className="mb-4"><ItemProgressBar
      completion={item.metrics.completion} /></div>
       
                     {/* Assignee */}
      -              <div className="flex items-center gap-3 mb-4">

      -                <Avatar className="w-8 h-8 text-sm">

      -                  {item.assignee.avatar}

      -                </Avatar>

      -                <div className="flex-1 min-w-0">

      -                  <p className="text-sm font-medium truncate">

      -                    {item.assignee.name}

      -                  </p>

      -                  <p className="text-xs text-muted-foreground truncate">

      -                    {item.assignee.email}

      -                  </p>

      -                </div>

      -              </div>

      +              <div className="mb-4"><AssigneeInfo
      assignee={item.assignee} /></div>
       
                     {/* Metrics */}
                     <div className="flex items-center justify-between text-xs text-muted-foreground">
      -                <div className="flex items-center gap-3">

      -                  <div className="flex items-center gap-1">

      -                    <Eye className="w-3 h-3" />

      -                    {item.metrics.views}

      -                  </div>

      -                  <div className="flex items-center gap-1">

      -                    <Heart className="w-3 h-3" />

      -                    {item.metrics.likes}

      -                  </div>

      -                  <div className="flex items-center gap-1">

      -                    <Share className="w-3 h-3" />

      -                    {item.metrics.shares}

      -                  </div>

      -                </div>

      -                <div className="flex items-center gap-1">

      -                  <Calendar className="w-3 h-3" />

      -                  {new Date(item.updatedAt).toLocaleDateString()}

      -                </div>

      +                <ItemMetrics metrics={item.metrics} />

      +                <ItemDateInfo date={item.updatedAt} />
                     </div>
                   </div>
       

    patchStrategy: standard-diff
  - type: write
    path: src/pages/DataDemo/components/DataListView.tsx
    content: >+
      --- src/pages/DataDemo/components/DataListView.tsx

      +++ src/pages/DataDemo/components/DataListView.tsx

      @@ -2,11 +2,17 @@
       import { cn } from '@/lib/utils'
       import { Badge } from '@/components/ui/badge'
      -import { Avatar } from '@/components/ui/avatar'

      -import { Calendar, Eye, Heart, Share, ArrowRight } from 'lucide-react'

      +import { ArrowRight } from 'lucide-react'
       import type { ViewProps } from '../types'
      -import { getStatusColor, getPriorityColor } from '../utils';
       import { useIncrementalStaggeredAnimation } from '@/hooks/useStaggeredAnimation.motion.hook'
       import { EmptyState } from './EmptyState'
      +import {

      +  AssigneeInfo,

      +  ItemMetrics,

      +  ItemProgressBar,

      +  ItemStatusBadge,

      +  ItemPriorityBadge,

      +  ItemDateInfo,

      +} from './shared/DataItemParts'
       
       export function DataListView({ data, onItemSelect, selectedItem }: ViewProps) {
         const listRef = useRef<HTMLDivElement>(null)
      @@ -53,60 +59,26 @@
       
                         {/* Badges */}
                         <div className="flex items-center gap-2 mb-4">
      -                    <Badge variant="outline"
      className={getStatusColor(item.status)}>

      -                      {item.status}

      -                    </Badge>

      -                    <Badge variant="outline"
      className={getPriorityColor(item.priority)}>

      -                      {item.priority}

      -                    </Badge>

      +                    <ItemStatusBadge status={item.status} />

      +                    <ItemPriorityBadge priority={item.priority} />
                           <Badge variant="outline" className="bg-accent/50">
                             {item.category}
                           </Badge>
                         </div>
       
                         {/* Meta info */}
      -                  <div className="flex items-center justify-between">

      +                  <div className="flex items-center justify-between
      text-muted-foreground">
                           <div className="flex items-center gap-4">
                             {/* Assignee */}
      -                      <div className="flex items-center gap-2">

      -                        <Avatar className="w-7 h-7 text-sm">

      -                          {item.assignee.avatar}

      -                        </Avatar>

      -                        <span className="text-sm text-muted-foreground
      font-medium">

      -                          {item.assignee.name}

      -                        </span>

      -                      </div>

      -

      +                      <AssigneeInfo assignee={item.assignee}
      avatarClassName="w-7 h-7" />
                             {/* Date */}
      -                      <div className="flex items-center gap-1 text-xs
      text-muted-foreground">

      -                        <Calendar className="w-3 h-3" />

      -                        {new Date(item.updatedAt).toLocaleDateString()}

      -                      </div>

      +                      <ItemDateInfo date={item.updatedAt} />
                           </div>
       
                           {/* Metrics */}
      -                    <div className="flex items-center gap-4 text-xs
      text-muted-foreground">

      -                      <div className="flex items-center gap-1">

      -                        <Eye className="w-3 h-3" />

      -                        {item.metrics.views}

      -                      </div>

      -                      <div className="flex items-center gap-1">

      -                        <Heart className="w-3 h-3" />

      -                        {item.metrics.likes}

      -                      </div>

      -                      <div className="flex items-center gap-1">

      -                        <Share className="w-3 h-3" />

      -                        {item.metrics.shares}

      -                      </div>

      -                    </div>

      +                    <ItemMetrics metrics={item.metrics} />
                         </div>
       
                         {/* Progress bar */}
      -                  <div className="mt-4">

      -                    <div className="flex items-center justify-between
      mb-2">

      -                      <span className="text-xs
      text-muted-foreground">Progress</span>

      -                      <span className="text-xs
      font-medium">{item.metrics.completion}%</span>

      -                    </div>

      -                    <div className="w-full bg-muted rounded-full h-1.5">

      -                      <div 

      -                        className="bg-gradient-to-r from-primary
      to-primary/80 h-1.5 rounded-full transition-all duration-500 ease-out"

      -                        style={{ width: `${item.metrics.completion}%` }}

      -                      />

      -                    </div>

      -                  </div>

      +                  <div className="mt-4"><ItemProgressBar
      completion={item.metrics.completion} /></div>
                       </div>
                     </div>
                   </div>

    patchStrategy: standard-diff
  - type: write
    path: src/pages/DataDemo/components/DataTableView.tsx
    content: >+
      --- src/pages/DataDemo/components/DataTableView.tsx

      +++ src/pages/DataDemo/components/DataTableView.tsx

      @@ -2,22 +2,22 @@
       import { gsap } from 'gsap'
       import { cn } from '@/lib/utils'
      -import { Badge } from '@/components/ui/badge'

      -import { Avatar } from '@/components/ui/avatar'
       import { 
      -  Calendar, 

      -  Eye, 

      -  Heart, 

      -  Share, 
         ArrowUpDown, 
         ArrowUp, 
         ArrowDown,
         ExternalLink
       } from 'lucide-react'
       import type { ViewProps, DataItem, SortableField } from '../types'
      -import { getStatusColor, getPriorityColor } from '../utils'
       import { EmptyState } from './EmptyState'
       import { capitalize } from '@/lib/utils'
      +import {

      +  AssigneeInfo,

      +  ItemMetrics,

      +  ItemStatusBadge,

      +  ItemPriorityBadge,

      +  ItemDateInfo,

      +} from './shared/DataItemParts'
       
       export function DataTableView({ data, onItemSelect, selectedItem, sortConfig, onSort }: ViewProps) {
         const tableRef = useRef<HTMLTableElement>(null)
      @@ -176,33 +176,22 @@
       
             {/* Status Column */}
             <td className="p-4">
      -        <Badge variant="outline" className={getStatusColor(item.status)}>

      -          {item.status}

      -        </Badge>

      +        <ItemStatusBadge status={item.status} />
             </td>
       
             {/* Priority Column */}
             <td className="p-4">
      -        <Badge variant="outline"
      className={getPriorityColor(item.priority)}>

      -          {item.priority}

      -        </Badge>

      +        <ItemPriorityBadge priority={item.priority} />
             </td>
       
             {/* Assignee Column */}
             <td className="p-4">
      -        <div className="flex items-center gap-2">

      -          <Avatar className="w-8 h-8 text-sm">

      -            {item.assignee.avatar}

      -          </Avatar>

      -          <div className="min-w-0">

      -            <p className="text-sm font-medium truncate">

      -              {item.assignee.name}

      -            </p>

      -          </div>

      -        </div>

      +        <AssigneeInfo assignee={item.assignee} />
             </td>
       
             {/* Progress Column */}
      +      {/* Note: This progress bar is custom for the table, so we don't
      use the shared component here. */}
             <td className="p-4">
               <div className="flex items-center gap-3">
                 <div className="flex-1 min-w-0">
      @@ -220,29 +209,12 @@
       
             {/* Engagement Column */}
             <td className="p-4">
      -        <div className="flex items-center gap-4 text-xs
      text-muted-foreground">

      -          <div className="flex items-center gap-1">

      -            <Eye className="w-3 h-3" />

      -            {item.metrics.views}

      -          </div>

      -          <div className="flex items-center gap-1">

      -            <Heart className="w-3 h-3" />

      -            {item.metrics.likes}

      -          </div>

      -          <div className="flex items-center gap-1">

      -            <Share className="w-3 h-3" />

      -            {item.metrics.shares}

      -          </div>

      -        </div>

      +        <ItemMetrics metrics={item.metrics} />
             </td>
       
             {/* Date Column */}
             <td className="p-4">
      -        <div className="flex items-center gap-1 text-sm
      text-muted-foreground">

      -          <Calendar className="w-3 h-3" />

      -          {new Date(item.updatedAt).toLocaleDateString()}

      -        </div>

      +        <ItemDateInfo date={item.updatedAt} />
             </td>
       
             {/* Actions Column */}

    patchStrategy: standard-diff
  - type: write
    path: src/pages/DataDemo/components/DataDetailPanel.tsx
    content: >+
      --- src/pages/DataDemo/components/DataDetailPanel.tsx

      +++ src/pages/DataDemo/components/DataDetailPanel.tsx

      @@ -2,8 +2,6 @@
       import { Badge } from '@/components/ui/badge'
       import { Avatar } from '@/components/ui/avatar'
       import { Button } from '@/components/ui/button'
       import { 
      -  ArrowLeft,

      -  Calendar, 

      +  ArrowLeft, 
         Clock, 
         Eye, 
         Heart, 
      @@ -13,7 +11,6 @@
         Image,
         Video,
         File,
      -  ExternalLink,
         Tag,
         User,
         BarChart3,
      @@ -21,11 +18,18 @@
         CheckCircle,
         AlertCircle,
         Circle
      -} from 'lucide-react' 

      +} from 'lucide-react'
       import type { DataItem } from '../types'
       import { useStaggeredAnimation } from '@/hooks/useStaggeredAnimation.motion.hook'
      -import { getStatusColor, getPriorityColor } from '../utils'

      -

      +import {

      +  AssigneeInfo,

      +  ItemMetrics,

      +  ItemProgressBar,

      +  ItemStatusBadge,

      +  ItemPriorityBadge,

      +  ItemTags,

      +} from './shared/DataItemParts'

      +import { DataDetailActions } from './DataDetailActions'
       interface DataDetailPanelProps {
         item: DataItem | null
         onClose: () => void
      @@ -82,30 +86,18 @@
       
               {/* Status badges */}
               <div className="flex items-center gap-2 mb-4">
      -          <Badge variant="outline"
      className={getStatusColor(item.status)}>

      +          <Badge variant="outline">
                   {React.createElement(getStatusIcon(item.status), { className: "w-3 h-3 mr-1" })}
                   {item.status}
                 </Badge>
      -          <Badge variant="outline"
      className={getPriorityColor(item.priority)}>

      -            {item.priority}

      -          </Badge>

      +          <ItemPriorityBadge priority={item.priority} />
                 <Badge variant="outline" className="bg-accent/50">
                   {item.category}
                 </Badge>
               </div>
       
               {/* Progress */}
      -        <div className="space-y-2">

      -          <div className="flex items-center justify-between">

      -            <span className="text-sm font-medium">Progress</span>

      -            <span className="text-sm
      font-bold">{item.metrics.completion}%</span>

      -          </div>

      -          <div className="w-full bg-muted rounded-full h-3">

      -            <div 

      -              className="bg-gradient-to-r from-primary to-primary/80 h-3
      rounded-full transition-all duration-1000 ease-out"

      -              style={{ width: `${item.metrics.completion}%` }}

      -            />

      -          </div>

      -        </div>

      +        <ItemProgressBar completion={item.metrics.completion} />
             </div>
       
             {/* Content */}
      @@ -116,15 +108,7 @@
                     <User className="w-4 h-4 text-muted-foreground" />
                     <h3 className="font-semibold text-sm">Assigned to</h3>
                   </div>
      -            <div className="flex items-center gap-3">

      -              <Avatar className="w-12 h-12">

      -                {item.assignee.avatar}

      -              </Avatar>

      -              <div>

      -                <p className="font-medium">{item.assignee.name}</p>

      -                <p className="text-sm
      text-muted-foreground">{item.assignee.email}</p>

      -              </div>

      -            </div>

      +            <AssigneeInfo assignee={item.assignee} avatarClassName="w-12
      h-12" />
                 </div>
       
                 {/* Metrics */}
      @@ -134,24 +118,7 @@
                   </div>
                   <div className="grid grid-cols-[repeat(auto-fit,minmax(80px,1fr))] gap-4">
                     <div className="text-center">
      -                <div className="flex items-center justify-center gap-1
      mb-1">

      -                  <Eye className="w-4 h-4 text-blue-500" />

      -                </div>

      -                <p className="text-2xl
      font-bold">{item.metrics.views}</p>

      -                <p className="text-xs text-muted-foreground">Views</p>

      -              </div>

      -              <div className="text-center">

      -                <div className="flex items-center justify-center gap-1
      mb-1">

      -                  <Heart className="w-4 h-4 text-red-500" />

      -                </div>

      -                <p className="text-2xl
      font-bold">{item.metrics.likes}</p>

      -                <p className="text-xs text-muted-foreground">Likes</p>

      -              </div>

      -              <div className="text-center">

      -                <div className="flex items-center justify-center gap-1
      mb-1">

      -                  <Share className="w-4 h-4 text-green-500" />

      -                </div>

      -                <p className="text-2xl
      font-bold">{item.metrics.shares}</p>

      +                <p className="text-2xl font-bold">{item.metrics.views +
      item.metrics.likes + item.metrics.shares}</p>
                       <p className="text-xs text-muted-foreground">Shares</p>
                     </div>
                   </div>
      @@ -162,15 +129,7 @@
                     <Tag className="w-4 h-4 text-muted-foreground" />
                     <h3 className="font-semibold text-sm">Tags</h3>
                   </div>
      -            <div className="flex flex-wrap gap-2">

      -              {item.tags.map((tag, index) => (

      -                <span

      -                  key={index}

      -                  className="bg-muted/50 text-muted-foreground px-3 py-1
      rounded-full text-xs font-medium"

      -                >

      -                  {tag}

      -                </span>

      -              ))}

      -            </div>

      +            <ItemTags tags={item.tags} />
                 </div>
       
                 {/* Content Details */}
      @@ -233,7 +192,7 @@
                   </div>
                   <div className="space-y-3">
                     <div className="flex items-center gap-2 text-sm">
      -                <Calendar className="w-3 h-3 text-muted-foreground" />

      +                <Clock className="w-3 h-3 text-muted-foreground" />
                       <span className="text-muted-foreground">Created:</span>
                       <span className="font-medium">
                         {new Date(item.createdAt).toLocaleDateString('en-US', {
      @@ -269,16 +228,7 @@
       
             {/* Footer Actions */}
             <div className="p-6 border-t border-border/50 bg-card/30">
      -        <div className="flex gap-3">

      -          <Button className="flex-1" size="sm">

      -            <ExternalLink className="w-4 h-4 mr-2" />

      -            Open Project

      -          </Button>

      -          <Button variant="outline" size="sm">

      -            <Share className="w-4 h-4 mr-2" />

      -            Share

      -          </Button>

      -        </div>

      +        <DataDetailActions />
             </div>
           </div>
         )
       }

    patchStrategy: standard-diff
  - type: write
    path: src/pages/DataDemo/components/DataDetailActions.tsx
    content: |-
      import { Button } from '@/components/ui/button';
      import { ExternalLink, Share } from 'lucide-react';

      export function DataDetailActions() {
          return (
              <div className="flex gap-3">
                <Button className="flex-1" size="sm">
                  <ExternalLink className="w-4 h-4 mr-2" />
                  Open Project
                </Button>
                <Button variant="outline" size="sm">
                  <Share className="w-4 h-4 mr-2" />
                  Share
                </Button>
              </div>
          )
      }
    patchStrategy: replace
snapshot:
  src/pages/DataDemo/components/shared/DataItemParts.tsx: null
  src/pages/DataDemo/components/DataDetailActions.tsx: null
  src/pages/DataDemo/components/DataCardView.tsx: >-
    import { useRef } from 'react'

    import { cn } from '@/lib/utils'

    import { Badge } from '@/components/ui/badge'

    import { Avatar } from '@/components/ui/avatar'

    import { Calendar, Eye, Heart, Share, ArrowUpRight, Tag } from
    'lucide-react'

    import type { ViewProps } from '../types'

    import { getStatusColor } from '../utils'

    import { useIncrementalStaggeredAnimation } from
    '@/hooks/useStaggeredAnimation.motion.hook'

    import { EmptyState } from './EmptyState'


    export function DataCardView({ data, onItemSelect, selectedItem, isGrid =
    false }: ViewProps) {
      const containerRef = useRef<HTMLDivElement>(null)
      useIncrementalStaggeredAnimation(containerRef, [data], { y: 40 });

      if (data.length === 0) {
        return <EmptyState />
      }

      return (
        <div 
          ref={containerRef}
          className={cn(
            "gap-6",
            isGrid
              ? "grid grid-cols-[repeat(auto-fit,minmax(280px,1fr))]"
              : "grid grid-cols-[repeat(auto-fit,minmax(320px,1fr))]"
          )}
        >
          {data.map((item) => {
            const isSelected = selectedItem?.id === item.id
            
            return (
              <div
                key={item.id}
                onClick={() => onItemSelect(item)}
                className={cn(
                  "group relative overflow-hidden rounded-3xl border bg-card/50 backdrop-blur-sm transition-all duration-500 cursor-pointer",
                  "hover:bg-card/80 hover:shadow-xl hover:shadow-primary/10 hover:border-primary/30 hover:-translate-y-2",
                  "active:scale-[0.98]",
                  isSelected && "ring-2 ring-primary/30 border-primary/40 bg-card/90 shadow-lg shadow-primary/20",
                )}
              >
                {/* Card Header with Thumbnail */}
                <div className="relative p-6 pb-4">
                  <div className="flex items-start justify-between mb-4">
                    <div className="w-16 h-16 bg-gradient-to-br from-primary/20 to-primary/10 rounded-2xl flex items-center justify-center text-3xl group-hover:scale-110 transition-transform duration-300">
                      {item.thumbnail}
                    </div>
                    <ArrowUpRight className="w-5 h-5 text-muted-foreground group-hover:text-primary group-hover:translate-x-1 group-hover:-translate-y-1 transition-all duration-300" />
                  </div>

                  {/* Priority indicator */}
                  <div className="absolute top-4 right-4">
                    <div className={cn(
                      "w-3 h-3 rounded-full",
                      item.priority === 'critical' && "bg-red-500",
                      item.priority === 'high' && "bg-orange-500",
                      item.priority === 'medium' && "bg-blue-500",
                      item.priority === 'low' && "bg-green-500"
                    )} />
                  </div>
                </div>

                {/* Card Content */}
                <div className="px-6 pb-6">
                  {/* Title and Description */}
                  <h3 className="font-semibold text-lg mb-2 group-hover:text-primary transition-colors line-clamp-2">
                    {item.title}
                  </h3>
                  <p className="text-muted-foreground text-sm mb-4 line-clamp-3">
                    {item.description}
                  </p>

                  {/* Status and Category */}
                  <div className="flex items-center gap-2 mb-4">
                    <Badge variant="outline" className={getStatusColor(item.status)}>
                      {item.status}
                    </Badge>
                    <Badge variant="outline" className="bg-accent/50 text-xs">
                      {item.category}
                    </Badge>
                  </div>

                  {/* Tags */}
                  <div className="flex items-center gap-1 mb-4">
                    <Tag className="w-3 h-3 text-muted-foreground" />
                    <div className="flex flex-wrap gap-1">
                      {item.tags.slice(0, 3).map((tag, index) => (
                        <span key={index} className="text-xs text-muted-foreground bg-muted/50 px-2 py-1 rounded-md">
                          {tag}
                        </span>
                      ))}
                      {item.tags.length > 3 && (
                        <span className="text-xs text-muted-foreground">
                          +{item.tags.length - 3}
                        </span>
                      )}
                    </div>
                  </div>

                  {/* Progress */}
                  <div className="mb-4">
                    <div className="flex items-center justify-between mb-2">
                      <span className="text-xs text-muted-foreground">Progress</span>
                      <span className="text-xs font-semibold">{item.metrics.completion}%</span>
                    </div>
                    <div className="w-full bg-muted rounded-full h-2">
                      <div 
                        className="bg-gradient-to-r from-primary to-primary/80 h-2 rounded-full transition-all duration-700 ease-out"
                        style={{ width: `${item.metrics.completion}%` }}
                      />
                    </div>
                  </div>

                  {/* Assignee */}
                  <div className="flex items-center gap-3 mb-4">
                    <Avatar className="w-8 h-8 text-sm">
                      {item.assignee.avatar}
                    </Avatar>
                    <div className="flex-1 min-w-0">
                      <p className="text-sm font-medium truncate">
                        {item.assignee.name}
                      </p>
                      <p className="text-xs text-muted-foreground truncate">
                        {item.assignee.email}
                      </p>
                    </div>
                  </div>

                  {/* Metrics */}
                  <div className="flex items-center justify-between text-xs text-muted-foreground">
                    <div className="flex items-center gap-3">
                      <div className="flex items-center gap-1">
                        <Eye className="w-3 h-3" />
                        {item.metrics.views}
                      </div>
                      <div className="flex items-center gap-1">
                        <Heart className="w-3 h-3" />
                        {item.metrics.likes}
                      </div>
                      <div className="flex items-center gap-1">
                        <Share className="w-3 h-3" />
                        {item.metrics.shares}
                      </div>
                    </div>
                    <div className="flex items-center gap-1">
                      <Calendar className="w-3 h-3" />
                      {new Date(item.updatedAt).toLocaleDateString()}
                    </div>
                  </div>
                </div>

                {/* Hover gradient overlay */}
                <div className="absolute inset-0 bg-gradient-to-br from-primary/5 via-transparent to-primary/5 opacity-0 group-hover:opacity-100 transition-opacity duration-500 pointer-events-none" />
                
                {/* Selection indicator */}
                {isSelected && (
                  <div className="absolute inset-0 bg-gradient-to-br from-primary/10 to-primary/5 pointer-events-none" />
                )}
              </div>
            )
          })}
        </div>
      )
    }
  src/pages/DataDemo/components/DataTableView.tsx: >-
    import { useRef, useLayoutEffect } from 'react'

    import { gsap } from 'gsap'

    import { cn } from '@/lib/utils'

    import { Badge } from '@/components/ui/badge'

    import { Avatar } from '@/components/ui/avatar'

    import { 
      Calendar, 
      Eye, 
      Heart, 
      Share, 
      ArrowUpDown, 
      ArrowUp, 
      ArrowDown,
      ExternalLink
    } from 'lucide-react'

    import type { ViewProps, DataItem, SortableField } from '../types'

    import { getStatusColor, getPriorityColor } from '../utils'

    import { EmptyState } from './EmptyState'

    import { capitalize } from '@/lib/utils'


    export function DataTableView({ data, onItemSelect, selectedItem,
    sortConfig, onSort }: ViewProps) {
      const tableRef = useRef<HTMLTableElement>(null)
      const animatedItemsCount = useRef(0)

      useLayoutEffect(() => {
        if (tableRef.current) {
          // Only select item rows for animation, not group headers
          const newItems = Array.from( 
            tableRef.current.querySelectorAll('tbody tr')
          ).filter(tr => !tr.dataset.groupHeader)
           .slice(animatedItemsCount.current);
          gsap.fromTo(newItems,
            { y: 20, opacity: 0 },
            {
              duration: 0.5,
              y: 0,
              opacity: 1,
              stagger: 0.05,
              ease: "power2.out",
            },
          );
          animatedItemsCount.current = Array.isArray(data) 
            ? data.length 
            : Object.values(data).reduce((sum, items) => sum + items.length, 0);
        }
      }, [data]);

      const SortIcon = ({ field }: { field: SortableField }) => {
        if (sortConfig?.key !== field) {
          return <ArrowUpDown className="w-4 h-4 opacity-50" />
        }
        if (sortConfig.direction === 'asc') {
          return <ArrowUp className="w-4 h-4 text-primary" />
        }
        if (sortConfig.direction === 'desc') {
          return <ArrowDown className="w-4 h-4 text-primary" />
        }
        return <ArrowUpDown className="w-4 h-4 opacity-50" />
      }

      const handleSortClick = (field: SortableField) => {
        onSort?.(field)
      }

      if ((Array.isArray(data) && data.length === 0) || (!Array.isArray(data) && Object.keys(data).length === 0)) {
        return <EmptyState />
      }

      return (
        <div className="relative overflow-hidden rounded-2xl border bg-card/50 backdrop-blur-sm">
          <div className="overflow-x-auto">
            <table ref={tableRef} className="w-full">
              <thead>
                <tr className="border-b border-border/50 bg-muted/20">
                  <th className="text-left p-4 font-semibold text-sm">
                    <button
                      onClick={() => handleSortClick('title')}
                      className="flex items-center gap-2 hover:text-primary transition-colors"
                    >
                      Project
                      <SortIcon field="title" />
                    </button>
                  </th>
                  <th className="text-left p-4 font-semibold text-sm">
                    <button
                      onClick={() => handleSortClick('status')}
                      className="flex items-center gap-2 hover:text-primary transition-colors"
                    >
                      Status
                      <SortIcon field="status" />
                    </button>
                  </th>
                  <th className="text-left p-4 font-semibold text-sm">
                    <button
                      onClick={() => handleSortClick('priority')}
                      className="flex items-center gap-2 hover:text-primary transition-colors"
                    >
                      Priority
                      <SortIcon field="priority" />
                    </button>
                  </th>
                  <th className="text-left p-4 font-semibold text-sm">
                    <button
                      onClick={() => handleSortClick('assignee.name')}
                      className="flex items-center gap-2 hover:text-primary transition-colors"
                    >
                      Assignee
                      <SortIcon field="assignee.name" />
                    </button>
                  </th>
                  <th className="text-left p-4 font-semibold text-sm">
                    <button
                      onClick={() => handleSortClick('metrics.completion')}
                      className="flex items-center gap-2 hover:text-primary transition-colors"
                    >
                      Progress
                      <SortIcon field="metrics.completion" />
                    </button>
                  </th>
                  <th className="text-left p-4 font-semibold text-sm">
                    <button
                      onClick={() => handleSortClick('metrics.views')}
                      className="flex items-center gap-2 hover:text-primary transition-colors"
                    >
                      Engagement
                      <SortIcon field="metrics.views" />
                    </button>
                  </th>
                  <th className="text-left p-4 font-semibold text-sm">Last Updated</th>
                  <th className="text-center p-4 font-semibold text-sm w-16">Actions</th>
                </tr>
              </thead>
              <tbody>
                {Array.isArray(data)
                  ? data.map(item => <TableRow key={item.id} item={item} isSelected={selectedItem?.id === item.id} onItemSelect={onItemSelect} />)
                  : Object.entries(data).flatMap(([groupName, items]) => [
                      <tr key={groupName} data-group-header="true" className="sticky top-0 z-10">
                        <td colSpan={8} className="p-2 bg-muted/50 backdrop-blur-sm">
                          <div className="flex items-center gap-2">
                            <h3 className="font-semibold text-sm">{capitalize(groupName)}</h3>
                            <span className="text-xs px-2 py-0.5 bg-background rounded-full font-medium">{items.length}</span>
                          </div>
                        </td>
                      </tr>,
                      ...items.map(item => <TableRow key={item.id} item={item} isSelected={selectedItem?.id === item.id} onItemSelect={onItemSelect} />)
                    ])
                }
              </tbody>
            </table>
          </div>
        </div>
      )
    }


    function TableRow({ item, isSelected, onItemSelect }: { item: DataItem;
    isSelected: boolean; onItemSelect: (item: DataItem) => void }) {
      return (
        <tr
          onClick={() => onItemSelect(item)}
          className={cn(
            "group border-b border-border/30 transition-all duration-200 cursor-pointer",
            "hover:bg-accent/20 hover:border-primary/20",
            isSelected && "bg-primary/5 border-primary/30"
          )}
        >
          {/* Project Column */}
          <td className="p-4">
            <div className="flex items-center gap-3">
              <div className="w-10 h-10 bg-gradient-to-br from-primary/20 to-primary/10 rounded-lg flex items-center justify-center text-lg flex-shrink-0">
                {item.thumbnail}
              </div>
              <div className="min-w-0 flex-1">
                <h4 className="font-medium group-hover:text-primary transition-colors truncate">
                  {item.title}
                </h4>
                <p className="text-sm text-muted-foreground truncate">
                  {item.category}
                </p>
              </div>
            </div>
          </td>

          {/* Status Column */}
          <td className="p-4">
            <Badge variant="outline" className={getStatusColor(item.status)}>
              {item.status}
            </Badge>
          </td>

          {/* Priority Column */}
          <td className="p-4">
            <Badge variant="outline" className={getPriorityColor(item.priority)}>
              {item.priority}
            </Badge>
          </td>

          {/* Assignee Column */}
          <td className="p-4">
            <div className="flex items-center gap-2">
              <Avatar className="w-8 h-8 text-sm">
                {item.assignee.avatar}
              </Avatar>
              <div className="min-w-0">
                <p className="text-sm font-medium truncate">
                  {item.assignee.name}
                </p>
              </div>
            </div>
          </td>

          {/* Progress Column */}
          <td className="p-4">
            <div className="flex items-center gap-3">
              <div className="flex-1 min-w-0">
                <div className="w-full bg-muted rounded-full h-2">
                  <div 
                    className="bg-gradient-to-r from-primary to-primary/80 h-2 rounded-full transition-all duration-500"
                    style={{ width: `${item.metrics.completion}%` }}
                  />
                </div>
              </div>
              <span className="text-sm font-medium text-muted-foreground">
                {item.metrics.completion}%
              </span>
            </div>
          </td>

          {/* Engagement Column */}
          <td className="p-4">
            <div className="flex items-center gap-4 text-xs text-muted-foreground">
              <div className="flex items-center gap-1">
                <Eye className="w-3 h-3" />
                {item.metrics.views}
              </div>
              <div className="flex items-center gap-1">
                <Heart className="w-3 h-3" />
                {item.metrics.likes}
              </div>
              <div className="flex items-center gap-1">
                <Share className="w-3 h-3" />
                {item.metrics.shares}
              </div>
            </div>
          </td>

          {/* Date Column */}
          <td className="p-4">
            <div className="flex items-center gap-1 text-sm text-muted-foreground">
              <Calendar className="w-3 h-3" />
              {new Date(item.updatedAt).toLocaleDateString()}
            </div>
          </td>

          {/* Actions Column */}
          <td className="p-4">
            <button 
              onClick={(e) => {
                e.stopPropagation()
                onItemSelect(item)
              }}
              className="flex items-center justify-center w-8 h-8 rounded-lg hover:bg-accent transition-colors"
              title="View details"
            >
              <ExternalLink className="w-4 h-4" />
            </button>
          </td>
        </tr>
      )
    }
  src/pages/DataDemo/components/DataListView.tsx: >-
    import { useRef } from 'react'

    import { cn } from '@/lib/utils'

    import { Badge } from '@/components/ui/badge'

    import { Avatar } from '@/components/ui/avatar'

    import { Calendar, Eye, Heart, Share, ArrowRight } from 'lucide-react'

    import type { ViewProps } from '../types'

    import { getStatusColor, getPriorityColor } from '../utils';

    import { useIncrementalStaggeredAnimation } from
    '@/hooks/useStaggeredAnimation.motion.hook'

    import { EmptyState } from './EmptyState'


    export function DataListView({ data, onItemSelect, selectedItem }:
    ViewProps) {
      const listRef = useRef<HTMLDivElement>(null)
      useIncrementalStaggeredAnimation(listRef, [data], { scale: 1, y: 30, stagger: 0.08, duration: 0.5 });

      if (data.length === 0) {
        return <EmptyState />
      }

      return (
        <div ref={listRef} className="space-y-4">
          {data.map((item) => {
            const isSelected = selectedItem?.id === item.id
            
            return (
              <div
                key={item.id}
                onClick={() => onItemSelect(item)}
                className={cn(
                  "group relative overflow-hidden rounded-2xl border bg-card/50 backdrop-blur-sm transition-all duration-300 cursor-pointer",
                  "hover:bg-card/80 hover:shadow-lg hover:shadow-primary/5 hover:border-primary/20",
                  "active:scale-[0.99]",
                  isSelected && "ring-2 ring-primary/20 border-primary/30 bg-card/90"
                )}
              >
                <div className="p-6">
                  <div className="flex items-start gap-4">
                    {/* Thumbnail */}
                    <div className="flex-shrink-0">
                      <div className="w-14 h-14 bg-gradient-to-br from-primary/20 to-primary/10 rounded-xl flex items-center justify-center text-2xl">
                        {item.thumbnail}
                      </div>
                    </div>

                    {/* Content */}
                    <div className="flex-1 min-w-0">
                      <div className="flex items-start justify-between mb-3">
                        <div className="flex-1 min-w-0">
                          <h3 className="font-semibold text-lg mb-1 group-hover:text-primary transition-colors">
                            {item.title}
                          </h3>
                          <p className="text-muted-foreground text-sm mb-3 line-clamp-2">
                            {item.description}
                          </p>
                        </div>
                        <ArrowRight className="w-5 h-5 text-muted-foreground group-hover:text-primary group-hover:translate-x-1 transition-all duration-300 ml-4 flex-shrink-0" />
                      </div>

                      {/* Badges */}
                      <div className="flex items-center gap-2 mb-4">
                        <Badge variant="outline" className={getStatusColor(item.status)}>
                          {item.status}
                        </Badge>
                        <Badge variant="outline" className={getPriorityColor(item.priority)}>
                          {item.priority}
                        </Badge>
                        <Badge variant="outline" className="bg-accent/50">
                          {item.category}
                        </Badge>
                      </div>

                      {/* Meta info */}
                      <div className="flex items-center justify-between">
                        <div className="flex items-center gap-4">
                          {/* Assignee */}
                          <div className="flex items-center gap-2">
                            <Avatar className="w-7 h-7 text-sm">
                              {item.assignee.avatar}
                            </Avatar>
                            <span className="text-sm text-muted-foreground font-medium">
                              {item.assignee.name}
                            </span>
                          </div>

                          {/* Date */}
                          <div className="flex items-center gap-1 text-xs text-muted-foreground">
                            <Calendar className="w-3 h-3" />
                            {new Date(item.updatedAt).toLocaleDateString()}
                          </div>
                        </div>

                        {/* Metrics */}
                        <div className="flex items-center gap-4 text-xs text-muted-foreground">
                          <div className="flex items-center gap-1">
                            <Eye className="w-3 h-3" />
                            {item.metrics.views}
                          </div>
                          <div className="flex items-center gap-1">
                            <Heart className="w-3 h-3" />
                            {item.metrics.likes}
                          </div>
                          <div className="flex items-center gap-1">
                            <Share className="w-3 h-3" />
                            {item.metrics.shares}
                          </div>
                        </div>
                      </div>

                      {/* Progress bar */}
                      <div className="mt-4">
                        <div className="flex items-center justify-between mb-2">
                          <span className="text-xs text-muted-foreground">Progress</span>
                          <span className="text-xs font-medium">{item.metrics.completion}%</span>
                        </div>
                        <div className="w-full bg-muted rounded-full h-1.5">
                          <div 
                            className="bg-gradient-to-r from-primary to-primary/80 h-1.5 rounded-full transition-all duration-500 ease-out"
                            style={{ width: `${item.metrics.completion}%` }}
                          />
                        </div>
                      </div>
                    </div>
                  </div>
                </div>

                {/* Hover gradient overlay */}
                <div className="absolute inset-0 bg-gradient-to-r from-primary/5 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300 pointer-events-none" />
              </div>
            )
          })}
        </div>
      )
    }
  src/pages/DataDemo/components/DataDetailPanel.tsx: >-
    import React, { useRef } from 'react'

    import { Badge } from '@/components/ui/badge'

    import { Avatar } from '@/components/ui/avatar'

    import { Button } from '@/components/ui/button'

    import { 
      ArrowLeft,
      Calendar, 
      Clock, 
      Eye, 
      Heart, 
      Share, 
      Download,
      FileText,
      Image,
      Video,
      File,
      ExternalLink,
      Tag,
      User,
      BarChart3,
      TrendingUp,
      CheckCircle,
      AlertCircle,
      Circle
    } from 'lucide-react' 

    import type { DataItem } from '../types'

    import { useStaggeredAnimation } from
    '@/hooks/useStaggeredAnimation.motion.hook'

    import { getStatusColor, getPriorityColor } from '../utils'


    interface DataDetailPanelProps {
      item: DataItem | null
      onClose: () => void
    }


    export function DataDetailPanel({ item, onClose }: DataDetailPanelProps) {
      const contentRef = useRef<HTMLDivElement>(null)
      useStaggeredAnimation(contentRef, [item]);

      if (!item) {
        return null
      }

      const getFileIcon = (type: string) => {
        switch (type.toLowerCase()) {
          case 'pdf': return FileText
          case 'image':
          case 'png':
          case 'jpg':
          case 'jpeg': return Image
          case 'video':
          case 'mp4': return Video
          default: return File
        }
      }

      const getStatusIcon = (status: string) => {
        switch (status) {
          case 'completed': return CheckCircle
          case 'active': return Circle
          case 'pending': return AlertCircle
          default: return Circle
        }
      }

      return (
        <div ref={contentRef} className="h-full flex flex-col">
          {/* Header */}
          <div className="p-6 border-b border-border/50 bg-gradient-to-r from-card/50 to-card/30 backdrop-blur-sm">
            <Button variant="ghost" onClick={onClose} className="mb-4 -ml-4">
              <ArrowLeft className="w-4 h-4 mr-2" />
              Back to list
            </Button>
            <div className="flex items-start gap-4 mb-4">
              <div className="w-16 h-16 bg-gradient-to-br from-primary/20 to-primary/10 rounded-2xl flex items-center justify-center text-3xl flex-shrink-0">
                {item.thumbnail}
              </div>
              <div className="flex-1 min-w-0">
                <h1 className="text-2xl font-bold mb-2 leading-tight">
                  {item.title}
                </h1>
                <p className="text-muted-foreground">
                  {item.description}
                </p>
              </div>
            </div>

            {/* Status badges */}
            <div className="flex items-center gap-2 mb-4">
              <Badge variant="outline" className={getStatusColor(item.status)}>
                {React.createElement(getStatusIcon(item.status), { className: "w-3 h-3 mr-1" })}
                {item.status}
              </Badge>
              <Badge variant="outline" className={getPriorityColor(item.priority)}>
                {item.priority}
              </Badge>
              <Badge variant="outline" className="bg-accent/50">
                {item.category}
              </Badge>
            </div>

            {/* Progress */}
            <div className="space-y-2">
              <div className="flex items-center justify-between">
                <span className="text-sm font-medium">Progress</span>
                <span className="text-sm font-bold">{item.metrics.completion}%</span>
              </div>
              <div className="w-full bg-muted rounded-full h-3">
                <div 
                  className="bg-gradient-to-r from-primary to-primary/80 h-3 rounded-full transition-all duration-1000 ease-out"
                  style={{ width: `${item.metrics.completion}%` }}
                />
              </div>
            </div>
          </div>

          {/* Content */}
          <div className="flex-1 overflow-y-auto">
            <div className="p-6 space-y-6">
              {/* Assignee Info */}
              <div className="bg-card/30 rounded-2xl p-4 border border-border/30">
                <div className="flex items-center gap-1 mb-3">
                  <User className="w-4 h-4 text-muted-foreground" />
                  <h3 className="font-semibold text-sm">Assigned to</h3>
                </div>
                <div className="flex items-center gap-3">
                  <Avatar className="w-12 h-12">
                    {item.assignee.avatar}
                  </Avatar>
                  <div>
                    <p className="font-medium">{item.assignee.name}</p>
                    <p className="text-sm text-muted-foreground">{item.assignee.email}</p>
                  </div>
                </div>
              </div>

              {/* Metrics */}
              <div className="bg-card/30 rounded-2xl p-4 border border-border/30">
                <div className="flex items-center gap-1 mb-3">
                  <BarChart3 className="w-4 h-4 text-muted-foreground" />
                  <h3 className="font-semibold text-sm">Engagement Metrics</h3>
                </div>
                <div className="grid grid-cols-[repeat(auto-fit,minmax(80px,1fr))] gap-4">
                  <div className="text-center">
                    <div className="flex items-center justify-center gap-1 mb-1">
                      <Eye className="w-4 h-4 text-blue-500" />
                    </div>
                    <p className="text-2xl font-bold">{item.metrics.views}</p>
                    <p className="text-xs text-muted-foreground">Views</p>
                  </div>
                  <div className="text-center">
                    <div className="flex items-center justify-center gap-1 mb-1">
                      <Heart className="w-4 h-4 text-red-500" />
                    </div>
                    <p className="text-2xl font-bold">{item.metrics.likes}</p>
                    <p className="text-xs text-muted-foreground">Likes</p>
                  </div>
                  <div className="text-center">
                    <div className="flex items-center justify-center gap-1 mb-1">
                      <Share className="w-4 h-4 text-green-500" />
                    </div>
                    <p className="text-2xl font-bold">{item.metrics.shares}</p>
                    <p className="text-xs text-muted-foreground">Shares</p>
                  </div>
                </div>
              </div>

              {/* Tags */}
              <div className="bg-card/30 rounded-2xl p-4 border border-border/30">
                <div className="flex items-center gap-1 mb-3">
                  <Tag className="w-4 h-4 text-muted-foreground" />
                  <h3 className="font-semibold text-sm">Tags</h3>
                </div>
                <div className="flex flex-wrap gap-2">
                  {item.tags.map((tag, index) => (
                    <span
                      key={index}
                      className="bg-muted/50 text-muted-foreground px-3 py-1 rounded-full text-xs font-medium"
                    >
                      {tag}
                    </span>
                  ))}
                </div>
              </div>

              {/* Content Details */}
              {item.content && (
                <div className="bg-card/30 rounded-2xl p-4 border border-border/30">
                  <h3 className="font-semibold text-sm mb-3">Project Details</h3>
                  <div className="space-y-4">
                    <div>
                      <h4 className="font-medium text-sm mb-2">Summary</h4>
                      <p className="text-sm text-muted-foreground leading-relaxed">
                        {item.content.summary}
                      </p>
                    </div>
                    <div>
                      <h4 className="font-medium text-sm mb-2">Description</h4>
                      <p className="text-sm text-muted-foreground leading-relaxed">
                        {item.content.details}
                      </p>
                    </div>
                  </div>
                </div>
              )}

              {/* Attachments */}
              {item.content?.attachments && item.content.attachments.length > 0 && (
                <div className="bg-card/30 rounded-2xl p-4 border border-border/30">
                  <h3 className="font-semibold text-sm mb-3">Attachments</h3>
                  <div className="space-y-2">
                    {item.content.attachments.map((attachment, index) => {
                      const IconComponent = getFileIcon(attachment.type)
                      return (
                        <div
                          key={index}
                          className="flex items-center gap-3 p-3 bg-muted/30 rounded-xl hover:bg-muted/50 transition-colors cursor-pointer group"
                        >
                          <IconComponent className="w-5 h-5 text-muted-foreground" />
                          <div className="flex-1 min-w-0">
                            <p className="text-sm font-medium truncate group-hover:text-primary transition-colors">
                              {attachment.name}
                            </p>
                            <p className="text-xs text-muted-foreground">
                              {attachment.type} • {attachment.size}
                            </p>
                          </div>
                          <Button size="sm" variant="ghost" className="opacity-0 group-hover:opacity-100 transition-opacity">
                            <Download className="w-4 h-4" />
                          </Button>
                        </div>
                      )
                    })}
                  </div>
                </div>
              )}

              {/* Timeline */}
              <div className="bg-card/30 rounded-2xl p-4 border border-border/30">
                <div className="flex items-center gap-1 mb-3">
                  <Clock className="w-4 h-4 text-muted-foreground" />
                  <h3 className="font-semibold text-sm">Timeline</h3>
                </div>
                <div className="space-y-3">
                  <div className="flex items-center gap-2 text-sm">
                    <Calendar className="w-3 h-3 text-muted-foreground" />
                    <span className="text-muted-foreground">Created:</span>
                    <span className="font-medium">
                      {new Date(item.createdAt).toLocaleDateString('en-US', {
                        year: 'numeric',
                        month: 'long',
                        day: 'numeric'
                      })}
                    </span>
                  </div>
                  <div className="flex items-center gap-2 text-sm">
                    <TrendingUp className="w-3 h-3 text-muted-foreground" />
                    <span className="text-muted-foreground">Last updated:</span>
                    <span className="font-medium">
                      {new Date(item.updatedAt).toLocaleDateString('en-US', {
                        year: 'numeric',
                        month: 'long',
                        day: 'numeric'
                      })}
                    </span>
                  </div>
                  {item.dueDate && (
                    <div className="flex items-center gap-2 text-sm">
                      <AlertCircle className="w-3 h-3 text-orange-500" />
                      <span className="text-muted-foreground">Due date:</span>
                      <span className="font-medium text-orange-600">
                        {new Date(item.dueDate).toLocaleDateString('en-US', {
                          year: 'numeric',
                          month: 'long',
                          day: 'numeric'
                        })}
                      </span>
                    </div>
                  )}
                </div>
              </div>
            </div>
          </div>

          {/* Footer Actions */}
          <div className="p-6 border-t border-border/50 bg-card/30">
            <div className="flex gap-3">
              <Button className="flex-1" size="sm">
                <ExternalLink className="w-4 h-4 mr-2" />
                Open Project
              </Button>
              <Button variant="outline" size="sm">
                <Share className="w-4 h-4 mr-2" />
                Share
              </Button>
            </div>
          </div>
        </div>
      )
    }
approved: true
linesAdded: null
linesRemoved: null
linesDifference: null
gitCommittedAt: '2025-10-14T02:21:19.878Z'
status: committed
id: 262
