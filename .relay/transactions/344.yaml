uuid: b859f518-d99c-46a4-9e32-a5e2d1d227b2
projectId: jeli-app-shell
createdAt: '2025-10-16T09:46:28.036Z'
gitCommitMsg: >-
  feat(messaging): redesign TaskHeader for a premium UI

  - Replaced the flat layout with a structured, multi-section design for
  improved readability and aesthetics. - Implemented a responsive metadata grid
  for Assignee, Status, Priority, and Due Date. - Enhanced visual elements with
  better spacing, typography, and iconography. - Styled dropdown triggers as
  minimalist, integrated UI elements. - Updated assignee display to use larger
  avatars and a dedicated icon for unassigned tasks.
promptSummary: >-
  I need to rebuild the TaskHeader.tsx component to have a more premium and
  amazing UI, possibly including avatars.
reasoning:
  - >-
    I've redesigned the `TaskHeader` component to create a more premium,
    organized, and visually appealing user interface. Here's a summary of the
    changes:
  - >-
    1.  **New Layout Structure**: The header is now divided into three distinct
    sections:
  - '*   A top section for the task title and contact information.'
  - >-
    *   A full-width, visually separated middle section that organizes key
    metadata (Assignee, Status, Priority, Due Date) into a responsive grid. This
    makes the information much easier to scan.
  - >-
    *   A bottom section for tags, now prefixed with a "Tags:" label for
    clarity.
  - '2.  **Enhanced Visuals & Spacing**:'
  - >-
    *   Increased vertical spacing and cleaner alignment create a less
    cluttered, more breathable layout.
  - >-
    *   The metadata grid uses uppercase, tracked-out labels for a more
    polished, "premium" feel.
  - >-
    *   Dropdown triggers are now styled as minimalist, interactive text/icon
    elements rather than standard buttons, integrating them more seamlessly into
    the design.
  - '3.  **Improved Component Details**:'
  - >-
    *   The assignee selector now uses a larger avatar for better visibility.
    When no one is assigned, it displays a clean, designated icon.
  - >-
    *   The "Add Tag" button is more compact and visually consistent with the
    new design.
  - >-
    This refactoring transforms the task header from a simple list of properties
    into a well-structured and aesthetically pleasing dashboard element,
    fulfilling the request for an "amazing premium UI."
operations:
  - type: write
    path: src/pages/Messaging/components/TaskHeader.tsx
    content: >-
      import React from 'react';

      import { useMessagingStore } from '../store/messaging.store';

      import type { Task, TaskStatus, TaskPriority, Assignee, Contact } from
      '../types';

      import {
        DropdownMenu,
        DropdownMenuContent,
        DropdownMenuItem,
        DropdownMenuRadioGroup,
        DropdownMenuRadioItem,
        DropdownMenuTrigger,
        DropdownMenuSeparator
      } from '@/components/ui/dropdown-menu';

      import { Button } from '@/components/ui/button';

      import { Avatar, AvatarFallback, AvatarImage } from
      '@/components/ui/avatar';

      import { Inbox, Zap, Shield, Clock, Calendar, Plus, User } from
      'lucide-react';

      import { Badge } from '@/components/ui/badge';

      import { format } from 'date-fns';


      const statusOptions: { value: TaskStatus; label: string; icon:
      React.ReactNode }[] = [
          { value: 'open', label: 'Open', icon: <Inbox className="w-4 h-4" /> },
          { value: 'in-progress', label: 'In Progress', icon: <Zap className="w-4 h-4" /> },
          { value: 'done', label: 'Done', icon: <Shield className="w-4 h-4" /> },
          { value: 'snoozed', label: 'Snoozed', icon: <Clock className="w-4 h-4" /> },
      ];


      const priorityOptions: { value: TaskPriority; label: string; icon:
      React.ReactNode }[] = [
          { value: 'high', label: 'High', icon: <div className="w-2.5 h-2.5 rounded-full bg-red-500" /> },
          { value: 'medium', label: 'Medium', icon: <div className="w-2.5 h-2.5 rounded-full bg-yellow-500" /> },
          { value: 'low', label: 'Low', icon: <div className="w-2.5 h-2.5 rounded-full bg-green-500" /> },
          { value: 'none', label: 'None', icon: <div className="w-2.5 h-2.5 rounded-full bg-gray-400" /> },
      ];



      interface TaskHeaderProps {
        task: (Task & { contact: Contact; assignee: Assignee | null });
      }


      export const TaskHeader: React.FC<TaskHeaderProps> = ({ task }) => {
        const { updateTask, assignees } = useMessagingStore();
        const currentStatus = statusOptions.find(o => o.value === task.status);
        const currentPriority = priorityOptions.find(o => o.value === task.priority);

        return (
          <div className="space-y-6">
            {/* Task Title & Contact */}
            <div className="flex items-start justify-between gap-4">
              <div className="space-y-1 overflow-hidden">
                  <h2 className="font-bold text-xl lg:text-2xl truncate" title={task.title}>
                    {task.title}
                  </h2>
                  <p className="text-sm text-muted-foreground">
                    With <a href="#" className="hover:underline font-medium text-foreground/80">{task.contact.name}</a>
                    <span className="mx-1.5">&middot;</span>
                    via <span className="capitalize font-medium text-foreground/80">{task.channel}</span>
                  </p>
              </div>
              {/* Can add action buttons here in the future */}
            </div>

            {/* Properties Grid */}
            <div className="grid grid-cols-2 md:grid-cols-4 gap-x-6 gap-y-4 border-t border-b py-4 -mx-6 px-6 bg-background/50">
              {/* Assignee */}
              <div className="space-y-1.5">
                  <p className="text-xs font-semibold uppercase text-muted-foreground tracking-wider">Assignee</p>
                  <DropdownMenu>
                    <DropdownMenuTrigger asChild>
                      <Button variant="ghost" className="h-auto p-0 font-normal text-sm -ml-1 flex items-center gap-2 text-left w-full justify-start">
                        {task.assignee ? (
                          <Avatar className="h-6 w-6"><AvatarImage src={task.assignee.avatar} /><AvatarFallback>{task.assignee.name.charAt(0)}</AvatarFallback></Avatar>
                        ) : (
                          <div className="w-6 h-6 rounded-full bg-muted flex items-center justify-center"><User className="h-4 w-4 text-muted-foreground" /></div>
                        )}
                        <span className="font-medium truncate">{task.assignee?.name || 'Unassigned'}</span>
                      </Button>
                    </DropdownMenuTrigger>
                    <DropdownMenuContent align="start">
                      <DropdownMenuRadioGroup value={task.assigneeId || 'null'} onValueChange={val => updateTask(task.id, { assigneeId: val === 'null' ? null : val })}>
                        <DropdownMenuRadioItem value="null">
                          <User className="w-4 h-4 mr-2 text-muted-foreground" /> Unassigned
                        </DropdownMenuRadioItem>
                        <DropdownMenuSeparator />
                        {assignees.map(a => (
                          <DropdownMenuRadioItem key={a.id} value={a.id}>
                            <Avatar className="h-5 w-5 mr-2"><AvatarImage src={a.avatar} /><AvatarFallback>{a.name.charAt(0)}</AvatarFallback></Avatar>
                            {a.name}
                          </DropdownMenuRadioItem>
                        ))}
                      </DropdownMenuRadioGroup>
                    </DropdownMenuContent>
                  </DropdownMenu>
              </div>

              {/* Status */}
              <div className="space-y-1.5">
                  <p className="text-xs font-semibold uppercase text-muted-foreground tracking-wider">Status</p>
                  <DropdownMenu>
                    <DropdownMenuTrigger asChild>
                      <Button variant="ghost" className="h-auto p-0 font-normal text-sm -ml-1 flex items-center gap-2">
                        <span className="w-6 h-6 flex items-center justify-center">{currentStatus?.icon}</span>
                        <span className="font-medium">{currentStatus?.label}</span>
                      </Button>
                    </DropdownMenuTrigger>
                    <DropdownMenuContent align="start">
                      {statusOptions.map(o => (
                        <DropdownMenuItem key={o.value} onClick={() => updateTask(task.id, { status: o.value })}>
                          <div className="flex items-center">
                            <div className="w-4 h-4 mr-2">{o.icon}</div>
                            <span>{o.label}</span>
                          </div>
                        </DropdownMenuItem>
                      ))}
                    </DropdownMenuContent>
                  </DropdownMenu>
              </div>
              
              {/* Priority */}
              <div className="space-y-1.5">
                  <p className="text-xs font-semibold uppercase text-muted-foreground tracking-wider">Priority</p>
                  <DropdownMenu>
                    <DropdownMenuTrigger asChild>
                      <Button variant="ghost" className="h-auto p-0 font-normal text-sm -ml-1 flex items-center gap-2">
                          <span className="w-6 h-6 flex items-center justify-center">{currentPriority?.icon}</span>
                          <span className="font-medium">{currentPriority?.label}</span>
                      </Button>
                    </DropdownMenuTrigger>
                    <DropdownMenuContent align="start">
                      {priorityOptions.map(o => (
                        <DropdownMenuItem key={o.value} onClick={() => updateTask(task.id, { priority: o.value })}>
                          <div className="flex items-center">
                            <div className="w-2.5 h-2.5 mr-2">{o.icon}</div>
                            <span>{o.label}</span>
                          </div>
                        </DropdownMenuItem>
                      ))}
                    </DropdownMenuContent>
                  </DropdownMenu>
              </div>

              {/* Due Date */}
              <div className="space-y-1.5">
                  <p className="text-xs font-semibold uppercase text-muted-foreground tracking-wider">Due Date</p>
                  <Button variant="ghost" className="h-auto p-0 font-normal text-sm -ml-1 flex items-center gap-2 cursor-default" disabled>
                      <span className="w-6 h-6 flex items-center justify-center"><Calendar className="w-4 h-4" /></span>
                      <span className="font-medium">{task.dueDate ? format(new Date(task.dueDate), 'MMM d, yyyy') : 'No date'}</span>
                  </Button>
              </div>
            </div>

            {/* Tags */}
            <div className="flex flex-wrap items-center gap-2">
              <p className="text-sm font-medium text-muted-foreground mr-2">Tags:</p>
              {task.tags.map(t => <Badge variant="secondary" key={t}>{t}</Badge>)}
              <Button variant="outline" size="sm" className="h-7 px-2 text-xs rounded-md border-dashed">
                <Plus className="w-3 h-3 mr-1" /> Add
              </Button>
            </div>
          </div>
        );
      };
    patchStrategy: replace
snapshot:
  src/pages/Messaging/components/TaskHeader.tsx: >
    import React from 'react';

    import { useMessagingStore } from '../store/messaging.store';

    import type { Task, TaskStatus, TaskPriority, Assignee, Contact } from
    '../types';

    import {
      DropdownMenu,
      DropdownMenuContent,
      DropdownMenuItem,
      DropdownMenuRadioGroup,
      DropdownMenuRadioItem,
      DropdownMenuTrigger,
      DropdownMenuSeparator
    } from '@/components/ui/dropdown-menu';

    import { Button } from '@/components/ui/button';

    import { Avatar, AvatarFallback, AvatarImage } from
    '@/components/ui/avatar';

    import { ChevronDown, Inbox, Zap, Shield, Clock, Calendar, Plus, User } from
    'lucide-react';

    import { Badge } from '@/components/ui/badge';

    import { format } from 'date-fns';


    const statusOptions: { value: TaskStatus; label: string; icon:
    React.ReactNode }[] = [
        { value: 'open', label: 'Open', icon: <Inbox className="w-4 h-4" /> },
        { value: 'in-progress', label: 'In Progress', icon: <Zap className="w-4 h-4" /> },
        { value: 'done', label: 'Done', icon: <Shield className="w-4 h-4" /> },
        { value: 'snoozed', label: 'Snoozed', icon: <Clock className="w-4 h-4" /> },
    ];


    const priorityOptions: { value: TaskPriority; label: string; icon:
    React.ReactNode }[] = [
        { value: 'high', label: 'High', icon: <div className="w-2.5 h-2.5 rounded-full bg-red-500" /> },
        { value: 'medium', label: 'Medium', icon: <div className="w-2.5 h-2.5 rounded-full bg-yellow-500" /> },
        { value: 'low', label: 'Low', icon: <div className="w-2.5 h-2.5 rounded-full bg-green-500" /> },
        { value: 'none', label: 'None', icon: <div className="w-2.5 h-2.5 rounded-full bg-gray-400" /> },
    ];



    interface TaskHeaderProps {
      task: (Task & { contact: Contact; assignee: Assignee | null });
    }


    export const TaskHeader: React.FC<TaskHeaderProps> = ({ task }) => {
      const { updateTask, assignees } = useMessagingStore();
      const currentStatus = statusOptions.find(o => o.value === task.status);
      const currentPriority = priorityOptions.find(o => o.value === task.priority);

      return (
        <div className="space-y-4">
          {/* Task Title & Contact */}
          <div className="overflow-hidden">
            <h2 className="font-bold text-xl lg:text-2xl truncate" title={task.title}>
              {task.title}
            </h2>
            <p className="text-sm text-muted-foreground">
              With <a href="#" className="hover:underline font-medium text-foreground/80">{task.contact.name}</a>
              <span className="mx-1.5">&middot;</span>
              via <span className="capitalize font-medium text-foreground/80">{task.channel}</span>
            </p>
          </div>

          {/* Properties Bar */}
          <div className="flex flex-wrap items-center gap-y-2 text-sm">
            {/* Assignee Dropdown */}
            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <Button variant="outline" size="sm" className="gap-2 font-normal">
                  {task.assignee ? (
                    <Avatar className="h-5 w-5"><AvatarImage src={task.assignee.avatar} /><AvatarFallback>{task.assignee.name.charAt(0)}</AvatarFallback></Avatar>
                  ) : (
                    <User className="h-4 w-4 text-muted-foreground" />
                  )}
                  <span className="font-medium">{task.assignee?.name || 'Unassigned'}</span>
                  <ChevronDown className="w-3 h-3 text-muted-foreground" />
                </Button>
              </DropdownMenuTrigger>
              <DropdownMenuContent align="start">
                <DropdownMenuRadioGroup value={task.assigneeId || 'null'} onValueChange={val => updateTask(task.id, { assigneeId: val === 'null' ? null : val })}>
                  <DropdownMenuRadioItem value="null">
                    <User className="w-4 h-4 mr-2 text-muted-foreground" /> Unassigned
                  </DropdownMenuRadioItem>
                  <DropdownMenuSeparator />
                  {assignees.map(a => (
                    <DropdownMenuRadioItem key={a.id} value={a.id}>
                      <Avatar className="h-5 w-5 mr-2"><AvatarImage src={a.avatar} /><AvatarFallback>{a.name.charAt(0)}</AvatarFallback></Avatar>
                      {a.name}
                    </DropdownMenuRadioItem>
                  ))}
                </DropdownMenuRadioGroup>
              </DropdownMenuContent>
            </DropdownMenu>

            <div className="mx-2 h-4 w-px bg-border" />

            {/* Status Dropdown */}
            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <Button variant="ghost" size="sm" className="gap-2 text-muted-foreground hover:text-foreground">
                  {currentStatus?.icon}
                  <span className="font-medium text-foreground">{currentStatus?.label}</span>
                </Button>
              </DropdownMenuTrigger>
              <DropdownMenuContent align="start">
                {statusOptions.map(o => (
                  <DropdownMenuItem key={o.value} onClick={() => updateTask(task.id, { status: o.value })}>
                    <div className="flex items-center">
                      <div className="w-4 h-4 mr-2">{o.icon}</div>
                      <span>{o.label}</span>
                    </div>
                  </DropdownMenuItem>
                ))}
              </DropdownMenuContent>
            </DropdownMenu>
            
            <div className="mx-2 h-4 w-px bg-border" />
            
            {/* Priority Dropdown */}
            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <Button variant="ghost" size="sm" className="gap-2 text-muted-foreground hover:text-foreground">
                  {currentPriority?.icon}
                  <span className="font-medium text-foreground">{currentPriority?.label}</span>
                </Button>
              </DropdownMenuTrigger>
              <DropdownMenuContent align="start">
                {priorityOptions.map(o => (
                  <DropdownMenuItem key={o.value} onClick={() => updateTask(task.id, { priority: o.value })}>
                    <div className="flex items-center">
                      <div className="w-2.5 h-2.5 mr-2">{o.icon}</div>
                      <span>{o.label}</span>
                    </div>
                  </DropdownMenuItem>
                ))}
              </DropdownMenuContent>
            </DropdownMenu>

            <div className="mx-2 h-4 w-px bg-border" />

            {/* Due Date - for display, could be a popover trigger */}
            <Button variant="ghost" size="sm" className="gap-2 text-muted-foreground cursor-default" disabled>
                <Calendar className="w-4 h-4" />
                <span className="font-medium text-foreground">{task.dueDate ? format(new Date(task.dueDate), 'MMM d, yyyy') : 'No due date'}</span>
            </Button>
          </div>

          {/* Tags */}
          <div className="flex flex-wrap items-center gap-2">
            {task.tags.map(t => <Badge variant="secondary" key={t}>{t}</Badge>)}
            <Button variant="outline" size="sm" className="h-7 px-2 text-xs rounded-md border-dashed">
              <Plus className="w-3 h-3 mr-1" /> Tag
            </Button>
          </div>
        </div>
      );
    };
approved: false
linesAdded: null
linesRemoved: null
linesDifference: null
gitCommittedAt: null
status: undone
id: 344
