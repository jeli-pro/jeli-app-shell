uuid: a75c83d1-e6d7-4638-9842-1e92d634d28e
projectId: jeli-app-shell
createdAt: '2025-10-21T03:11:56.326Z'
gitCommitMsg: >-
  fix(runtime): provide context to DetailPanel in side pane

  The application was crashing when opening the item detail panel because it was
  rendered outside the scope of the `DynamicViewProvider` on the main page. This
  meant the child `FieldRenderer` components could not access the required
  context via the `useDynamicView` hook.

  This commit resolves the issue by wrapping the `DetailPanel` in its own
  `DynamicViewProvider` within the `useRightPaneContent` hook. This ensures the
  component has the necessary context to render correctly when displayed in the
  application's side panel.
promptSummary: >-
  The user encountered a React context error (`useDynamicView must be used
  within a DynamicViewProvider`) because the `DetailPanel` was being rendered in
  a sidebar outside the main page's context provider. The fix involves wrapping
  the `DetailPanel` instance within its own `DynamicViewProvider` inside the
  `useRightPaneContent` hook to ensure it and its children have access to the
  required context.
reasoning:
  - >-
    Ah, an excellent catch. That's a classic React context error. You're right,
    the `DetailPanel` and its child `FieldRenderer` components are being
    rendered in the right-hand sidebar, which is outside the scope of the
    `DynamicViewProvider` that wraps the main content of the `DataDemoPage`.
  - >-
    The `FieldRenderer` uses the `useDynamicView` hook, which requires an
    ancestor `DynamicViewProvider` to be present. When we open the detail panel,
    it's rendered in a part of the component tree that doesn't have one, causing
    the crash.
  - >-
    The solution is to provide a `DynamicViewProvider` specifically for the
    `DetailPanel` when it's rendered in the sidebar. This ensures that it and
    all its children have access to the necessary context. It's a clean,
    localized fix that doesn't require refactoring all the other view
    components.
  - 'Here is the change for `useRightPaneContent.hook.tsx`:'
  - >-
    This change wraps the `DetailPanel` with its own `DynamicViewProvider`,
    supplying it with the same configuration and data that the main page uses.
    This immediately resolves the context error and allows the panel to render
    correctly, wherever it appears in the application.
operations:
  - type: write
    path: src/hooks/useRightPaneContent.hook.tsx
    content: >+
      --- src/hooks/useRightPaneContent.hook.tsx

      +++ src/hooks/useRightPaneContent.hook.tsx

      @@ -9,12 +9,13 @@
         Share,
       } from 'lucide-react';
       
      +import { DynamicViewProvider } from
      '@/features/dynamic-view/DynamicViewContext';
       import { Button } from '@/components/ui/button';
       import { DashboardContent } from "@/pages/Dashboard";
       import { SettingsContent } from "@/features/settings/SettingsContent";
       import { ToasterDemo } from "@/pages/ToasterDemo";
       import { NotificationsPage } from "@/pages/Notifications";
       import DataDemoPage from "@/pages/DataDemo/index";
       import { DetailPanel } from '@/features/dynamic-view/components/shared/DetailPanel';
       import { dataDemoViewConfig } from '@/pages/DataDemo/DataDemo.config';
       import { mockDataItems } from "@/pages/DataDemo/data/mockData";
      @@ -75,25 +76,27 @@
           if (sidePaneContent === 'dataItem' && selectedItem) {
             return {
               meta: { title: "Item Details", icon: Database, page: `data-demo/${itemId}` },
               content: (
      -          <div className="h-full flex flex-col">

      -            <div className="flex-1 overflow-y-auto custom-scrollbar">

      -              <DetailPanel item={selectedItem}
      config={dataDemoViewConfig} />

      -            </div>

      -            {/* Application-specific actions can be composed here */}

      -            <div className="p-6 border-t border-border/50 bg-card/30">

      -              <div className="flex gap-3">

      -                <Button className="flex-1" size="sm">

      -                  <ExternalLink className="w-4 h-4 mr-2" />

      -                  Open Project

      -                </Button>

      -                <Button variant="outline" size="sm">

      -                  <Share className="w-4 h-4 mr-2" />

      -                  Share

      -                </Button>

      +          <DynamicViewProvider viewConfig={dataDemoViewConfig}
      data={mockDataItems}>

      +            <div className="h-full flex flex-col">

      +              <div className="flex-1 overflow-y-auto custom-scrollbar">

      +                <DetailPanel item={selectedItem}
      config={dataDemoViewConfig} />

      +              </div>

      +              {/* Application-specific actions can be composed here */}

      +              <div className="p-6 border-t border-border/50 bg-card/30">

      +                <div className="flex gap-3">

      +                  <Button className="flex-1" size="sm">

      +                    <ExternalLink className="w-4 h-4 mr-2" />

      +                    Open Project

      +                  </Button>

      +                  <Button variant="outline" size="sm">

      +                    <Share className="w-4 h-4 mr-2" />

      +                    Share

      +                  </Button>

      +                </div>
                     </div>
                   </div>
      -          </div>

      +          </DynamicViewProvider>
               ),
             };
           }

    patchStrategy: standard-diff
snapshot:
  src/hooks/useRightPaneContent.hook.tsx: >-
    import { useMemo } from 'react';

    import { useParams } from 'react-router-dom';

    import {
      LayoutDashboard,
      Settings,
      Component,
      Bell,
      SlidersHorizontal,
      Database,
      MessageSquare,
      ExternalLink,
      Share,
    } from 'lucide-react';


    import { Button } from '@/components/ui/button';

    import { DashboardContent } from "@/pages/Dashboard";

    import { SettingsContent } from "@/features/settings/SettingsContent";

    import { ToasterDemo } from "@/pages/ToasterDemo";

    import { NotificationsPage } from "@/pages/Notifications";

    import DataDemoPage from "@/pages/DataDemo/index";

    import { DetailPanel } from
    '@/features/dynamic-view/components/shared/DetailPanel';

    import { dataDemoViewConfig } from '@/pages/DataDemo/DataDemo.config';

    import { mockDataItems } from "@/pages/DataDemo/data/mockData";

    import { MessagingContent } from
    "@/pages/Messaging/components/MessagingContent";

    import type { AppShellState } from '@/store/appShell.store';


    export function useRightPaneContent(sidePaneContent:
    AppShellState['sidePaneContent']) {
      const { itemId, conversationId } = useParams<{ itemId: string; conversationId: string }>();

      const staticContentMap = useMemo(() => ({
        main: {
          title: "Dashboard",
          icon: LayoutDashboard,
          page: "dashboard",
          content: <DashboardContent />,
        },
        settings: {
          title: "Settings",
          icon: Settings,
          page: "settings",
          content: <div className="p-6"><SettingsContent /></div>,
        },
        toaster: {
          title: "Toaster Demo",
          icon: Component,
          page: "toaster",
          content: <ToasterDemo />,
        },
        notifications: {
          title: "Notifications",
          icon: Bell,
          page: "notifications",
          content: <NotificationsPage />,
        },
        dataDemo: {
          title: "Data Showcase",
          icon: Database,
          page: "data-demo",
          content: <DataDemoPage />,
        },
        details: {
          title: "Details Panel",
          icon: SlidersHorizontal,
          content: (
            <div className="p-6">
              <p className="text-muted-foreground">
                This is the side pane. It can be used to display contextual
                information, forms, or actions related to the main content.
              </p>
            </div>
          ),
        },
      }), []);

      const contentMap = useMemo(() => ({
        ...staticContentMap,
        messaging: {
          title: "Conversation",
          icon: MessageSquare,
          page: "messaging",
          content: <MessagingContent conversationId={conversationId} />,
        },
      }), [conversationId, staticContentMap]);

      const selectedItem = useMemo(() => {
        if (!itemId) return null;
        return mockDataItems.find(item => item.id === itemId) ?? null;
      }, [itemId]);

      const { meta, content } = useMemo(() => {
        if (sidePaneContent === 'dataItem' && selectedItem) {
          return {
            meta: { title: "Item Details", icon: Database, page: `data-demo/${itemId}` },
            content: (
              <div className="h-full flex flex-col">
                <div className="flex-1 overflow-y-auto custom-scrollbar">
                  <DetailPanel item={selectedItem} config={dataDemoViewConfig} />
                </div>
                {/* Application-specific actions can be composed here */}
                <div className="p-6 border-t border-border/50 bg-card/30">
                  <div className="flex gap-3">
                    <Button className="flex-1" size="sm">
                      <ExternalLink className="w-4 h-4 mr-2" />
                      Open Project
                    </Button>
                    <Button variant="outline" size="sm">
                      <Share className="w-4 h-4 mr-2" />
                      Share
                    </Button>
                  </div>
                </div>
              </div>
            ),
          };
        }
        const mappedContent = contentMap[sidePaneContent as keyof typeof contentMap] || contentMap.details;
        return {
          meta: mappedContent,
          content: mappedContent.content,
        };
      }, [sidePaneContent, selectedItem, contentMap, itemId]);

      return { meta, content };
    }
approved: true
linesAdded: null
linesRemoved: null
linesDifference: null
gitCommittedAt: null
status: committed
id: 510
