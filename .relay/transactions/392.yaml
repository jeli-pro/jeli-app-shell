uuid: 4f177c15-f5b9-4089-a034-7a98a0050e05
projectId: jeli-app-shell
createdAt: '2025-10-17T10:13:04.593Z'
gitCommitMsg: >-
  fix(messaging): add padding to prevent scrollbar/content overlap

  Resolves a UI conflict where the absolute-positioned JourneyScrollbar was
  overlapping the content of the ActivityFeed.

  This commit adds `pr-8` to the main scrollable container in TaskDetail.tsx.
  This creates a "gutter" that is exactly the width of the custom scrollbar,
  ensuring the scrollbar has its own space and no longer obscures the message
  content.
promptSummary: >-
  The user reported that the custom scrollbar was visually conflicting with the
  message content. I identified this as a layout issue and added right-padding
  to the scrollable container to create a dedicated space for the scrollbar.
reasoning:
  - >-
    You've spotted the core issue perfectly. The "conflict" you're seeing is a
    layout problem: our beautiful new scrollbar is an absolutely positioned
    element that sits *on top* of the message list (`ActivityFeed`). Because it
    has a width (`w-8`), it overlaps and obscures the content on the far right.
  - >-
    The solution is to create a "gutter" or safe area for the scrollbar to live
    in. I'll do this by adding `pr-8` (padding-right: 2rem) to the main
    scrollable container in `TaskDetail.tsx`. This padding will push the message
    content to the left by exactly the width of the scrollbar, giving it its own
    dedicated space and preventing any visual overlap.
  - >-
    This small change ensures the custom scrollbar enhances the UI without
    interfering with the content.
operations:
  - type: write
    path: src/pages/Messaging/components/TaskDetail.tsx
    content: >+
      --- src/pages/Messaging/components/TaskDetail.tsx

      +++ src/pages/Messaging/components/TaskDetail.tsx

      @@ -109,7 +109,7 @@
             )}
             <div 
               ref={scrollContainerRef} 
      -        className="relative flex-1 overflow-y-auto
      [&::-webkit-scrollbar]:hidden [-ms-overflow-style:none]
      [scrollbar-width:none]"

      +        className="relative flex-1 overflow-y-auto pr-8
      [&::-webkit-scrollbar]:hidden [-ms-overflow-style:none]
      [scrollbar-width:none]"
             >
               <ActivityFeed messages={task.messages} contact={task.contact} />
               {journeyPoints.length > 0 && (

    patchStrategy: standard-diff
snapshot:
  src/pages/Messaging/components/TaskDetail.tsx: >-
    import React, { useRef, useEffect } from 'react';

    import { useParams } from 'react-router-dom';

    import { useMessagingStore } from '../store/messaging.store';

    import { ActivityFeed } from './ActivityFeed';

    import { Button } from '@/components/ui/button';

    import { Textarea } from '@/components/ui/textarea';

    import { Paperclip, SendHorizontal, Smile, StickyNote } from 'lucide-react';

    import { Tabs, TabsContent, TabsList, TabsTrigger } from
    "@/components/ui/tabs";

    import { TakeoverBanner } from './TakeoverBanner';

    import { useToast } from '@/components/ui/toast';

    import { gsap } from 'gsap';

    import { useAppShellStore } from '@/store/appShell.store';

    import { JourneyScrollbar } from './JourneyScrollbar';



    export const TaskDetail: React.FC = () => {
      const { conversationId: taskId } = useParams<{ conversationId: string }>();
      const { show } = useToast();
      const { getTaskById, takeOverTask, requestAndSimulateTakeover } = useMessagingStore();
      const reducedMotion = useAppShellStore(s => s.reducedMotion);
      
      const task = taskId ? getTaskById(taskId) : undefined;

      // In a real app, this would come from the auth store
      const currentUserId = 'user-1'; 

      const scrollContainerRef = useRef<HTMLDivElement>(null);
      const isLocked = !!task?.activeHandlerId && task.activeHandlerId !== currentUserId;
      const inputAreaRef = useRef<HTMLDivElement>(null);
      const isFirstRender = useRef(true);

      useEffect(() => {
        if (!inputAreaRef.current) return;

        const initialBorderWidth = '1px'; // from 'border-t'
        const initialPadding = '1rem';    // from 'p-4'

        const target = isLocked
          ? {
              y: 20,
              opacity: 0,
              maxHeight: 0,
              paddingTop: 0,
              paddingBottom: 0,
              borderTopWidth: 0,
              pointerEvents: 'none' as const,
            }
          : {
              y: 0,
              opacity: 1,
              maxHeight: 500, // Ample room for the input
              paddingTop: initialPadding,
              paddingBottom: initialPadding,
              borderTopWidth: initialBorderWidth,
              pointerEvents: 'auto' as const,
            };

        if (reducedMotion) {
          gsap.set(inputAreaRef.current, target);
          return;
        }
        
        if (isFirstRender.current) {
          gsap.set(inputAreaRef.current, target);
          isFirstRender.current = false;
        } else {
          gsap.to(inputAreaRef.current, {
            ...target,
            duration: 0.35,
            ease: 'power2.inOut',
          });
        }
      }, [isLocked, reducedMotion]);

      if (!taskId || !task) {
        return (
            <div className="h-full flex flex-col items-center justify-center p-6 bg-background">
                <p className="text-muted-foreground">Select a task to see its details.</p>
            </div>
        );
      }

      const journeyPoints = task.messages.filter(m => m.journeyPoint);

      const handleDotClick = (messageId: string) => {
        const container = scrollContainerRef.current;
        if (!container) return;
        
        const element = container.querySelector(`[data-message-id="${messageId}"]`);
        
        if (element) {
          // Using 'center' to avoid the message being at the very top/bottom of the view
          element.scrollIntoView({ behavior: 'smooth', block: 'center' });
        }
      };

      const handleTakeOver = () => {
        takeOverTask(task.id, currentUserId);
        show({
            variant: 'success',
            title: 'Task Taken Over',
            message: `You are now handling the task from ${task.contact.name}.`
        });
      };

      const handleRequestTakeover = () => {
        requestAndSimulateTakeover(task.id, currentUserId);
        if (task.activeHandler) {
            show({
                variant: 'default',
                title: 'Request Sent',
                message: `A takeover request has been sent to ${task.activeHandler.name}.`
            });
        }
      };

      return (
        <div className="h-full flex flex-col bg-background overflow-hidden">
          {isLocked && task.activeHandler && (
            <TakeoverBanner
                activeHandler={task.activeHandler}
                isRequesting={!!task.takeoverRequested}
                onTakeOver={handleTakeOver}
                onRequestTakeover={handleRequestTakeover}
            />
          )}
          <div 
            ref={scrollContainerRef} 
            className="relative flex-1 overflow-y-auto [&::-webkit-scrollbar]:hidden [-ms-overflow-style:none] [scrollbar-width:none]"
          >
            <ActivityFeed messages={task.messages} contact={task.contact} />
            {journeyPoints.length > 0 && (
                <JourneyScrollbar
                    scrollContainerRef={scrollContainerRef}
                    journeyPoints={journeyPoints}
                    onDotClick={handleDotClick}
                />
            )}
          </div>

          {/* Input Form */}
          <div ref={inputAreaRef} className="p-4 border-t flex-shrink-0 bg-background/50">
            <Tabs defaultValue="comment" className="w-full" >
              <TabsList className="grid w-full grid-cols-2 mb-2">
                <TabsTrigger value="comment" disabled={isLocked}>Comment</TabsTrigger>
                <TabsTrigger value="note" disabled={isLocked}><StickyNote className="w-4 h-4 mr-2" />Internal Note</TabsTrigger>
              </TabsList>
              <TabsContent value="comment">
                 <div className="relative">
                    <Textarea placeholder={isLocked ? "Take over to reply..." : `Reply to ${task.contact.name}...`} className="pr-24 min-h-[52px]" disabled={isLocked} />
                    <div className="absolute right-2 top-2 flex items-center gap-1">
                        <Button variant="ghost" size="icon" className="rounded-full h-8 w-8" disabled={isLocked}><Smile className="w-4 h-4" /></Button>
                        <Button variant="ghost" size="icon" className="rounded-full h-8 w-8" disabled={isLocked}><Paperclip className="w-4 h-4" /></Button>
                        <Button size="icon" className="rounded-full h-8 w-8" disabled={isLocked}><SendHorizontal className="w-4 h-4" /></Button>
                    </div>
                </div>
              </TabsContent>
              <TabsContent value="note">
                <div className="relative">
                    <Textarea placeholder={isLocked ? "Take over to add a note..." : "Add an internal note..."} className="pr-24 min-h-[52px] bg-yellow-400/10 border-yellow-400/30 focus-visible:ring-yellow-500" disabled={isLocked} />
                    <div className="absolute right-2 top-2 flex items-center gap-1">
                        <Button size="icon" className="rounded-full h-8 w-8" disabled={isLocked}><SendHorizontal className="w-4 h-4" /></Button>
                    </div>
                </div>
              </TabsContent>
            </Tabs>
          </div>
        </div>
      );
    };
approved: true
linesAdded: null
linesRemoved: null
linesDifference: null
gitCommittedAt: '2025-10-17T10:19:03.072Z'
status: committed
id: 392
