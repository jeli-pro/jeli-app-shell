uuid: 44b7d03a-0d85-4eb8-b2ef-34c9c7f9fc67
projectId: jeli-app-shell
createdAt: '2025-10-18T06:41:15.309Z'
gitCommitMsg: >-
  feat(calendar): Refactor DataCalendarView for full responsiveness

  Implemented a fully responsive calendar view that adapts its layout based on
  viewport size.

  - Created a new reusable `useBreakpoint` hook to detect and provide the
  current Tailwind CSS breakpoint. - Refactored `DataCalendarView` to use the
  `useBreakpoint` hook, dynamically switching between a full month view on
  desktops, a 4-day/3-day view on tablets, and a single-day view on mobile. -
  Updated calendar navigation and date calculation logic to support day-based
  and month-based stepping depending on the current view mode. - Improved CSS
  maintainability by scoping custom scrollbar styles to a `.custom-scrollbar`
  class while retaining global defaults.
promptSummary: >-
  The user requested to make the calendar view responsive. This involves
  creating a new hook to detect breakpoints, updating the calendar component to
  dynamically change its layout based on screen size, and refining the CSS for
  custom scrollbars.
reasoning:
  - >-
    Here's the plan to refactor the calendar view for a fully responsive
    experience.
  - >-
    First, I'll create a new `useBreakpoint` hook. This will be the cornerstone
    of our responsive strategy, allowing components to react intelligently to
    changes in viewport size.
  - >-
    Next, I will overhaul the `DataCalendarView` component. By integrating the
    `useBreakpoint` hook, I'll transform its rigid, 7-column layout into a
    dynamic grid. On large screens, it will display the full month. As the
    screen size decreases, it will automatically adapt to show a 4-day, 3-day,
    or single-day view, ensuring optimal usability on any device. This includes
    updating the date calculation logic, navigation controls, and calendar
    headers to be context-aware.
  - >-
    Finally, I'll make a small but important refinement to the application's CSS
    by explicitly scoping the custom scrollbar styles to a `.custom-scrollbar`
    class. This improves code clarity and maintainability.
  - '### Part 1: Implement `useBreakpoint` Hook'
  - >-
    I am creating a new `useBreakpoint` hook. This custom hook will listen for
    window resize events and return the current responsive breakpoint (e.g.,
    'sm', 'md', 'lg'), based on common Tailwind CSS conventions. This provides a
    reusable and declarative way for components to adapt their rendering to
    different screen sizes.
  - '### Part 2: Make DataCalendarView Responsive'
  - >-
    Now I will refactor `DataCalendarView` to be fully responsive. It will use
    the new `useBreakpoint` hook to dynamically adjust its layout from a full
    month view on desktops to a weekly or daily view on smaller screens. This
    involves updating date calculations, navigation logic, and the grid
    structure to provide an optimal user experience across all devices.
  - '### Part 3: Refine Custom Scrollbar CSS'
  - >-
    To improve code clarity and maintainability, I'm scoping the custom
    scrollbar styles to a `.custom-scrollbar` class in `index.css`. This ensures
    that these styles are explicitly linked to the elements that use them, while
    also keeping the global scrollbar styles as a fallback for the rest of the
    application.
operations:
  - type: write
    path: src/hooks/useBreakpoint.hook.ts
    content: |-
      import { useState, useEffect } from 'react';

      const breakpoints = {
        base: 0,
        sm: 640,
        md: 768,
        lg: 1024,
        xl: 1280,
        '2xl': 1536,
      };

      type Breakpoint = keyof typeof breakpoints;

      export function useBreakpoint(): Breakpoint {
        const [breakpoint, setBreakpoint] = useState<Breakpoint>('base');

        useEffect(() => {
          const handleResize = () => {
            const width = window.innerWidth;
            if (width >= breakpoints['2xl']) {
              setBreakpoint('2xl');
            } else if (width >= breakpoints.xl) {
              setBreakpoint('xl');
            } else if (width >= breakpoints.lg) {
              setBreakpoint('lg');
            } else if (width >= breakpoints.md) {
              setBreakpoint('md');
            } else if (width >= breakpoints.sm) {
              setBreakpoint('sm');
            } else {
              setBreakpoint('base');
            }
          };

          handleResize(); // Set initial value
          window.addEventListener('resize', handleResize);

          return () => {
            window.removeEventListener('resize', handleResize);
          };
        }, []);

        return breakpoint;
      }
    patchStrategy: replace
  - type: write
    path: src/pages/DataDemo/components/DataCalendarView.tsx
    content: >+
      --- src/pages/DataDemo/components/DataCalendarView.tsx

      +++ src/pages/DataDemo/components/DataCalendarView.tsx

      @@ -1,5 +1,5 @@
       import { useState, useMemo } from "react";
      -import { format, addMonths, subMonths, startOfMonth, endOfMonth,
      startOfWeek, endOfWeek, eachDayOfInterval, isSameMonth, isToday,
      isSameDay, } from "date-fns";

      +import { format, addMonths, subMonths, startOfMonth, endOfMonth,
      startOfWeek, endOfWeek, eachDayOfInterval, isSameMonth, isToday,
      isSameDay, addDays, subDays, startOfDay, endOfDay, } from "date-fns";
       import { ChevronLeft, ChevronRight } from "lucide-react";
       import { AnimatePresence, motion } from "framer-motion";
       
      @@ -10,6 +10,7 @@
       import { useAppViewManager } from "@/hooks/useAppViewManager.hook";
       import { useSelectedItem, useDataDemoStore } from "../store/dataDemo.store";
       import { CalendarViewControls } from "./DataCalendarViewControls";
      +import { useBreakpoint } from "@/hooks/useBreakpoint.hook";
       
       interface CalendarViewProps {
         data: DataItem[];
       }
      -function CalendarHeader({ currentDate, onPrevMonth, onNextMonth, onToday
      }: {

      +function CalendarHeader({ currentDate, onPrev, onNext, onToday, title }:
      {
         currentDate: Date;
      -  onPrevMonth: () => void;

      -  onNextMonth: () => void;

      +  onPrev: () => void;

      +  onNext: () => void;
         onToday: () => void;
      +  title: string;
       }) {
         return (
           <div className="flex items-center justify-between gap-4 mb-6">
             <h2 className="text-xl font-bold md:text-2xl tracking-tight">
      -        {format(currentDate, "MMMM yyyy")}

      +        {title}
             </h2>
             <div className="flex items-center gap-2">
               <Button variant="outline" size="sm" onClick={onToday}>Today</Button>
               <CalendarViewControls />
               <div className="flex items-center">
      -          <Button variant="outline" size="icon" className="h-9 w-9"
      onClick={onPrevMonth}>

      +          <Button variant="outline" size="icon" className="h-9 w-9"
      onClick={onPrev}>
                   <ChevronLeft className="h-4 w-4" />
                 </Button>
      -          <Button variant="outline" size="icon" className="h-9 w-9"
      onClick={onNextMonth}>

      +          <Button variant="outline" size="icon" className="h-9 w-9"
      onClick={onNext}>
                   <ChevronRight className="h-4 w-4" />
                 </Button>
               </div>
      @@ -69,12 +70,47 @@
       
       export function DataCalendarView({ data }: CalendarViewProps) {
         const [currentDate, setCurrentDate] = useState(new Date());
      +  const breakpoint = useBreakpoint();
         const { itemId } = useAppViewManager();
         const selectedItem = useSelectedItem(itemId);
         const updateItem = useDataDemoStore(s => s.updateItem);
         
         // Drag & Drop State
         const [draggedItemId, setDraggedItemId] = useState<string | null>(null);
         const [dropTargetDate, setDropTargetDate] = useState<Date | null>(null);
       
      +  const config = useMemo(() => {

      +    switch (breakpoint) {

      +      case '2xl':

      +      case 'xl':

      +      case 'lg':

      +        return { mode: 'month' as const, cols: 7, navUnit: 'month' as
      const, navStep: 1 };

      +      case 'md':

      +        return { mode: '4-day' as const, cols: 4, navUnit: 'day' as
      const, navStep: 4 };

      +      case 'sm':

      +        return { mode: '3-day' as const, cols: 3, navUnit: 'day' as
      const, navStep: 3 };

      +      case 'base':

      +      default:

      +        return { mode: 'day' as const, cols: 1, navUnit: 'day' as const,
      navStep: 1 };

      +    }

      +  }, [breakpoint]);

      +
         const itemsWithDueDate = useMemo(() => data.filter(item => !!item.dueDate), [data]);
       
         const eventsByDate = useMemo(() => {
      @@ -90,13 +126,27 @@
           return eventsMap;
         }, [itemsWithDueDate]);
       
      -  const monthStart = startOfMonth(currentDate);

      -  const monthEnd = endOfMonth(monthStart);

      -  const startDate = startOfWeek(monthStart, { weekStartsOn: 0 }); //
      Sunday

      -  const endDate = endOfWeek(monthEnd, { weekStartsOn: 0 });

      -

      -  const days = eachDayOfInterval({ start: startDate, end: endDate });

      +  const { days, title } = useMemo(() => {

      +    if (config.mode === 'month') {

      +      const monthStart = startOfMonth(currentDate);

      +      const monthEnd = endOfMonth(monthStart);

      +      const startDate = startOfWeek(monthStart, { weekStartsOn: 0 }); //
      Sunday

      +      const endDate = endOfWeek(monthEnd, { weekStartsOn: 0 });

      +      return { days: eachDayOfInterval({ start: startDate, end: endDate
      }), title: format(currentDate, "MMMM yyyy") };

      +    }

      +    const startDate = startOfDay(currentDate);

      +    const endDate = endOfDay(addDays(currentDate, config.cols - 1));

      +    const dayList = eachDayOfInterval({ start: startDate, end: endDate
      });

      +    

      +    let newTitle = format(startDate, "MMMM d");

      +    if (config.cols > 1) {

      +      newTitle += isSameMonth(startDate, endDate) ? ` - ${format(endDate,
      "d, yyyy")}` : ` - ${format(endDate, "MMMM d, yyyy")}`;

      +    } else {

      +      newTitle += `, yyyy`;

      +    }

      +

      +    return { days: dayList, title: newTitle };

      +  }, [currentDate, config.mode, config.cols]);
         const weekdays = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
         
         // D&D Handlers
      @@ -136,25 +186,35 @@
           handleDragEnd(); // Reset state
         };
         
      -  const handlePrevMonth = () => setCurrentDate(subMonths(currentDate,
      1));

      -  const handleNextMonth = () => setCurrentDate(addMonths(currentDate,
      1));

      +  const handlePrev = () => {

      +    if (config.navUnit === 'month') {

      +      setCurrentDate(subMonths(currentDate, config.navStep));

      +    } else {

      +      setCurrentDate(subDays(currentDate, config.navStep));

      +    }

      +  };

      +  const handleNext = () => {

      +    if (config.navUnit === 'month') {

      +      setCurrentDate(addMonths(currentDate, config.navStep));

      +    } else {

      +      setCurrentDate(addDays(currentDate, config.navStep));

      +    }

      +  };
         const handleToday = () => setCurrentDate(new Date());
       
         return (
           <div className="-mx-4 md:-mx-6">
             <div className="px-4 md:px-6">
      -        <CalendarHeader currentDate={currentDate}
      onPrevMonth={handlePrevMonth} onNextMonth={handleNextMonth}
      onToday={handleToday} />

      +        <CalendarHeader currentDate={currentDate} onPrev={handlePrev}
      onNext={handleNext} onToday={handleToday} title={title} />
             </div>
             {itemsWithDueDate.length === 0 ? (
               <div className="flex items-center justify-center h-96 text-muted-foreground rounded-lg border bg-card/30 mx-4 md:mx-6">
                 No items with due dates to display on the calendar.
               </div>
             ) : (
      -        <div className="grid grid-cols-7 p-2 gap-2"
      onDragEnd={handleDragEnd}>

      -          {weekdays.map(day => (

      +        <div className={cn("grid p-2 gap-2", `grid-cols-${config.cols}`)}
      onDragEnd={handleDragEnd}>

      +          {config.mode === 'month' && weekdays.map(day => (
                   <div key={day} className="py-2 px-3 text-center text-xs font-semibold text-muted-foreground">
                     {day}
                   </div>
      @@ -167,7 +227,7 @@
                     animate={{ opacity: 1 }}
                     exit={{ opacity: 0 }}
                     transition={{ duration: 0.3 }}
      -              className="col-span-7 grid grid-cols-7 gap-2"

      +              className={cn("grid gap-2 col-span-full",
      `grid-cols-${config.cols}`)}
                   >
                     {days.map(day => {
                       const dateKey = format(day, "yyyy-MM-dd");
      @@ -182,7 +242,8 @@
                           onDragLeave={handleDragLeave}
                           onDrop={(e) => handleDrop(e, day)}
                           className={cn(
      -                      "relative min-h-[150px] rounded-2xl p-3 flex
      flex-col gap-2 transition-all duration-300 border",

      +                      "relative rounded-2xl p-3 flex flex-col gap-2
      transition-all duration-300 border",

      +                      config.mode === 'month' ? "min-h-[150px]" :
      "min-h-[250px]",
                             isCurrentMonthDay ? "bg-card/40 dark:bg-neutral-900/40 border-transparent" : "bg-muted/30 dark:bg-neutral-800/20 border-transparent text-muted-foreground/60",
                             isDropTarget ? "border-primary/50 bg-primary/10" : "hover:border-primary/20 hover:bg-card/60"
                           )}
      @@ -191,7 +252,7 @@
                             "font-semibold text-sm",
                             isToday(day) && "flex items-center justify-center w-7 h-7 rounded-full bg-primary text-primary-foreground"
                           )}>
      -                      {format(day, "d")}

      +                      {config.mode === 'month' ? format(day, "d") :
      format(day, "E d")}
                           </span>
                           <div className="space-y-2 overflow-y-auto flex-grow custom-scrollbar">
                             <AnimatePresence>

    patchStrategy: standard-diff
  - type: write
    path: src/index.css
    content: |
      <<<<<<< SEARCH
      /* Custom scrollbar styles */
      ::-webkit-scrollbar {
        width: 6px;
        height: 6px;
      }

      ::-webkit-scrollbar-track {
        @apply bg-transparent;
      }

      ::-webkit-scrollbar-thumb {
        @apply bg-border rounded-full;
      }

      ::-webkit-scrollbar-thumb:hover {
        @apply bg-muted-foreground/50;
      }
      =======
      /* Custom scrollbar styles */
      .custom-scrollbar::-webkit-scrollbar,
      ::-webkit-scrollbar {
        width: 6px;
        height: 6px;
      }

      .custom-scrollbar::-webkit-scrollbar-track,
      ::-webkit-scrollbar-track {
        @apply bg-transparent;
      }

      .custom-scrollbar::-webkit-scrollbar-thumb,
      ::-webkit-scrollbar-thumb {
        @apply bg-border rounded-full;
      }

      .custom-scrollbar::-webkit-scrollbar-thumb:hover,
      ::-webkit-scrollbar-thumb:hover {
        @apply bg-muted-foreground/50;
      }
      >>>>>>> REPLACE
    patchStrategy: search-replace
snapshot:
  src/hooks/useBreakpoint.hook.ts: null
  src/index.css: |-
    @import 'tailwindcss/base';
    @import 'tailwindcss/components';
    @import 'tailwindcss/utilities';

    @layer base {
      :root {
        --primary-hsl: 220 84% 60%;
        --background: 210 40% 96.1%;
        --foreground: 222.2 84% 4.9%;
        --card: 0 0% 100%;
        --card-foreground: 222.2 84% 4.9%;
        --popover: 0 0% 100%;
        --popover-foreground: 222.2 84% 4.9%;
        --primary: var(--primary-hsl);
        --primary-foreground: 210 40% 98%;
        --secondary: 210 40% 96%;
        --secondary-foreground: 222.2 84% 4.9%;
        --muted: 210 40% 96%;
        --muted-foreground: 215.4 16.3% 46.9%;
        --accent: 210 40% 96%;
        --accent-foreground: 222.2 84% 4.9%;
        --destructive: 0 84.2% 60.2%;
        --destructive-foreground: 210 40% 98%;
        --border: 214.3 31.8% 91.4%;
        --input: 214.3 31.8% 91.4%;
        --ring: var(--primary-hsl);
        --radius: 1rem;
      }

      .dark {
        --background: 240 6% 9%;
        --foreground: 210 40% 98%;
        --card: 240 6% 14%;
        --card-foreground: 210 40% 98%;
        --popover: 240 6% 12%;
        --popover-foreground: 210 40% 98%;
        --primary: var(--primary-hsl);
        --primary-foreground: 210 40% 98%;
        --secondary: 240 5% 20%;
        --secondary-foreground: 210 40% 98%;
        --muted: 240 5% 20%;
        --muted-foreground: 215 20.2% 65.1%;
        --accent: 240 5% 20%;
        --accent-foreground: 210 40% 98%;
        --destructive: 0 62.8% 30.6%;
        --destructive-foreground: 210 40% 98%;
        --border: 240 5% 20%;
        --input: 240 5% 20%;
        --ring: var(--primary-hsl);
      }
    }

    @layer base {
      * {
        @apply border-border;
      }
      body {
        @apply bg-background text-foreground;
      }
    }

    /* Custom scrollbar styles */
    ::-webkit-scrollbar {
      width: 6px;
      height: 6px;
    }

    ::-webkit-scrollbar-track {
      @apply bg-transparent;
    }

    ::-webkit-scrollbar-thumb {
      @apply bg-border rounded-full;
    }

    ::-webkit-scrollbar-thumb:hover {
      @apply bg-muted-foreground/50;
    }

    /* For UserDropdown */
    .no-scrollbar::-webkit-scrollbar {
      display: none;
    }
    .no-scrollbar {
      -ms-overflow-style: none; /* IE and Edge */
      scrollbar-width: none; /* Firefox */
    }

    @layer base {
      .login-page-theme {
        --background: hsl(0 0% 100%);
        --foreground: hsl(0 0% 0%);
        --skeleton: hsl(0 0% 90%);
        --border: hsl(220 20% 90%);
        --btn-border: hsl(214.3 31.8% 91.4%);
        --input: hsl(220 20% 90%);
        --radius: 0.5rem;
      }
     
      .dark .login-page-theme {
        --background: hsl(222 94% 5%);
        --foreground: hsl(0 0% 100%);
        --skeleton: hsl(218 36% 16%);
        --border: hsl(220 20% 90%);
        --btn-border: hsl(217 32.6% 17.5%);
        --input: hsl(219 63% 16%);
        --radius: 0.5rem;
      }
    }

    @layer components {
      .g-button {
        @apply rounded-[var(--radius)] border;
        border-color: var(--btn-border);
      }
    }
  src/pages/DataDemo/components/DataCalendarView.tsx: >-
    import { useState, useMemo } from "react";

    import { format, addMonths, subMonths, startOfMonth, endOfMonth,
    startOfWeek, endOfWeek, eachDayOfInterval, isSameMonth, isToday, isSameDay,
    } from "date-fns";

    import { ChevronLeft, ChevronRight } from "lucide-react";

    import { AnimatePresence, motion } from "framer-motion";


    import { Button } from "@/components/ui/button";

    import { Badge } from "@/components/ui/badge";

    import { Avatar, AvatarFallback, AvatarImage } from
    "@/components/ui/avatar";

    import { cn, getPriorityColor } from "@/lib/utils";

    import type { DataItem } from "../types";

    import { useAppViewManager } from "@/hooks/useAppViewManager.hook";

    import { useSelectedItem, useDataDemoStore } from "../store/dataDemo.store";

    import { CalendarViewControls } from "./DataCalendarViewControls";


    interface CalendarViewProps {
      data: DataItem[];
    }


    function CalendarHeader({ currentDate, onPrevMonth, onNextMonth, onToday }:
    {
      currentDate: Date;
      onPrevMonth: () => void;
      onNextMonth: () => void;
      onToday: () => void;
    }) {
      return (
        <div className="flex items-center justify-between gap-4 mb-6">
          <h2 className="text-xl font-bold md:text-2xl tracking-tight">
            {format(currentDate, "MMMM yyyy")}
          </h2>
          <div className="flex items-center gap-2">
            <Button variant="outline" size="sm" onClick={onToday}>Today</Button>
            <CalendarViewControls />
            <div className="flex items-center">
              <Button variant="outline" size="icon" className="h-9 w-9" onClick={onPrevMonth}>
                <ChevronLeft className="h-4 w-4" />
              </Button>
              <Button variant="outline" size="icon" className="h-9 w-9" onClick={onNextMonth}>
                <ChevronRight className="h-4 w-4" />
              </Button>
            </div>
          </div>
        </div>
      );
    }


    function CalendarEvent({ item, isSelected, isDragging, onDragStart }: { 
        item: DataItem; 
        isSelected: boolean;
        isDragging: boolean;
        onDragStart: (e: React.DragEvent<HTMLDivElement>, itemId: string) => void;
    }) {
      const { onItemSelect } = useAppViewManager();

        return (
            <motion.div
                layout
                draggable
                onDragStart={(e) => onDragStart(e, item.id)}
                initial={{ opacity: 0, y: 10 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0, y: -10 }}
                transition={{ duration: 0.2 }}
                onClick={() => onItemSelect(item)}
                className={cn(
                    "p-2.5 rounded-xl cursor-grab transition-all duration-200 border bg-card/60 dark:bg-neutral-800/60 backdrop-blur-sm",
                    "hover:bg-card/80 dark:hover:bg-neutral-700/70",
                    isSelected && "ring-2 ring-primary ring-offset-background ring-offset-2 bg-card/90",
                    isDragging && "opacity-50 ring-2 ring-primary cursor-grabbing"
                )}
            >
                <h4 className="font-semibold text-sm leading-tight text-card-foreground/90 line-clamp-2">
                    {item.title}
                </h4>
                <div className="flex items-center justify-between mt-2 pt-2 border-t border-border/30 dark:border-neutral-700/50">
                    <Badge className={cn("text-xs border capitalize", getPriorityColor(item.priority))}>
                        {item.priority}
                    </Badge>
                    <Avatar className="w-5 h-5">
                        <AvatarImage src={item.assignee.avatar} />
                        <AvatarFallback className="text-[10px] bg-muted dark:bg-neutral-700 text-foreground dark:text-neutral-200 font-medium">
                            {item.assignee.name.split(" ").map((n) => n[0]).join("")}
                        </AvatarFallback>
                    </Avatar>
                </div>
            </motion.div>
        );
    }


    export function DataCalendarView({ data }: CalendarViewProps) {
      const [currentDate, setCurrentDate] = useState(new Date());
      const { itemId } = useAppViewManager();
      const selectedItem = useSelectedItem(itemId);
      const updateItem = useDataDemoStore(s => s.updateItem);
      
      // Drag & Drop State
      const [draggedItemId, setDraggedItemId] = useState<string | null>(null);
      const [dropTargetDate, setDropTargetDate] = useState<Date | null>(null);

      const itemsWithDueDate = useMemo(() => data.filter(item => !!item.dueDate), [data]);

      const eventsByDate = useMemo(() => {
        const eventsMap = new Map<string, DataItem[]>();
        itemsWithDueDate.forEach(item => {
          const dueDate = new Date(item.dueDate as string);
          const dateKey = format(dueDate, "yyyy-MM-dd");
          if (!eventsMap.has(dateKey)) {
            eventsMap.set(dateKey, []);
          }
          eventsMap.get(dateKey)?.push(item);
        });
        return eventsMap;
      }, [itemsWithDueDate]);

      const monthStart = startOfMonth(currentDate);
      const monthEnd = endOfMonth(monthStart);
      const startDate = startOfWeek(monthStart, { weekStartsOn: 0 }); // Sunday
      const endDate = endOfWeek(monthEnd, { weekStartsOn: 0 });

      const days = eachDayOfInterval({ start: startDate, end: endDate });
      const weekdays = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
      
      // D&D Handlers
      const handleDragStart = (e: React.DragEvent, itemId: string) => {
        e.dataTransfer.effectAllowed = 'move';
        e.dataTransfer.setData('text/plain', itemId);
        setDraggedItemId(itemId);
      };
      
      const handleDragEnd = () => {
        setDraggedItemId(null);
        setDropTargetDate(null);
      };

      const handleDragOver = (e: React.DragEvent, day: Date) => {
        e.preventDefault();
        if (dropTargetDate === null || !isSameDay(day, dropTargetDate)) {
            setDropTargetDate(day);
        }
      };

      const handleDragLeave = () => {
        setDropTargetDate(null);
      };

      const handleDrop = (e: React.DragEvent, day: Date) => {
        e.preventDefault();
        const itemIdToUpdate = e.dataTransfer.getData('text/plain');
        if (itemIdToUpdate) {
            const originalItem = itemsWithDueDate.find(i => i.id === itemIdToUpdate);
            if (originalItem && originalItem.dueDate) {
                const originalDate = new Date(originalItem.dueDate);
                // Preserve the time, only change the date part
                const newDueDate = new Date(day);
                newDueDate.setHours(originalDate.getHours(), originalDate.getMinutes(), originalDate.getSeconds(), originalDate.getMilliseconds());
                updateItem(itemIdToUpdate, { dueDate: newDueDate.toISOString() });
            }
        }
        handleDragEnd(); // Reset state
      };
      
      const handlePrevMonth = () => setCurrentDate(subMonths(currentDate, 1));
      const handleNextMonth = () => setCurrentDate(addMonths(currentDate, 1));
      const handleToday = () => setCurrentDate(new Date());

      return (
        <div className="-mx-4 md:-mx-6">
          <div className="px-4 md:px-6">
            <CalendarHeader currentDate={currentDate} onPrevMonth={handlePrevMonth} onNextMonth={handleNextMonth} onToday={handleToday} />
          </div>
          {itemsWithDueDate.length === 0 ? (
            <div className="flex items-center justify-center h-96 text-muted-foreground rounded-lg border bg-card/30 mx-4 md:mx-6">
              No items with due dates to display on the calendar.
            </div>
          ) : (
            <div className="grid grid-cols-7 p-2 gap-2" onDragEnd={handleDragEnd}>
              {weekdays.map(day => (
                <div key={day} className="py-2 px-3 text-center text-xs font-semibold text-muted-foreground">
                  {day}
                </div>
              ))}

              <AnimatePresence mode="wait">
                <motion.div
                  key={format(currentDate, "yyyy-MM")}
                  initial={{ opacity: 0 }}
                  animate={{ opacity: 1 }}
                  exit={{ opacity: 0 }}
                  transition={{ duration: 0.3 }}
                  className="col-span-7 grid grid-cols-7 gap-2"
                >
                  {days.map(day => {
                    const dateKey = format(day, "yyyy-MM-dd");
                    const dayEvents = eventsByDate.get(dateKey) || [];
                    const isCurrentMonthDay = isSameMonth(day, currentDate);
                    const isDropTarget = dropTargetDate && isSameDay(day, dropTargetDate);

                    return (
                      <div
                        key={day.toString()}
                        onDragOver={(e) => handleDragOver(e, day)}
                        onDragLeave={handleDragLeave}
                        onDrop={(e) => handleDrop(e, day)}
                        className={cn(
                          "relative min-h-[150px] rounded-2xl p-3 flex flex-col gap-2 transition-all duration-300 border",
                          isCurrentMonthDay ? "bg-card/40 dark:bg-neutral-900/40 border-transparent" : "bg-muted/30 dark:bg-neutral-800/20 border-transparent text-muted-foreground/60",
                          isDropTarget ? "border-primary/50 bg-primary/10" : "hover:border-primary/20 hover:bg-card/60"
                        )}
                      >
                        <span className={cn(
                          "font-semibold text-sm",
                          isToday(day) && "flex items-center justify-center w-7 h-7 rounded-full bg-primary text-primary-foreground"
                        )}>
                          {format(day, "d")}
                        </span>
                        <div className="space-y-2 overflow-y-auto flex-grow custom-scrollbar">
                          <AnimatePresence>
                            {dayEvents.slice(0, 4).map(item => (
                              <CalendarEvent
                                key={item.id} 
                                item={item} 
                                isSelected={selectedItem?.id === item.id}
                                isDragging={draggedItemId === item.id}
                                onDragStart={handleDragStart}
                              />
                            ))}
                          </AnimatePresence>
                        </div>
                        {dayEvents.length > 4 && (
                          <div className="absolute bottom-1 right-2 text-xs font-bold text-muted-foreground">
                            +{dayEvents.length - 4} more
                          </div>
                        )}
                      </div>
                    );
                  })}
                </motion.div>
              </AnimatePresence>
            </div>
          )}
        </div>
      );
    }
approved: false
linesAdded: null
linesRemoved: null
linesDifference: null
gitCommittedAt: null
status: undone
id: 450
