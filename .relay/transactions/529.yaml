uuid: 4894ed51-46ec-4d51-893d-82d3b25f573c
projectId: jeli-app-shell
createdAt: '2025-10-21T07:45:10.185Z'
gitCommitMsg: >-
  refactor(dynamic-view): abstract CTA rendering to complete encapsulation

  Implemented the final step of the Dynamic View refactor by abstracting the
  `AddDataItemCta` component.

  - Introduced a `renderCta` prop to `DynamicView` to allow consumers to inject
  custom call-to-action components. - The `DynamicView` component now calculates
  view-specific props (like `colSpan` for tables) and passes them to the
  `renderCta` function. - Removed the hardcoded `AddDataItemCta` from
  `ListView`, `CardView`, and `TableView`, which now render the element provided
  by the `DynamicView` parent. - The `DataDemo` page now implements `renderCta`,
  providing the demo-specific component and completing the controlled component
  pattern.

  This change fully decouples the generic `DynamicView` feature from any
  application-specific components, making it truly reusable.
promptSummary: >-
  The user requested Part 4 of the refactor plan. The previous attempt failed
  due to a patch mismatch. This new attempt uses a more robust search-replace
  strategy to ensure the changes apply correctly and complete the encapsulation
  of the DynamicView component.
reasoning:
  - >-
    Of course. It appears my previous attempt failed due to a patch mismatch,
    which can happen after a series of modifications. I'll use a more precise
    `search-replace` strategy for the file that failed
    (`src/pages/DataDemo/index.tsx`) to ensure the changes apply correctly this
    time.
  - Here is the corrected implementation for Part 4.
  - '### Part 4, Step 1: Abstract the `AddDataItemCta` Component'
  - >-
    First, I'll update the `AddDataItemCta` component to accept the generic
    `ViewMode` type, making it compatible with our new abstraction.
  - >-
    Next, I'll modify the main `DynamicView` component. It will now accept a
    `renderCta` function as a prop. Internally, it will call this function with
    the current view mode and any necessary props (like `colSpan` for the table
    view), and then pass the resulting component down to the active view.
  - >-
    Now, I'll update the individual view components (`CardView`, `ListView`,
    `TableView`) to accept a `ctaElement` prop and render it, removing the
    direct dependency on `AddDataItemCta`.
  - '### Part 4, Step 2: Update the Consumer Page'
  - >-
    Finally, I'll update the `DataDemoPage`. I will first add the necessary
    import for the CTA component. Then, I'll pass the `renderCta` prop to the
    `<DynamicView>` component. This completes the pattern, cleanly injecting the
    application-specific component into the generic view feature.
  - >-
    These changes complete the planned refactor. The `DynamicView` feature is
    now a fully encapsulated, reusable component with a clean, prop-based API.
operations:
  - type: write
    path: src/features/dynamic-view/components/shared/AddDataItemCta.tsx
    content: |
      <<<<<<< SEARCH
      interface AddDataItemCtaProps {
        viewMode: 'list' | 'cards' | 'grid' | 'table'
        colSpan?: number
      }
      =======
      import type { ViewMode } from '../../types'

      interface AddDataItemCtaProps {
        viewMode: ViewMode
        colSpan?: number
      }
      >>>>>>> REPLACE
    patchStrategy: search-replace
  - type: write
    path: src/features/dynamic-view/DynamicView.tsx
    content: >+
      --- src/features/dynamic-view/DynamicView.tsx

      +++ src/features/dynamic-view/DynamicView.tsx

      @@ -51,7 +51,7 @@
         // Custom Renderers
         renderHeaderControls?: () => ReactNode;
         renderStats?: () => ReactNode;
      -  renderCta?: (viewMode: ViewMode) => ReactNode;

      +  renderCta?: (viewMode: ViewMode, ctaProps: { colSpan?: number }) =>
      ReactNode;
       }
       
       export function DynamicView({ viewConfig, ...rest }: DynamicViewProps) {
      @@ -75,13 +75,13 @@
           }, {} as Record<string, GenericItem[]>);
         }, [items, groupBy, viewMode]);
       
      -  const renderViewForData = useCallback((data: GenericItem[]) => {

      +  const renderViewForData = useCallback((data: GenericItem[], cta:
      ReactNode) => {
           switch (viewMode) {
      -        case 'table': return <TableView data={data} />;

      -        case 'cards': return <CardView data={data} />;

      -        case 'grid': return <CardView data={data} isGrid />;

      -        case 'list': default: return <ListView data={data} />;

      +        case 'table': return <TableView data={data} ctaElement={cta} />;

      +        case 'cards': return <CardView data={data} ctaElement={cta} />;

      +        case 'grid': return <CardView data={data} isGrid ctaElement={cta}
      />;

      +        case 'list': default: return <ListView data={data}
      ctaElement={cta} />;
           }
      -  }, [viewMode]);

      +  }, [viewMode]);
       
         const renderContent = () => {
           if (isInitialLoading) {
      @@ -104,8 +104,15 @@
               return <EmptyState />;
           }
           
      +    const ctaProps = {

      +        colSpan: viewMode === 'table' ?
      viewConfig.tableView.columns.length + 1 : undefined,

      +    };

      +    const ctaElement = rest.renderCta

      +        ? rest.renderCta(viewMode, ctaProps)

      +        : null;

      +    
           // This will be expanded later to handle group tabs
      -    return renderViewForData(items);

      +    return renderViewForData(items, ctaElement);
         };
       
         return (

    patchStrategy: standard-diff
  - type: write
    path: src/features/dynamic-view/components/views/CardView.tsx
    content: >+
      --- src/features/dynamic-view/components/views/CardView.tsx

      +++ src/features/dynamic-view/components/views/CardView.tsx

      @@ -1,13 +1,12 @@

      -import { useRef } from 'react'

      +import { useRef, type ReactNode } from 'react'
       import { cn } from '@/lib/utils'
       import { ArrowUpRight } from 'lucide-react'
       import type { GenericItem } from '../../types'
       import { useStaggeredAnimation } from '@/hooks/useStaggeredAnimation.motion.hook'
       import { EmptyState } from '../shared/EmptyState'
      -import { AddDataItemCta } from '../shared/AddDataItemCta'
       import { useDynamicView } from '../../DynamicViewContext'
       import { FieldRenderer } from '../shared/FieldRenderer'
       
      -export function CardView({ data, isGrid = false }: { data: GenericItem[];
      isGrid?: boolean }) {

      +export function CardView({ data, isGrid = false, ctaElement }: { data:
      GenericItem[]; isGrid?: boolean, ctaElement?: ReactNode }) {
         const { config, onItemSelect, selectedItemId } = useDynamicView();
         const { cardView: viewConfig } = config;
       
      @@ -107,7 +106,7 @@
                 </div>
               )
             })}
      -      <AddDataItemCta viewMode={isGrid ? 'grid' : 'cards'} />

      +      {ctaElement}
           </div>
         )
       }

    patchStrategy: standard-diff
  - type: write
    path: src/features/dynamic-view/components/views/ListView.tsx
    content: >+
      --- src/features/dynamic-view/components/views/ListView.tsx

      +++ src/features/dynamic-view/components/views/ListView.tsx

      @@ -1,13 +1,12 @@

      -import { useRef } from 'react'

      +import { useRef, type ReactNode } from 'react'
       import { cn } from '@/lib/utils'
       import type { GenericItem } from '../../types'
       import { useStaggeredAnimation } from '@/hooks/useStaggeredAnimation.motion.hook'
       import { EmptyState } from '../shared/EmptyState'
      -import { AddDataItemCta } from '../shared/AddDataItemCta'
       import { useDynamicView } from '../../DynamicViewContext'
       import { FieldRenderer } from '../shared/FieldRenderer'
       
      -export function ListView({ data }: { data: GenericItem[] }) {

      +export function ListView({ data, ctaElement }: { data: GenericItem[],
      ctaElement?: ReactNode }) {
         const { config, onItemSelect, selectedItemId } = useDynamicView();
       
         const listRef = useRef<HTMLDivElement>(null)
      @@ -52,7 +51,7 @@
                 </div>
               )
             })}
      -      <AddDataItemCta viewMode='list' />

      +      {ctaElement}
           </div>
         )
       }

    patchStrategy: standard-diff
  - type: write
    path: src/features/dynamic-view/components/views/TableView.tsx
    content: >+
      --- src/features/dynamic-view/components/views/TableView.tsx

      +++ src/features/dynamic-view/components/views/TableView.tsx

      @@ -1,4 +1,4 @@

      -import { useRef, useLayoutEffect, useMemo } from 'react'

      +import { useRef, useLayoutEffect, useMemo, type ReactNode } from 'react'
       import { gsap } from 'gsap'
       import { cn } from '@/lib/utils'
       import { 
      @@ -9,11 +9,10 @@
       } from 'lucide-react'
       import type { GenericItem } from '../../types'
       import { EmptyState } from '../shared/EmptyState'
       import { capitalize } from '@/lib/utils'
      -import { AddDataItemCta } from '../shared/AddDataItemCta'
       import { useDynamicView } from '../../DynamicViewContext'
       import { FieldRenderer } from '../shared/FieldRenderer'
       
      -export function TableView({ data }: { data: GenericItem[] }) {

      +export function TableView({ data, ctaElement }: { data: GenericItem[],
      ctaElement?: ReactNode }) {
         const { config, sortConfig, onSortChange, groupBy, onItemSelect, selectedItemId } = useDynamicView();
         const { tableView: viewConfig } = config;
       
      @@ -112,7 +111,7 @@
                       ])
                     : data.map(item => <TableRow key={item.id} item={item} isSelected={selectedItemId === item.id} onItemSelect={onItemSelect} />)
                   }
      -            <AddDataItemCta viewMode='table'
      colSpan={viewConfig.columns.length + 1} />

      +            {ctaElement}
                 </tbody>
               </table>
             </div>

    patchStrategy: standard-diff
  - type: write
    path: src/pages/DataDemo/index.tsx
    content: >
      <<<<<<< SEARCH

      import { 

      } from './store/dataDemo.store'


      import { dataDemoViewConfig } from './DataDemo.config';

      =======

      import { 

      } from './store/dataDemo.store'

      import { AddDataItemCta } from
      '@/features/dynamic-view/components/shared/AddDataItemCta'


      import { dataDemoViewConfig } from './DataDemo.config';

      >>>>>>> REPLACE

      <<<<<<< SEARCH
              onPageChange={setPage}
              onItemSelect={onItemSelect}
              // Custom Renderers
              renderStats={() => (
                <div ref={statsRef} className="flex overflow-x-auto gap-6 pb-4 no-scrollbar">
      =======
              onPageChange={setPage}
              onItemSelect={onItemSelect}
              // Custom Renderers
              renderCta={(viewMode, ctaProps) => (
                <AddDataItemCta viewMode={viewMode} colSpan={ctaProps.colSpan} />
              )}
              renderStats={() => (
                <div ref={statsRef} className="flex overflow-x-auto gap-6 pb-4 no-scrollbar">
      >>>>>>> REPLACE
    patchStrategy: search-replace
snapshot:
  src/features/dynamic-view/DynamicView.tsx: >-
    import { useMemo, useCallback, type ReactNode } from 'react';

    import { DynamicViewProvider } from
    '@/features/dynamic-view/DynamicViewContext';

    import type { ViewConfig, GenericItem, ViewMode, FilterConfig, SortConfig,
    CalendarDateProp, CalendarDisplayProp, CalendarColorProp } from './types';

    import { ViewControls } from './components/controls/ViewControls';

    import { ViewModeSelector } from './components/controls/ViewModeSelector';

    import { AnimatedLoadingSkeleton } from
    './components/shared/AnimatedLoadingSkeleton';

    import { ListView } from './components/views/ListView';

    import { CardView } from './components/views/CardView';

    import { TableView } from './components/views/TableView';

    import { KanbanView } from './components/views/KanbanView';

    import { CalendarView } from './components/views/CalendarView';

    import { EmptyState } from './components/shared/EmptyState';


    // Define the props for the controlled DynamicView component

    export interface DynamicViewProps {
      // Config
      viewConfig: ViewConfig;
      
      // Data & State
      items: GenericItem[];
      isLoading: boolean;
      isInitialLoading: boolean;
      totalItemCount: number;
      hasMore: boolean;
      
      // Controlled State Props
      viewMode: ViewMode;
      filters: FilterConfig;
      sortConfig: SortConfig | null;
      groupBy: string;
      activeGroupTab: string;
      page: number;
      selectedItemId?: string;
      // Calendar-specific state
      calendarDateProp?: CalendarDateProp;
      calendarDisplayProps?: CalendarDisplayProp[];
      calendarItemLimit?: 'all' | number;
      calendarColorProp?: CalendarColorProp;

      // State Change Callbacks
      onViewModeChange: (mode: ViewMode) => void;
      onFiltersChange: (filters: FilterConfig) => void;
      onSortChange: (sort: SortConfig | null) => void;
      onGroupByChange: (group: string) => void;
      onActiveGroupTabChange: (tab: string) => void;
      onPageChange: (page: number) => void;
      onItemSelect: (item: GenericItem) => void;
      onItemUpdate?: (itemId: string, updates: Partial<GenericItem>) => void;
      // Calendar-specific callbacks
      onCalendarDatePropChange?: (prop: CalendarDateProp) => void;
      onCalendarDisplayPropsChange?: (props: CalendarDisplayProp[]) => void;
      onCalendarItemLimitChange?: (limit: 'all' | number) => void;
      onCalendarColorPropChange?: (prop: CalendarColorProp) => void;
      
      // Custom Renderers
      renderHeaderControls?: () => ReactNode;
      renderStats?: () => ReactNode;
      renderCta?: (viewMode: ViewMode) => ReactNode;
    }


    export function DynamicView({ viewConfig, ...rest }: DynamicViewProps) {
      
      const { viewMode, isInitialLoading, items, groupBy } = rest;

      const groupedData = useMemo(() => {
        if (groupBy === 'none' || viewMode !== 'kanban') {
            return null;
        }
        return items.reduce((acc, item) => {
            const groupKey = String(item[groupBy as keyof GenericItem]) || 'N/A';
            if (!acc[groupKey]) {
                acc[groupKey] = [] as GenericItem[];
            }
            acc[groupKey].push(item);
            return acc;
        }, {} as Record<string, GenericItem[]>);
      }, [items, groupBy, viewMode]);

      const renderViewForData = useCallback((data: GenericItem[]) => {
        switch (viewMode) {
            case 'table': return <TableView data={data} />;
            case 'cards': return <CardView data={data} />;
            case 'grid': return <CardView data={data} isGrid />;
            case 'list': default: return <ListView data={data} />;
        }
      }, [viewMode]);

      const renderContent = () => {
        if (isInitialLoading) {
          return <AnimatedLoadingSkeleton viewMode={viewMode} />;
        }

        if (viewMode === 'calendar') {
            return <CalendarView data={items} />;
        }

        if (viewMode === 'kanban') {
            return groupedData ? (
              <KanbanView data={groupedData} />
            ) : (
              <div className="flex items-center justify-center h-96 text-muted-foreground">
                Group data by a metric to use the Kanban view.
              </div>
            );
        }
        
        if (items.length === 0 && !isInitialLoading) {
            return <EmptyState />;
        }
        
        // This will be expanded later to handle group tabs
        return renderViewForData(items);
      };

      return (
        <DynamicViewProvider viewConfig={viewConfig} {...rest}>
          <div className="space-y-6">
              <div className="space-y-4">
                  <div className="flex flex-col md:flex-row md:items-start md:justify-between gap-4">
                      <div className="flex-1">
                          {rest.renderHeaderControls ? rest.renderHeaderControls() : (
                              <>
                                  <h1 className="text-2xl font-bold tracking-tight">Data Showcase</h1>
                                  <p className="text-muted-foreground">
                                      {isInitialLoading 
                                          ? "Loading projects..." 
                                          : `Showing ${items.length} of ${rest.totalItemCount} item(s)`}
                                  </p>
                              </>
                          )}
                      </div>
                      <ViewModeSelector />
                  </div>
                  <ViewControls />
              </div>

              {rest.renderStats && !isInitialLoading && rest.renderStats()}
              
              <div className="min-h-[500px]">
                  {renderContent()}
              </div>
          </div>
        </DynamicViewProvider>
      );
    }
  src/features/dynamic-view/components/views/TableView.tsx: >-
    import { useRef, useLayoutEffect, useMemo } from 'react'

    import { gsap } from 'gsap'

    import { cn } from '@/lib/utils'

    import { 
      ArrowUpDown, 
      ArrowUp, 
      ArrowDown,
      ExternalLink
    } from 'lucide-react'

    import type { GenericItem } from '../../types'

    import { EmptyState } from '../shared/EmptyState'

    import { capitalize } from '@/lib/utils'

    import { AddDataItemCta } from '../shared/AddDataItemCta'

    import { useDynamicView } from '../../DynamicViewContext'

    import { FieldRenderer } from '../shared/FieldRenderer'


    export function TableView({ data }: { data: GenericItem[] }) {
      const { config, sortConfig, onSortChange, groupBy, onItemSelect, selectedItemId } = useDynamicView();
      const { tableView: viewConfig } = config;

      const tableRef = useRef<HTMLTableElement>(null)
      const animatedItemsCount = useRef(0)

      useLayoutEffect(() => {
        if (tableRef.current) {
          // Only select item rows for animation, not group headers
          const newItems = Array.from( 
            tableRef.current.querySelectorAll('tbody tr')
          ).filter(tr => !(tr as HTMLElement).dataset.groupHeader)
           .slice(animatedItemsCount.current);
          gsap.fromTo(newItems,
            { y: 20, opacity: 0 },
            {
              duration: 0.5,
              y: 0,
              opacity: 1,
              stagger: 0.05,
              ease: "power2.out",
            },
          );
          animatedItemsCount.current = data.length;
        }
      }, [data]);

      const SortIcon = ({ field }: { field: string }) => {
        if (sortConfig?.key !== field) {
          return <ArrowUpDown className="w-4 h-4 opacity-50" />
        }
        if (sortConfig.direction === 'asc') {
          return <ArrowUp className="w-4 h-4 text-primary" />
        }
        if (sortConfig.direction === 'desc') {
          return <ArrowDown className="w-4 h-4 text-primary" />
        }
        return <ArrowUpDown className="w-4 h-4 opacity-50" />
      }

      const handleSortClick = (field: string) => {
        const newDirection = (sortConfig?.key === field && sortConfig.direction === 'desc') ? 'asc' : 'desc';
        onSortChange({ key: field, direction: newDirection });
      }

      const groupedData = useMemo(() => {
        if (groupBy === 'none') return null;
        return (data as GenericItem[]).reduce((acc, item) => {
          const groupKey = item[groupBy as 'status' | 'priority' | 'category'] || 'N/A';
          if (!acc[groupKey]) {
            acc[groupKey] = [];
          }
          acc[groupKey].push(item);
          return acc;
        }, {} as Record<string, GenericItem[]>);
      }, [data, groupBy]);

      if (data.length === 0) {
        return <EmptyState />
      }

      return (
        <div className="relative overflow-hidden rounded-2xl border bg-card/50 backdrop-blur-sm">
          <div className="overflow-x-auto">
            <table ref={tableRef} className="w-full">
              <thead>
                <tr className="border-b border-border/50 bg-muted/20">
                  {viewConfig.columns.map(col => (
                    <th key={col.fieldId} className="text-left p-4 font-semibold text-sm">
                      {col.isSortable ? (
                        <button
                          onClick={() => handleSortClick(col.fieldId)}
                          className="flex items-center gap-2 hover:text-primary transition-colors"
                        >
                          {col.label}
                          <SortIcon field={col.fieldId} />
                        </button>
                      ) : (
                        <span>{col.label}</span>
                      )}
                    </th>
                  ))}
                  <th className="text-center p-4 font-semibold text-sm w-16">Actions</th>
                </tr>
              </thead>
              <tbody>
                {groupedData
                  ? Object.entries(groupedData).flatMap(([groupName, items]) => [
                      <tr key={groupName} data-group-header="true" className="sticky top-0 z-10">
                        <td colSpan={viewConfig.columns.length + 1} className="p-2 bg-muted/50 backdrop-blur-sm">
                          <div className="flex items-center gap-2">
                            <h3 className="font-semibold text-sm">{capitalize(groupName)}</h3>
                            <span className="text-xs px-2 py-0.5 bg-background rounded-full font-medium">{items.length}</span>
                          </div>
                        </td>
                      </tr>,
                      ...items.map(item => <TableRow key={item.id} item={item} isSelected={selectedItemId === item.id} onItemSelect={onItemSelect} />)
                    ])
                  : data.map(item => <TableRow key={item.id} item={item} isSelected={selectedItemId === item.id} onItemSelect={onItemSelect} />)
                }
                <AddDataItemCta viewMode='table' colSpan={viewConfig.columns.length + 1} />
              </tbody>
            </table>
          </div>
        </div>
      )
    }


    function TableRow({ item, isSelected, onItemSelect }: { item: GenericItem;
    isSelected: boolean; onItemSelect: (item: GenericItem) => void }) {
      const { config } = useDynamicView();
      return (
        <tr
          onClick={() => onItemSelect(item)}
          className={cn(
            "group border-b border-border/30 transition-all duration-200 cursor-pointer",
            "hover:bg-accent/20 hover:border-primary/20",
            isSelected && "bg-primary/5 border-primary/30"
          )}
        >
          {config.tableView.columns.map(col => (
            <td key={col.fieldId} className="p-4">
              <FieldRenderer item={item} fieldId={col.fieldId} options={{ showPercentage: true }} />
            </td>
          ))}
          {/* Actions Column */}
          <td className="p-4">
            <button 
              onClick={(e) => {
                e.stopPropagation()
                onItemSelect(item)
              }}
              className="flex items-center justify-center w-8 h-8 rounded-lg hover:bg-accent transition-colors"
              title="View details"
            >
              <ExternalLink className="w-4 h-4" />
            </button>
          </td>
        </tr>
      )
    }
  src/features/dynamic-view/components/shared/AddDataItemCta.tsx: |-
    import { Plus } from 'lucide-react'
    import { cn } from '@/lib/utils'

    interface AddDataItemCtaProps {
      viewMode: 'list' | 'cards' | 'grid' | 'table'
      colSpan?: number
    }

    export function AddDataItemCta({ viewMode, colSpan }: AddDataItemCtaProps) {
      const isTable = viewMode === 'table'
      const isList = viewMode === 'list'
      const isCard = viewMode === 'cards' || viewMode === 'grid'

      const content = (
        <div
          className={cn(
            "flex items-center justify-center text-center w-full h-full p-6 gap-6",
            isCard && "flex-col min-h-[300px]",
            isList && "flex-row",
            isTable && "flex-row py-8",
          )}
        >
          <div className="flex-shrink-0">
            <div className="w-16 h-16 bg-primary/10 border-2 border-dashed border-primary/30 rounded-full flex items-center justify-center text-primary">
              <Plus className="w-8 h-8" />
            </div>
          </div>
          <div className={cn("flex-1", isCard && "text-center", isList && "text-left", isTable && "text-left")}>
            <h3 className="font-semibold text-lg mb-1 text-primary">
              Showcase Your Own Data
            </h3>
            <p className="text-muted-foreground text-sm">
              Click here to add a new item and see how it looks across all views in the demo.
            </p>
          </div>
        </div>
      )

      if (isTable) {
        return (
          <tr className="group transition-colors duration-200 hover:bg-accent/20 cursor-pointer">
            <td colSpan={colSpan}>
              {content}
            </td>
          </tr>
        )
      }

      return (
        <div
          className={cn(
            "group relative overflow-hidden rounded-3xl border-2 border-dashed border-border bg-transparent transition-all duration-300 cursor-pointer",
            "hover:bg-accent/50 hover:border-primary/30",
            isList && "rounded-2xl"
          )}
        >
          {content}
        </div>
      )
    }
  src/features/dynamic-view/components/views/CardView.tsx: >-
    import { useRef } from 'react'

    import { cn } from '@/lib/utils'

    import { ArrowUpRight } from 'lucide-react'

    import type { GenericItem } from '../../types'

    import { useStaggeredAnimation } from
    '@/hooks/useStaggeredAnimation.motion.hook'

    import { EmptyState } from '../shared/EmptyState'

    import { AddDataItemCta } from '../shared/AddDataItemCta'

    import { useDynamicView } from '../../DynamicViewContext'

    import { FieldRenderer } from '../shared/FieldRenderer'


    export function CardView({ data, isGrid = false }: { data: GenericItem[];
    isGrid?: boolean }) {
      const { config, onItemSelect, selectedItemId } = useDynamicView();
      const { cardView: viewConfig } = config;

      const containerRef = useRef<HTMLDivElement>(null)
      useStaggeredAnimation(containerRef, [data], { mode: 'incremental', y: 40 });

      const items = Array.isArray(data) ? data : [];
      if (items.length === 0) {
        return <EmptyState />
      }

      return (
        <div 
          ref={containerRef}
          className={cn(
            "gap-6",
            isGrid
              ? "grid grid-cols-[repeat(auto-fill,minmax(280px,1fr))]"
              : "grid grid-cols-[repeat(auto-fill,minmax(320px,1fr))]",
            "pb-4"
          )}
        >
          {items.map((item: GenericItem) => {
            const isSelected = selectedItemId === item.id
            
            return (
              <div
                key={item.id}
                onClick={() => onItemSelect(item)}
                className={cn(
                  "group relative overflow-hidden rounded-3xl border bg-card/50 backdrop-blur-sm transition-all duration-500 cursor-pointer",
                  "hover:bg-card/80 hover:shadow-xl hover:shadow-primary/10 hover:border-primary/30 hover:-translate-y-2",
                  "active:scale-[0.98]",
                  isSelected && "ring-2 ring-primary/30 border-primary/40 bg-card/90 shadow-lg shadow-primary/20",
                )}
              >
                {/* Card Header with Thumbnail */}
                <div className="relative p-6 pb-4">
                  <div className="flex items-start justify-between mb-4">
                    <div className="w-16 h-16 bg-gradient-to-br from-primary/20 to-primary/10 rounded-2xl flex items-center justify-center text-3xl group-hover:scale-110 transition-transform duration-300">
                      <FieldRenderer item={item} fieldId={viewConfig.thumbnailField} />
                    </div>
                    <ArrowUpRight className="w-5 h-5 text-muted-foreground group-hover:text-primary group-hover:translate-x-1 group-hover:-translate-y-1 transition-all duration-300" />
                  </div>

                  {/* Header Fields (e.g., priority indicator) */}
                  <div className="absolute top-4 right-4 flex items-center gap-2">
                    {viewConfig.headerFields.map(fieldId => (
                      <FieldRenderer key={fieldId} item={item} fieldId={fieldId} options={{ displayAs: 'indicator' }} />
                    ))}
                  </div>
                </div>

                {/* Card Content */}
                <div className="px-6 pb-6">
                  <h3 className="font-semibold text-lg mb-2 group-hover:text-primary transition-colors line-clamp-2">
                    <FieldRenderer item={item} fieldId={viewConfig.titleField} />
                  </h3>
                  <p className="text-muted-foreground text-sm mb-4 line-clamp-3">
                    <FieldRenderer item={item} fieldId={viewConfig.descriptionField} />
                  </p>

                  {/* Status and Category */}
                  <div className="flex items-center gap-2 mb-4">
                    <FieldRenderer item={item} fieldId={viewConfig.statusField} />
                    <FieldRenderer item={item} fieldId={viewConfig.categoryField} />
                  </div>

                  {/* Tags, Progress, Assignee */}
                  <div className="space-y-4 mb-4">
                    <FieldRenderer item={item} fieldId={viewConfig.tagsField} />
                    <FieldRenderer item={item} fieldId={viewConfig.progressField} />
                    <FieldRenderer item={item} fieldId={viewConfig.assigneeField} />
                  </div>

                  {/* Metrics and Date */}
                  <div className="flex items-center justify-between text-xs text-muted-foreground">
                    <FieldRenderer item={item} fieldId={viewConfig.metricsField} />
                    <FieldRenderer item={item} fieldId={viewConfig.dateField} />
                  </div>
                </div>

                {/* Hover gradient overlay */}
                <div className="absolute inset-0 bg-gradient-to-br from-primary/5 via-transparent to-primary/5 opacity-0 group-hover:opacity-100 transition-opacity duration-500 pointer-events-none" />
                
                {/* Selection indicator */}
                {isSelected && (
                  <div className="absolute inset-0 bg-gradient-to-br from-primary/10 to-primary/5 pointer-events-none" />
                )}
              </div>
            )
          })}
          <AddDataItemCta viewMode={isGrid ? 'grid' : 'cards'} />
        </div>
      )
    }
  src/features/dynamic-view/components/views/ListView.tsx: >-
    import { useRef } from 'react'

    import { cn } from '@/lib/utils'

    import type { GenericItem } from '../../types'

    import { useStaggeredAnimation } from
    '@/hooks/useStaggeredAnimation.motion.hook'

    import { EmptyState } from '../shared/EmptyState'

    import { AddDataItemCta } from '../shared/AddDataItemCta'

    import { useDynamicView } from '../../DynamicViewContext'

    import { FieldRenderer } from '../shared/FieldRenderer'


    export function ListView({ data }: { data: GenericItem[] }) {
      const { config, onItemSelect, selectedItemId } = useDynamicView();

      const listRef = useRef<HTMLDivElement>(null)
      useStaggeredAnimation(listRef, [data], { mode: 'incremental', scale: 1, y: 20, stagger: 0.05, duration: 0.4 });

      const items = Array.isArray(data) ? data : [];
      if (items.length === 0) {
        return <EmptyState />
      }

      return (
        <div ref={listRef}>
          {items.map((item: GenericItem) => {
            const isSelected = selectedItemId === item.id
            
            return (
              <div key={item.id} className="px-2">
                <div
                  onClick={() => onItemSelect(item)}
                  className={cn(
                    "group flex items-center px-2 py-2 rounded-md transition-colors duration-200 cursor-pointer",
                    "hover:bg-accent/80",
                    isSelected ? "bg-accent" : "bg-transparent"
                  )}
                >
                  {/* Left side: Icon and Title */}
                  <div className="flex items-center gap-3 flex-1 min-w-0">
                    <div className="flex-shrink-0 w-8 text-center">
                      <FieldRenderer item={item} fieldId={config.listView.iconField} className="text-xl" />
                    </div>
                    <div className="font-medium truncate text-card-foreground group-hover:text-primary">
                      <FieldRenderer item={item} fieldId={config.listView.titleField} />
                    </div>
                  </div>

                  {/* Right side: Metadata */}
                  <div className="flex shrink-0 items-center gap-2 sm:gap-4 md:gap-6 ml-4 text-sm text-muted-foreground">
                    {config.listView.metaFields.map(fieldConfig => (
                      <div key={fieldConfig.fieldId} className={fieldConfig.className}>
                        <FieldRenderer item={item} fieldId={fieldConfig.fieldId} options={{ avatarClassName: 'w-7 h-7' }} />
                      </div>
                    ))}
                  </div>
                </div>
              </div>
            )
          })}
          <AddDataItemCta viewMode='list' />
        </div>
      )
    }
  src/pages/DataDemo/index.tsx: >-
    import { useRef, useEffect, useCallback, useMemo, type ReactNode } from
    'react'

    import {
      Layers, 
      AlertTriangle, 
      PlayCircle, 
      Loader2,
      TrendingUp,
      CheckCircle,
      Clock,
      Archive,
      PlusCircle,
    } from 'lucide-react'

    import { gsap } from 'gsap'

    import { DynamicView } from '@/features/dynamic-view/DynamicView'

    import { PageLayout } from '@/components/shared/PageLayout'

    import { useScrollToBottom } from '@/hooks/useScrollToBottom.hook';

    import { ScrollToBottomButton } from
    '@/components/shared/ScrollToBottomButton';

    import { StatCard } from '@/components/shared/StatCard'

    import { mockDataItems } from './data/mockData'

    import type { GenericItem } from '@/features/dynamic-view/types'

    import { useAppViewManager } from '@/hooks/useAppViewManager.hook'

    import { useAutoAnimateStats } from './hooks/useAutoAnimateStats.hook'

    import { useDataDemoStore } from './store/dataDemo.store'

    import { 

    } from './store/dataDemo.store'


    import { dataDemoViewConfig } from './DataDemo.config';


    type Stat = {
      title: string;
      value: string;
      icon: React.ReactNode;
      change: string;
      trend: 'up' | 'down';
      type?: 'card';
    };


    type ChartStat = {
      title: string;
      value: string;
      icon: React.ReactNode;
      change: string;
      trend: 'up' | 'down';
      type: 'chart';
      chartData: number[];
    };


    type StatItem = Stat | ChartStat;


    export default function DataDemoPage() {
      const {
        viewMode,
        groupBy,
        activeGroupTab,
        setActiveGroupTab,
        setGroupBy,
        setSort,
        setActiveGroupTab,
        page,
        filters,
        sortConfig,
        setPage,
        setFilters,
        setViewMode,
        onItemSelect,
      } = useAppViewManager();

      const { items: allItems, hasMore, isLoading, isInitialLoading, totalItemCount, loadData } = useDataDemoStore(state => ({
        items: state.items,
        hasMore: state.hasMore,
        isLoading: state.isLoading,
        isInitialLoading: state.isInitialLoading,
        totalItemCount: state.totalItemCount,
        loadData: state.loadData,
      }));

      const statsRef = useRef<HTMLDivElement>(null)
      const scrollRef = useRef<HTMLDivElement>(null);

      // Note: The `DynamicViewProvider` needs `GenericItem[]`. 
      // Our store uses `GenericItem` so no cast is needed.
      // Auto-hide stats container on scroll down
      useAutoAnimateStats(scrollRef, statsRef);

      // Calculate stats from data
      const totalItems = mockDataItems.length
      const { showScrollToBottom, scrollToBottom, handleScroll } = useScrollToBottom(scrollRef);

      const activeItems = mockDataItems.filter(item => item.status === 'active').length
      const highPriorityItems = mockDataItems.filter(item => item.priority === 'high' || item.priority === 'critical').length
      const avgCompletion = totalItems > 0 ? Math.round(
        mockDataItems.reduce((acc, item) => acc + item.metrics.completion, 0) / totalItems
      ) : 0

      const stats: StatItem[] = [
        {
          title: "Total Projects",
          value: totalItems.toString(),
          icon: <Layers className="w-5 h-5" />,
          change: "+5.2% this month",
          trend: "up" as const,
          type: 'chart',
          chartData: [120, 125, 122, 130, 135, 138, 142]
        },
        {
          title: "Active Projects",
          value: activeItems.toString(),
          icon: <PlayCircle className="w-5 h-5" />,
          change: "+2 this week", 
          trend: "up" as const,
          type: 'chart',
          chartData: [45, 50, 48, 55, 53, 60, 58]
        },
        {
          title: "High Priority",
          value: highPriorityItems.toString(),
          icon: <AlertTriangle className="w-5 h-5" />,
          change: "-1 from last week",
          trend: "down" as const,
          type: 'chart',
          chartData: [25, 26, 28, 27, 26, 24, 23]
        },
        {
          title: "Avg. Completion",
          value: `${avgCompletion}%`,
          icon: <TrendingUp className="w-5 h-5" />,
          change: "+3.2%",
          trend: "up" as const,
          type: 'chart',
          chartData: [65, 68, 70, 69, 72, 75, 78],
        },
        {
          title: "Completion Rate",
          value: "88%",
          icon: <CheckCircle className="w-5 h-5" />,
          change: "+1.5% this month",
          trend: "up" as const,
          type: 'chart',
          chartData: [80, 82, 81, 84, 85, 87, 88],
        },
        {
          title: "Overdue Items",
          value: "8",
          icon: <Clock className="w-5 h-5" />,
          change: "-3 this week",
          trend: "down" as const,
        },
        {
          title: "New This Week",
          value: "12",
          icon: <PlusCircle className="w-5 h-5" />,
          change: "+2 from last week",
          trend: "up" as const,
        },
        {
          title: "Archived Projects",
          value: "153",
          icon: <Archive className="w-5 h-5" />,
          change: "+20 this month",
          trend: "up" as const,
        }
      ]

      useEffect(() => {
        // Animate stats cards in
        if (!isInitialLoading && statsRef.current) {
          gsap.fromTo(statsRef.current.children,
            { y: 30, opacity: 0 },
            {
              duration: 0.5,
              y: 0,
              opacity: 1,
              stagger: 0.08,
              ease: "power2.out"
            }
          )
        }
      }, [isInitialLoading]);

      useEffect(() => {
        loadData({
          page,
          groupBy,
          filters,
          sortConfig,
          isFullLoad: viewMode === 'calendar' || viewMode === 'kanban',
        });
      }, [page, groupBy, filters, sortConfig, loadData, viewMode]);

      const observer = useRef<IntersectionObserver>();
      const loaderRef = useCallback(
        (node: Element | null) => {
          if (isLoading) return;
          if (observer.current) observer.current.disconnect();

          observer.current = new IntersectionObserver((entries) => {
            if (entries[0].isIntersecting && hasMore) {
              setPage(page + 1);
            }
          });
          if (node) observer.current.observe(node);
        },
        [isLoading, hasMore, page, setPage],
      );
      
      useEffect(() => {
        // Auto-group by status when switching to kanban view for the first time
        if (viewMode === 'kanban' && groupBy === 'none') {
          setGroupBy('status');
          setSort(null); // Kanban is manually sorted, so disable programmatic sort
        }
        // For calendar view, we don't want grouping.
        else if (viewMode === 'calendar' && groupBy !== 'none') {
          setGroupBy('none');
        }
      }, [viewMode, groupBy, setGroupBy, setSort]);

      return (
        <PageLayout
          scrollRef={scrollRef}
          onScroll={handleScroll}
        >
          <DynamicView
            viewConfig={dataDemoViewConfig}
            items={allItems as GenericItem[]}
            isLoading={isLoading}
            isInitialLoading={isInitialLoading}
            totalItemCount={totalItemCount}
            hasMore={hasMore}
            // Controlled state
            viewMode={viewMode}
            filters={filters}
            sortConfig={sortConfig}
            groupBy={groupBy}
            activeGroupTab={activeGroupTab}
            page={page}
            // Callbacks
            onViewModeChange={setViewMode}
            onFiltersChange={setFilters}
            onSortChange={setSort}
            onGroupByChange={setGroupBy}
            onActiveGroupTabChange={setActiveGroupTab}
            onPageChange={setPage}
            onItemSelect={onItemSelect}
            // Custom Renderers
            renderStats={() => (
              <div ref={statsRef} className="flex overflow-x-auto gap-6 pb-4 no-scrollbar">
                {stats.map((stat) => (
                  <StatCard
                    className="w-64 md:w-72 flex-shrink-0"
                    key={stat.title}
                    title={stat.title}
                    value={stat.value}
                    change={stat.change}
                    trend={stat.trend}
                    icon={stat.icon}
                    chartData={stat.type === 'chart' ? stat.chartData : undefined}
                  />
                ))}
              </div>
            )}
          />

            {/* Loader for infinite scroll */}
            <div ref={loaderRef} className="flex justify-center items-center py-6">
              {isLoading && !isInitialLoading && groupBy === 'none' && viewMode !== 'calendar' && viewMode !== 'kanban' && (
                <div className="flex items-center gap-2 text-muted-foreground">
                  <Loader2 className="w-5 h-5 animate-spin" />
                  <span>Loading more...</span>
                </div>
              )}
              {!isLoading && !hasMore && allItems.length > 0 && !isInitialLoading && groupBy === 'none' && viewMode !== 'calendar' && viewMode !== 'kanban' && (
                <p className="text-muted-foreground">You've reached the end.</p>
              )}
            </div>
          <ScrollToBottomButton isVisible={showScrollToBottom} onClick={scrollToBottom} />
        </PageLayout>
      );
    }
approved: true
linesAdded: null
linesRemoved: null
linesDifference: null
gitCommittedAt: null
status: committed
id: 529
