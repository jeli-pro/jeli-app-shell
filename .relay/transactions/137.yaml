uuid: c251cce6-c4d6-4447-975a-064843477197
projectId: jeli-app-shell
createdAt: '2025-10-12T03:17:37.943Z'
gitCommitMsg: >-
  feat(dnd): improve split view drag and drop experience

  Refactored the drag-and-drop zones in the AppShell to be context-aware of the
  current layout state.

  - In split-view mode, drop zones now correctly cover the entire main content
  area and the right pane independently, allowing for content replacement in
  either pane. - In normal view, the original behavior of a 50/50 split drop
  zone in the main content area is preserved. - Enhanced visual feedback by
  adding transitions and showing drop-related text only on hover over the target
  zone.
promptSummary: >-
  I need to improve the drag and drop feature for split view. The visual cues
  for drop areas are not correct when split view is active.
reasoning:
  - >-
    I've analyzed the request to improve the drag-and-drop feature, especially
    in split-view mode. Here's my plan to address the issue:
  - >-
    1.  **Refactor Drop Zones in `AppShell.tsx`**: I will modify the main layout
    component to make the drop zones context-aware of the current `bodyState`.
  - '2.  **Split View Logic**:'
  - >-
    *   When in `split_view`, the main content area will have a single,
    full-width drop zone to replace its content.
  - >-
    *   A new, separate drop zone will be added over the right pane, allowing
    its content to be replaced independently.
  - '3.  **Normal View Logic**:'
  - >-
    *   When not in split view, the existing behavior of splitting the main
    content area into two half-width drop zones (one for the main content, one
    to open the right pane) will be maintained.
  - '4.  **Enhance User Feedback**:'
  - >-
    *   I'll add `transition-all` to the drop zones for smoother visual feedback
    (e.g., when the border and background color appear on hover).
  - >-
    *   The drop zone's instructional text ("Drop to Left", "Drop to Replace",
    etc.) will now only appear when the user is actively hovering over that
    specific drop zone, making the UI cleaner during a drag operation. The text
    will also be updated to be more descriptive of the action in each context.
  - >-
    This will result in a more intuitive and powerful drag-and-drop experience
    that correctly reflects the application's layout.
  - 'Here are the changes for `src/components/layout/AppShell.tsx`:'
operations:
  - type: write
    path: src/components/layout/AppShell.tsx
    content: >+
      --- src/components/layout/AppShell.tsx

      +++ src/components/layout/AppShell.tsx

      @@ -42,6 +42,8 @@
         const topBarContainerRef = useRef<HTMLDivElement>(null)
         const mainAreaRef = useRef<HTMLDivElement>(null)
       
      +  const isSplitView = bodyState === BODY_STATES.SPLIT_VIEW;

      +
         // Custom hooks for logic
         useResizableSidebar(sidebarRef, resizeHandleRef);
         useResizableRightPane();
      @@ -142,48 +144,59 @@
                 <div className="flex flex-1 min-h-0">
                   <div ref={mainAreaRef} className="relative flex-1 overflow-hidden bg-background">
                     {/* Left drop overlay */}
                     <div
                       className={cn(
      -                  "absolute inset-y-0 left-0 z-40 border-2
      border-transparent",

      -                  draggedPage ? "pointer-events-auto w-1/2" :
      "pointer-events-none w-0",

      +                  "absolute inset-y-0 left-0 z-40 border-2
      border-transparent transition-all",

      +                  draggedPage

      +                    ? cn("pointer-events-auto", isSplitView ? 'w-full' :
      'w-1/2')

      +                    : "pointer-events-none w-0",
                         dragHoverTarget === 'left' && "bg-primary/10 border-primary"
                       )}
                       onDragOver={handleDragOverLeft}
                       onDrop={handleDropLeft}
                       onDragLeave={() => {
                         if (dragHoverTarget === 'left') dispatch({ type: 'SET_DRAG_HOVER_TARGET', payload: null });
                       }}
                     >
      -                {draggedPage && (

      +                {draggedPage && dragHoverTarget === 'left' && (
                         <div className="absolute inset-0 flex items-center justify-center text-sm font-medium text-primary-foreground/80">
      -                    <span className="px-3 py-1 rounded-md
      bg-primary/70">Drop to Left</span>

      +                    <span className="px-3 py-1 rounded-md
      bg-primary/70">{isSplitView ? 'Drop to Replace' : 'Drop to Left'}</span>
                         </div>
                       )}
                     </div>
                     {mainContentWithProps}
      -              {/* Right drop overlay (over main area to allow docking
      even if pane hidden) */}

      -              <div

      -                className={cn(

      -                  "absolute inset-y-0 right-0 z-40 border-2
      border-transparent",

      -                  draggedPage ? "pointer-events-auto w-1/2" :
      "pointer-events-none",

      -                  dragHoverTarget === 'right' && "bg-primary/10
      border-primary"

      -                )}

      -                onDragOver={handleDragOverRight}

      -                onDrop={handleDropRight}

      -                onDragLeave={() => {

      -                  if (dragHoverTarget === 'right') dispatch({ type:
      'SET_DRAG_HOVER_TARGET', payload: null });

      -                }}

      -              >

      -                {draggedPage && (

      -                  <div className="absolute inset-0 flex items-center
      justify-center">

      -                    <span className="px-3 py-1 rounded-md bg-primary/70
      text-sm font-medium text-primary-foreground/80">Drop to Right</span>

      -                  </div>

      -                )}

      -              </div>

      +              {/* Right drop overlay (over main area, ONLY when NOT in
      split view) */}

      +              {!isSplitView && (

      +                <div

      +                  className={cn(

      +                    "absolute inset-y-0 right-0 z-40 border-2
      border-transparent",

      +                    draggedPage ? "pointer-events-auto w-1/2" :
      "pointer-events-none",

      +                    dragHoverTarget === 'right' && "bg-primary/10
      border-primary"

      +                  )}

      +                  onDragOver={handleDragOverRight}

      +                  onDrop={handleDropRight}

      +                  onDragLeave={() => {

      +                    if (dragHoverTarget === 'right') dispatch({ type:
      'SET_DRAG_HOVER_TARGET', payload: null });

      +                  }}

      +                >

      +                  {draggedPage && dragHoverTarget === 'right' && (

      +                    <div className="absolute inset-0 flex items-center
      justify-center">

      +                      <span className="px-3 py-1 rounded-md bg-primary/70
      text-sm font-medium text-primary-foreground/80">Drop to Right</span>

      +                    </div>

      +                  )}

      +                </div>

      +              )}
                   </div>
      -            {rightPaneWithProps}

      +            {isSplitView ? (

      +              <div className={cn("relative transition-all", draggedPage
      && "pointer-events-auto", dragHoverTarget === 'right' && "bg-primary/10
      border-2 border-primary")} onDragOver={handleDragOverRight}
      onDrop={handleDropRight} onDragLeave={() => { if (dragHoverTarget ===
      'right') dispatch({ type: 'SET_DRAG_HOVER_TARGET', payload: null }); }}>

      +                {draggedPage && dragHoverTarget === 'right' && (

      +                  <div className="absolute inset-0 flex items-center
      justify-center z-50">

      +                    <span className="px-3 py-1 rounded-md bg-primary/70
      text-sm font-medium text-primary-foreground/80">Drop to Replace</span>

      +                  </div>

      +                )}

      +                {rightPaneWithProps}

      +              </div>

      +            ) : rightPaneWithProps}
                 </div>
               </div>
             </div>

    patchStrategy: standard-diff
snapshot:
  src/components/layout/AppShell.tsx: >-
    import React, { useRef, type ReactElement, useCallback } from 'react'

    import { cn } from '@/lib/utils'

    import { CommandPalette } from '@/components/global/CommandPalette';

    import { useAppStore } from '@/store/appStore';

    import { useAppShell } from '@/context/AppShellContext';

    import { SIDEBAR_STATES, BODY_STATES } from '@/lib/utils'

    import { useResizableSidebar, useResizableRightPane } from
    '@/hooks/useResizablePanes.hook'

    import { useSidebarAnimations, useBodyStateAnimations } from
    '@/hooks/useAppShellAnimations.hook'


    interface AppShellProps {
      sidebar: ReactElement;
      topBar: ReactElement;
      mainContent: ReactElement;
      rightPane: ReactElement;
      commandPalette?: ReactElement;
    }


    const pageToPaneMap: Record<string, 'main' | 'settings' | 'toaster' |
    'notifications'> = {
      dashboard: 'main',
      settings: 'settings',
      toaster: 'toaster',
      notifications: 'notifications',
    };



    export function AppShell({ sidebar, topBar, mainContent, rightPane,
    commandPalette }: AppShellProps) {
      const {
        sidebarState,
        dispatch,
        autoExpandSidebar,
        toggleSidebar,
        peekSidebar,
        draggedPage,
        dragHoverTarget,
        toggleSplitView,
        openSidePane,
        bodyState,
        rightPaneWidth,
        sidePaneContent,
        closeSidePane,
      } = useAppShell();
      
      const { isDarkMode, toggleDarkMode, handleNavigation, activePage } = useAppStore();
      const appRef = useRef<HTMLDivElement>(null)
      const sidebarRef = useRef<HTMLDivElement>(null)
      const mainContentRef = useRef<HTMLDivElement>(null)
      const rightPaneRef = useRef<HTMLDivElement>(null)
      const resizeHandleRef = useRef<HTMLDivElement>(null)
      const topBarContainerRef = useRef<HTMLDivElement>(null)
      const mainAreaRef = useRef<HTMLDivElement>(null)

      // Custom hooks for logic
      useResizableSidebar(sidebarRef, resizeHandleRef);
      useResizableRightPane();
      useSidebarAnimations(sidebarRef, resizeHandleRef);
      useBodyStateAnimations(appRef, mainContentRef, rightPaneRef, topBarContainerRef, mainAreaRef);
      
      const sidebarWithProps = React.cloneElement(sidebar, { 
        ref: sidebarRef,
        onMouseEnter: () => {
          if (autoExpandSidebar && sidebarState === SIDEBAR_STATES.COLLAPSED) {
            peekSidebar()
          }
        },
        onMouseLeave: () => {
          if (autoExpandSidebar && sidebarState === SIDEBAR_STATES.PEEK) {
            dispatch({ type: 'SET_SIDEBAR_STATE', payload: SIDEBAR_STATES.COLLAPSED });
          }
        }
      });

      const topBarWithProps = React.cloneElement(topBar, {
        onToggleSidebar: toggleSidebar,
        onToggleDarkMode: toggleDarkMode,
      });

      const mainContentWithProps = React.cloneElement(mainContent, {
        ref: mainContentRef,
      });

      const rightPaneWithProps = React.cloneElement(rightPane, { ref: rightPaneRef });

      // Drag and drop handlers for docking
      const handleDragOverLeft = useCallback((e: React.DragEvent) => {
        if (!draggedPage) return;
        e.preventDefault();
        if (dragHoverTarget !== 'left') {
          dispatch({ type: 'SET_DRAG_HOVER_TARGET', payload: 'left' });
        }
      }, [draggedPage, dragHoverTarget, dispatch]);

      const handleDropLeft = useCallback(() => {
        if (!draggedPage) return;
        
        const originalActivePage = activePage;
        const originalActivePagePaneContent = pageToPaneMap[originalActivePage];

        // If we drop the page that's already in the side pane, just make it the main view.
        const paneContentOfDraggedPage = pageToPaneMap[draggedPage];
        if (paneContentOfDraggedPage === sidePaneContent && (bodyState === BODY_STATES.SIDE_PANE || bodyState === BODY_STATES.SPLIT_VIEW)) {
          closeSidePane();
          handleNavigation(draggedPage);
        } 
        // New context-aware logic: if we are in normal view and drop a NEW page on the left
        else if (bodyState === BODY_STATES.NORMAL && draggedPage !== originalActivePage) {
            if (originalActivePagePaneContent) {
                // 1. Set the right pane content to be the original page
                dispatch({ type: 'SET_SIDE_PANE_CONTENT', payload: originalActivePagePaneContent });
                // 2. Set the main page to be the new dragged page
                handleNavigation(draggedPage);
                // 3. Switch to split view
                dispatch({ type: 'SET_BODY_STATE', payload: BODY_STATES.SPLIT_VIEW });
            } else {
                // Fallback for pages that can't be in a pane
                handleNavigation(draggedPage);
            }
        } else { // Default behavior: just make the dropped page the main one
          handleNavigation(draggedPage);
        }
        
        dispatch({ type: 'SET_DRAGGED_PAGE', payload: null });
        dispatch({ type: 'SET_DRAG_HOVER_TARGET', payload: null });
      }, [draggedPage, activePage, bodyState, sidePaneContent, handleNavigation, dispatch, closeSidePane]);

      const handleDragOverRight = useCallback((e: React.DragEvent) => {
        if (!draggedPage) return;
        e.preventDefault();
        if (dragHoverTarget !== 'right') {
          dispatch({ type: 'SET_DRAG_HOVER_TARGET', payload: 'right' });
        }
      }, [draggedPage, dragHoverTarget, dispatch]);

      const handleDropRight = useCallback(() => {
        if (!draggedPage) return;
        const pane = pageToPaneMap[draggedPage as keyof typeof pageToPaneMap];
        if (pane) {
          // If dropping the currently active page to the right,
          // set a default page (e.g., dashboard) as the new active page.
          if (draggedPage === activePage) {
            handleNavigation('dashboard');
          }

          // Set the right pane content and ensure split view
          dispatch({ type: 'SET_SIDE_PANE_CONTENT', payload: pane });
          if (bodyState === BODY_STATES.NORMAL) {
            toggleSplitView(pane);
          } else if (bodyState === BODY_STATES.SIDE_PANE) {
            toggleSplitView();
          }
        }
        dispatch({ type: 'SET_DRAGGED_PAGE', payload: null });
        dispatch({ type: 'SET_DRAG_HOVER_TARGET', payload: null });
      }, [draggedPage, toggleSplitView, dispatch, bodyState, activePage, handleNavigation]);

      return (
        <div 
          ref={appRef}
          className={cn(
            "relative h-screen w-screen overflow-hidden bg-background transition-colors duration-300",
            isDarkMode && "dark"
          )}
        >
          <div className="flex h-screen overflow-hidden">
            {/* Enhanced Sidebar */}
            {sidebarWithProps}

            {/* Resize Handle */}
            {sidebarState !== SIDEBAR_STATES.HIDDEN && (
              <div
                ref={resizeHandleRef}
                className={cn(
                  "absolute top-0 w-2 h-full bg-transparent hover:bg-primary/20 cursor-col-resize z-50 transition-colors duration-200 group -translate-x-1/2"
                )}
                onMouseDown={(e) => {
                  e.preventDefault()
                  dispatch({ type: 'SET_IS_RESIZING', payload: true });
                }}
              >
                <div className="w-0.5 h-full bg-border group-hover:bg-primary transition-colors duration-200 mx-auto" />
              </div>
            )}

            {/* Main area wrapper */}
            <div className="flex-1 flex flex-col overflow-hidden">
              <div ref={topBarContainerRef} className="relative z-30">
                {topBarWithProps}
              </div>

              <div className="flex flex-1 min-h-0">
                <div ref={mainAreaRef} className="relative flex-1 overflow-hidden bg-background">
                  {/* Left drop overlay */}
                  <div
                    className={cn(
                      "absolute inset-y-0 left-0 z-40 border-2 border-transparent",
                      draggedPage ? "pointer-events-auto w-1/2" : "pointer-events-none w-0",
                      dragHoverTarget === 'left' && "bg-primary/10 border-primary"
                    )}
                    onDragOver={handleDragOverLeft}
                    onDrop={handleDropLeft}
                    onDragLeave={() => {
                      if (dragHoverTarget === 'left') dispatch({ type: 'SET_DRAG_HOVER_TARGET', payload: null });
                    }}
                  >
                    {draggedPage && (
                      <div className="absolute inset-0 flex items-center justify-center text-sm font-medium text-primary-foreground/80">
                        <span className="px-3 py-1 rounded-md bg-primary/70">Drop to Left</span>
                      </div>
                    )}
                  </div>
                  {mainContentWithProps}
                  {/* Right drop overlay (over main area to allow docking even if pane hidden) */}
                  <div
                    className={cn(
                      "absolute inset-y-0 right-0 z-40 border-2 border-transparent",
                      draggedPage ? "pointer-events-auto w-1/2" : "pointer-events-none",
                      dragHoverTarget === 'right' && "bg-primary/10 border-primary"
                    )}
                    onDragOver={handleDragOverRight}
                    onDrop={handleDropRight}
                    onDragLeave={() => {
                      if (dragHoverTarget === 'right') dispatch({ type: 'SET_DRAG_HOVER_TARGET', payload: null });
                    }}
                  >
                    {draggedPage && (
                      <div className="absolute inset-0 flex items-center justify-center">
                        <span className="px-3 py-1 rounded-md bg-primary/70 text-sm font-medium text-primary-foreground/80">Drop to Right</span>
                      </div>
                    )}
                  </div>
                </div>
                {rightPaneWithProps}
              </div>
            </div>
          </div>
          {commandPalette || <CommandPalette />}
        </div>
      )
    }
approved: true
linesAdded: null
linesRemoved: null
linesDifference: null
gitCommittedAt: '2025-10-12T03:44:17.623Z'
status: committed
id: 137
