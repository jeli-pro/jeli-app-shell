uuid: c255b5d1-120d-4581-9f22-38d227f2df2f
projectId: amazing-app-shell
createdAt: '2025-10-11T00:31:01.917Z'
gitCommitMsg: >-
  fix(arch): resolve compilation errors and complete state decoupling

  This commit fixes several issues introduced in the previous refactoring: -
  Resolves a TypeScript compilation error in `SettingsContent.tsx` caused by an
  invalid file replacement. - Completes the state decoupling by moving
  `sidePaneContent` from the global `appStore` into the `AppShellContext`, as it
  is purely layout-related state. - Updates all dependent components to use the
  `useAppShell` hook as the single source of truth for all layout state,
  including side pane visibility and content. - Refactors composite actions like
  `openSidePane` into the `AppShellContext` for better encapsulation and
  simplifies the logic in components that toggle the side pane.
promptSummary: >-
  The user reported a TypeScript compilation error after my last refactoring.
  I'm fixing the error and correcting the logic I broke during the state
  decoupling.
reasoning:
  - >-
    You've caught some critical errors. My previous refactoring was incomplete
    and introduced both compilation and logic issues by not fully decoupling the
    layout state. A stray `useAppStore()` call in `SettingsContent.tsx` caused
    the syntax errors, and I incorrectly split the `sidePaneContent` and
    `bodyState` between two different state managers, which broke the
    application logic.
  - 'I will now correct this with a more thorough approach:'
  - >-
    1.  **Fix the Compilation Error**: I will replace the entire content of
    `src/features/settings/SettingsContent.tsx` with a corrected version that
    uses the `useAppShell` hook properly, eliminating the syntax errors.
  - >-
    2.  **Complete the State Decoupling**: I'll move `sidePaneContent` from the
    global `appStore` into the `AppShellContext`. This state is purely for
    layout and belongs with the other shell-related states.
  - >-
    3.  **Update Component Logic**: I will adjust all components
    (`EnhancedSidebar`, `TopBar`, `RightPane`, `MainContent`, `CommandPalette`)
    to source `sidePaneContent` and manage the side pane's visibility
    exclusively through the `useAppShell` hook and its `dispatch` function. This
    ensures a single, consistent source of truth for all layout concerns.
  - >-
    These changes will resolve the errors and finalize the refactoring into a
    truly pluggable and self-contained `AppShell` architecture.
  - '### Step 1: Fix `SettingsContent.tsx` and Correct Logic'
  - >-
    I will replace the entire file to fix the compilation error and correctly
    implement the logic using the `useAppShell` context.
  - '### Step 2: Update App Shell Context'
  - I will add `sidePaneContent` to the context state and reducer.
  - '### Step 3: Simplify the Global App Store Further'
  - Now that `sidePaneContent` is moved, I can remove it from `appStore`.
  - '### Step 4: Update All Dependent Components'
  - >-
    Finally, I'll update all components that were using `sidePaneContent` or
    managing the side pane to use the new context-based logic.
operations:
  - type: write
    path: src/features/settings/SettingsContent.tsx
    content: |-
      import { useState } from 'react'
      import { 
        Moon, 
        Sun, 
        Zap, 
        Eye, 
        Minimize2, 
        RotateCcw,
        Monitor,
        Smartphone,
        Palette,
        Accessibility,
        Check
      } from 'lucide-react'
      import { cn } from '@/lib/utils'
      import { useAppShell } from '@/context/AppShellContext'
      import { SettingsToggle } from './SettingsToggle'
      import { SettingsSection } from './SettingsSection'

      const colorPresets = [
        { name: 'Default Blue', value: '220 84% 60%' },
        { name: 'Rose', value: '346.8 77.2% 49.8%' },
        { name: 'Green', value: '142.1 76.2% 36.3%' },
        { name: 'Orange', value: '24.6 95% 53.1%' },
        { name: 'Violet', value: '262.1 83.3% 57.8%' },
        { name: 'Slate', value: '215.3 20.3% 65.1%' }
      ]

      export function SettingsContent() {
        const shell = useAppShell()
        const dispatch = shell.dispatch

        const [tempSidebarWidth, setTempSidebarWidth] = useState(shell.sidebarWidth)

        const handleSidebarWidthChange = (width: number) => {
          setTempSidebarWidth(width)
          dispatch({ type: 'SET_SIDEBAR_WIDTH', payload: width });
        }

        const handleReset = () => {
          shell.resetToDefaults();
          setTempSidebarWidth(280); // Reset temp state as well
        }

        const setCompactMode = (payload: boolean) => dispatch({ type: 'SET_COMPACT_MODE', payload });
        const setReducedMotion = (payload: boolean) => dispatch({ type: 'SET_REDUCED_MOTION', payload });
        const setSidebarWidth = (payload: number) => {
          dispatch({ type: 'SET_SIDEBAR_WIDTH', payload });
          setTempSidebarWidth(payload);
        };

        return (
          <div className="space-y-10">
            {/* Appearance */}
            <SettingsSection icon={<Palette />} title="Appearance">
              {/* Dark Mode */}
              <SettingsToggle
                icon={shell.isDarkMode ? <Moon className="w-4 h-4" /> : <Sun className="w-4 h-4" />}
                title="Dark Mode"
                description="Toggle dark theme"
                checked={shell.isDarkMode}
                onCheckedChange={() => dispatch({ type: 'TOGGLE_DARK_MODE' })}
              />

              {/* Compact Mode */}
              <SettingsToggle
                icon={<Minimize2 className="w-4 h-4" />}
                title="Compact Mode"
                description="Reduce spacing and sizes"
                checked={shell.compactMode}
                onCheckedChange={(payload) => dispatch({ type: 'SET_COMPACT_MODE', payload })}
              />

              {/* Accent Color */}
              <div className="space-y-3">
                <div className="flex items-center gap-3">
                  <Palette className="w-4 h-4" />
                  <div>
                    <p className="font-medium">Accent Color</p>
                    <p className="text-sm text-muted-foreground">Customize the main theme color</p>
                  </div>
                </div>
                <div className="grid grid-cols-6 gap-2 pt-1">
                  {colorPresets.map(color => {
                    const isActive = color.value === shell.primaryColor
                    return (
                      <button
                        key={color.name}
                        title={color.name}
                        onClick={() => dispatch({ type: 'SET_PRIMARY_COLOR', payload: color.value })}
                        className={cn(
                          "w-8 h-8 rounded-full border-2 transition-transform hover:scale-110 flex items-center justify-center",
                          isActive ? 'border-primary' : 'border-transparent'
                        )}
                        style={{ backgroundColor: `hsl(${color.value})` }}
                      >{isActive && <Check className="w-5 h-5 text-primary-foreground" />}</button>
                    )
                  })}
                </div>
              </div>
            </SettingsSection>

            {/* Behavior */}
            <SettingsSection icon={<Zap />} title="Behavior">
              {/* Auto Expand Sidebar */}
              <SettingsToggle
                icon={<Eye className="w-4 h-4" />}
                title="Auto Expand Sidebar"
                description="Expand on hover when collapsed"
                checked={shell.autoExpandSidebar}
                onCheckedChange={(payload) => dispatch({ type: 'SET_AUTO_EXPAND_SIDEBAR', payload })}
              />

              {/* Sidebar Width */}
              <div className="space-y-3">
                <div className="flex items-center gap-3">
                  <Monitor className="w-4 h-4" />
                  <div>
                    <p className="font-medium">Sidebar Width</p>
                    <p className="text-sm text-muted-foreground">{tempSidebarWidth}px</p>
                  </div>
                </div>
                <div className="space-y-2">
                  <input
                    type="range"
                    min="200"
                    max="500"
                    step="10"
                    value={tempSidebarWidth}
                    onChange={(e) => handleSidebarWidthChange(Number(e.target.value))}
                    className="w-full h-1.5 bg-muted rounded-lg appearance-none cursor-pointer slider"
                  />
                  <div className="flex justify-between text-xs text-muted-foreground">
                    <span>200px</span>
                    <span>350px</span>
                    <span>500px</span>
                  </div>
                </div>
              </div>
            </SettingsSection>

            {/* Accessibility */}
            <SettingsSection icon={<Accessibility />} title="Accessibility">
              {/* Reduced Motion */}
              <SettingsToggle
                icon={<Zap className="w-4 h-4" />}
                title="Reduced Motion"
                description="Minimize animations"
                checked={shell.reducedMotion}
                onCheckedChange={(payload) => dispatch({ type: 'SET_REDUCED_MOTION', payload })}
              />
            </SettingsSection>

            {/* Presets */}
            <div className="space-y-4">
              <h3 className="text-sm font-semibold text-muted-foreground uppercase tracking-wider">
                Quick Presets
              </h3>
              
              <div className="grid grid-cols-2 gap-3">
                <button 
                  onClick={() => {
                    setCompactMode(false)
                    setReducedMotion(false)
                    setSidebarWidth(320)
                  }}
                  className="p-4 bg-accent/30 hover:bg-accent/50 rounded-xl transition-colors text-left"
                >
                  <Monitor className="w-4 h-4 mb-2" />
                  <p className="font-medium text-sm">Desktop</p>
                  <p className="text-xs text-muted-foreground">Spacious layout</p>
                </button>
                
                <button 
                  onClick={() => {
                    setCompactMode(true)
                    setReducedMotion(true)
                    setSidebarWidth(240)
                  }}
                  className="p-4 bg-accent/30 hover:bg-accent/50 rounded-xl transition-colors text-left"
                >
                  <Smartphone className="w-4 h-4 mb-2" />
                  <p className="font-medium text-sm">Mobile</p>
                  <p className="text-xs text-muted-foreground">Compact layout</p>
                </button>
              </div>
            </div>
            <div className="pt-6 border-t border-border">
              <button
                onClick={handleReset}
                className="w-full flex items-center justify-center gap-2 px-4 py-2.5 bg-destructive/10 text-destructive hover:bg-destructive/20 rounded-lg transition-colors"
              >
                <RotateCcw className="w-4 h-4" />
                Reset to Defaults
              </button>
            </div>
          </div>
        )
      }

      // Custom slider styles
      const sliderStyles = `
      .slider::-webkit-slider-thumb {
        appearance: none;
        height: 18px;
        width: 18px;
        border-radius: 50%;
        background: hsl(var(--primary));
        cursor: pointer;
        border: 3px solid hsl(var(--background));
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        margin-top: -7px;
      }

      .slider::-moz-range-thumb {
        height: 18px;
        width: 18px;
        border-radius: 50%;
        background: hsl(var(--primary));
        cursor: pointer;
        border: 3px solid hsl(var(--background));
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
      }
      `

      // Inject styles
      if (typeof document !== 'undefined') {
        const styleSheet = document.createElement('style')
        styleSheet.textContent = sliderStyles
        document.head.appendChild(styleSheet)
      }
    patchStrategy: replace
  - type: write
    path: src/context/AppShellContext.tsx
    content: >+
      --- src/context/AppShellContext.tsx

      +++ src/context/AppShellContext.tsx

      @@ -10,6 +10,7 @@
       interface AppShellState {
         sidebarState: SidebarState;
         bodyState: BodyState;
      +  sidePaneContent: 'details' | 'settings' | 'main' | 'toaster' |
      'notifications';
         isDarkMode: boolean;
         sidebarWidth: number;
         rightPaneWidth: number;
      @@ -24,6 +25,7 @@
       type AppShellAction =
         | { type: 'SET_SIDEBAR_STATE'; payload: SidebarState }
         | { type: 'SET_BODY_STATE'; payload: BodyState }
      +  | { type: 'SET_SIDE_PANE_CONTENT'; payload:
      AppShellState['sidePaneContent'] }
         | { type: 'TOGGLE_DARK_MODE' }
         | { type: 'SET_SIDEBAR_WIDTH'; payload: number }
         | { type: 'SET_RIGHT_PANE_WIDTH'; payload: number }
      @@ -40,6 +42,7 @@
       const defaultState: AppShellState = {
         sidebarState: SIDEBAR_STATES.EXPANDED,
         bodyState: BODY_STATES.NORMAL,
      +  sidePaneContent: 'details',
         isDarkMode: false,
         sidebarWidth: 280,
         rightPaneWidth: typeof window !== 'undefined' ? Math.max(300, Math.round(window.innerWidth * 0.6)) : 400,
      @@ -54,6 +57,7 @@
         switch (action.type) {
           case 'SET_SIDEBAR_STATE': return { ...state, sidebarState: action.payload };
           case 'SET_BODY_STATE': return { ...state, bodyState: action.payload };
      +    case 'SET_SIDE_PANE_CONTENT': return { ...state, sidePaneContent:
      action.payload };
           case 'TOGGLE_DARK_MODE': return { ...state, isDarkMode: !state.isDarkMode };
           case 'SET_SIDEBAR_WIDTH': return { ...state, sidebarWidth: Math.max(200, Math.min(500, action.payload)) };
           case 'SET_RIGHT_PANE_WIDTH': return { ...state, rightPaneWidth: Math.max(300, Math.min(window.innerWidth * 0.8, action.payload)) };
      @@ -76,6 +80,7 @@
         showSidebar: () => void;
         peekSidebar: () => void;
         toggleFullscreen: () => void;
      +  openSidePane: (content: AppShellState['sidePaneContent']) => void;
         closeSidePane: () => void;
         resetToDefaults: () => void;
       }
      @@ -102,6 +107,15 @@
             const current = state.bodyState;
             dispatch({ type: 'SET_BODY_STATE', payload: current === BODY_STATES.FULLSCREEN ? BODY_STATES.NORMAL : BODY_STATES.FULLSCREEN });
           },
      +    openSidePane: (content) => {

      +      if (state.bodyState === BODY_STATES.SIDE_PANE &&
      state.sidePaneContent === content) {

      +        // If it's open with same content, close it.

      +        dispatch({ type: 'SET_BODY_STATE', payload: BODY_STATES.NORMAL
      });

      +      } else {

      +        // If closed, or different content, open with new content.

      +        dispatch({ type: 'SET_SIDE_PANE_CONTENT', payload: content });

      +        dispatch({ type: 'SET_BODY_STATE', payload: BODY_STATES.SIDE_PANE
      });

      +      }

      +    },
           closeSidePane: () => dispatch({ type: 'SET_BODY_STATE', payload: BODY_STATES.NORMAL }),
           resetToDefaults: () => dispatch({ type: 'RESET_TO_DEFAULTS' }),
         }), [state.sidebarState, state.bodyState]);

    patchStrategy: standard-diff
  - type: write
    path: src/store/appStore.ts
    content: >+
      --- src/store/appStore.ts

      +++ src/store/appStore.ts

      @@ -1,22 +1,17 @@
       import { create } from 'zustand'
       import { persist } from 'zustand/middleware'
      -import { BODY_STATES, type BodyState } from '@/lib/utils'
       
       export type ActivePage = 'dashboard' | 'settings' | 'toaster' | 'notifications';
       
       interface AppState {
         // UI States
      -  sidePaneContent: 'details' | 'settings' | 'main' | 'toaster' |
      'notifications'
         activePage: ActivePage
         isCommandPaletteOpen: boolean
         searchTerm: string
         
         // Actions
         setActivePage: (page: ActivePage) => void
      -  setSidePaneContent: (content: AppState['sidePaneContent']) => void
         setCommandPaletteOpen: (open: boolean) => void
         setSearchTerm: (term: string) => void
         
         // Composite Actions
         handleNavigation: (page: ActivePage) => void
       }
       
       const defaultState = {
      -  sidePaneContent: 'details' as const,
         activePage: 'dashboard' as ActivePage,
         isCommandPaletteOpen: false,
         searchTerm: '',
      @@ -28,9 +23,7 @@
             ...defaultState,
             
             // Basic setters
      -      sidePaneContent: 'details',
             setActivePage: (page) => set({ activePage: page }),
      -      setSidePaneContent: (content) => set({ sidePaneContent: content }),
             setCommandPaletteOpen: (open) => set({ isCommandPaletteOpen: open }),
             setSearchTerm: (term) => set({ searchTerm: term }),
             
      @@ -42,7 +35,6 @@
             name: 'app-preferences',
             partialize: (state) => ({
               activePage: state.activePage,
      -        sidePaneContent: state.sidePaneContent,
                // searchTerm is not persisted
             }),
           }

    patchStrategy: standard-diff
  - type: write
    path: src/components/layout/EnhancedSidebar.tsx
    content: >+
      --- src/components/layout/EnhancedSidebar.tsx

      +++ src/components/layout/EnhancedSidebar.tsx

      @@ -143,8 +143,8 @@
       }
       
       const AppMenuItem: React.FC<AppMenuItemProps> = ({ icon: Icon, label, badge, hasActions, children, isSubItem = false, page, opensInSidePane = false }) => {
      -  const { handleNavigation, activePage, sidePaneContent,
      setSidePaneContent } = useAppStore();

      -  const { compactMode, bodyState, setBodyState } = useAppShell();

      +  const { handleNavigation, activePage } = useAppStore()

      +  const { compactMode, bodyState, sidePaneContent, openSidePane } =
      useAppShell()
         const { isCollapsed } = useSidebar();
       
         const isPageActive = (page: ActivePage) => {
      @@ -169,16 +169,7 @@
                 toaster: 'toaster',
                 notifications: 'notifications',
               };
      -        const content = pageToPaneMap[page];

      -        if (content) {

      -           if (bodyState === BODY_STATES.SIDE_PANE && sidePaneContent ===
      content) {

      -            // If it's open with same content, close it.

      -            setBodyState(BODY_STATES.NORMAL);

      -          } else {

      -            // If closed, or different content, open with new content.

      -            setSidePaneContent(content);

      -            setBodyState(BODY_STATES.SIDE_PANE);

      -          }

      -        }

      +        if (pageToPaneMap[page]) openSidePane(pageToPaneMap[page]!)
             } else {
               handleNavigation(page);
             }

    patchStrategy: standard-diff
  - type: write
    path: src/components/layout/RightPane.tsx
    content: >+
      --- src/components/layout/RightPane.tsx

      +++ src/components/layout/RightPane.tsx

      @@ -9,8 +9,8 @@
       import { ToasterDemo } from '@/pages/ToasterDemo'
       import { NotificationsPage } from '@/pages/Notifications'
       
       export const RightPane = forwardRef<HTMLDivElement>((_props, ref) => {
      -  const { sidePaneContent, setActivePage, setSidePaneContent } =
      useAppStore();

      -  const { closeSidePane, dispatch } = useAppShell();

      +  const { setActivePage } = useAppStore();

      +  const { sidePaneContent, closeSidePane, dispatch } = useAppShell();
       
         const contentMap = {
           main: { title: 'Dashboard', icon: LayoutDashboard, page: 'dashboard', content: <DashboardContent isInSidePane /> },

    patchStrategy: standard-diff
  - type: write
    path: src/components/layout/TopBar.tsx
    content: >+
      --- src/components/layout/TopBar.tsx

      +++ src/components/layout/TopBar.tsx

      @@ -25,29 +25,18 @@
         onToggleFullscreen,
         onToggleDarkMode
       }: TopBarProps) {
      -  const { bodyState, isDarkMode, dispatch } = useAppShell();

      +  const { bodyState, isDarkMode, openSidePane, sidePaneContent } =
      useAppShell();
         const { 
           activePage,
      -    sidePaneContent,
           setActivePage,
      -    setSidePaneContent,
           searchTerm,
           setCommandPaletteOpen,
           setSearchTerm,
         } = useAppStore()
       
         const [isSearchFocused, setIsSearchFocused] = useState(false)
      -  

      -  const openSidePane = (content: Parameters<typeof
      setSidePaneContent>[0]) => {

      -    if (bodyState === BODY_STATES.SIDE_PANE && sidePaneContent ===
      content) {

      -      dispatch({ type: 'SET_BODY_STATE', payload: BODY_STATES.NORMAL });

      -    } else {

      -      setSidePaneContent(content);

      -      dispatch({ type: 'SET_BODY_STATE', payload: BODY_STATES.SIDE_PANE
      });

      -    }

      -  };
       
         const handleSettingsClick = () => {
           const isSettingsInSidePane = bodyState === BODY_STATES.SIDE_PANE && sidePaneContent === 'settings'
       
           // If we're on the settings page and it's not in the side pane, treat this as a "minimize" action.
           if (activePage === 'settings' && !isSettingsInSidePane) {
      -      setSidePaneContent('settings');

      -      dispatch({ type: 'SET_BODY_STATE', payload: BODY_STATES.SIDE_PANE
      });

      +      openSidePane('settings')
             setActivePage('dashboard');
           } else {
             // In all other cases (on dashboard page, or settings already in pane),
      @@ -58,8 +47,7 @@
       
         const handleMoveToSidePane = () => {
           const mapping = { dashboard: 'main', settings: 'settings', toaster: 'toaster', notifications: 'notifications' } as const;
      -    setSidePaneContent(mapping[activePage]);

      -    dispatch({ type: 'SET_BODY_STATE', payload: BODY_STATES.SIDE_PANE });

      +    openSidePane(mapping[activePage]);
           if (activePage !== 'dashboard') setActivePage('dashboard');
         };
       

    patchStrategy: standard-diff
  - type: write
    path: src/components/layout/MainContent.tsx
    content: >+
      --- src/components/layout/MainContent.tsx

      +++ src/components/layout/MainContent.tsx

      @@ -12,13 +12,14 @@
       import { SettingsPage } from '@/pages/Settings'
       import { ToasterDemo } from '@/pages/ToasterDemo'
       import { useAppStore } from '@/store/appStore'
      +import { useAppShell } from '@/context/AppShellContext'
       import { NotificationsPage } from '@/pages/Notifications'
       import { ContentInSidePanePlaceholder } from '@/components/shared/ContentInSidePanePlaceholder'
       
       interface MainContentProps {
         onToggleFullscreen: () => void
       }
       
       export const MainContent = forwardRef<HTMLDivElement, MainContentProps>(
         ({ onToggleFullscreen }, ref) => {
      -    const { sidePaneContent, openSidePane, activePage, setActivePage,
      bodyState } = useAppStore()

      +    const { activePage, setActivePage } = useAppStore()

      +    const { bodyState, sidePaneContent, openSidePane } = useAppShell();
           
           const isDashboardInSidePane = sidePaneContent === 'main' && bodyState === BODY_STATES.SIDE_PANE
           const isSettingsInSidePane = sidePaneContent === 'settings' && bodyState === BODY_STATES.SIDE_PANE

    patchStrategy: standard-diff
  - type: write
    path: src/components/global/CommandPalette.tsx
    content: >+
      --- src/components/global/CommandPalette.tsx

      +++ src/components/global/CommandPalette.tsx

      @@ -10,14 +10,13 @@
       import { Home, Settings, Moon, Sun, Monitor, Smartphone, PanelRight, Maximize, Component, Bell } from 'lucide-react'
       
       export function CommandPalette() {
      -  const { isDarkMode, dispatch, toggleFullscreen } = useAppShell();

      +  const { isDarkMode, dispatch, toggleFullscreen, openSidePane } =
      useAppShell();
         const {
           isCommandPaletteOpen,
           setCommandPaletteOpen,
           setActivePage,
      -    setSidePaneContent,
         } = useAppStore()
         useCommandPaletteToggle()
         
      @@ -54,10 +53,7 @@
                   <Maximize className="mr-2 h-4 w-4" />
                   <span>Toggle Fullscreen</span>
                   <CommandShortcut>⌘F</CommandShortcut>
                 </CommandItem>
      -          <CommandItem onSelect={() => runCommand(() => {

      -            setSidePaneContent('settings');

      -            dispatch({ type: 'SET_BODY_STATE', payload:
      BODY_STATES.SIDE_PANE });

      -          })}>

      +          <CommandItem onSelect={() => runCommand(() =>
      openSidePane('settings'))}>
                   <PanelRight className="mr-2 h-4 w-4" />
                   <span>Open Settings in Side Pane</span>
                   <CommandShortcut>⌥S</CommandShortcut>

    patchStrategy: standard-diff
snapshot:
  src/components/layout/RightPane.tsx: >-
    import { forwardRef } from 'react'

    import { SlidersHorizontal, Settings, ChevronRight, LayoutDashboard,
    ChevronsLeftRight, Component, Bell } from 'lucide-react'

    import { useAppStore } from '@/store/appStore'

    import { cn } from '@/lib/utils'

    import { useAppShell } from '@/context/AppShellContext'

    import { SettingsContent } from '@/features/settings/SettingsContent'

    import { DashboardContent } from '@/pages/Dashboard'

    import { ToasterDemo } from '@/pages/ToasterDemo'

    import { NotificationsPage } from '@/pages/Notifications'


    export const RightPane = forwardRef<HTMLDivElement>((_props, ref) => {
      const { sidePaneContent, setActivePage, setSidePaneContent } = useAppStore();
      const { closeSidePane, dispatch } = useAppShell();

      const contentMap = {
        main: { title: 'Dashboard', icon: LayoutDashboard, page: 'dashboard', content: <DashboardContent isInSidePane /> },
        settings: { title: 'Settings', icon: Settings, page: 'settings', content: <SettingsContent /> },
        toaster: { title: 'Toaster Demo', icon: Component, page: 'toaster', content: <ToasterDemo isInSidePane /> },
        notifications: { title: 'Notifications', icon: Bell, page: 'notifications', content: <NotificationsPage isInSidePane /> },
        details: { title: 'Details Panel', icon: SlidersHorizontal, content: <p className="text-muted-foreground">This is the side pane. It can be used to display contextual information, forms, or actions related to the main content.</p> }
      } as const;

      const currentContent = contentMap[sidePaneContent as keyof typeof contentMap] || contentMap.details;
      const CurrentIcon = currentContent.icon;

      const handleMaximize = () => {
        if ('page' in currentContent && currentContent.page) {
          setActivePage(currentContent.page);
        }
        closeSidePane()
      }

      return (
        <aside ref={ref} className="bg-card border-l border-border flex flex-col h-full overflow-hidden fixed top-0 right-0 z-[60]">
          <button
            onClick={closeSidePane}
            className="absolute top-1/2 -left-px -translate-y-1/2 -translate-x-full w-8 h-16 bg-card border border-r-0 border-border rounded-l-lg flex items-center justify-center hover:bg-accent transition-colors group z-10"
            title="Close pane"
          >
            <ChevronRight className="w-5 h-5 text-muted-foreground group-hover:text-foreground transition-colors" />
          </button>
          <div 
            className={cn(
              "absolute top-0 left-0 w-2 h-full bg-transparent hover:bg-primary/20 cursor-col-resize z-50 transition-colors duration-200 group -translate-x-1/2"
            )}
            onMouseDown={(e) => {
              e.preventDefault()
              dispatch({ type: 'SET_IS_RESIZING_RIGHT_PANE', payload: true });
            }}
          >
            <div className="w-0.5 h-full bg-border group-hover:bg-primary transition-colors duration-200 mx-auto" />
          </div>
          <div className="flex items-center justify-between p-4 border-b border-border h-20 flex-shrink-0 pl-6">
            <div className="flex items-center gap-2">
              <CurrentIcon className="w-5 h-5" />
              <h2 className="text-lg font-semibold whitespace-nowrap">
                {currentContent.title}
              </h2>
            </div>
            
            {'page' in currentContent && currentContent.page && (
              <button
                onClick={handleMaximize}
                className="h-10 w-10 flex items-center justify-center hover:bg-accent rounded-full transition-colors mr-2"
                title="Move to Main View"
              >
                <ChevronsLeftRight className="w-5 h-5" />
              </button>
            )}
          </div>
          <div className="flex-1 overflow-y-auto px-8 py-6">
            {currentContent.content}
          </div>
        </aside>
      )
    })


    RightPane.displayName = "RightPane"
  src/components/layout/TopBar.tsx: |-
    import { useState } from 'react'
    import {
      Menu, 
      Maximize, 
      Minimize, 
      Moon, 
      Sun,
      Settings,
      Command,
      Zap,
      ChevronRight,
      Search,
      Filter,
      Plus,
      PanelRight,
    } from 'lucide-react'
    import { cn } from '@/lib/utils'
    import { BODY_STATES, type BodyState } from '@/lib/utils'
    import { useAppStore } from '@/store/appStore'
    import { useAppShell } from '@/context/AppShellContext'
    import { UserDropdown } from './UserDropdown'

    interface TopBarProps {
      onToggleSidebar: () => void
      onToggleFullscreen: () => void
      onToggleDarkMode: () => void
    }

    export function TopBar({
      onToggleSidebar,
      onToggleFullscreen,
      onToggleDarkMode
    }: TopBarProps) {
      const { bodyState, isDarkMode, setBodyState } = useAppShell();
      const { 
        activePage,
        sidePaneContent,
        setActivePage,
        setSidePaneContent,
        searchTerm,
        setCommandPaletteOpen,
        setSearchTerm,
      } = useAppStore()

      const [isSearchFocused, setIsSearchFocused] = useState(false)
      
      const openSidePane = (content: Parameters<typeof setSidePaneContent>[0], newBodyState: BodyState = BODY_STATES.SIDE_PANE) => {
        if (bodyState === BODY_STATES.SIDE_PANE && sidePaneContent === content) {
          setBodyState(BODY_STATES.NORMAL);
        } else {
          setSidePaneContent(content);
          setBodyState(newBodyState);
        }
      };

      const handleSettingsClick = () => {
        const isSettingsInSidePane = bodyState === BODY_STATES.SIDE_PANE && sidePaneContent === 'settings'

        // If we're on the settings page and it's not in the side pane, treat this as a "minimize" action.
        if (activePage === 'settings' && !isSettingsInSidePane) {
          setSidePaneContent('settings');
          setBodyState(BODY_STATES.SIDE_PANE);
          setActivePage('dashboard');
        } else {
          // In all other cases (on dashboard page, or settings already in pane),
          // just toggle the settings side pane.
          openSidePane('settings')
        }
      }

      const handleMoveToSidePane = () => {
        const mapping = { dashboard: 'main', settings: 'settings', toaster: 'toaster', notifications: 'notifications' } as const;
        setSidePaneContent(mapping[activePage]);
        setBodyState(BODY_STATES.SIDE_PANE);
        if (activePage !== 'dashboard') setActivePage('dashboard');
      };

      return (
        <div className={cn(
          "h-20 bg-background border-b border-border flex items-center justify-between px-6 z-50 gap-4",
          {
            'transition-all duration-300 ease-in-out': activePage === 'dashboard',
          }
        )}>
          {/* Left Section - Sidebar Controls & Breadcrumbs */}
          <div className="flex items-center gap-4">
            {/* Sidebar Controls */}
            <button
              onClick={onToggleSidebar}
              className={cn(
                "h-10 w-10 flex items-center justify-center rounded-full hover:bg-accent transition-colors"
              )}
              title="Toggle Sidebar"
            >
              <Menu className="w-5 h-5" />
            </button>

            {/* Breadcrumbs */}
            <div className={cn("hidden md:flex items-center gap-2 text-sm transition-opacity", {
              "opacity-0 pointer-events-none": isSearchFocused && activePage === 'dashboard'
            })}>
              <a href="#" className="text-muted-foreground hover:text-foreground transition-colors">Home</a>
              <ChevronRight className="w-4 h-4 text-muted-foreground" />
              <span className="font-medium text-foreground capitalize">{activePage}</span>
            </div>
          </div>

          {/* Right Section - Search, page controls, and global controls */}
          <div className={cn("flex items-center gap-3", isSearchFocused && activePage === 'dashboard' ? 'flex-1' : '')}>
            {/* Page-specific: Dashboard search and actions */}
            {activePage === 'dashboard' && (
              <div className="flex items-center gap-2 flex-1 justify-end">
                <div className={cn("relative transition-all duration-300 ease-in-out", isSearchFocused ? 'flex-1 max-w-lg' : 'w-auto')}>
                  <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4 pointer-events-none" />
                  <input
                    type="text"
                    placeholder="Search..."
                    value={searchTerm}
                    onFocus={() => setIsSearchFocused(true)}
                    onBlur={() => setIsSearchFocused(false)}
                    onChange={(e) => setSearchTerm(e.target.value)}
                    className={cn(
                      "pl-9 pr-4 py-2 h-10 border-none rounded-lg bg-card focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent transition-all duration-300 ease-in-out w-full",
                      isSearchFocused ? 'bg-background' : 'w-48'
                    )}
                  />
                </div>
                 <button className="h-10 w-10 flex-shrink-0 flex items-center justify-center hover:bg-accent rounded-full transition-colors">
                  <Filter className="w-5 h-5" />
                </button>
                 <button className="bg-primary text-primary-foreground px-4 py-2 rounded-full hover:bg-primary/90 transition-colors flex items-center gap-2 h-10 flex-shrink-0">
                  <Plus className="w-5 h-5" />
                  <span className={cn(isSearchFocused ? 'hidden sm:inline' : 'inline')}>New Project</span>
                </button>
              </div>
            )}
            
            {/* Page-specific: Move to side pane */}
            <div className={cn('flex items-center', isSearchFocused && activePage === 'dashboard' ? 'hidden md:flex' : '')}>
              {['dashboard', 'settings', 'toaster', 'notifications'].includes(activePage) && (
                <button onClick={handleMoveToSidePane} className="h-10 w-10 flex items-center justify-center hover:bg-accent rounded-full transition-colors" title="Move to Side Pane"><PanelRight className="w-5 h-5" /></button>
              )}
            </div>

            {/* Separator */}
            <div className={cn(
              'w-px h-6 bg-border mx-2', 
              !['dashboard', 'settings', 'toaster', 'notifications'].includes(activePage) || (isSearchFocused && activePage === 'dashboard') ? 'hidden' : ''
            )} />

            {/* Quick Actions */}
            <div className={cn('flex items-center gap-3', isSearchFocused && activePage === 'dashboard' ? 'hidden lg:flex' : '')}>

              <button
                onClick={() => setCommandPaletteOpen(true)}
                className="h-10 w-10 flex items-center justify-center rounded-full hover:bg-accent transition-colors group"
                title="Command Palette (Ctrl+K)"
              >
                <Command className="w-5 h-5 group-hover:scale-110 transition-transform" />
              </button>

            <button
              className="h-10 w-10 flex items-center justify-center rounded-full hover:bg-accent transition-colors group"
              title="Quick Actions"
            >
              <Zap className="w-5 h-5 group-hover:scale-110 transition-transform" />
            </button>

            {/* Body State Controls */}
            <button
              onClick={() => openSidePane('details')}
              className={cn(
                "h-10 w-10 flex items-center justify-center rounded-full hover:bg-accent transition-colors group",
                bodyState === BODY_STATES.SIDE_PANE && sidePaneContent === 'details' && "bg-accent"
              )}
              title="Toggle Side Pane"
            >
              <div className="w-5 h-5 flex group-hover:scale-110 transition-transform">
                <div className="w-1/2 h-full bg-current opacity-60 rounded-l-sm" />
                <div className="w-1/2 h-full bg-current rounded-r-sm" />
              </div>
            </button>

            <button
              onClick={onToggleFullscreen}
              className={cn(
                "h-10 w-10 flex items-center justify-center rounded-full hover:bg-accent transition-colors group",
                bodyState === BODY_STATES.FULLSCREEN && "bg-accent"
              )}
              title="Toggle Fullscreen"
            >
              {bodyState === BODY_STATES.FULLSCREEN ? (
                <Minimize className="w-5 h-5 group-hover:scale-110 transition-transform" />
              ) : (
                <Maximize className="w-5 h-5 group-hover:scale-110 transition-transform" />
              )}
            </button>

            <div className="w-px h-6 bg-border mx-2" />

            {/* Theme and Settings */}
            <button
              onClick={onToggleDarkMode}
              className="h-10 w-10 flex items-center justify-center rounded-full hover:bg-accent transition-colors group"
              title="Toggle Dark Mode"
            >
              {isDarkMode ? (
                <Sun className="w-5 h-5 group-hover:scale-110 transition-transform" />
              ) : (
                <Moon className="w-5 h-5 group-hover:scale-110 transition-transform" />
              )}
            </button>

            <button
              onClick={handleSettingsClick}
              className="h-10 w-10 flex items-center justify-center rounded-full hover:bg-accent transition-colors group"
              title="Settings"
            >
              <Settings className="w-5 h-5 group-hover:rotate-90 transition-transform duration-300" />
            </button>
            <UserDropdown />
            </div>
          </div>
        </div>
      )
    }
  src/store/appStore.ts: >-
    import { create } from 'zustand'

    import { persist } from 'zustand/middleware'

    import { BODY_STATES, type BodyState } from '@/lib/utils'


    export type ActivePage = 'dashboard' | 'settings' | 'toaster' |
    'notifications';


    interface AppState {
      // UI States
      sidePaneContent: 'details' | 'settings' | 'main' | 'toaster' | 'notifications'
      activePage: ActivePage
      isCommandPaletteOpen: boolean
      searchTerm: string
      
      // Actions
      setActivePage: (page: ActivePage) => void
      setSidePaneContent: (content: AppState['sidePaneContent']) => void
      setCommandPaletteOpen: (open: boolean) => void
      setSearchTerm: (term: string) => void
      
      // Composite Actions
      handleNavigation: (page: ActivePage) => void
    }


    const defaultState = {
      sidePaneContent: 'details' as const,
      activePage: 'dashboard' as ActivePage,
      isCommandPaletteOpen: false,
      searchTerm: '',
    }


    export const useAppStore = create<AppState>()(
      persist(
        (set) => ({
          ...defaultState,
          
          // Basic setters
          sidePaneContent: 'details',
          setActivePage: (page) => set({ activePage: page }),
          setSidePaneContent: (content) => set({ sidePaneContent: content }),
          setCommandPaletteOpen: (open) => set({ isCommandPaletteOpen: open }),
          setSearchTerm: (term) => set({ searchTerm: term }),
          
          // Composite actions
          handleNavigation: (page) => {
            set({ activePage: page });
          },
        }),
        {
          name: 'app-preferences',
          partialize: (state) => ({
            activePage: state.activePage,
            sidePaneContent: state.sidePaneContent,
            // searchTerm is not persisted
          }),
        }
      )
    )
  src/components/layout/EnhancedSidebar.tsx: >-
    import React from 'react';

    import {
      Home,
      Settings,
      HelpCircle,
      Component,
      Rocket,
      MoreHorizontal,
      Bell,
      Search,
      FileText,
      Star,
      Trash2,
      FolderOpen,
      Mail,
      Bookmark,
      Download,
      User,
      Plus
    } from 'lucide-react';

    import { useAppStore, type ActivePage } from '@/store/appStore';

    import { useAppShell } from '@/context/AppShellContext';

    import { BODY_STATES } from '@/lib/utils';

    import {
      Workspaces,
      WorkspaceTrigger,
      WorkspaceContent,
      type Workspace,
    } from './WorkspaceSwitcher';

    import {
      DropdownMenu,
      DropdownMenuContent,
      DropdownMenuItem,
      DropdownMenuTrigger,
    } from '@/components/ui/dropdown-menu';

    import {
      Sidebar,
      SidebarContent,
      SidebarHeader,
      SidebarTitle,
      SidebarBody,
      SidebarFooter,
      SidebarSection,
      SidebarMenuItem,
      SidebarMenuButton,
      SidebarMenuAction,
      SidebarLabel,
      SidebarBadge,
      SidebarTooltip,
      SidebarIcon,
      useSidebar,
    } from './Sidebar';

    import { cn } from '@/lib/utils';


    interface MyWorkspace extends Workspace {
      logo: string;
      plan: string;
    }


    const mockWorkspaces: MyWorkspace[] = [
      { id: 'ws1', name: 'Acme Inc.', logo: 'https://avatar.vercel.sh/acme.png', plan: 'Pro' },
      { id: 'ws2', name: 'Monsters Inc.', logo: 'https://avatar.vercel.sh/monsters.png', plan: 'Free' },
      { id: 'ws3', name: 'Stark Industries', logo: 'https://avatar.vercel.sh/stark.png', plan: 'Enterprise' },
    ];


    const SidebarWorkspaceTrigger = () => {
      const { isCollapsed, compactMode } = useSidebar();

      return (
        <WorkspaceTrigger
          collapsed={isCollapsed}
          className={cn(
            'rounded-xl transition-colors hover:bg-accent/50 w-full',
            isCollapsed ? 'p-2' : 'p-3 bg-accent/50',
          )}
          avatarClassName={cn(compactMode ? 'h-8 w-8' : 'h-10 w-10')}
        />
      );
    };


    interface SidebarProps {
      onMouseEnter?: () => void;
      onMouseLeave?: () => void;
    }


    export const EnhancedSidebar = React.forwardRef<HTMLDivElement,
    SidebarProps>(
      ({ onMouseEnter, onMouseLeave }, ref) => {
        const { sidebarWidth, compactMode } = useAppShell();
        const [selectedWorkspace, setSelectedWorkspace] = React.useState(mockWorkspaces[0]);

        return (
          <Sidebar
            ref={ref}
            style={{ width: sidebarWidth }}
            onMouseEnter={onMouseEnter}
            onMouseLeave={onMouseLeave}
          >
            <SidebarContent>
              <SidebarHeader>
                <div className="p-2 bg-primary/20 rounded-lg">
                  <Rocket className="w-5 h-5 text-primary" />
                </div>
                <SidebarTitle>Amazing App</SidebarTitle>
              </SidebarHeader>

              <SidebarBody>
                <SidebarSection title="Main">
                  <AppMenuItem icon={Home} label="Dashboard" page="dashboard" />
                  <AppMenuItem icon={Search} label="Search" />
                  <AppMenuItem icon={Bell} label="Notifications" badge={3} page="notifications" opensInSidePane />
                </SidebarSection>
                
                <SidebarSection title="Workspace" collapsible defaultExpanded>
                  <AppMenuItem icon={FileText} label="Documents" hasActions>
                    <AppMenuItem icon={FileText} label="Recent" isSubItem />
                    <AppMenuItem icon={Star} label="Starred" isSubItem />
                    <AppMenuItem icon={Trash2} label="Trash" isSubItem />
                  </AppMenuItem>
                  <AppMenuItem icon={FolderOpen} label="Projects" hasActions />
                  <AppMenuItem icon={Mail} label="Messages" badge={12} />
                </SidebarSection>
                
                <SidebarSection title="Personal" collapsible>
                  <AppMenuItem icon={Bookmark} label="Bookmarks" />
                  <AppMenuItem icon={Star} label="Favorites" />
                  <AppMenuItem icon={Download} label="Downloads" />
                </SidebarSection>

                <SidebarSection title="Components" collapsible defaultExpanded>
                  <AppMenuItem icon={Component} label="Toaster" page="toaster" />
                </SidebarSection>
              </SidebarBody>

              <SidebarFooter>
                <SidebarSection>
                  <AppMenuItem icon={User} label="Profile" />
                  <AppMenuItem icon={Settings} label="Settings" page="settings" />
                  <AppMenuItem icon={HelpCircle} label="Help" />
                </SidebarSection>

                <div className={cn(compactMode ? 'mt-4' : 'mt-6')}>
                  <Workspaces
                    workspaces={mockWorkspaces}
                    selectedWorkspaceId={selectedWorkspace.id}
                    onWorkspaceChange={setSelectedWorkspace}
                  >
                    <SidebarWorkspaceTrigger />
                    <WorkspaceContent>
                      <button className="flex w-full items-center gap-2 rounded-sm px-2 py-2 text-left text-sm hover:bg-accent hover:text-accent-foreground focus:outline-none">
                        <Plus className="h-4 w-4" />
                        <span>Create Workspace</span>
                      </button>
                    </WorkspaceContent>
                  </Workspaces>
                </div>
              </SidebarFooter>
            </SidebarContent>
          </Sidebar>
        );
      },
    );

    EnhancedSidebar.displayName = 'EnhancedSidebar';



    // Example of a reusable menu item component built with the new Sidebar
    primitives

    interface AppMenuItemProps {
      icon: React.ElementType;
      label: string;
      badge?: number;
      hasActions?: boolean;
      children?: React.ReactNode;
      isSubItem?: boolean;
      page?: ActivePage;
      opensInSidePane?: boolean;
    }


    const AppMenuItem: React.FC<AppMenuItemProps> = ({ icon: Icon, label, badge,
    hasActions, children, isSubItem = false, page, opensInSidePane = false }) =>
    {
      const { handleNavigation, activePage, sidePaneContent, setSidePaneContent } = useAppStore();
      const { compactMode, bodyState, setBodyState } = useAppShell();
      const { isCollapsed } = useSidebar();

      const isPageActive = (page: ActivePage) => {
        const pageToSidePaneContent: { [key in ActivePage]?: 'main' | 'settings' | 'toaster' | 'notifications' } = {
          dashboard: 'main',
          settings: 'settings',
          toaster: 'toaster',
          notifications: 'notifications',
        };
        return activePage === page || (bodyState === BODY_STATES.SIDE_PANE && sidePaneContent === pageToSidePaneContent[page]);
      };
      
      const isActive = page ? isPageActive(page) : false;

      const handleClick = () => {
        if (page) {
          if (opensInSidePane) {
            const pageToPaneMap: { [key in ActivePage]?: 'main' | 'settings' | 'toaster' | 'notifications' } = {
              dashboard: 'main',
              settings: 'settings',
              toaster: 'toaster',
              notifications: 'notifications',
            };
            const content = pageToPaneMap[page];
            if (content) {
               if (bodyState === BODY_STATES.SIDE_PANE && sidePaneContent === content) {
                // If it's open with same content, close it.
                setBodyState(BODY_STATES.NORMAL);
              } else {
                // If closed, or different content, open with new content.
                setSidePaneContent(content);
                setBodyState(BODY_STATES.SIDE_PANE);
              }
            }
          } else {
            handleNavigation(page);
          }
        }
      };

      return (
        <div className={isSubItem ? (compactMode ? 'ml-4' : 'ml-6') : ''}>
          <SidebarMenuItem>
            <SidebarMenuButton onClick={handleClick} isActive={isActive}>
              <SidebarIcon>
                <Icon className={isSubItem ? "w-3 h-3" : "w-4 h-4"}/>
              </SidebarIcon>
              <SidebarLabel>{label}</SidebarLabel>
              {badge && <SidebarBadge>{badge}</SidebarBadge>}
              <SidebarTooltip label={label} badge={badge} />
            </SidebarMenuButton>

            {hasActions && (
              <DropdownMenu>
                <DropdownMenuTrigger asChild>
                  <SidebarMenuAction>
                    <MoreHorizontal className="h-4 w-4" />
                  </SidebarMenuAction>
                </DropdownMenuTrigger>
                <DropdownMenuContent side="right" align="start">
                  <DropdownMenuItem>
                    <span>Edit {label}</span>
                  </DropdownMenuItem>
                  <DropdownMenuItem>
                    <span>Delete {label}</span>
                  </DropdownMenuItem>
                </DropdownMenuContent>
              </DropdownMenu>
            )}
          </SidebarMenuItem>
          {!isCollapsed && children && (
            <div className="space-y-1 mt-1">{children}</div>
          )}
        </div>
      );
    };
  src/components/layout/MainContent.tsx: >-
    import { forwardRef } from 'react'

    import { 
      X,
      LayoutDashboard,
      Settings,
      Component,
      Bell,
    } from 'lucide-react'

    import { cn } from '@/lib/utils'

    import { BODY_STATES } from '@/lib/utils'

    import { DashboardContent } from '@/pages/Dashboard'

    import { SettingsPage } from '@/pages/Settings'

    import { ToasterDemo } from '@/pages/ToasterDemo'

    import { useAppStore } from '@/store/appStore'

    import { NotificationsPage } from '@/pages/Notifications'

    import { ContentInSidePanePlaceholder } from
    '@/components/shared/ContentInSidePanePlaceholder'


    interface MainContentProps {
      onToggleFullscreen: () => void
    }


    export const MainContent = forwardRef<HTMLDivElement, MainContentProps>(
      ({ onToggleFullscreen }, ref) => {
        const { sidePaneContent, openSidePane, activePage, setActivePage, bodyState } = useAppStore()
        
        const isDashboardInSidePane = sidePaneContent === 'main' && bodyState === BODY_STATES.SIDE_PANE
        const isSettingsInSidePane = sidePaneContent === 'settings' && bodyState === BODY_STATES.SIDE_PANE
        const isToasterInSidePane = sidePaneContent === 'toaster' && bodyState === BODY_STATES.SIDE_PANE
        const isNotificationsInSidePane = sidePaneContent === 'notifications' && bodyState === BODY_STATES.SIDE_PANE

        const renderContent = () => {
          if (activePage === 'dashboard') {
            if (isDashboardInSidePane) {
              return <ContentInSidePanePlaceholder 
                icon={LayoutDashboard} 
                title="Dashboard is in Side Pane" 
                pageName="dashboard"
                onBringBack={() => openSidePane('main')} 
              />;
            }
            return <DashboardContent />
          }

          if (activePage === 'settings') {
            if (isSettingsInSidePane) {
              return <ContentInSidePanePlaceholder 
                icon={Settings} 
                title="Settings are in Side Pane" 
                pageName="settings"
                onBringBack={() => {
                  openSidePane('settings'); 
                  setActivePage('settings');
                }}
              />;
            }
            return <SettingsPage />
          }
          if (activePage === 'toaster') {
            if (isToasterInSidePane) {
              return <ContentInSidePanePlaceholder
                icon={Component}
                title="Toaster Demo is in Side Pane"
                pageName="toaster demo"
                onBringBack={() => {
                  openSidePane('toaster');
                  setActivePage('toaster');
                }}
              />;
            }
            return <ToasterDemo />
          }
          if (activePage === 'notifications') {
            if (isNotificationsInSidePane) {
              return <ContentInSidePanePlaceholder
                icon={Bell}
                title="Notifications are in Side Pane"
                pageName="notifications"
                onBringBack={() => {
                  openSidePane('notifications');
                  setActivePage('notifications');
                }}
              />;
            }
            return <NotificationsPage />
          }
          return null;
        }
        
        const isContentVisible = (activePage === 'dashboard' && !isDashboardInSidePane) || 
                               (activePage === 'settings' && !isSettingsInSidePane) || 
                               (activePage === 'toaster' && !isToasterInSidePane) ||
                               (activePage === 'notifications' && !isNotificationsInSidePane);

        return (
          <div
            ref={ref}
            className={cn(
            "flex flex-col h-full overflow-hidden",
            bodyState === BODY_STATES.FULLSCREEN && "absolute inset-0 z-40 bg-background"
            )}
          >
            {bodyState === BODY_STATES.FULLSCREEN && isContentVisible && (
              <button
                onClick={onToggleFullscreen}
                className="fixed top-6 right-6 lg:right-12 z-[100] h-12 w-12 flex items-center justify-center rounded-full bg-card/50 backdrop-blur-sm hover:bg-card/75 transition-colors group"
                title="Exit Fullscreen"
              >
                <X className="w-6 h-6 group-hover:scale-110 group-hover:rotate-90 transition-all duration-300" />
              </button>
            )}

            <div className="flex-1 min-h-0 flex flex-col">
              {renderContent()}
            </div>
          </div>
        )
      }
    )
  src/features/settings/SettingsContent.tsx: |-
    import { useState } from 'react'
    import { 
      Moon, 
      Sun, 
      Zap, 
      Eye, 
      Minimize2, 
      RotateCcw,
      Monitor,
      Smartphone,
      Palette,
      Accessibility,
      Check
    } from 'lucide-react'
    import { cn } from '@/lib/utils'
    import { useAppShell } from '@/context/AppShellContext'
    import { SettingsToggle } from './SettingsToggle'
    import { SettingsSection } from './SettingsSection'

    const colorPresets = [
      { name: 'Default Blue', value: '220 84% 60%' },
      { name: 'Rose', value: '346.8 77.2% 49.8%' },
      { name: 'Green', value: '142.1 76.2% 36.3%' },
      { name: 'Orange', value: '24.6 95% 53.1%' },
      { name: 'Violet', value: '262.1 83.3% 57.8%' },
      { name: 'Slate', value: '215.3 20.3% 65.1%' }
    ]

    export function SettingsContent() {
      const shell = useAppShell()
      const dispatch = shell.dispatch

      const [tempSidebarWidth, setTempSidebarWidth] = useState(shell.sidebarWidth)

      const handleSidebarWidthChange = (width: number) => {
        setTempSidebarWidth(width)
        dispatch({ type: 'SET_SIDEBAR_WIDTH', payload: width });
      }

      const handleReset = () => {
        shell.resetToDefaults();
        setTempSidebarWidth(280); // Reset temp state as well
      }

      const setCompactMode = (payload: boolean) => dispatch({ type: 'SET_COMPACT_MODE', payload });
      const setReducedMotion = (payload: boolean) => dispatch({ type: 'SET_REDUCED_MOTION', payload });
      const setSidebarWidth = (payload: number) => {
        dispatch({ type: 'SET_SIDEBAR_WIDTH', payload });
        setTempSidebarWidth(payload);
      };

      return (
        <div className="space-y-10">
          {/* Appearance */}
          <SettingsSection icon={<Palette />} title="Appearance">
            {/* Dark Mode */}
            <SettingsToggle
              icon={shell.isDarkMode ? <Moon className="w-4 h-4" /> : <Sun className="w-4 h-4" />}
              title="Dark Mode"
              description="Toggle dark theme"
              checked={shell.isDarkMode}
              onCheckedChange={() => dispatch({ type: 'TOGGLE_DARK_MODE' })}
            />

            {/* Compact Mode */}
            <SettingsToggle
              icon={<Minimize2 className="w-4 h-4" />}
              title="Compact Mode"
              description="Reduce spacing and sizes"
              checked={shell.compactMode}
              onCheckedChange={(payload) => dispatch({ type: 'SET_COMPACT_MODE', payload })}
            />

            {/* Accent Color */}
            <div className="space-y-3">
              <div className="flex items-center gap-3">
                <Palette className="w-4 h-4" />
                <div>
                  <p className="font-medium">Accent Color</p>
                  <p className="text-sm text-muted-foreground">Customize the main theme color</p>
                </div>
              </div>
              <div className="grid grid-cols-6 gap-2 pt-1">
                {colorPresets.map(color => {
                  const isActive = color.value === shell.primaryColor
                  return (
                    <button
                      key={color.name}
                      title={color.name}
                      onClick={() => dispatch({ type: 'SET_PRIMARY_COLOR', payload: color.value })}
                      className={cn(
                        "w-8 h-8 rounded-full border-2 transition-transform hover:scale-110 flex items-center justify-center",
                        isActive ? 'border-primary' : 'border-transparent'
                      )}
                      style={{ backgroundColor: `hsl(${color.value})` }}
                    >{isActive && <Check className="w-5 h-5 text-primary-foreground" />}</button>
                  )
                })}
              </div>
            </div>
          </SettingsSection>

          {/* Behavior */}
          <SettingsSection icon={<Zap />} title="Behavior">
            {/* Auto Expand Sidebar */}
            <SettingsToggle
              icon={<Eye className="w-4 h-4" />}
              title="Auto Expand Sidebar"
              description="Expand on hover when collapsed"
              checked={shell.autoExpandSidebar}
              onCheckedChange={(payload) => dispatch({ type: 'SET_AUTO_EXPAND_SIDEBAR', payload })}
            />

            {/* Sidebar Width */}
            <div className="space-y-3">
              <div className="flex items-center gap-3">
                <Monitor className="w-4 h-4" />
                <div>
                  <p className="font-medium">Sidebar Width</p>
                  <p className="text-sm text-muted-foreground">{tempSidebarWidth}px</p>
                </div>
              </div>
              <div className="space-y-2">
                <input
                  type="range"
                  min="200"
                  max="500"
                  step="10"
                  value={tempSidebarWidth}
                  onChange={(e) => handleSidebarWidthChange(Number(e.target.value))}
                  className="w-full h-1.5 bg-muted rounded-lg appearance-none cursor-pointer slider"
                />
                <div className="flex justify-between text-xs text-muted-foreground">
                  <span>200px</span>
                  <span>350px</span>
                  <span>500px</span>
                </div>
              </div>
            </div>
          </SettingsSection>

          {/* Accessibility */}
          <SettingsSection icon={<Accessibility />} title="Accessibility">
            {/* Reduced Motion */}
            <SettingsToggle
              icon={<Zap className="w-4 h-4" />}
              title="Reduced Motion"
              description="Minimize animations"
              checked={shell.reducedMotion}
              onCheckedChange={(payload) => dispatch({ type: 'SET_REDUCED_MOTION', payload })}
            />
          </SettingsSection>

          {/* Presets */}
          <div className="space-y-4">
            <h3 className="text-sm font-semibold text-muted-foreground uppercase tracking-wider">
              Quick Presets
            </h3>
            
            <div className="grid grid-cols-2 gap-3">
              <button 
                onClick={() => {
                  setCompactMode(false)
                  setReducedMotion(false)
                  setSidebarWidth(320)
                }}
                className="p-4 bg-accent/30 hover:bg-accent/50 rounded-xl transition-colors text-left"
              >
                <Monitor className="w-4 h-4 mb-2" />
                <p className="font-medium text-sm">Desktop</p>
                <p className="text-xs text-muted-foreground">Spacious layout</p>
              </button>
              
              <button 
                onClick={() => {
                  setCompactMode(true)
                  setReducedMotion(true)
                  setSidebarWidth(240)
                }}
                className="p-4 bg-accent/30 hover:bg-accent/50 rounded-xl transition-colors text-left"
              >
                <Smartphone className="w-4 h-4 mb-2" />
                <p className="font-medium text-sm">Mobile</p>
                <p className="text-xs text-muted-foreground">Compact layout</p>
              </button>
            </div>
          </div>
          <div className="pt-6 border-t border-border">
            <button
              onClick={handleReset}
              className="w-full flex items-center justify-center gap-2 px-4 py-2.5 bg-destructive/10 text-destructive hover:bg-destructive/20 rounded-lg transition-colors"
            >
              <RotateCcw className="w-4 h-4" />
              Reset to Defaults
            </button>
          </div>
        </div>
      )
    }

    // Custom slider styles
    const sliderStyles = `
    .slider::-webkit-slider-thumb {
      appearance: none;
      height: 18px;
      width: 18px;
      border-radius: 50%;
      background: hsl(var(--primary));
      cursor: pointer;
      border: 3px solid hsl(var(--background));
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
      margin-top: -7px;
    }

    .slider::-moz-range-thumb {
      height: 18px;
      width: 18px;
      border-radius: 50%;
      background: hsl(var(--primary));
      cursor: pointer;
      border: 3px solid hsl(var(--background));
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }
    `

    // Inject styles
    if (typeof document !== 'undefined') {
      const styleSheet = document.createElement('style')
      styleSheet.textContent = sliderStyles
      document.head.appendChild(styleSheet)
    }
        isDarkMode,
        reducedMotion,
        compactMode,
        autoExpandSidebar,
        sidebarWidth,
        primaryColor,
        toggleDarkMode,
        setReducedMotion,
        setCompactMode,
        setAutoExpandSidebar,
        setPrimaryColor,
        setSidebarWidth,
        resetToDefaults
      } = useAppStore()

      const [tempSidebarWidth, setTempSidebarWidth] = useState(sidebarWidth)

      const handleSidebarWidthChange = (width: number) => {
        setTempSidebarWidth(width)
        setSidebarWidth(width)
      }

      return (
        <div className="space-y-10">
          {/* Appearance */}
          <SettingsSection icon={<Palette />} title="Appearance">
            {/* Dark Mode */}
            <SettingsToggle
              icon={isDarkMode ? <Moon className="w-4 h-4" /> : <Sun className="w-4 h-4" />}
              title="Dark Mode"
              description="Toggle dark theme"
              checked={isDarkMode}
              onCheckedChange={toggleDarkMode}
            />

            {/* Compact Mode */}
            <SettingsToggle
              icon={<Minimize2 className="w-4 h-4" />}
              title="Compact Mode"
              description="Reduce spacing and sizes"
              checked={compactMode}
              onCheckedChange={setCompactMode}
            />

            {/* Accent Color */}
            <div className="space-y-3">
              <div className="flex items-center gap-3">
                <Palette className="w-4 h-4" />
                <div>
                  <p className="font-medium">Accent Color</p>
                  <p className="text-sm text-muted-foreground">Customize the main theme color</p>
                </div>
              </div>
              <div className="grid grid-cols-6 gap-2 pt-1">
                {colorPresets.map(color => {
                  const isActive = color.value === primaryColor
                  return (
                    <button
                      key={color.name}
                      title={color.name}
                      onClick={() => setPrimaryColor(color.value)}
                      className={cn(
                        "w-8 h-8 rounded-full border-2 transition-transform hover:scale-110 flex items-center justify-center",
                        isActive ? 'border-primary' : 'border-transparent'
                      )}
                      style={{ backgroundColor: `hsl(${color.value})` }}
                    >{isActive && <Check className="w-5 h-5 text-primary-foreground" />}</button>
                  )
                })}
              </div>
            </div>
          </SettingsSection>

          {/* Behavior */}
          <SettingsSection icon={<Zap />} title="Behavior">
            {/* Auto Expand Sidebar */}
            <SettingsToggle
              icon={<Eye className="w-4 h-4" />}
              title="Auto Expand Sidebar"
              description="Expand on hover when collapsed"
              checked={autoExpandSidebar}
              onCheckedChange={setAutoExpandSidebar}
            />

            {/* Sidebar Width */}
            <div className="space-y-3">
              <div className="flex items-center gap-3">
                <Monitor className="w-4 h-4" />
                <div>
                  <p className="font-medium">Sidebar Width</p>
                  <p className="text-sm text-muted-foreground">{tempSidebarWidth}px</p>
                </div>
              </div>
              <div className="space-y-2">
                <input
                  type="range"
                  min="200"
                  max="500"
                  step="10"
                  value={tempSidebarWidth}
                  onChange={(e) => handleSidebarWidthChange(Number(e.target.value))}
                  className="w-full h-1.5 bg-muted rounded-lg appearance-none cursor-pointer slider"
                />
                <div className="flex justify-between text-xs text-muted-foreground">
                  <span>200px</span>
                  <span>350px</span>
                  <span>500px</span>
                </div>
              </div>
            </div>
          </SettingsSection>

          {/* Accessibility */}
          <SettingsSection icon={<Accessibility />} title="Accessibility">
            {/* Reduced Motion */}
            <SettingsToggle
              icon={<Zap className="w-4 h-4" />}
              title="Reduced Motion"
              description="Minimize animations"
              checked={reducedMotion}
              onCheckedChange={setReducedMotion}
            />
          </SettingsSection>

          {/* Presets */}
          <div className="space-y-4">
            <h3 className="text-sm font-semibold text-muted-foreground uppercase tracking-wider">
              Quick Presets
            </h3>
            
            <div className="grid grid-cols-2 gap-3">
              <button 
                onClick={() => {
                  setCompactMode(false)
                  setReducedMotion(false)
                  setSidebarWidth(320)
                }}
                className="p-4 bg-accent/30 hover:bg-accent/50 rounded-xl transition-colors text-left"
              >
                <Monitor className="w-4 h-4 mb-2" />
                <p className="font-medium text-sm">Desktop</p>
                <p className="text-xs text-muted-foreground">Spacious layout</p>
              </button>
              
              <button 
                onClick={() => {
                  setCompactMode(true)
                  setReducedMotion(true)
                  setSidebarWidth(240)
                }}
                className="p-4 bg-accent/30 hover:bg-accent/50 rounded-xl transition-colors text-left"
              >
                <Smartphone className="w-4 h-4 mb-2" />
                <p className="font-medium text-sm">Mobile</p>
                <p className="text-xs text-muted-foreground">Compact layout</p>
              </button>
            </div>
          </div>
          <div className="pt-6 border-t border-border">
            <button
              onClick={resetToDefaults}
              className="w-full flex items-center justify-center gap-2 px-4 py-2.5 bg-destructive/10 text-destructive hover:bg-destructive/20 rounded-lg transition-colors"
            >
              <RotateCcw className="w-4 h-4" />
              Reset to Defaults
            </button>
          </div>
        </div>
      )
    }

    // Custom slider styles
    const sliderStyles = `
    .slider::-webkit-slider-thumb {
      appearance: none;
      height: 18px;
      width: 18px;
      border-radius: 50%;
      background: hsl(var(--primary));
      cursor: pointer;
      border: 3px solid hsl(var(--background));
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
      margin-top: -7px;
    }

    .slider::-moz-range-thumb {
      height: 18px;
      width: 18px;
      border-radius: 50%;
      background: hsl(var(--primary));
      cursor: pointer;
      border: 3px solid hsl(var(--background));
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }
    `

    // Inject styles
    if (typeof document !== 'undefined') {
      const styleSheet = document.createElement('style')
      styleSheet.textContent = sliderStyles
      document.head.appendChild(styleSheet)
    }
  src/context/AppShellContext.tsx: >-
    import React, {
      createContext,
      useContext,
      useReducer,
      useEffect,
      useMemo,
      type ReactNode,
      type Dispatch,
    } from 'react';

    import { SIDEBAR_STATES, BODY_STATES, type SidebarState, type BodyState }
    from '@/lib/utils';


    // --- State and Action Types ---


    interface AppShellState {
      sidebarState: SidebarState;
      bodyState: BodyState;
      isDarkMode: boolean;
      sidebarWidth: number;
      rightPaneWidth: number;
      isResizing: boolean;
      isResizingRightPane: boolean;
      isTopBarVisible: boolean;
      autoExpandSidebar: boolean;
      reducedMotion: boolean;
      compactMode: boolean;
      primaryColor: string;
    }


    type AppShellAction =
      | { type: 'SET_SIDEBAR_STATE'; payload: SidebarState }
      | { type: 'SET_BODY_STATE'; payload: BodyState }
      | { type: 'TOGGLE_DARK_MODE' }
      | { type: 'SET_SIDEBAR_WIDTH'; payload: number }
      | { type: 'SET_RIGHT_PANE_WIDTH'; payload: number }
      | { type: 'SET_IS_RESIZING'; payload: boolean }
      | { type: 'SET_IS_RESIZING_RIGHT_PANE'; payload: boolean }
      | { type: 'SET_TOP_BAR_VISIBLE'; payload: boolean }
      | { type: 'SET_AUTO_EXPAND_SIDEBAR'; payload: boolean }
      | { type: 'SET_REDUCED_MOTION'; payload: boolean }
      | { type: 'SET_COMPACT_MODE'; payload: boolean }
      | { type: 'SET_PRIMARY_COLOR'; payload: string }
      | { type: 'RESET_TO_DEFAULTS' };

    // --- Reducer ---


    const defaultState: AppShellState = {
      sidebarState: SIDEBAR_STATES.EXPANDED,
      bodyState: BODY_STATES.NORMAL,
      isDarkMode: false,
      sidebarWidth: 280,
      rightPaneWidth: typeof window !== 'undefined' ? Math.max(300, Math.round(window.innerWidth * 0.6)) : 400,
      isResizing: false,
      isResizingRightPane: false,
      isTopBarVisible: true,
      autoExpandSidebar: true,
      reducedMotion: false,
      compactMode: false,
      primaryColor: '220 84% 60%',
    };


    function appShellReducer(state: AppShellState, action: AppShellAction):
    AppShellState {
      switch (action.type) {
        case 'SET_SIDEBAR_STATE': return { ...state, sidebarState: action.payload };
        case 'SET_BODY_STATE': return { ...state, bodyState: action.payload };
        case 'TOGGLE_DARK_MODE': return { ...state, isDarkMode: !state.isDarkMode };
        case 'SET_SIDEBAR_WIDTH': return { ...state, sidebarWidth: Math.max(200, Math.min(500, action.payload)) };
        case 'SET_RIGHT_PANE_WIDTH': return { ...state, rightPaneWidth: Math.max(300, Math.min(window.innerWidth * 0.8, action.payload)) };
        case 'SET_IS_RESIZING': return { ...state, isResizing: action.payload };
        case 'SET_IS_RESIZING_RIGHT_PANE': return { ...state, isResizingRightPane: action.payload };
        case 'SET_TOP_BAR_VISIBLE': return { ...state, isTopBarVisible: action.payload };
        case 'SET_AUTO_EXPAND_SIDEBAR': return { ...state, autoExpandSidebar: action.payload };
        case 'SET_REDUCED_MOTION': return { ...state, reducedMotion: action.payload };
        case 'SET_COMPACT_MODE': return { ...state, compactMode: action.payload };
        case 'SET_PRIMARY_COLOR': return { ...state, primaryColor: action.payload };
        case 'RESET_TO_DEFAULTS': return defaultState;
        default: return state;
      }
    }


    // --- Context and Provider ---


    interface AppShellContextValue extends AppShellState {
      dispatch: Dispatch<AppShellAction>;
      // Composite actions for convenience
      toggleSidebar: () => void;
      hideSidebar: () => void;
      showSidebar: () => void;
      peekSidebar: () => void;
      toggleFullscreen: () => void;
      closeSidePane: () => void;
      resetToDefaults: () => void;
    }


    const AppShellContext = createContext<AppShellContextValue | null>(null);


    export function AppShellProvider({ children }: { children: ReactNode }) {
      const [state, dispatch] = useReducer(appShellReducer, defaultState);

      // Side effect for dark mode
      useEffect(() => {
        document.documentElement.classList.toggle('dark', state.isDarkMode);
      }, [state.isDarkMode]);

      // Side effect for primary color
      useEffect(() => {
        document.documentElement.style.setProperty('--primary-hsl', state.primaryColor);
      }, [state.primaryColor]);

      // Memoized composite actions
      const actions = useMemo(() => ({
        toggleSidebar: () => {
          const current = state.sidebarState;
          if (current === SIDEBAR_STATES.HIDDEN) dispatch({ type: 'SET_SIDEBAR_STATE', payload: SIDEBAR_STATES.COLLAPSED });
          else if (current === SIDEBAR_STATES.COLLAPSED) dispatch({ type: 'SET_SIDEBAR_STATE', payload: SIDEBAR_STATES.EXPANDED });
          else if (current === SIDEBAR_STATES.EXPANDED) dispatch({ type: 'SET_SIDEBAR_STATE', payload: SIDEBAR_STATES.COLLAPSED });
        },
        hideSidebar: () => dispatch({ type: 'SET_SIDEBAR_STATE', payload: SIDEBAR_STATES.HIDDEN }),
        showSidebar: () => dispatch({ type: 'SET_SIDEBAR_STATE', payload: SIDEBAR_STATES.EXPANDED }),
        peekSidebar: () => dispatch({ type: 'SET_SIDEBAR_STATE', payload: SIDEBAR_STATES.PEEK }),
        toggleFullscreen: () => {
          const current = state.bodyState;
          dispatch({ type: 'SET_BODY_STATE', payload: current === BODY_STATES.FULLSCREEN ? BODY_STATES.NORMAL : BODY_STATES.FULLSCREEN });
        },
        closeSidePane: () => dispatch({ type: 'SET_BODY_STATE', payload: BODY_STATES.NORMAL }),
        resetToDefaults: () => dispatch({ type: 'RESET_TO_DEFAULTS' }),
      }), [state.sidebarState, state.bodyState]);

      const value = useMemo(() => ({ ...state, dispatch, ...actions }), [state, actions]);

      return (
        <AppShellContext.Provider value={value}>
          {children}
        </AppShellContext.Provider>
      );
    }


    // --- Hook ---


    export function useAppShell() {
      const context = useContext(AppShellContext);
      if (!context) {
        throw new Error('useAppShell must be used within an AppShellProvider');
      }
      return context;
    }
  src/components/global/CommandPalette.tsx: >-
    import {
      CommandDialog,
      CommandEmpty,
      CommandGroup,
      CommandInput,
      CommandItem,
      CommandList,
      CommandSeparator,
      CommandShortcut,
    } from '@/components/ui/command'

    import { useAppStore, type ActivePage } from '@/store/appStore'

    import { useAppShell } from '@/context/AppShellContext'

    import { BODY_STATES } from '@/lib/utils'

    import { useCommandPaletteToggle } from
    '@/hooks/useCommandPaletteToggle.hook'

    import { Home, Settings, Moon, Sun, Monitor, Smartphone, PanelRight,
    Maximize, Component, Bell } from 'lucide-react'


    export function CommandPalette() {
      const { isDarkMode, dispatch, toggleFullscreen } = useAppShell();
      const {
        isCommandPaletteOpen,
        setCommandPaletteOpen,
        setActivePage,
        setSidePaneContent,
      } = useAppStore()
      useCommandPaletteToggle()
      
      const runCommand = (command: () => void) => {
        setCommandPaletteOpen(false)
        command()
      }

      return (
        <CommandDialog open={isCommandPaletteOpen} onOpenChange={setCommandPaletteOpen}>
          <CommandInput placeholder="Type a command or search..." />
          <CommandList>
            <CommandEmpty>No results found.</CommandEmpty>
            <CommandGroup heading="Navigation">
              <CommandItem onSelect={() => runCommand(() => setActivePage('dashboard'))}>
                <Home className="mr-2 h-4 w-4" />
                <span>Go to Dashboard</span>
                <CommandShortcut>G D</CommandShortcut>
              </CommandItem>
              <CommandItem onSelect={() => runCommand(() => setActivePage('settings'))}>
                <Settings className="mr-2 h-4 w-4" />
                <span>Go to Settings</span>
                <CommandShortcut>G S</CommandShortcut>
              </CommandItem>
              <CommandItem onSelect={() => runCommand(() => setActivePage('toaster'))}>
                <Component className="mr-2 h-4 w-4" />
                <span>Go to Toaster Demo</span>
                <CommandShortcut>G T</CommandShortcut>
              </CommandItem>
              <CommandItem onSelect={() => runCommand(() => setActivePage('notifications' as ActivePage))}>
                <Bell className="mr-2 h-4 w-4" />
                <span>Go to Notifications</span>
                <CommandShortcut>G N</CommandShortcut>
              </CommandItem>
            </CommandGroup>
            <CommandSeparator />
            <CommandGroup heading="Actions">
              <CommandItem onSelect={() => runCommand(() => dispatch({ type: 'TOGGLE_DARK_MODE' }))}>
                {isDarkMode ? <Sun className="mr-2 h-4 w-4" /> : <Moon className="mr-2 h-4 w-4" />}
                <span>Toggle Theme</span>
                <CommandShortcut>⌘T</CommandShortcut>
              </CommandItem>
              <CommandItem onSelect={() => runCommand(toggleFullscreen)}>
                <Maximize className="mr-2 h-4 w-4" />
                <span>Toggle Fullscreen</span>
                <CommandShortcut>⌘F</CommandShortcut>
              </CommandItem>
              <CommandItem onSelect={() => runCommand(() => {
                setSidePaneContent('settings');
                dispatch({ type: 'SET_BODY_STATE', payload: BODY_STATES.SIDE_PANE });
              })}>
                <PanelRight className="mr-2 h-4 w-4" />
                <span>Open Settings in Side Pane</span>
                <CommandShortcut>⌥S</CommandShortcut>
              </CommandItem>
            </CommandGroup>
            <CommandSeparator />
            <CommandGroup heading="Preferences">
              <CommandItem onSelect={() => runCommand(() => dispatch({ type: 'SET_COMPACT_MODE', payload: true }))}>
                <Smartphone className="mr-2 h-4 w-4" />
                <span>Enable Compact Mode</span>
                <CommandShortcut>⌘C</CommandShortcut>
              </CommandItem>
              <CommandItem onSelect={() => runCommand(() => dispatch({ type: 'SET_COMPACT_MODE', payload: false }))}>
                <Monitor className="mr-2 h-4 w-4" />
                <span>Disable Compact Mode</span>
                <CommandShortcut>⇧⌘C</CommandShortcut>
              </CommandItem>
            </CommandGroup>
          </CommandList>
        </CommandDialog>
      )
    }
approved: true
linesAdded: null
linesRemoved: null
linesDifference: null
gitCommittedAt: null
status: committed
id: 94
