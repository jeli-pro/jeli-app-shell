uuid: 489953b0-0b66-4f40-a38f-a39c90b6a782
projectId: jeli-app-shell
createdAt: '2025-10-18T15:28:46.981Z'
gitCommitMsg: >-
  feat(calendar): Add item background color customization

  Introduces a new feature allowing users to color-code items in the calendar
  view based on a selected data property (priority, status, or category). This
  provides immediate visual context, making the calendar more scannable and
  useful for planning.

  - Adds `CalendarColorProp` type for type safety. - Integrates a `calColor` URL
  search parameter into `useAppViewManager`
    for persistent, shareable view state.
  - Implements a new radio group in the calendar settings popover to
    control the color-coding property.
  - Updates the `CalendarEvent` component to dynamically apply Tailwind
    CSS classes for background, border, and text colors based on the
    selected property.
promptSummary: >-
  I want to add a feature to the calendar view in the data demo page. I want to
  allow users to select a data property (like 'status' or 'priority') and have
  the calendar items be color-coded based on the value of that property.
reasoning:
  - 'Okay, I''m ready to implement this feature. Here is the plan:'
  - >-
    1.  **Extend Application State:** I'll first update our type definitions to
    include a `CalendarColorProp`. Then, I'll integrate this new state into the
    `useAppViewManager` hook, managing it via a `calColor` URL search parameter.
    This ensures the view state is persistent and shareable.
  - >-
    2.  **Add UI Controls:** I'll modify the `DataCalendarViewControls`
    component to include a new radio group. This will allow users to select how
    calendar items are color-coded: by priority, status, category, or none.
  - >-
    3.  **Implement Visual Styling:** Finally, I'll update the
    `DataCalendarView` component. I'll define color mappings for different data
    properties and refactor the `CalendarEvent` sub-component to dynamically
    apply these colors as Tailwind CSS classes based on the user's selection.
  - Let's begin.
  - '### Part 1: State Management & Types'
  - First, I'll define the new type for our color-coding property.
  - Now I'll wire this new state into the main view manager hook.
  - '### Part 2: UI Controls'
  - Next, I'll add the radio group to the calendar settings popover.
  - '### Part 3: Apply Visual Styles'
  - Finally, I'll update the calendar view to apply the colors.
  - '---'
  - >-
    That completes the implementation. The calendar view now supports
    color-coding items by priority, status, or category, with the state managed
    cleanly through URL parameters.
operations:
  - type: write
    path: src/pages/DataDemo/types.ts
    content: >+
      --- src/pages/DataDemo/types.ts

      +++ src/pages/DataDemo/types.ts

      @@ -3,6 +3,7 @@
       
       export type CalendarDateProp = 'dueDate' | 'createdAt' | 'updatedAt';
       export type CalendarDisplayProp = 'priority' | 'assignee' | 'tags';
      +export type CalendarColorProp = 'none' | 'priority' | 'status' |
      'category';
       
       export type SortableField = 'title' | 'status' | 'priority' | 'updatedAt' | 'assignee.name' | 'metrics.views' | 'metrics.completion' | 'createdAt'
       export type SortDirection = 'asc' | 'desc'

    patchStrategy: standard-diff
  - type: write
    path: src/hooks/useAppViewManager.hook.ts
    content: "--- src/hooks/useAppViewManager.hook.ts\n+++ src/hooks/useAppViewManager.hook.ts\n@@ -1,6 +1,6 @@\n import { useMemo, useCallback, useEffect, useRef } from 'react';\n import { useSearchParams, useNavigate, useLocation, useParams } from 'react-router-dom';\n import { useAppShellStore, type AppShellState, type ActivePage } from '@/store/appShell.store';\n-import type { DataItem, ViewMode, SortConfig, SortableField, GroupableField, Status, Priority, CalendarDateProp, CalendarDisplayProp } from '@/pages/DataDemo/types';\n+import type { DataItem, ViewMode, SortConfig, SortableField, GroupableField, Status, Priority, CalendarDateProp, CalendarDisplayProp, CalendarColorProp } from '@/pages/DataDemo/types';\n import type { FilterConfig } from '@/pages/DataDemo/components/DataToolbar';\n import type { TaskView } from '@/pages/Messaging/types';\n import { BODY_STATES, SIDEBAR_STATES } from '@/lib/utils';\n@@ -43,6 +43,7 @@\n   const calDate = searchParams.get('calDate');\n   const calDisplay = searchParams.get('calDisplay');\n   const calLimit = searchParams.get('calLimit');\n+  const calColor = searchParams.get('calColor');\n \n   const { bodyState, sidePaneContent } = useMemo(() => {\n     const validPanes: AppShellState['sidePaneContent'][] = ['details', 'settings', 'main', 'toaster', 'notifications', 'dataDemo', 'messaging'];\n@@ -112,6 +113,7 @@\n     if (calLimit === 'all') return 'all';\n     return isNaN(limit) ? 3 : limit;\n   }, [calLimit]);\n+  const calendarColorProp = useMemo(() => (calColor || 'none') as CalendarColorProp, [calColor]);\n \n   // --- MUTATOR ACTIONS ---\n \n@@ -250,6 +252,7 @@\n     handleParamsChange({ calDisplay: isDefault ? null : props.join(',') });\n   };\n   const setCalendarItemLimit = (limit: number | 'all') => handleParamsChange({ calLimit: limit === 3 ? null : String(limit) });\n+  const setCalendarColorProp = (prop: CalendarColorProp) => handleParamsChange({ calColor: prop === 'none' ? null : prop });\n \n   const onItemSelect = useCallback((item: DataItem) => {\n \t\tnavigate(`/data-demo/${item.id}${location.search}`);\n@@ -271,6 +274,7 @@\n     calendarDateProp,\n     calendarDisplayProps,\n     calendarItemLimit,\n+    calendarColorProp,\n     // Actions\n     navigateTo,\n     openSidePane,\n@@ -289,13 +293,14 @@\n     setPage,\n     setCalendarDateProp,\n     setCalendarDisplayProps,\n     setCalendarItemLimit,\n+    setCalendarColorProp,\n   }), [\n     bodyState, sidePaneContent, currentActivePage, itemId, messagingView, viewMode,\n     page, groupBy, activeGroupTab, filters, sortConfig, calendarDateProp,\n-    calendarDisplayProps, calendarItemLimit,\n+    calendarDisplayProps, calendarItemLimit, calendarColorProp,\n     navigateTo, openSidePane, closeSidePane, toggleSidePane, toggleSplitView, setNormalView, setMessagingView,\n     switchSplitPanes, closeSplitPane, onItemSelect, setViewMode, setGroupBy, setActiveGroupTab, setFilters,\n-    setSort, setTableSort, setPage, setCalendarDateProp, setCalendarDisplayProps, setCalendarItemLimit\n+    setSort, setTableSort, setPage, setCalendarDateProp, setCalendarDisplayProps, setCalendarItemLimit, setCalendarColorProp\n   ]);\n }\n\n"
    patchStrategy: standard-diff
  - type: write
    path: src/pages/DataDemo/components/DataCalendarViewControls.tsx
    content: >+
      --- src/pages/DataDemo/components/DataCalendarViewControls.tsx

      +++ src/pages/DataDemo/components/DataCalendarViewControls.tsx

      @@ -5,13 +5,14 @@
       import { Switch } from "@/components/ui/switch";
       import { Separator } from "@/components/ui/separator";
       import { useAppViewManager } from "@/hooks/useAppViewManager.hook";
      -import type { CalendarDateProp, CalendarDisplayProp } from "../types";

      +import type { CalendarDateProp, CalendarDisplayProp, CalendarColorProp }
      from "../types";
       
       export function CalendarViewControls() {
           const { 
               calendarDateProp, setCalendarDateProp,
               calendarDisplayProps, setCalendarDisplayProps,
      -        calendarItemLimit, setCalendarItemLimit

      +        calendarItemLimit, setCalendarItemLimit,

      +        calendarColorProp, setCalendarColorProp,
           } = useAppViewManager();
       
           const handleDisplayPropChange = (prop: CalendarDisplayProp, checked: boolean) => {
      @@ -36,6 +37,28 @@
                               </p>
                           </div>
                           <Separator />
      +                    <div className="space-y-3">

      +                        <Label className="font-semibold">Item Background
      Color</Label>

      +                        <RadioGroup value={calendarColorProp}
      onValueChange={(v) => setCalendarColorProp(v as CalendarColorProp)}
      className="gap-2">

      +                            <div className="flex items-center space-x-2">

      +                                <RadioGroupItem value="none"
      id="color-none" />

      +                                <Label htmlFor="color-none"
      className="font-normal">None</Label>

      +                            </div>

      +                            <div className="flex items-center space-x-2">

      +                                <RadioGroupItem value="priority"
      id="color-priority" />

      +                                <Label htmlFor="color-priority"
      className="font-normal">By Priority</Label>

      +                            </div>

      +                            <div className="flex items-center space-x-2">

      +                                <RadioGroupItem value="status"
      id="color-status" />

      +                                <Label htmlFor="color-status"
      className="font-normal">By Status</Label>

      +                            </div>

      +                             <div className="flex items-center
      space-x-2">

      +                                <RadioGroupItem value="category"
      id="color-category" />

      +                                <Label htmlFor="color-category"
      className="font-normal">By Category</Label>

      +                            </div>

      +                        </RadioGroup>

      +                    </div>

      +                    <Separator />
                           <div className="space-y-3">
                               <Label className="font-semibold">Date Property</Label>
                               <RadioGroup value={calendarDateProp} onValueChange={(v) => setCalendarDateProp(v as CalendarDateProp)} className="gap-2">

    patchStrategy: standard-diff
  - type: write
    path: src/pages/DataDemo/components/DataCalendarView.tsx
    content: >+
      --- src/pages/DataDemo/components/DataCalendarView.tsx

      +++ src/pages/DataDemo/components/DataCalendarView.tsx

      @@ -5,7 +5,7 @@
       import { Button } from "@/components/ui/button";
       import { Badge } from "@/components/ui/badge";
       import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
      -import { cn, getPriorityColor } from "@/lib/utils";

      -import type { DataItem, CalendarDisplayProp, CalendarDateProp } from
      "../types";

      +import { cn, getPriorityColor } from "@/lib/utils";

      +import type { DataItem, CalendarDisplayProp, CalendarDateProp,
      CalendarColorProp, Status, Priority } from "../types";
       import { useAppViewManager } from "@/hooks/useAppViewManager.hook";
       import { useResizeObserver } from "@/hooks/useResizeObserver.hook";
       import { useSelectedItem, useDataDemoStore } from "../store/dataDemo.store";
      @@ -16,6 +16,40 @@
         data: DataItem[];
       }
       
      +const PRIORITY_BG_COLORS: Record<Priority, string> = {

      +  low: 'bg-blue-500/80 border-blue-600/80 text-white',

      +  medium: 'bg-yellow-500/80 border-yellow-600/80 text-yellow-950',

      +  high: 'bg-orange-500/80 border-orange-600/80 text-white',

      +  critical: 'bg-red-600/80 border-red-700/80 text-white',

      +};

      +

      +const STATUS_BG_COLORS: Record<Status, string> = {

      +  active: 'bg-sky-500/80 border-sky-600/80 text-white',

      +  pending: 'bg-amber-500/80 border-amber-600/80 text-amber-950',

      +  completed: 'bg-emerald-600/80 border-emerald-700/80 text-white',

      +  archived: 'bg-zinc-500/80 border-zinc-600/80 text-white',

      +};

      +

      +const CATEGORY_BG_COLORS = [

      +  'bg-rose-500/80 border-rose-600/80 text-white',

      +  'bg-fuchsia-500/80 border-fuchsia-600/80 text-white',

      +  'bg-indigo-500/80 border-indigo-600/80 text-white',

      +  'bg-teal-500/80 border-teal-600/80 text-white',

      +  'bg-lime-500/80 border-lime-600/80 text-lime-950',

      +];

      +

      +const getCategoryBgColor = (category: string) => {

      +  let hash = 0;

      +  for (let i = 0; i < category.length; i++) {

      +    hash = category.charCodeAt(i) + ((hash << 5) - hash);

      +  }

      +  const index = Math.abs(hash % CATEGORY_BG_COLORS.length);

      +  return CATEGORY_BG_COLORS[index];

      +};

      +
       function CalendarHeader({ currentDate, onPrevMonth, onNextMonth, onToday }: {
         currentDate: Date;
         onPrevMonth: () => void;
      @@ -46,29 +80,43 @@
         );
       }
       
      -function CalendarEvent({ item, isSelected, isDragging, onDragStart,
      displayProps }: { 

      +function CalendarEvent({ item, isSelected, isDragging, onDragStart,
      displayProps, colorProp }: { 
           item: DataItem; 
           isSelected: boolean;
           isDragging: boolean;
           onDragStart: (e: React.DragEvent<HTMLDivElement>, itemId: string) => void;
           displayProps: CalendarDisplayProp[];
      +    colorProp: CalendarColorProp;
       }) {
         const { onItemSelect } = useAppViewManager();
           const hasFooter = displayProps.includes('priority') || displayProps.includes('assignee');
       
      +    const colorClass = useMemo(() => {

      +      switch (colorProp) {

      +        case 'priority': return PRIORITY_BG_COLORS[item.priority];

      +        case 'status': return STATUS_BG_COLORS[item.status];

      +        case 'category': return getCategoryBgColor(item.category);

      +        default: return null;

      +      }

      +    }, [colorProp, item.priority, item.status, item.category]);

      +
           return (
               <motion.div
                   layout
                   draggable
                   onDragStart={(e) => onDragStart(e, item.id)}
                   initial={{ opacity: 0, y: 10 }}
                   animate={{ opacity: 1, y: 0 }}
                   exit={{ opacity: 0, y: -10 }}
                   transition={{ duration: 0.2 }}
                   onClick={() => onItemSelect(item)}
                   className={cn(
      -                "p-2 rounded-lg cursor-grab transition-all duration-200
      border bg-card/60 dark:bg-neutral-800/60 backdrop-blur-sm space-y-1",

      -                "hover:bg-card/80 dark:hover:bg-neutral-700/70",

      -                isSelected && "ring-2 ring-primary ring-offset-background
      ring-offset-2 bg-card/90",

      -                isDragging && "opacity-50 ring-2 ring-primary
      cursor-grabbing"

      +                "p-2 rounded-lg cursor-grab transition-all duration-200
      border space-y-1",

      +                isSelected && "ring-2 ring-primary ring-offset-background
      ring-offset-2",

      +                isDragging && "opacity-50 ring-2 ring-primary
      cursor-grabbing",

      +                colorClass 

      +                  ? `${colorClass} hover:brightness-95
      dark:hover:brightness-110`

      +                  : "bg-card/60 dark:bg-neutral-800/60 backdrop-blur-sm
      hover:bg-card/80 dark:hover:bg-neutral-700/70"
                   )}
               >
      -            <h4 className="font-semibold text-sm leading-tight
      text-card-foreground/90 line-clamp-2">

      +            <h4 className={cn(

      +              "font-semibold text-sm leading-tight line-clamp-2",

      +              colorClass ? "text-inherit" : "text-card-foreground/90"

      +            )}>
                       {item.title}
                   </h4>
       
      @@ -77,7 +125,10 @@
                   )}
       
                   {hasFooter && (
      -                <div className="flex items-center justify-between pt-1
      border-t border-border/30 dark:border-neutral-700/50">

      +                <div className={cn(

      +                    "flex items-center justify-between pt-1 border-t",

      +                    colorClass ? "border-black/10 dark:border-white/10" :
      "border-border/30 dark:border-neutral-700/50"

      +                )}>
                           {displayProps.includes('priority') ? (
                               <Badge className={cn("text-xs border capitalize", getPriorityColor(item.priority))}>
                                   {item.priority}
      @@ -102,10 +153,11 @@
       export function DataCalendarView({ data }: CalendarViewProps) {
         const [currentDate, setCurrentDate] = useState(new Date());
         const { 
      -    itemId, 

      +    itemId,
           calendarDateProp, 
           calendarDisplayProps, 
      -    calendarItemLimit 

      +    calendarItemLimit,

      +    calendarColorProp,
         } = useAppViewManager();
         const selectedItem = useSelectedItem(itemId);
         const updateItem = useDataDemoStore(s => s.updateItem);
      @@ -242,6 +294,7 @@
                                   isDragging={draggedItemId === item.id}
                                   onDragStart={handleDragStart}
                                   displayProps={calendarDisplayProps}
      +                            colorProp={calendarColorProp}
                                 />
                               ))}
                             </AnimatePresence>

    patchStrategy: standard-diff
snapshot:
  src/pages/DataDemo/types.ts: >
    export type ViewMode = 'list' | 'cards' | 'grid' | 'table' | 'kanban' |
    'calendar'


    export type GroupableField = 'status' | 'priority' | 'category'


    export type CalendarDateProp = 'dueDate' | 'createdAt' | 'updatedAt';

    export type CalendarDisplayProp = 'priority' | 'assignee' | 'tags';


    export type SortableField = 'title' | 'status' | 'priority' | 'updatedAt' |
    'assignee.name' | 'metrics.views' | 'metrics.completion' | 'createdAt'

    export type SortDirection = 'asc' | 'desc'

    export interface SortConfig {
      key: SortableField
      direction: SortDirection
    }


    export interface DataItem {
      id: string
      title: string
      description: string
      category: string
      status: 'active' | 'pending' | 'completed' | 'archived'
      priority: 'low' | 'medium' | 'high' | 'critical'
      assignee: {
        name: string
        avatar: string
        email: string
      }
      metrics: {
        views: number
        likes: number
        shares: number
        completion: number
      }
      tags: string[]
      createdAt: string
      updatedAt: string
      dueDate?: string
      thumbnail?: string
      content?: {
        summary: string
        details: string
        attachments?: Array<{
          name: string
          type: string
          size: string
          url: string
        }>
      }
    }


    export interface ViewProps {
      data: DataItem[] | Record<string, DataItem[]>
      onItemSelect: (item: DataItem) => void
      selectedItem: DataItem | null
      isGrid?: boolean

      // Props for table view specifically
      sortConfig?: SortConfig | null
      onSort?: (field: SortableField) => void
    }


    export type Status = DataItem['status']

    export type Priority = DataItem['priority']
  src/hooks/useAppViewManager.hook.ts: "import { useMemo, useCallback, useEffect, useRef } from 'react';\nimport { useSearchParams, useNavigate, useLocation, useParams } from 'react-router-dom';\nimport { useAppShellStore, type AppShellState, type ActivePage } from '@/store/appShell.store';\nimport type { DataItem, ViewMode, SortConfig, SortableField, GroupableField, Status, Priority, CalendarDateProp, CalendarDisplayProp } from '@/pages/DataDemo/types';\nimport type { FilterConfig } from '@/pages/DataDemo/components/DataToolbar';\nimport type { TaskView } from '@/pages/Messaging/types';\nimport { BODY_STATES, SIDEBAR_STATES } from '@/lib/utils';\n\nconst pageToPaneMap: Record<string, AppShellState['sidePaneContent']> = {\n  dashboard: 'main',\n  settings: 'settings',\n  toaster: 'toaster',\n  notifications: 'notifications',\n  'data-demo': 'dataDemo',\n  messaging: 'messaging',\n};\n\nfunction usePrevious<T>(value: T): T | undefined {\n  const ref = useRef<T>();\n  useEffect(() => {\n    ref.current = value;\n  });\n  return ref.current;\n}\n\n/**\n * A centralized hook to manage and synchronize all URL-based view states.\n * This is the single source of truth for view modes, side panes, split views,\n * and page-specific parameters.\n */\nexport function useAppViewManager() {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const navigate = useNavigate();\n  const location = useLocation();\n  const params = useParams<{ itemId: string; conversationId: string }>();\n  const { itemId, conversationId } = params;\n  const { setSidebarState, sidebarState } = useAppShellStore();\n\n  // --- DERIVED STATE FROM URL ---\n\n  const view = searchParams.get('view');\n  const sidePane = searchParams.get('sidePane');\n  const right = searchParams.get('right');\n  const messagingView = searchParams.get('messagingView') as TaskView | null;\n  const q = searchParams.get('q');\n  const status = searchParams.get('status');\n  const priority = searchParams.get('priority');\n  const sort = searchParams.get('sort');\n  const calDate = searchParams.get('calDate');\n  const calDisplay = searchParams.get('calDisplay');\n  const calLimit = searchParams.get('calLimit');\n\n  const { bodyState, sidePaneContent } = useMemo(() => {\n    const validPanes: AppShellState['sidePaneContent'][] = ['details', 'settings', 'main', 'toaster', 'notifications', 'dataDemo', 'messaging'];\n    \n    // 1. Priority: Explicit side pane overlay via URL param\n    if (sidePane && validPanes.includes(sidePane as AppShellState['sidePaneContent'])) {\n      return { bodyState: BODY_STATES.SIDE_PANE, sidePaneContent: sidePane as AppShellState['sidePaneContent'] };\n    }\n\n    // 2. Data item detail view (can be overlay or split)\n    if (itemId) {\n      if (view === 'split') {\n        return { bodyState: BODY_STATES.SPLIT_VIEW, sidePaneContent: 'dataItem' as const };\n      }\n      return { bodyState: BODY_STATES.SIDE_PANE, sidePaneContent: 'dataItem' as const };\n    }\n\n    // 3. Messaging conversation view (always split)\n    if (conversationId) {\n      return { bodyState: BODY_STATES.SPLIT_VIEW, sidePaneContent: 'messaging' as const };\n    }\n\n    // 4. Generic split view via URL param\n    if (view === 'split' && right && validPanes.includes(right as AppShellState['sidePaneContent'])) {\n      return { bodyState: BODY_STATES.SPLIT_VIEW, sidePaneContent: right as AppShellState['sidePaneContent'] };\n    }\n\n    return { bodyState: BODY_STATES.NORMAL, sidePaneContent: 'details' as const };\n  }, [itemId, conversationId, view, sidePane, right]);\n  \n  const currentActivePage = useMemo(() => (location.pathname.split('/')[1] || 'dashboard') as ActivePage, [location.pathname]);\n  const prevActivePage = usePrevious(currentActivePage);\n\n  // --- SIDE EFFECTS ---\n  useEffect(() => {\n    // On navigating to messaging page, collapse sidebar if it's expanded.\n    // This ensures a good default view but allows the user to expand it again if they wish.\n    if (currentActivePage === 'messaging' && prevActivePage !== 'messaging' && sidebarState === SIDEBAR_STATES.EXPANDED) {\n      setSidebarState(SIDEBAR_STATES.COLLAPSED);\n    }\n  }, [currentActivePage, prevActivePage, sidebarState, setSidebarState]);\n\n  // DataDemo specific state\n  const viewMode = useMemo(() => (searchParams.get('dataView') as ViewMode) || 'list', [searchParams]);\n\tconst page = useMemo(() => parseInt(searchParams.get('page') || '1', 10), [searchParams]);\n\tconst groupBy = useMemo(() => (searchParams.get('groupBy') as GroupableField | 'none') || 'none', [searchParams]);\n\tconst activeGroupTab = useMemo(() => searchParams.get('tab') || 'all', [searchParams]);\n\tconst filters = useMemo<FilterConfig>(\n\t\t() => ({\n\t\t\tsearchTerm: q || '',\n\t\t\tstatus: (status?.split(',') || []).filter(Boolean) as Status[],\n\t\t\tpriority: (priority?.split(',') || []).filter(Boolean) as Priority[],\n\t\t}),\n\t\t[q, status, priority],\n\t);\n\tconst sortConfig = useMemo<SortConfig | null>(() => {\n\t\tconst sortParam = sort;\n\t\tif (!sortParam) return { key: 'updatedAt', direction: 'desc' }; // Default sort\n\t\tif (sortParam === 'default') return null;\n\n\t\tconst [key, direction] = sortParam.split('-');\n\t\treturn { key: key as SortableField, direction: direction as 'asc' | 'desc' };\n\t}, [sort]);\n  const calendarDateProp = useMemo(() => (calDate || 'dueDate') as CalendarDateProp, [calDate]);\n  const calendarDisplayProps = useMemo(\n    () => {\n      if (calDisplay === null) return []; // Default is now nothing\n      if (calDisplay === '') return []; // Explicitly empty is also nothing\n      return calDisplay.split(',') as CalendarDisplayProp[];\n    },\n    [calDisplay]\n  );\n  const calendarItemLimit = useMemo(() => {\n    const limit = parseInt(calLimit || '3', 10);\n    if (calLimit === 'all') return 'all';\n    return isNaN(limit) ? 3 : limit;\n  }, [calLimit]);\n\n  // --- MUTATOR ACTIONS ---\n\n  const handleParamsChange = useCallback(\n\t\t(newParams: Record<string, string | string[] | null | undefined>, resetPage = false) => {\n\t\t\tsetSearchParams(\n\t\t\t\t(prev) => {\n\t\t\t\t\tconst updated = new URLSearchParams(prev);\n\t\t\t\t\t\n\t\t\t\t\tfor (const [key, value] of Object.entries(newParams)) {\n\t\t\t\t\t\tif (value === null || value === undefined || (Array.isArray(value) && value.length === 0) || value === '') {\n\t\t\t\t\t\t\tupdated.delete(key);\n\t\t\t\t\t\t} else if (Array.isArray(value)) {\n\t\t\t\t\t\t\tupdated.set(key, value.join(','));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tupdated.set(key, String(value));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (resetPage) {\n\t\t\t\t\t\tupdated.delete('page');\n\t\t\t\t\t}\n\t\t\t\t\tif ('groupBy' in newParams) {\n\t\t\t\t\t\tupdated.delete('tab');\n\t\t\t\t\t}\n\n\t\t\t\t\treturn updated;\n\t\t\t\t},\n\t\t\t\t{ replace: true },\n\t\t\t);\n\t\t},\n\t\t[setSearchParams],\n\t);\n\n  const navigateTo = useCallback((page: string, params?: Record<string, string | null>) => {\n    const targetPath = page.startsWith('/') ? page : `/${page}`;\n    const isSamePage = location.pathname === targetPath;\n    \n    const newSearchParams = new URLSearchParams(isSamePage ? searchParams : undefined);\n\n    if (params) {\n      for (const [key, value] of Object.entries(params)) {\n        if (value === null || value === undefined) {\n          newSearchParams.delete(key);\n        } else {\n          newSearchParams.set(key, value);\n        }\n      }\n    }\n\n    navigate({ pathname: targetPath, search: newSearchParams.toString() });\n  }, [navigate, location.pathname, searchParams]);\n\n  const openSidePane = useCallback((pane: AppShellState['sidePaneContent']) => {\n    if (location.pathname === `/${Object.keys(pageToPaneMap).find(key => pageToPaneMap[key] === pane)}`) {\n        navigate({ pathname: '/dashboard', search: `?sidePane=${pane}` }, { replace: true });\n    } else {\n        handleParamsChange({ sidePane: pane, view: null, right: null });\n    }\n  }, [handleParamsChange, navigate, location.pathname]);\n\n  const closeSidePane = useCallback(() => {\n    if (itemId) {\n      navigate('/data-demo');\n    } else {\n      handleParamsChange({ sidePane: null, view: null, right: null });\n    }\n  }, [itemId, navigate, handleParamsChange]);\n\n  const toggleSidePane = useCallback((pane: AppShellState['sidePaneContent']) => {\n    if (sidePane === pane) {\n      closeSidePane();\n    } else {\n      openSidePane(pane);\n    }\n  }, [sidePane, openSidePane, closeSidePane]);\n\n  const toggleSplitView = useCallback(() => {\n    if (bodyState === BODY_STATES.SIDE_PANE) {\n      handleParamsChange({ view: 'split', right: sidePane, sidePane: null });\n    } else if (bodyState === BODY_STATES.SPLIT_VIEW) {\n      handleParamsChange({ sidePane: right, view: null, right: null });\n    } else { // From normal\n      const paneContent = pageToPaneMap[currentActivePage] || 'details';\n      handleParamsChange({ view: 'split', right: paneContent, sidePane: null });\n    }\n  }, [bodyState, sidePane, right, currentActivePage, handleParamsChange]);\n  \n  const setNormalView = useCallback(() => {\n      handleParamsChange({ sidePane: null, view: null, right: null });\n  }, [handleParamsChange]);\n\n  const switchSplitPanes = useCallback(() => {\n    if (bodyState !== BODY_STATES.SPLIT_VIEW) return;\n    const newSidePaneContent = pageToPaneMap[currentActivePage];\n    const newActivePage = Object.entries(pageToPaneMap).find(\n      ([, value]) => value === sidePaneContent\n    )?.[0] as ActivePage | undefined;\n\n    if (newActivePage && newSidePaneContent) {\n      navigate(`/${newActivePage}?view=split&right=${newSidePaneContent}`, { replace: true });\n    }\n  }, [bodyState, currentActivePage, sidePaneContent, navigate]);\n  \n  const closeSplitPane = useCallback((paneToClose: 'main' | 'right') => {\n    if (bodyState !== BODY_STATES.SPLIT_VIEW) return;\n    if (paneToClose === 'right') {\n      navigate(`/${currentActivePage}`, { replace: true });\n    } else { // Closing main pane\n      const pageToBecomeActive = Object.entries(pageToPaneMap).find(\n        ([, value]) => value === sidePaneContent\n      )?.[0] as ActivePage | undefined;\n      \n      if (pageToBecomeActive) {\n        navigate(`/${pageToBecomeActive}`, { replace: true });\n      } else {\n        navigate(`/dashboard`, { replace: true });\n      }\n    }\n  }, [bodyState, currentActivePage, sidePaneContent, navigate]);\n  \n  // DataDemo actions\n  const setViewMode = (mode: ViewMode) => handleParamsChange({ dataView: mode === 'list' ? null : mode });\n  const setGroupBy = (val: string) => handleParamsChange({ groupBy: val === 'none' ? null : val }, true);\n  const setActiveGroupTab = (tab: string) => handleParamsChange({ tab: tab === 'all' ? null : tab });\n  const setFilters = (newFilters: FilterConfig) => {\n    handleParamsChange({ q: newFilters.searchTerm, status: newFilters.status, priority: newFilters.priority }, true);\n  }\n  const setSort = (config: SortConfig | null) => {\n    if (!config) {\n      handleParamsChange({ sort: null }, true);\n    } else {\n      handleParamsChange({ sort: `${config.key}-${config.direction}` }, true);\n    }\n  }\n  const setTableSort = (field: SortableField) => {\n    let newSort: string | null = `${field}-desc`;\n    if (sortConfig?.key === field) {\n      if (sortConfig.direction === 'desc') newSort = `${field}-asc`;\n      else if (sortConfig.direction === 'asc') newSort = null;\n    }\n    handleParamsChange({ sort: newSort }, true);\n  };\n  const setPage = (newPage: number) => handleParamsChange({ page: newPage.toString() });\n\n  // Calendar specific actions\n  const setCalendarDateProp = (prop: CalendarDateProp) => handleParamsChange({ calDate: prop === 'dueDate' ? null : prop });\n  const setCalendarDisplayProps = (props: CalendarDisplayProp[]) => {\n    // Check for default state to keep URL clean\n    const isDefault = props.length === 0;\n    handleParamsChange({ calDisplay: isDefault ? null : props.join(',') });\n  };\n  const setCalendarItemLimit = (limit: number | 'all') => handleParamsChange({ calLimit: limit === 3 ? null : String(limit) });\n\n  const onItemSelect = useCallback((item: DataItem) => {\n\t\tnavigate(`/data-demo/${item.id}${location.search}`);\n\t}, [navigate, location.search]);\n\n  const setMessagingView = (view: TaskView) => handleParamsChange({ messagingView: view });\n\n\n  return useMemo(() => ({\n    // State\n    bodyState,\n    sidePaneContent,\n    currentActivePage,\n    itemId,\n    messagingView,\n    // DataDemo State\n    viewMode,\n    page,\n    groupBy,\n    activeGroupTab,\n    filters,\n    sortConfig,\n    calendarDateProp,\n    calendarDisplayProps,\n    calendarItemLimit,\n    // Actions\n    navigateTo,\n    openSidePane,\n    closeSidePane,\n    toggleSidePane,\n    toggleSplitView,\n    setNormalView,\n    switchSplitPanes,\n    setMessagingView,\n    closeSplitPane,\n    // DataDemo Actions\n    onItemSelect,\n    setViewMode,\n    setGroupBy,\n    setActiveGroupTab,\n    setFilters,\n    setSort,\n    setTableSort,\n    setPage,\n    setCalendarDateProp,\n    setCalendarDisplayProps,\n    setCalendarItemLimit,\n  }), [\n    bodyState, sidePaneContent, currentActivePage, itemId, messagingView, viewMode,\n    page, groupBy, activeGroupTab, filters, sortConfig, calendarDateProp,\n    calendarDisplayProps, calendarItemLimit,\n    navigateTo, openSidePane, closeSidePane, toggleSidePane, toggleSplitView, setNormalView, setMessagingView,\n    switchSplitPanes, closeSplitPane, onItemSelect, setViewMode, setGroupBy, setActiveGroupTab, setFilters,\n    setSort, setTableSort, setPage, setCalendarDateProp, setCalendarDisplayProps, setCalendarItemLimit\n  ]);\n}"
  src/pages/DataDemo/components/DataCalendarView.tsx: >-
    import { useState, useMemo, useRef } from "react";

    import { format, addMonths, subMonths, startOfMonth, endOfMonth,
    startOfWeek, endOfWeek, eachDayOfInterval, isSameMonth, isToday, isSameDay,
    } from "date-fns";

    import { ChevronLeft, ChevronRight } from "lucide-react";

    import { AnimatePresence, motion } from "framer-motion";


    import { Button } from "@/components/ui/button";

    import { Badge } from "@/components/ui/badge";

    import { Avatar, AvatarFallback, AvatarImage } from
    "@/components/ui/avatar";

    import { cn, getPriorityColor } from "@/lib/utils";

    import type { DataItem, CalendarDisplayProp, CalendarDateProp } from
    "../types";

    import { useAppViewManager } from "@/hooks/useAppViewManager.hook";

    import { useResizeObserver } from "@/hooks/useResizeObserver.hook";

    import { useSelectedItem, useDataDemoStore } from "../store/dataDemo.store";

    import { CalendarViewControls } from "./DataCalendarViewControls";

    import { ItemTags } from "./shared/DataItemParts";


    interface CalendarViewProps {
      data: DataItem[];
    }


    function CalendarHeader({ currentDate, onPrevMonth, onNextMonth, onToday }:
    {
      currentDate: Date;
      onPrevMonth: () => void;
      onNextMonth: () => void;
      onToday: () => void;
    }) {
      return (
        <div className="flex items-center justify-between gap-4 mb-6">
          <h2 className="text-xl font-bold md:text-2xl tracking-tight">
            {format(currentDate, "MMMM yyyy")}
          </h2>
          <div className="flex items-center gap-2">
            <Button variant="outline" size="sm" onClick={onToday}>Today</Button>
            <CalendarViewControls />
            <div className="flex items-center">
              <Button variant="outline" size="icon" className="h-9 w-9" onClick={onPrevMonth}>
                <ChevronLeft className="h-4 w-4" />
              </Button>
              <Button variant="outline" size="icon" className="h-9 w-9" onClick={onNextMonth}>
                <ChevronRight className="h-4 w-4" />
              </Button>
            </div>
          </div>
        </div>
      );
    }


    function CalendarEvent({ item, isSelected, isDragging, onDragStart,
    displayProps }: { 
        item: DataItem; 
        isSelected: boolean;
        isDragging: boolean;
        onDragStart: (e: React.DragEvent<HTMLDivElement>, itemId: string) => void;
        displayProps: CalendarDisplayProp[];
    }) {
      const { onItemSelect } = useAppViewManager();
        const hasFooter = displayProps.includes('priority') || displayProps.includes('assignee');

        return (
            <motion.div
                layout
                draggable
                onDragStart={(e) => onDragStart(e, item.id)}
                initial={{ opacity: 0, y: 10 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0, y: -10 }}
                transition={{ duration: 0.2 }}
                onClick={() => onItemSelect(item)}
                className={cn(
                    "p-2 rounded-lg cursor-grab transition-all duration-200 border bg-card/60 dark:bg-neutral-800/60 backdrop-blur-sm space-y-1",
                    "hover:bg-card/80 dark:hover:bg-neutral-700/70",
                    isSelected && "ring-2 ring-primary ring-offset-background ring-offset-2 bg-card/90",
                    isDragging && "opacity-50 ring-2 ring-primary cursor-grabbing"
                )}
            >
                <h4 className="font-semibold text-sm leading-tight text-card-foreground/90 line-clamp-2">
                    {item.title}
                </h4>

                {displayProps.includes('tags') && item.tags.length > 0 && (
                    <ItemTags tags={item.tags} />
                )}

                {hasFooter && (
                    <div className="flex items-center justify-between pt-1 border-t border-border/30 dark:border-neutral-700/50">
                        {displayProps.includes('priority') ? (
                            <Badge className={cn("text-xs border capitalize", getPriorityColor(item.priority))}>
                                {item.priority}
                            </Badge>
                        ) : <div />}
                        {displayProps.includes('assignee') && (
                            <Avatar className="w-5 h-5">
                                <AvatarImage src={item.assignee.avatar} />
                                <AvatarFallback className="text-[10px] bg-muted dark:bg-neutral-700 text-foreground dark:text-neutral-200 font-medium">
                                    {item.assignee.name.split(" ").map((n) => n[0]).join("")}
                                </AvatarFallback>
                            </Avatar>
                        )}
                    </div>
                )}
            </motion.div>
        );
    }


    const datePropLabels: Record<CalendarDateProp, string> = {
      dueDate: 'due dates',
      createdAt: 'creation dates',
      updatedAt: 'update dates',
    };


    export function DataCalendarView({ data }: CalendarViewProps) {
      const [currentDate, setCurrentDate] = useState(new Date());
      const { 
        itemId, 
        calendarDateProp, 
        calendarDisplayProps, 
        calendarItemLimit 
      } = useAppViewManager();
      const selectedItem = useSelectedItem(itemId);
      const updateItem = useDataDemoStore(s => s.updateItem);
      
      // Drag & Drop State
      const [draggedItemId, setDraggedItemId] = useState<string | null>(null);
      const [dropTargetDate, setDropTargetDate] = useState<Date | null>(null);

      // Responsive Calendar State
      const calendarContainerRef = useRef<HTMLDivElement>(null);
      const { width } = useResizeObserver(calendarContainerRef);
      const MIN_DAY_WIDTH = 160; // px
      const numColumns = useMemo(() => {
        if (width === 0) return 7;
        const cols = Math.floor(width / MIN_DAY_WIDTH);
        return Math.max(3, Math.min(7, cols));
      }, [width]);

      const itemsByDateProp = useMemo(() => data.filter(item => !!item[calendarDateProp]), [data, calendarDateProp]);

      const eventsByDate = useMemo(() => {
        const eventsMap = new Map<string, DataItem[]>();
        itemsByDateProp.forEach(item => {
          const dateValue = item[calendarDateProp];
          if (!dateValue) return;
          const date = new Date(dateValue as string);
          const dateKey = format(date, "yyyy-MM-dd");
          if (!eventsMap.has(dateKey)) {
            eventsMap.set(dateKey, []);
          }
          eventsMap.get(dateKey)?.push(item);
        });
        return eventsMap;
      }, [itemsByDateProp, calendarDateProp]);

      const monthStart = startOfMonth(currentDate);
      const monthEnd = endOfMonth(monthStart);
      const startDate = startOfWeek(monthStart, { weekStartsOn: 0 }); // Sunday
      const endDate = endOfWeek(monthEnd, { weekStartsOn: 0 });

      const days = eachDayOfInterval({ start: startDate, end: endDate });
      const weekdays = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
      
      // D&D Handlers
      const handleDragStart = (e: React.DragEvent, itemId: string) => {
        e.dataTransfer.effectAllowed = 'move';
        e.dataTransfer.setData('text/plain', itemId);
        setDraggedItemId(itemId);
      };
      
      const handleDragEnd = () => {
        setDraggedItemId(null);
        setDropTargetDate(null);
      };

      const handleDragOver = (e: React.DragEvent, day: Date) => {
        e.preventDefault();
        if (dropTargetDate === null || !isSameDay(day, dropTargetDate)) {
            setDropTargetDate(day);
        }
      };

      const handleDragLeave = () => {
        setDropTargetDate(null);
      };

      const handleDrop = (e: React.DragEvent, day: Date) => {
        e.preventDefault();
        const itemIdToUpdate = e.dataTransfer.getData('text/plain');
        if (itemIdToUpdate) {
            const originalItem = itemsByDateProp.find(i => i.id === itemIdToUpdate);
            if (originalItem && originalItem[calendarDateProp]) {
                const originalDate = new Date(originalItem[calendarDateProp] as string);
                // Preserve the time, only change the date part
                const newDueDate = new Date(day);
                newDueDate.setHours(originalDate.getHours(), originalDate.getMinutes(), originalDate.getSeconds(), originalDate.getMilliseconds());
                updateItem(itemIdToUpdate, { [calendarDateProp]: newDueDate.toISOString() });
            }
        }
        handleDragEnd(); // Reset state
      };
      
      const handlePrevMonth = () => setCurrentDate(subMonths(currentDate, 1));
      const handleNextMonth = () => setCurrentDate(addMonths(currentDate, 1));
      const handleToday = () => setCurrentDate(new Date());

      return (
        <div ref={calendarContainerRef} className="-mx-4 md:-mx-6">
          <div className="px-4 md:px-6 pb-2">
            <CalendarHeader currentDate={currentDate} onPrevMonth={handlePrevMonth} onNextMonth={handleNextMonth} onToday={handleToday} />
          </div>
          {itemsByDateProp.length === 0 ? (
            <div className="flex items-center justify-center h-96 text-muted-foreground rounded-lg border bg-card/30 mx-4 md:mx-6">
              No items with {datePropLabels[calendarDateProp]} to display on the calendar.
            </div>
          ) : (
            <div className="px-2" onDragEnd={handleDragEnd}>
              {numColumns === 7 && (
                <div className="grid grid-cols-7">
                  {weekdays.map(day => (
                    <div key={day} className="py-2 px-3 text-center text-xs font-semibold text-muted-foreground">
                      {day}
                    </div>
                  ))}
                </div>
              )}

              <AnimatePresence mode="wait">
                <motion.div
                  key={format(currentDate, "yyyy-MM")}
                  initial={{ opacity: 0 }}
                  animate={{ opacity: 1 }}
                  exit={{ opacity: 0 }}
                  transition={{ duration: 0.3 }}
                  style={{
                    display: 'grid',
                    gridTemplateColumns: `repeat(${numColumns}, minmax(0, 1fr))`,
                    gap: '0.5rem',
                  }}
                >
                  {days.map(day => {
                    const dateKey = format(day, "yyyy-MM-dd");
                    const dayEvents = eventsByDate.get(dateKey) || [];
                    const visibleEvents = calendarItemLimit === 'all' 
                        ? dayEvents 
                        : dayEvents.slice(0, calendarItemLimit as number);
                    const hiddenEventsCount = dayEvents.length - visibleEvents.length;
                    const isCurrentMonthDay = isSameMonth(day, currentDate);
                    const isDropTarget = dropTargetDate && isSameDay(day, dropTargetDate);
                    return (
                      <div
                        key={day.toString()}
                        onDragOver={(e) => handleDragOver(e, day)}
                        onDragLeave={handleDragLeave}
                        onDrop={(e) => handleDrop(e, day)}
                        className={cn(
                          "relative min-h-[150px] rounded-2xl p-2 flex flex-col gap-2 transition-all duration-300 border",
                          isCurrentMonthDay ? "bg-card/40 dark:bg-neutral-900/40 border-transparent" : "bg-muted/30 dark:bg-neutral-800/20 border-transparent text-muted-foreground/60",
                          isDropTarget ? "border-primary/50 bg-primary/10" : "hover:border-primary/20 hover:bg-card/60"
                        )}
                      >
                        <div className="font-semibold text-sm">
                          {isToday(day) ? (
                            <div className="flex items-center justify-center w-7 h-7 rounded-full bg-primary text-primary-foreground">
                              {format(day, 'd')}
                            </div>
                          ) : (
                            <div className="flex items-baseline gap-1.5 px-1 py-0.5">
                              {numColumns < 7 && <span className="text-xs opacity-70">{format(day, 'eee')}</span>}
                              <span>{format(day, 'd')}</span>
                            </div>
                          )}
                        </div>
                        <div className="space-y-2 overflow-y-auto flex-grow custom-scrollbar">
                          <AnimatePresence>
                            {visibleEvents.map(item => (
                              <CalendarEvent
                                key={item.id} 
                                item={item} 
                                isSelected={selectedItem?.id === item.id}
                                isDragging={draggedItemId === item.id}
                                onDragStart={handleDragStart}
                                displayProps={calendarDisplayProps}
                              />
                            ))}
                          </AnimatePresence>
                        </div>
                        {hiddenEventsCount > 0 && (
                          <div className="absolute bottom-1 right-2 text-xs font-bold text-muted-foreground">
                            +{hiddenEventsCount} more
                          </div>
                        )}
                      </div>
                    );
                  })}
                </motion.div>
              </AnimatePresence>
            </div>
          )}
        </div>
      );
    }
  src/pages/DataDemo/components/DataCalendarViewControls.tsx: >-
    import { Popover, PopoverContent, PopoverTrigger } from
    "@/components/ui/popover";

    import { Button } from "@/components/ui/button";

    import { Settings } from "lucide-react";

    import { Label } from "@/components/ui/label";

    import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";

    import { Checkbox } from "@/components/ui/checkbox";

    import { Switch } from "@/components/ui/switch";

    import { Separator } from "@/components/ui/separator";

    import { useAppViewManager } from "@/hooks/useAppViewManager.hook";

    import type { CalendarDateProp, CalendarDisplayProp } from "../types";


    export function CalendarViewControls() {
        const { 
            calendarDateProp, setCalendarDateProp,
            calendarDisplayProps, setCalendarDisplayProps,
            calendarItemLimit, setCalendarItemLimit
        } = useAppViewManager();

        const handleDisplayPropChange = (prop: CalendarDisplayProp, checked: boolean) => {
            const newProps = checked 
                ? [...calendarDisplayProps, prop] 
                : calendarDisplayProps.filter(p => p !== prop);
            setCalendarDisplayProps(newProps);
        };

        return (
            <Popover>
                <PopoverTrigger asChild>
                    <Button variant="outline" size="icon" className="h-9 w-9">
                        <Settings className="h-4 w-4" />
                    </Button>
                </PopoverTrigger>
                <PopoverContent className="w-80 p-4" align="end">
                    <div className="space-y-4">
                        <div className="space-y-1">
                            <h4 className="font-medium leading-none">Calendar Settings</h4>
                            <p className="text-sm text-muted-foreground">
                                Customize the calendar view.
                            </p>
                        </div>
                        <Separator />
                        <div className="space-y-3">
                            <Label className="font-semibold">Date Property</Label>
                            <RadioGroup value={calendarDateProp} onValueChange={(v) => setCalendarDateProp(v as CalendarDateProp)} className="gap-2">
                                <div className="flex items-center space-x-2">
                                    <RadioGroupItem value="dueDate" id="dueDate" />
                                    <Label htmlFor="dueDate" className="font-normal">Due Date</Label>
                                </div>
                                <div className="flex items-center space-x-2">
                                    <RadioGroupItem value="createdAt" id="createdAt" />
                                    <Label htmlFor="createdAt" className="font-normal">Created Date</Label>
                                </div>
                                <div className="flex items-center space-x-2">
                                    <RadioGroupItem value="updatedAt" id="updatedAt" />
                                    <Label htmlFor="updatedAt" className="font-normal">Updated Date</Label>
                                </div>
                            </RadioGroup>
                        </div>
                        <div className="space-y-3">
                            <Label className="font-semibold">Card Details</Label>
                            <div className="space-y-2">
                                {(['priority', 'assignee', 'tags'] as CalendarDisplayProp[]).map(prop => (
                                    <div key={prop} className="flex items-center space-x-2">
                                        <Checkbox id={prop} checked={calendarDisplayProps.includes(prop)} onCheckedChange={(c) => handleDisplayPropChange(prop, !!c)} />
                                        <Label htmlFor={prop} className="capitalize font-normal">{prop}</Label>
                                    </div>
                                ))}
                            </div>
                        </div>
                        <Separator />
                        <div className="flex items-center justify-between">
                             <div className="space-y-0.5">
                                <Label htmlFor="show-all" className="font-semibold">Show all items</Label>
                                <p className="text-xs text-muted-foreground">Display all items on a given day.</p>
                            </div>
                            <Switch id="show-all" checked={calendarItemLimit === 'all'} onCheckedChange={(c) => setCalendarItemLimit(c ? 'all' : 3)} />
                        </div>
                    </div>
                </PopoverContent>
            </Popover>
        );
    }
approved: true
linesAdded: null
linesRemoved: null
linesDifference: null
gitCommittedAt: '2025-10-18T15:30:17.052Z'
status: committed
id: 479
