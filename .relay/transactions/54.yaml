uuid: d700c2f6-930b-47e0-af96-33923d24e13d
projectId: amazing-app-shell
createdAt: '2025-10-10T14:01:19.913Z'
gitCommitMsg: >-
  feat: add toaster component and demo page

  - Installs sonner, framer-motion, and @radix-ui/react-slot as dependencies. -
  Adds a reusable Button component based on shadcn/ui. - Adds a Toaster
  component powered by sonner for notifications. - Creates a new ToasterDemo
  page to showcase variants, positions, and real-world usage. - Integrates the
  new page into the app's state management and sidebar navigation.
promptSummary: Integrate a toaster component and its demo into the application shell.
reasoning:
  - >-
    This is an excellent request. To add the toaster component and its demo to
    your application shell, I'll perform the following steps:
  - >-
    1.  **Install Dependencies**: I'll add `sonner`, `framer-motion`, and
    `@radix-ui/react-slot` to your `package.json` to support the new toast and
    button components.
  - '2.  **Create UI Components**: I''ll create new UI components:'
  - '*   A flexible `Button` component in `src/components/ui/button.tsx`.'
  - '*   The `Toaster` component you provided in `src/components/ui/toast.tsx`.'
  - >-
    3.  **Add Toaster Demo**: I will create the `ToasterDemo.tsx` component to
    showcase its functionality, complete with a page header for consistency.
  - >-
    4.  **Update State Management**: I'll add a new `'toaster'` page state to
    your Zustand store (`appStore.ts`).
  - >-
    5.  **Integrate Navigation**: I'll add a new "Components" section with a
    "Toaster" link to the `EnhancedSidebar.tsx` to make the demo page
    accessible.
  - >-
    6.  **Implement Page Routing**: Finally, I'll update `MainContent.tsx` to
    render the new `ToasterDemo` component when it's the active page.
  - Let's begin.
  - '### 1. Update `package.json`'
  - I'll start by adding the necessary dependencies for the new components.
  - '### 2. Create UI Components'
  - >-
    Next, I'll create the reusable `Button` and `Toaster` components in a new
    `src/components/ui` directory.
  - '### 3. Create the Toaster Demo Page'
  - I'll create the demo component and add a consistent page header.
  - '### 4. Integrate into the App Shell'
  - >-
    Finally, let's wire up the new page in the state store, sidebar, and main
    content area.
  - >-
    These changes fully integrate the toaster component and its interactive demo
    into your application shell. You can now access it via the new "Toaster"
    link in the sidebar.
operations:
  - type: write
    path: package.json
    content: |+
      --- package.json
      +++ package.json
      @@ -14,7 +14,10 @@
           "lucide-react": "^0.294.0",
           "clsx": "^2.0.0",
           "tailwind-merge": "^2.0.0",
      -    "class-variance-authority": "^0.7.0"
      +    "class-variance-authority": "^0.7.0",
      +    "@radix-ui/react-slot": "^1.0.2",
      +    "framer-motion": "^10.16.16",
      +    "sonner": "^1.2.4"
         },
         "devDependencies": {
           "@types/node": "^20.10.0",

    patchStrategy: standard-diff
  - type: write
    path: src/components/ui/button.tsx
    content: |-
      import * as React from "react"
      import { Slot } from "@radix-ui/react-slot"
      import { cva, type VariantProps } from "class-variance-authority"

      import { cn } from "@/lib/utils"

      const buttonVariants = cva(
        "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50",
        {
          variants: {
            variant: {
              default: "bg-primary text-primary-foreground hover:bg-primary/90",
              destructive:
                "bg-destructive text-destructive-foreground hover:bg-destructive/90",
              outline:
                "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
              secondary:
                "bg-secondary text-secondary-foreground hover:bg-secondary/80",
              ghost: "hover:bg-accent hover:text-accent-foreground",
              link: "text-primary underline-offset-4 hover:underline",
            },
            size: {
              default: "h-10 px-4 py-2",
              sm: "h-9 rounded-md px-3",
              lg: "h-11 rounded-md px-8",
              icon: "h-10 w-10",
            },
          },
          defaultVariants: {
            variant: "default",
            size: "default",
          },
        }
      )

      export interface ButtonProps
        extends React.ButtonHTMLAttributes<HTMLButtonElement>,
          VariantProps<typeof buttonVariants> {
        asChild?: boolean
      }

      const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
        ({ className, variant, size, asChild = false, ...props }, ref) => {
          const Comp = asChild ? Slot : "button"
          return (
            <Comp
              className={cn(buttonVariants({ variant, size, className }))}
              ref={ref}
              {...props}
            />
          )
        }
      )
      Button.displayName = "Button"

      export { Button, buttonVariants }
    patchStrategy: replace
  - type: write
    path: src/components/ui/toast.tsx
    content: >-
      import { forwardRef, useImperativeHandle, useRef } from 'react';

      import { motion } from 'framer-motion';

      import {
        Toaster as SonnerToaster,
        toast as sonnerToast,
      } from 'sonner';

      import {
        CheckCircle,
        AlertCircle,
        Info,
        AlertTriangle,
        X,
      } from 'lucide-react';


      import { Button } from '@/components/ui/button';

      import { cn } from '@/lib/utils';


      type Variant = 'default' | 'success' | 'error' | 'warning';

      type Position =
        | 'top-left'
        | 'top-center'
        | 'top-right'
        | 'bottom-left'
        | 'bottom-center'
        | 'bottom-right';

      interface ActionButton {
        label: string;
        onClick: () => void;
        variant?: 'default' | 'outline' | 'ghost';
      }


      interface ToasterProps {
        title?: string;
        message: string;
        variant?: Variant;
        duration?: number;
        position?: Position;
        actions?: ActionButton;
        onDismiss?: () => void;
        highlightTitle?: boolean;
      }


      export interface ToasterRef {
        show: (props: ToasterProps) => void;
      }


      const variantStyles: Record<Variant, string> = {
        default: 'bg-card border-border text-foreground',
        success: 'bg-card border-green-600/50',
        error: 'bg-card border-destructive/50',
        warning: 'bg-card border-amber-600/50',
      };


      const titleColor: Record<Variant, string> = {
        default: 'text-foreground',
        success: 'text-green-600 dark:text-green-400',
        error: 'text-destructive',
        warning: 'text-amber-600 dark:text-amber-400',
      };


      const iconColor: Record<Variant, string> = {
        default: 'text-muted-foreground',
        success: 'text-green-600 dark:text-green-400',
        error: 'text-destructive',
        warning: 'text-amber-600 dark:text-amber-400',
      };


      const variantIcons: Record<Variant, React.ComponentType<{ className?:
      string }>> = {
        default: Info,
        success: CheckCircle,
        error: AlertCircle,
        warning: AlertTriangle,
      };


      const toastAnimation = {
        initial: { opacity: 0, y: 50, scale: 0.95 },
        animate: { opacity: 1, y: 0, scale: 1 },
        exit: { opacity: 0, y: 50, scale: 0.95 },
      };


      const Toaster = forwardRef<ToasterRef, { defaultPosition?: Position }>(
        ({ defaultPosition = 'bottom-right' }, ref) => {
          const toastReference = useRef<ReturnType<typeof sonnerToast.custom> | null>(null);

          useImperativeHandle(ref, () => ({
            show({
              title,
              message,
              variant = 'default',
              duration = 4000,
              position = defaultPosition,
              actions,
              onDismiss,
              highlightTitle,
            }) {
              const Icon = variantIcons[variant];

              toastReference.current = sonnerToast.custom(
                (toastId) => (
                  <motion.div
                    variants={toastAnimation}
                    initial="initial"
                    animate="animate"
                    exit="exit"
                    transition={{ duration: 0.3, ease: 'easeOut' }}
                    className={cn(
                      'flex items-center justify-between w-full max-w-xs p-3 rounded-xl border shadow-md',
                      variantStyles[variant]
                    )}
                  >
                    <div className="flex items-start gap-2">
                      <Icon className={cn('h-4 w-4 mt-0.5 flex-shrink-0', iconColor[variant])} />
                      <div className="space-y-0.5">
                        {title && (
                          <h3
                            className={cn(
                              'text-xs font-medium leading-none',
                              titleColor[variant],
                              highlightTitle && titleColor['success'] // override for meeting case
                            )}
                          >
                            {title}
                          </h3>
                        )}
                        <p className="text-xs text-muted-foreground">{message}</p>
                      </div>
                    </div>

                    <div className="flex items-center gap-2">
                      {actions?.label && (
                        <Button
                          variant={actions.variant || 'outline'}
                          size="sm"
                          onClick={() => {
                            actions.onClick();
                            sonnerToast.dismiss(toastId);
                          }}
                          className={cn(
                            'cursor-pointer',
                            variant === 'success'
                              ? 'text-green-600 border-green-600 hover:bg-green-600/10 dark:hover:bg-green-400/20'
                              : variant === 'error'
                              ? 'text-destructive border-destructive hover:bg-destructive/10 dark:hover:bg-destructive/20'
                              : variant === 'warning'
                              ? 'text-amber-600 border-amber-600 hover:bg-amber-600/10 dark:hover:bg-amber-400/20'
                              : 'text-foreground border-border hover:bg-muted/10 dark:hover:bg-muted/20'
                          )}
                        >
                          {actions.label}
                        </Button>
                      )}

                      <button
                        onClick={() => {
                          sonnerToast.dismiss(toastId);
                          onDismiss?.();
                        }}
                        className="rounded-full p-1 hover:bg-muted/50 dark:hover:bg-muted/30 transition-colors focus:outline-none focus:ring-2 focus:ring-ring"
                        aria-label="Dismiss notification"
                      >
                        <X className="h-3 w-3 text-muted-foreground" />
                      </button>
                    </div>
                  </motion.div>
                ),
                { duration, position }
              );
            },
          }));

          return (
            <SonnerToaster
              position={defaultPosition}
              toastOptions={{ unstyled: true, className: 'flex justify-end' }}
            />
          );
        }
      );

      Toaster.displayName = "Toaster";


      export default Toaster;
    patchStrategy: replace
  - type: write
    path: src/components/ToasterDemo.tsx
    content: |-
      import { useRef } from 'react';
      import { Button } from '@/components/ui/button';
      import Toaster, { ToasterRef } from '@/components/ui/toast';
      import { cn } from '@/lib/utils';

      type Variant = 'default' | 'success' | 'error' | 'warning';
      type Position =
        | 'top-left'
        | 'top-center'
        | 'top-right'
        | 'bottom-left'
        | 'bottom-center'
        | 'bottom-right';

      const variantColors = {
        default: 'border-border text-foreground hover:bg-muted/10 dark:hover:bg-muted/20',
        success: 'border-green-600 text-green-600 hover:bg-green-600/10 dark:hover:bg-green-400/20',
        error: 'border-destructive text-destructive hover:bg-destructive/10 dark:hover:bg-destructive/20',
        warning: 'border-amber-600 text-amber-600 hover:bg-amber-600/10 dark:hover:bg-amber-400/20',
      }

      export function ToasterDemo() {
        const toasterRef = useRef<ToasterRef>(null);

        const showToast = (variant: Variant, position: Position = 'bottom-right') => {
          toasterRef.current?.show({
            title: `${variant.charAt(0).toUpperCase() + variant.slice(1)} Notification`,
            message: `This is a ${variant} toast notification.`,
            variant,
            position,
            duration: 3000,
            onDismiss: () =>
              console.log(`${variant} toast at ${position} dismissed`),
          });
        };

        const simulateApiCall = async () => {
          toasterRef.current?.show({
            title: 'Scheduling...',
            message: 'Please wait while we schedule your meeting.',
            variant: 'default',
            position: 'bottom-right',
          });

          try {
            await new Promise((resolve) => setTimeout(resolve, 2000));

            toasterRef.current?.show({
              title: 'Meeting Scheduled',
              message: 'Your meeting is scheduled for July 4, 2025, at 3:42 PM IST.',
              variant: 'success',
              position: 'bottom-right',
              highlightTitle: true,
              actions: {
                label: 'Undo',
                onClick: () => console.log('Undoing meeting schedule'),
                variant: 'outline',
              },
            });
          } catch (error) {
            toasterRef.current?.show({
              title: 'Error Scheduling Meeting',
              message: 'Failed to schedule the meeting. Please try again.',
              variant: 'error',
              position: 'bottom-right',
            });
          }
        };

        return (
          <div className="h-full overflow-y-auto p-6 lg:px-12 space-y-8">
            {/* Header */}
            <div className="flex items-center justify-between">
              <div>
                <h1 className="text-3xl font-bold tracking-tight">Toaster</h1>
                <p className="text-muted-foreground">
                  A customizable toast component for notifications.
                </p>
              </div>
            </div>

            <div className="space-y-6">
              <Toaster ref={toasterRef} />

              <div className="space-y-6">
                <section>
                  <h2 className="text-lg font-semibold mb-2">Toast Variants</h2>
                  <div className="flex flex-wrap gap-4">
                    {(['default', 'success', 'error', 'warning'] as Variant[]).map((variantKey) => (
                      <Button
                        key={variantKey}
                        variant="outline"
                        onClick={() => showToast(variantKey as Variant)}
                        className={cn(variantColors[variantKey])}
                      >
                        {variantKey.charAt(0).toUpperCase() + variantKey.slice(1)} Toast
                      </Button>
                    ))}
                  </div>
                </section>

                <section>
                  <h2 className="text-lg font-semibold mb-2">Toast Positions</h2>
                  <div className="flex flex-wrap gap-4">
                    {[
                      'top-left',
                      'top-center',
                      'top-right',
                      'bottom-left',
                      'bottom-center',
                      'bottom-right',
                    ].map((positionKey) => (
                      <Button
                        key={positionKey}
                        variant="outline"
                        onClick={() =>
                          showToast('default', positionKey as Position)
                        }
                        className="border-border text-foreground hover:bg-muted/10 dark:hover:bg-muted/20"
                      >
                        {positionKey
                          .replace('-', ' ')
                          .replace(/\b\w/g, (char) => char.toUpperCase())}
                      </Button>
                    ))}
                  </div>
                </section>

                <section>
                  <h2 className="text-lg font-semibold mb-2">Real‑World Example</h2>
                  <Button
                    variant="outline"
                    onClick={simulateApiCall}
                    className="border-border text-foreground hover:bg-muted/10 dark:hover:bg-muted/20"
                  >
                    Schedule Meeting
                  </Button>
                </section>
              </div>
            </div>
          </div>
        );
      }
    patchStrategy: replace
  - type: write
    path: src/store/appStore.ts
    content: |+
      --- src/store/appStore.ts
      +++ src/store/appStore.ts
      @@ -1,6 +1,6 @@
       import { create } from 'zustand'
       import { persist } from 'zustand/middleware'
       import { SIDEBAR_STATES, BODY_STATES, type SidebarState, type BodyState } from '@/lib/utils'
       
      -export type ActivePage = 'dashboard' | 'settings';
      +export type ActivePage = 'dashboard' | 'settings' | 'toaster';
       
       interface AppState {
         // UI States

    patchStrategy: standard-diff
  - type: write
    path: src/components/EnhancedSidebar.tsx
    content: >+
      --- src/components/EnhancedSidebar.tsx

      +++ src/components/EnhancedSidebar.tsx

      @@ -17,7 +17,8 @@
         Star,
         Trash2,
         ChevronDown,
      -  Layout

      +  Layout,

      +  Component
       } from 'lucide-react'
       import { cn } from '@/lib/utils'
       import { useAppStore } from '@/store/appStore'
      @@ -82,6 +83,16 @@
             { icon: <Star className="w-4 h-4" />, label: "Favorites", href: "/favorites" },
             { icon: <Download className="w-4 h-4" />, label: "Downloads", href: "/downloads" },
           ]
      +  },

      +  {

      +    title: "Components",

      +    collapsible: true,

      +    defaultExpanded: true,

      +    items: [

      +      { icon: <Component className="w-4 h-4" />, label: "Toaster", href:
      "/toaster" }

      +    ]
         }
       ]
       
      @@ -141,11 +152,13 @@
           const renderNavItem = (item: NavItem, depth = 0) => {
             const pageName = item.label.toLowerCase();
             const isDashboard = pageName === 'dashboard';
             const isSettings = pageName === 'settings';
      +      const isToaster = pageName === 'toaster';
       
             const isDashboardActive = activePage === 'dashboard';
             const isSettingsActive = activePage === 'settings' || (bodyState === BODY_STATES.SIDE_PANE && sidePaneContent === 'settings');
      -      const isPageActive = (isDashboard && isDashboardActive) ||
      (isSettings && isSettingsActive);

      +      const isToasterActive = activePage === 'toaster';

      +      const isPageActive = (isDashboard && isDashboardActive) ||
      (isSettings && isSettingsActive) || (isToaster && isToasterActive);
       
             const handleClick = () => {
               if (isDashboard) {
      @@ -161,6 +174,8 @@
                   // In all other cases (on dashboard page, or settings already in pane), just toggle the settings side pane.
                   openSidePane('settings');
                 }
      +        } else if (isToaster) {

      +          setActivePage('toaster');
               }
               // Could add logic for other links here if routing was implemented
             };

    patchStrategy: standard-diff
  - type: write
    path: src/components/MainContent.tsx
    content: >+
      --- src/components/MainContent.tsx

      +++ src/components/MainContent.tsx

      @@ -9,6 +9,7 @@
       import { BODY_STATES, type BodyState } from '@/lib/utils'
       import { DashboardContent } from './DashboardContent'
       import { SettingsPage } from './SettingsPage'
      +import { ToasterDemo } from './ToasterDemo'
       import { useAppStore } from '@/store/appStore'
       
       interface MainContentProps {
      @@ -58,11 +59,15 @@
               }
               return <SettingsPage />
             }
      +      if (activePage === 'toaster') {

      +        return <ToasterDemo />

      +      }
             return null;
           }
           
      -    const isContentVisible = (activePage === 'dashboard' &&
      !isDashboardInSidePane) || (activePage === 'settings' &&
      !isSettingsInSidePane);

      +    const isContentVisible = (activePage === 'dashboard' &&
      !isDashboardInSidePane) || (activePage === 'settings' &&
      !isSettingsInSidePane) || activePage === 'toaster';
       
           return (
             <div

    patchStrategy: standard-diff
snapshot:
  src/components/ui/button.tsx: null
  src/components/ui/toast.tsx: null
  src/components/ToasterDemo.tsx: null
  package.json: |-
    {
      "name": "amazing-app-shell",
      "private": true,
      "version": "0.0.0",
      "type": "module",
      "scripts": {
        "dev": "vite",
        "build": "tsc && vite build",
        "lint": "eslint . --ext ts,tsx --report-unused-disable-directives --max-warnings 0",
        "preview": "vite preview"
      },
      "dependencies": {
        "react": "^18.2.0",
        "react-dom": "^18.2.0",
        "gsap": "^3.12.2",
        "zustand": "^4.4.7",
        "lucide-react": "^0.294.0",
        "clsx": "^2.0.0",
        "tailwind-merge": "^2.0.0",
        "class-variance-authority": "^0.7.0"
      },
      "devDependencies": {
        "@types/node": "^20.10.0",
        "@types/react": "^18.2.37",
        "@types/react-dom": "^18.2.15",
        "@typescript-eslint/eslint-plugin": "^6.10.0",
        "@typescript-eslint/parser": "^6.10.0",
        "@vitejs/plugin-react": "^4.1.1",
        "autoprefixer": "^10.4.16",
        "eslint": "^8.53.0",
        "eslint-plugin-react-hooks": "^4.6.0",
        "eslint-plugin-react-refresh": "^0.4.4",
        "postcss": "^8.4.31",
        "tailwindcss": "^3.3.5",
        "typescript": "^5.2.2",
        "vite": "^4.5.0",
        "tailwindcss-animate": "^1.0.7"
      }
    }
  src/store/appStore.ts: >-
    import { create } from 'zustand'

    import { persist } from 'zustand/middleware'

    import { SIDEBAR_STATES, BODY_STATES, type SidebarState, type BodyState }
    from '@/lib/utils'


    export type ActivePage = 'dashboard' | 'settings';


    interface AppState {
      // UI States
      sidebarState: SidebarState
      bodyState: BodyState
      isDarkMode: boolean
      sidePaneContent: 'details' | 'settings' | 'main'
      activePage: ActivePage
      sidebarWidth: number
      rightPaneWidth: number
      isResizing: boolean
      isResizingRightPane: boolean
      isTopBarVisible: boolean
      searchTerm: string
      
      // User Preferences
      autoExpandSidebar: boolean
      reducedMotion: boolean
      compactMode: boolean
      primaryColor: string
      
      // Actions
      setSidebarState: (state: SidebarState) => void
      setBodyState: (state: BodyState) => void
      toggleDarkMode: () => void
      setActivePage: (page: ActivePage) => void
      setSidebarWidth: (width: number) => void
      setRightPaneWidth: (width: number) => void
      setIsResizing: (resizing: boolean) => void
      setIsResizingRightPane: (resizing: boolean) => void
      setTopBarVisible: (visible: boolean) => void
      setAutoExpandSidebar: (auto: boolean) => void
      setReducedMotion: (reduced: boolean) => void
      setCompactMode: (compact: boolean) => void
      setPrimaryColor: (color: string) => void
      setSearchTerm: (term: string) => void
      
      // Composite Actions
      toggleSidebar: () => void
      hideSidebar: () => void
      showSidebar: () => void
      peekSidebar: () => void
      toggleFullscreen: () => void
      openSidePane: (content: 'details' | 'settings' | 'main') => void
      closeSidePane: () => void
      resetToDefaults: () => void
    }


    const defaultState = {
      sidebarState: SIDEBAR_STATES.EXPANDED as SidebarState,
      bodyState: BODY_STATES.NORMAL as BodyState,
      sidePaneContent: 'details' as const,
      activePage: 'dashboard' as ActivePage,
      isDarkMode: false,
      sidebarWidth: 280,
      rightPaneWidth: typeof window !== 'undefined' ? Math.max(300, Math.round(window.innerWidth * 0.6)) : 400,
      isResizing: false,
      isResizingRightPane: false,
      isTopBarVisible: true,
      autoExpandSidebar: true,
      reducedMotion: false,
      compactMode: false,
      primaryColor: '220 84% 60%',
      searchTerm: '',
    }


    export const useAppStore = create<AppState>()(
      persist(
        (set, get) => ({
          ...defaultState,
          
          // Basic setters
          sidePaneContent: 'details',
          setSidebarState: (state) => set({ sidebarState: state }),
          setBodyState: (state) => set({ bodyState: state }),
          setActivePage: (page) => set({ activePage: page }),
          toggleDarkMode: () => {
            const newMode = !get().isDarkMode
            set({ isDarkMode: newMode })
            document.documentElement.classList.toggle('dark', newMode)
          },
          setSidebarWidth: (width) => set({ sidebarWidth: Math.max(200, Math.min(500, width)) }),
          setRightPaneWidth: (width) => set({ rightPaneWidth: Math.max(300, Math.min(window.innerWidth * 0.8, width)) }),
          setIsResizing: (resizing) => set({ isResizing: resizing }),
          setIsResizingRightPane: (resizing) => set({ isResizingRightPane: resizing }),
          setTopBarVisible: (visible) => set({ isTopBarVisible: visible }),
          setAutoExpandSidebar: (auto) => set({ autoExpandSidebar: auto }),
          setReducedMotion: (reduced) => set({ reducedMotion: reduced }),
          setCompactMode: (compact) => set({ compactMode: compact }),
          setPrimaryColor: (color) => set({ primaryColor: color }),
          setSearchTerm: (term) => set({ searchTerm: term }),
          
          // Composite actions
          toggleSidebar: () => {
            const current = get().sidebarState
            if (current === SIDEBAR_STATES.HIDDEN) {
              set({ sidebarState: SIDEBAR_STATES.COLLAPSED })
            } else if (current === SIDEBAR_STATES.COLLAPSED) {
              set({ sidebarState: SIDEBAR_STATES.EXPANDED })
            } else if (current === SIDEBAR_STATES.EXPANDED) {
              set({ sidebarState: SIDEBAR_STATES.COLLAPSED })
            }
          },
          
          hideSidebar: () => set({ sidebarState: SIDEBAR_STATES.HIDDEN }),
          showSidebar: () => set({ sidebarState: SIDEBAR_STATES.EXPANDED }),
          peekSidebar: () => set({ sidebarState: SIDEBAR_STATES.PEEK }),
          
          toggleFullscreen: () => {
            const current = get().bodyState
            set({ 
              bodyState: current === BODY_STATES.FULLSCREEN ? BODY_STATES.NORMAL : BODY_STATES.FULLSCREEN 
            })
          },
          
          openSidePane: (content) => {
            const { bodyState, sidePaneContent } = get()
            if (bodyState === BODY_STATES.SIDE_PANE && sidePaneContent === content) {
              // If it's open with same content, close it.
              set({ bodyState: BODY_STATES.NORMAL });
            } else {
              // If closed, or different content, open with new content.
              set({ bodyState: BODY_STATES.SIDE_PANE, sidePaneContent: content });
            }
          },
          closeSidePane: () => {
            set({ bodyState: BODY_STATES.NORMAL })
          },
          
          resetToDefaults: () => {
            set(defaultState)
            // Also reset dark mode class on html element
            if (defaultState.isDarkMode) {
              document.documentElement.classList.add('dark')
            } else {
              document.documentElement.classList.remove('dark')
            }
          },
        }),
        {
          name: 'app-preferences',
          partialize: (state) => ({
            sidebarState: state.sidebarState,
            bodyState: state.bodyState,
            activePage: state.activePage,
            sidePaneContent: state.sidePaneContent,
            isDarkMode: state.isDarkMode,
            sidebarWidth: state.sidebarWidth,
            rightPaneWidth: state.rightPaneWidth,
            autoExpandSidebar: state.autoExpandSidebar,
            reducedMotion: state.reducedMotion,
            compactMode: state.compactMode,
            primaryColor: state.primaryColor,
            // searchTerm is not persisted
          }),
        }
      )
    )


    // Initialize dark mode on load

    if (typeof window !== 'undefined') {
      const stored = localStorage.getItem('app-preferences')
      if (stored) {
        const parsed = JSON.parse(stored)
        if (parsed.state?.isDarkMode) {
          document.documentElement.classList.add('dark')
        }
      }
    }
  src/components/EnhancedSidebar.tsx: |-
    import React, { forwardRef, useRef, useEffect } from 'react'
    import { gsap } from 'gsap'
    import { 
      Home, 
      Search, 
      Bell, 
      User, 
      Settings, 
      HelpCircle, 
      FileText, 
      Calendar, 
      Mail,
      FolderOpen,
      Bookmark,
      Download,
      Star,
      Trash2,
      ChevronDown,
      Layout
    } from 'lucide-react'
    import { cn } from '@/lib/utils'
    import { useAppStore } from '@/store/appStore'
    import { SIDEBAR_STATES, BODY_STATES } from '@/lib/utils'

    interface NavItem {
      icon: React.ReactNode
      label: string
      href: string
      badge?: number
      isActive?: boolean
      children?: NavItem[]
    }

    interface NavSection {
      title: string
      items: NavItem[]
      collapsible?: boolean
      defaultExpanded?: boolean
    }

    const navigationSections: NavSection[] = [
      {
        title: "Main",
        items: [
          { icon: <Home className="w-4 h-4" />, label: "Dashboard", href: "/" },
          { icon: <Search className="w-4 h-4" />, label: "Search", href: "/search" },
          { icon: <Bell className="w-4 h-4" />, label: "Notifications", href: "/notifications", badge: 3 },
        ]
      },
      {
        title: "Workspace",
        collapsible: true,
        defaultExpanded: true,
        items: [
          { 
            icon: <FileText className="w-4 h-4" />, 
            label: "Documents", 
            href: "/documents",
            children: [
              { icon: <FileText className="w-3 h-3" />, label: "Recent", href: "/documents/recent" },
              { icon: <Star className="w-3 h-3" />, label: "Starred", href: "/documents/starred" },
              { icon: <Trash2 className="w-3 h-3" />, label: "Trash", href: "/documents/trash" },
            ]
          },
          { icon: <FolderOpen className="w-4 h-4" />, label: "Projects", href: "/projects" },
          { icon: <Calendar className="w-4 h-4" />, label: "Calendar", href: "/calendar" },
          { icon: <Mail className="w-4 h-4" />, label: "Messages", href: "/messages", badge: 12 },
        ]
      },
      {
        title: "Personal",
        collapsible: true,
        defaultExpanded: false,
        items: [
          { icon: <Bookmark className="w-4 h-4" />, label: "Bookmarks", href: "/bookmarks" },
          { icon: <Star className="w-4 h-4" />, label: "Favorites", href: "/favorites" },
          { icon: <Download className="w-4 h-4" />, label: "Downloads", href: "/downloads" },
        ]
      }
    ]

    const bottomNavItems: NavItem[] = [
      { icon: <User className="w-4 h-4" />, label: "Profile", href: "/profile" },
      { icon: <Settings className="w-4 h-4" />, label: "Settings", href: "/settings" },
      { icon: <HelpCircle className="w-4 h-4" />, label: "Help", href: "/help" },
    ]

    interface SidebarProps {
      onMouseEnter?: () => void
      onMouseLeave?: () => void
    }

    export const EnhancedSidebar = forwardRef<HTMLDivElement, SidebarProps>(
      ({ onMouseEnter, onMouseLeave }, ref) => {
        const { sidebarState, sidebarWidth, reducedMotion, compactMode, activePage, setActivePage, openSidePane, bodyState, sidePaneContent } = useAppStore()
        const contentRef = useRef<HTMLDivElement>(null)
        const sectionsRef = useRef<(HTMLDivElement | null)[]>([])
        const [expandedSections, setExpandedSections] = React.useState<Set<string>>(
          new Set(navigationSections.filter(s => s.defaultExpanded).map(s => s.title))
        )

        const isCollapsed = sidebarState === SIDEBAR_STATES.COLLAPSED
        const isHidden = sidebarState === SIDEBAR_STATES.HIDDEN
        const isPeek = sidebarState === SIDEBAR_STATES.PEEK
        const animationDuration = reducedMotion ? 0.1 : 0.3

        // Toggle section expansion
        const toggleSection = (sectionTitle: string) => {
          setExpandedSections(prev => {
            const newSet = new Set(prev)
            if (newSet.has(sectionTitle)) {
              newSet.delete(sectionTitle)
            } else {
              newSet.add(sectionTitle)
            }
            return newSet
          })
        }

        // Animate content visibility
        useEffect(() => {
          if (!contentRef.current) return

          const labels = contentRef.current.querySelectorAll('.nav-label')
          const badges = contentRef.current.querySelectorAll('.nav-badge')
          const sectionTitles = contentRef.current.querySelectorAll('.section-title')
          const chevrons = contentRef.current.querySelectorAll('.section-chevron')

          if (isCollapsed) {
            gsap.to([labels, badges, sectionTitles, chevrons], {
              opacity: 0,
              scale: 0.8,
              duration: animationDuration,
              ease: "power2.out"
            })
          } else {
            gsap.to([labels, badges, sectionTitles, chevrons], {
              opacity: 1,
              scale: 1,
              duration: animationDuration,
              delay: 0.1,
              ease: "power2.out"
            })
          }
        }, [isCollapsed, animationDuration])

        // Hover animations for nav items
        const handleItemHover = (element: HTMLElement, isHovering: boolean) => {
          if (!element) return

          gsap.to(element, {
            scale: isHovering ? 1.02 : 1,
            x: isHovering ? 4 : 0,
            duration: animationDuration,
            ease: "power2.out"
          })
        }

        if (isHidden) {
          return null
        }

        const renderNavItem = (item: NavItem, depth = 0) => {
          const pageName = item.label.toLowerCase();
          const isDashboard = pageName === 'dashboard';
          const isSettings = pageName === 'settings';

          const isDashboardActive = activePage === 'dashboard';
          const isSettingsActive = activePage === 'settings' || (bodyState === BODY_STATES.SIDE_PANE && sidePaneContent === 'settings');
          const isPageActive = (isDashboard && isDashboardActive) || (isSettings && isSettingsActive);

          const handleClick = () => {
            if (isDashboard) {
              setActivePage('dashboard');
            } else if (isSettings) {
              const isSettingsInSidePane = bodyState === BODY_STATES.SIDE_PANE && sidePaneContent === 'settings'
              // If we're on the settings page and it's not in the side pane, treat this as a "minimize" action.
              if (activePage === 'settings' && !isSettingsInSidePane) {
                openSidePane('settings');
                setActivePage('dashboard');
              } else {
                // In all other cases (on dashboard page, or settings already in pane), just toggle the settings side pane.
                openSidePane('settings');
              }
            }
            // Could add logic for other links here if routing was implemented
          };

          return (
            <div key={item.label} className={cn("space-y-1", depth > 0 && "ml-6")}>
            <button
              className={cn(
                "group relative flex items-center gap-3 rounded-lg cursor-pointer transition-all duration-200 w-full text-left",
                compactMode ? "px-2 py-1.5" : "px-4 py-2.5",
                "hover:bg-accent",
                (item.isActive || isPageActive) && "bg-primary text-primary-foreground hover:bg-primary/90",
                depth > 0 && "text-sm",
                isCollapsed && "justify-center"
              )}
              onMouseEnter={(e) => handleItemHover(e.currentTarget, true)}
              onMouseLeave={(e) => handleItemHover(e.currentTarget, false)}
              onClick={handleClick}
            >
              <div className="flex-shrink-0">
                {item.icon}
              </div>
              
              {!isCollapsed && (
                <>
                  <span className="nav-label flex-1 font-medium truncate">
                    {item.label}
                  </span>
                  
                  {item.badge && (
                    <span className="nav-badge bg-destructive text-destructive-foreground text-xs px-1.5 py-0.5 rounded-full min-w-[1.25rem] text-center">
                      {item.badge > 99 ? '99+' : item.badge}
                    </span>
                  )}

                  {item.children && (
                    <ChevronDown className="w-3 h-3 transition-transform" />
                  )}
                </>
              )}

              {/* Tooltip for collapsed state */}
              {isCollapsed && (
                <div className="absolute left-full ml-2 px-2 py-1 bg-popover text-popover-foreground text-sm rounded-md shadow-lg opacity-0 group-hover:opacity-100 transition-opacity pointer-events-none whitespace-nowrap z-50">
                  {item.label}
                  {item.badge && (
                    <span className="ml-2 bg-destructive text-destructive-foreground text-xs px-1.5 py-0.5 rounded-full">
                      {item.badge > 99 ? '99+' : item.badge}
                    </span>
                  )}
                </div>
              )}
            </button>

            {/* Children items */}
            {item.children && !isCollapsed && (
              <div className="space-y-1">
                {item.children.map(child => renderNavItem(child, depth + 1))}
              </div>
            )}
          </div>
          )
        }

        return (
          <div
            ref={ref}
            className={cn(
              "relative bg-card flex-shrink-0",
              "h-full overflow-hidden",
              isPeek && "shadow-xl z-40",
              compactMode && "text-sm"
            )}
            style={{ width: sidebarWidth }}
            onMouseEnter={onMouseEnter}
            onMouseLeave={onMouseLeave}
          >
            {/* Background blur effect for peek mode */}
            {isPeek && (
              <div className="absolute inset-0 bg-background/80 backdrop-blur-sm" />
            )}

            <div 
              ref={contentRef}
              className={cn(
                "relative z-10 h-full flex flex-col",
                compactMode ? "p-3" : "p-4"
              )}
            >
              {/* Logo */}
              <div
                className={cn(
                  "flex items-center gap-3",
                  isCollapsed ? "justify-center" : "",
                  compactMode ? "h-10" : "h-16"
                )}
              >
                <div className="w-10 h-10 bg-gradient-to-br from-primary to-primary/60 rounded-full flex items-center justify-center flex-shrink-0">
                  <Layout className="w-5 h-5 text-primary-foreground" />
                </div>
                {!isCollapsed && (
                  <span className="font-semibold text-xl text-foreground nav-label truncate">
                    AppShell
                  </span>
                )}
              </div>

              {/* Navigation Sections */}
              <div className="flex-1 overflow-y-auto overflow-x-hidden space-y-6 pt-4">
                {navigationSections.map((section, sectionIndex) => {
                  const isExpanded = expandedSections.has(section.title)
                  
                  return (
                    <div 
                      key={section.title}
                      ref={el => sectionsRef.current[sectionIndex] = el}
                      className="space-y-1"
                    >
                      {!isCollapsed && (
                        <div 
                          className={cn(
                            "flex items-center justify-between px-3 text-xs font-medium text-muted-foreground uppercase tracking-wider",
                            section.collapsible && "cursor-pointer hover:text-foreground transition-colors"
                          )}
                          onClick={() => section.collapsible && toggleSection(section.title)}
                        >
                          <span className="section-title">{section.title}</span>
                          {section.collapsible && (
                            <ChevronDown 
                              className={cn(
                                "section-chevron w-3 h-3 transition-transform",
                                isExpanded ? "rotate-0" : "-rotate-90"
                              )} 
                            />
                          )}
                        </div>
                      )}
                      
                      {(!section.collapsible || isExpanded || isCollapsed) && (
                        <nav className="space-y-1">
                          {section.items.map(item => renderNavItem(item))}
                        </nav>
                      )}
                    </div>
                  )
                })}
              </div>

              {/* Bottom Navigation */}
              <div className={cn("pt-4 border-t border-border", compactMode && "pt-3")}>
                <nav className="space-y-1">
                  {bottomNavItems.map((item) => renderNavItem(item))}
                </nav>

                {/* User Profile */}
                {!isCollapsed && (
                  <div className={cn("mt-6 p-3 bg-accent/50 rounded-xl", compactMode && "mt-4 p-2")}>
                    <div className="flex items-center gap-3">
                      <div className={cn("bg-primary rounded-full flex items-center justify-center", compactMode ? "w-8 h-8" : "w-10 h-10")}>
                        <User className={cn("text-primary-foreground", compactMode ? "w-4 h-4" : "w-5 h-5")} />
                      </div>
                      <div className="flex-1 min-w-0">
                        <p className={cn("font-medium truncate nav-label", compactMode ? "text-xs" : "text-sm")}>John Doe</p>
                        <p className={cn("text-muted-foreground truncate nav-label", compactMode ? "text-[11px]" : "text-xs")}>john@example.com</p>
                      </div>
                    </div>
                  </div>
                )}
              </div>
            </div>
          </div>
        )
      }
    )

    EnhancedSidebar.displayName = "EnhancedSidebar"
  src/components/MainContent.tsx: |-
    import { forwardRef } from 'react'
    import { 
      X,
      LayoutDashboard,
      ChevronsLeftRight,
      Settings,
    } from 'lucide-react'
    import { cn } from '@/lib/utils'
    import { BODY_STATES, type BodyState } from '@/lib/utils'
    import { DashboardContent } from './DashboardContent'
    import { SettingsPage } from './SettingsPage'
    import { useAppStore } from '@/store/appStore'

    interface MainContentProps {
      bodyState: BodyState
      onToggleFullscreen: () => void
    }

    export const MainContent = forwardRef<HTMLDivElement, MainContentProps>(
      ({ bodyState, onToggleFullscreen }, ref) => {
        const { sidePaneContent, openSidePane, activePage, setActivePage } = useAppStore()

        const isDashboardInSidePane = sidePaneContent === 'main' && bodyState === BODY_STATES.SIDE_PANE
        const isSettingsInSidePane = sidePaneContent === 'settings' && bodyState === BODY_STATES.SIDE_PANE

        const renderContent = () => {
          if (activePage === 'dashboard') {
            if (isDashboardInSidePane) {
              return (
                <div className="flex-1 flex flex-col items-center justify-center text-center">
                  <LayoutDashboard className="w-16 h-16 text-muted-foreground/50 mb-4" />
                  <h2 className="text-2xl font-bold">Dashboard is in Side Pane</h2>
                  <p className="text-muted-foreground mt-2 max-w-md">
                    You've moved the dashboard to the side pane. You can bring it back or continue to navigate.
                  </p>
                  <button
                    onClick={() => openSidePane('main')} // This will close it
                    className="mt-6 bg-primary text-primary-foreground px-4 py-2 rounded-full hover:bg-primary/90 transition-colors flex items-center gap-2 h-10"
                  >
                    <ChevronsLeftRight className="w-5 h-5" />
                    <span>Bring Dashboard Back</span>
                  </button>
                </div>
              )
            }
            return <DashboardContent />
          }

          if (activePage === 'settings') {
            if (isSettingsInSidePane) {
              return (
                <div className="flex-1 flex flex-col items-center justify-center text-center">
                  <Settings className="w-16 h-16 text-muted-foreground/50 mb-4" />
                  <h2 className="text-2xl font-bold">Settings are in Side Pane</h2>
                  <p className="text-muted-foreground mt-2 max-w-md">
                    You've moved settings to the side pane. You can bring them back to the main view.
                  </p>
                  <button
                    onClick={() => {
                      openSidePane('settings'); // This will close it
                      setActivePage('settings');
                    }}
                    className="mt-6 bg-primary text-primary-foreground px-4 py-2 rounded-full hover:bg-primary/90 transition-colors flex items-center gap-2 h-10"
                  >
                    <ChevronsLeftRight className="w-5 h-5" />
                    <span>Bring Settings Back</span>
                  </button>
                </div>
              )
            }
            return <SettingsPage />
          }
          return null;
        }
        
        const isContentVisible = (activePage === 'dashboard' && !isDashboardInSidePane) || (activePage === 'settings' && !isSettingsInSidePane);

        return (
          <div
            ref={ref}
            className={cn(
            "flex flex-col h-full overflow-hidden",
            bodyState === BODY_STATES.FULLSCREEN && "absolute inset-0 z-40 bg-background"
            )}
          >
            {bodyState === BODY_STATES.FULLSCREEN && isContentVisible && (
              <button
                onClick={onToggleFullscreen}
                className="fixed top-6 right-6 lg:right-12 z-[100] h-12 w-12 flex items-center justify-center rounded-full bg-card/50 backdrop-blur-sm hover:bg-card/75 transition-colors group"
                title="Exit Fullscreen"
              >
                <X className="w-6 h-6 group-hover:scale-110 group-hover:rotate-90 transition-all duration-300" />
              </button>
            )}

            <div className="flex-1 min-h-0">
              {renderContent()}
            </div>
          </div>
        )
      }
    )
approved: true
linesAdded: null
linesRemoved: null
linesDifference: null
gitCommittedAt: null
status: committed
id: 54
