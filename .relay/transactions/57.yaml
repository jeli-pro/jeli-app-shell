uuid: d51e1642-835b-43d5-a87f-998fc0e6f03f
projectId: amazing-app-shell
createdAt: '2025-10-10T14:11:12.563Z'
gitCommitMsg: >-
  fix(toast): Ensure toasts appear above all other UI elements

  The toast notifications were being obscured by other components (like the
  RightPane) due to a z-index issue. The `sonner` library was configured with
  `unstyled: true`, which removes its default high z-index.

  This commit fixes the issue by applying a high z-index (`z-[9999]`) directly
  to the `SonnerToaster` component, ensuring it always renders on top of other
  content.
promptSummary: >-
  The user is experiencing an issue where toast notifications are being
  displayed underneath other UI elements.
reasoning:
  - >-
    The toast notifications are being rendered underneath other UI elements,
    such as the `RightPane`, because of a stacking context (z-index) issue.
  - 'Here''s my reasoning for the fix:'
  - >-
    1.  The user reported that toasts are being displayed underneath other UI
    elements. This points to a `z-index` problem.
  - >-
    2.  Upon inspection, components like `RightPane` have a `z-index` as high as
    60 (`z-[60]`).
  - >-
    3.  The `sonner` toast library is configured with `unstyled: true`. This
    option removes all default styling, including the high `z-index` that
    normally ensures toasts appear on top of all other content.
  - >-
    4.  Without a specified `z-index`, the toast container renders below other
    elements that have a positive `z-index`.
  - >-
    5.  The solution is to add a `className` with a very high `z-index` to the
    `<SonnerToaster />` component. A value of `z-[9999]` will ensure it is
    rendered above all other application elements.
  - I'll apply this change to `src/components/ui/toast.tsx`.
operations:
  - type: write
    path: src/components/ui/toast.tsx
    content: |
      <<<<<<< SEARCH
          return (
            <SonnerToaster
              position={defaultPosition}
              toastOptions={{ unstyled: true }}
            />
          );
      =======
          return (
            <SonnerToaster
              position={defaultPosition}
              toastOptions={{ unstyled: true }}
              className="z-[9999]"
            />
          );
      >>>>>>> REPLACE
    patchStrategy: search-replace
snapshot:
  src/components/ui/toast.tsx: >-
    import {
      forwardRef,
      useImperativeHandle,
      useRef,
      useEffect,
      createContext,
      useContext,
      useCallback,
      type ReactNode,
    } from 'react';

    import { gsap } from 'gsap';

    import { Toaster as SonnerToaster, toast as sonnerToast } from 'sonner';

    import {
      CheckCircle,
      AlertCircle,
      Info,
      AlertTriangle,
      X,
    } from 'lucide-react';


    import { Button } from '@/components/ui/button';

    import { cn } from '@/lib/utils';


    type Variant = 'default' | 'success' | 'error' | 'warning';

    type Position =
      | 'top-left'
      | 'top-center'
      | 'top-right'
      | 'bottom-left'
      | 'bottom-center'
      | 'bottom-right';

    interface ActionButton {
      label: string;
      onClick: () => void;
      variant?: 'default' | 'outline' | 'ghost';
    }


    export interface ToasterProps {
      title?: string;
      message: string;
      variant?: Variant;
      duration?: number;
      position?: Position;
      actions?: ActionButton;
      onDismiss?: () => void;
      highlightTitle?: boolean;
    }


    export interface ToasterRef {
      show: (props: ToasterProps) => void;
    }


    const variantStyles: Record<Variant, string> = {
      default: 'border-border',
      success: 'border-green-600/50',
      error: 'border-destructive/50',
      warning: 'border-amber-600/50',
    };


    const titleColor: Record<Variant, string> = {
      default: 'text-foreground',
      success: 'text-green-600 dark:text-green-400',
      error: 'text-destructive',
      warning: 'text-amber-600 dark:text-amber-400',
    };


    const iconColor: Record<Variant, string> = {
      default: 'text-muted-foreground',
      success: 'text-green-600 dark:text-green-400',
      error: 'text-destructive',
      warning: 'text-amber-600 dark:text-amber-400',
    };


    const variantIcons: Record<
      Variant,
      React.ComponentType<{ className?: string }>
    > = {
      default: Info,
      success: CheckCircle,
      error: AlertCircle,
      warning: AlertTriangle,
    };


    const CustomToast = ({
      toastId,
      title,
      message,
      variant = 'default',
      duration = 4000,
      actions,
      onDismiss,
      highlightTitle,
    }: ToasterProps & { toastId: number | string }) => {
      const toastRef = useRef<HTMLDivElement>(null);
      const Icon = variantIcons[variant];

      const handleDismiss = () => {
        if (toastRef.current) {
          gsap.to(toastRef.current, {
            opacity: 0,
            y: 50,
            scale: 0.95,
            duration: 0.3,
            ease: 'easeOut',
            onComplete: () => {
              sonnerToast.dismiss(toastId);
              onDismiss?.();
            },
          });
        } else {
          sonnerToast.dismiss(toastId);
          onDismiss?.();
        }
      };

      useEffect(() => {
        if (toastRef.current) {
          gsap.from(toastRef.current, {
            opacity: 0,
            y: 50,
            scale: 0.95,
            duration: 0.3,
            ease: 'easeOut',
          });
        }

        if (duration !== Infinity) {
          const timer = setTimeout(handleDismiss, duration);
          return () => clearTimeout(timer);
        }
      }, [duration]);

      return (
        <div
          ref={toastRef}
          className={cn(
            'flex items-center justify-between w-full max-w-sm p-4 rounded-lg border shadow-lg bg-card text-foreground',
            variantStyles[variant]
          )}
        >
          <div className="flex items-start gap-3">
            <Icon
              className={cn('h-5 w-5 mt-0.5 flex-shrink-0', iconColor[variant])}
            />
            <div className="space-y-1">
              {title && (
                <h3
                  className={cn(
                    'text-sm font-semibold leading-none',
                    titleColor[variant],
                    highlightTitle && titleColor['success']
                  )}
                >
                  {title}
                </h3>
              )}
              <p className="text-sm text-muted-foreground">{message}</p>
            </div>
          </div>

          <div className="flex items-center gap-2">
            {actions?.label && (
              <Button
                variant={actions.variant || 'outline'}
                size="sm"
                onClick={() => {
                  actions.onClick();
                  handleDismiss();
                }}
                className={cn(
                  'h-8 px-3 text-xs cursor-pointer',
                  variant === 'success'
                    ? 'text-green-600 border-green-600 hover:bg-green-600/10 dark:hover:bg-green-400/20'
                    : variant === 'error'
                    ? 'text-destructive border-destructive hover:bg-destructive/10 dark:hover:bg-destructive/20'
                    : variant === 'warning'
                    ? 'text-amber-600 border-amber-600 hover:bg-amber-600/10 dark:hover:bg-amber-400/20'
                    : 'text-foreground border-border hover:bg-muted/10 dark:hover:bg-muted/20'
                )}
              >
                {actions.label}
              </Button>
            )}
            <button
              onClick={handleDismiss}
              className="rounded-md p-1 hover:bg-muted/50 dark:hover:bg-muted/30 transition-colors focus:outline-none focus:ring-2 focus:ring-ring"
              aria-label="Dismiss notification"
            >
              <X className="h-4 w-4 text-muted-foreground" />
            </button>
          </div>
        </div>
      );
    };


    const Toaster = forwardRef<ToasterRef, { defaultPosition?: Position }>(
      ({ defaultPosition = 'bottom-right' }, ref) => {
        useImperativeHandle(ref, () => ({
          show({
            title,
            message,
            variant = 'default',
            duration = 4000,
            position = defaultPosition,
            actions,
            onDismiss,
            highlightTitle,
          }) {
            sonnerToast.custom(
              (toastId) => (
                <CustomToast
                  toastId={toastId}
                  title={title}
                  message={message}
                  variant={variant}
                  duration={duration}
                  actions={actions}
                  onDismiss={onDismiss}
                  highlightTitle={highlightTitle}
                />
              ),
              {
                duration: Infinity, // Component handles its own lifecycle for animations
                position,
              }
            );
          },
        }));

        return (
          <SonnerToaster
            position={defaultPosition}
            toastOptions={{ unstyled: true }}
          />
        );
      }
    );

    Toaster.displayName = 'Toaster';


    const ToasterContext = createContext<((props: ToasterProps) => void) |
    null>(
      null
    );


    export const useToast = () => {
      const context = useContext(ToasterContext);
      if (!context) {
        throw new Error('useToast must be used within a ToasterProvider');
      }
      return { show: context };
    };


    export const ToasterProvider = ({ children }: { children: ReactNode }) => {
      const toasterRef = useRef<ToasterRef>(null);

      const showToast = useCallback((props: ToasterProps) => {
        toasterRef.current?.show(props);
      }, []);
      
      return (
        <ToasterContext.Provider value={showToast}>
          {children}
          <Toaster ref={toasterRef} />
        </ToasterContext.Provider>
      );
    };
approved: true
linesAdded: null
linesRemoved: null
linesDifference: null
gitCommittedAt: null
status: committed
id: 57
