uuid: c257c72f-51b8-4d51-8e56-11b34e2ab903
projectId: jeli-app-shell
createdAt: '2025-10-13T01:07:25.895Z'
gitCommitMsg: >-
  refactor(DataDemo): enhance UI/UX with minimalist and cohesive design

  This commit refactors the Data Demo page to improve its user interface and
  experience, focusing on a more cohesive and minimalist aesthetic.

  Key changes include: - Standardized all toolbar controls to a consistent
  height (`size="sm"`) for better visual alignment. This involved adding size
  variants to the Input component. - Replaced the prominent, animated
  `DataViewModeSelector` with a simpler, icon-only segmented control, reducing
  visual clutter. - Reorganized the page layout to a more logical flow (Header
  -> Stats -> Toolbar -> Content) to improve user navigation and comprehension.
promptSummary: >-
  The user requested a more cohesive and minimalist UI for the data demo page. I
  implemented this by standardizing control sizes, simplifying the view mode
  selector, and reorganizing the page layout for a better user experience.
reasoning:
  - >-
    I've analyzed your request to make the UI/UX more cohesive and minimalist.
    Here is a plan to refine the interface by improving component consistency,
    simplifying complex elements, and optimizing the overall page layout.
  - '### Reasoning for Changes'
  - >-
    1.  **Uniform Control Size**: To create a more visually consistent toolbar,
    all interactive elements (search input, filter buttons, sort button) will be
    standardized to the same height. This requires adding size variants to the
    `Input` component to match the `Button` component's `sm` size.
  - >-
    2.  **Minimalist View Selector**: The `DataViewModeSelector` is currently
    quite prominent. I will replace it with a more subtle, icon-only segmented
    control. This removes the complex animation and reduces its visual weight,
    contributing to a cleaner, more minimalist aesthetic.
  - >-
    3.  **Logical Page Flow**: I will re-organize the `DataDemoPage` layout to
    follow a more conventional and intuitive dashboard structure: Header ->
    Stats -> Toolbar -> Content. This places the high-level summary (stats)
    first, followed by the controls (toolbar) that directly manipulate the
    content below them, improving the user experience.
  - >-
    4.  **Component Refinements**: Minor adjustments will be made across the
    `DataToolbar` to use the new standardized component sizes, ensuring a
    polished and cohesive final appearance.
  - Here are the code modifications to implement these improvements.
  - >-
    I'll start by updating the `Input` component to support different sizes,
    which is crucial for achieving a consistent toolbar height.
  - >-
    Next, I'll update the `DataToolbar` to use the new `sm` size for all its
    controls, ensuring they are all vertically aligned and have a more compact
    feel.
  - >-
    Here is the simplified `DataViewModeSelector`, which is now a much cleaner,
    icon-based component.
  - >-
    Finally, I'll rearrange the main page component to improve the layout and
    flow of information.
  - >-
    These changes work together to create a more refined, cohesive, and
    minimalist user interface for the data demonstration page, directly
    addressing your request.
operations:
  - type: write
    path: src/components/ui/input.tsx
    content: >+
      --- src/components/ui/input.tsx

      +++ src/components/ui/input.tsx

      @@ -1,19 +1,36 @@
       import * as React from "react"
      +import { cva, type VariantProps } from "class-variance-authority"
       
       import { cn } from "@/lib/utils"
       
      +const inputVariants = cva(

      +  "flex w-full rounded-md border border-input bg-background px-3 text-sm
      ring-offset-background file:border-0 file:bg-transparent file:text-sm
      file:font-medium placeholder:text-muted-foreground
      focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring
      focus-visible:ring-offset-2 disabled:cursor-not-allowed
      disabled:opacity-50",

      +  {

      +    variants: {

      +      size: {

      +        default: "h-10 py-2",

      +        sm: "h-9 py-1",

      +        lg: "h-11 py-2",

      +      },

      +    },

      +    defaultVariants: {

      +      size: "default",

      +    },

      +  }

      +)

      +
       export interface InputProps
      -  extends React.InputHTMLAttributes<HTMLInputElement> {}

      +  extends React.InputHTMLAttributes<HTMLInputElement>,

      +    VariantProps<typeof inputVariants> {}
       
       const Input = React.forwardRef<HTMLInputElement, InputProps>(
      -  ({ className, type, ...props }, ref) => {

      +  ({ className, type, size, ...props }, ref) => {
           return (
             <input
               type={type}
      -        className={cn(

      -          "flex h-10 w-full rounded-md border border-input bg-background
      px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent
      file:text-sm file:font-medium placeholder:text-muted-foreground
      focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring
      focus-visible:ring-offset-2 disabled:cursor-not-allowed
      disabled:opacity-50",

      -          className

      -        )}

      +        className={cn(inputVariants({ size, className }))}
               ref={ref}
               {...props}
             />

    patchStrategy: standard-diff
  - type: write
    path: src/pages/DataDemo/components/DataToolbar.tsx
    content: >+
      --- src/pages/DataDemo/components/DataToolbar.tsx

      +++ b/src/pages/DataDemo/components/DataToolbar.tsx

      @@ -95,7 +95,8 @@
                 <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground" />
                 <Input
                   placeholder="Search projects..."
      -            className="pl-9 w-full sm:w-64"

      +            size="sm"

      +            className="pl-9 w-full sm:w-64"
                   value={filters.searchTerm}
                   onChange={handleSearchChange}
                 />
      @@ -118,8 +119,9 @@
               {activeFilterCount > 0 && (
                 <Button
                   variant="ghost"
      +            size="sm"
                   onClick={() => onFiltersChange({ searchTerm: filters.searchTerm, status: [], priority: [] })}
      -            className="h-9 px-2 lg:px-3"

      +            className="px-2 lg:px-3"
                 >
                   Reset
                   <X className="ml-2 h-4 w-4" />
      @@ -131,7 +133,7 @@
             <div className="flex items-center gap-2 w-full md:w-auto justify-end">
               <DropdownMenu>
                 <DropdownMenuTrigger asChild>
      -            <Button variant="outline" className="w-full sm:w-auto
      justify-start">

      +            <Button variant="outline" size="sm" className="w-full
      sm:w-auto justify-start">
                     <SortAsc className="mr-2 h-4 w-4" />
                     Sort by: {sortOptions.find(o => o.value === sortConfig?.key)?.label || 'Default'}
                   </Button>
      @@ -181,7 +183,7 @@
         return (
           <Popover>
             <PopoverTrigger asChild>
      -        <Button variant="outline" size="sm" className="h-9 w-full
      sm:w-auto justify-start border-dashed">

      +        <Button variant="outline" size="sm" className="w-full sm:w-auto
      justify-start border-dashed">
                 <ListFilter className="mr-2 h-4 w-4" />
                 {title}
                 {selected.length > 0 && (

    patchStrategy: standard-diff
  - type: write
    path: src/pages/DataDemo/components/DataViewModeSelector.tsx
    content: >-
      import { cn } from '@/lib/utils'

      import { Button } from '@/components/ui/button'

      import { List, Grid3X3, LayoutGrid, Table } from 'lucide-react'

      import type { ViewMode } from '../types'


      interface DataViewModeSelectorProps {
        viewMode: ViewMode
        onChange: (mode: ViewMode) => void
      }


      const viewModes = [
        { id: 'list' as ViewMode, label: 'List', icon: List },
        { id: 'cards' as ViewMode, label: 'Cards', icon: LayoutGrid },
        { id: 'grid' as ViewMode, label: 'Grid', icon: Grid3X3 },
        { id: 'table' as ViewMode, label: 'Table', icon: Table }
      ]


      export function DataViewModeSelector({ viewMode, onChange }:
      DataViewModeSelectorProps) {
        return (
          <div className="flex items-center gap-1 bg-muted p-1 rounded-xl">
            {viewModes.map((mode) => {
              const IconComponent = mode.icon
              const isActive = viewMode === mode.id
              
              return (
                <Button
                  key={mode.id}
                  variant={isActive ? "secondary" : "ghost"}
                  size="icon"
                  onClick={() => onChange(mode.id)}
                  className={cn(
                    "h-7 w-7 rounded-lg",
                    isActive && "shadow-sm"
                  )}
                  title={mode.label}
                >
                  <IconComponent className="w-4 h-4" />
                </Button>
              )
            })}
          </div>
        )
      }
    patchStrategy: replace
  - type: write
    path: src/pages/DataDemo/index.tsx
    content: >+
      --- src/pages/DataDemo/index.tsx

      +++ b/src/pages/DataDemo/index.tsx

      @@ -262,13 +262,6 @@
                   </p>
                 </div>
               </div>
      -        <div className="flex flex-col md:flex-row md:items-center
      md:justify-between gap-4">

      -          <DataToolbar 

      -            viewMode={viewMode} onViewModeChange={setViewMode}

      -            filters={filters} onFiltersChange={handleFilterChange}

      -            sortConfig={sortConfig} onSortChange={handleSortChange} />

      -        </div>
       
               {/* Stats Section */}
               {!isInitialLoading && (
      @@ -292,10 +285,16 @@
                 </div>
               )}
       
      -        <div ref={contentRef} className="min-h-[500px]">

      -          {isInitialLoading ? <AnimatedLoadingSkeleton
      viewMode={viewMode} /> : renderView()}

      +        <div className="space-y-6">

      +          <DataToolbar

      +            viewMode={viewMode}

      +            onViewModeChange={setViewMode}

      +            filters={filters}

      +            onFiltersChange={handleFilterChange}

      +            sortConfig={sortConfig}

      +            onSortChange={handleSortChange}

      +          />

      +          <div ref={contentRef} className="min-h-[500px]">

      +            {isInitialLoading ? <AnimatedLoadingSkeleton
      viewMode={viewMode} /> : renderView()}

      +          </div>
               </div>
       
               {/* Loader for infinite scroll */}
               <div ref={loaderRef} className="flex justify-center items-center py-6">

    patchStrategy: standard-diff
snapshot:
  src/pages/DataDemo/components/DataToolbar.tsx: >-
    import * as React from 'react'

    import { Check, ListFilter, Search, SortAsc, X } from 'lucide-react'


    import { cn } from '@/lib/utils'

    import { Button } from '@/components/ui/button'

    import { Input } from '@/components/ui/input'

    import { Badge } from '@/components/ui/badge'

    import { Popover, PopoverContent, PopoverTrigger } from
    '@/components/ui/popover'

    import {
      DropdownMenu,
      DropdownMenuContent,
      DropdownMenuRadioGroup,
      DropdownMenuRadioItem,
      DropdownMenuSeparator,
      DropdownMenuLabel,
      DropdownMenuTrigger,
    } from '@/components/ui/dropdown-menu'

    import {
      Command,
      CommandEmpty,
      CommandGroup,
      CommandInput,
      CommandItem,
      CommandList,
      CommandSeparator,
    } from '@/components/ui/command'


    import { DataViewModeSelector } from './DataViewModeSelector'

    import type { ViewMode, SortConfig, SortableField, Status, Priority } from
    '../types'


    export interface FilterConfig {
      searchTerm: string
      status: Status[]
      priority: Priority[]
    }


    interface DataToolbarProps {
      viewMode: ViewMode
      onViewModeChange: (mode: ViewMode) => void
      filters: FilterConfig
      onFiltersChange: (filters: FilterConfig) => void
      sortConfig: SortConfig | null
      onSortChange: (config: SortConfig | null) => void
    }


    const statusOptions: { value: Status; label: string }[] = [
      { value: 'active', label: 'Active' },
      { value: 'pending', label: 'Pending' },
      { value: 'completed', label: 'Completed' },
      { value: 'archived', label: 'Archived' },
    ]


    const priorityOptions: { value: Priority; label: string }[] = [
      { value: 'critical', label: 'Critical' },
      { value: 'high', label: 'High' },
      { value: 'medium', label: 'Medium' },
      { value: 'low', label: 'Low' },
    ]


    const sortOptions: { value: SortableField, label: string }[] = [
      { value: 'updatedAt', label: 'Last Updated' },
      { value: 'title', label: 'Title' },
      { value: 'status', label: 'Status' },
      { value: 'priority', label: 'Priority' },
      { value: 'metrics.completion', label: 'Progress' },
    ]



    export function DataToolbar({
      viewMode,
      onViewModeChange,
      filters,
      onFiltersChange,
      sortConfig,
      onSortChange,
    }: DataToolbarProps) {
      const handleSearchChange = (event: React.ChangeEvent<HTMLInputElement>) => {
        onFiltersChange({ ...filters, searchTerm: event.target.value })
      }
      
      const activeFilterCount =
        (filters.status.length > 0 ? 1 : 0) +
        (filters.priority.length > 0 ? 1 : 0)

      return (
        <div className="flex flex-col md:flex-row items-center justify-between gap-4">
          {/* Left side: Search and Filters */}
          <div className="flex flex-col sm:flex-row items-center gap-2 w-full md:w-auto">
            <div className="relative w-full sm:w-auto">
              <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground" />
              <Input
                placeholder="Search projects..."
                className="pl-9 w-full sm:w-64"
                value={filters.searchTerm}
                onChange={handleSearchChange}
              />
            </div>

            {/* Status Filter */}
            <MultiSelectFilter
              title="Status"
              options={statusOptions}
              selected={filters.status}
              onChange={(selected) => onFiltersChange({ ...filters, status: selected as Status[] })}
            />

            {/* Priority Filter */}
            <MultiSelectFilter
              title="Priority"
              options={priorityOptions}
              selected={filters.priority}
              onChange={(selected) => onFiltersChange({ ...filters, priority: selected as Priority[] })}
            />

            {activeFilterCount > 0 && (
              <Button
                variant="ghost"
                onClick={() => onFiltersChange({ searchTerm: filters.searchTerm, status: [], priority: [] })}
                className="h-9 px-2 lg:px-3"
              >
                Reset
                <X className="ml-2 h-4 w-4" />
              </Button>
            )}
          </div>

          {/* Right side: Sorter and View Mode */}
          <div className="flex items-center gap-2 w-full md:w-auto justify-end">
            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <Button variant="outline" className="w-full sm:w-auto justify-start">
                  <SortAsc className="mr-2 h-4 w-4" />
                  Sort by: {sortOptions.find(o => o.value === sortConfig?.key)?.label || 'Default'}
                </Button>
              </DropdownMenuTrigger>
              <DropdownMenuContent align="end" className="w-[200px]">
                <DropdownMenuLabel>Sort by</DropdownMenuLabel>
                <DropdownMenuRadioGroup
                  value={`${sortConfig?.key || 'default'}-${sortConfig?.direction || ''}`}
                  onValueChange={(value) => {
                    if (value.startsWith('default')) {
                      onSortChange(null)
                    } else {
                      const [key, direction] = value.split('-')
                      onSortChange({ key: key as SortableField, direction: direction as 'asc' | 'desc' })
                    }
                  }}
                >
                  <DropdownMenuRadioItem value="default-">Default</DropdownMenuRadioItem>
                  <DropdownMenuSeparator />
                  {sortOptions.map(option => (
                    <React.Fragment key={option.value}>
                      <DropdownMenuRadioItem value={`${option.value}-desc`}>{option.label} (Desc)</DropdownMenuRadioItem>
                      <DropdownMenuRadioItem value={`${option.value}-asc`}>{option.label} (Asc)</DropdownMenuRadioItem>
                    </React.Fragment>
                  ))}
                </DropdownMenuRadioGroup>
              </DropdownMenuContent>
            </DropdownMenu>

            <DataViewModeSelector viewMode={viewMode} onChange={onViewModeChange} />
          </div>
        </div>
      )
    }


    function MultiSelectFilter({
      title,
      options,
      selected,
      onChange,
    }: {
      title: string
      options: { value: string; label: string }[]
      selected: string[]
      onChange: (selected: string[]) => void
    }) {
      const selectedSet = new Set(selected)

      return (
        <Popover>
          <PopoverTrigger asChild>
            <Button variant="outline" size="sm" className="h-9 w-full sm:w-auto justify-start border-dashed">
              <ListFilter className="mr-2 h-4 w-4" />
              {title}
              {selected.length > 0 && (
                <>
                  <div className="mx-2 h-4 w-px bg-muted-foreground/50" />
                  <Badge variant="secondary" className="rounded-sm px-1 font-normal">
                    {selected.length}
                  </Badge>
                </>
              )}
            </Button>
          </PopoverTrigger>
          <PopoverContent className="w-[220px] p-0" align="start">
            <Command>
              <CommandInput placeholder={`Filter ${title.toLowerCase()}...`} />
              <CommandList>
                <CommandEmpty>No results found.</CommandEmpty>
                <CommandGroup>
                  {options.map((option) => {
                    const isSelected = selectedSet.has(option.value)
                    return (
                      <CommandItem
                        key={option.value}
                        onSelect={() => {
                          if (isSelected) {
                            selectedSet.delete(option.value)
                          } else {
                            selectedSet.add(option.value)
                          }
                          onChange(Array.from(selectedSet))
                        }}
                      >
                        <div
                          className={cn(
                            'mr-2 flex h-4 w-4 items-center justify-center rounded-sm border border-primary',
                            isSelected ? 'bg-primary text-primary-foreground' : 'opacity-50 [&_svg]:invisible'
                          )}
                        >
                          <Check className={cn('h-4 w-4')} />
                        </div>
                        <span>{option.label}</span>
                      </CommandItem>
                    )
                  })}
                </CommandGroup>
                {selected.length > 0 && (
                  <>
                    <CommandSeparator />
                    <CommandGroup>
                      <CommandItem
                        onSelect={() => onChange([])}
                        className="justify-center text-center"
                      >
                        Clear filters
                      </CommandItem>
                    </CommandGroup>
                  </>
                )}
              </CommandList>
            </Command>
          </PopoverContent>
        </Popover>
      )
    }
  src/components/ui/input.tsx: |-
    import * as React from "react"

    import { cn } from "@/lib/utils"

    export interface InputProps
      extends React.InputHTMLAttributes<HTMLInputElement> {}

    const Input = React.forwardRef<HTMLInputElement, InputProps>(
      ({ className, type, ...props }, ref) => {
        return (
          <input
            type={type}
            className={cn(
              "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
              className
            )}
            ref={ref}
            {...props}
          />
        )
      }
    )
    Input.displayName = "Input"

    export { Input }
  src/pages/DataDemo/components/DataViewModeSelector.tsx: >-
    import { useEffect, useRef } from 'react'

    import { gsap } from 'gsap'

    import { cn } from '@/lib/utils'

    import { List, Grid3X3, LayoutGrid, Table } from 'lucide-react'

    import type { ViewMode } from '../types'


    interface DataViewModeSelectorProps {
      viewMode: ViewMode
      onChange: (mode: ViewMode) => void
    }


    const viewModes = [
      { id: 'list' as ViewMode, label: 'List', icon: List, description: 'Compact list with details' },
      { id: 'cards' as ViewMode, label: 'Cards', icon: LayoutGrid, description: 'Rich card layout' },
      { id: 'grid' as ViewMode, label: 'Grid', icon: Grid3X3, description: 'Masonry grid view' },
      { id: 'table' as ViewMode, label: 'Table', icon: Table, description: 'Structured data table' }
    ]


    export function DataViewModeSelector({ viewMode, onChange }:
    DataViewModeSelectorProps) {
      const indicatorRef = useRef<HTMLDivElement>(null)
      const containerRef = useRef<HTMLDivElement>(null)

      useEffect(() => {
        if (!indicatorRef.current || !containerRef.current) return

        const activeButton = containerRef.current.querySelector(`[data-mode="${viewMode}"]`) as HTMLElement
        if (!activeButton) return

        const containerRect = containerRef.current.getBoundingClientRect()
        const buttonRect = activeButton.getBoundingClientRect()
        
        const left = buttonRect.left - containerRect.left
        const width = buttonRect.width

        gsap.to(indicatorRef.current, {
          duration: 0.3,
          x: left,
          width: width,
          ease: "power2.out"
        })
      }, [viewMode])

      return (
        <div 
          ref={containerRef}
          className="relative flex items-center bg-card/50 backdrop-blur-sm border border-border/50 rounded-2xl p-1.5 shadow-lg"
        >
          {/* Animated indicator */}
          <div
            ref={indicatorRef}
            className="absolute inset-y-1.5 bg-gradient-to-r from-primary/20 to-primary/10 border border-primary/20 rounded-xl transition-all duration-300"
            style={{ left: 0, width: 0 }}
          />
          
          {/* Mode buttons */}
          {viewModes.map((mode) => {
            const IconComponent = mode.icon
            const isActive = viewMode === mode.id
            
            return (
              <button
                key={mode.id}
                data-mode={mode.id}
                onClick={() => onChange(mode.id)}
                className={cn(
                  "relative flex items-center gap-3 px-6 py-3 rounded-xl transition-all duration-300 group min-w-[120px]",
                  "hover:bg-accent/20 active:scale-95",
                  isActive && "text-primary"
                )}
                title={mode.description}
              >
                <IconComponent className={cn(
                  "w-5 h-5 transition-all duration-300",
                  isActive && "scale-110",
                  "group-hover:scale-105"
                )} />
                <span className={cn(
                  "font-medium transition-all duration-300",
                  isActive ? "text-primary" : "text-muted-foreground",
                  "group-hover:text-foreground"
                )}>
                  {mode.label}
                </span>
              </button>
            )
          })}
        </div>
      )
    }
  src/pages/DataDemo/index.tsx: >-
    import { useState, useRef, useEffect, useCallback, useMemo } from 'react'

    import { 
      Layers, 
      AlertTriangle, 
      PlayCircle, 
      TrendingUp,
      Loader2
    } from 'lucide-react'

    import { gsap } from 'gsap'

    import { PageLayout } from '@/components/shared/PageLayout'

    import { DataListView } from './components/DataListView'

    import { DataCardView } from './components/DataCardView'

    import { DataTableView } from './components/DataTableView'

    import { DataDetailPanel } from './components/DataDetailPanel'

    import { AnimatedLoadingSkeleton } from
    './components/AnimatedLoadingSkeleton'

    import { StatChartCard } from './components/StatChartCard'

    import { DataToolbar, FilterConfig } from './components/DataToolbar'

    import { useAppShell } from '@/context/AppShellContext'

    import { mockDataItems } from './data/mockData'

    import type { DataItem, ViewMode, SortConfig, SortableField } from './types'


    type Stat = {
      title: string;
      value: string;
      icon: React.ReactNode;
      change: string;
      trend: 'up' | 'down';
      type?: 'card';
    };


    type ChartStat = {
      title: string;
      value: string;
      icon: React.ReactNode;
      change: string;
      trend: 'up' | 'down';
      type: 'chart';
      chartData: number[];
    };


    type StatItem = Stat | ChartStat;


    export default function DataDemoPage() {
      const [viewMode, setViewMode] = useState<ViewMode>('list')
      const [filters, setFilters] = useState<FilterConfig>({
        searchTerm: '',
        status: [],
        priority: [],
      })
      const [sortConfig, setSortConfig] = useState<SortConfig | null>({ key: 'updatedAt', direction: 'desc' })
      const [selectedItem, setSelectedItem] = useState<DataItem | null>(null)  
      const [items, setItems] = useState<DataItem[]>([])
      const [page, setPage] = useState(0) // Start at 0 to trigger initial load effect
      const [hasMore, setHasMore] = useState(true)
      const [isLoading, setIsLoading] = useState(true)
      const contentRef = useRef<HTMLDivElement>(null)
      const statsRef = useRef<HTMLDivElement>(null)
      const observer = useRef<IntersectionObserver>()
      const { openSidePane } = useAppShell()

      const isInitialLoading = isLoading && items.length === 0

      // Centralized data processing
      const processedData = useMemo(() => {
        let filteredItems = mockDataItems.filter(item => {
          const searchTermMatch =
            item.title.toLowerCase().includes(filters.searchTerm.toLowerCase()) ||
            item.description.toLowerCase().includes(filters.searchTerm.toLowerCase())

          const statusMatch = filters.status.length === 0 || filters.status.includes(item.status)
          const priorityMatch = filters.priority.length === 0 || filters.priority.includes(item.priority)

          return searchTermMatch && statusMatch && priorityMatch
        })

        if (sortConfig) {
          filteredItems.sort((a, b) => {
            let aValue: any
            let bValue: any

            const getNestedValue = (obj: any, path: string) => path.split('.').reduce((o, k) => (o || {})[k], obj)

            aValue = getNestedValue(a, sortConfig.key)
            bValue = getNestedValue(b, sortConfig.key)

            if (aValue === undefined || bValue === undefined) return 0;

            if (typeof aValue === 'string' && typeof bValue === 'string') {
              return sortConfig.direction === 'asc'
                ? aValue.localeCompare(bValue)
                : bValue.localeCompare(aValue)
            }
            if (typeof aValue === 'number' && typeof bValue === 'number') {
              return sortConfig.direction === 'asc' ? aValue - bValue : bValue - aValue
            }
            // Date sorting (assuming ISO strings)
            if (sortConfig.key === 'updatedAt' || sortConfig.key === 'createdAt') {
                return sortConfig.direction === 'asc'
                    ? new Date(aValue).getTime() - new Date(aValue).getTime()
                    : new Date(bValue).getTime() - new Date(bValue).getTime()
            }
            return 0
          })
        }
        return filteredItems
      }, [filters, sortConfig])

      // Calculate stats from data
      const totalItems = mockDataItems.length
      const activeItems = mockDataItems.filter(item => item.status === 'active').length
      const highPriorityItems = mockDataItems.filter(item => item.priority === 'high' || item.priority === 'critical').length
      const avgCompletion = totalItems > 0 ? Math.round(
        mockDataItems.reduce((acc, item) => acc + item.metrics.completion, 0) / totalItems
      ) : 0

      // Reset pagination when filters or sort change
      useEffect(() => {
        setItems([])
        setPage(0) // This will be incremented to 1 in the loader `useEffect`, triggering a fresh load
        setHasMore(true)
        // This timeout helps prevent a flicker between old and new filtered data
        setTimeout(() => setPage(1), 50)
      }, [processedData])

      // Infinite scroll logic
      useEffect(() => { // eslint-disable-line react-hooks/exhaustive-deps
        if (page === 0) return;

        const fetchItems = () => {
          setIsLoading(true);
          const isFirstPage = page === 1
          
          const pageSize = 12;
          const newItems = processedData.slice((page - 1) * pageSize, page * pageSize);
          
          // Simulate network delay, longer for initial load to showcase skeleton
          setTimeout(() => {
            setItems(prev => (isFirstPage ? newItems : [...prev, ...newItems]))
            setHasMore(processedData.length > page * pageSize)
            setIsLoading(false)
          }, isFirstPage && items.length === 0 ? 1500 : 500)
        };

        if (hasMore) fetchItems();
      }, [page]);

      const loaderRef = useCallback(node => {
        if (isLoading) return;
        if (observer.current) observer.current.disconnect();
        
        observer.current = new IntersectionObserver(entries => {
          if (entries[0].isIntersecting && hasMore) {
            setPage(prevPage => prevPage + 1);
          }
        });
        if (node) observer.current.observe(node);
      }, [isLoading, hasMore]);

      const stats: StatItem[] = [
        {
          title: "Total Projects",
          value: totalItems.toString(),
          icon: <Layers className="w-5 h-5" />,
          change: "+5.2% this month",
          trend: "up" as const,
          type: 'chart',
          chartData: [120, 125, 122, 130, 135, 138, 142]
        },
        {
          title: "Active Projects",
          value: activeItems.toString(),
          icon: <PlayCircle className="w-5 h-5" />,
          change: "+2 this week", 
          trend: "up" as const,
          type: 'chart',
          chartData: [45, 50, 48, 55, 53, 60, 58]
        },
        {
          title: "High Priority",
          value: highPriorityItems.toString(),
          icon: <AlertTriangle className="w-5 h-5" />,
          change: "-1 from last week",
          trend: "down" as const,
          type: 'chart',
          chartData: [25, 26, 28, 27, 26, 24, 23]
        },
        {
          title: "Avg. Completion",
          value: `${avgCompletion}%`,
          icon: <TrendingUp className="w-5 h-5" />,
          change: "+3.2%",
          trend: "up" as const,
          type: 'chart',
          chartData: [65, 68, 70, 69, 72, 75, 78]
        }
      ]

      useEffect(() => {
        // Animate stats cards in
        if (!isInitialLoading && statsRef.current) {
          gsap.fromTo(statsRef.current.children,
            { y: 30, opacity: 0 },
            {
              duration: 0.6,
              y: 0,
              opacity: 1,
              stagger: 0.1,
              ease: "power2.out"
            }
          )
        }
      }, [isInitialLoading])

      const handleSortChange = (config: SortConfig | null) => {
        setSortConfig(config)
      }

      // For table view header clicks
      const handleTableSort = (field: SortableField) => {
        if (sortConfig?.key === field) {
          if (sortConfig.direction === 'desc') {
            // Cycle: desc -> asc
            setSortConfig({ key: field, direction: 'asc' })
          } else {
            // Cycle: asc -> default
            setSortConfig(null)
          }
        } else {
          // New field, default to desc
          setSortConfig({ key: field, direction: 'desc' })
        }
      }

      const handleFilterChange = (newFilters: FilterConfig) => {
        setFilters(newFilters)
      }
      
      // Handle item selection and open side panel
      const handleItemSelect = (item: DataItem) => {
        setSelectedItem(item)
        openSidePane('data-details')
      }

      const renderView = () => {
        const commonProps = {
          data: items,
          onItemSelect: handleItemSelect,
          selectedItem,
          sortConfig,
          onSort: handleTableSort,
        }

        switch (viewMode) {
          case 'list':
            return <DataListView {...commonProps} />
          case 'cards':
            return <DataCardView {...commonProps} />
          case 'grid':
            return <DataCardView {...commonProps} isGrid />
          case 'table':
            return <DataTableView {...commonProps} />
          default:
            return <DataListView {...commonProps} />
        }
      }

      return (
        <PageLayout
          // Note: Search functionality is handled by a separate SearchBar in the TopBar
        >
          <div className="space-y-8">
            {/* Header */}
            <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-4">
              <div>
                <h1 className="text-2xl font-bold tracking-tight">Data Showcase</h1>
                <p className="text-muted-foreground">
                  {isInitialLoading 
                    ? "Loading projects..." 
                    : `Showing ${processedData.length} item(s)`}
                </p>
              </div>
            </div>
            <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-4">
              <DataToolbar 
                viewMode={viewMode} onViewModeChange={setViewMode}
                filters={filters} onFiltersChange={handleFilterChange}
                sortConfig={sortConfig} onSortChange={handleSortChange} />
            </div>

            {/* Stats Section */}
            {!isInitialLoading && (
              <div ref={statsRef} className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
                {stats.map((stat) => {
                  if (stat.type === 'chart') {
                    return (
                      <StatChartCard
                        key={stat.title}
                        title={stat.title}
                        value={stat.value}
                        change={stat.change}
                        trend={stat.trend}
                        icon={stat.icon}
                        chartData={stat.chartData}
                      />
                    )
                  }
                })}
              </div>
            )}

            <div ref={contentRef} className="min-h-[500px]">
              {isInitialLoading ? <AnimatedLoadingSkeleton viewMode={viewMode} /> : renderView()}
            </div>

            {/* Loader for infinite scroll */}
            <div ref={loaderRef} className="flex justify-center items-center py-6">
              {isLoading && !isInitialLoading && (
                <div className="flex items-center gap-2 text-muted-foreground">
                  <Loader2 className="w-5 h-5 animate-spin" />
                  <span>Loading more...</span>
                </div>
              )}
              {!isLoading && !hasMore && processedData.length > 0 && !isInitialLoading && (
                <p className="text-muted-foreground">You've reached the end.</p>
              )}
            </div>
          </div>

          {/* Detail Panel */}
          <DataDetailPanel 
            item={selectedItem}
            onClose={() => setSelectedItem(null)}
          />
        </PageLayout>
      )
    }
approved: true
linesAdded: null
linesRemoved: null
linesDifference: null
gitCommittedAt: null
status: committed
id: 175
