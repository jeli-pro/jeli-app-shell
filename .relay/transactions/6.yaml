uuid: c25cfb88-1d21-4f9e-ad5d-d1ef10214c81
projectId: amazing-app-shell
createdAt: '2025-10-10T09:36:29.075Z'
gitCommitMsg: >-
  refactor(ui): Refine UI/UX for a cleaner, minimalist aesthetic

  This commit implements a comprehensive UI/UX overhaul to create a more modern,
  cohesive, and visually appealing application shell.

  Key changes include: - Increased global border-radius for a softer, more
  modern look. - Refined GSAP animations with smoother easing for more
  professional transitions. - Redesigned the sidebar with a minimalist approach,
  muting inactive items and providing subtle, clean hover/active states. -
  Improved spacing in the Top Bar and Sidebar to reduce visual clutter. -
  Standardized card hover effects with a consistent "lift" animation. -
  Simplified component visuals (e.g., icons on cards) for a cleaner aesthetic.
promptSummary: >-
  The user requested to make the UI/UX more clean, minimalist, cohesive, and to
  add more border radius and spacing.
reasoning:
  - >-
    Based on your request to refine the application's UI and UX, I've made a
    series of changes to create a cleaner, more minimalist aesthetic with
    improved spacing and more cohesive interactions. Here are the key
    modifications:
  - >-
    1.  **Global Style Refresh**: I've increased the base border-radius across
    the application for a softer, more modern look. I also added a subtle
    transition for theme changes.
  - >-
    2.  **Smoother Animations**: All major layout animations now use a more
    refined easing function (`expo.out`) for a smoother, more professional feel.
  - >-
    3.  **Enhanced Sidebar UX**: The sidebar navigation has been redesigned to
    be less visually cluttered. Non-active items are now muted, and the active
    item has a subtle highlight. I've also increased spacing and removed
    distracting hover animations in favor of simple, clean CSS transitions. The
    "peek" on hover functionality is now more intuitive, expanding the sidebar
    to its full width.
  - >-
    4.  **Cleaner Component Styling**: I've updated components like stat cards
    and feature cards to be more minimalist, removing colorful backgrounds from
    icons and using more subtle hover effects.
  - >-
    5.  **Improved Spacing**: I've increased spacing in key areas like the Top
    Bar and Sidebar to give elements more room to breathe, contributing to the
    cleaner overall design.
  - >-
    6.  **Cohesive Hover Effects**: Cards throughout the application now have a
    consistent "lift" effect on hover, creating a more unified interactive
    experience.
  - Here are the code changes to implement this new design direction.
  - '### 1. Update Global Styles and Theme Configuration'
  - >-
    I'll start by increasing the border-radius globally and adjusting the
    TailwindCSS config to match. A subtle transition is also added to the `body`
    for smoother dark/light mode switching.
  - '### 2. Refine Animations and Interactions in AppShell'
  - >-
    Here, I'm updating the animation easing for a smoother feel, making the
    "peek" behavior more intuitive, and improving the resize handle's design and
    usability.
  - '### 3. Clean Up the Top Bar'
  - >-
    I'll increase the spacing around the icon separators in the `TopBar` for a
    less cluttered appearance.
  - '### 4. Redesign the Sidebar for a Minimalist Look'
  - >-
    This is a key change. I'm removing the JavaScript-based hover animations,
    redesigning the navigation item styles for a cleaner look, and increasing
    spacing for better readability.
  - '### 5. Refine Main Content Cards'
  - >-
    I'm updating the main content cards to have a more engaging and consistent
    hover effect, and I'm simplifying the stat card's icon treatment to be more
    minimalist.
  - '### 6. Refine Demo Content Cards'
  - >-
    Finally, I'll apply the same cohesive hover effect and minimalist icon
    styling to the feature cards in the demo content.
  - >-
    These changes work together to create a more refined, modern, and cohesive
    user experience, directly addressing your request for a cleaner and more
    minimalist UI.
operations:
  - type: write
    path: src/index.css
    content: >+
      --- src/index.css

      +++ src/index.css

      @@ -17,7 +17,7 @@
           --border: 214.3 31.8% 91.4%;
           --input: 214.3 31.8% 91.4%;
           --ring: 220 84% 60%;
      -    --radius: 0.75rem;

      +    --radius: 1rem;
         }
       
         .dark {
      @@ -50,7 +50,7 @@
           @apply border-border;
         }
         body {
      -    @apply bg-background text-foreground;

      +    @apply bg-background text-foreground transition-colors duration-300
      ease-in-out;
         }
       }
       

    patchStrategy: standard-diff
  - type: write
    path: tailwind.config.js
    content: |+
      --- tailwind.config.js
      +++ tailwind.config.js
      @@ -35,9 +35,9 @@
               },
             },
             borderRadius: {
      -        lg: "var(--radius)", // 0.75rem
      -        md: "calc(var(--radius) - 0.25rem)", // 0.5rem
      -        sm: "calc(var(--radius) - 0.5rem)", // 0.25rem
      +        lg: "var(--radius)",
      +        md: "calc(var(--radius) - 4px)",
      +        sm: "calc(var(--radius) - 8px)",
             },
             animation: {
               "fade-in": "fadeIn 0.5s ease-in-out",

    patchStrategy: standard-diff
  - type: write
    path: src/components/AppShell.tsx
    content: >
      --- src/components/AppShell.tsx

      +++ src/components/AppShell.tsx

      @@ -89,14 +89,14 @@
               targetX = 0
               break
             case SIDEBAR_STATES.PEEK:
      -        targetWidth = sidebarWidth * 0.8

      -        targetOpacity = 0.95

      +        targetWidth = sidebarWidth

      +        targetOpacity = 1
               targetX = 0
               break
           }
       
      -    const tl = gsap.timeline({ ease: "power3.out" })

      +    const tl = gsap.timeline({ ease: "expo.out" })
           
           tl.to(sidebar, {
             width: targetWidth,
      @@ -115,7 +115,7 @@
                 gsap.to(sidebarRef.current, {
                   x: '-100%',
                   duration: animationDuration,
      -            ease: "power3.out"

      +            ease: "expo.out"
                 })
               }
               break
      @@ -126,7 +126,7 @@
                   width: narrowWidth,
                   x: 0,
                   duration: animationDuration,
      -            ease: "power3.out"

      +            ease: "expo.out"
                 })
               }
               break
      @@ -136,7 +136,7 @@
                 gsap.to(sidebarRef.current, {
                   x: 0,
                   duration: animationDuration,
      -            ease: "power3.out"

      +            ease: "expo.out"
                 })
               }
               break
      @@ -172,14 +172,14 @@
                 <div
                   ref={resizeHandleRef}
                   className={cn(
      -              "absolute top-0 w-2 h-full bg-transparent
      hover:bg-primary/20 cursor-col-resize z-50 transition-colors duration-200
      group"

      +              "absolute top-0 w-3 h-full bg-transparent
      hover:bg-primary/10 cursor-col-resize z-50 transition-colors duration-200
      group"
                   )}
                   style={{ 
                     left: sidebarState === SIDEBAR_STATES.COLLAPSED ? 64 : sidebarWidth 
                   }}
                   onMouseDown={() => setIsResizing(true)}
                 >
      -            <div className="w-0.5 h-full bg-transparent
      group-hover:bg-primary transition-colors duration-200 mx-auto" />

      +            <div className="w-1 h-full bg-border/50
      group-hover:bg-primary transition-colors duration-200 mx-auto" />
                 </div>
               )}
       
    patchStrategy: standard-diff
  - type: write
    path: src/components/TopBar.tsx
    content: |
      --- src/components/TopBar.tsx
      +++ src/components/TopBar.tsx
      @@ -82,7 +82,7 @@
                 <Zap className="w-4 h-4 group-hover:scale-110 transition-transform" />
               </button>
       
      -        <div className="w-px h-6 bg-border mx-1" />
      +        <div className="w-px h-6 bg-border mx-2" />
       
               {/* Body State Controls */}
               <button
      @@ -111,7 +111,7 @@
                 )}
               </button>
       
      -        <div className="w-px h-6 bg-border mx-1" />
      +        <div className="w-px h-6 bg-border mx-2" />
       
               {/* Theme and Settings */}
               <button
    patchStrategy: standard-diff
  - type: write
    path: src/components/EnhancedSidebar.tsx
    content: >+
      --- src/components/EnhancedSidebar.tsx

      +++ src/components/EnhancedSidebar.tsx

      @@ -149,20 +149,6 @@
             }
           }, [isCollapsed, animationDuration])
       
      -    // Hover animations for nav items

      -    const handleItemHover = (element: HTMLElement, isHovering: boolean)
      => {

      -      if (!element) return

      -

      -      gsap.to(element, {

      -        scale: isHovering ? 1.02 : 1,

      -        x: isHovering ? 4 : 0,

      -        duration: animationDuration,

      -        ease: "power2.out"

      -      })

      -    }

      -
           if (isHidden) {
             return null
           }
      @@ -172,17 +158,15 @@
             <div key={item.label} className={cn("space-y-1", depth > 0 && "ml-6")}>
               <div
                 className={cn(
      -            "group relative flex items-center gap-3 rounded-md
      cursor-pointer transition-all duration-200",

      +            "group relative flex items-center gap-3 rounded-lg
      cursor-pointer transition-colors duration-200",
                   compactMode ? "px-2 py-1.5" : "px-3 py-2",
      -            "hover:bg-accent",

      -            item.isActive && "bg-primary text-primary-foreground
      hover:bg-primary/90",

      +            item.isActive ? "bg-primary/10 text-primary" :
      "text-muted-foreground hover:bg-accent hover:text-foreground",
                   depth > 0 && "text-sm"
                 )}
      -          onMouseEnter={(e) => handleItemHover(e.currentTarget, true)}

      -          onMouseLeave={(e) => handleItemHover(e.currentTarget, false)}
               >
      -          <div className="flex-shrink-0">

      +          <div className="flex-shrink-0 transition-transform duration-200
      group-hover:scale-110">
                   {item.icon}
                 </div>
                 
      @@ -235,14 +219,14 @@
               >
                 {/* Navigation Sections */}
                 <div className="flex-1 overflow-y-auto overflow-x-hidden px-4 space-y-8 pt-4">
      -            {navigationSections.map((section, sectionIndex) => {

      +            {navigationSections.map((section, sectionIndex) => { 
                     const isExpanded = expandedSections.has(section.title)
                     
                     return (
                       <div 
                         key={section.title}
                         ref={el => sectionsRef.current[sectionIndex] = el}
      -                  className="space-y-1"

      +                  className="space-y-2"
                       >
                         {!isCollapsed && (
                           <div 
      @@ -265,7 +249,7 @@
                         )}
                         
                         {(!section.collapsible || isExpanded || isCollapsed) && (
      -                    <nav className="space-y-1">

      +                    <nav className="space-y-2">
                             {section.items.map(item => renderNavItem(item))}
                           </nav>
                         )}
      @@ -276,12 +260,12 @@
       
                 {/* Bottom Navigation */}
                 <div className={cn("px-4 pt-4 border-t border-border", compactMode && "pt-3")}>
      -            <nav className="space-y-1">

      +            <nav className="space-y-2">
                     {bottomNavItems.map((item) => renderNavItem(item))}
                   </nav>
       
                   {/* User Profile */}
      -            {!isCollapsed && (

      +            {!isCollapsed && !isPeek && (
                     <div className={cn("mt-6 p-3 bg-accent/50 rounded-lg", compactMode && "mt-4 p-2")}>
                       <div className="flex items-center gap-3">
                         <div className={cn("bg-primary rounded-full flex items-center justify-center", compactMode ? "w-6 h-6" : "w-8 h-8")}>

    patchStrategy: standard-diff
  - type: write
    path: src/components/MainContent.tsx
    content: >
      --- src/components/MainContent.tsx

      +++ src/components/MainContent.tsx

      @@ -165,11 +165,11 @@
                     <div
                       key={stat.title}
                       ref={el => cardsRef.current[index] = el}
      -                className="bg-card p-6 rounded-lg border border-border
      hover:border-primary/30 hover:shadow-sm transition-all duration-300 group
      cursor-pointer"

      +                className="bg-card p-6 rounded-lg border border-border
      hover:border-primary/30 hover:shadow-lg hover:-translate-y-1
      transition-all duration-300 group cursor-pointer"
                     >
                       <div className="flex items-center justify-between">
      -                  <div className="p-2 bg-primary/10 rounded-lg
      group-hover:bg-primary/20 transition-colors">

      +                  <div className="p-2 bg-secondary rounded-lg
      group-hover:bg-accent transition-colors">
                           {stat.icon}
                         </div>
                         <div className={cn(
    patchStrategy: standard-diff
  - type: write
    path: src/components/DemoContent.tsx
    content: >+
      --- src/components/DemoContent.tsx

      +++ src/components/DemoContent.tsx

      @@ -107,11 +107,11 @@
                 <div
                   key={feature.title}
                   ref={el => cardsRef.current[index] = el}
      -            className="group relative overflow-hidden rounded-lg bg-card
      border border-border p-6 hover:border-primary/30 hover:shadow-sm
      transition-all duration-300 cursor-pointer"

      +            className="group relative overflow-hidden rounded-lg bg-card
      border border-border p-6 hover:border-primary/30 hover:shadow-sm
      hover:-translate-y-1 transition-all duration-300 cursor-pointer"
                 >
                   <div className="relative z-10">
      -              <div className="w-12 h-12 rounded-md bg-primary/10 flex
      items-center justify-center text-primary mb-4 group-hover:scale-110
      group-hover:bg-primary/20 transition-transform">

      +              <div className="w-12 h-12 rounded-lg bg-secondary flex
      items-center justify-center text-muted-foreground group-hover:text-primary
      group-hover:bg-accent mb-4 group-hover:scale-110 transition-all
      duration-300">
                       {feature.icon}
                     </div>
                     

    patchStrategy: standard-diff
snapshot:
  src/index.css: |-
    @import 'tailwindcss/base';
    @import 'tailwindcss/components';
    @import 'tailwindcss/utilities';

    @layer base {
      :root {
        --background: 0 0% 100%;
        --foreground: 222.2 84% 4.9%;
        --card: 0 0% 100%;
        --card-foreground: 222.2 84% 4.9%;
        --popover: 0 0% 100%;
        --popover-foreground: 222.2 84% 4.9%;
        --primary: 220 84% 60%;
        --primary-foreground: 210 40% 98%;
        --secondary: 210 40% 96%;
        --secondary-foreground: 222.2 84% 4.9%;
        --muted: 210 40% 96%;
        --muted-foreground: 215.4 16.3% 46.9%;
        --accent: 210 40% 96%;
        --accent-foreground: 222.2 84% 4.9%;
        --destructive: 0 84.2% 60.2%;
        --destructive-foreground: 210 40% 98%;
        --border: 214.3 31.8% 91.4%;
        --input: 214.3 31.8% 91.4%;
        --ring: 220 84% 60%;
        --radius: 0.75rem;
      }

      .dark {
        --background: 222.2 84% 4.9%;
        --foreground: 210 40% 98%;
        --card: 222.2 84% 4.9%;
        --card-foreground: 210 40% 98%;
        --popover: 222.2 84% 4.9%;
        --popover-foreground: 210 40% 98%;
        --primary: 220 84% 60%;
        --primary-foreground: 210 40% 98%;
        --secondary: 217.2 32.6% 17.5%;
        --secondary-foreground: 210 40% 98%;
        --muted: 217.2 32.6% 17.5%;
        --muted-foreground: 215 20.2% 65.1%;
        --accent: 217.2 32.6% 17.5%;
        --accent-foreground: 210 40% 98%;
        --destructive: 0 62.8% 30.6%;
        --destructive-foreground: 210 40% 98%;
        --border: 217.2 32.6% 17.5%;
        --input: 217.2 32.6% 17.5%;
        --ring: 220 84% 60%;
      }
    }

    @layer base {
      * {
        @apply border-border;
      }
      body {
        @apply bg-background text-foreground;
      }
    }

    /* Custom scrollbar styles */
    ::-webkit-scrollbar {
      width: 6px;
      height: 6px;
    }

    ::-webkit-scrollbar-track {
      @apply bg-transparent;
    }

    ::-webkit-scrollbar-thumb {
      @apply bg-border rounded-full;
    }

    ::-webkit-scrollbar-thumb:hover {
      @apply bg-muted-foreground/50;
    }
  tailwind.config.js: |-
    /** @type {import('tailwindcss').Config} */
    export default {
      content: [
        "./index.html",
        "./src/**/*.{js,ts,jsx,tsx}",
      ],
      darkMode: "class",
      theme: {
        extend: {
          colors: {
            border: "hsl(var(--border))",
            input: "hsl(var(--input))",
            ring: "hsl(var(--ring))",
            background: "hsl(var(--background))",
            foreground: "hsl(var(--foreground))",
            primary: {
              DEFAULT: "hsl(var(--primary))",
              foreground: "hsl(var(--primary-foreground))",
            },
            secondary: {
              DEFAULT: "hsl(var(--secondary))",
              foreground: "hsl(var(--secondary-foreground))",
            },
            destructive: {
              DEFAULT: "hsl(var(--destructive))",
              foreground: "hsl(var(--destructive-foreground))",
            },
            muted: {
              DEFAULT: "hsl(var(--muted))",
              foreground: "hsl(var(--muted-foreground))",
            },
            accent: {
              DEFAULT: "hsl(var(--accent))",
              foreground: "hsl(var(--accent-foreground))",
            },
            popover: {
              DEFAULT: "hsl(var(--popover))",
              foreground: "hsl(var(--popover-foreground))",
            },
            card: {
              DEFAULT: "hsl(var(--card))",
              foreground: "hsl(var(--card-foreground))",
            },
          },
          borderRadius: {
            lg: "var(--radius)", // 0.75rem
            md: "calc(var(--radius) - 0.25rem)", // 0.5rem
            sm: "calc(var(--radius) - 0.5rem)", // 0.25rem
          },
          animation: {
            "fade-in": "fadeIn 0.5s ease-in-out",
            "slide-in": "slideIn 0.3s ease-out",
            "scale-in": "scaleIn 0.2s ease-out",
          },
          keyframes: {
            fadeIn: {
              "0%": { opacity: "0" },
              "100%": { opacity: "1" },
            },
            slideIn: {
              "0%": { transform: "translateX(-100%)" },
              "100%": { transform: "translateX(0)" },
            },
            scaleIn: {
              "0%": { transform: "scale(0.95)", opacity: "0" },
              "100%": { transform: "scale(1)", opacity: "1" },
            },
          },
        },
      },
      plugins: [],
    }
  src/components/AppShell.tsx: |-
    import { useRef, useEffect } from 'react'
    import { gsap } from 'gsap'
    import { cn } from '@/lib/utils'
    import { EnhancedSidebar } from './EnhancedSidebar'
    import { MainContent } from './MainContent'
    import { TopBar } from './TopBar'
    import { useAppStore } from '@/store/appStore'
    import { SIDEBAR_STATES, BODY_STATES } from '@/lib/utils'

    export function AppShell() {
      const {
        sidebarState,
        bodyState,
        sidebarWidth,
        isDarkMode,
        isResizing,
        setSidebarState,
        setIsResizing,
        setSidebarWidth,
        toggleSidebar,
        hideSidebar,
        showSidebar,
        peekSidebar,
        toggleFullscreen,
        toggleSidePane,
        toggleDarkMode,
        reducedMotion,
        autoExpandSidebar
      } = useAppStore()
      
      const appRef = useRef<HTMLDivElement>(null)
      const sidebarRef = useRef<HTMLDivElement>(null)
      const mainContentRef = useRef<HTMLDivElement>(null)
      const resizeHandleRef = useRef<HTMLDivElement>(null)

      // Animation duration based on reduced motion preference
      const animationDuration = reducedMotion ? 0.1 : 0.4

      // Resize functionality
      useEffect(() => {
        const handleMouseMove = (e: MouseEvent) => {
          if (!isResizing) return
          
          const newWidth = Math.max(200, Math.min(500, e.clientX))
          setSidebarWidth(newWidth)
          
          if (sidebarRef.current) {
            gsap.set(sidebarRef.current, { width: newWidth })
          }
        }

        const handleMouseUp = () => {
          setIsResizing(false)
          document.body.style.cursor = ''
          document.body.style.userSelect = ''
        }

        if (isResizing) {
          document.body.style.cursor = 'col-resize'
          document.body.style.userSelect = 'none'
          document.addEventListener('mousemove', handleMouseMove)
          document.addEventListener('mouseup', handleMouseUp)
        }

        return () => {
          document.removeEventListener('mousemove', handleMouseMove)
          document.removeEventListener('mouseup', handleMouseUp)
        }
      }, [isResizing])

      // GSAP animations for sidebar transitions
      useEffect(() => {
        if (!sidebarRef.current || !mainContentRef.current) return

        const sidebar = sidebarRef.current
        
        let targetWidth = 0
        let targetOpacity = 1
        let targetX = 0

        switch (sidebarState) {
          case SIDEBAR_STATES.HIDDEN:
            targetWidth = 0
            targetOpacity = 0
            targetX = -100
            break
          case SIDEBAR_STATES.COLLAPSED:
            targetWidth = 64
            targetOpacity = 1
            targetX = 0
            break
          case SIDEBAR_STATES.EXPANDED:
            targetWidth = sidebarWidth
            targetOpacity = 1
            targetX = 0
            break
          case SIDEBAR_STATES.PEEK:
            targetWidth = sidebarWidth * 0.8
            targetOpacity = 0.95
            targetX = 0
            break
        }

        const tl = gsap.timeline({ ease: "power3.out" })
        
        tl.to(sidebar, {
          width: targetWidth,
          opacity: targetOpacity,
          x: `${targetX}%`,
          duration: animationDuration,
        })
        // Don't animate margin in the new layout structure

      }, [sidebarState, sidebarWidth, bodyState])

      // GSAP animations for body state transitions
      useEffect(() => {
        if (!mainContentRef.current) return

        switch (bodyState) {
          case BODY_STATES.FULLSCREEN:
            // In fullscreen, hide sidebar completely
            if (sidebarRef.current) {
              gsap.to(sidebarRef.current, {
                x: '-100%',
                duration: animationDuration,
                ease: "power3.out"
              })
            }
            break
          case BODY_STATES.SIDE_PANE:
            // In side pane, make sidebar narrower and content takes remaining space
            if (sidebarRef.current) {
              const narrowWidth = Math.min(sidebarWidth * 0.7, 200)
              gsap.to(sidebarRef.current, {
                width: narrowWidth,
                x: 0,
                duration: animationDuration,
                ease: "power3.out"
              })
            }
            break
          default:
            // Normal state - restore sidebar
            if (sidebarRef.current) {
              gsap.to(sidebarRef.current, {
                x: 0,
                duration: animationDuration,
                ease: "power3.out"
              })
            }
            break
        }
      }, [bodyState, sidebarState, sidebarWidth, animationDuration])

      return (
        <div 
          ref={appRef}
          className={cn(
            "relative h-screen w-screen overflow-hidden bg-background transition-colors duration-300",
            isDarkMode && "dark"
          )}
        >
          <div className="flex h-screen overflow-hidden">
            {/* Enhanced Sidebar */}
            <EnhancedSidebar
              ref={sidebarRef}
              onMouseEnter={() => {
                if (autoExpandSidebar && sidebarState === SIDEBAR_STATES.COLLAPSED) {
                  peekSidebar()
                }
              }}
              onMouseLeave={() => {
                if (autoExpandSidebar && sidebarState === SIDEBAR_STATES.PEEK) {
                  setSidebarState(SIDEBAR_STATES.COLLAPSED)
                }
              }}
            />

            {/* Resize Handle */}
            {sidebarState !== SIDEBAR_STATES.HIDDEN && (
              <div
                ref={resizeHandleRef}
                className={cn(
                  "absolute top-0 w-2 h-full bg-transparent hover:bg-primary/20 cursor-col-resize z-50 transition-colors duration-200 group"
                )}
                style={{ 
                  left: sidebarState === SIDEBAR_STATES.COLLAPSED ? 64 : sidebarWidth 
                }}
                onMouseDown={() => setIsResizing(true)}
              >
                <div className="w-0.5 h-full bg-transparent group-hover:bg-primary transition-colors duration-200 mx-auto" />
              </div>
            )}

            {/* Main Content Area */}
            <div className="flex-1 flex flex-col overflow-hidden">
              {/* Top Bar */}
              <TopBar
                sidebarState={sidebarState}
                bodyState={bodyState}
                isDarkMode={isDarkMode}
                onToggleSidebar={toggleSidebar}
                onToggleFullscreen={toggleFullscreen}
                onToggleSidePane={toggleSidePane}
                onToggleDarkMode={toggleDarkMode}
                onHideSidebar={hideSidebar}
                onShowSidebar={showSidebar}
                onPeekSidebar={peekSidebar}
              />
              
              {/* Main Content */}
              <MainContent
                ref={mainContentRef}
                bodyState={bodyState}
              />
            </div>
          </div>
        </div>
      )
    }
  src/components/TopBar.tsx: >-
    import { useState } from 'react'

    import { 
      Menu, 
      Maximize, 
      Minimize, 
      Moon, 
      Sun, 
      PanelLeft, 
      PanelLeftClose,
      Sidebar,
      Eye,
      Layout,
      Settings,
      Command,
      Zap
    } from 'lucide-react'

    import { SettingsPanel } from './SettingsPanel'

    import { cn } from '@/lib/utils'

    import { SIDEBAR_STATES, BODY_STATES, type SidebarState, type BodyState }
    from '@/lib/utils'


    interface TopBarProps {
      sidebarState: SidebarState
      bodyState: BodyState
      isDarkMode: boolean
      onToggleSidebar: () => void
      onToggleFullscreen: () => void
      onToggleSidePane: () => void
      onToggleDarkMode: () => void
      onHideSidebar: () => void
      onShowSidebar: () => void
      onPeekSidebar: () => void
    }


    export function TopBar({
      sidebarState,
      bodyState,
      isDarkMode,
      onToggleSidebar,
      onToggleFullscreen,
      onToggleSidePane,
      onToggleDarkMode,
      onHideSidebar,
      onShowSidebar,
      onPeekSidebar
    }: TopBarProps) {
      const [isSettingsOpen, setIsSettingsOpen] = useState(false)
      return (
        <div className="h-16 bg-card border-b border-border flex items-center justify-between px-4 z-50">
          {/* Left Section - Logo and Sidebar Controls */}
          <div className="flex items-center gap-4">
            {/* Logo */}
            <div className="flex items-center gap-2">
              <div className="w-8 h-8 bg-gradient-to-br from-primary to-primary/60 rounded-lg flex items-center justify-center">
                <Layout className="w-4 h-4 text-primary-foreground" />
              </div>
              <span className="font-semibold text-lg text-foreground hidden sm:inline">AppShell</span>
            </div>

            {/* Sidebar Controls */}
            <div className="flex items-center">
              <button
                onClick={onToggleSidebar}
                className={cn(
                  "p-2 rounded-md hover:bg-accent transition-colors"
                )}
                title="Toggle Sidebar"
              >
                <Menu className="w-4 h-4" />
              </button>
            </div>
          </div>

          {/* Right Section - View Controls */}
          <div className="flex items-center gap-2">
            {/* Quick Actions */}
            <button
              className="p-2 rounded-md hover:bg-accent transition-colors group"
              title="Command Palette (Ctrl+K)"
            >
              <Command className="w-4 h-4 group-hover:scale-110 transition-transform" />
            </button>

            <button
              className="p-2 rounded-md hover:bg-accent transition-colors group"
              title="Quick Actions"
            >
              <Zap className="w-4 h-4 group-hover:scale-110 transition-transform" />
            </button>

            <div className="w-px h-6 bg-border mx-1" />

            {/* Body State Controls */}
            <button
              onClick={onToggleSidePane}
              className={cn(
                "p-2 rounded-md hover:bg-accent transition-colors group",
                bodyState === BODY_STATES.SIDE_PANE && "bg-accent"
              )}
              title="Toggle Side Pane"
            >
              <div className="w-4 h-4 flex group-hover:scale-110 transition-transform">
                <div className="w-2 h-4 bg-current opacity-60" />
                <div className="w-2 h-4 bg-current" />
              </div>
            </button>

            <button
              onClick={onToggleFullscreen}
              className={cn(
                "p-2 rounded-md hover:bg-accent transition-colors group",
                bodyState === BODY_STATES.FULLSCREEN && "bg-accent"
              )}
              title="Toggle Fullscreen"
            >
              {bodyState === BODY_STATES.FULLSCREEN ? (
                <Minimize className="w-4 h-4 group-hover:scale-110 transition-transform" />
              ) : (
                <Maximize className="w-4 h-4 group-hover:scale-110 transition-transform" />
              )}
            </button>

            <div className="w-px h-6 bg-border mx-1" />

            {/* Theme and Settings */}
            <button
              onClick={onToggleDarkMode}
              className="p-2 rounded-md hover:bg-accent transition-colors group"
              title="Toggle Dark Mode"
            >
              {isDarkMode ? (
                <Sun className="w-4 h-4 group-hover:scale-110 transition-transform" />
              ) : (
                <Moon className="w-4 h-4 group-hover:scale-110 transition-transform" />
              )}
            </button>

            <button
              onClick={() => setIsSettingsOpen(true)}
              className="p-2 rounded-md hover:bg-accent transition-colors group"
              title="Settings"
            >
              <Settings className="w-4 h-4 group-hover:rotate-90 transition-transform duration-300" />
            </button>
          </div>

          {/* Settings Panel */}
          <SettingsPanel 
            isOpen={isSettingsOpen} 
            onClose={() => setIsSettingsOpen(false)} 
          />
        </div>
      )
    }
  src/components/EnhancedSidebar.tsx: |-
    import React, { forwardRef, useRef, useEffect } from 'react'
    import { gsap } from 'gsap'
    import { 
      Home, 
      Search, 
      Bell, 
      User, 
      Settings, 
      HelpCircle, 
      FileText, 
      Calendar, 
      Mail,
      FolderOpen,
      Bookmark,
      Download,
      Star,
      Trash2,
      ChevronDown,
      Plus,
      Command
    } from 'lucide-react'
    import { cn } from '@/lib/utils'
    import { useAppStore } from '@/store/appStore'
    import { SIDEBAR_STATES } from '@/lib/utils'

    interface NavItem {
      icon: React.ReactNode
      label: string
      href: string
      badge?: number
      isActive?: boolean
      children?: NavItem[]
    }

    interface NavSection {
      title: string
      items: NavItem[]
      collapsible?: boolean
      defaultExpanded?: boolean
    }

    const navigationSections: NavSection[] = [
      {
        title: "Main",
        items: [
          { icon: <Home className="w-4 h-4" />, label: "Dashboard", href: "/", isActive: true },
          { icon: <Search className="w-4 h-4" />, label: "Search", href: "/search" },
          { icon: <Bell className="w-4 h-4" />, label: "Notifications", href: "/notifications", badge: 3 },
        ]
      },
      {
        title: "Workspace",
        collapsible: true,
        defaultExpanded: true,
        items: [
          { 
            icon: <FileText className="w-4 h-4" />, 
            label: "Documents", 
            href: "/documents",
            children: [
              { icon: <FileText className="w-3 h-3" />, label: "Recent", href: "/documents/recent" },
              { icon: <Star className="w-3 h-3" />, label: "Starred", href: "/documents/starred" },
              { icon: <Trash2 className="w-3 h-3" />, label: "Trash", href: "/documents/trash" },
            ]
          },
          { icon: <FolderOpen className="w-4 h-4" />, label: "Projects", href: "/projects" },
          { icon: <Calendar className="w-4 h-4" />, label: "Calendar", href: "/calendar" },
          { icon: <Mail className="w-4 h-4" />, label: "Messages", href: "/messages", badge: 12 },
        ]
      },
      {
        title: "Personal",
        collapsible: true,
        defaultExpanded: false,
        items: [
          { icon: <Bookmark className="w-4 h-4" />, label: "Bookmarks", href: "/bookmarks" },
          { icon: <Star className="w-4 h-4" />, label: "Favorites", href: "/favorites" },
          { icon: <Download className="w-4 h-4" />, label: "Downloads", href: "/downloads" },
        ]
      }
    ]

    const bottomNavItems: NavItem[] = [
      { icon: <User className="w-4 h-4" />, label: "Profile", href: "/profile" },
      { icon: <Settings className="w-4 h-4" />, label: "Settings", href: "/settings" },
      { icon: <HelpCircle className="w-4 h-4" />, label: "Help", href: "/help" },
    ]

    interface SidebarProps {
      onMouseEnter?: () => void
      onMouseLeave?: () => void
    }

    export const EnhancedSidebar = forwardRef<HTMLDivElement, SidebarProps>(
      ({ onMouseEnter, onMouseLeave }, ref) => {
        const { sidebarState, sidebarWidth, reducedMotion, compactMode } = useAppStore()
        const contentRef = useRef<HTMLDivElement>(null)
        const sectionsRef = useRef<(HTMLDivElement | null)[]>([])
        const [expandedSections, setExpandedSections] = React.useState<Set<string>>(
          new Set(navigationSections.filter(s => s.defaultExpanded).map(s => s.title))
        )

        const isCollapsed = sidebarState === SIDEBAR_STATES.COLLAPSED
        const isHidden = sidebarState === SIDEBAR_STATES.HIDDEN
        const isPeek = sidebarState === SIDEBAR_STATES.PEEK
        const animationDuration = reducedMotion ? 0.1 : 0.3

        // Toggle section expansion
        const toggleSection = (sectionTitle: string) => {
          setExpandedSections(prev => {
            const newSet = new Set(prev)
            if (newSet.has(sectionTitle)) {
              newSet.delete(sectionTitle)
            } else {
              newSet.add(sectionTitle)
            }
            return newSet
          })
        }

        // Animate content visibility
        useEffect(() => {
          if (!contentRef.current) return

          const labels = contentRef.current.querySelectorAll('.nav-label')
          const badges = contentRef.current.querySelectorAll('.nav-badge')
          const sectionTitles = contentRef.current.querySelectorAll('.section-title')
          const chevrons = contentRef.current.querySelectorAll('.section-chevron')

          if (isCollapsed) {
            gsap.to([labels, badges, sectionTitles, chevrons], {
              opacity: 0,
              scale: 0.8,
              duration: animationDuration,
              ease: "power2.out"
            })
          } else {
            gsap.to([labels, badges, sectionTitles, chevrons], {
              opacity: 1,
              scale: 1,
              duration: animationDuration,
              delay: 0.1,
              ease: "power2.out"
            })
          }
        }, [isCollapsed, animationDuration])

        // Hover animations for nav items
        const handleItemHover = (element: HTMLElement, isHovering: boolean) => {
          if (!element) return

          gsap.to(element, {
            scale: isHovering ? 1.02 : 1,
            x: isHovering ? 4 : 0,
            duration: animationDuration,
            ease: "power2.out"
          })
        }

        if (isHidden) {
          return null
        }

        const renderNavItem = (item: NavItem, depth = 0) => (
          <div key={item.label} className={cn("space-y-1", depth > 0 && "ml-6")}>
            <div
              className={cn(
                "group relative flex items-center gap-3 rounded-md cursor-pointer transition-all duration-200",
                compactMode ? "px-2 py-1.5" : "px-3 py-2",
                "hover:bg-accent",
                item.isActive && "bg-primary text-primary-foreground hover:bg-primary/90",
                depth > 0 && "text-sm"
              )}
              onMouseEnter={(e) => handleItemHover(e.currentTarget, true)}
              onMouseLeave={(e) => handleItemHover(e.currentTarget, false)}
            >
              <div className="flex-shrink-0">
                {item.icon}
              </div>
              
              {!isCollapsed && (
                <>
                  <span className="nav-label flex-1 font-medium truncate">
                    {item.label}
                  </span>
                  
                  {item.badge && (
                    <span className="nav-badge bg-destructive text-destructive-foreground text-xs px-1.5 py-0.5 rounded-full min-w-[1.25rem] text-center">
                      {item.badge > 99 ? '99+' : item.badge}
                    </span>
                  )}

                  {item.children && (
                    <ChevronDown className="w-3 h-3 transition-transform" />
                  )}
                </>
              )}

              {/* Tooltip for collapsed state */}
              {isCollapsed && (
                <div className="absolute left-full ml-2 px-2 py-1 bg-popover text-popover-foreground text-sm rounded-md shadow-lg opacity-0 group-hover:opacity-100 transition-opacity pointer-events-none whitespace-nowrap z-50">
                  {item.label}
                  {item.badge && (
                    <span className="ml-2 bg-destructive text-destructive-foreground text-xs px-1.5 py-0.5 rounded-full">
                      {item.badge > 99 ? '99+' : item.badge}
                    </span>
                  )}
                </div>
              )}
            </div>

            {/* Children items */}
            {item.children && !isCollapsed && (
              <div className="space-y-1">
                {item.children.map(child => renderNavItem(child, depth + 1))}
              </div>
            )}
          </div>
        )

        return (
          <div
            ref={ref}
            className={cn(
              "relative bg-card border-r border-border flex-shrink-0 transition-all duration-300",
              "h-full overflow-hidden",
              isPeek && "shadow-xl z-40",
              compactMode && "text-sm"
            )}
            style={{ width: sidebarWidth }}
            onMouseEnter={onMouseEnter}
            onMouseLeave={onMouseLeave}
          >
            {/* Background blur effect for peek mode */}
            {isPeek && (
              <div className="absolute inset-0 bg-background/80 backdrop-blur-sm" />
            )}

            <div 
              ref={contentRef}
              className={cn(
                "relative z-10 h-full flex flex-col",
                compactMode ? "py-4" : "py-6"
              )}
            >
              {/* Navigation Sections */}
              <div className="flex-1 overflow-y-auto overflow-x-hidden px-4 space-y-6 pt-4">
                {navigationSections.map((section, sectionIndex) => {
                  const isExpanded = expandedSections.has(section.title)
                  
                  return (
                    <div 
                      key={section.title}
                      ref={el => sectionsRef.current[sectionIndex] = el}
                      className="space-y-1"
                    >
                      {!isCollapsed && (
                        <div 
                          className={cn(
                            "flex items-center justify-between px-2 text-xs font-medium text-muted-foreground uppercase tracking-wider",
                            section.collapsible && "cursor-pointer hover:text-foreground transition-colors"
                          )}
                          onClick={() => section.collapsible && toggleSection(section.title)}
                        >
                          <span className="section-title">{section.title}</span>
                          {section.collapsible && (
                            <ChevronDown 
                              className={cn(
                                "section-chevron w-3 h-3 transition-transform",
                                isExpanded ? "rotate-0" : "-rotate-90"
                              )} 
                            />
                          )}
                        </div>
                      )}
                      
                      {(!section.collapsible || isExpanded || isCollapsed) && (
                        <nav className="space-y-1">
                          {section.items.map(item => renderNavItem(item))}
                        </nav>
                      )}
                    </div>
                  )
                })}
              </div>

              {/* Bottom Navigation */}
              <div className={cn("px-4 pt-4 border-t border-border", compactMode && "pt-3")}>
                <nav className="space-y-1">
                  {bottomNavItems.map((item) => renderNavItem(item))}
                </nav>

                {/* User Profile */}
                {!isCollapsed && (
                  <div className={cn("mt-6 p-3 bg-accent/50 rounded-lg", compactMode && "mt-4 p-2")}>
                    <div className="flex items-center gap-3">
                      <div className={cn("bg-primary rounded-full flex items-center justify-center", compactMode ? "w-6 h-6" : "w-8 h-8")}>
                        <User className={cn("text-primary-foreground", compactMode ? "w-3 h-3" : "w-4 h-4")} />
                      </div>
                      <div className="flex-1 min-w-0">
                        <p className={cn("font-medium truncate", compactMode ? "text-xs" : "text-sm")}>John Doe</p>
                        <p className={cn("text-muted-foreground truncate", compactMode ? "text-xs" : "text-xs")}>john@example.com</p>
                      </div>
                    </div>
                  </div>
                )}
              </div>
            </div>
          </div>
        )
      }
    )

    EnhancedSidebar.displayName = "EnhancedSidebar"
  src/components/MainContent.tsx: |-
    import React, { forwardRef, useRef, useEffect, useState } from 'react'
    import { gsap } from 'gsap'
    import { 
      BarChart3, 
      TrendingUp, 
      Users, 
      DollarSign, 
      Activity,
      Calendar,
      Clock,
      MessageSquare,
      FileText,
      Star,
      ChevronRight,
      Plus,
      Filter,
      Search,
      MoreVertical
    } from 'lucide-react'
    import { cn } from '@/lib/utils'
    import { BODY_STATES, type BodyState } from '@/lib/utils'
    import { DemoContent } from './DemoContent'

    interface MainContentProps {
      bodyState: BodyState
    }

    interface StatsCard {
      title: string
      value: string
      change: string
      trend: 'up' | 'down'
      icon: React.ReactNode
    }

    interface ActivityItem {
      id: string
      type: 'comment' | 'file' | 'meeting' | 'task'
      title: string
      description: string
      time: string
      user: string
    }

    const statsCards: StatsCard[] = [
      {
        title: "Total Revenue",
        value: "$45,231.89",
        change: "+20.1%",
        trend: "up",
        icon: <DollarSign className="w-4 h-4" />
      },
      {
        title: "Active Users",
        value: "2,350",
        change: "+180.1%",
        trend: "up",
        icon: <Users className="w-4 h-4" />
      },
      {
        title: "Conversion Rate",
        value: "12.5%",
        change: "+19%",
        trend: "up",
        icon: <TrendingUp className="w-4 h-4" />
      },
      {
        title: "Performance",
        value: "573ms",
        change: "-5.3%",
        trend: "down",
        icon: <Activity className="w-4 h-4" />
      }
    ]

    const recentActivity: ActivityItem[] = [
      {
        id: "1",
        type: "comment",
        title: "New comment on Project Alpha",
        description: "Sarah Johnson added a comment to the design review",
        time: "2 minutes ago",
        user: "SJ"
      },
      {
        id: "2",
        type: "file",
        title: "Document uploaded",
        description: "quarterly-report.pdf was uploaded to Documents",
        time: "15 minutes ago",
        user: "MD"
      },
      {
        id: "3",
        type: "meeting",
        title: "Meeting scheduled",
        description: "Weekly standup meeting scheduled for tomorrow 9 AM",
        time: "1 hour ago",
        user: "RW"
      },
      {
        id: "4",
        type: "task",
        title: "Task completed",
        description: "UI wireframes for mobile app completed",
        time: "2 hours ago",
        user: "AL"
      }
    ]

    export const MainContent = forwardRef<HTMLDivElement, MainContentProps>(
      ({ bodyState }, ref) => {
        const contentRef = useRef<HTMLDivElement>(null)
        const cardsRef = useRef<(HTMLDivElement | null)[]>([])
        const [searchTerm, setSearchTerm] = useState("")

        // Animate content based on body state
        useEffect(() => {
          if (!contentRef.current) return

          const content = contentRef.current
          const cards = cardsRef.current.filter(Boolean)

          switch (bodyState) {
            case BODY_STATES.FULLSCREEN:
              gsap.to(content, {
                scale: 1.02,
                duration: 0.4,
                ease: "power3.out"
              })
              break
            case BODY_STATES.SIDE_PANE:
              gsap.to(content, {
                scale: 0.98,
                duration: 0.4,
                ease: "power3.out"
              })
              break
            default:
              gsap.to(content, {
                scale: 1,
                duration: 0.4,
                ease: "power3.out"
              })
              break
          }

          // Stagger animation for cards
          gsap.fromTo(cards, 
            { y: 20, opacity: 0 },
            { 
              y: 0, 
              opacity: 1, 
              duration: 0.6,
              stagger: 0.1,
              ease: "power3.out"
            }
          )

        }, [bodyState])

        const getTypeIcon = (type: ActivityItem['type']) => {
          switch (type) {
            case 'comment':
              return <MessageSquare className="w-4 h-4" />
            case 'file':
              return <FileText className="w-4 h-4" />
            case 'meeting':
              return <Calendar className="w-4 h-4" />
            case 'task':
              return <Star className="w-4 h-4" />
            default:
              return <Activity className="w-4 h-4" />
          }
        }

        return (
          <div
            ref={ref}
            className={cn(
              "flex-1 h-[calc(100vh-64px)] overflow-hidden transition-all duration-300",
              bodyState === BODY_STATES.FULLSCREEN && "bg-background",
              bodyState === BODY_STATES.SIDE_PANE && "bg-muted/30"
            )}
          >
            <div 
              ref={contentRef}
              className="h-full overflow-y-auto p-8 space-y-8"
            >
              {/* Header */}
              <div className="flex items-center justify-between">
                <div>
                  <h1 className="text-3xl font-bold tracking-tight">Dashboard</h1>
                  <p className="text-muted-foreground">
                    Welcome to the amazing app shell demo! Explore all the features and customization options.
                  </p>
                </div>
                
                <div className="flex items-center gap-2">
                  <div className="relative">
                    <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4" />
                    <input
                      type="text"
                      placeholder="Search..."
                      value={searchTerm}
                      onChange={(e) => setSearchTerm(e.target.value)}
                      className="pl-9 pr-4 py-2 border border-border rounded-md bg-background focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent"
                    />
                  </div>
                  <button className="p-2 hover:bg-accent rounded-lg transition-colors">
                    <Filter className="w-4 h-4" />
                  </button>
                  <button className="bg-primary text-primary-foreground px-4 py-2 rounded-lg hover:bg-primary/90 transition-colors flex items-center gap-2">
                    <Plus className="w-4 h-4" />
                    <span>New Project</span>
                  </button>
                </div>
              </div>

              {/* Stats Cards */}
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
                {statsCards.map((stat, index) => (
                  <div
                    key={stat.title}
                    ref={el => cardsRef.current[index] = el}
                    className="bg-card p-6 rounded-lg border border-border hover:border-primary/30 hover:shadow-sm transition-all duration-300 group cursor-pointer"
                  >
                    <div className="flex items-center justify-between">
                      <div className="p-2 bg-primary/10 rounded-lg group-hover:bg-primary/20 transition-colors">
                        {stat.icon}
                      </div>
                      <div className={cn(
                        "text-sm font-medium",
                        stat.trend === 'up' ? "text-green-600" : "text-red-600"
                      )}>
                        {stat.change}
                      </div>
                    </div>
                    <div className="mt-4">
                      <h3 className="text-2xl font-bold">{stat.value}</h3>
                      <p className="text-sm text-muted-foreground mt-1">{stat.title}</p>
                    </div>
                  </div>
                ))}
              </div>

              {/* Demo Content */}
              <DemoContent />

              {/* Main Content Grid */}
              <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
                {/* Chart Area */}
                <div className="lg:col-span-2 space-y-6">
                  {/* Analytics Chart */}
                  <div className="bg-card p-6 rounded-xl border border-border">
                    <div className="flex items-center justify-between mb-6">
                      <h3 className="text-lg font-semibold">Analytics Overview</h3>
                      <button className="p-2 hover:bg-accent rounded-lg transition-colors">
                        <MoreVertical className="w-4 h-4" />
                      </button>
                    </div>
                    
                    {/* Mock Chart */}
                    <div className="h-64 bg-gradient-to-br from-primary/10 to-transparent rounded-lg flex items-center justify-center border border-border">
                      <div className="text-center">
                        <BarChart3 className="w-12 h-12 text-primary mx-auto mb-2" />
                        <p className="text-muted-foreground">Chart visualization would go here</p>
                      </div>
                    </div>
                  </div>

                  {/* Recent Projects */}
                  <div className="bg-card p-6 rounded-xl border border-border">
                    <div className="flex items-center justify-between mb-6">
                      <h3 className="text-lg font-semibold">Recent Projects</h3>
                      <button className="text-primary hover:text-primary/80 text-sm font-medium flex items-center gap-1">
                        View All
                        <ChevronRight className="w-4 h-4" />
                      </button>
                    </div>
                    
                    <div className="space-y-4">
                      {[
                        { name: "E-commerce Platform", progress: 75, team: 5, deadline: "Dec 15" },
                        { name: "Mobile App Redesign", progress: 45, team: 3, deadline: "Jan 20" },
                        { name: "Marketing Website", progress: 90, team: 4, deadline: "Dec 5" }
                      ].map((project) => (
                        <div key={project.name} className="p-4 bg-accent/30 rounded-lg hover:bg-accent/50 transition-colors cursor-pointer">
                          <div className="flex items-center justify-between mb-2">
                            <h4 className="font-medium">{project.name}</h4>
                            <span className="text-sm text-muted-foreground">{project.progress}%</span>
                          </div>
                          <div className="w-full bg-muted rounded-full h-2 mb-3">
                            <div 
                              className="bg-primary h-2 rounded-full transition-all duration-500"
                              style={{ width: `${project.progress}%` }}
                            />
                          </div>
                          <div className="flex items-center justify-between text-sm text-muted-foreground">
                            <span>{project.team} team members</span>
                            <span>Due {project.deadline}</span>
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                </div>

                {/* Sidebar Content */}
                <div className="space-y-6">
                  {/* Quick Actions */}
                  <div className="bg-card p-6 rounded-xl border border-border">
                    <h3 className="text-lg font-semibold mb-4">Quick Actions</h3>
                    <div className="space-y-3">
                      {[
                        { icon: <FileText className="w-4 h-4" />, label: "Create Document", color: "bg-blue-500/10 text-blue-600" },
                        { icon: <Calendar className="w-4 h-4" />, label: "Schedule Meeting", color: "bg-green-500/10 text-green-600" },
                        { icon: <Users className="w-4 h-4" />, label: "Invite Team", color: "bg-purple-500/10 text-purple-600" },
                        { icon: <BarChart3 className="w-4 h-4" />, label: "View Reports", color: "bg-orange-500/10 text-orange-600" }
                      ].map((action) => (
                        <button
                          key={action.label}
                          className="w-full flex items-center gap-3 p-3 hover:bg-accent rounded-lg transition-colors text-left"
                        >
                          <div className={cn("p-2 rounded-lg", action.color)}>
                            {action.icon}
                          </div>
                          <span className="font-medium">{action.label}</span>
                        </button>
                      ))}
                    </div>
                  </div>

                  {/* Recent Activity */}
                  <div className="bg-card p-6 rounded-xl border border-border">
                    <h3 className="text-lg font-semibold mb-4">Recent Activity</h3>
                    <div className="space-y-4">
                      {recentActivity.map((activity) => (
                        <div key={activity.id} className="flex items-start gap-3 p-3 hover:bg-accent/30 rounded-lg transition-colors cursor-pointer">
                          <div className="p-2 bg-primary/10 rounded-lg flex-shrink-0">
                            {getTypeIcon(activity.type)}
                          </div>
                          <div className="flex-1 min-w-0">
                            <h4 className="font-medium text-sm mb-1">{activity.title}</h4>
                            <p className="text-xs text-muted-foreground mb-2">{activity.description}</p>
                            <div className="flex items-center gap-2 text-xs text-muted-foreground">
                              <Clock className="w-3 h-3" />
                              <span>{activity.time}</span>
                              <div className="w-5 h-5 bg-primary rounded-full flex items-center justify-center text-primary-foreground text-xs font-medium">
                                {activity.user}
                              </div>
                            </div>
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        )
      }
    )
  src/components/DemoContent.tsx: |-
    import { useRef, useEffect } from 'react'
    import { gsap } from 'gsap'
    import { 
      Sparkles, 
      Zap, 
      Rocket, 
      Star, 
      Heart,
      Layers,
      Code,
      Palette,
      Smartphone,
      Monitor,
      Settings
    } from 'lucide-react'
    import { cn } from '@/lib/utils'
    import { useAppStore } from '@/store/appStore'

    export function DemoContent() {
      const { bodyState, sidebarState, isDarkMode, compactMode } = useAppStore()
      const contentRef = useRef<HTMLDivElement>(null)
      const cardsRef = useRef<(HTMLDivElement | null)[]>([])

      useEffect(() => {
        if (!contentRef.current) return

        const cards = cardsRef.current.filter(Boolean)
        
        // Animate cards on mount
        gsap.fromTo(cards, 
          { y: 30, opacity: 0, scale: 0.95 },
          { 
            y: 0, 
            opacity: 1, 
            scale: 1,
            duration: 0.6,
            stagger: 0.1,
            ease: "power3.out"
          }
        )
      }, [])

      const features = [
        {
          icon: <Sparkles className="w-6 h-6" />,
          title: "Amazing Animations",
          description: "Powered by GSAP for smooth, buttery animations",
          color: "from-emerald-500 to-teal-500"
        },
        {
          icon: <Zap className="w-6 h-6" />,
          title: "Lightning Fast",
          description: "Built with Vite and optimized for performance",
          color: "from-amber-500 to-orange-500"
        },
        {
          icon: <Layers className="w-6 h-6" />,
          title: "Multiple States",
          description: "Fullscreen, side pane, and normal viewing modes",
          color: "from-emerald-500 to-green-500"
        },
        {
          icon: <Code className="w-6 h-6" />,
          title: "TypeScript",
          description: "Fully typed with excellent developer experience",
          color: "from-green-500 to-emerald-500"
        },
        {
          icon: <Palette className="w-6 h-6" />,
          title: "Beautiful Design",
          description: "Shadcn/ui components with Tailwind CSS",
          color: "from-teal-500 to-emerald-500"
        },
        {
          icon: <Settings className="w-6 h-6" />,
          title: "Customizable",
          description: "Extensive settings and preferences panel",
          color: "from-slate-500 to-gray-500"
        }
      ]

      const stats = [
        { label: "Components", value: "12+", color: "text-emerald-600" },
        { label: "Animations", value: "25+", color: "text-teal-600" },
        { label: "States", value: "7", color: "text-primary" },
        { label: "Settings", value: "10+", color: "text-amber-600" }
      ]

      return (
        <div ref={contentRef} className="p-8 space-y-12">
          {/* Hero Section */}
          <div className="text-center space-y-4">
            <div className="flex items-center justify-center gap-2 mb-4">
              <Rocket className="w-8 h-8 text-primary" />
              <h1 className="text-4xl font-bold bg-gradient-to-r from-primary to-primary/60 bg-clip-text text-transparent">
                Amazing App Shell
              </h1>
            </div>
            <p className="text-lg text-muted-foreground max-w-2xl mx-auto">
              A super amazing application shell with resizable sidebar, multiple body states, 
              smooth animations, and comprehensive settings - all built with modern web technologies.
            </p>
            
            {/* Quick Stats */}
            <div className="flex items-center justify-center gap-12 mt-8">
              {stats.map((stat) => (
                <div key={stat.label} className="text-center">
                  <div className={cn("text-2xl font-bold", stat.color)}>{stat.value}</div>
                  <div className="text-sm text-muted-foreground">{stat.label}</div>
                </div>
              ))}
            </div>
          </div>

          {/* Feature Cards */}
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {features.map((feature, index) => (
              <div
                key={feature.title}
                ref={el => cardsRef.current[index] = el}
                className="group relative overflow-hidden rounded-lg bg-card border border-border p-6 hover:border-primary/30 hover:shadow-sm transition-all duration-300 cursor-pointer"
              >
                <div className="relative z-10">
                  <div className="w-12 h-12 rounded-md bg-primary/10 flex items-center justify-center text-primary mb-4 group-hover:scale-110 group-hover:bg-primary/20 transition-transform">
                    {feature.icon}
                  </div>
                  
                  <h3 className="text-lg font-semibold mb-2">{feature.title}</h3>
                  <p className="text-muted-foreground text-sm">{feature.description}</p>
                </div>
              </div>
            ))}
          </div>

          {/* Technology Stack */}
          <div className="bg-card border border-border rounded-lg p-6">
            <h2 className="text-2xl font-bold mb-6 flex items-center gap-2">
              <Star className="w-6 h-6 text-yellow-500" />
              Technology Stack
            </h2>
            
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
              {[
                { name: "React 18", desc: "Latest React with hooks" },
                { name: "TypeScript", desc: "Type-safe development" },
                { name: "Vite", desc: "Lightning fast build tool" },
                { name: "Tailwind CSS", desc: "Utility-first styling" },
                { name: "GSAP", desc: "Professional animations" },
                { name: "Zustand", desc: "Lightweight state management" },
                { name: "Shadcn/ui", desc: "Beautiful components" },
                { name: "Lucide Icons", desc: "Consistent iconography" }
              ].map((tech) => (
                <div key={tech.name} className="bg-background rounded-lg p-4 border border-border">
                  <h4 className="font-medium">{tech.name}</h4>
                  <p className="text-sm text-muted-foreground">{tech.desc}</p>
                </div>
              ))}
            </div>
          </div>

          {/* Current State Display */}
          <div className="bg-card border border-border rounded-lg p-6">
            <h2 className="text-xl font-bold mb-4 flex items-center gap-2">
              <Monitor className="w-5 h-5" />
              Current App State
            </h2>
            
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
              <div className="text-center p-3 bg-background rounded-lg">
                <div className="text-sm text-muted-foreground">Sidebar</div>
                <div className="font-medium capitalize">{sidebarState}</div>
              </div>
              <div className="text-center p-3 bg-background rounded-lg">
                <div className="text-sm text-muted-foreground">Body State</div>
                <div className="font-medium capitalize">{bodyState.replace('_', ' ')}</div>
              </div>
              <div className="text-center p-3 bg-background rounded-lg">
                <div className="text-sm text-muted-foreground">Theme</div>
                <div className="font-medium">{isDarkMode ? 'Dark' : 'Light'}</div>
              </div>
              <div className="text-center p-3 bg-background rounded-lg">
                <div className="text-sm text-muted-foreground">Mode</div>
                <div className="font-medium">{compactMode ? 'Compact' : 'Normal'}</div>
              </div>
            </div>
          </div>

          {/* Interactive Demo */}
          <div className="text-center space-y-4">
            <h2 className="text-2xl font-bold flex items-center justify-center gap-2">
              <Heart className="w-6 h-6 text-red-500" />
              Try It Out!
            </h2>
            <p className="text-muted-foreground">
              Use the controls in the top bar to explore different states, toggle the sidebar, 
              or open settings to customize the experience. The sidebar is resizable by dragging the edge!
            </p>
            
            <div className="flex items-center justify-center gap-4 pt-4">
              <div className="flex items-center gap-2 text-sm text-muted-foreground">
                <Smartphone className="w-4 h-4" />
                <span>Responsive</span>
              </div>
              <div className="flex items-center gap-2 text-sm text-muted-foreground">
                <Zap className="w-4 h-4" />
                <span>Fast</span>
              </div>
              <div className="flex items-center gap-2 text-sm text-muted-foreground">
                <Star className="w-4 h-4" />
                <span>Beautiful</span>
              </div>
            </div>
          </div>
        </div>
      )
    }
approved: false
linesAdded: null
linesRemoved: null
linesDifference: null
gitCommittedAt: null
status: undone
id: 6
