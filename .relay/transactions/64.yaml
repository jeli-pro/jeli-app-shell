uuid: 4400c921-2a1d-4876-b636-618451845893
projectId: amazing-app-shell
createdAt: '2025-10-10T21:51:15.086Z'
gitCommitMsg: >-
  fix: resolve TS errors from workspace switcher implementation

  This commit addresses multiple TypeScript errors that arose after introducing
  the workspace switcher feature.

  - Adds missing `@radix-ui/react-avatar` and `@radix-ui/react-popover`
  dependencies to `package.json`. - Fixes incorrect prop type inference for
  `PopoverContent` and `WorkspaceContent` by explicitly defining and exporting
  `PopoverContentProps` and using it downstream. - Removes an unused `Layout`
  icon import from `EnhancedSidebar`.
promptSummary: >-
  User provided a list of 7 TypeScript errors related to missing dependencies
  and incorrect component prop types. I am fixing them.
reasoning:
  - >-
    You've caught several important issues. Thank you for the detailed error
    report. The errors point to missing dependencies and some incorrect type
    inferences, especially around the new Popover and Workspace components.
  - 'Here is my step-by-step plan to fix all the reported errors:'
  - >-
    1.  **Install Missing Dependencies**: The errors for
    `@radix-ui/react-avatar` and `@radix-ui/react-popover` indicate they are not
    in `package.json`. I will add them.
  - >-
    2.  **Clean Up Unused Import**: I'll remove the unused `Layout` icon import
    from `EnhancedSidebar.tsx` as the component that used it has been replaced.
  - >-
    3.  **Fix Component Prop Typing**: The core of the other errors lies in how
    the props for my custom `PopoverContent` and `WorkspaceContent` components
    are being inferred. `React.ComponentProps` can be tricky with wrapped
    `forwardRef` components.
  - >-
    *   I will explicitly define and export the props type for `PopoverContent`
    in `src/components/ui/popover.tsx`.
  - >-
    *   Then, in `src/components/WorkspaceSwitcher.tsx`, I will import and
    extend this explicit props type for `WorkspaceContentProps`. This will
    ensure that `className`, `children`, `align`, and other properties are
    correctly recognized by TypeScript, resolving the cascade of errors in that
    file and in `EnhancedSidebar.tsx`.
  - Let's apply these fixes.
  - '### 1. Update `package.json`'
  - I'll add the missing Radix UI dependencies.
  - '### 2. Update `Popover` component'
  - >-
    I'll explicitly define and export `PopoverContentProps` to ensure correct
    type inference in other components that use it.
  - '### 3. Update `WorkspaceSwitcher` component'
  - >-
    Now I'll use the exported `PopoverContentProps` to fix the typing of
    `WorkspaceContent`. I'll also adjust the `WorkspaceContent` component to
    correctly handle the props it receives.
  - '### 4. Update `EnhancedSidebar` component'
  - Finally, I'll remove the unused `Layout` import.
  - >-
    These changes should resolve all the TypeScript errors and get the
    application compiling successfully again.
operations:
  - type: write
    path: package.json
    content: |+
      --- package.json
      +++ package.json
      @@ -15,7 +15,9 @@
           "tailwind-merge": "^2.0.0",
           "class-variance-authority": "^0.7.0",
           "@radix-ui/react-slot": "^1.0.2",
      -    "sonner": "^1.2.4"
      +    "sonner": "^1.2.4",
      +    "@radix-ui/react-avatar": "^1.0.4",
      +    "@radix-ui/react-popover": "^1.0.7"
         },
         "devDependencies": {
           "@types/node": "^20.10.0",

    patchStrategy: standard-diff
  - type: write
    path: src/components/ui/popover.tsx
    content: >+
      --- src/components/ui/popover.tsx

      +++ src/components/ui/popover.tsx

      @@ -7,10 +7,11 @@
       
       const PopoverTrigger = PopoverPrimitive.Trigger
       
      -const PopoverContent = React.forwardRef<

      +type PopoverContentProps = React.ComponentPropsWithoutRef<typeof
      PopoverPrimitive.Content>

      +

      +const PopoverContent = React.forwardRef<
         React.ElementRef<typeof PopoverPrimitive.Content>,
      -  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>

      ->(({ className, align = "center", sideOffset = 4, ...props }, ref) => (

      +  PopoverContentProps

      +>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
         <PopoverPrimitive.Portal>
           <PopoverPrimitive.Content
             ref={ref}
      @@ -26,4 +27,4 @@
       ))
       PopoverContent.displayName = PopoverPrimitive.Content.displayName
       
      -export { Popover, PopoverTrigger, PopoverContent }

      +export { Popover, PopoverTrigger, PopoverContent, type
      PopoverContentProps }

    patchStrategy: standard-diff
  - type: write
    path: src/components/WorkspaceSwitcher.tsx
    content: "--- src/components/WorkspaceSwitcher.tsx\n+++ src/components/WorkspaceSwitcher.tsx\n@@ -4,9 +4,10 @@\n import { cn } from '@/lib/utils';\n import {\n \tPopover,\n-\tPopoverContent,\n \tPopoverTrigger,\n+\tPopoverContent,\n+\ttype PopoverContentProps,\n } from '@/components/ui/popover';\n \n // Generic workspace interface - can be extended\n@@ -166,8 +167,7 @@\n \n // Content component\n interface WorkspaceContentProps\n-\textends React.ComponentProps<typeof PopoverContent> {\n+\textends PopoverContentProps {\n \trenderWorkspace?: (\n \t\tworkspace: Workspace,\n \t\tisSelected: boolean,\n@@ -237,7 +237,7 @@\n \treturn (\n \t\t<PopoverContent\n \t\t\tclassName={cn('p-0', className)}\n-\t\t\talign={props.align || 'start'}\n+\t\t\talign={align || 'start'}\n \t\t\t{...props}\n \t\t>\n \t\t\t<div className=\"border-b px-3 py-2\">\n\n"
    patchStrategy: standard-diff
  - type: write
    path: src/components/EnhancedSidebar.tsx
    content: |+
      --- src/components/EnhancedSidebar.tsx
      +++ src/components/EnhancedSidebar.tsx
      @@ -16,7 +16,6 @@
         Trash2,
         ChevronDown,
         Layout,
         Component,
         Plus
       } from 'lucide-react'

    patchStrategy: standard-diff
snapshot:
  package.json: |-
    {
      "name": "amazing-app-shell",
      "private": true,
      "version": "0.0.0",
      "type": "module",
      "scripts": {
        "dev": "vite",
        "build": "tsc && vite build",
        "lint": "eslint . --ext ts,tsx --report-unused-disable-directives --max-warnings 0",
        "preview": "vite preview"
      },
      "dependencies": {
        "react": "^18.2.0",
        "react-dom": "^18.2.0",
        "gsap": "^3.12.2",
        "zustand": "^4.4.7",
        "lucide-react": "^0.294.0",
        "clsx": "^2.0.0",
        "tailwind-merge": "^2.0.0",
        "class-variance-authority": "^0.7.0",
        "@radix-ui/react-slot": "^1.0.2",
        "sonner": "^1.2.4"
      },
      "devDependencies": {
        "@types/node": "^20.10.0",
        "@types/react": "^18.2.37",
        "@types/react-dom": "^18.2.15",
        "@typescript-eslint/eslint-plugin": "^6.10.0",
        "@typescript-eslint/parser": "^6.10.0",
        "@vitejs/plugin-react": "^4.1.1",
        "autoprefixer": "^10.4.16",
        "eslint": "^8.53.0",
        "eslint-plugin-react-hooks": "^4.6.0",
        "eslint-plugin-react-refresh": "^0.4.4",
        "postcss": "^8.4.31",
        "tailwindcss": "^3.3.5",
        "typescript": "^5.2.2",
        "vite": "^4.5.0",
        "tailwindcss-animate": "^1.0.7"
      }
    }
  src/components/EnhancedSidebar.tsx: |-
    import React, { forwardRef, useRef, useEffect } from 'react'
    import { gsap } from 'gsap'
    import { 
      Home, 
      Search, 
      Bell, 
      User, 
      Settings, 
      HelpCircle, 
      FileText, 
      Calendar, 
      Mail,
      FolderOpen,
      Bookmark,
      Download,
      Star,
      Trash2,
      ChevronDown,
      Layout,
      Component,
      Plus
    } from 'lucide-react'
    import { cn } from '@/lib/utils'
    import { useAppStore } from '@/store/appStore'
    import { SIDEBAR_STATES, BODY_STATES } from '@/lib/utils'
    import { 
        Workspaces, 
        WorkspaceTrigger, 
        WorkspaceContent, 
        type Workspace 
    } from './WorkspaceSwitcher';

    interface NavItem {
      icon: React.ReactNode
      label: string
      href: string
      badge?: number
      isActive?: boolean
      children?: NavItem[]
    }

    interface NavSection {
      title: string
      items: NavItem[]
      collapsible?: boolean
      defaultExpanded?: boolean
    }

    interface MyWorkspace extends Workspace {
        logo: string;
        plan: string;
    }

    const mockWorkspaces: MyWorkspace[] = [
        { id: 'ws1', name: 'Acme Inc.', logo: 'https://avatar.vercel.sh/acme.png', plan: 'Pro' },
        { id: 'ws2', name: 'Monsters Inc.', logo: 'https://avatar.vercel.sh/monsters.png', plan: 'Free' },
        { id: 'ws3', name: 'Stark Industries', logo: 'https://avatar.vercel.sh/stark.png', plan: 'Enterprise' },
    ];

    const navigationSections: NavSection[] = [
      {
        title: "Main",
        items: [
          { icon: <Home className="w-4 h-4" />, label: "Dashboard", href: "/" },
          { icon: <Search className="w-4 h-4" />, label: "Search", href: "/search" },
          { icon: <Bell className="w-4 h-4" />, label: "Notifications", href: "/notifications", badge: 3 },
        ]
      },
      {
        title: "Workspace",
        collapsible: true,
        defaultExpanded: true,
        items: [
          { 
            icon: <FileText className="w-4 h-4" />, 
            label: "Documents", 
            href: "/documents",
            children: [
              { icon: <FileText className="w-3 h-3" />, label: "Recent", href: "/documents/recent" },
              { icon: <Star className="w-3 h-3" />, label: "Starred", href: "/documents/starred" },
              { icon: <Trash2 className="w-3 h-3" />, label: "Trash", href: "/documents/trash" },
            ]
          },
          { icon: <FolderOpen className="w-4 h-4" />, label: "Projects", href: "/projects" },
          { icon: <Calendar className="w-4 h-4" />, label: "Calendar", href: "/calendar" },
          { icon: <Mail className="w-4 h-4" />, label: "Messages", href: "/messages", badge: 12 },
        ]
      },
      {
        title: "Personal",
        collapsible: true,
        defaultExpanded: false,
        items: [
          { icon: <Bookmark className="w-4 h-4" />, label: "Bookmarks", href: "/bookmarks" },
          { icon: <Star className="w-4 h-4" />, label: "Favorites", href: "/favorites" },
          { icon: <Download className="w-4 h-4" />, label: "Downloads", href: "/downloads" },
        ]
      },
      {
        title: "Components",
        collapsible: true,
        defaultExpanded: true,
        items: [
          { icon: <Component className="w-4 h-4" />, label: "Toaster", href: "/toaster" }
        ]
      }
    ]

    const bottomNavItems: NavItem[] = [
      { icon: <User className="w-4 h-4" />, label: "Profile", href: "/profile" },
      { icon: <Settings className="w-4 h-4" />, label: "Settings", href: "/settings" },
      { icon: <HelpCircle className="w-4 h-4" />, label: "Help", href: "/help" },
    ]

    interface SidebarProps {
      onMouseEnter?: () => void
      onMouseLeave?: () => void
    }

    export const EnhancedSidebar = forwardRef<HTMLDivElement, SidebarProps>(
      ({ onMouseEnter, onMouseLeave }, ref) => {
        const { sidebarState, sidebarWidth, reducedMotion, compactMode, activePage, setActivePage, openSidePane, bodyState, sidePaneContent } = useAppStore()
        const contentRef = useRef<HTMLDivElement>(null)
        const sectionsRef = useRef<(HTMLDivElement | null)[]>([])
        const [expandedSections, setExpandedSections] = React.useState<Set<string>>(
          new Set(navigationSections.filter(s => s.defaultExpanded).map(s => s.title))
        )

        const [selectedWorkspace, setSelectedWorkspace] = React.useState(mockWorkspaces[0]);
        const isCollapsed = sidebarState === SIDEBAR_STATES.COLLAPSED
        const isHidden = sidebarState === SIDEBAR_STATES.HIDDEN
        const isPeek = sidebarState === SIDEBAR_STATES.PEEK
        const animationDuration = reducedMotion ? 0.1 : 0.3

        // Toggle section expansion
        const toggleSection = (sectionTitle: string) => {
          setExpandedSections(prev => {
            const newSet = new Set(prev)
            if (newSet.has(sectionTitle)) {
              newSet.delete(sectionTitle)
            } else {
              newSet.add(sectionTitle)
            }
            return newSet
          })
        }

        // Animate content visibility
        useEffect(() => {
          if (!contentRef.current) return

          const labels = contentRef.current.querySelectorAll('.nav-label')
          const badges = contentRef.current.querySelectorAll('.nav-badge')
          const sectionTitles = contentRef.current.querySelectorAll('.section-title')
          const chevrons = contentRef.current.querySelectorAll('.section-chevron')

          if (isCollapsed) {
            gsap.to([labels, badges, sectionTitles, chevrons], {
              opacity: 0,
              scale: 0.8,
              duration: animationDuration,
              ease: "power2.out"
            })
          } else {
            gsap.to([labels, badges, sectionTitles, chevrons], {
              opacity: 1,
              scale: 1,
              duration: animationDuration,
              delay: 0.1,
              ease: "power2.out"
            })
          }
        }, [isCollapsed, animationDuration])

        // Hover animations for nav items
        const handleItemHover = (element: HTMLElement, isHovering: boolean) => {
          if (!element) return

          gsap.to(element, {
            scale: isHovering ? 1.02 : 1,
            x: isHovering ? 4 : 0,
            duration: animationDuration,
            ease: "power2.out"
          })
        }

        if (isHidden) {
          return null
        }

        const renderNavItem = (item: NavItem, depth = 0) => {
          const pageName = item.label.toLowerCase();
          const isDashboard = pageName === 'dashboard';
          const isSettings = pageName === 'settings';
          const isToaster = pageName === 'toaster';

          const isDashboardActive = activePage === 'dashboard';
          const isSettingsActive = activePage === 'settings' || (bodyState === BODY_STATES.SIDE_PANE && sidePaneContent === 'settings');
          const isToasterActive = activePage === 'toaster' || (bodyState === BODY_STATES.SIDE_PANE && sidePaneContent === 'toaster');
          const isPageActive = (isDashboard && isDashboardActive) || (isSettings && isSettingsActive) || (isToaster && isToasterActive);

          const handleClick = () => {
            if (isDashboard) {
              setActivePage('dashboard');
            } else if (isSettings) {
              const isSettingsInSidePane = bodyState === BODY_STATES.SIDE_PANE && sidePaneContent === 'settings'
              // If we're on the settings page and it's not in the side pane, treat this as a "minimize" action.
              if (activePage === 'settings' && !isSettingsInSidePane) {
                openSidePane('settings');
                setActivePage('dashboard');
              } else {
                // In all other cases (on dashboard page, or settings already in pane), just toggle the settings side pane.
                openSidePane('settings');
              }
            } else if (isToaster) {
              const isToasterInSidePane = bodyState === BODY_STATES.SIDE_PANE && sidePaneContent === 'toaster'
              // If we're on the toaster page and it's not in the side pane, treat this as a "minimize" action.
              if (activePage === 'toaster' && !isToasterInSidePane) {
                openSidePane('toaster');
                setActivePage('dashboard');
              } else {
                // In all other cases (on dashboard page, or toaster already in pane), just toggle the toaster side pane.
                openSidePane('toaster');
              }
            }
            // Could add logic for other links here if routing was implemented
          };

          return (
            <div key={item.label} className={cn("space-y-1", depth > 0 && "ml-6")}>
            <button
              className={cn(
                "group relative flex items-center gap-3 rounded-lg cursor-pointer transition-all duration-200 w-full text-left",
                compactMode ? "px-2 py-1.5" : "px-4 py-2.5",
                "hover:bg-accent",
                (item.isActive || isPageActive) && "bg-primary text-primary-foreground hover:bg-primary/90",
                depth > 0 && "text-sm",
                isCollapsed && "justify-center"
              )}
              onMouseEnter={(e) => handleItemHover(e.currentTarget, true)}
              onMouseLeave={(e) => handleItemHover(e.currentTarget, false)}
              onClick={handleClick}
            >
              <div className="flex-shrink-0">
                {item.icon}
              </div>
              
              {!isCollapsed && (
                <>
                  <span className="nav-label flex-1 font-medium truncate">
                    {item.label}
                  </span>
                  
                  {item.badge && (
                    <span className="nav-badge bg-destructive text-destructive-foreground text-xs px-1.5 py-0.5 rounded-full min-w-[1.25rem] text-center">
                      {item.badge > 99 ? '99+' : item.badge}
                    </span>
                  )}

                  {item.children && (
                    <ChevronDown className="w-3 h-3 transition-transform" />
                  )}
                </>
              )}

              {/* Tooltip for collapsed state */}
              {isCollapsed && (
                <div className="absolute left-full ml-2 px-2 py-1 bg-popover text-popover-foreground text-sm rounded-md shadow-lg opacity-0 group-hover:opacity-100 transition-opacity pointer-events-none whitespace-nowrap z-50">
                  {item.label}
                  {item.badge && (
                    <span className="ml-2 bg-destructive text-destructive-foreground text-xs px-1.5 py-0.5 rounded-full">
                      {item.badge > 99 ? '99+' : item.badge}
                    </span>
                  )}
                </div>
              )}
            </button>

            {/* Children items */}
            {item.children && !isCollapsed && (
              <div className="space-y-1">
                {item.children.map(child => renderNavItem(child, depth + 1))}
              </div>
            )}
          </div>
          )
        }

        return (
          <div
            ref={ref}
            className={cn(
              "relative bg-card flex-shrink-0",
              "h-full overflow-hidden",
              isPeek && "shadow-xl z-40",
              compactMode && "text-sm"
            )}
            style={{ width: sidebarWidth }}
            onMouseEnter={onMouseEnter}
            onMouseLeave={onMouseLeave}
          >
            {/* Background blur effect for peek mode */}
            {isPeek && (
              <div className="absolute inset-0 bg-background/80 backdrop-blur-sm" />
            )}

            <div 
              ref={contentRef}
              className={cn(
                "relative z-10 h-full flex flex-col",
                compactMode ? "p-3" : "p-4"
              )}
            >
              {/* Workspace Switcher */}
              <div
                className={cn(
                  "flex items-center",
                  isCollapsed ? "justify-center" : "",
                  compactMode ? "h-10" : "h-16"
                )}
              >
                <Workspaces
                  workspaces={mockWorkspaces}
                  selectedWorkspaceId={selectedWorkspace.id}
                  onWorkspaceChange={setSelectedWorkspace}
                >
                  <WorkspaceTrigger collapsed={isCollapsed} />
                  <WorkspaceContent>
                    <button className="flex w-full items-center gap-2 rounded-sm px-2 py-2 text-left text-sm hover:bg-accent hover:text-accent-foreground focus:outline-none">
                      <Plus className="h-4 w-4" />
                      <span>Create Workspace</span>
                    </button>
                  </WorkspaceContent>
                </Workspaces>
              </div>

              {/* Navigation Sections */}
              <div className="flex-1 overflow-y-auto overflow-x-hidden space-y-6 pt-4">
                {navigationSections.map((section, sectionIndex) => {
                  const isExpanded = expandedSections.has(section.title)
                  
                  return (
                    <div 
                      key={section.title}
                      ref={el => sectionsRef.current[sectionIndex] = el}
                      className="space-y-1"
                    >
                      {!isCollapsed && (
                        <div 
                          className={cn(
                            "flex items-center justify-between px-3 text-xs font-medium text-muted-foreground uppercase tracking-wider",
                            section.collapsible && "cursor-pointer hover:text-foreground transition-colors"
                          )}
                          onClick={() => section.collapsible && toggleSection(section.title)}
                        >
                          <span className="section-title">{section.title}</span>
                          {section.collapsible && (
                            <ChevronDown 
                              className={cn(
                                "section-chevron w-3 h-3 transition-transform",
                                isExpanded ? "rotate-0" : "-rotate-90"
                              )} 
                            />
                          )}
                        </div>
                      )}
                      
                      {(!section.collapsible || isExpanded || isCollapsed) && (
                        <nav className="space-y-1">
                          {section.items.map(item => renderNavItem(item))}
                        </nav>
                      )}
                    </div>
                  )
                })}
              </div>

              {/* Bottom Navigation */}
              <div className={cn("pt-4 border-t border-border", compactMode && "pt-3")}>
                <nav className="space-y-1">
                  {bottomNavItems.map((item) => renderNavItem(item))}
                </nav>

                {/* User Profile */}
                {!isCollapsed && (
                  <div className={cn("mt-6 p-3 bg-accent/50 rounded-xl", compactMode && "mt-4 p-2")}>
                    <div className="flex items-center gap-3">
                      <div className={cn("bg-primary rounded-full flex items-center justify-center", compactMode ? "w-8 h-8" : "w-10 h-10")}>
                        <User className={cn("text-primary-foreground", compactMode ? "w-4 h-4" : "w-5 h-5")} />
                      </div>
                      <div className="flex-1 min-w-0">
                        <p className={cn("font-medium truncate nav-label", compactMode ? "text-xs" : "text-sm")}>John Doe</p>
                        <p className={cn("text-muted-foreground truncate nav-label", compactMode ? "text-[11px]" : "text-xs")}>john@example.com</p>
                      </div>
                    </div>
                  </div>
                )}
              </div>
            </div>
          </div>
        )
      }
    )

    EnhancedSidebar.displayName = "EnhancedSidebar"
  src/components/ui/popover.tsx: |-
    import * as React from "react"
    import * as PopoverPrimitive from "@radix-ui/react-popover"

    import { cn } from "@/lib/utils"

    const Popover = PopoverPrimitive.Root

    const PopoverTrigger = PopoverPrimitive.Trigger

    const PopoverContent = React.forwardRef<
      React.ElementRef<typeof PopoverPrimitive.Content>,
      React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
    >(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
      <PopoverPrimitive.Portal>
        <PopoverPrimitive.Content
          ref={ref}
          align={align}
          sideOffset={sideOffset}
          className={cn(
            "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
            className
          )}
          {...props}
        />
      </PopoverPrimitive.Portal>
    ))
    PopoverContent.displayName = PopoverPrimitive.Content.displayName

    export { Popover, PopoverTrigger, PopoverContent }
  src/components/WorkspaceSwitcher.tsx: "import * as React from 'react';\nimport { CheckIcon, ChevronsUpDownIcon } from 'lucide-react';\nimport { Avatar, AvatarImage, AvatarFallback } from '@/components/ui/avatar';\nimport { cn } from '@/lib/utils';\nimport {\n\tPopover,\n\tPopoverContent,\n\tPopoverTrigger,\n} from '@/components/ui/popover';\n\n// Generic workspace interface - can be extended\nexport interface Workspace {\n\tid: string;\n\tname: string;\n\t[key: string]: any; // Allow additional properties\n}\n\n// Context for workspace state management\ninterface WorkspaceContextValue<T extends Workspace> {\n\topen: boolean;\n\tsetOpen: (open: boolean) => void;\n\tselectedWorkspace: T | undefined;\n\tworkspaces: T[];\n\tonWorkspaceSelect: (workspace: T) => void;\n\tgetWorkspaceId: (workspace: T) => string;\n\tgetWorkspaceName: (workspace: T) => string;\n}\n\nconst WorkspaceContext = React.createContext<WorkspaceContextValue<any> | null>(\n\tnull,\n);\n\nfunction useWorkspaceContext<T extends Workspace>() {\n\tconst context = React.useContext(\n\t\tWorkspaceContext,\n\t) as WorkspaceContextValue<T> | null;\n\tif (!context) {\n\t\tthrow new Error(\n\t\t\t'Workspace components must be used within WorkspaceProvider',\n\t\t);\n\t}\n\treturn context;\n}\n\n// Main provider component\ninterface WorkspaceProviderProps<T extends Workspace> {\n\tchildren: React.ReactNode;\n\tworkspaces: T[];\n\tselectedWorkspaceId?: string;\n\tonWorkspaceChange?: (workspace: T) => void;\n\topen?: boolean;\n\tonOpenChange?: (open: boolean) => void;\n\tgetWorkspaceId?: (workspace: T) => string;\n\tgetWorkspaceName?: (workspace: T) => string;\n}\n\nfunction WorkspaceProvider<T extends Workspace>({\n\tchildren,\n\tworkspaces,\n\tselectedWorkspaceId,\n\tonWorkspaceChange,\n\topen: controlledOpen,\n\tonOpenChange,\n\tgetWorkspaceId = (workspace) => workspace.id,\n\tgetWorkspaceName = (workspace) => workspace.name,\n}: WorkspaceProviderProps<T>) {\n\tconst [internalOpen, setInternalOpen] = React.useState(false);\n\n\tconst open = controlledOpen ?? internalOpen;\n\tconst setOpen = onOpenChange ?? setInternalOpen;\n\n\tconst selectedWorkspace = React.useMemo(() => {\n\t\tif (!selectedWorkspaceId) return workspaces[0];\n\t\treturn (\n\t\t\tworkspaces.find((ws) => getWorkspaceId(ws) === selectedWorkspaceId) ||\n\t\t\tworkspaces[0]\n\t\t);\n\t}, [workspaces, selectedWorkspaceId, getWorkspaceId]);\n\n\tconst handleWorkspaceSelect = React.useCallback(\n\t\t(workspace: T) => {\n\t\t\tonWorkspaceChange?.(workspace);\n\t\t\tsetOpen(false);\n\t\t},\n\t\t[onWorkspaceChange, setOpen],\n\t);\n\n\tconst value: WorkspaceContextValue<T> = {\n\t\topen,\n\t\tsetOpen,\n\t\tselectedWorkspace,\n\t\tworkspaces,\n\t\tonWorkspaceSelect: handleWorkspaceSelect,\n\t\tgetWorkspaceId,\n\t\tgetWorkspaceName,\n\t};\n\n\treturn (\n\t\t<WorkspaceContext.Provider value={value}>\n\t\t\t<Popover open={open} onOpenChange={setOpen}>\n\t\t\t\t{children}\n\t\t\t</Popover>\n\t\t</WorkspaceContext.Provider>\n\t);\n}\n\n// Trigger component\ninterface WorkspaceTriggerProps extends React.ComponentProps<'button'> {\n\trenderTrigger?: (workspace: Workspace, isOpen: boolean) => React.ReactNode;\n    collapsed?: boolean;\n}\n\nfunction WorkspaceTrigger({\n\tclassName,\n\trenderTrigger,\n    collapsed = false,\n\t...props\n}: WorkspaceTriggerProps) {\n\tconst { open, selectedWorkspace, getWorkspaceName } = useWorkspaceContext();\n\n\tif (!selectedWorkspace) return null;\n\n\tif (renderTrigger) {\n\t\treturn (\n\t\t\t<PopoverTrigger asChild>\n\t\t\t\t<button className={className} {...props}>\n\t\t\t\t\t{renderTrigger(selectedWorkspace, open)}\n\t\t\t\t</button>\n\t\t\t</PopoverTrigger>\n\t\t);\n\t}\n\n\treturn (\n\t\t<PopoverTrigger asChild>\n\t\t\t<button\n\t\t\t\tdata-state={open ? 'open' : 'closed'}\n\t\t\t\tclassName={cn(\n\t\t\t\t\t'border-input bg-background ring-offset-background flex h-12 w-full max-w-72 items-center justify-between rounded-md border px-3 py-2 text-sm',\n\t\t\t\t\t'placeholder:text-muted-foreground focus:ring-ring focus:ring-2 focus:ring-offset-2 focus:outline-none',\n\t\t\t\t\t'disabled:cursor-not-allowed disabled:opacity-50',\n\t\t\t\t\t'hover:bg-accent hover:text-accent-foreground',\n                    collapsed && \"max-w-none justify-center p-0 w-12\",\n\t\t\t\t\tclassName,\n\t\t\t\t)}\n\t\t\t\t{...props}\n\t\t\t>\n\t\t\t\t<div className={cn(\"flex min-w-0 flex-1 items-center gap-2\", collapsed && \"justify-center\")}>\n\t\t\t\t\t<Avatar className=\"h-6 w-6\">\n\t\t\t\t\t\t<AvatarImage\n\t\t\t\t\t\t\tsrc={(selectedWorkspace as any).logo}\n\t\t\t\t\t\t\talt={getWorkspaceName(selectedWorkspace)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<AvatarFallback className=\"text-xs\">\n\t\t\t\t\t\t\t{getWorkspaceName(selectedWorkspace).charAt(0).toUpperCase()}\n\t\t\t\t\t\t</AvatarFallback>\n\t\t\t\t\t</Avatar>\n\t\t\t\t\t{!collapsed && <span className=\"truncate\">\n\t\t\t\t\t\t{getWorkspaceName(selectedWorkspace)}\n\t\t\t\t\t</span>}\n\t\t\t\t</div>\n\t\t\t\t{!collapsed && <ChevronsUpDownIcon className=\"h-4 w-4 shrink-0 opacity-50\" />}\n\t\t\t</button>\n\t\t</PopoverTrigger>\n\t);\n}\n\n// Content component\ninterface WorkspaceContentProps\n\textends React.ComponentProps<typeof PopoverContent> {\n\trenderWorkspace?: (\n\t\tworkspace: Workspace,\n\t\tisSelected: boolean,\n\t) => React.ReactNode;\n\ttitle?: string;\n\tsearchable?: boolean;\n\tonSearch?: (query: string) => void;\n}\n\nfunction WorkspaceContent({\n\tclassName,\n\tchildren,\n\trenderWorkspace,\n\ttitle = 'Workspaces',\n\tsearchable = false,\n\tonSearch,\n\t...props\n}: WorkspaceContentProps) {\n\tconst {\n\t\tworkspaces,\n\t\tselectedWorkspace,\n\t\tonWorkspaceSelect,\n\t\tgetWorkspaceId,\n\t\tgetWorkspaceName,\n\t} = useWorkspaceContext();\n\n\tconst [searchQuery, setSearchQuery] = React.useState('');\n\n\tconst filteredWorkspaces = React.useMemo(() => {\n\t\tif (!searchQuery) return workspaces;\n\t\treturn workspaces.filter((ws) =>\n\t\t\tgetWorkspaceName(ws).toLowerCase().includes(searchQuery.toLowerCase()),\n\t\t);\n\t}, [workspaces, searchQuery, getWorkspaceName]);\n\n\tReact.useEffect(() => {\n\t\tonSearch?.(searchQuery);\n\t}, [searchQuery, onSearch]);\n\n\tconst defaultRenderWorkspace = (\n\t\tworkspace: Workspace,\n\t\tisSelected: boolean,\n\t) => (\n\t\t<div className=\"flex min-w-0 flex-1 items-center gap-2\">\n\t\t\t<Avatar className=\"h-6 w-6\">\n\t\t\t\t<AvatarImage\n\t\t\t\t\tsrc={(workspace as any).logo}\n\t\t\t\t\talt={getWorkspaceName(workspace)}\n\t\t\t\t/>\n\t\t\t\t<AvatarFallback className=\"text-xs\">\n\t\t\t\t\t{getWorkspaceName(workspace).charAt(0).toUpperCase()}\n\t\t\t\t</AvatarFallback>\n\t\t\t</Avatar>\n\t\t\t<div className=\"flex min-w-0 flex-1 flex-col items-start\">\n\t\t\t\t<span className=\"truncate text-sm\">{getWorkspaceName(workspace)}</span>\n\t\t\t\t{(workspace as any).plan && (\n\t\t\t\t\t<span className=\"text-muted-foreground text-xs\">\n\t\t\t\t\t\t{(workspace as any).plan}\n\t\t\t\t\t</span>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t\t{isSelected && <CheckIcon className=\"ml-auto h-4 w-4\" />}\n\t\t</div>\n\t);\n\n\treturn (\n\t\t<PopoverContent\n\t\t\tclassName={cn('p-0', className)}\n\t\t\talign={props.align || 'start'}\n\t\t\t{...props}\n\t\t>\n\t\t\t<div className=\"border-b px-3 py-2\">\n\t\t\t\t<p className=\"text-muted-foreground text-sm font-medium\">{title}</p>\n\t\t\t</div>\n\n\t\t\t{searchable && (\n\t\t\t\t<div className=\"border-b px-3 py-2\">\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tplaceholder=\"Search workspaces...\"\n\t\t\t\t\t\tvalue={searchQuery}\n\t\t\t\t\t\tonChange={(e) => setSearchQuery(e.target.value)}\n\t\t\t\t\t\tclassName=\"placeholder:text-muted-foreground w-full border-none bg-transparent text-sm outline-none\"\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t)}\n\n\t\t\t<div className=\"max-h-[300px] overflow-y-auto\">\n\t\t\t\t{filteredWorkspaces.length === 0 ? (\n\t\t\t\t\t<div className=\"text-muted-foreground px-3 py-2 text-center text-sm\">\n\t\t\t\t\t\tNo workspaces found\n\t\t\t\t\t</div>\n\t\t\t\t) : (\n\t\t\t\t\t<div className=\"p-1\">\n\t\t\t\t\t\t{filteredWorkspaces.map((workspace) => {\n\t\t\t\t\t\t\tconst isSelected =\n\t\t\t\t\t\t\t\tselectedWorkspace &&\n\t\t\t\t\t\t\t\tgetWorkspaceId(selectedWorkspace) === getWorkspaceId(workspace);\n\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\tkey={getWorkspaceId(workspace)}\n\t\t\t\t\t\t\t\t\tonClick={() => onWorkspaceSelect(workspace)}\n\t\t\t\t\t\t\t\t\tclassName={cn(\n\t\t\t\t\t\t\t\t\t\t'flex w-full items-center gap-2 rounded-sm px-2 py-2 text-left text-sm',\n\t\t\t\t\t\t\t\t\t\t'hover:bg-accent hover:text-accent-foreground',\n\t\t\t\t\t\t\t\t\t\t'focus:outline-none',\n\t\t\t\t\t\t\t\t\t\tisSelected && 'bg-accent text-accent-foreground',\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{renderWorkspace\n\t\t\t\t\t\t\t\t\t\t? renderWorkspace(workspace, !!isSelected)\n\t\t\t\t\t\t\t\t\t\t: defaultRenderWorkspace(workspace, !!isSelected)}\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t})}\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t</div>\n\n\t\t\t{children && (\n\t\t\t\t<>\n\t\t\t\t\t<div className=\"border-t\" />\n\t\t\t\t\t<div className=\"p-1\">{children}</div>\n\t\t\t\t</>\n\t\t\t)}\n\t\t</PopoverContent>\n\t);\n}\n\nexport { WorkspaceProvider as Workspaces, WorkspaceTrigger, WorkspaceContent };"
approved: true
linesAdded: null
linesRemoved: null
linesDifference: null
gitCommittedAt: '2025-10-10T22:03:21.245Z'
status: committed
id: 64
