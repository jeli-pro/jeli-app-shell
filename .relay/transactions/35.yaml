uuid: d897b6a1-a67b-404f-9efd-a99f1966a014
projectId: amazing-app-shell
createdAt: '2025-10-10T12:57:34.563Z'
gitCommitMsg: >-
  feat(layout): enable settings page to be moved to side pane

  Extends the movable content feature to the Settings page, allowing for a more
  consistent and flexible layout system.

  - Introduced an `activePage` state in `appStore` to manage main content
  visibility. - Created a new `SettingsPage` component to wrap
  `SettingsContent`. - Refactored `MainContent` to act as a page router,
  displaying the active page or a placeholder. - Updated sidebar and top bar
  controls to manage the `activePage` state and interact with the new
  page-moving logic.
promptSummary: >-
  I want the settings content to also be a page that can be moved to the side
  pane, just like the dashboard.
reasoning:
  - >-
    This is an excellent suggestion for improving the consistency of the
    application's layout management. I will implement this feature so that the
    Settings content can also be treated as a main page, movable to the side
    pane just like the Dashboard.
  - 'Here''s my plan:'
  - >-
    1.  **Introduce an `activePage` state** to the `appStore` to track whether
    the user is viewing the 'dashboard' or 'settings' page in the main content
    area.
  - >-
    2.  **Create a new `SettingsPage.tsx` component** to serve as the main view
    for settings, complete with a header and a button to move it to the side
    pane.
  - >-
    3.  **Refactor `MainContent.tsx`** to act as a router, displaying the
    component for the `activePage` or a placeholder if that page has been moved
    to the side pane.
  - >-
    4.  **Update `EnhancedSidebar.tsx`** so the 'Dashboard' and 'Settings' links
    change the `activePage`.
  - >-
    5.  **Update `TopBar.tsx`** to make the settings icon context-aware: it will
    navigate to the settings page, or if already there, move it to the side
    pane.
  - '### 1. Update State Management'
  - I'll start by adding the `activePage` state to `appStore`.
  - '### 2. Create `SettingsPage.tsx`'
  - >-
    This new component will wrap `SettingsContent` and provide the page-level
    UI.
  - '### 3. Refactor `MainContent.tsx`'
  - >-
    I'll modify `MainContent` to render the correct page based on the new
    `activePage` state, and to show placeholders when a page is in the side
    pane.
  - '### 4. Update Sidebar Navigation'
  - I'll update `EnhancedSidebar.tsx` to control the `activePage` state.
  - '### 5. Update Top Bar Controls'
  - >-
    Finally, I'll make the Settings icon in the `TopBar` smarter, allowing it to
    navigate or move the page to the side pane depending on the context.
  - >-
    These changes make the shell's layout behavior much more powerful and
    consistent. Now, both the Dashboard and Settings can function as primary
    pages that can be conveniently moved to the side pane.
operations:
  - type: write
    path: src/store/appStore.ts
    content: |+
      --- src/store/appStore.ts
      +++ src/store/appStore.ts
      @@ -2,12 +2,15 @@
       import { persist } from 'zustand/middleware'
       import { SIDEBAR_STATES, BODY_STATES, type SidebarState, type BodyState } from '@/lib/utils'
       
      +export type ActivePage = 'dashboard' | 'settings';
      +
       interface AppState {
         // UI States
         sidebarState: SidebarState
         bodyState: BodyState
         isDarkMode: boolean
         sidePaneContent: 'details' | 'settings' | 'main'
      +  activePage: ActivePage
         sidebarWidth: number
         rightPaneWidth: number
         isResizing: boolean
      @@ -21,6 +24,7 @@
         setSidebarState: (state: SidebarState) => void
         setBodyState: (state: BodyState) => void
         toggleDarkMode: () => void
      +  setActivePage: (page: ActivePage) => void
         setSidebarWidth: (width: number) => void
         setRightPaneWidth: (width: number) => void
         setIsResizing: (resizing: boolean) => void
      @@ -40,6 +44,7 @@
         sidebarState: SIDEBAR_STATES.EXPANDED as SidebarState,
         bodyState: BODY_STATES.NORMAL as BodyState,
         sidePaneContent: 'details' as const,
      +  activePage: 'dashboard' as ActivePage,
         isDarkMode: false,
         sidebarWidth: 280,
         rightPaneWidth: typeof window !== 'undefined' ? Math.max(300, Math.round(window.innerWidth * 0.6)) : 400,
      @@ -57,6 +62,7 @@
             sidePaneContent: 'details',
             setSidebarState: (state) => set({ sidebarState: state }),
             setBodyState: (state) => set({ bodyState: state }),
      +      setActivePage: (page) => set({ activePage: page }),
             toggleDarkMode: () => {
               const newMode = !get().isDarkMode
               set({ isDarkMode: newMode })
      @@ -118,6 +124,7 @@
             partialize: (state) => ({
               sidebarState: state.sidebarState,
               bodyState: state.bodyState,
      +        activePage: state.activePage,
               sidePaneContent: state.sidePaneContent,
               isDarkMode: state.isDarkMode,
               sidebarWidth: state.sidebarWidth,

    patchStrategy: standard-diff
  - type: write
    path: src/components/SettingsPage.tsx
    content: |-
      import { PanelRight } from 'lucide-react'
      import { SettingsContent } from './SettingsContent'
      import { useAppStore } from '@/store/appStore'

      export function SettingsPage() {
        const { openSidePane, setActivePage } = useAppStore()

        const handleMoveToSidePane = () => {
          openSidePane('settings');
          setActivePage('dashboard');
        }

        return (
          <div className="h-full flex flex-col">
            {/* Header */}
            <div className="flex items-center justify-between">
              <div>
                <h1 className="text-3xl font-bold tracking-tight">Settings</h1>
                <p className="text-muted-foreground">
                  Customize your experience. Changes are saved automatically.
                </p>
              </div>
              
              <div className="flex items-center gap-2">
                  <button
                    onClick={handleMoveToSidePane}
                    className="h-10 w-10 flex items-center justify-center hover:bg-accent rounded-full transition-colors" title="Move to Side Pane">
                    <PanelRight className="w-5 h-5" />
                  </button>
              </div>
            </div>
            <div className="flex-1 overflow-y-auto pt-8">
              <SettingsContent />
            </div>
          </div>
        )
      }
    patchStrategy: replace
  - type: write
    path: src/components/MainContent.tsx
    content: |-
      import { forwardRef } from 'react'
      import { 
        X,
        LayoutDashboard,
        ChevronsLeftRight,
        Settings,
      } from 'lucide-react'
      import { cn } from '@/lib/utils'
      import { BODY_STATES, type BodyState } from '@/lib/utils'
      import { DashboardContent } from './DashboardContent'
      import { SettingsPage } from './SettingsPage'
      import { useAppStore } from '@/store/appStore'

      interface MainContentProps {
        bodyState: BodyState
        onToggleFullscreen: () => void
      }

      export const MainContent = forwardRef<HTMLDivElement, MainContentProps>(
        ({ bodyState, onToggleFullscreen }, ref) => {
          const { sidePaneContent, openSidePane, activePage, setActivePage } = useAppStore()

          const isDashboardInSidePane = sidePaneContent === 'main' && bodyState === BODY_STATES.SIDE_PANE
          const isSettingsInSidePane = sidePaneContent === 'settings' && bodyState === BODY_STATES.SIDE_PANE

          const renderContent = () => {
            if (activePage === 'dashboard') {
              if (isDashboardInSidePane) {
                return (
                  <div className="flex-1 flex flex-col items-center justify-center text-center">
                    <LayoutDashboard className="w-16 h-16 text-muted-foreground/50 mb-4" />
                    <h2 className="text-2xl font-bold">Dashboard is in Side Pane</h2>
                    <p className="text-muted-foreground mt-2 max-w-md">
                      You've moved the dashboard to the side pane. You can bring it back or continue to navigate.
                    </p>
                    <button
                      onClick={() => openSidePane('main')} // This will close it
                      className="mt-6 bg-primary text-primary-foreground px-4 py-2 rounded-full hover:bg-primary/90 transition-colors flex items-center gap-2 h-10"
                    >
                      <ChevronsLeftRight className="w-5 h-5" />
                      <span>Bring Dashboard Back</span>
                    </button>
                  </div>
                )
              }
              return <DashboardContent />
            }

            if (activePage === 'settings') {
              if (isSettingsInSidePane) {
                return (
                  <div className="flex-1 flex flex-col items-center justify-center text-center">
                    <Settings className="w-16 h-16 text-muted-foreground/50 mb-4" />
                    <h2 className="text-2xl font-bold">Settings are in Side Pane</h2>
                    <p className="text-muted-foreground mt-2 max-w-md">
                      You've moved settings to the side pane. You can bring them back to the main view.
                    </p>
                    <button
                      onClick={() => {
                        openSidePane('settings'); // This will close it
                        setActivePage('settings');
                      }}
                      className="mt-6 bg-primary text-primary-foreground px-4 py-2 rounded-full hover:bg-primary/90 transition-colors flex items-center gap-2 h-10"
                    >
                      <ChevronsLeftRight className="w-5 h-5" />
                      <span>Bring Settings Back</span>
                    </button>
                  </div>
                )
              }
              return <SettingsPage />
            }
            return null;
          }
          
          const isContentVisible = (activePage === 'dashboard' && !isDashboardInSidePane) || (activePage === 'settings' && !isSettingsInSidePane);

          return (
            <div
              ref={ref}
              className={cn(
              "flex flex-col h-full overflow-hidden transition-all duration-300 p-6 pt-[calc(80px+1.5rem)]",
              bodyState === BODY_STATES.FULLSCREEN && "absolute inset-0 z-40 bg-background !p-6"
              )}
            >
              {bodyState === BODY_STATES.FULLSCREEN && isContentVisible && (
                <button
                  onClick={onToggleFullscreen}
                  className="fixed top-6 right-6 z-[100] h-12 w-12 flex items-center justify-center rounded-full bg-card/50 backdrop-blur-sm hover:bg-card/75 transition-colors group"
                  title="Exit Fullscreen"
                >
                  <X className="w-6 h-6 group-hover:scale-110 group-hover:rotate-90 transition-all duration-300" />
                </button>
              )}

              <div className="h-full">
                {renderContent()}
              </div>
            </div>
          )
        }
      )
    patchStrategy: replace
  - type: write
    path: src/components/EnhancedSidebar.tsx
    content: >+
      --- src/components/EnhancedSidebar.tsx

      +++ src/components/EnhancedSidebar.tsx

      @@ -29,7 +29,7 @@
         {
           title: "Main",
           items: [
      -      { icon: <Home className="w-4 h-4" />, label: "Dashboard", href:
      "/", isActive: true },

      +      { icon: <Home className="w-4 h-4" />, label: "Dashboard", href: "/"
      },
             { icon: <Search className="w-4 h-4" />, label: "Search", href: "/search" },
             { icon: <Bell className="w-4 h-4" />, label: "Notifications", href: "/notifications", badge: 3 },
           ]
      @@ -84,7 +84,7 @@
       
       export const EnhancedSidebar = forwardRef<HTMLDivElement, SidebarProps>(
         ({ onMouseEnter, onMouseLeave }, ref) => {
      -    const { sidebarState, sidebarWidth, reducedMotion, compactMode } =
      useAppStore()

      +    const { sidebarState, sidebarWidth, reducedMotion, compactMode,
      activePage, setActivePage } = useAppStore()
           const contentRef = useRef<HTMLDivElement>(null)
           const sectionsRef = useRef<(HTMLDivElement | null)[]>([])
           const [expandedSections, setExpandedSections] = React.useState<Set<string>>(
      @@ -134,22 +134,35 @@
             return null
           }
       
      -    const renderNavItem = (item: NavItem, depth = 0) => (

      -      <div key={item.label} className={cn("space-y-1", depth > 0 &&
      "ml-6")}>

      +    const renderNavItem = (item: NavItem, depth = 0) => {

      +      const pageName = item.label.toLowerCase();

      +      const isPage = pageName === 'dashboard' || pageName === 'settings';

      +      const isPageActive = isPage && activePage === pageName;

      +

      +      const handleClick = () => {

      +        if (isPage) {

      +          setActivePage(pageName as 'dashboard' | 'settings');

      +        }

      +        // Could add logic for other links here if routing was
      implemented

      +      };

      +

      +      return (

      +        <div key={item.label} className={cn("space-y-1", depth > 0 &&
      "ml-6")}>
               <div
                 className={cn(
                   "group relative flex items-center gap-3 rounded-lg cursor-pointer transition-all duration-200",
                   compactMode ? "px-2 py-1.5" : "px-4 py-2.5",
                   "hover:bg-accent",
      -            item.isActive && "bg-primary text-primary-foreground
      hover:bg-primary/90",

      +            (item.isActive || isPageActive) && "bg-primary
      text-primary-foreground hover:bg-primary/90",
                   depth > 0 && "text-sm",
                   isCollapsed && "justify-center"
                 )}
                 onMouseEnter={(e) => handleItemHover(e.currentTarget, true)}
                 onMouseLeave={(e) => handleItemHover(e.currentTarget, false)}
      +          onClick={handleClick}
               >
                 <div className="flex-shrink-0">
                   {item.icon}
      @@ -190,7 +203,8 @@
                 </div>
               )}
             </div>
      -    )

      +      )

      +    }
       
           return (
             <div

    patchStrategy: standard-diff
  - type: write
    path: src/components/TopBar.tsx
    content: >+
      --- src/components/TopBar.tsx

      +++ src/components/TopBar.tsx

      @@ -19,10 +19,26 @@
         const { 
           bodyState, 
           isDarkMode, 
      -    openSidePane, 

      -    sidePaneContent 

      +    openSidePane,

      +    sidePaneContent,

      +    activePage,

      +    setActivePage,
         } = useAppStore()
       
      +  const handleSettingsClick = () => {

      +    const isSettingsInSidePane = bodyState === BODY_STATES.SIDE_PANE &&
      sidePaneContent === 'settings';

      +

      +    if (isSettingsInSidePane) {

      +      openSidePane('settings'); // This will close it

      +      setActivePage('settings'); // Ensure settings page is active

      +    } else if (activePage !== 'settings') {

      +      setActivePage('settings');

      +    } else { // activePage is 'settings' and it's not in side pane

      +      openSidePane('settings');

      +      setActivePage('dashboard');

      +    }

      +  }

      +
         return (
           <div className="h-20 bg-card/80 backdrop-blur-sm border-b border-border flex items-center justify-between px-6 z-50">
             {/* Left Section - Sidebar Controls & Breadcrumbs */}
      @@ -95,7 +111,7 @@
               </button>
       
               <button
      -          onClick={() => openSidePane('settings')}

      +          onClick={handleSettingsClick}
                 className="h-10 w-10 flex items-center justify-center rounded-full hover:bg-accent transition-colors group"
                 title="Settings"
               >

    patchStrategy: standard-diff
snapshot:
  src/components/SettingsPage.tsx: null
  src/store/appStore.ts: >-
    import { create } from 'zustand'

    import { persist } from 'zustand/middleware'

    import { SIDEBAR_STATES, BODY_STATES, type SidebarState, type BodyState }
    from '@/lib/utils'


    interface AppState {
      // UI States
      sidebarState: SidebarState
      bodyState: BodyState
      isDarkMode: boolean
      sidePaneContent: 'details' | 'settings' | 'main'
      sidebarWidth: number
      rightPaneWidth: number
      isResizing: boolean
      isResizingRightPane: boolean
      
      // User Preferences
      autoExpandSidebar: boolean
      reducedMotion: boolean
      compactMode: boolean
      
      // Actions
      setSidebarState: (state: SidebarState) => void
      setBodyState: (state: BodyState) => void
      toggleDarkMode: () => void
      setSidebarWidth: (width: number) => void
      setRightPaneWidth: (width: number) => void
      setIsResizing: (resizing: boolean) => void
      setIsResizingRightPane: (resizing: boolean) => void
      setAutoExpandSidebar: (auto: boolean) => void
      setReducedMotion: (reduced: boolean) => void
      setCompactMode: (compact: boolean) => void
      
      // Composite Actions
      toggleSidebar: () => void
      hideSidebar: () => void
      showSidebar: () => void
      peekSidebar: () => void
      toggleFullscreen: () => void
      openSidePane: (content: 'details' | 'settings' | 'main') => void
      closeSidePane: () => void
      resetToDefaults: () => void
    }


    const defaultState = {
      sidebarState: SIDEBAR_STATES.EXPANDED as SidebarState,
      bodyState: BODY_STATES.NORMAL as BodyState,
      sidePaneContent: 'details' as const,
      isDarkMode: false,
      sidebarWidth: 280,
      rightPaneWidth: typeof window !== 'undefined' ? Math.max(300, Math.round(window.innerWidth * 0.6)) : 400,
      isResizing: false,
      isResizingRightPane: false,
      autoExpandSidebar: true,
      reducedMotion: false,
      compactMode: false,
    }


    export const useAppStore = create<AppState>()(
      persist(
        (set, get) => ({
          ...defaultState,
          
          // Basic setters
          sidePaneContent: 'details',
          setSidebarState: (state) => set({ sidebarState: state }),
          setBodyState: (state) => set({ bodyState: state }),
          toggleDarkMode: () => {
            const newMode = !get().isDarkMode
            set({ isDarkMode: newMode })
            document.documentElement.classList.toggle('dark', newMode)
          },
          setSidebarWidth: (width) => set({ sidebarWidth: Math.max(200, Math.min(500, width)) }),
          setRightPaneWidth: (width) => set({ rightPaneWidth: Math.max(300, Math.min(window.innerWidth * 0.8, width)) }),
          setIsResizing: (resizing) => set({ isResizing: resizing }),
          setIsResizingRightPane: (resizing) => set({ isResizingRightPane: resizing }),
          setAutoExpandSidebar: (auto) => set({ autoExpandSidebar: auto }),
          setReducedMotion: (reduced) => set({ reducedMotion: reduced }),
          setCompactMode: (compact) => set({ compactMode: compact }),
          
          // Composite actions
          toggleSidebar: () => {
            const current = get().sidebarState
            if (current === SIDEBAR_STATES.HIDDEN) {
              set({ sidebarState: SIDEBAR_STATES.COLLAPSED })
            } else if (current === SIDEBAR_STATES.COLLAPSED) {
              set({ sidebarState: SIDEBAR_STATES.EXPANDED })
            } else if (current === SIDEBAR_STATES.EXPANDED) {
              set({ sidebarState: SIDEBAR_STATES.COLLAPSED })
            }
          },
          
          hideSidebar: () => set({ sidebarState: SIDEBAR_STATES.HIDDEN }),
          showSidebar: () => set({ sidebarState: SIDEBAR_STATES.EXPANDED }),
          peekSidebar: () => set({ sidebarState: SIDEBAR_STATES.PEEK }),
          
          toggleFullscreen: () => {
            const current = get().bodyState
            set({ 
              bodyState: current === BODY_STATES.FULLSCREEN ? BODY_STATES.NORMAL : BODY_STATES.FULLSCREEN 
            })
          },
          
          openSidePane: (content) => {
            const { bodyState, sidePaneContent } = get()
            if (bodyState === BODY_STATES.SIDE_PANE && sidePaneContent === content) {
              // If it's open with same content, close it.
              set({ bodyState: BODY_STATES.NORMAL });
            } else {
              // If closed, or different content, open with new content.
              set({ bodyState: BODY_STATES.SIDE_PANE, sidePaneContent: content });
            }
          },
          closeSidePane: () => {
            set({ bodyState: BODY_STATES.NORMAL })
          },
          
          resetToDefaults: () => set(defaultState),
        }),
        {
          name: 'app-preferences',
          partialize: (state) => ({
            sidebarState: state.sidebarState,
            bodyState: state.bodyState,
            sidePaneContent: state.sidePaneContent,
            isDarkMode: state.isDarkMode,
            sidebarWidth: state.sidebarWidth,
            rightPaneWidth: state.rightPaneWidth,
            autoExpandSidebar: state.autoExpandSidebar,
            reducedMotion: state.reducedMotion,
            compactMode: state.compactMode,
          }),
        }
      )
    )


    // Initialize dark mode on load

    if (typeof window !== 'undefined') {
      const stored = localStorage.getItem('app-preferences')
      if (stored) {
        const parsed = JSON.parse(stored)
        if (parsed.state?.isDarkMode) {
          document.documentElement.classList.add('dark')
        }
      }
    }
  src/components/MainContent.tsx: |-
    import { forwardRef } from 'react'
    import { 
      X,
      LayoutDashboard,
      ChevronsLeftRight,
    } from 'lucide-react'
    import { cn } from '@/lib/utils'
    import { BODY_STATES, type BodyState } from '@/lib/utils'
    import { DashboardContent } from './DashboardContent'
    import { useAppStore } from '@/store/appStore'

    interface MainContentProps {
      bodyState: BodyState
      onToggleFullscreen: () => void
    }

    export const MainContent = forwardRef<HTMLDivElement, MainContentProps>(
      ({ bodyState, onToggleFullscreen }, ref) => {
        const { sidePaneContent, openSidePane } = useAppStore()

        const isDashboardInSidePane = sidePaneContent === 'main' && bodyState === BODY_STATES.SIDE_PANE

        return (
          <div
            ref={ref}
            className={cn(
            "flex flex-col h-full overflow-hidden transition-all duration-300 p-6 pt-[calc(80px+1.5rem)]",
            bodyState === BODY_STATES.FULLSCREEN && "absolute inset-0 z-40 bg-background !p-6"
            )}
          >
            {bodyState === BODY_STATES.FULLSCREEN && !isDashboardInSidePane && (
              <button
                onClick={onToggleFullscreen}
                className="fixed top-6 right-6 z-[100] h-12 w-12 flex items-center justify-center rounded-full bg-card/50 backdrop-blur-sm hover:bg-card/75 transition-colors group"
                title="Exit Fullscreen"
              >
                <X className="w-6 h-6 group-hover:scale-110 group-hover:rotate-90 transition-all duration-300" />
              </button>
            )}

            {isDashboardInSidePane ? (
              <div className="flex-1 flex flex-col items-center justify-center text-center">
                <LayoutDashboard className="w-16 h-16 text-muted-foreground/50 mb-4" />
                <h2 className="text-2xl font-bold">Dashboard is in Side Pane</h2>
                <p className="text-muted-foreground mt-2 max-w-md">
                  You've moved the main dashboard to the side pane for a focused view. You can continue to navigate or bring it back to the main view.
                </p>
                <button
                  onClick={() => openSidePane('main')} // This will close it
                  className="mt-6 bg-primary text-primary-foreground px-4 py-2 rounded-full hover:bg-primary/90 transition-colors flex items-center gap-2 h-10"
                >
                  <ChevronsLeftRight className="w-5 h-5" />
                  <span>Bring Dashboard Back</span>
                </button>
              </div>
            ) : (
              <div className="dashboard-content-wrapper h-full">
                <DashboardContent />
              </div>
            )}
          </div>
        )
      }
    )
  src/components/EnhancedSidebar.tsx: |-
    import React, { forwardRef, useRef, useEffect } from 'react'
    import { gsap } from 'gsap'
    import { 
      Home, 
      Search, 
      Bell, 
      User, 
      Settings, 
      HelpCircle, 
      FileText, 
      Calendar, 
      Mail,
      FolderOpen,
      Bookmark,
      Download,
      Star,
      Trash2,
      ChevronDown,
      Layout
    } from 'lucide-react'
    import { cn } from '@/lib/utils'
    import { useAppStore } from '@/store/appStore'
    import { SIDEBAR_STATES } from '@/lib/utils'

    interface NavItem {
      icon: React.ReactNode
      label: string
      href: string
      badge?: number
      isActive?: boolean
      children?: NavItem[]
    }

    interface NavSection {
      title: string
      items: NavItem[]
      collapsible?: boolean
      defaultExpanded?: boolean
    }

    const navigationSections: NavSection[] = [
      {
        title: "Main",
        items: [
          { icon: <Home className="w-4 h-4" />, label: "Dashboard", href: "/", isActive: true },
          { icon: <Search className="w-4 h-4" />, label: "Search", href: "/search" },
          { icon: <Bell className="w-4 h-4" />, label: "Notifications", href: "/notifications", badge: 3 },
        ]
      },
      {
        title: "Workspace",
        collapsible: true,
        defaultExpanded: true,
        items: [
          { 
            icon: <FileText className="w-4 h-4" />, 
            label: "Documents", 
            href: "/documents",
            children: [
              { icon: <FileText className="w-3 h-3" />, label: "Recent", href: "/documents/recent" },
              { icon: <Star className="w-3 h-3" />, label: "Starred", href: "/documents/starred" },
              { icon: <Trash2 className="w-3 h-3" />, label: "Trash", href: "/documents/trash" },
            ]
          },
          { icon: <FolderOpen className="w-4 h-4" />, label: "Projects", href: "/projects" },
          { icon: <Calendar className="w-4 h-4" />, label: "Calendar", href: "/calendar" },
          { icon: <Mail className="w-4 h-4" />, label: "Messages", href: "/messages", badge: 12 },
        ]
      },
      {
        title: "Personal",
        collapsible: true,
        defaultExpanded: false,
        items: [
          { icon: <Bookmark className="w-4 h-4" />, label: "Bookmarks", href: "/bookmarks" },
          { icon: <Star className="w-4 h-4" />, label: "Favorites", href: "/favorites" },
          { icon: <Download className="w-4 h-4" />, label: "Downloads", href: "/downloads" },
        ]
      }
    ]

    const bottomNavItems: NavItem[] = [
      { icon: <User className="w-4 h-4" />, label: "Profile", href: "/profile" },
      { icon: <Settings className="w-4 h-4" />, label: "Settings", href: "/settings" },
      { icon: <HelpCircle className="w-4 h-4" />, label: "Help", href: "/help" },
    ]

    interface SidebarProps {
      onMouseEnter?: () => void
      onMouseLeave?: () => void
    }

    export const EnhancedSidebar = forwardRef<HTMLDivElement, SidebarProps>(
      ({ onMouseEnter, onMouseLeave }, ref) => {
        const { sidebarState, sidebarWidth, reducedMotion, compactMode } = useAppStore()
        const contentRef = useRef<HTMLDivElement>(null)
        const sectionsRef = useRef<(HTMLDivElement | null)[]>([])
        const [expandedSections, setExpandedSections] = React.useState<Set<string>>(
          new Set(navigationSections.filter(s => s.defaultExpanded).map(s => s.title))
        )

        const isCollapsed = sidebarState === SIDEBAR_STATES.COLLAPSED
        const isHidden = sidebarState === SIDEBAR_STATES.HIDDEN
        const isPeek = sidebarState === SIDEBAR_STATES.PEEK
        const animationDuration = reducedMotion ? 0.1 : 0.3

        // Toggle section expansion
        const toggleSection = (sectionTitle: string) => {
          setExpandedSections(prev => {
            const newSet = new Set(prev)
            if (newSet.has(sectionTitle)) {
              newSet.delete(sectionTitle)
            } else {
              newSet.add(sectionTitle)
            }
            return newSet
          })
        }

        // Animate content visibility
        useEffect(() => {
          if (!contentRef.current) return

          const labels = contentRef.current.querySelectorAll('.nav-label')
          const badges = contentRef.current.querySelectorAll('.nav-badge')
          const sectionTitles = contentRef.current.querySelectorAll('.section-title')
          const chevrons = contentRef.current.querySelectorAll('.section-chevron')

          if (isCollapsed) {
            gsap.to([labels, badges, sectionTitles, chevrons], {
              opacity: 0,
              scale: 0.8,
              duration: animationDuration,
              ease: "power2.out"
            })
          } else {
            gsap.to([labels, badges, sectionTitles, chevrons], {
              opacity: 1,
              scale: 1,
              duration: animationDuration,
              delay: 0.1,
              ease: "power2.out"
            })
          }
        }, [isCollapsed, animationDuration])

        // Hover animations for nav items
        const handleItemHover = (element: HTMLElement, isHovering: boolean) => {
          if (!element) return

          gsap.to(element, {
            scale: isHovering ? 1.02 : 1,
            x: isHovering ? 4 : 0,
            duration: animationDuration,
            ease: "power2.out"
          })
        }

        if (isHidden) {
          return null
        }

        const renderNavItem = (item: NavItem, depth = 0) => (
          <div key={item.label} className={cn("space-y-1", depth > 0 && "ml-6")}>
            <div
              className={cn(
                "group relative flex items-center gap-3 rounded-lg cursor-pointer transition-all duration-200",
                compactMode ? "px-2 py-1.5" : "px-4 py-2.5",
                "hover:bg-accent",
                item.isActive && "bg-primary text-primary-foreground hover:bg-primary/90",
                depth > 0 && "text-sm",
                isCollapsed && "justify-center"
              )}
              onMouseEnter={(e) => handleItemHover(e.currentTarget, true)}
              onMouseLeave={(e) => handleItemHover(e.currentTarget, false)}
            >
              <div className="flex-shrink-0">
                {item.icon}
              </div>
              
              {!isCollapsed && (
                <>
                  <span className="nav-label flex-1 font-medium truncate">
                    {item.label}
                  </span>
                  
                  {item.badge && (
                    <span className="nav-badge bg-destructive text-destructive-foreground text-xs px-1.5 py-0.5 rounded-full min-w-[1.25rem] text-center">
                      {item.badge > 99 ? '99+' : item.badge}
                    </span>
                  )}

                  {item.children && (
                    <ChevronDown className="w-3 h-3 transition-transform" />
                  )}
                </>
              )}

              {/* Tooltip for collapsed state */}
              {isCollapsed && (
                <div className="absolute left-full ml-2 px-2 py-1 bg-popover text-popover-foreground text-sm rounded-md shadow-lg opacity-0 group-hover:opacity-100 transition-opacity pointer-events-none whitespace-nowrap z-50">
                  {item.label}
                  {item.badge && (
                    <span className="ml-2 bg-destructive text-destructive-foreground text-xs px-1.5 py-0.5 rounded-full">
                      {item.badge > 99 ? '99+' : item.badge}
                    </span>
                  )}
                </div>
              )}
            </div>

            {/* Children items */}
            {item.children && !isCollapsed && (
              <div className="space-y-1">
                {item.children.map(child => renderNavItem(child, depth + 1))}
              </div>
            )}
          </div>
        )

        return (
          <div
            ref={ref}
            className={cn(
              "relative bg-card flex-shrink-0",
              "h-full overflow-hidden",
              isPeek && "shadow-xl z-40",
              compactMode && "text-sm"
            )}
            style={{ width: sidebarWidth }}
            onMouseEnter={onMouseEnter}
            onMouseLeave={onMouseLeave}
          >
            {/* Background blur effect for peek mode */}
            {isPeek && (
              <div className="absolute inset-0 bg-background/80 backdrop-blur-sm" />
            )}

            <div 
              ref={contentRef}
              className={cn(
                "relative z-10 h-full flex flex-col",
                compactMode ? "p-3" : "p-4"
              )}
            >
              {/* Logo */}
              <div
                className={cn(
                  "flex items-center gap-3",
                  isCollapsed ? "justify-center" : "",
                  compactMode ? "h-10" : "h-16"
                )}
              >
                <div className="w-10 h-10 bg-gradient-to-br from-primary to-primary/60 rounded-full flex items-center justify-center flex-shrink-0">
                  <Layout className="w-5 h-5 text-primary-foreground" />
                </div>
                {!isCollapsed && (
                  <span className="font-semibold text-xl text-foreground nav-label truncate">
                    AppShell
                  </span>
                )}
              </div>

              {/* Navigation Sections */}
              <div className="flex-1 overflow-y-auto overflow-x-hidden space-y-6 pt-4">
                {navigationSections.map((section, sectionIndex) => {
                  const isExpanded = expandedSections.has(section.title)
                  
                  return (
                    <div 
                      key={section.title}
                      ref={el => sectionsRef.current[sectionIndex] = el}
                      className="space-y-1"
                    >
                      {!isCollapsed && (
                        <div 
                          className={cn(
                            "flex items-center justify-between px-3 text-xs font-medium text-muted-foreground uppercase tracking-wider",
                            section.collapsible && "cursor-pointer hover:text-foreground transition-colors"
                          )}
                          onClick={() => section.collapsible && toggleSection(section.title)}
                        >
                          <span className="section-title">{section.title}</span>
                          {section.collapsible && (
                            <ChevronDown 
                              className={cn(
                                "section-chevron w-3 h-3 transition-transform",
                                isExpanded ? "rotate-0" : "-rotate-90"
                              )} 
                            />
                          )}
                        </div>
                      )}
                      
                      {(!section.collapsible || isExpanded || isCollapsed) && (
                        <nav className="space-y-1">
                          {section.items.map(item => renderNavItem(item))}
                        </nav>
                      )}
                    </div>
                  )
                })}
              </div>

              {/* Bottom Navigation */}
              <div className={cn("pt-4 border-t border-border", compactMode && "pt-3")}>
                <nav className="space-y-1">
                  {bottomNavItems.map((item) => renderNavItem(item))}
                </nav>

                {/* User Profile */}
                {!isCollapsed && (
                  <div className={cn("mt-6 p-3 bg-accent/50 rounded-xl", compactMode && "mt-4 p-2")}>
                    <div className="flex items-center gap-3">
                      <div className={cn("bg-primary rounded-full flex items-center justify-center", compactMode ? "w-8 h-8" : "w-10 h-10")}>
                        <User className={cn("text-primary-foreground", compactMode ? "w-4 h-4" : "w-5 h-5")} />
                      </div>
                      <div className="flex-1 min-w-0">
                        <p className={cn("font-medium truncate nav-label", compactMode ? "text-xs" : "text-sm")}>John Doe</p>
                        <p className={cn("text-muted-foreground truncate nav-label", compactMode ? "text-[11px]" : "text-xs")}>john@example.com</p>
                      </div>
                    </div>
                  </div>
                )}
              </div>
            </div>
          </div>
        )
      }
    )

    EnhancedSidebar.displayName = "EnhancedSidebar"
  src/components/TopBar.tsx: |-
    import { 
      Menu, 
      Maximize, 
      Minimize, 
      Moon, 
      Sun,
      Settings,
      Command,
      Zap,
      ChevronRight
    } from 'lucide-react'
    import { cn } from '@/lib/utils'
    import { BODY_STATES } from '@/lib/utils'
    import { useAppStore } from '@/store/appStore'

    interface TopBarProps {
      onToggleSidebar: () => void
      onToggleFullscreen: () => void
      onToggleDarkMode: () => void
    }

    export function TopBar({
      onToggleSidebar,
      onToggleFullscreen,
      onToggleDarkMode
    }: TopBarProps) {
      const { 
        bodyState, 
        isDarkMode, 
        openSidePane, 
        sidePaneContent 
      } = useAppStore()

      return (
        <div className="h-20 bg-card/80 backdrop-blur-sm border-b border-border flex items-center justify-between px-6 z-50">
          {/* Left Section - Sidebar Controls & Breadcrumbs */}
          <div className="flex items-center gap-4">
            {/* Sidebar Controls */}
            <button
              onClick={onToggleSidebar}
              className={cn(
                "h-10 w-10 flex items-center justify-center rounded-full hover:bg-accent transition-colors"
              )}
              title="Toggle Sidebar"
            >
              <Menu className="w-5 h-5" />
            </button>

            {/* Breadcrumbs */}
            <div className="hidden md:flex items-center gap-2 text-sm">
              <a href="#" className="text-muted-foreground hover:text-foreground transition-colors">Home</a>
              <ChevronRight className="w-4 h-4 text-muted-foreground" />
              <span className="font-medium text-foreground">Dashboard</span>
            </div>
          </div>

          {/* Right Section - View Controls */}
          <div className="flex items-center gap-3">
            {/* Quick Actions */}
            <button
              className="h-10 w-10 flex items-center justify-center rounded-full hover:bg-accent transition-colors group"
              title="Command Palette (Ctrl+K)"
            >
              <Command className="w-5 h-5 group-hover:scale-110 transition-transform" />
            </button>

            <button
              className="h-10 w-10 flex items-center justify-center rounded-full hover:bg-accent transition-colors group"
              title="Quick Actions"
            >
              <Zap className="w-5 h-5 group-hover:scale-110 transition-transform" />
            </button>

            <div className="w-px h-6 bg-border mx-2" />

            {/* Body State Controls */}
            <button
              onClick={() => openSidePane('details')}
              className={cn(
                "h-10 w-10 flex items-center justify-center rounded-full hover:bg-accent transition-colors group",
                bodyState === BODY_STATES.SIDE_PANE && sidePaneContent === 'details' && "bg-accent"
              )}
              title="Toggle Side Pane"
            >
              <div className="w-5 h-5 flex group-hover:scale-110 transition-transform">
                <div className="w-1/2 h-full bg-current opacity-60 rounded-l-sm" />
                <div className="w-1/2 h-full bg-current rounded-r-sm" />
              </div>
            </button>

            <button
              onClick={onToggleFullscreen}
              className={cn(
                "h-10 w-10 flex items-center justify-center rounded-full hover:bg-accent transition-colors group",
                bodyState === BODY_STATES.FULLSCREEN && "bg-accent"
              )}
              title="Toggle Fullscreen"
            >
              {bodyState === BODY_STATES.FULLSCREEN ? (
                <Minimize className="w-5 h-5 group-hover:scale-110 transition-transform" />
              ) : (
                <Maximize className="w-5 h-5 group-hover:scale-110 transition-transform" />
              )}
            </button>

            <div className="w-px h-6 bg-border mx-2" />

            {/* Theme and Settings */}
            <button
              onClick={onToggleDarkMode}
              className="h-10 w-10 flex items-center justify-center rounded-full hover:bg-accent transition-colors group"
              title="Toggle Dark Mode"
            >
              {isDarkMode ? (
                <Sun className="w-5 h-5 group-hover:scale-110 transition-transform" />
              ) : (
                <Moon className="w-5 h-5 group-hover:scale-110 transition-transform" />
              )}
            </button>

            <button
              onClick={() => openSidePane('settings')}
              className="h-10 w-10 flex items-center justify-center rounded-full hover:bg-accent transition-colors group"
              title="Settings"
            >
              <Settings className="w-5 h-5 group-hover:rotate-90 transition-transform duration-300" />
            </button>
          </div>
        </div>
      )
    }
approved: true
linesAdded: null
linesRemoved: null
linesDifference: null
gitCommittedAt: null
status: committed
id: 35
