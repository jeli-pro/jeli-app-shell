uuid: b08e8b0a-3a53-4328-912a-4318357ef13d
projectId: jeli-app-shell
createdAt: '2025-10-13T08:10:26.644Z'
gitCommitMsg: >-
  fix(routing): ensure consistent URL state for side panes

  Corrected an issue where switching between different side panes (e.g., from
  Settings to Notifications) would fail and result in a broken UI state.

  The `EnhancedSidebar` menu item was not clearing stale `view=split` parameters
  from the URL when opening a side pane. This created an invalid URL state that
  confused the rendering logic. The fix ensures that any action opening a side
  pane also cleans up conflicting URL parameters, making the navigation behavior
  consistent and reliable across all components.
promptSummary: >-
  The user reports that after opening the Settings side pane, they cannot switch
  to the Notifications side pane. The UI just shows a dark overlay. This points
  to an inconsistent URL state management issue.
reasoning:
  - >-
    You've uncovered a subtle but critical bug in the routing logic. The problem
    was an inconsistency in how different components created the URL for the
    side pane.
  - >-
    -   The `TopBar` (for Settings) and `CommandPalette` were correctly clearing
    out old "split view" parameters from the URL when opening a side pane.
  - >-
    -   However, the `EnhancedSidebar` (for Notifications) was **not** clearing
    them.
  - >-
    This meant if you had ever been in a split view, clicking the Notifications
    icon could create an invalid URL like
    `?view=split&right=some-page&sidePane=notifications`. The app would see
    `sidePane` and try to render an overlay, but the lingering `view=split`
    parameter would cause confusion and break the rendering, resulting in the
    dark overlay with no content.
  - >-
    The fix is to make the `EnhancedSidebar` behave like the other components
    and always clean up the URL when opening a side pane.
  - 'Here is the patch for `src/components/layout/EnhancedSidebar.tsx`:'
  - >-
    By adding these two lines, we ensure that switching to an overlay pane from
    anywhere in the app will always produce a clean and valid URL, fixing the
    bug and making the navigation between different side panes robust.
  - '---'
operations:
  - type: write
    path: src/components/layout/EnhancedSidebar.tsx
    content: >+
      --- src/components/layout/EnhancedSidebar.tsx

      +++ src/components/layout/EnhancedSidebar.tsx

      @@ -212,6 +212,9 @@
                 } else {
                   const newParams = new URLSearchParams(searchParams);
                   newParams.set('sidePane', paneContentForPage);
      +            // When setting a side pane, always clear split view params
      to avoid invalid URL state

      +            newParams.delete('view');

      +            newParams.delete('right');
                   setSearchParams(newParams, { replace: true });
                 }
               }

    patchStrategy: standard-diff
snapshot:
  src/components/layout/EnhancedSidebar.tsx: >-
    import React from 'react';

    import {
      Home,
      Settings,
      HelpCircle,
      Component,
      Rocket,
      MoreHorizontal,
      Bell,
      Search,
      FileText,
      Star,
      Trash2,
      FolderOpen,
      Mail,
      Bookmark,
      Download,
      User,
      Plus,
      Database
    } from 'lucide-react';

    import { useLocation, useNavigate, useSearchParams } from
    'react-router-dom';

    import { type ActivePage } from '@/store/appStore';

    import { useAppShell } from '@/context/AppShellContext';

    import {
      Workspaces,
      WorkspaceTrigger,
      WorkspaceContent,
      type Workspace,
    } from './WorkspaceSwitcher';

    import {
      DropdownMenu,
      DropdownMenuContent,
      DropdownMenuItem,
      DropdownMenuTrigger,
    } from '@/components/ui/dropdown-menu';

    import {
      Sidebar,
      SidebarContent,
      SidebarHeader,
      SidebarTitle,
      SidebarBody,
      SidebarFooter,
      SidebarSection,
      SidebarMenuItem,
      SidebarMenuButton,
      SidebarMenuAction,
      SidebarLabel,
      SidebarBadge,
      SidebarTooltip,
      SidebarIcon,
      useSidebar,
    } from './Sidebar';

    import { ViewModeSwitcher } from './ViewModeSwitcher';

    import { cn } from '@/lib/utils';


    interface MyWorkspace extends Workspace {
      logo: string;
      plan: string;
    }


    const mockWorkspaces: MyWorkspace[] = [
      { id: 'ws1', name: 'Acme Inc.', logo: 'https://avatar.vercel.sh/acme.png', plan: 'Pro' },
      { id: 'ws2', name: 'Monsters Inc.', logo: 'https://avatar.vercel.sh/monsters.png', plan: 'Free' },
      { id: 'ws3', name: 'Stark Industries', logo: 'https://avatar.vercel.sh/stark.png', plan: 'Enterprise' },
    ];


    const SidebarWorkspaceTrigger = () => {
      const { isCollapsed, compactMode } = useSidebar();

      return (
        <WorkspaceTrigger
          collapsed={isCollapsed}
          className={cn(
            'rounded-xl transition-colors hover:bg-accent/50 w-full',
            isCollapsed ? 'p-2' : 'p-3 bg-accent/50',
          )}
          avatarClassName={cn(compactMode ? 'h-8 w-8' : 'h-10 w-10')}
        />
      );
    };


    interface SidebarProps {
      onMouseEnter?: () => void;
      onMouseLeave?: () => void;
    }


    export const EnhancedSidebar = React.forwardRef<HTMLDivElement,
    SidebarProps>(
      ({ onMouseEnter, onMouseLeave }, ref) => {
        const { sidebarWidth, compactMode, appName, appLogo } = useAppShell();
        const [selectedWorkspace, setSelectedWorkspace] = React.useState(mockWorkspaces[0]);

        return (
          <Sidebar
            ref={ref}
            style={{ width: sidebarWidth }}
            onMouseEnter={onMouseEnter}
            onMouseLeave={onMouseLeave}
          >
            <SidebarContent>
              <SidebarHeader>
                {appLogo || (
                  <div className="p-2 bg-primary/20 rounded-lg">
                    <Rocket className="w-5 h-5 text-primary" />
                  </div>
                )}
                <SidebarTitle>{appName}</SidebarTitle>
              </SidebarHeader>

              <SidebarBody>
                <SidebarSection title="Main">
                  <AppMenuItem icon={Home} label="Dashboard" page="dashboard" />
                  <AppMenuItem icon={Database} label="Data Demo" page="data-demo" />
                  <AppMenuItem icon={Search} label="Search" />
                  <AppMenuItem icon={Bell} label="Notifications" badge={3} page="notifications" opensInSidePane />
                </SidebarSection>
                
                <SidebarSection title="Workspace" collapsible defaultExpanded>
                  <AppMenuItem icon={FileText} label="Documents" hasActions>
                    <AppMenuItem icon={FileText} label="Recent" isSubItem />
                    <AppMenuItem icon={Star} label="Starred" isSubItem />
                    <AppMenuItem icon={Trash2} label="Trash" isSubItem />
                  </AppMenuItem>
                  <AppMenuItem icon={FolderOpen} label="Projects" hasActions />
                  <AppMenuItem icon={Mail} label="Messages" badge={12} />
                </SidebarSection>
                
                <SidebarSection title="Personal" collapsible>
                  <AppMenuItem icon={Bookmark} label="Bookmarks" />
                  <AppMenuItem icon={Star} label="Favorites" />
                  <AppMenuItem icon={Download} label="Downloads" />
                </SidebarSection>

                <SidebarSection title="Components" collapsible defaultExpanded>
                  <AppMenuItem icon={Component} label="Toaster" page="toaster" />
                </SidebarSection>
              </SidebarBody>

              <SidebarFooter>
                <SidebarSection>
                  <AppMenuItem icon={User} label="Profile" />
                  <AppMenuItem icon={Settings} label="Settings" page="settings" />
                  <AppMenuItem icon={HelpCircle} label="Help" />
                </SidebarSection>

                <div className={cn(compactMode ? 'mt-4' : 'mt-6')}>
                  <Workspaces
                    workspaces={mockWorkspaces}
                    selectedWorkspaceId={selectedWorkspace.id}
                    onWorkspaceChange={setSelectedWorkspace}
                  >
                    <SidebarWorkspaceTrigger />
                    <WorkspaceContent>
                      <button className="flex w-full items-center gap-2 rounded-sm px-2 py-2 text-left text-sm hover:bg-accent hover:text-accent-foreground focus:outline-none">
                        <Plus className="h-4 w-4" />
                        <span>Create Workspace</span>
                      </button>
                    </WorkspaceContent>
                  </Workspaces>
                </div>
              </SidebarFooter>
            </SidebarContent>
          </Sidebar>
        );
      },
    );

    EnhancedSidebar.displayName = 'EnhancedSidebar';



    // Example of a reusable menu item component built with the new Sidebar
    primitives

    interface AppMenuItemProps {
      icon: React.ElementType;
      label: string;
      badge?: number;
      hasActions?: boolean;
      children?: React.ReactNode;
      isSubItem?: boolean;
      page?: ActivePage;
      opensInSidePane?: boolean;
    }


    const AppMenuItem: React.FC<AppMenuItemProps> = ({ icon: Icon, label, badge,
    hasActions, children, isSubItem = false, page, opensInSidePane = false }) =>
    {
      const { compactMode, dispatch } = useAppShell()
      const { isCollapsed } = useSidebar();
      const navigate = useNavigate();
      const location = useLocation();
      const [searchParams, setSearchParams] = useSearchParams();

      const pageToPaneMap: { [key in ActivePage]?: 'main' | 'settings' | 'toaster' | 'notifications' | 'data-demo' } = {
        dashboard: 'main',
        settings: 'settings',
        toaster: 'toaster',
        notifications: 'notifications',
        'data-demo': 'main',
      };
      const paneContentForPage = page ? pageToPaneMap[page] : undefined;

      const isActive = (
        (!opensInSidePane && page && location.pathname === `/${page}`)
      ) || (
        opensInSidePane && paneContentForPage && searchParams.get('sidePane') === paneContentForPage
      );

      const handleClick = () => {
        if (page) {
          if (opensInSidePane) {
            const isCurrentlyInSidePane = searchParams.get('sidePane') === paneContentForPage;

            if (isCurrentlyInSidePane) {
              const newParams = new URLSearchParams(searchParams);
              newParams.delete('sidePane');
              setSearchParams(newParams, { replace: true });
            } else if (paneContentForPage) {
              // If opening a side pane for a page that is the current main view,
              // navigate main view to dashboard to avoid content duplication.
              if (location.pathname === `/${page}`) {
                navigate({ pathname: '/dashboard', search: `?sidePane=${paneContentForPage}` }, { replace: true });
              } else {
                const newParams = new URLSearchParams(searchParams);
                newParams.set('sidePane', paneContentForPage);
                setSearchParams(newParams, { replace: true });
              }
            }
          } else {
            navigate(`/${page}`);
          }
        }
      };

      return (
        <div className={isSubItem ? (compactMode ? 'ml-4' : 'ml-6') : ''}>
          <SidebarMenuItem>
            <SidebarMenuButton
              onClick={handleClick}
              isActive={isActive}
              draggable={!!page}
              onDragStart={(_e) => {
                if (page) {
                  // set dragged page in AppShell context
                  dispatch({ type: 'SET_DRAGGED_PAGE', payload: page });
                }
              }}
              onDragEnd={() => {
                dispatch({ type: 'SET_DRAGGED_PAGE', payload: null });
                dispatch({ type: 'SET_DRAG_HOVER_TARGET', payload: null });
              }}
            >
              <SidebarIcon>
                <Icon className={isSubItem ? "w-3 h-3" : "w-4 h-4"}/>
              </SidebarIcon>
              <SidebarLabel>{label}</SidebarLabel>
              {badge && <SidebarBadge>{badge}</SidebarBadge>}
              <SidebarTooltip label={label} badge={badge} />
            </SidebarMenuButton>

            {page && !isCollapsed && ( // Always render switcher if there's a page
              <div className={cn(
                "absolute top-1/2 -translate-y-1/2 z-10",
                "opacity-0 group-hover/item:opacity-100 group-focus-within/item:opacity-100",
                "transition-opacity pointer-events-none group-hover/item:pointer-events-auto",
                // If there are actions, move left to make space for the action button
                hasActions ? "right-10" : "right-2"
              )}>
                <ViewModeSwitcher targetPage={page} />
              </div>
            )}

            {hasActions && (
              <DropdownMenu>
                <DropdownMenuTrigger asChild>
                  <SidebarMenuAction>
                    <MoreHorizontal className="h-4 w-4" />
                  </SidebarMenuAction>
                </DropdownMenuTrigger>
                <DropdownMenuContent side="right" align="start">
                  <DropdownMenuItem>
                    <span>Edit {label}</span>
                  </DropdownMenuItem>
                  <DropdownMenuItem>
                    <span>Delete {label}</span>
                  </DropdownMenuItem>
                </DropdownMenuContent>
              </DropdownMenu>
            )}
          </SidebarMenuItem>
          {!isCollapsed && children && (
            <div className="space-y-1 mt-1">{children}</div>
          )}
        </div>
      );
    };
approved: true
linesAdded: null
linesRemoved: null
linesDifference: null
gitCommittedAt: '2025-10-13T08:23:15.200Z'
status: committed
id: 223
