uuid: 48d94b0d-7870-42bb-b05c-b514e82df43f
projectId: jeli-app-shell
createdAt: '2025-10-12T02:59:34.073Z'
gitCommitMsg: >-
  fix(dnd): Correct split view drag and drop behavior

  This commit resolves several issues with the drag-and-drop feature for
  creating a split view:

  1.  **Fix Overlapping Drop Zones**: The drop zones for the left and right
  panes were overlapping, causing drops on the left to sometimes trigger the
  right pane action. The zones are now correctly sized to each take up 50% of
  the main area, preventing overlap.

  2.  **Correct Right Drop Zone Visual Cue**: The visual feedback (background
  color and border) for the right drop zone was being applied to a child element
  instead of the drop zone itself. This has been corrected for consistent visual
  behavior.

  3.  **Fix Stale State in Drop Handler**: The `handleDropRight` callback was
  missing `bodyState` in its dependency array, which could lead to logic using a
  stale state. The dependencies have been corrected.

  4.  **Refactor `pageToPaneMap`**: Moved the constant `pageToPaneMap` outside
  of the component render function to prevent unnecessary re-creations and
  simplify hook dependencies.
promptSummary: >-
  The user wants to fix issues with the drag-and-drop feature for creating a
  split view. The drop zones are behaving incorrectly and the visual cues are
  inconsistent.
reasoning:
  - >-
    I've identified two key issues with the drag-and-drop feature for creating a
    split view and have prepared the necessary fixes.
  - >-
    1.  **Overlapping Drop Zones**: The drop zones for the left (main content)
    and right (side pane) were overlapping. The right drop zone, being rendered
    last, would take precedence, causing items dropped on the left side of the
    screen to incorrectly trigger the right-side drop action.
  - >-
    2.  **Inconsistent Visual Cues & Logic**: The visual feedback for the
    right-side drop zone was applied to a child element instead of the drop zone
    itself, making it inconsistent. Additionally, a React hook callback for
    handling the drop had a stale `bodyState` due to a missing dependency, which
    could cause incorrect behavior.
  - 'To resolve this, I will implement the following changes:'
  - >-
    -   Adjust the drop zones to each cover exactly half of the main content
    area, eliminating any overlap.
  - >-
    -   Correct the application of visual styles to ensure the right-side drop
    zone provides clear and consistent feedback, just like the left one.
  - >-
    -   Fix the hook's dependency array to ensure the drop logic always has
    access to the current application state.
  - >-
    -   Perform a minor refactor to move a constant map outside the component,
    improving performance and cleaning up hook dependencies.
  - 'Here are the code modifications:'
operations:
  - type: write
    path: src/components/layout/AppShell.tsx
    content: >+
      --- src/components/layout/AppShell.tsx

      +++ src/components/layout/AppShell.tsx

      @@ -15,6 +15,13 @@
         commandPalette?: ReactElement;
       }
       
      +const pageToPaneMap: Record<string, 'main' | 'settings' | 'toaster' |
      'notifications'> = {

      +  dashboard: 'main',

      +  settings: 'settings',

      +  toaster: 'toaster',

      +  notifications: 'notifications',

      +};

      +
       
       export function AppShell({ sidebar, topBar, mainContent, rightPane, commandPalette }: AppShellProps) {
         const {
      @@ -75,13 +82,6 @@
           dispatch({ type: 'SET_DRAG_HOVER_TARGET', payload: null });
         }, [draggedPage, handleNavigation, dispatch]);
       
      -  const pageToPaneMap: Record<string, 'main' | 'settings' | 'toaster' |
      'notifications'> = {

      -    dashboard: 'main',

      -    settings: 'settings',

      -    toaster: 'toaster',

      -    notifications: 'notifications',

      -  };

      -
         const handleDragOverRight = useCallback((e: React.DragEvent) => {
           if (!draggedPage) return;
           e.preventDefault();
      @@ -104,7 +104,7 @@
           }
           dispatch({ type: 'SET_DRAGGED_PAGE', payload: null });
           dispatch({ type: 'SET_DRAG_HOVER_TARGET', payload: null });
      -  }, [draggedPage, toggleSplitView, openSidePane, dispatch]);

      +  }, [draggedPage, toggleSplitView, dispatch, bodyState]);
       
         return (
           <div 
      @@ -144,7 +144,7 @@
                     <div
                       className={cn(
                         "absolute inset-y-0 left-0 z-40 border-2 border-transparent",
      -                  draggedPage ? "pointer-events-auto w-[65%]" :
      "pointer-events-none w-0",

      +                  draggedPage ? "pointer-events-auto w-1/2" :
      "pointer-events-none w-0",
                         dragHoverTarget === 'left' && "bg-primary/10 border-primary"
                       )}
                       onDragOver={handleDragOverLeft}
      @@ -162,9 +162,9 @@
                     <div
                       className={cn(
                         "absolute inset-y-0 right-0 z-40 border-2 border-transparent",
      -                  draggedPage ? "pointer-events-auto" :
      "pointer-events-none",

      +                  draggedPage ? "pointer-events-auto w-1/2" :
      "pointer-events-none",

      +                  dragHoverTarget === 'right' && "bg-primary/10
      border-primary"
                       )}
      -                style={{ width: draggedPage ? `${rightPaneWidth}px` :
      undefined }}
                       onDragOver={handleDragOverRight}
                       onDrop={handleDropRight}
                       onDragLeave={() => {
      @@ -172,10 +172,7 @@
                       }}
                     >
                       {draggedPage && (
      -                  <div className={cn(

      -                    "absolute inset-0 flex items-center justify-center",

      -                    dragHoverTarget === 'right' ? "bg-primary/10
      border-primary" : ""

      -                  )}>

      +                  <div className="absolute inset-0 flex items-center
      justify-center">
                           <span className="px-3 py-1 rounded-md bg-primary/70 text-sm font-medium text-primary-foreground/80">Drop to Right</span>
                         </div>
                       )}

    patchStrategy: standard-diff
snapshot:
  src/components/layout/AppShell.tsx: >-
    import React, { useRef, type ReactElement, useCallback } from 'react'

    import { cn } from '@/lib/utils'

    import { CommandPalette } from '@/components/global/CommandPalette';

    import { useAppStore } from '@/store/appStore';

    import { useAppShell } from '@/context/AppShellContext';

    import { SIDEBAR_STATES, BODY_STATES } from '@/lib/utils'

    import { useResizableSidebar, useResizableRightPane } from
    '@/hooks/useResizablePanes.hook'

    import { useSidebarAnimations, useBodyStateAnimations } from
    '@/hooks/useAppShellAnimations.hook'


    interface AppShellProps {
      sidebar: ReactElement;
      topBar: ReactElement;
      mainContent: ReactElement;
      rightPane: ReactElement;
      commandPalette?: ReactElement;
    }



    export function AppShell({ sidebar, topBar, mainContent, rightPane,
    commandPalette }: AppShellProps) {
      const {
        sidebarState,
        dispatch,
        autoExpandSidebar,
        toggleSidebar,
        peekSidebar,
        draggedPage,
        dragHoverTarget,
        toggleSplitView,
        openSidePane,
        bodyState,
        rightPaneWidth,
      } = useAppShell();
      
      const { isDarkMode, toggleDarkMode, handleNavigation } = useAppStore();
      const appRef = useRef<HTMLDivElement>(null)
      const sidebarRef = useRef<HTMLDivElement>(null)
      const mainContentRef = useRef<HTMLDivElement>(null)
      const rightPaneRef = useRef<HTMLDivElement>(null)
      const resizeHandleRef = useRef<HTMLDivElement>(null)
      const topBarContainerRef = useRef<HTMLDivElement>(null)
      const mainAreaRef = useRef<HTMLDivElement>(null)

      // Custom hooks for logic
      useResizableSidebar(sidebarRef, resizeHandleRef);
      useResizableRightPane();
      useSidebarAnimations(sidebarRef, resizeHandleRef);
      useBodyStateAnimations(appRef, mainContentRef, rightPaneRef, topBarContainerRef, mainAreaRef);
      
      const sidebarWithProps = React.cloneElement(sidebar, { 
        ref: sidebarRef,
        onMouseEnter: () => {
          if (autoExpandSidebar && sidebarState === SIDEBAR_STATES.COLLAPSED) {
            peekSidebar()
          }
        },
        onMouseLeave: () => {
          if (autoExpandSidebar && sidebarState === SIDEBAR_STATES.PEEK) {
            dispatch({ type: 'SET_SIDEBAR_STATE', payload: SIDEBAR_STATES.COLLAPSED });
          }
        }
      });

      const topBarWithProps = React.cloneElement(topBar, {
        onToggleSidebar: toggleSidebar,
        onToggleDarkMode: toggleDarkMode,
      });

      const mainContentWithProps = React.cloneElement(mainContent, {
        ref: mainContentRef,
      });

      const rightPaneWithProps = React.cloneElement(rightPane, { ref: rightPaneRef });

      // Drag and drop handlers for docking
      const handleDragOverLeft = useCallback((e: React.DragEvent) => {
        if (!draggedPage) return;
        e.preventDefault();
        if (dragHoverTarget !== 'left') {
          dispatch({ type: 'SET_DRAG_HOVER_TARGET', payload: 'left' });
        }
      }, [draggedPage, dragHoverTarget, dispatch]);

      const handleDropLeft = useCallback(() => {
        if (!draggedPage) return;
        handleNavigation(draggedPage);
        dispatch({ type: 'SET_DRAGGED_PAGE', payload: null });
        dispatch({ type: 'SET_DRAG_HOVER_TARGET', payload: null });
      }, [draggedPage, handleNavigation, dispatch]);

      const pageToPaneMap: Record<string, 'main' | 'settings' | 'toaster' | 'notifications'> = {
        dashboard: 'main',
        settings: 'settings',
        toaster: 'toaster',
        notifications: 'notifications',
      };

      const handleDragOverRight = useCallback((e: React.DragEvent) => {
        if (!draggedPage) return;
        e.preventDefault();
        if (dragHoverTarget !== 'right') {
          dispatch({ type: 'SET_DRAG_HOVER_TARGET', payload: 'right' });
        }
      }, [draggedPage, dragHoverTarget, dispatch]);

      const handleDropRight = useCallback(() => {
        if (!draggedPage) return;
        const pane = pageToPaneMap[draggedPage as keyof typeof pageToPaneMap];
        if (pane) {
          // Set the right pane content and ensure split view
          dispatch({ type: 'SET_SIDE_PANE_CONTENT', payload: pane });
          if (bodyState === BODY_STATES.NORMAL) {
            toggleSplitView(pane);
          } else if (bodyState === BODY_STATES.SIDE_PANE) {
            toggleSplitView();
          }
        }
        dispatch({ type: 'SET_DRAGGED_PAGE', payload: null });
        dispatch({ type: 'SET_DRAG_HOVER_TARGET', payload: null });
      }, [draggedPage, toggleSplitView, openSidePane, dispatch]);

      return (
        <div 
          ref={appRef}
          className={cn(
            "relative h-screen w-screen overflow-hidden bg-background transition-colors duration-300",
            isDarkMode && "dark"
          )}
        >
          <div className="flex h-screen overflow-hidden">
            {/* Enhanced Sidebar */}
            {sidebarWithProps}

            {/* Resize Handle */}
            {sidebarState !== SIDEBAR_STATES.HIDDEN && (
              <div
                ref={resizeHandleRef}
                className={cn(
                  "absolute top-0 w-2 h-full bg-transparent hover:bg-primary/20 cursor-col-resize z-50 transition-colors duration-200 group -translate-x-1/2"
                )}
                onMouseDown={(e) => {
                  e.preventDefault()
                  dispatch({ type: 'SET_IS_RESIZING', payload: true });
                }}
              >
                <div className="w-0.5 h-full bg-border group-hover:bg-primary transition-colors duration-200 mx-auto" />
              </div>
            )}

            {/* Main area wrapper */}
            <div className="flex-1 flex flex-col overflow-hidden">
              <div ref={topBarContainerRef} className="relative z-30">
                {topBarWithProps}
              </div>

              <div className="flex flex-1 min-h-0">
                <div ref={mainAreaRef} className="relative flex-1 overflow-hidden bg-background">
                  {/* Left drop overlay */}
                  <div
                    className={cn(
                      "absolute inset-y-0 left-0 z-40 border-2 border-transparent",
                      draggedPage ? "pointer-events-auto w-[65%]" : "pointer-events-none w-0",
                      dragHoverTarget === 'left' && "bg-primary/10 border-primary"
                    )}
                    onDragOver={handleDragOverLeft}
                    onDrop={handleDropLeft}
                    onDragLeave={() => {
                      if (dragHoverTarget === 'left') dispatch({ type: 'SET_DRAG_HOVER_TARGET', payload: null });
                    }}
                  >
                    {draggedPage && (
                      <div className="absolute inset-0 flex items-center justify-center text-sm font-medium text-primary-foreground/80">
                        <span className="px-3 py-1 rounded-md bg-primary/70">Drop to Left</span>
                      </div>
                    )}
                  </div>
                  {mainContentWithProps}
                  {/* Right drop overlay (over main area to allow docking even if pane hidden) */}
                  <div
                    className={cn(
                      "absolute inset-y-0 right-0 z-40 border-2 border-transparent",
                      draggedPage ? "pointer-events-auto" : "pointer-events-none",
                    )}
                    style={{ width: draggedPage ? `${rightPaneWidth}px` : undefined }}
                    onDragOver={handleDragOverRight}
                    onDrop={handleDropRight}
                    onDragLeave={() => {
                      if (dragHoverTarget === 'right') dispatch({ type: 'SET_DRAG_HOVER_TARGET', payload: null });
                    }}
                  >
                    {draggedPage && (
                      <div className={cn(
                        "absolute inset-0 flex items-center justify-center",
                        dragHoverTarget === 'right' ? "bg-primary/10 border-primary" : ""
                      )}>
                        <span className="px-3 py-1 rounded-md bg-primary/70 text-sm font-medium text-primary-foreground/80">Drop to Right</span>
                      </div>
                    )}
                  </div>
                </div>
                {rightPaneWithProps}
              </div>
            </div>
          </div>
          {commandPalette || <CommandPalette />}
        </div>
      )
    }
approved: true
linesAdded: null
linesRemoved: null
linesDifference: null
gitCommittedAt: null
status: committed
id: 134
