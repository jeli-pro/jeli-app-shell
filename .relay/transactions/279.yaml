uuid: c32c969b-2a7e-40cd-8991-3de77c7f3b58
projectId: jeli-app-shell
createdAt: '2025-10-14T03:19:34.133Z'
gitCommitMsg: >-
  fix(types): Add missing BODY_STATES imports

  The `BODY_STATES` constant was being used in several page components without
  being imported, causing TypeScript compilation errors. This was likely missed
  during a recent refactor.

  This commit adds the necessary import for `BODY_STATES` from `@/lib/utils` to
  `Dashboard/index.tsx`, `Notifications/index.tsx`, and `ToasterDemo/index.tsx`
  to resolve the "Cannot find name" errors.
promptSummary: >-
  Fix TypeScript errors related to missing `BODY_STATES` import after a
  refactor.
reasoning:
  - >-
    Of course. It looks like the refactor missed a few imports for the
    `BODY_STATES` constant. I'll add the necessary imports to fix the TypeScript
    errors.
  - '### 1. Fix Dashboard Page'
  - >-
    I'll start by fixing the `DashboardContent` component. The `BODY_STATES`
    constant needs to be imported from `@/lib/utils` to resolve the reference
    error.
  - '### 2. Fix Notifications Page'
  - >-
    Next, I'll apply the same fix to the `NotificationsPage` component,
    importing `BODY_STATES` so it can correctly determine if it's being rendered
    in the side pane.
  - '### 3. Fix Toaster Demo Page'
  - >-
    Finally, I'll correct the `ToasterDemo` component by adding the
    `BODY_STATES` import, which will clear up the last of the TypeScript errors.
  - These changes should resolve all the TypeScript errors.
operations:
  - type: write
    path: src/pages/Dashboard/index.tsx
    content: |+
      --- src/pages/Dashboard/index.tsx
      +++ src/pages/Dashboard/index.tsx
      @@ -16,6 +16,7 @@
       import { useDashboardAnimations } from './hooks/useDashboardAnimations.motion.hook'
       import { useDashboardScroll } from './hooks/useDashboardScroll.hook'
       import { useAppShellStore } from '@/store/appShell.store'
      +import { BODY_STATES } from '@/lib/utils'
       import { PageHeader } from '@/components/shared/PageHeader';
       import { StatCard } from '@/components/shared/StatCard';
       import { Card } from '@/components/ui/card';

    patchStrategy: standard-diff
  - type: write
    path: src/pages/Notifications/index.tsx
    content: |+
      --- src/pages/Notifications/index.tsx
      +++ src/pages/Notifications/index.tsx
      @@ -19,6 +19,7 @@
         ShieldCheck,
       } from "lucide-react";
       import { useAppShellStore } from "@/store/appShell.store";
      +import { BODY_STATES } from "@/lib/utils";
       
       import { PageLayout } from "@/components/shared/PageLayout";
       import { 

    patchStrategy: standard-diff
  - type: write
    path: src/pages/ToasterDemo/index.tsx
    content: |+
      --- src/pages/ToasterDemo/index.tsx
      +++ src/pages/ToasterDemo/index.tsx
      @@ -3,7 +3,7 @@
       import { PageHeader } from '@/components/shared/PageHeader';
       import { PageLayout } from '@/components/shared/PageLayout';
       import { useAppShellStore } from '@/store/appShell.store';
      -import { cn } from '@/lib/utils';
      +import { cn, BODY_STATES } from '@/lib/utils';
       
       type Variant = 'default' | 'success' | 'error' | 'warning';
       type Position =

    patchStrategy: standard-diff
snapshot:
  src/pages/Dashboard/index.tsx: >-
    import { useRef } from 'react'

    import { 
      BarChart3, 
      TrendingUp, 
      Users, 
      DollarSign, 
      Activity,
      Calendar,
      Clock,
      MessageSquare,
      FileText,
      Star,
      ChevronRight,
      MoreVertical,
      ArrowDown
    } from 'lucide-react'

    import { cn } from '@/lib/utils'

    import { DemoContent } from './DemoContent';

    import { useDashboardAnimations } from
    './hooks/useDashboardAnimations.motion.hook'

    import { useDashboardScroll } from './hooks/useDashboardScroll.hook'

    import { useAppShellStore } from '@/store/appShell.store'

    import { PageHeader } from '@/components/shared/PageHeader';

    import { StatCard } from '@/components/shared/StatCard';

    import { Card } from '@/components/ui/card';

    import { PageLayout } from '@/components/shared/PageLayout';


    interface StatsCard {
      title: string
      value: string
      change: string
      trend: 'up' | 'down'
      icon: React.ReactNode
    }


    interface ActivityItem {
      id: string
      type: 'comment' | 'file' | 'meeting' | 'task'
      title: string
      description: string
      time: string
      user: string
    }


    const statsCards: StatsCard[] = [
      {
        title: "Total Revenue",
        value: "$45,231.89",
        change: "+20.1%",
        trend: "up",
        icon: <DollarSign className="w-5 h-5" />
      },
      {
        title: "Active Users",
        value: "2,350",
        change: "+180.1%",
        trend: "up",
        icon: <Users className="w-5 h-5" />
      },
      {
        title: "Conversion Rate",
        value: "12.5%",
        change: "+19%",
        trend: "up",
        icon: <TrendingUp className="w-5 h-5" />
      },
      {
        title: "Performance",
        value: "573ms",
        change: "-5.3%",
        trend: "down",
        icon: <Activity className="w-5 h-5" />
      }
    ]


    const recentActivity: ActivityItem[] = [
      {
        id: "1",
        type: "comment",
        title: "New comment on Project Alpha",
        description: "Sarah Johnson added a comment to the design review",
        time: "2 minutes ago",
        user: "SJ"
      },
      {
        id: "2",
        type: "file",
        title: "Document uploaded",
        description: "quarterly-report.pdf was uploaded to Documents",
        time: "15 minutes ago",
        user: "MD"
      },
      {
        id: "3",
        type: "meeting",
        title: "Meeting scheduled",
        description: "Weekly standup meeting scheduled for tomorrow 9 AM",
        time: "1 hour ago",
        user: "RW"
      },
      {
        id: "4",
        type: "task",
        title: "Task completed",
        description: "UI wireframes for mobile app completed",
        time: "2 hours ago",
        user: "AL"
      }
    ]


    export function DashboardContent() {
        const scrollRef = useRef<HTMLDivElement>(null)
        const contentRef = useRef<HTMLDivElement>(null);
        const statsCardsContainerRef = useRef<HTMLDivElement>(null);
        const featureCardsContainerRef = useRef<HTMLDivElement>(null);
        const bodyState = useAppShellStore(s => s.bodyState);
        const isInSidePane = bodyState === BODY_STATES.SIDE_PANE;
        const { showScrollToBottom, handleScroll, scrollToBottom } = useDashboardScroll(scrollRef, isInSidePane);

        useDashboardAnimations(contentRef, statsCardsContainerRef, featureCardsContainerRef);

        const getTypeIcon = (type: ActivityItem['type']) => {
          switch (type) {
            case 'comment':
              return <MessageSquare className="w-4 h-4" />
            case 'file':
              return <FileText className="w-4 h-4" />
            case 'meeting':
              return <Calendar className="w-4 h-4" />
            case 'task':
              return <Star className="w-4 h-4" />
            default:
              return <Activity className="w-4 h-4" />
          }
        }

        return (
          <PageLayout scrollRef={scrollRef} onScroll={handleScroll} ref={contentRef}>
            {/* Header */}
            {!isInSidePane && (
              <PageHeader
                title="Dashboard"
                description="Welcome to the Jeli App Shell demo! Explore all the features and customization options."
              />
            )}
              {/* Stats Cards */}
            <div ref={statsCardsContainerRef} className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6">
              {statsCards.map((stat) => (
                <StatCard
                  key={stat.title}
                  title={stat.title}
                  value={stat.value}
                  change={stat.change}
                  trend={stat.trend}
                  icon={stat.icon}
                />
              ))}
            </div>

            {/* Demo Content */}
            <DemoContent ref={featureCardsContainerRef} />

            {/* Main Content Grid */}
            <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
            {/* Chart Area */}
            <div className="lg:col-span-2 space-y-6">
              {/* Analytics Chart */}
              <Card className="p-6 border-border/50">
                <div className="flex items-center justify-between mb-6">
                  <h3 className="text-lg font-semibold">Analytics Overview</h3>
                  <button className="h-8 w-8 flex items-center justify-center hover:bg-accent rounded-full transition-colors">
                    <MoreVertical className="w-5 h-5" />
                  </button>
                </div>
                
                {/* Mock Chart */}
                <div className="h-64 bg-gradient-to-br from-primary/10 to-transparent rounded-xl flex items-center justify-center border border-border/50">
                  <div className="text-center">
                    <BarChart3 className="w-12 h-12 text-primary mx-auto mb-2" />
                    <p className="text-muted-foreground">Chart visualization would go here</p>
                  </div>
                </div>
              </Card>

              {/* Recent Projects */}
              <Card className="p-6 border-border/50">
                <div className="flex items-center justify-between mb-6">
                  <h3 className="text-lg font-semibold">Recent Projects</h3>
                  <button className="text-primary hover:text-primary/80 text-sm font-medium flex items-center gap-1">
                    View All
                    <ChevronRight className="w-4 h-4" />
                  </button>
                </div>
                
                <div className="space-y-4">
                  {[
                    { name: "E-commerce Platform", progress: 75, team: 5, deadline: "Dec 15" },
                    { name: "Mobile App Redesign", progress: 45, team: 3, deadline: "Jan 20" },
                    { name: "Marketing Website", progress: 90, team: 4, deadline: "Dec 5" }
                  ].map((project) => (
                    <div key={project.name} className="p-4 bg-accent/30 rounded-xl hover:bg-accent/50 transition-colors cursor-pointer">
                      <div className="flex items-center justify-between mb-2">
                        <h4 className="font-medium">{project.name}</h4>
                        <span className="text-sm text-muted-foreground">{project.progress}%</span>
                      </div>
                      <div className="w-full bg-muted rounded-full h-2 mb-3">
                        <div 
                          className="bg-primary h-2 rounded-full transition-all duration-500"
                          style={{ width: `${project.progress}%` }}
                        />
                      </div>
                      <div className="flex items-center justify-between text-sm text-muted-foreground">
                        <span>{project.team} team members</span>
                        <span>Due {project.deadline}</span>
                        </div>
                    </div>
                  ))}
                </div>
              </Card>
            </div>

            {/* Sidebar Content */}
            <div className="space-y-6">
              {/* Quick Actions */}
              <Card className="p-6 border-border/50">
                <h3 className="text-lg font-semibold mb-4">Quick Actions</h3>
                <div className="space-y-3">
                  {[
                    { icon: <FileText className="w-4 h-4" />, label: "Create Document", color: "bg-blue-500/10 text-blue-600" },
                    { icon: <Calendar className="w-4 h-4" />, label: "Schedule Meeting", color: "bg-green-500/10 text-green-600" },
                    { icon: <Users className="w-4 h-4" />, label: "Invite Team", color: "bg-purple-500/10 text-purple-600" },
                    { icon: <BarChart3 className="w-4 h-4" />, label: "View Reports", color: "bg-orange-500/10 text-orange-600" }
                  ].map((action) => (
                    <button
                      key={action.label}
                      className="w-full flex items-center gap-3 p-3 hover:bg-accent rounded-lg transition-colors text-left"
                    >
                      <div className={cn("p-2 rounded-full", action.color)}>
                        {action.icon}
                      </div>
                      <span className="font-medium">{action.label}</span>
                    </button>
                  ))}
                </div>
              </Card>

              {/* Recent Activity */}
              <Card className="p-6 border-border/50">
                <h3 className="text-lg font-semibold mb-4">Recent Activity</h3>
                <div className="space-y-4">
                  {recentActivity.map((activity) => (
                    <div key={activity.id} className="flex items-start gap-3 p-3 hover:bg-accent/30 rounded-xl transition-colors cursor-pointer">
                      <div className="p-2 bg-primary/10 rounded-full flex-shrink-0">
                        {getTypeIcon(activity.type)}
                      </div>
                      <div className="flex-1 min-w-0">
                        <h4 className="font-medium text-sm mb-1">{activity.title}</h4>
                        <p className="text-xs text-muted-foreground mb-2">{activity.description}</p>
                        <div className="flex items-center gap-2 text-xs text-muted-foreground">
                          <Clock className="w-3 h-3" />
                          <span>{activity.time}</span>
                          <div className="w-5 h-5 bg-primary rounded-full flex items-center justify-center text-primary-foreground text-xs font-medium">
                            {activity.user}
                          </div>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </Card>
            </div>
          </div>
          {showScrollToBottom && (
            <button
              onClick={scrollToBottom}
              className="fixed bottom-8 right-8 w-12 h-12 bg-primary text-primary-foreground rounded-full flex items-center justify-center shadow-lg hover:bg-primary/90 transition-all animate-fade-in z-[51]"
              style={{ animation: 'bounce 2s infinite' }}
              title="Scroll to bottom"
            >
              <ArrowDown className="w-6 h-6" />
            </button>
          )}
          </PageLayout>
        )
    }
  src/pages/Notifications/index.tsx: >-
    import React from "react";

    import { Avatar, AvatarFallback, AvatarImage } from
    "@/components/ui/avatar";

    import { Badge } from "@/components/ui/badge";

    import { Button } from "@/components/ui/button";

    import { Card, CardContent, CardHeader } from "@/components/ui/card";

    import { Tabs, TabsList, TabsTrigger } from "@/components/ui/tabs";

    import { PageHeader } from "@/components/shared/PageHeader";

    import { useToast } from "@/components/ui/toast";

    import { cn } from "@/lib/utils";

    import { 
      CheckCheck, 
      Download, 
      Settings, 
      Bell,
      MessageSquare,
      UserPlus,
      Mail,
      File as FileIcon,
      Heart,
      AtSign,
      ClipboardCheck,
      ShieldCheck,
    } from "lucide-react";

    import { useAppShellStore } from "@/store/appShell.store";


    import { PageLayout } from "@/components/shared/PageLayout";

    import { 
      useNotificationsStore,
      useFilteredNotifications,
      useNotificationCounts,
      type Notification
    } from "./notifications.store";


    const iconMap: { [key: string]: React.ElementType } = {
      comment: MessageSquare,
      follow: UserPlus,
      invitation: Mail,
      file_share: FileIcon,
      mention: AtSign,
      like: Heart,
      task_assignment: ClipboardCheck,
      system_update: ShieldCheck,
    };


    function NotificationItem({ notification }: { notification: Notification; })
    {
      const markAsRead = useNotificationsStore(s => s.markAsRead);
      const Icon = iconMap[notification.type];

      return (
        <div className={cn(
          "group w-full p-4 hover:bg-accent/50 rounded-lg transition-colors duration-200"
        )}>
          <div className="flex gap-3">
            <div className="relative h-10 w-10 shrink-0">
              <Avatar className="h-10 w-10">
                <AvatarImage src={notification.user.avatar} alt={`${notification.user.name}'s profile picture`} />
                <AvatarFallback>{notification.user.fallback}</AvatarFallback>
              </Avatar>
              {Icon && (
                <div className="absolute -bottom-1 -right-1 flex h-5 w-5 items-center justify-center rounded-full border-2 border-card bg-background">
                  <Icon className={cn("h-3 w-3", notification.type === 'like' ? 'text-red-500 fill-current' : 'text-muted-foreground')} />
                </div>
              )}
            </div>

            <div className="flex flex-1 flex-col space-y-2">
              <div className="flex items-start justify-between">
                <div className="text-sm">
                  <span className="font-semibold">{notification.user.name}</span>
                  <span className="text-muted-foreground"> {notification.action} </span>
                  {notification.target && <span className="font-semibold">{notification.target}</span>}
                  <div className="mt-0.5 text-xs text-muted-foreground">{notification.timeAgo}</div>
                </div>
                <button
                  onClick={() => !notification.isRead && markAsRead(notification.id)}
                  title={notification.isRead ? "Read" : "Mark as read"}
                  className={cn("size-2.5 rounded-full mt-1 shrink-0 transition-all duration-300",
                    notification.isRead ? 'bg-transparent' : 'bg-primary hover:scale-125 cursor-pointer'
                  )}
                ></button>
              </div>

              {notification.content && <div className="rounded-lg border bg-muted/50 p-3 text-sm">{notification.content}</div>}

              {notification.file && (
                <div className="flex items-center gap-2 rounded-lg bg-muted/50 p-2 border border-border">
                  <div className="shrink-0 w-10 h-10 flex items-center justify-center bg-background rounded-md border border-border">
                    <FileIcon className="w-5 h-5 text-muted-foreground" />
                  </div>
                  <div className="flex-1 min-w-0">
                    <div className="text-sm font-medium truncate">{notification.file.name}</div>
                    <div className="text-xs text-muted-foreground">{notification.file.type} • {notification.file.size}</div>
                  </div>
                  <Button variant="ghost" size="icon" className="size-8 shrink-0">
                    <Download className="w-4 h-4" />
                  </Button>
                </div>
              )}

              {notification.hasActions && (
                <div className="flex gap-2">
                  <Button variant="outline" size="sm">Decline</Button>
                  <Button size="sm">Accept</Button>
                </div>
              )}
            </div>
          </div>
        </div>
      );
    }


    export function NotificationsPage() {
      const bodyState = useAppShellStore(s => s.bodyState);
      const isInSidePane = bodyState === BODY_STATES.SIDE_PANE;
      
      const { activeTab, setActiveTab, markAllAsRead } = useNotificationsStore(s => ({ activeTab: s.activeTab, setActiveTab: s.setActiveTab, markAllAsRead: s.markAllAsRead }));
      const filteredNotifications = useFilteredNotifications();
      const { unreadCount, verifiedCount, mentionCount } = useNotificationCounts();
      const { show: showToast } = useToast();

      const handleMarkAllAsRead = () => {
        const count = markAllAsRead();
        if (count === 0) {
          showToast({
            title: "Already up to date!",
            message: "You have no unread notifications.",
            variant: "default",
          });
          return;
        }
        showToast({
            title: "All Caught Up!",
            message: "All notifications have been marked as read.",
            variant: "success",
        });
      };

      const content = (
        <Card className={cn("flex w-full flex-col shadow-none", isInSidePane ? "border-none" : "")}>
          <CardHeader className={cn(isInSidePane ? "p-4" : "p-6")}>
            <div className="flex items-center justify-between">
              <h3 className="text-lg font-semibold">
                Your notifications
              </h3>
              <div className="flex items-center gap-1">
                <Button variant="ghost" size="icon" className="size-8" onClick={handleMarkAllAsRead} title="Mark all as read">
                  <CheckCheck className="size-4 text-muted-foreground" />
                </Button>
                <Button variant="ghost" size="icon" className="size-8">
                  <Settings className="size-4 text-muted-foreground" />
                </Button>
              </div>
            </div>

            <Tabs value={activeTab} onValueChange={(val) => setActiveTab(val as 'all' | 'verified' | 'mentions')} className="w-full flex-col justify-start mt-4">
              <TabsList className="gap-1.5">
                <TabsTrigger value="all" className="gap-1.5">
                  View all {unreadCount > 0 && <Badge variant="secondary" className="rounded-full">{unreadCount}</Badge>}
                </TabsTrigger>
                <TabsTrigger value="verified" className="gap-1.5">
                  Verified {verifiedCount > 0 && <Badge variant="secondary" className="rounded-full">{verifiedCount}</Badge>}
                </TabsTrigger>
                <TabsTrigger value="mentions" className="gap-1.5">
                  Mentions {mentionCount > 0 && <Badge variant="secondary" className="rounded-full">{mentionCount}</Badge>}
                </TabsTrigger>
              </TabsList>
            </Tabs>
          </CardHeader>

          <CardContent className={cn("h-full p-0", isInSidePane ? "px-2" : "px-6")}>
            <div className="space-y-2 divide-y divide-border">
              {filteredNotifications.length > 0 ? (
                filteredNotifications.map((notification) => (
                  <NotificationItem key={notification.id} notification={notification} />
                ))
              ) : (
                <div className="flex flex-col items-center justify-center space-y-2.5 py-12 text-center">
                  <div className="rounded-full bg-muted p-4">
                    <Bell className="text-muted-foreground" />
                  </div>
                  <p className="text-sm font-medium text-muted-foreground">No notifications yet.</p>
                </div>
              )}
            </div>
          </CardContent>
        </Card>
      );

      return (
        <PageLayout>
          {!isInSidePane && (
            <PageHeader
              title="Notifications"
              description="Manage your notifications and stay up-to-date."
            />
          )}
          {content}
        </PageLayout>
      );
    }
  src/pages/ToasterDemo/index.tsx: >-
    import { Button } from '@/components/ui/button';

    import { useToast } from '@/components/ui/toast';

    import { PageHeader } from '@/components/shared/PageHeader';

    import { PageLayout } from '@/components/shared/PageLayout';

    import { useAppShellStore } from '@/store/appShell.store';

    import { cn } from '@/lib/utils';


    type Variant = 'default' | 'success' | 'error' | 'warning';

    type Position =
      | 'top-left'
      | 'top-center'
      | 'top-right'
      | 'bottom-left'
      | 'bottom-center'
      | 'bottom-right';

    const variantColors = {
      default: 'border-border text-foreground hover:bg-muted/10 dark:hover:bg-muted/20',
      success: 'border-green-600 text-green-600 hover:bg-green-600/10 dark:hover:bg-green-400/20',
      error: 'border-destructive text-destructive hover:bg-destructive/10 dark:hover:bg-destructive/20',
      warning: 'border-amber-600 text-amber-600 hover:bg-amber-600/10 dark:hover:bg-amber-400/20',
    }


    const DemoSection: React.FC<{ title: string; children: React.ReactNode }> =
    ({
      title,
      children,
    }) => (
      <section>
        <h2 className="text-lg font-semibold mb-2">{title}</h2>
        {children}
      </section>
    );


    export function ToasterDemo() {
      const toast = useToast();
      const bodyState = useAppShellStore(s => s.bodyState);
      const isInSidePane = bodyState === BODY_STATES.SIDE_PANE;

      const showToast = (variant: Variant, position: Position = 'bottom-right') => {
        toast.show({
          title: `${variant.charAt(0).toUpperCase() + variant.slice(1)} Notification`,
          message: `This is a ${variant} toast notification.`,
          variant,
          position,
          duration: 3000,
          onDismiss: () =>
            console.log(`${variant} toast at ${position} dismissed`),
        });
      };

      const simulateApiCall = async () => {
        toast.show({
          title: 'Scheduling...',
          message: 'Please wait while we schedule your meeting.',
          variant: 'default',
          position: 'bottom-right',
        });

        try {
          await new Promise((resolve) => setTimeout(resolve, 2000));

          toast.show({
            title: 'Meeting Scheduled',
            message: 'Your meeting is scheduled for July 4, 2025, at 3:42 PM IST.',
            variant: 'success',
            position: 'bottom-right',
            highlightTitle: true,
            actions: {
              label: 'Undo',
              onClick: () => console.log('Undoing meeting schedule'),
              variant: 'outline',
            },
          });
        } catch (error) {
          toast.show({
            title: 'Error Scheduling Meeting',
            message: 'Failed to schedule the meeting. Please try again.',
            variant: 'error',
            position: 'bottom-right',
          });
        }
      };

      return (
        <PageLayout>
          {/* Header */}
          {!isInSidePane && (
            <PageHeader
              title="Toaster"
              description="A customizable toast component for notifications."
            />
          )}
          <div className="space-y-6">
            <DemoSection title="Toast Variants">
              <div className="flex flex-wrap gap-4">
                {(['default', 'success', 'error', 'warning'] as Variant[]).map((variantKey) => (
                  <Button
                    key={variantKey}
                    variant="outline"
                    onClick={() => showToast(variantKey as Variant)}
                    className={cn(variantColors[variantKey])}
                  >
                    {variantKey.charAt(0).toUpperCase() + variantKey.slice(1)} Toast
                  </Button>
                ))}
              </div>
            </DemoSection>

            <DemoSection title="Toast Positions">
              <div className="flex flex-wrap gap-4">
                {[
                  'top-left',
                  'top-center',
                  'top-right',
                  'bottom-left',
                  'bottom-center',
                  'bottom-right',
                ].map((positionKey) => (
                  <Button
                    key={positionKey}
                    variant="outline"
                    onClick={() =>
                      showToast('default', positionKey as Position)
                    }
                    className="border-border text-foreground hover:bg-muted/10 dark:hover:bg-muted/20"
                  >
                    {positionKey
                      .replace('-', ' ')
                      .replace(/\b\w/g, (char) => char.toUpperCase())}
                  </Button>
                ))}
              </div>
            </DemoSection>

            <DemoSection title="Real-World Example">
              <Button
                variant="outline"
                onClick={simulateApiCall}
                className="border-border text-foreground hover:bg-muted/10 dark:hover:bg-muted/20"
              >
                Schedule Meeting
              </Button>
            </DemoSection>
          </div>
        </PageLayout>
      );
    }
approved: true
linesAdded: null
linesRemoved: null
linesDifference: null
gitCommittedAt: '2025-10-14T03:21:24.626Z'
status: committed
id: 279
