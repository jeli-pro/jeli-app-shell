uuid: c251c864-4632-4752-95f0-6218d697841c
projectId: amazing-app-shell
createdAt: '2025-10-10T23:33:39.827Z'
gitCommitMsg: >-
  fix: resolve typescript build errors

  - Add missing `@radix-ui/react-tabs` dependency. - Fix type errors in
  `RightPane` by adding a type guard for an optional property. - Correct
  `onAction` prop type signature in `UserDropdown`. - Add a type check in
  `Sidebar` to prevent comparing a string to a number. - Remove unused variables
  from `EnhancedSidebar`, `NotificationsPage`, and `WorkspaceSwitcher` to clean
  up warnings.
promptSummary: Fix a series of TypeScript errors that were causing the build to fail.
reasoning:
  - >-
    Of course! I've analyzed the TypeScript errors and will apply the necessary
    fixes to your codebase. Here are the corrections for each issue.
  - '### 1. Install Missing Dependency'
  - >-
    The error `Cannot find module '@radix-ui/react-tabs'` indicates a missing
    package. I will add it to `package.json`.
  - '### 2. Fix `RightPane.tsx` Type Errors'
  - >-
    The errors in `RightPane.tsx` are due to trying to access the `.page`
    property on an object where it's optional. I'll import the `ActivePage` type
    and add a type guard to ensure the property exists before accessing it.
  - '### 3. Correct Prop Type in `UserDropdown.tsx`'
  - >-
    The `onAction` prop was defined to accept zero arguments, but was called
    with one. I'll update its default value to have a signature that accepts an
    optional string, which will fix the type inference.
  - '### 4. Fix Type Mismatch in `Sidebar.tsx`'
  - >-
    The error `Operator '>' cannot be applied to types 'string | number' and
    'number'` is happening because the `badge` prop could be a string. I'll add
    a type check to ensure the comparison only happens on numbers.
  - '### 5. Remove Unused Variables'
  - >-
    I'll clean up the code by removing the unused variables reported by the
    compiler.
  - 'First, in `EnhancedSidebar.tsx`:'
  - 'Next, in `NotificationsPage.tsx`:'
  - 'Finally, in `WorkspaceSwitcher.tsx`:'
  - >-
    These changes address all the reported TypeScript errors and should allow
    the build to succeed.
operations:
  - type: write
    path: package.json
    content: |+
      --- package.json
      +++ package.json
      @@ -21,7 +21,8 @@
           "cmdk": "^0.2.0",
           "@radix-ui/react-dropdown-menu": "^2.0.6",
      -    "@iconify/react": "^4.1.1"
      +    "@iconify/react": "^4.1.1",
      +    "@radix-ui/react-tabs": "^1.0.4"
         },
         "devDependencies": {
           "@types/node": "^20.10.0",

    patchStrategy: standard-diff
  - type: write
    path: src/components/RightPane.tsx
    content: |+
      --- src/components/RightPane.tsx
      +++ src/components/RightPane.tsx
      @@ -1,6 +1,6 @@
       import { forwardRef } from 'react'
       import { SlidersHorizontal, Settings, ChevronRight, LayoutDashboard, ChevronsLeftRight, Component, Bell } from 'lucide-react'
      -import { useAppStore } from '@/store/appStore'
      +import { useAppStore, type ActivePage } from '@/store/appStore'
       import { cn } from '@/lib/utils'
       import { SettingsContent } from './SettingsContent'
       import { DashboardContent } from './DashboardContent'
      @@ -19,9 +19,9 @@
         const CurrentIcon = currentContent.icon;
       
         const handleMaximize = () => {
      -    if (currentContent.page) {
      -      setActivePage(currentContent.page as ActivePage);
      +    if ('page' in currentContent && currentContent.page) {
      +      setActivePage(currentContent.page);
           }
           closeSidePane()
         }
      @@ -52,7 +52,7 @@
                 </h2>
               </div>
               
      -        {currentContent.page && (
      +        {'page' in currentContent && currentContent.page && (
                 <button
                   onClick={handleMaximize}
                   className="h-10 w-10 flex items-center justify-center hover:bg-accent rounded-full transition-colors mr-2"

    patchStrategy: standard-diff
  - type: write
    path: src/components/UserDropdown.tsx
    content: |
      <<<<<<< SEARCH
        onAction = () => {},
      =======
        onAction = (_action?: string) => {},
      >>>>>>> REPLACE
    patchStrategy: search-replace
  - type: write
    path: src/components/Sidebar.tsx
    content: |
      <<<<<<< SEARCH
                {badge > 99 ? '99+' : badge}
      =======
                {typeof badge === 'number' && badge > 99 ? '99+' : badge}
      >>>>>>> REPLACE
    patchStrategy: search-replace
  - type: write
    path: src/components/EnhancedSidebar.tsx
    content: >+
      --- src/components/EnhancedSidebar.tsx

      +++ src/components/EnhancedSidebar.tsx

      @@ -173,7 +173,7 @@
       }
       
       const AppMenuItem: React.FC<AppMenuItemProps> = ({ icon: Icon, label, badge, hasActions, children, isSubItem = false, page, opensInSidePane = false }) => {
      -  const { handleNavigation, isPageActive, openSidePane, activePage } =
      useAppStore();

      +  const { handleNavigation, isPageActive, openSidePane } = useAppStore();
         const isActive = page ? isPageActive(page) : false;
         const { compactMode } = useAppStore();
         const { isCollapsed } = useSidebar();

    patchStrategy: standard-diff
  - type: write
    path: src/components/NotificationsPage.tsx
    content: >
      <<<<<<< SEARCH

      import { Tabs, TabsList, TabsTrigger, TabsContent } from
      "@/components/ui/tabs";

      =======

      import { Tabs, TabsList, TabsTrigger } from "@/components/ui/tabs";

      >>>>>>> REPLACE
    patchStrategy: search-replace
  - type: write
    path: src/components/WorkspaceSwitcher.tsx
    content: "--- src/components/WorkspaceSwitcher.tsx\n+++ src/components/WorkspaceSwitcher.tsx\n@@ -204,7 +204,6 @@\n }: WorkspaceContentProps) {\n \tconst {\n \t\tworkspaces,\n-\t\topen,\n \t\tselectedWorkspace,\n \t\tonWorkspaceSelect,\n \t\tgetWorkspaceId,\n\n"
    patchStrategy: standard-diff
snapshot:
  package.json: |-
    {
      "name": "amazing-app-shell",
      "private": true,
      "version": "0.0.0",
      "type": "module",
      "scripts": {
        "dev": "vite",
        "build": "tsc && vite build",
        "lint": "eslint . --ext ts,tsx --report-unused-disable-directives --max-warnings 0",
        "preview": "vite preview"
      },
      "dependencies": {
        "react": "^18.2.0",
        "react-dom": "^18.2.0",
        "gsap": "^3.12.2",
        "zustand": "^4.4.7",
        "lucide-react": "^0.294.0",
        "clsx": "^2.0.0",
        "tailwind-merge": "^2.0.0",
        "class-variance-authority": "^0.7.0",
        "@radix-ui/react-slot": "^1.0.2",
        "sonner": "^1.2.4",
        "@radix-ui/react-avatar": "^1.0.4",
        "@radix-ui/react-popover": "^1.0.7",
        "@radix-ui/react-dialog": "^1.0.5",
        "cmdk": "^0.2.0",
        "@radix-ui/react-dropdown-menu": "^2.0.6",
        "@iconify/react": "^4.1.1"
      },
      "devDependencies": {
        "@types/node": "^20.10.0",
        "@types/react": "^18.2.37",
        "@types/react-dom": "^18.2.15",
        "@typescript-eslint/eslint-plugin": "^6.10.0",
        "@typescript-eslint/parser": "^6.10.0",
        "@vitejs/plugin-react": "^4.1.1",
        "autoprefixer": "^10.4.16",
        "eslint": "^8.53.0",
        "eslint-plugin-react-hooks": "^4.6.0",
        "eslint-plugin-react-refresh": "^0.4.4",
        "postcss": "^8.4.31",
        "tailwindcss": "^3.3.5",
        "typescript": "^5.2.2",
        "vite": "^4.5.0",
        "tailwindcss-animate": "^1.0.7"
      }
    }
  src/components/WorkspaceSwitcher.tsx: "import * as React from 'react';\nimport { CheckIcon, ChevronsUpDownIcon, Search } from 'lucide-react';\nimport { Avatar, AvatarImage, AvatarFallback } from '@/components/ui/avatar';\nimport { cn } from '@/lib/utils';\nimport {\n\tPopover,\n\tPopoverTrigger,\n\tPopoverContent,\n\ttype PopoverContentProps,\n} from '@/components/ui/popover';\n\n// Generic workspace interface - can be extended\nexport interface Workspace {\n\tid: string;\n\tname: string;\n\t[key: string]: any; // Allow additional properties\n}\n\n// Context for workspace state management\ninterface WorkspaceContextValue<T extends Workspace> {\n\topen: boolean;\n\tsetOpen: (open: boolean) => void;\n\tselectedWorkspace: T | undefined;\n\tworkspaces: T[];\n\tonWorkspaceSelect: (workspace: T) => void;\n\tgetWorkspaceId: (workspace: T) => string;\n\tgetWorkspaceName: (workspace: T) => string;\n}\n\nconst WorkspaceContext = React.createContext<WorkspaceContextValue<any> | null>(\n\tnull,\n);\n\nfunction useWorkspaceContext<T extends Workspace>() {\n\tconst context = React.useContext(\n\t\tWorkspaceContext,\n\t) as WorkspaceContextValue<T> | null;\n\tif (!context) {\n\t\tthrow new Error(\n\t\t\t'Workspace components must be used within WorkspaceProvider',\n\t\t);\n\t}\n\treturn context;\n}\n\n// Main provider component\ninterface WorkspaceProviderProps<T extends Workspace> {\n\tchildren: React.ReactNode;\n\tworkspaces: T[];\n\tselectedWorkspaceId?: string;\n\tonWorkspaceChange?: (workspace: T) => void;\n\topen?: boolean;\n\tonOpenChange?: (open: boolean) => void;\n\tgetWorkspaceId?: (workspace: T) => string;\n\tgetWorkspaceName?: (workspace: T) => string;\n}\n\nfunction WorkspaceProvider<T extends Workspace>({\n\tchildren,\n\tworkspaces,\n\tselectedWorkspaceId,\n\tonWorkspaceChange,\n\topen: controlledOpen,\n\tonOpenChange,\n\tgetWorkspaceId = (workspace) => workspace.id,\n\tgetWorkspaceName = (workspace) => workspace.name,\n}: WorkspaceProviderProps<T>) {\n\tconst [internalOpen, setInternalOpen] = React.useState(false);\n\n\tconst open = controlledOpen ?? internalOpen;\n\tconst setOpen = onOpenChange ?? setInternalOpen;\n\n\tconst selectedWorkspace = React.useMemo(() => {\n\t\tif (!selectedWorkspaceId) return workspaces[0];\n\t\treturn (\n\t\t\tworkspaces.find((ws) => getWorkspaceId(ws) === selectedWorkspaceId) ||\n\t\t\tworkspaces[0]\n\t\t);\n\t}, [workspaces, selectedWorkspaceId, getWorkspaceId]);\n\n\tconst handleWorkspaceSelect = React.useCallback(\n\t\t(workspace: T) => {\n\t\t\tonWorkspaceChange?.(workspace);\n\t\t\tsetOpen(false);\n\t\t},\n\t\t[onWorkspaceChange, setOpen],\n\t);\n\n\tconst value: WorkspaceContextValue<T> = {\n\t\topen,\n\t\tsetOpen,\n\t\tselectedWorkspace,\n\t\tworkspaces,\n\t\tonWorkspaceSelect: handleWorkspaceSelect,\n\t\tgetWorkspaceId,\n\t\tgetWorkspaceName,\n\t};\n\n\treturn (\n\t\t<WorkspaceContext.Provider value={value}>\n\t\t\t<Popover open={open} onOpenChange={setOpen}>\n\t\t\t\t{children}\n\t\t\t</Popover>\n\t\t</WorkspaceContext.Provider>\n\t);\n}\n\n// Trigger component\ninterface WorkspaceTriggerProps extends React.ComponentProps<'button'> {\n\trenderTrigger?: (workspace: Workspace, isOpen: boolean) => React.ReactNode;\n  collapsed?: boolean;\n  avatarClassName?: string;\n}\n\nfunction WorkspaceTrigger({\n\tclassName,\n\trenderTrigger,\n  collapsed = false,\n  avatarClassName,\n\t...props\n}: WorkspaceTriggerProps) {\n\tconst { open, selectedWorkspace, getWorkspaceName } = useWorkspaceContext();\n\n\tif (!selectedWorkspace) return null;\n\n\tif (renderTrigger) {\n\t\treturn (\n\t\t\t<PopoverTrigger asChild>\n\t\t\t\t<button className={className} {...props}>\n\t\t\t\t\t{renderTrigger(selectedWorkspace, open)}\n\t\t\t\t</button>\n\t\t\t</PopoverTrigger>\n\t\t);\n\t}\n\n\treturn (\n\t\t<PopoverTrigger asChild>\n\t\t\t<button\n\t\t\t\tdata-state={open ? 'open' : 'closed'}\n\t\t\t\tclassName={cn(\n\t\t\t\t\t'flex w-full items-center justify-between text-sm',\n\t\t\t\t\t'focus:ring-ring focus:ring-2 focus:ring-offset-2 focus:outline-none',\n\t\t\t\t\tclassName,\n\t\t\t\t)}\n\t\t\t\t{...props}\n\t\t\t>\n\t\t\t\t<div className={cn(\"flex items-center gap-3\", collapsed ? \"w-full justify-center\" : \"min-w-0 flex-1\")}>\n\t\t\t\t\t<Avatar className={cn(avatarClassName)}>\n\t\t\t\t\t\t<AvatarImage\n\t\t\t\t\t\t\tsrc={(selectedWorkspace as any).logo}\n\t\t\t\t\t\t\talt={getWorkspaceName(selectedWorkspace)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<AvatarFallback className=\"text-xs\">\n\t\t\t\t\t\t\t{getWorkspaceName(selectedWorkspace).charAt(0).toUpperCase()}\n\t\t\t\t\t\t</AvatarFallback>\n\t\t\t\t\t</Avatar>\n\t\t\t\t\t{!collapsed && (\n\t\t\t\t\t\t<div className=\"flex min-w-0 flex-1 flex-col items-start\">\n\t\t\t\t\t\t\t<span className=\"truncate font-medium\">{getWorkspaceName(selectedWorkspace)}</span>\n\t\t\t\t\t\t\t<span className=\"text-muted-foreground truncate text-xs\">{(selectedWorkspace as any).plan}</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\t\t\t\t{!collapsed && <ChevronsUpDownIcon className=\"h-4 w-4 shrink-0 opacity-50\" />}\n\t\t\t</button>\n\t\t</PopoverTrigger>\n\t);\n}\n\n// Content component\ninterface WorkspaceContentProps\n\textends PopoverContentProps {\n\trenderWorkspace?: (\n\t\tworkspace: Workspace,\n\t\tisSelected: boolean,\n\t) => React.ReactNode;\n\ttitle?: string;\n\tsearchable?: boolean;\n\tonSearch?: (query: string) => void;\n}\n\nfunction WorkspaceContent({\n\tclassName,\n\tchildren,\n\trenderWorkspace,\n\ttitle = 'Workspaces',\n\tsearchable = false,\n\tonSearch,\n\tside = 'right',\n\talign = 'start',\n\tsideOffset = 8,\n\tuseTriggerWidth = false,\n\t...props\n}: WorkspaceContentProps) {\n\tconst {\n\t\tworkspaces,\n\t\topen,\n\t\tselectedWorkspace,\n\t\tonWorkspaceSelect,\n\t\tgetWorkspaceId,\n\t\tgetWorkspaceName,\n\t} = useWorkspaceContext();\n\n\tconst [searchQuery, setSearchQuery] = React.useState('');\n\n\tconst filteredWorkspaces = React.useMemo(() => {\n\t\tif (!searchQuery) return workspaces;\n\t\treturn workspaces.filter((ws) =>\n\t\t\tgetWorkspaceName(ws).toLowerCase().includes(searchQuery.toLowerCase()),\n\t\t);\n\t}, [workspaces, searchQuery, getWorkspaceName]);\n\n\tReact.useEffect(() => {\n\t\tonSearch?.(searchQuery);\n\t}, [searchQuery, onSearch]);\n\n\tconst defaultRenderWorkspace = (\n\t\tworkspace: Workspace,\n\t\tisSelected: boolean,\n\t) => (\n\t\t<div className=\"flex min-w-0 flex-1 items-center gap-2\">\n\t\t\t<Avatar className=\"h-6 w-6\">\n\t\t\t\t<AvatarImage\n\t\t\t\t\tsrc={(workspace as any).logo}\n\t\t\t\t\talt={getWorkspaceName(workspace)}\n\t\t\t\t/>\n\t\t\t\t<AvatarFallback className=\"text-xs\">\n\t\t\t\t\t{getWorkspaceName(workspace).charAt(0).toUpperCase()}\n\t\t\t\t</AvatarFallback>\n\t\t\t</Avatar>\n\t\t\t<div className=\"flex min-w-0 flex-1 flex-col items-start\">\n\t\t\t\t<span className=\"truncate text-sm\">{getWorkspaceName(workspace)}</span>\n\t\t\t\t{(workspace as any).plan && (\n\t\t\t\t\t<span className=\"text-muted-foreground text-xs\">\n\t\t\t\t\t\t{(workspace as any).plan}\n\t\t\t\t\t</span>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t\t{isSelected && <CheckIcon className=\"ml-auto h-4 w-4\" />}\n\t\t</div>\n\t);\n\n\treturn (\n\t\t<PopoverContent\n\t\t\tclassName={cn('p-0', className)}\n\t\t\talign={align}\n\t\t\tsideOffset={sideOffset}\n\t\t\tuseTriggerWidth={useTriggerWidth}\n\t\t\t{...{ ...props, side }}\n\t\t>\n\t\t\t<div className=\"border-b px-4 py-3\">\n\t\t\t\t<h3 className=\"text-sm font-semibold text-foreground\">{title}</h3>\n\t\t\t</div>\n\n\t\t\t{searchable && (\n\t\t\t\t<div className=\"border-b p-2\">\n\t\t\t\t\t<div className=\"relative\">\n\t\t\t\t\t\t<Search className=\"absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground\" />\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\tplaceholder=\"Search workspaces...\"\n\t\t\t\t\t\t\tvalue={searchQuery}\n\t\t\t\t\t\t\tonChange={(e) => setSearchQuery(e.target.value)}\n\t\t\t\t\t\t\tclassName=\"h-9 w-full rounded-md bg-transparent pl-9 text-sm placeholder:text-muted-foreground focus:bg-accent focus:outline-none\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t)}\n\n\t\t\t<div className=\"max-h-[300px] overflow-y-auto\">\n\t\t\t\t{filteredWorkspaces.length === 0 ? (\n\t\t\t\t\t<div className=\"text-muted-foreground px-3 py-2 text-center text-sm\">\n\t\t\t\t\t\tNo workspaces found\n\t\t\t\t\t</div>\n\t\t\t\t) : (\n\t\t\t\t\t<div className=\"space-y-1 p-2\">\n\t\t\t\t\t\t{filteredWorkspaces.map((workspace) => {\n\t\t\t\t\t\t\tconst isSelected =\n\t\t\t\t\t\t\t\tselectedWorkspace &&\n\t\t\t\t\t\t\t\tgetWorkspaceId(selectedWorkspace) === getWorkspaceId(workspace);\n\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\tkey={getWorkspaceId(workspace)}\n\t\t\t\t\t\t\t\t\tonClick={() => onWorkspaceSelect(workspace)}\n\t\t\t\t\t\t\t\t\tclassName={cn(\n\t\t\t\t\t\t\t\t\t\t'flex w-full items-center gap-2 rounded-md px-2 py-1.5 text-left text-sm',\n\t\t\t\t\t\t\t\t\t\t'hover:bg-accent hover:text-accent-foreground',\n\t\t\t\t\t\t\t\t\t\t'focus:outline-none',\n\t\t\t\t\t\t\t\t\t\tisSelected && 'bg-accent text-accent-foreground',\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{renderWorkspace\n\t\t\t\t\t\t\t\t\t\t? renderWorkspace(workspace, !!isSelected)\n\t\t\t\t\t\t\t\t\t\t: defaultRenderWorkspace(workspace, !!isSelected)}\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t})}\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t</div>\n\n\t\t\t{children && (\n\t\t\t\t<>\n\t\t\t\t\t<div className=\"border-t\" />\n\t\t\t\t\t<div className=\"p-1\">{children}</div>\n\t\t\t\t</>\n\t\t\t)}\n\t\t</PopoverContent>\n\t);\n}\n\nexport { WorkspaceProvider as Workspaces, WorkspaceTrigger, WorkspaceContent };"
  src/components/EnhancedSidebar.tsx: >-
    import React from 'react';

    import {
      Home,
      Settings,
      HelpCircle,
      Component,
      Rocket,
      MoreHorizontal,
      Bell,
      Search,
      FileText,
      Star,
      Trash2,
      FolderOpen,
      Mail,
      Bookmark,
      Download,
      User,
      Plus
    } from 'lucide-react';

    import { useAppStore, type ActivePage } from '@/store/appStore';

    import {
      Workspaces,
      WorkspaceTrigger,
      WorkspaceContent,
      type Workspace,
    } from './WorkspaceSwitcher';

    import {
      DropdownMenu,
      DropdownMenuContent,
      DropdownMenuItem,
      DropdownMenuTrigger,
    } from '@/components/ui/dropdown-menu';

    import {
      Sidebar,
      SidebarContent,
      SidebarHeader,
      SidebarTitle,
      SidebarBody,
      SidebarFooter,
      SidebarSection,
      SidebarMenuItem,
      SidebarMenuButton,
      SidebarMenuAction,
      SidebarLabel,
      SidebarBadge,
      SidebarTooltip,
      SidebarIcon,
      useSidebar,
    } from './Sidebar';

    import { cn } from '@/lib/utils';


    interface MyWorkspace extends Workspace {
      logo: string;
      plan: string;
    }


    const mockWorkspaces: MyWorkspace[] = [
      { id: 'ws1', name: 'Acme Inc.', logo: 'https://avatar.vercel.sh/acme.png', plan: 'Pro' },
      { id: 'ws2', name: 'Monsters Inc.', logo: 'https://avatar.vercel.sh/monsters.png', plan: 'Free' },
      { id: 'ws3', name: 'Stark Industries', logo: 'https://avatar.vercel.sh/stark.png', plan: 'Enterprise' },
    ];


    const SidebarWorkspaceTrigger = () => {
      const { isCollapsed, compactMode } = useSidebar();

      return (
        <WorkspaceTrigger
          collapsed={isCollapsed}
          className={cn(
            'rounded-xl transition-colors hover:bg-accent/50 w-full',
            isCollapsed ? 'p-2' : 'p-3 bg-accent/50',
          )}
          avatarClassName={cn(compactMode ? 'h-8 w-8' : 'h-10 w-10')}
        />
      );
    };


    interface SidebarProps {
      onMouseEnter?: () => void;
      onMouseLeave?: () => void;
    }


    export const EnhancedSidebar = React.forwardRef<HTMLDivElement,
    SidebarProps>(
      ({ onMouseEnter, onMouseLeave }, ref) => {
        const { sidebarWidth, compactMode } = useAppStore();
        const [selectedWorkspace, setSelectedWorkspace] = React.useState(mockWorkspaces[0]);

        return (
          <Sidebar
            ref={ref}
            style={{ width: sidebarWidth }}
            onMouseEnter={onMouseEnter}
            onMouseLeave={onMouseLeave}
          >
            <SidebarContent>
              <SidebarHeader>
                <div className="p-2 bg-primary/20 rounded-lg">
                  <Rocket className="w-5 h-5 text-primary" />
                </div>
                <SidebarTitle>Amazing App</SidebarTitle>
              </SidebarHeader>

              <SidebarBody>
                <SidebarSection title="Main">
                  <AppMenuItem icon={Home} label="Dashboard" page="dashboard" />
                  <AppMenuItem icon={Search} label="Search" />
                  <AppMenuItem icon={Bell} label="Notifications" badge={3} page="notifications" opensInSidePane />
                </SidebarSection>
                
                <SidebarSection title="Workspace" collapsible defaultExpanded>
                  <AppMenuItem icon={FileText} label="Documents" hasActions>
                    <AppMenuItem icon={FileText} label="Recent" isSubItem />
                    <AppMenuItem icon={Star} label="Starred" isSubItem />
                    <AppMenuItem icon={Trash2} label="Trash" isSubItem />
                  </AppMenuItem>
                  <AppMenuItem icon={FolderOpen} label="Projects" hasActions />
                  <AppMenuItem icon={Mail} label="Messages" badge={12} />
                </SidebarSection>
                
                <SidebarSection title="Personal" collapsible>
                  <AppMenuItem icon={Bookmark} label="Bookmarks" />
                  <AppMenuItem icon={Star} label="Favorites" />
                  <AppMenuItem icon={Download} label="Downloads" />
                </SidebarSection>

                <SidebarSection title="Components" collapsible defaultExpanded>
                  <AppMenuItem icon={Component} label="Toaster" page="toaster" />
                </SidebarSection>
              </SidebarBody>

              <SidebarFooter>
                <SidebarSection>
                  <AppMenuItem icon={User} label="Profile" />
                  <AppMenuItem icon={Settings} label="Settings" page="settings" />
                  <AppMenuItem icon={HelpCircle} label="Help" />
                </SidebarSection>

                <div className={cn(compactMode ? 'mt-4' : 'mt-6')}>
                  <Workspaces
                    workspaces={mockWorkspaces}
                    selectedWorkspaceId={selectedWorkspace.id}
                    onWorkspaceChange={setSelectedWorkspace}
                  >
                    <SidebarWorkspaceTrigger />
                    <WorkspaceContent>
                      <button className="flex w-full items-center gap-2 rounded-sm px-2 py-2 text-left text-sm hover:bg-accent hover:text-accent-foreground focus:outline-none">
                        <Plus className="h-4 w-4" />
                        <span>Create Workspace</span>
                      </button>
                    </WorkspaceContent>
                  </Workspaces>
                </div>
              </SidebarFooter>
            </SidebarContent>
          </Sidebar>
        );
      },
    );

    EnhancedSidebar.displayName = 'EnhancedSidebar';



    // Example of a reusable menu item component built with the new Sidebar
    primitives

    interface AppMenuItemProps {
      icon: React.ElementType;
      label: string;
      badge?: number;
      hasActions?: boolean;
      children?: React.ReactNode;
      isSubItem?: boolean;
      page?: ActivePage;
      opensInSidePane?: boolean;
    }


    const AppMenuItem: React.FC<AppMenuItemProps> = ({ icon: Icon, label, badge,
    hasActions, children, isSubItem = false, page, opensInSidePane = false }) =>
    {
      const { handleNavigation, isPageActive, openSidePane, activePage } = useAppStore();
      const isActive = page ? isPageActive(page) : false;
      const { compactMode } = useAppStore();
      const { isCollapsed } = useSidebar();

      const handleClick = () => {
        if (page) {
          if (opensInSidePane) {
            const pageToPaneMap: { [key in ActivePage]?: 'main' | 'settings' | 'toaster' | 'notifications' } = {
              dashboard: 'main',
              settings: 'settings',
              toaster: 'toaster',
              notifications: 'notifications',
            };
            if (pageToPaneMap[page]) openSidePane(pageToPaneMap[page]!);
          } else {
            handleNavigation(page);
          }
        }
      };

      return (
        <div className={isSubItem ? (compactMode ? 'ml-4' : 'ml-6') : ''}>
          <SidebarMenuItem>
            <SidebarMenuButton onClick={handleClick} isActive={isActive}>
              <SidebarIcon>
                <Icon className={isSubItem ? "w-3 h-3" : "w-4 h-4"}/>
              </SidebarIcon>
              <SidebarLabel>{label}</SidebarLabel>
              {badge && <SidebarBadge>{badge}</SidebarBadge>}
              <SidebarTooltip label={label} badge={badge} />
            </SidebarMenuButton>

            {hasActions && (
              <DropdownMenu>
                <DropdownMenuTrigger asChild>
                  <SidebarMenuAction>
                    <MoreHorizontal className="h-4 w-4" />
                  </SidebarMenuAction>
                </DropdownMenuTrigger>
                <DropdownMenuContent side="right" align="start">
                  <DropdownMenuItem>
                    <span>Edit {label}</span>
                  </DropdownMenuItem>
                  <DropdownMenuItem>
                    <span>Delete {label}</span>
                  </DropdownMenuItem>
                </DropdownMenuContent>
              </DropdownMenu>
            )}
          </SidebarMenuItem>
          {!isCollapsed && children && (
            <div className="space-y-1 mt-1">{children}</div>
          )}
        </div>
      );
    };
  src/components/NotificationsPage.tsx: >-
    import React from "react";

    import { Avatar, AvatarFallback, AvatarImage } from
    "@/components/ui/avatar";

    import { Badge } from "@/components/ui/badge";

    import { Button } from "@/components/ui/button";

    import { Card, CardContent, CardHeader } from "@/components/ui/card";

    import { Tabs, TabsList, TabsTrigger, TabsContent } from
    "@/components/ui/tabs";

    import { PageHeader } from "./PageHeader";

    import { cn } from "@/lib/utils";

    import { CheckCheck, Download, Settings, Bell } from "lucide-react";



    type Notification = {
      id: number;
      type: string;
      user: {
        name: string;
        avatar: string;
        fallback: string;
      };
      action: string;
      target?: string;
      content?: string;
      timestamp: string;
      timeAgo: string;
      isRead: boolean;
      hasActions?: boolean;
      file?: {
        name: string;
        size: string;
        type: string;
      };
    };


    const notifications: Array<Notification> = [
      {
        id: 1,
        type: "comment",
        user: { name: "Amélie", avatar: "https://api.dicebear.com/7.x/notionists/svg?seed=Amélie", fallback: "A" },
        action: "commented in",
        target: "Dashboard 2.0",
        content: "Really love this approach. I think this is the best solution for the document sync UX issue.",
        timestamp: "Friday 3:12 PM",
        timeAgo: "2 hours ago",
        isRead: false,
      },
      {
        id: 2,
        type: "follow",
        user: { name: "Sienna", avatar: "https://api.dicebear.com/7.x/notionists/svg?seed=Sienna", fallback: "S" },
        action: "followed you",
        timestamp: "Friday 3:04 PM",
        timeAgo: "2 hours ago",
        isRead: false,
      },
      {
        id: 3,
        type: "invitation",
        user: { name: "Ammar", avatar: "https://api.dicebear.com/7.x/notionists/svg?seed=Ammar", fallback: "A" },
        action: "invited you to",
        target: "Blog design",
        timestamp: "Friday 2:22 PM",
        timeAgo: "3 hours ago",
        isRead: true,
        hasActions: true,
      },
      {
        id: 4,
        type: "file_share",
        user: { name: "Mathilde", avatar: "https://api.dicebear.com/7.x/notionists/svg?seed=Mathilde", fallback: "M" },
        action: "shared a file in",
        target: "Dashboard 2.0",
        file: { name: "Prototype recording 01.mp4", size: "14 MB", type: "MP4" },
        timestamp: "Friday 1:40 PM",
        timeAgo: "4 hours ago",
        isRead: true,
      },
      {
        id: 5,
        type: "mention",
        user: { name: "James", avatar: "https://api.dicebear.com/7.x/notionists/svg?seed=James", fallback: "J" },
        action: "mentioned you in",
        target: "Project Alpha",
        content: "Hey @you, can you review the latest designs when you get a chance?",
        timestamp: "Thursday 11:30 AM",
        timeAgo: "1 day ago",
        isRead: true,
      },
      {
        id: 6,
        type: "like",
        user: { name: "Sofia", avatar: "https://api.dicebear.com/7.x/notionists/svg?seed=Sofia", fallback: "S" },
        action: "liked your comment in",
        target: "Team Meeting Notes",
        timestamp: "Thursday 9:15 AM",
        timeAgo: "1 day ago",
        isRead: true,
      },
    ];


    function NotificationItem({ notification }: { notification: Notification })
    {
      return (
        <div className="w-full py-4 first:pt-0 last:pb-0">
          <div className="flex gap-3">
            <Avatar className="size-11">
              <AvatarImage src={notification.user.avatar} alt={`${notification.user.name}'s profile picture`} />
              <AvatarFallback>{notification.user.fallback}</AvatarFallback>
            </Avatar>

            <div className="flex flex-1 flex-col space-y-2">
              <div className="flex items-start justify-between">
                <div className="text-sm">
                  <span className="font-semibold">{notification.user.name}</span>
                  <span className="text-muted-foreground"> {notification.action} </span>
                  {notification.target && <span className="font-semibold">{notification.target}</span>}
                  <div className="mt-0.5 text-xs text-muted-foreground">{notification.timeAgo}</div>
                </div>
                {!notification.isRead && <div className="size-2 rounded-full bg-primary mt-1 shrink-0"></div>}
              </div>

              {notification.content && <div className="rounded-lg bg-muted p-3 text-sm">{notification.content}</div>}

              {notification.file && (
                <div className="flex items-center gap-2 rounded-lg bg-muted p-2 border border-border">
                  <div className="relative shrink-0 w-10 h-10 flex items-center justify-center bg-background rounded-md border border-border">
                    <span className="absolute bottom-0.5 text-[10px] leading-none font-semibold text-primary-foreground bg-primary px-1 rounded-sm">{notification.file.type}</span>
                  </div>
                  <div className="flex-1 min-w-0">
                    <div className="text-sm font-medium truncate">{notification.file.name}</div>
                    <div className="text-xs text-muted-foreground">{notification.file.type} • {notification.file.size}</div>
                  </div>
                  <Button variant="ghost" size="icon" className="size-8 shrink-0">
                    <Download className="w-4 h-4" />
                  </Button>
                </div>
              )}

              {notification.hasActions && (
                <div className="flex gap-2">
                  <Button variant="outline" size="sm">Decline</Button>
                  <Button size="sm">Accept</Button>
                </div>
              )}
            </div>
          </div>
        </div>
      );
    }


    export function NotificationsPage({ isInSidePane = false }: { isInSidePane?:
    boolean }) {
      const [activeTab, setActiveTab] = React.useState<string>("all");

      const verifiedCount = notifications.filter((n) => n.type === "follow" || n.type === "like").length;
      const mentionCount = notifications.filter((n) => n.type === "mention").length;

      const getFilteredNotifications = () => {
        switch (activeTab) {
          case "verified": return notifications.filter((n) => n.type === "follow" || n.type === "like");
          case "mentions": return notifications.filter((n) => n.type === "mention");
          default: return notifications;
        }
      };

      const filteredNotifications = getFilteredNotifications();

      const content = (
        <Card className={cn("flex w-full flex-col shadow-none", isInSidePane ? "border-none" : "p-6 lg:p-8")}>
          <CardHeader className="p-0">
            <div className="flex items-center justify-between">
              <h3 className="text-lg font-semibold">
                Your notifications
              </h3>
              <div className="flex items-center gap-1">
                <Button variant="ghost" size="icon" className="size-8">
                  <CheckCheck className="size-4 text-muted-foreground" />
                </Button>
                <Button variant="ghost" size="icon" className="size-8">
                  <Settings className="size-4 text-muted-foreground" />
                </Button>
              </div>
            </div>

            <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full flex-col justify-start mt-4">
              <TabsList className="gap-1.5">
                <TabsTrigger value="all" className="gap-1.5">
                  View all <Badge variant="secondary" className="rounded-full">{notifications.length}</Badge>
                </TabsTrigger>
                <TabsTrigger value="verified" className="gap-1.5">
                  Verified <Badge variant="secondary" className="rounded-full">{verifiedCount}</Badge>
                </TabsTrigger>
                <TabsTrigger value="mentions" className="gap-1.5">
                  Mentions <Badge variant="secondary" className="rounded-full">{mentionCount}</Badge>
                </TabsTrigger>
              </TabsList>
            </Tabs>
          </CardHeader>

          <CardContent className="h-full p-0 mt-6">
            <div className="space-y-0 divide-y divide-dashed divide-border">
              {filteredNotifications.length > 0 ? (
                filteredNotifications.map((notification) => (
                  <NotificationItem key={notification.id} notification={notification} />
                ))
              ) : (
                <div className="flex flex-col items-center justify-center space-y-2.5 py-12 text-center">
                  <div className="rounded-full bg-muted p-4">
                    <Bell className="text-muted-foreground" />
                  </div>
                  <p className="text-sm font-medium text-muted-foreground">No notifications yet.</p>
                </div>
              )}
            </div>
          </CardContent>
        </Card>
      );

      return (
        <div className={cn("overflow-y-auto", !isInSidePane ? "h-full p-6 lg:px-12 space-y-8" : "h-full")}>
          {!isInSidePane && (
            <PageHeader
              title="Notifications"
              description="Manage your notifications and stay up-to-date."
            />
          )}
          {content}
        </div>
      );
    };
  src/components/RightPane.tsx: >-
    import { forwardRef } from 'react'

    import { SlidersHorizontal, Settings, ChevronRight, LayoutDashboard,
    ChevronsLeftRight, Component, Bell } from 'lucide-react'

    import { useAppStore } from '@/store/appStore'

    import { cn } from '@/lib/utils'

    import { SettingsContent } from './SettingsContent'

    import { DashboardContent } from './DashboardContent'

    import { ToasterDemo } from './ToasterDemo'

    import { NotificationsPage } from './NotificationsPage'


    export const RightPane = forwardRef<HTMLDivElement>((_props, ref) => {
      const { closeSidePane, setIsResizingRightPane, sidePaneContent, setActivePage } = useAppStore();

      const contentMap = {
        main: { title: 'Dashboard', icon: LayoutDashboard, page: 'dashboard', content: <DashboardContent isInSidePane={true} /> },
        settings: { title: 'Settings', icon: Settings, page: 'settings', content: <SettingsContent /> },
        toaster: { title: 'Toaster Demo', icon: Component, page: 'toaster', content: <ToasterDemo isInSidePane={true} /> },
        notifications: { title: 'Notifications', icon: Bell, page: 'notifications', content: <NotificationsPage isInSidePane={true} /> },
        details: { title: 'Details Panel', icon: SlidersHorizontal, content: <p className="text-muted-foreground">This is the side pane. It can be used to display contextual information, forms, or actions related to the main content.</p> }
      };

      const currentContent = contentMap[sidePaneContent as keyof typeof contentMap] || contentMap.details;
      const CurrentIcon = currentContent.icon;

      const handleMaximize = () => {
        if (currentContent.page) {
          setActivePage(currentContent.page as ActivePage);
        }
        closeSidePane()
      }

      return (
        <aside ref={ref} className="bg-card border-l border-border flex flex-col h-full overflow-hidden fixed top-0 right-0 z-[60]">
          <button
            onClick={closeSidePane}
            className="absolute top-1/2 -left-px -translate-y-1/2 -translate-x-full w-8 h-16 bg-card border border-r-0 border-border rounded-l-lg flex items-center justify-center hover:bg-accent transition-colors group z-10"
            title="Close pane"
          >
            <ChevronRight className="w-5 h-5 text-muted-foreground group-hover:text-foreground transition-colors" />
          </button>
          <div 
            className={cn(
              "absolute top-0 left-0 w-2 h-full bg-transparent hover:bg-primary/20 cursor-col-resize z-50 transition-colors duration-200 group -translate-x-1/2"
            )}
            onMouseDown={(e) => {
              e.preventDefault()
              setIsResizingRightPane(true)
            }}
          >
            <div className="w-0.5 h-full bg-border group-hover:bg-primary transition-colors duration-200 mx-auto" />
          </div>
          <div className="flex items-center justify-between p-4 border-b border-border h-20 flex-shrink-0 pl-6">
            <div className="flex items-center gap-2">
              <CurrentIcon className="w-5 h-5" />
              <h2 className="text-lg font-semibold whitespace-nowrap">
                {currentContent.title}
              </h2>
            </div>
            
            {currentContent.page && (
              <button
                onClick={handleMaximize}
                className="h-10 w-10 flex items-center justify-center hover:bg-accent rounded-full transition-colors mr-2"
                title="Move to Main View"
              >
                <ChevronsLeftRight className="w-5 h-5" />
              </button>
            )}
          </div>
          <div className="flex-1 overflow-y-auto px-8 py-6">
            {currentContent.content}
          </div>
        </aside>
      )
    })


    RightPane.displayName = "RightPane"
  src/components/UserDropdown.tsx: >-
    import { Avatar, AvatarFallback, AvatarImage } from
    "@/components/ui/avatar";

    import { Badge } from "@/components/ui/badge";

    import {
      DropdownMenu,
      DropdownMenuContent,
      DropdownMenuGroup,
      DropdownMenuItem,
      DropdownMenuPortal,
      DropdownMenuRadioGroup,
      DropdownMenuRadioItem,
      DropdownMenuSeparator,
      DropdownMenuSub,
      DropdownMenuSubContent,
      DropdownMenuSubTrigger,
      DropdownMenuTrigger,
    } from "@/components/ui/dropdown-menu";

    import { cn } from "@/lib/utils"

    import { Icon } from "@iconify/react";


    const MENU_ITEMS = {
      status: [
        { value: "focus", icon: "solar:emoji-funny-circle-line-duotone", label: "Focus" },
        { value: "offline", icon: "solar:moon-sleep-line-duotone", label: "Appear Offline" }
      ],
      profile: [
        { icon: "solar:user-circle-line-duotone", label: "Your profile", action: "profile" },
        { icon: "solar:sun-line-duotone", label: "Appearance", action: "appearance" },
        { icon: "solar:settings-line-duotone", label: "Settings", action: "settings" },
        { icon: "solar:bell-line-duotone", label: "Notifications", action: "notifications" }
      ],
      premium: [
        { 
          icon: "solar:star-bold", 
          label: "Upgrade to Pro", 
          action: "upgrade",
          iconClass: "text-amber-500",
          badge: { text: "20% off", className: "bg-amber-500 text-white text-[11px]" }
        },
        { icon: "solar:gift-line-duotone", label: "Referrals", action: "referrals" }
      ],
      support: [
        { icon: "solar:download-line-duotone", label: "Download app", action: "download" },
        { 
          icon: "solar:letter-unread-line-duotone", 
          label: "What's new?", 
          action: "whats-new",
          rightIcon: "solar:square-top-down-line-duotone"
        },
        { 
          icon: "solar:question-circle-line-duotone", 
          label: "Get help?", 
          action: "help",
          rightIcon: "solar:square-top-down-line-duotone"
        }
      ],
      account: [
        { 
          icon: "solar:users-group-rounded-bold-duotone", 
          label: "Switch account", 
          action: "switch",
          showAvatar: false
        },
        { icon: "solar:logout-2-bold-duotone", label: "Log out", action: "logout" }
      ]
    };


    // Interface for menu item for better type safety

    interface MenuItem {
      value?: string;
      icon: string;
      label: string;
      action?: string;
      iconClass?: string;
      badge?: { text: string; className: string };
      rightIcon?: string;
      showAvatar?: boolean;
    }


    export const UserDropdown = ({ 
      user = {
        name: "Ayman Echakar",
        username: "@aymanch-03",
        avatar: "https://avatars.githubusercontent.com/u/126724835?v=4",
        initials: "AE",
        status: "online"
      },
      onAction = () => {},
      onStatusChange = () => {},
      selectedStatus = "online",
      promoDiscount = "20% off",
    }) => {
      const renderMenuItem = (item: MenuItem, index: number) => (
        <DropdownMenuItem 
          key={index}
          className={cn(
            "px-3 py-2", // Consistent with base component
            item.badge || item.showAvatar || item.rightIcon ? "justify-between" : ""
          )}
          onClick={() => item.action && onAction(item.action)}
        >
          <span className="flex items-center gap-2 font-medium">
            <Icon
              icon={item.icon}
              className={cn("h-5 w-5 text-muted-foreground", item.iconClass)}
            />
            {item.label}
          </span>
          {item.badge && (
            <Badge className={item.badge.className}>
              {promoDiscount || item.badge.text}
            </Badge>
          )}
          {item.rightIcon && (
            <Icon
              icon={item.rightIcon}
              className="h-4 w-4 text-muted-foreground"
            />
          )}
          {item.showAvatar && (
            <Avatar className="cursor-pointer h-6 w-6 shadow border-2 border-background">
              <AvatarImage src={user.avatar} alt={user.name} />
              <AvatarFallback>{user.initials}</AvatarFallback>
            </Avatar>
          )}
        </DropdownMenuItem>
      );

      const getStatusColor = (status: string) => {
        const colors = {
          online: "text-green-600 bg-green-100 border-green-300 dark:text-green-400 dark:bg-green-900/30 dark:border-green-500/50",
          offline: "text-muted-foreground bg-muted border-border",
          busy: "text-destructive bg-destructive/20 border-destructive/30"
        };
        return colors[status.toLowerCase() as keyof typeof colors] || colors.online;
      };

      return (
        <DropdownMenu>
          <DropdownMenuTrigger asChild>
            <Avatar className="cursor-pointer h-10 w-10 border-2 border-transparent hover:border-primary transition-colors">
              <AvatarImage src={user.avatar} alt={user.name} />
              <AvatarFallback>{user.initials}</AvatarFallback>
            </Avatar>
          </DropdownMenuTrigger>

          <DropdownMenuContent className="no-scrollbar w-[310px] p-2" align="end">
            <div className="flex items-center">
              <div className="flex-1 flex items-center gap-3">
                <Avatar className="cursor-pointer h-10 w-10">
                  <AvatarImage src={user.avatar} alt={user.name} />
                  <AvatarFallback>{user.initials}</AvatarFallback>
                </Avatar>
                <div>
                  <h3 className="font-semibold">{user.name}</h3>
                  <p className="text-muted-foreground text-sm">{user.username}</p>
                </div>
              </div>
              <Badge variant="outline" className={cn("border-[0.5px] text-xs font-normal rounded-md capitalize", getStatusColor(user.status))}>
                {user.status}
              </Badge>
            </div>
            
            <DropdownMenuSeparator className="my-2" />
            
            <DropdownMenuGroup>
              <DropdownMenuSub>
                <DropdownMenuSubTrigger className="w-full">
                  <span className="flex items-center gap-2 font-medium">
                    <Icon icon="solar:smile-circle-line-duotone" className="h-5 w-5" />
                    Update status
                  </span>
                </DropdownMenuSubTrigger>
                <DropdownMenuPortal>
                  <DropdownMenuSubContent>
                    <DropdownMenuRadioGroup value={selectedStatus} onValueChange={onStatusChange}>
                      {MENU_ITEMS.status.map((status, index) => (
                        <DropdownMenuRadioItem className="gap-2" key={index} value={status.value}>
                          <Icon icon={status.icon} className="h-5 w-5 text-muted-foreground" />
                          {status.label}
                        </DropdownMenuRadioItem>
                      ))}
                    </DropdownMenuRadioGroup>
                  </DropdownMenuSubContent>
                </DropdownMenuPortal>
              </DropdownMenuSub>
            </DropdownMenuGroup>

            <DropdownMenuSeparator className="my-2" />
            <DropdownMenuGroup>
              {MENU_ITEMS.profile.map(renderMenuItem)}
            </DropdownMenuGroup>

            <DropdownMenuSeparator className="my-2" />
            <DropdownMenuGroup>
              {MENU_ITEMS.premium.map(renderMenuItem)}
            </DropdownMenuGroup>

            <DropdownMenuSeparator className="my-2" />
            <DropdownMenuGroup>
              {MENU_ITEMS.support.map(renderMenuItem)}
            </DropdownMenuGroup>
         
            <DropdownMenuSeparator className="my-2" />
            <DropdownMenuGroup>
              {MENU_ITEMS.account.map(renderMenuItem)}
            </DropdownMenuGroup>
          </DropdownMenuContent>
        </DropdownMenu>
      );
    };
  src/components/Sidebar.tsx: >-
    import * as React from 'react';

    import { ChevronDown } from 'lucide-react';

    import { Slot } from '@radix-ui/react-slot';

    import { useAppStore } from '@/store/appStore';

    import { SIDEBAR_STATES } from '@/lib/utils';

    import { cn } from '@/lib/utils';

    import { Button } from '@/components/ui/button';


    // --- Context ---

    interface SidebarContextValue {
      isCollapsed: boolean;
      isPeek: boolean;
      compactMode: boolean;
    }


    const SidebarContext = React.createContext<SidebarContextValue |
    null>(null);


    export const useSidebar = () => {
      const context = React.useContext(SidebarContext);
      if (!context) {
        throw new Error('useSidebar must be used within a Sidebar component');
      }
      return context;
    };


    // --- Main Sidebar Component ---

    interface SidebarProps extends React.HTMLAttributes<HTMLDivElement> {
      children: React.ReactNode;
    }


    const Sidebar = React.forwardRef<HTMLDivElement, SidebarProps>(
      ({ children, className, ...props }, ref) => {
        const { sidebarState, compactMode } = useAppStore();
        const isCollapsed = sidebarState === SIDEBAR_STATES.COLLAPSED;
        const isPeek = sidebarState === SIDEBAR_STATES.PEEK;

        return (
          <SidebarContext.Provider value={{ isCollapsed, isPeek, compactMode }}>
            <div
              ref={ref}
              className={cn(
                'relative bg-card flex-shrink-0',
                'h-full',
                isPeek && 'shadow-xl z-40',
                compactMode && 'text-sm',
                className,
              )}
              {...props}
            >
              {isPeek && <div className="absolute inset-0 bg-background/80 backdrop-blur-sm" />}
              {children}
            </div>
          </SidebarContext.Provider>
        );
      },
    );

    Sidebar.displayName = 'Sidebar';


    // --- Sidebar Content Wrapper ---

    const SidebarContent = React.forwardRef<
      HTMLDivElement,
      React.HTMLAttributes<HTMLDivElement>
    >(({ className, ...props }, ref) => {
      const { compactMode } = useSidebar();
      return (
        <div
          ref={ref}
          className={cn(
            'relative z-10 h-full flex flex-col',
            compactMode ? 'p-3' : 'p-4',
            className,
          )}
          {...props}
        />
      );
    });

    SidebarContent.displayName = 'SidebarContent';


    // --- Sidebar Header ---

    const SidebarHeader = React.forwardRef<
      HTMLDivElement,
      React.HTMLAttributes<HTMLDivElement>
    >(({ className, ...props }, ref) => {
      const { isCollapsed } = useSidebar();
      return (
        <div
          ref={ref}
          className={cn(
            'flex items-center gap-3',
            isCollapsed ? 'justify-center' : 'px-3',
            'h-16',
            className,
          )}
          {...props}
        />
      );
    });

    SidebarHeader.displayName = 'SidebarHeader';


    const SidebarTitle = React.forwardRef<
      HTMLParagraphElement,
      React.HTMLAttributes<HTMLParagraphElement>
    >(({ className, ...props }, ref) => {
      const { isCollapsed } = useSidebar();
      if (isCollapsed) return null;
      return (
        <h1
          ref={ref}
          className={cn('text-lg font-bold nav-label', className)}
          {...props}
        />
      );
    });

    SidebarTitle.displayName = 'SidebarTitle';


    // --- Sidebar Body ---

    const SidebarBody = React.forwardRef<
      HTMLDivElement,
      React.HTMLAttributes<HTMLDivElement>
    >(({ className, ...props }, ref) => (
      <div
        ref={ref}
        className={cn(
          'flex-1 overflow-y-auto space-y-6 pt-4',
          className,
        )}
        {...props}
      />
    ));

    SidebarBody.displayName = 'SidebarBody';


    // --- Sidebar Footer ---

    const SidebarFooter = React.forwardRef<
      HTMLDivElement,
      React.HTMLAttributes<HTMLDivElement>
    >(({ className, ...props }, ref) => {
      const { compactMode } = useSidebar();
      return (
        <div
          ref={ref}
          className={cn('pt-4 border-t border-border', compactMode && 'pt-3', className)}
          {...props}
        />
      );
    });

    SidebarFooter.displayName = 'SidebarFooter';


    // --- Sidebar Section ---

    const SidebarSection = React.forwardRef<
      HTMLDivElement,
      React.HTMLAttributes<HTMLDivElement> & {
        title?: string;
        collapsible?: boolean;
        defaultExpanded?: boolean;
      }
    >(({ title, collapsible = false, defaultExpanded = true, children, ...props
    }, ref) => {
      const { isCollapsed } = useSidebar();
      const [isExpanded, setIsExpanded] = React.useState(defaultExpanded);

      const handleToggle = () => {
        if (collapsible) {
          setIsExpanded(!isExpanded);
        }
      };

      return (
        <div ref={ref} className="space-y-1" {...props}>
          {!isCollapsed && title && (
            <div
              className={cn(
                'flex items-center justify-between px-3 text-xs font-medium text-muted-foreground uppercase tracking-wider',
                collapsible && 'cursor-pointer hover:text-foreground transition-colors',
              )}
              onClick={handleToggle}
            >
              <span className="section-title">{title}</span>
              {collapsible && (
                <ChevronDown
                  className={cn(
                    'section-chevron w-3 h-3 transition-transform',
                    isExpanded ? 'rotate-0' : '-rotate-90',
                  )}
                />
              )}
            </div>
          )}
          {(!collapsible || isExpanded || isCollapsed) && (
            <nav className="space-y-1">{children}</nav>
          )}
        </div>
      );
    });

    SidebarSection.displayName = 'SidebarSection';


    // --- Sidebar Menu Item ---

    const SidebarMenuItem = React.forwardRef<
      HTMLDivElement,
      React.HTMLAttributes<HTMLDivElement>
    >(({ className, ...props }, ref) => {
      return <div ref={ref} className={cn('group/item relative flex items-stretch', className)} {...props} />;
    });

    SidebarMenuItem.displayName = 'SidebarMenuItem';



    // --- Sidebar Menu Button ---

    interface SidebarMenuButtonProps extends
    React.ButtonHTMLAttributes<HTMLButtonElement> {
      asChild?: boolean;
      isActive?: boolean;
    }

    const SidebarMenuButton = React.forwardRef<HTMLButtonElement,
    SidebarMenuButtonProps>(
      ({ className, asChild = false, isActive, ...props }, ref) => {
        const { isCollapsed, compactMode } = useSidebar();
        const Comp = asChild ? Slot : 'button';

        return (
          <Comp
            ref={ref}
            className={cn(
              'group flex items-center gap-3 rounded-lg cursor-pointer transition-all duration-200 w-full text-left flex-1',
              compactMode ? 'px-2 py-1.5' : 'px-4 py-2.5',
              'hover:bg-accent',
              isActive && 'bg-primary text-primary-foreground hover:bg-primary/90',
              isCollapsed && 'justify-center',
              className
            )}
            {...props}
          />
        );
      }
    );

    SidebarMenuButton.displayName = 'SidebarMenuButton';


    // --- Sidebar Menu Action ---

    const SidebarMenuAction = React.forwardRef<
      HTMLButtonElement,
      React.ButtonHTMLAttributes<HTMLButtonElement>
    >(({ className, ...props }, ref) => {
      const { isCollapsed } = useSidebar();
      if (isCollapsed) return null;
      return (
        <Button
          ref={ref}
          variant="ghost"
          size="icon"
          className={cn(
            'h-full w-8 rounded-l-none opacity-0 group-hover/item:opacity-100 transition-opacity',
            'focus:opacity-100', // show on focus for accessibility
            className
          )}
          {...props}
        />
      );
    });

    SidebarMenuAction.displayName = 'SidebarMenuAction';


    // --- Sidebar Menu Label ---

    const SidebarLabel = React.forwardRef<
      HTMLSpanElement,
      React.HTMLAttributes<HTMLSpanElement>
    >(({ className, ...props }, ref) => {
      const { isCollapsed } = useSidebar();
      if (isCollapsed) return null;
      return (
        <span
          ref={ref}
          className={cn('nav-label flex-1 font-medium truncate', className)}
          {...props}
        />
      );
    });

    SidebarLabel.displayName = 'SidebarLabel';



    // --- Sidebar Menu Badge ---

    const SidebarBadge = React.forwardRef<
      HTMLSpanElement,
      React.HTMLAttributes<HTMLSpanElement>
    >(({ className, children, ...props }, ref) => {
      const { isCollapsed } = useSidebar();
      if (isCollapsed) return null;
      const badgeContent = typeof children === 'number' && children > 99 ? '99+' : children;
      return (
        <span
          ref={ref}
          className={cn(
            'nav-badge bg-destructive text-destructive-foreground text-xs px-1.5 py-0.5 rounded-full min-w-[1.25rem] text-center',
            className
          )}
          {...props}
        >
          {badgeContent}
        </span>
      );
    });

    SidebarBadge.displayName = 'SidebarBadge';



    // --- Sidebar Tooltip ---

    interface SidebarTooltipProps extends React.HTMLAttributes<HTMLDivElement> {
      label: string;
      badge?: number | string;
    }

    const SidebarTooltip = ({ label, badge, className, ...props }:
    SidebarTooltipProps) => {
      const { isCollapsed } = useSidebar();
      if (!isCollapsed) return null;
      return (
        <div
          className={cn(
            'absolute left-full ml-2 px-2 py-1 bg-popover text-popover-foreground text-sm rounded-md shadow-lg opacity-0 group-hover:opacity-100 transition-opacity pointer-events-none whitespace-nowrap z-50',
            className
          )}
          {...props}
        >
          {label}
          {badge && (
            <span className="ml-2 bg-destructive text-destructive-foreground text-xs px-1.5 py-0.5 rounded-full">
              {badge > 99 ? '99+' : badge}
            </span>
          )}
        </div>
      );
    };

    SidebarTooltip.displayName = 'SidebarTooltip';



    // --- Icon Wrapper for consistent sizing ---

    const SidebarIcon = ({ children, className }: { children: React.ReactNode,
    className?: string }) => {
      return (
        <div className={cn("flex-shrink-0 w-4 h-4", className)}>
          {children}
        </div>
      )
    }


    export {
      Sidebar,
      SidebarContent,
      SidebarHeader,
      SidebarTitle,
      SidebarBody,
      SidebarFooter,
      SidebarSection,
      SidebarMenuItem,
      SidebarMenuButton,
      SidebarMenuAction,
      SidebarLabel,
      SidebarBadge,
      SidebarTooltip,
      SidebarIcon
    };
approved: true
linesAdded: null
linesRemoved: null
linesDifference: null
gitCommittedAt: null
status: committed
id: 83
