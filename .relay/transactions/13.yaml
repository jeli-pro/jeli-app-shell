uuid: c2584148-5c74-4b5c-a537-88544c0627d3
projectId: amazing-app-shell
createdAt: '2025-10-10T10:20:02.081Z'
gitCommitMsg: >-
  feat(ui): enhance sidebar and top bar layout

  - Adds a logo and title to the sidebar header. - Horizontally centers icons in
  the collapsed sidebar for improved aesthetics. - Replaces the logo in the top
  bar with a breadcrumb navigation component.
promptSummary: >-
  I've updated the sidebar and top bar as requested. The sidebar now has a logo
  and centers icons when collapsed. The top bar has been updated to show
  breadcrumbs instead of a logo.
reasoning:
  - >-
    Based on your request, I'll make the following modifications to improve the
    application shell:
  - >-
    1.  **Center Sidebar Icons**: In the collapsed state, all icons in the
    sidebar, including active ones, will be horizontally centered for a cleaner
    look.
  - >-
    2.  **Add Sidebar Logo**: A logo and application title ("AppShell") will be
    added to the top of the sidebar. The logo will remain when collapsed, while
    the text will animate out.
  - >-
    3.  **Implement Top Bar Breadcrumbs**: The logo in the top bar will be
    removed and replaced with a breadcrumb navigation system to provide better
    contextual awareness.
  - These changes will enhance both the UI and UX of the application shell.
  - '### 1. Update Enhanced Sidebar'
  - >-
    I will modify `src/components/EnhancedSidebar.tsx` to add a logo at the top
    and to center the navigation icons when the sidebar is in its collapsed
    state.
  - '### 2. Update Top Bar'
  - >-
    Next, I'll edit `src/components/TopBar.tsx` to replace the logo with a
    breadcrumb component.
operations:
  - type: write
    path: src/components/EnhancedSidebar.tsx
    content: >+
      --- src/components/EnhancedSidebar.tsx

      +++ src/components/EnhancedSidebar.tsx

      @@ -10,13 +10,14 @@
         FolderOpen,
         Bookmark,
         Download,
         Star,
         Trash2,
      -  ChevronDown

      +  ChevronDown,

      +  Layout
       } from 'lucide-react'
       import { cn } from '@/lib/utils'
       import { useAppStore } from '@/store/appStore'
      @@ -137,7 +138,8 @@
                   compactMode ? "px-2 py-1.5" : "px-4 py-2.5",
                   "hover:bg-accent",
                   item.isActive && "bg-primary text-primary-foreground hover:bg-primary/90",
      -            depth > 0 && "text-sm"

      +            depth > 0 && "text-sm",

      +            isCollapsed && "justify-center"
                 )}
                 onMouseEnter={(e) => handleItemHover(e.currentTarget, true)}
                 onMouseLeave={(e) => handleItemHover(e.currentTarget, false)}
      @@ -194,6 +196,26 @@
                   compactMode ? "p-3" : "p-4"
                 )}
               >
      +          {/* Logo */}

      +          <div

      +            className={cn(

      +              "flex items-center gap-3",

      +              isCollapsed ? "justify-center" : "",

      +              compactMode ? "h-10" : "h-16"

      +            )}

      +          >

      +            <div className="w-10 h-10 bg-gradient-to-br from-primary
      to-primary/60 rounded-full flex items-center justify-center
      flex-shrink-0">

      +              <Layout className="w-5 h-5 text-primary-foreground" />

      +            </div>

      +            {!isCollapsed && (

      +              <span className="font-semibold text-xl text-foreground
      nav-label truncate">

      +                AppShell

      +              </span>

      +            )}

      +          </div>

      +
                 {/* Navigation Sections */}
                 <div className="flex-1 overflow-y-auto overflow-x-hidden space-y-6 pt-4">
                   {navigationSections.map((section, sectionIndex) => {

    patchStrategy: standard-diff
  - type: write
    path: src/components/TopBar.tsx
    content: >+
      --- src/components/TopBar.tsx

      +++ src/components/TopBar.tsx

      @@ -4,11 +4,11 @@
         Minimize, 
         Moon, 
         Sun,
      -  Layout,
         Settings,
         Command,
      -  Zap

      +  Zap,

      +  ChevronRight
       } from 'lucide-react'
       import { SettingsPanel } from './SettingsPanel'
       import { cn } from '@/lib/utils'
      @@ -32,32 +32,27 @@
       }: TopBarProps) {
         const [isSettingsOpen, setIsSettingsOpen] = useState(false)
         return (
           <div className="h-20 bg-card/80 backdrop-blur-sm border-b border-border flex items-center justify-between px-6 z-50">
      -      {/* Left Section - Logo and Sidebar Controls */}

      +      {/* Left Section - Sidebar Controls & Breadcrumbs */}
             <div className="flex items-center gap-4">
      -        {/* Logo */}

      -        <div className="flex items-center gap-2">

      -          <div className="w-10 h-10 bg-gradient-to-br from-primary
      to-primary/60 rounded-full flex items-center justify-center">

      -            <Layout className="w-5 h-5 text-primary-foreground" />

      -          </div>

      -          <span className="font-semibold text-xl text-foreground hidden
      sm:inline">AppShell</span>

      +        {/* Sidebar Controls */}

      +        <button

      +          onClick={onToggleSidebar}

      +          className={cn(

      +            "h-10 w-10 flex items-center justify-center rounded-full
      hover:bg-accent transition-colors"

      +          )}

      +          title="Toggle Sidebar"

      +        >

      +          <Menu className="w-5 h-5" />

      +        </button>

      +

      +        {/* Breadcrumbs */}

      +        <div className="hidden md:flex items-center gap-2 text-sm">

      +          <a href="#" className="text-muted-foreground
      hover:text-foreground transition-colors">Home</a>

      +          <ChevronRight className="w-4 h-4 text-muted-foreground" />

      +          <span className="font-medium text-foreground">Dashboard</span>
               </div>
      -

      -        {/* Sidebar Controls */}

      -        <div className="flex items-center">

      -          <button

      -            onClick={onToggleSidebar}

      -            className={cn(

      -              "h-10 w-10 flex items-center justify-center rounded-full
      hover:bg-accent transition-colors"

      -            )}

      -            title="Toggle Sidebar"

      -          >

      -            <Menu className="w-5 h-5" />

      -          </button>

      -        </div>
             </div>
       
             {/* Right Section - View Controls */}
             <div className="flex items-center gap-3">

    patchStrategy: standard-diff
snapshot:
  src/components/EnhancedSidebar.tsx: |-
    import React, { forwardRef, useRef, useEffect } from 'react'
    import { gsap } from 'gsap'
    import { 
      Home, 
      Search, 
      Bell, 
      User, 
      Settings, 
      HelpCircle, 
      FileText, 
      Calendar, 
      Mail,
      FolderOpen,
      Bookmark,
      Download,
      Star,
      Trash2,
      ChevronDown
    } from 'lucide-react'
    import { cn } from '@/lib/utils'
    import { useAppStore } from '@/store/appStore'
    import { SIDEBAR_STATES } from '@/lib/utils'

    interface NavItem {
      icon: React.ReactNode
      label: string
      href: string
      badge?: number
      isActive?: boolean
      children?: NavItem[]
    }

    interface NavSection {
      title: string
      items: NavItem[]
      collapsible?: boolean
      defaultExpanded?: boolean
    }

    const navigationSections: NavSection[] = [
      {
        title: "Main",
        items: [
          { icon: <Home className="w-4 h-4" />, label: "Dashboard", href: "/", isActive: true },
          { icon: <Search className="w-4 h-4" />, label: "Search", href: "/search" },
          { icon: <Bell className="w-4 h-4" />, label: "Notifications", href: "/notifications", badge: 3 },
        ]
      },
      {
        title: "Workspace",
        collapsible: true,
        defaultExpanded: true,
        items: [
          { 
            icon: <FileText className="w-4 h-4" />, 
            label: "Documents", 
            href: "/documents",
            children: [
              { icon: <FileText className="w-3 h-3" />, label: "Recent", href: "/documents/recent" },
              { icon: <Star className="w-3 h-3" />, label: "Starred", href: "/documents/starred" },
              { icon: <Trash2 className="w-3 h-3" />, label: "Trash", href: "/documents/trash" },
            ]
          },
          { icon: <FolderOpen className="w-4 h-4" />, label: "Projects", href: "/projects" },
          { icon: <Calendar className="w-4 h-4" />, label: "Calendar", href: "/calendar" },
          { icon: <Mail className="w-4 h-4" />, label: "Messages", href: "/messages", badge: 12 },
        ]
      },
      {
        title: "Personal",
        collapsible: true,
        defaultExpanded: false,
        items: [
          { icon: <Bookmark className="w-4 h-4" />, label: "Bookmarks", href: "/bookmarks" },
          { icon: <Star className="w-4 h-4" />, label: "Favorites", href: "/favorites" },
          { icon: <Download className="w-4 h-4" />, label: "Downloads", href: "/downloads" },
        ]
      }
    ]

    const bottomNavItems: NavItem[] = [
      { icon: <User className="w-4 h-4" />, label: "Profile", href: "/profile" },
      { icon: <Settings className="w-4 h-4" />, label: "Settings", href: "/settings" },
      { icon: <HelpCircle className="w-4 h-4" />, label: "Help", href: "/help" },
    ]

    interface SidebarProps {
      onMouseEnter?: () => void
      onMouseLeave?: () => void
    }

    export const EnhancedSidebar = forwardRef<HTMLDivElement, SidebarProps>(
      ({ onMouseEnter, onMouseLeave }, ref) => {
        const { sidebarState, sidebarWidth, reducedMotion, compactMode } = useAppStore()
        const contentRef = useRef<HTMLDivElement>(null)
        const sectionsRef = useRef<(HTMLDivElement | null)[]>([])
        const [expandedSections, setExpandedSections] = React.useState<Set<string>>(
          new Set(navigationSections.filter(s => s.defaultExpanded).map(s => s.title))
        )

        const isCollapsed = sidebarState === SIDEBAR_STATES.COLLAPSED
        const isHidden = sidebarState === SIDEBAR_STATES.HIDDEN
        const isPeek = sidebarState === SIDEBAR_STATES.PEEK
        const animationDuration = reducedMotion ? 0.1 : 0.3

        // Toggle section expansion
        const toggleSection = (sectionTitle: string) => {
          setExpandedSections(prev => {
            const newSet = new Set(prev)
            if (newSet.has(sectionTitle)) {
              newSet.delete(sectionTitle)
            } else {
              newSet.add(sectionTitle)
            }
            return newSet
          })
        }

        // Animate content visibility
        useEffect(() => {
          if (!contentRef.current) return

          const labels = contentRef.current.querySelectorAll('.nav-label')
          const badges = contentRef.current.querySelectorAll('.nav-badge')
          const sectionTitles = contentRef.current.querySelectorAll('.section-title')
          const chevrons = contentRef.current.querySelectorAll('.section-chevron')

          if (isCollapsed) {
            gsap.to([labels, badges, sectionTitles, chevrons], {
              opacity: 0,
              scale: 0.8,
              duration: animationDuration,
              ease: "power2.out"
            })
          } else {
            gsap.to([labels, badges, sectionTitles, chevrons], {
              opacity: 1,
              scale: 1,
              duration: animationDuration,
              delay: 0.1,
              ease: "power2.out"
            })
          }
        }, [isCollapsed, animationDuration])

        // Hover animations for nav items
        const handleItemHover = (element: HTMLElement, isHovering: boolean) => {
          if (!element) return

          gsap.to(element, {
            scale: isHovering ? 1.02 : 1,
            x: isHovering ? 4 : 0,
            duration: animationDuration,
            ease: "power2.out"
          })
        }

        if (isHidden) {
          return null
        }

        const renderNavItem = (item: NavItem, depth = 0) => (
          <div key={item.label} className={cn("space-y-1", depth > 0 && "ml-6")}>
            <div
              className={cn(
                "group relative flex items-center gap-3 rounded-lg cursor-pointer transition-all duration-200",
                compactMode ? "px-2 py-1.5" : "px-4 py-2.5",
                "hover:bg-accent",
                item.isActive && "bg-primary text-primary-foreground hover:bg-primary/90",
                depth > 0 && "text-sm"
              )}
              onMouseEnter={(e) => handleItemHover(e.currentTarget, true)}
              onMouseLeave={(e) => handleItemHover(e.currentTarget, false)}
            >
              <div className="flex-shrink-0">
                {item.icon}
              </div>
              
              {!isCollapsed && (
                <>
                  <span className="nav-label flex-1 font-medium truncate">
                    {item.label}
                  </span>
                  
                  {item.badge && (
                    <span className="nav-badge bg-destructive text-destructive-foreground text-xs px-1.5 py-0.5 rounded-full min-w-[1.25rem] text-center">
                      {item.badge > 99 ? '99+' : item.badge}
                    </span>
                  )}

                  {item.children && (
                    <ChevronDown className="w-3 h-3 transition-transform" />
                  )}
                </>
              )}

              {/* Tooltip for collapsed state */}
              {isCollapsed && (
                <div className="absolute left-full ml-2 px-2 py-1 bg-popover text-popover-foreground text-sm rounded-md shadow-lg opacity-0 group-hover:opacity-100 transition-opacity pointer-events-none whitespace-nowrap z-50">
                  {item.label}
                  {item.badge && (
                    <span className="ml-2 bg-destructive text-destructive-foreground text-xs px-1.5 py-0.5 rounded-full">
                      {item.badge > 99 ? '99+' : item.badge}
                    </span>
                  )}
                </div>
              )}
            </div>

            {/* Children items */}
            {item.children && !isCollapsed && (
              <div className="space-y-1">
                {item.children.map(child => renderNavItem(child, depth + 1))}
              </div>
            )}
          </div>
        )

        return (
          <div
            ref={ref}
            className={cn(
              "relative bg-card flex-shrink-0",
              "h-full overflow-hidden",
              isPeek && "shadow-xl z-40",
              compactMode && "text-sm"
            )}
            style={{ width: sidebarWidth }}
            onMouseEnter={onMouseEnter}
            onMouseLeave={onMouseLeave}
          >
            {/* Background blur effect for peek mode */}
            {isPeek && (
              <div className="absolute inset-0 bg-background/80 backdrop-blur-sm" />
            )}

            <div 
              ref={contentRef}
              className={cn(
                "relative z-10 h-full flex flex-col",
                compactMode ? "p-3" : "p-4"
              )}
            >
              {/* Navigation Sections */}
              <div className="flex-1 overflow-y-auto overflow-x-hidden space-y-6 pt-4">
                {navigationSections.map((section, sectionIndex) => {
                  const isExpanded = expandedSections.has(section.title)
                  
                  return (
                    <div 
                      key={section.title}
                      ref={el => sectionsRef.current[sectionIndex] = el}
                      className="space-y-1"
                    >
                      {!isCollapsed && (
                        <div 
                          className={cn(
                            "flex items-center justify-between px-3 text-xs font-medium text-muted-foreground uppercase tracking-wider",
                            section.collapsible && "cursor-pointer hover:text-foreground transition-colors"
                          )}
                          onClick={() => section.collapsible && toggleSection(section.title)}
                        >
                          <span className="section-title">{section.title}</span>
                          {section.collapsible && (
                            <ChevronDown 
                              className={cn(
                                "section-chevron w-3 h-3 transition-transform",
                                isExpanded ? "rotate-0" : "-rotate-90"
                              )} 
                            />
                          )}
                        </div>
                      )}
                      
                      {(!section.collapsible || isExpanded || isCollapsed) && (
                        <nav className="space-y-1">
                          {section.items.map(item => renderNavItem(item))}
                        </nav>
                      )}
                    </div>
                  )
                })}
              </div>

              {/* Bottom Navigation */}
              <div className={cn("pt-4 border-t border-border", compactMode && "pt-3")}>
                <nav className="space-y-1">
                  {bottomNavItems.map((item) => renderNavItem(item))}
                </nav>

                {/* User Profile */}
                {!isCollapsed && (
                  <div className={cn("mt-6 p-3 bg-accent/50 rounded-xl", compactMode && "mt-4 p-2")}>
                    <div className="flex items-center gap-3">
                      <div className={cn("bg-primary rounded-full flex items-center justify-center", compactMode ? "w-8 h-8" : "w-10 h-10")}>
                        <User className={cn("text-primary-foreground", compactMode ? "w-4 h-4" : "w-5 h-5")} />
                      </div>
                      <div className="flex-1 min-w-0">
                        <p className={cn("font-medium truncate nav-label", compactMode ? "text-xs" : "text-sm")}>John Doe</p>
                        <p className={cn("text-muted-foreground truncate nav-label", compactMode ? "text-[11px]" : "text-xs")}>john@example.com</p>
                      </div>
                    </div>
                  </div>
                )}
              </div>
            </div>
          </div>
        )
      }
    )

    EnhancedSidebar.displayName = "EnhancedSidebar"
  src/components/TopBar.tsx: |-
    import { useState } from 'react'
    import { 
      Menu, 
      Maximize, 
      Minimize, 
      Moon, 
      Sun,
      Layout,
      Settings,
      Command,
      Zap
    } from 'lucide-react'
    import { SettingsPanel } from './SettingsPanel'
    import { cn } from '@/lib/utils'
    import { BODY_STATES, type BodyState } from '@/lib/utils'

    interface TopBarProps {
      bodyState: BodyState
      isDarkMode: boolean
      onToggleSidebar: () => void
      onToggleFullscreen: () => void
      onToggleSidePane: () => void
      onToggleDarkMode: () => void
    }

    export function TopBar({
      bodyState,
      isDarkMode,
      onToggleSidebar,
      onToggleFullscreen,
      onToggleSidePane,
      onToggleDarkMode
    }: TopBarProps) {
      const [isSettingsOpen, setIsSettingsOpen] = useState(false)
      return (
        <div className="h-20 bg-card/80 backdrop-blur-sm border-b border-border flex items-center justify-between px-6 z-50">
          {/* Left Section - Logo and Sidebar Controls */}
          <div className="flex items-center gap-4">
            {/* Logo */}
            <div className="flex items-center gap-2">
              <div className="w-10 h-10 bg-gradient-to-br from-primary to-primary/60 rounded-full flex items-center justify-center">
                <Layout className="w-5 h-5 text-primary-foreground" />
              </div>
              <span className="font-semibold text-xl text-foreground hidden sm:inline">AppShell</span>
            </div>

            {/* Sidebar Controls */}
            <div className="flex items-center">
              <button
                onClick={onToggleSidebar}
                className={cn(
                  "h-10 w-10 flex items-center justify-center rounded-full hover:bg-accent transition-colors"
                )}
                title="Toggle Sidebar"
              >
                <Menu className="w-5 h-5" />
              </button>
            </div>
          </div>

          {/* Right Section - View Controls */}
          <div className="flex items-center gap-3">
            {/* Quick Actions */}
            <button
              className="h-10 w-10 flex items-center justify-center rounded-full hover:bg-accent transition-colors group"
              title="Command Palette (Ctrl+K)"
            >
              <Command className="w-5 h-5 group-hover:scale-110 transition-transform" />
            </button>

            <button
              className="h-10 w-10 flex items-center justify-center rounded-full hover:bg-accent transition-colors group"
              title="Quick Actions"
            >
              <Zap className="w-5 h-5 group-hover:scale-110 transition-transform" />
            </button>

            <div className="w-px h-6 bg-border mx-2" />

            {/* Body State Controls */}
            <button
              onClick={onToggleSidePane}
              className={cn(
                "h-10 w-10 flex items-center justify-center rounded-full hover:bg-accent transition-colors group",
                bodyState === BODY_STATES.SIDE_PANE && "bg-accent"
              )}
              title="Toggle Side Pane"
            >
              <div className="w-5 h-5 flex group-hover:scale-110 transition-transform">
                <div className="w-1/2 h-full bg-current opacity-60 rounded-l-sm" />
                <div className="w-1/2 h-full bg-current rounded-r-sm" />
              </div>
            </button>

            <button
              onClick={onToggleFullscreen}
              className={cn(
                "h-10 w-10 flex items-center justify-center rounded-full hover:bg-accent transition-colors group",
                bodyState === BODY_STATES.FULLSCREEN && "bg-accent"
              )}
              title="Toggle Fullscreen"
            >
              {bodyState === BODY_STATES.FULLSCREEN ? (
                <Minimize className="w-5 h-5 group-hover:scale-110 transition-transform" />
              ) : (
                <Maximize className="w-5 h-5 group-hover:scale-110 transition-transform" />
              )}
            </button>

            <div className="w-px h-6 bg-border mx-2" />

            {/* Theme and Settings */}
            <button
              onClick={onToggleDarkMode}
              className="h-10 w-10 flex items-center justify-center rounded-full hover:bg-accent transition-colors group"
              title="Toggle Dark Mode"
            >
              {isDarkMode ? (
                <Sun className="w-5 h-5 group-hover:scale-110 transition-transform" />
              ) : (
                <Moon className="w-5 h-5 group-hover:scale-110 transition-transform" />
              )}
            </button>

            <button
              onClick={() => setIsSettingsOpen(true)}
              className="h-10 w-10 flex items-center justify-center rounded-full hover:bg-accent transition-colors group"
              title="Settings"
            >
              <Settings className="w-5 h-5 group-hover:rotate-90 transition-transform duration-300" />
            </button>
          </div>

          {/* Settings Panel */}
          <SettingsPanel 
            isOpen={isSettingsOpen} 
            onClose={() => setIsSettingsOpen(false)} 
          />
        </div>
      )
    }
approved: true
linesAdded: null
linesRemoved: null
linesDifference: null
gitCommittedAt: '2025-10-10T10:20:27.667Z'
status: committed
id: 13
