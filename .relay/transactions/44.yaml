uuid: 13a4843f-7e9b-4f0f-87d4-89c8a4176c12
projectId: amazing-app-shell
createdAt: '2025-10-10T13:31:37.154Z'
gitCommitMsg: >-
  refactor(layout): Improve main content area and page layouts

  Refactored the main content layout to allow page components to occupy the full
  available height.

  - Modified `MainContent.tsx` to remove padding and act as a simple container.
  - Moved padding into `DashboardContent.tsx` and `SettingsPage.tsx`. - Updated
  `SettingsPage.tsx` to make its header scroll with content, matching the
  behavior of `DashboardContent.tsx` for consistency.

  This fixes issues where content felt constrained and improves the overall
  scrolling experience, especially in conjunction with the auto-hiding top bar.
promptSummary: >-
  The user wants to fix the main content area layout to allow content to use the
  full height and scroll properly.
reasoning:
  - >-
    Of course. It seems like the main content area has some layout issues that
    prevent the content within it from utilizing the full available height,
    especially with the auto-hiding top bar. I'll fix this by adjusting the
    layout structure.
  - 'Here''s my plan:'
  - >-
    1.  **Refactor `MainContent.tsx`**: I'll remove the padding from this
    component. Its only job will be to position its children below the `TopBar`
    and manage the fullscreen state. The content inside will now be able to
    occupy the full height.
  - >-
    2.  **Update `DashboardContent.tsx`**: I'll move the padding that was in
    `MainContent` directly into the scrollable container of the dashboard.
  - >-
    3.  **Refactor `SettingsPage.tsx`**: To maintain consistency and fix the
    same issue, I'll update the Settings page to have its header scroll with the
    content, just like the dashboard. I'll also add the same padding here.
  - >-
    These changes will ensure that the content pages properly fill the available
    space, providing a much smoother scrolling experience.
  - '### 1. Adjust Main Content Layout'
  - >-
    I'll start by modifying `MainContent.tsx` to remove its internal padding and
    adjust how it contains the page content. This will allow child components
    like `DashboardContent` to take up the full available height.
  - '### 2. Add Padding to Dashboard Content'
  - >-
    Now that `MainContent` no longer has padding, I'll add it directly to the
    scrollable container in `DashboardContent.tsx`.
  - '### 3. Unify Settings Page Layout'
  - >-
    Finally, I'll refactor `SettingsPage.tsx` to match the new layout paradigm.
    The header will now scroll with the rest of the content, creating a more
    consistent user experience.
  - >-
    These changes should resolve the layout issues and make the content
    scrolling feel much more natural.
operations:
  - type: write
    path: src/components/MainContent.tsx
    content: >+
      --- src/components/MainContent.tsx

      +++ src/components/MainContent.tsx

      @@ -28,22 +28,22 @@
             <div
               ref={ref}
               className={cn(
      -        "flex flex-col h-full overflow-hidden transition-all duration-300
      p-6 lg:px-12 pt-[calc(80px+1.5rem)]",

      -        bodyState === BODY_STATES.FULLSCREEN && "absolute inset-0 z-40
      bg-background !p-6 lg:!px-12"

      +        "flex flex-col h-full overflow-hidden transition-all duration-300
      pt-20",

      +        bodyState === BODY_STATES.FULLSCREEN && "absolute inset-0 z-40
      bg-background !pt-0"
               )}
             >
               {bodyState === BODY_STATES.FULLSCREEN && isContentVisible && (
                 <button
                   onClick={onToggleFullscreen}
      -            className="fixed top-6 right-6 z-[100] h-12 w-12 flex
      items-center justify-center rounded-full bg-card/50 backdrop-blur-sm
      hover:bg-card/75 transition-colors group"

      +            className="fixed top-6 right-6 lg:right-12 z-[100] h-12 w-12
      flex items-center justify-center rounded-full bg-card/50 backdrop-blur-sm
      hover:bg-card/75 transition-colors group"
                   title="Exit Fullscreen"
                 >
                   <X className="w-6 h-6 group-hover:scale-110 group-hover:rotate-90 transition-all duration-300" />
                 </button>
               )}
       
      -        <div className="h-full">

      +        <div className="flex-1 min-h-0">
                 {renderContent()}
               </div>
             </div>

    patchStrategy: standard-diff
  - type: write
    path: src/components/DashboardContent.tsx
    content: |+
      --- src/components/DashboardContent.tsx
      +++ src/components/DashboardContent.tsx
      @@ -213,8 +213,8 @@
           return (
               <div 
                 ref={contentRef}
      -          className="h-full overflow-y-auto space-y-8"
      +          className="h-full overflow-y-auto space-y-8 p-6 lg:px-12"
                 onScroll={handleScroll}
               >
                 {/* Header */}

    patchStrategy: standard-diff
  - type: write
    path: src/components/SettingsPage.tsx
    content: >+
      --- src/components/SettingsPage.tsx

      +++ src/components/SettingsPage.tsx

      @@ -15,40 +15,41 @@
         }
       
         return (
      -    <div className="h-full flex flex-col">

      +    <div

      +      ref={scrollRef}

      +      className="h-full overflow-y-auto p-6 lg:px-12 space-y-8"

      +      onScroll={() => {

      +        if (!scrollRef.current) return

      +        const { scrollTop } = scrollRef.current

      +        

      +        if (scrollTop > lastScrollTop.current && scrollTop > 200) {

      +          setTopBarVisible(false);

      +        } else if (scrollTop < lastScrollTop.current || scrollTop <= 0) {

      +          setTopBarVisible(true);

      +        }

      +        

      +        lastScrollTop.current = scrollTop <= 0 ? 0 : scrollTop;

      +      }}

      +    >
             {/* Header */}
             <div className="flex items-center justify-between">
               <div>
                 <h1 className="text-3xl font-bold tracking-tight">Settings</h1>
                 <p className="text-muted-foreground">
                   Customize your experience. Changes are saved automatically.
                 </p>
               </div>
               
               <div className="flex items-center gap-2">
                   <button
                     onClick={handleMoveToSidePane}
                     className="h-10 w-10 flex items-center justify-center hover:bg-accent rounded-full transition-colors" title="Move to Side Pane">
                     <PanelRight className="w-5 h-5" />
                   </button>
               </div>
             </div>
      -      <div

      -        ref={scrollRef}

      -        className="flex-1 overflow-y-auto pt-8"

      -        onScroll={() => {

      -          if (!scrollRef.current) return

      -          const { scrollTop } = scrollRef.current

      -          

      -          if (scrollTop > lastScrollTop.current && scrollTop > 200) {

      -            setTopBarVisible(false);

      -          } else if (scrollTop < lastScrollTop.current || scrollTop <= 0)
      {

      -            setTopBarVisible(true);

      -          }

      -          

      -          lastScrollTop.current = scrollTop <= 0 ? 0 : scrollTop;

      -        }}

      -      >

      -        <SettingsContent />

      -      </div>

      +

      +      <SettingsContent />
           </div>
         )
       }

    patchStrategy: standard-diff
snapshot:
  src/components/MainContent.tsx: |-
    import { forwardRef } from 'react'
    import { 
      X,
      LayoutDashboard,
      ChevronsLeftRight,
      Settings,
    } from 'lucide-react'
    import { cn } from '@/lib/utils'
    import { BODY_STATES, type BodyState } from '@/lib/utils'
    import { DashboardContent } from './DashboardContent'
    import { SettingsPage } from './SettingsPage'
    import { useAppStore } from '@/store/appStore'

    interface MainContentProps {
      bodyState: BodyState
      onToggleFullscreen: () => void
    }

    export const MainContent = forwardRef<HTMLDivElement, MainContentProps>(
      ({ bodyState, onToggleFullscreen }, ref) => {
        const { sidePaneContent, openSidePane, activePage, setActivePage } = useAppStore()

        const isDashboardInSidePane = sidePaneContent === 'main' && bodyState === BODY_STATES.SIDE_PANE
        const isSettingsInSidePane = sidePaneContent === 'settings' && bodyState === BODY_STATES.SIDE_PANE

        const renderContent = () => {
          if (activePage === 'dashboard') {
            if (isDashboardInSidePane) {
              return (
                <div className="flex-1 flex flex-col items-center justify-center text-center">
                  <LayoutDashboard className="w-16 h-16 text-muted-foreground/50 mb-4" />
                  <h2 className="text-2xl font-bold">Dashboard is in Side Pane</h2>
                  <p className="text-muted-foreground mt-2 max-w-md">
                    You've moved the dashboard to the side pane. You can bring it back or continue to navigate.
                  </p>
                  <button
                    onClick={() => openSidePane('main')} // This will close it
                    className="mt-6 bg-primary text-primary-foreground px-4 py-2 rounded-full hover:bg-primary/90 transition-colors flex items-center gap-2 h-10"
                  >
                    <ChevronsLeftRight className="w-5 h-5" />
                    <span>Bring Dashboard Back</span>
                  </button>
                </div>
              )
            }
            return <DashboardContent />
          }

          if (activePage === 'settings') {
            if (isSettingsInSidePane) {
              return (
                <div className="flex-1 flex flex-col items-center justify-center text-center">
                  <Settings className="w-16 h-16 text-muted-foreground/50 mb-4" />
                  <h2 className="text-2xl font-bold">Settings are in Side Pane</h2>
                  <p className="text-muted-foreground mt-2 max-w-md">
                    You've moved settings to the side pane. You can bring them back to the main view.
                  </p>
                  <button
                    onClick={() => {
                      openSidePane('settings'); // This will close it
                      setActivePage('settings');
                    }}
                    className="mt-6 bg-primary text-primary-foreground px-4 py-2 rounded-full hover:bg-primary/90 transition-colors flex items-center gap-2 h-10"
                  >
                    <ChevronsLeftRight className="w-5 h-5" />
                    <span>Bring Settings Back</span>
                  </button>
                </div>
              )
            }
            return <SettingsPage />
          }
          return null;
        }
        
        const isContentVisible = (activePage === 'dashboard' && !isDashboardInSidePane) || (activePage === 'settings' && !isSettingsInSidePane);

        return (
          <div
            ref={ref}
            className={cn(
            "flex flex-col h-full overflow-hidden transition-all duration-300 p-6 lg:px-12 pt-[calc(80px+1.5rem)]",
            bodyState === BODY_STATES.FULLSCREEN && "absolute inset-0 z-40 bg-background !p-6 lg:!px-12"
            )}
          >
            {bodyState === BODY_STATES.FULLSCREEN && isContentVisible && (
              <button
                onClick={onToggleFullscreen}
                className="fixed top-6 right-6 z-[100] h-12 w-12 flex items-center justify-center rounded-full bg-card/50 backdrop-blur-sm hover:bg-card/75 transition-colors group"
                title="Exit Fullscreen"
              >
                <X className="w-6 h-6 group-hover:scale-110 group-hover:rotate-90 transition-all duration-300" />
              </button>
            )}

            <div className="h-full">
              {renderContent()}
            </div>
          </div>
        )
      }
    )
  src/components/SettingsPage.tsx: |-
    import { useRef } from 'react'
    import { PanelRight } from 'lucide-react'
    import { SettingsContent } from './SettingsContent'
    import { useAppStore } from '@/store/appStore'

    export function SettingsPage() {
      const { openSidePane, setActivePage, setTopBarVisible } = useAppStore()
      const scrollRef = useRef<HTMLDivElement>(null)
      const lastScrollTop = useRef(0)

      const handleMoveToSidePane = () => {
        openSidePane('settings');
        setActivePage('dashboard');
      }

      return (
        <div className="h-full flex flex-col">
          {/* Header */}
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-3xl font-bold tracking-tight">Settings</h1>
              <p className="text-muted-foreground">
                Customize your experience. Changes are saved automatically.
              </p>
            </div>
            
            <div className="flex items-center gap-2">
                <button
                  onClick={handleMoveToSidePane}
                  className="h-10 w-10 flex items-center justify-center hover:bg-accent rounded-full transition-colors" title="Move to Side Pane">
                  <PanelRight className="w-5 h-5" />
                </button>
            </div>
          </div>
          <div
            ref={scrollRef}
            className="flex-1 overflow-y-auto pt-8"
            onScroll={() => {
              if (!scrollRef.current) return
              const { scrollTop } = scrollRef.current
              
              if (scrollTop > lastScrollTop.current && scrollTop > 200) {
                setTopBarVisible(false);
              } else if (scrollTop < lastScrollTop.current || scrollTop <= 0) {
                setTopBarVisible(true);
              }
              
              lastScrollTop.current = scrollTop <= 0 ? 0 : scrollTop;
            }}
          >
            <SettingsContent />
          </div>
        </div>
      )
    }
  src/components/DashboardContent.tsx: >-
    import { useRef, useEffect, useState } from 'react'

    import { gsap } from 'gsap'

    import { 
      BarChart3, 
      TrendingUp, 
      Users, 
      DollarSign, 
      Activity,
      Calendar,
      Clock,
      MessageSquare,
      FileText,
      Star,
      ChevronRight,
      Plus,
      Filter,
      Search,
      MoreVertical,
      ArrowDown,
      PanelRight
    } from 'lucide-react'

    import { cn } from '@/lib/utils'

    import { DemoContent } from './DemoContent'

    import { useAppStore } from '@/store/appStore'

    import { BODY_STATES } from '@/lib/utils'


    interface StatsCard {
      title: string
      value: string
      change: string
      trend: 'up' | 'down'
      icon: React.ReactNode
    }


    interface ActivityItem {
      id: string
      type: 'comment' | 'file' | 'meeting' | 'task'
      title: string
      description: string
      time: string
      user: string
    }


    const statsCards: StatsCard[] = [
      {
        title: "Total Revenue",
        value: "$45,231.89",
        change: "+20.1%",
        trend: "up",
        icon: <DollarSign className="w-5 h-5" />
      },
      {
        title: "Active Users",
        value: "2,350",
        change: "+180.1%",
        trend: "up",
        icon: <Users className="w-5 h-5" />
      },
      {
        title: "Conversion Rate",
        value: "12.5%",
        change: "+19%",
        trend: "up",
        icon: <TrendingUp className="w-5 h-5" />
      },
      {
        title: "Performance",
        value: "573ms",
        change: "-5.3%",
        trend: "down",
        icon: <Activity className="w-5 h-5" />
      }
    ]


    const recentActivity: ActivityItem[] = [
      {
        id: "1",
        type: "comment",
        title: "New comment on Project Alpha",
        description: "Sarah Johnson added a comment to the design review",
        time: "2 minutes ago",
        user: "SJ"
      },
      {
        id: "2",
        type: "file",
        title: "Document uploaded",
        description: "quarterly-report.pdf was uploaded to Documents",
        time: "15 minutes ago",
        user: "MD"
      },
      {
        id: "3",
        type: "meeting",
        title: "Meeting scheduled",
        description: "Weekly standup meeting scheduled for tomorrow 9 AM",
        time: "1 hour ago",
        user: "RW"
      },
      {
        id: "4",
        type: "task",
        title: "Task completed",
        description: "UI wireframes for mobile app completed",
        time: "2 hours ago",
        user: "AL"
      }
    ]


    interface DashboardContentProps {
      isInSidePane?: boolean;
    }


    export function DashboardContent({ isInSidePane = false }:
    DashboardContentProps) {
        const contentRef = useRef<HTMLDivElement>(null)
        const cardsRef = useRef<(HTMLDivElement | null)[]>([])
        const [searchTerm, setSearchTerm] = useState("")
        const [showScrollToBottom, setShowScrollToBottom] = useState(false)
        const { bodyState, openSidePane, setTopBarVisible } = useAppStore()
        const lastScrollTop = useRef(0);

        const handleScroll = () => {
          if (!contentRef.current) return
          const { scrollTop, scrollHeight, clientHeight } = contentRef.current
          
          // Auto-hide top bar logic
          if (!isInSidePane) {
            if (scrollTop > lastScrollTop.current && scrollTop > 200) {
              setTopBarVisible(false);
            } else if (scrollTop < lastScrollTop.current || scrollTop <= 0) {
              setTopBarVisible(true);
            }
          }
          lastScrollTop.current = scrollTop <= 0 ? 0 : scrollTop;

          // Show if scrolled down and not at the bottom
          setShowScrollToBottom(scrollTop > 200 && scrollTop < scrollHeight - clientHeight - 200)
        }

        const scrollToBottom = () => {
          contentRef.current?.scrollTo({
            top: contentRef.current.scrollHeight,
            behavior: 'smooth'
          })
        }

        // Animate content based on body state
        useEffect(() => {
          if (!contentRef.current) return

          const content = contentRef.current
          const cards = cardsRef.current.filter(Boolean)

          switch (bodyState) {
            case BODY_STATES.FULLSCREEN:
              gsap.to(content, {
                scale: 1.02,
                duration: 0.4,
                ease: "power3.out"
              })
              break
            default:
              gsap.to(content, {
                scale: 1,
                duration: 0.4,
                ease: "power3.out"
              })
              break
          }

          // Stagger animation for cards
          gsap.fromTo(cards, 
            { y: 20, opacity: 0 },
            { 
              y: 0, 
              opacity: 1, 
              duration: 0.6,
              stagger: 0.1,
              ease: "power3.out"
            }
          )

        }, [bodyState])

        const getTypeIcon = (type: ActivityItem['type']) => {
          switch (type) {
            case 'comment':
              return <MessageSquare className="w-4 h-4" />
            case 'file':
              return <FileText className="w-4 h-4" />
            case 'meeting':
              return <Calendar className="w-4 h-4" />
            case 'task':
              return <Star className="w-4 h-4" />
            default:
              return <Activity className="w-4 h-4" />
          }
        }

        return (
            <div 
              ref={contentRef}
              className="h-full overflow-y-auto space-y-8"
              onScroll={handleScroll}
            >
              {/* Header */}
              <div className="flex items-center justify-between">
                <div>
                  <h1 className="text-3xl font-bold tracking-tight">Dashboard</h1>
                  <p className="text-muted-foreground">
                    Welcome to the amazing app shell demo! Explore all the features and customization options.
                  </p>
                </div>
                
                <div className="flex items-center gap-2">
                  <div className="relative">
                    <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4" />
                    <input
                      type="text"
                      placeholder="Search..."
                      value={searchTerm}
                      onChange={(e) => setSearchTerm(e.target.value)}
                      className="pl-9 pr-4 py-2 border-none rounded-lg bg-card focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent"
                    />
                  </div>
                  <button className="h-10 w-10 flex items-center justify-center hover:bg-accent rounded-full transition-colors">
                    <Filter className="w-5 h-5" />
                  </button>
                  <button className="bg-primary text-primary-foreground px-4 py-2 rounded-full hover:bg-primary/90 transition-colors flex items-center gap-2 h-10">
                    <Plus className="w-5 h-5" />
                    <span>New Project</span>
                  </button>
                  {!isInSidePane && (
                    <button
                      onClick={() => openSidePane('main')}
                      className="h-10 w-10 flex items-center justify-center hover:bg-accent rounded-full transition-colors" title="Move to Side Pane">
                      <PanelRight className="w-5 h-5" />
                    </button>
                  )}
                </div>
              </div>
                {/* Stats Cards */}
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
                  {statsCards.map((stat, index) => (
                    <div
                    key={stat.title}
                    ref={el => cardsRef.current[index] = el}
                    className="bg-card p-6 rounded-2xl border border-border/50 hover:border-primary/30 transition-all duration-300 group cursor-pointer"
                  >
                    <div className="flex items-center justify-between">
                      <div className="p-3 bg-primary/10 rounded-full group-hover:bg-primary/20 transition-colors">
                        {stat.icon}
                      </div>
                      <div className={cn(
                        "text-sm font-medium",
                        stat.trend === 'up' ? "text-green-600" : "text-red-600"
                      )}>
                        {stat.change}
                      </div>
                    </div>
                    <div className="mt-4">
                      <h3 className="text-2xl font-bold">{stat.value}</h3>
                      <p className="text-sm text-muted-foreground mt-1">{stat.title}</p>
                    </div>
                  </div>
                  ))}
                </div>

                {/* Demo Content */}
                <DemoContent />

                {/* Main Content Grid */}
                <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
                {/* Chart Area */}
                <div className="lg:col-span-2 space-y-6">
                  {/* Analytics Chart */}
                  <div className="bg-card p-6 rounded-2xl border border-border/50">
                    <div className="flex items-center justify-between mb-6">
                      <h3 className="text-lg font-semibold">Analytics Overview</h3>
                      <button className="h-8 w-8 flex items-center justify-center hover:bg-accent rounded-full transition-colors">
                        <MoreVertical className="w-5 h-5" />
                      </button>
                    </div>
                    
                    {/* Mock Chart */}
                    <div className="h-64 bg-gradient-to-br from-primary/10 to-transparent rounded-xl flex items-center justify-center border border-border/50">
                      <div className="text-center">
                        <BarChart3 className="w-12 h-12 text-primary mx-auto mb-2" />
                        <p className="text-muted-foreground">Chart visualization would go here</p>
                      </div>
                    </div>
                  </div>

                  {/* Recent Projects */}
                  <div className="bg-card p-6 rounded-2xl border border-border/50">
                    <div className="flex items-center justify-between mb-6">
                      <h3 className="text-lg font-semibold">Recent Projects</h3>
                      <button className="text-primary hover:text-primary/80 text-sm font-medium flex items-center gap-1">
                        View All
                        <ChevronRight className="w-4 h-4" />
                      </button>
                    </div>
                    
                    <div className="space-y-4">
                      {[
                        { name: "E-commerce Platform", progress: 75, team: 5, deadline: "Dec 15" },
                        { name: "Mobile App Redesign", progress: 45, team: 3, deadline: "Jan 20" },
                        { name: "Marketing Website", progress: 90, team: 4, deadline: "Dec 5" }
                      ].map((project) => (
                        <div key={project.name} className="p-4 bg-accent/30 rounded-xl hover:bg-accent/50 transition-colors cursor-pointer">
                          <div className="flex items-center justify-between mb-2">
                            <h4 className="font-medium">{project.name}</h4>
                            <span className="text-sm text-muted-foreground">{project.progress}%</span>
                          </div>
                          <div className="w-full bg-muted rounded-full h-2 mb-3">
                            <div 
                              className="bg-primary h-2 rounded-full transition-all duration-500"
                              style={{ width: `${project.progress}%` }}
                            />
                          </div>
                          <div className="flex items-center justify-between text-sm text-muted-foreground">
                            <span>{project.team} team members</span>
                            <span>Due {project.deadline}</span>
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                </div>

                {/* Sidebar Content */}
                <div className="space-y-6">
                  {/* Quick Actions */}
                  <div className="bg-card p-6 rounded-2xl border border-border/50">
                    <h3 className="text-lg font-semibold mb-4">Quick Actions</h3>
                    <div className="space-y-3">
                      {[
                        { icon: <FileText className="w-4 h-4" />, label: "Create Document", color: "bg-blue-500/10 text-blue-600" },
                        { icon: <Calendar className="w-4 h-4" />, label: "Schedule Meeting", color: "bg-green-500/10 text-green-600" },
                        { icon: <Users className="w-4 h-4" />, label: "Invite Team", color: "bg-purple-500/10 text-purple-600" },
                        { icon: <BarChart3 className="w-4 h-4" />, label: "View Reports", color: "bg-orange-500/10 text-orange-600" }
                      ].map((action) => (
                        <button
                          key={action.label}
                          className="w-full flex items-center gap-3 p-3 hover:bg-accent rounded-lg transition-colors text-left"
                        >
                          <div className={cn("p-2 rounded-full", action.color)}>
                            {action.icon}
                          </div>
                          <span className="font-medium">{action.label}</span>
                        </button>
                      ))}
                    </div>
                  </div>

                  {/* Recent Activity */}
                  <div className="bg-card p-6 rounded-2xl border border-border/50">
                    <h3 className="text-lg font-semibold mb-4">Recent Activity</h3>
                    <div className="space-y-4">
                      {recentActivity.map((activity) => (
                        <div key={activity.id} className="flex items-start gap-3 p-3 hover:bg-accent/30 rounded-xl transition-colors cursor-pointer">
                          <div className="p-2 bg-primary/10 rounded-full flex-shrink-0">
                            {getTypeIcon(activity.type)}
                          </div>
                          <div className="flex-1 min-w-0">
                            <h4 className="font-medium text-sm mb-1">{activity.title}</h4>
                            <p className="text-xs text-muted-foreground mb-2">{activity.description}</p>
                            <div className="flex items-center gap-2 text-xs text-muted-foreground">
                              <Clock className="w-3 h-3" />
                              <span>{activity.time}</span>
                              <div className="w-5 h-5 bg-primary rounded-full flex items-center justify-center text-primary-foreground text-xs font-medium">
                                {activity.user}
                              </div>
                            </div>
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                </div>
              </div>
              {showScrollToBottom && (
                <button
                  onClick={scrollToBottom}
                  className="fixed bottom-8 right-8 w-12 h-12 bg-primary text-primary-foreground rounded-full flex items-center justify-center shadow-lg hover:bg-primary/90 transition-all animate-fade-in z-[51]"
                  style={{ animation: 'bounce 2s infinite' }}
                  title="Scroll to bottom"
                >
                  <ArrowDown className="w-6 h-6" />
                </button>
              )}
          </div>
        )
    }
approved: true
linesAdded: null
linesRemoved: null
linesDifference: null
gitCommittedAt: null
status: committed
id: 44
