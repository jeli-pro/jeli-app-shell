uuid: d0798e6a-7a57-41a4-9e32-a16999b8f047
projectId: amazing-app-shell
createdAt: '2025-10-10T22:44:11.744Z'
gitCommitMsg: >-
  refactor(ui): Align UserDropdown styles with global design system

  This commit refactors the `UserDropdown` component to ensure its visual
  styling is consistent with the rest of the application's UI components.

  - Replaced hardcoded colors with theme variables (`popover`, `muted`,
  `destructive`) for better theme support. - Simplified the component structure
  by removing nested sections and relying on the base `DropdownMenuContent`
  styling for background, border, shadow, and radius. - Standardized padding for
  menu items to match the global `DropdownMenuItem` style (`px-3 py-2`). -
  Updated status badge colors to use theme-aware classes, improving consistency.
promptSummary: >-
  Make the `UserDropdown` component's styling consistent with the global
  application styles, including colors, spacing, radius, and shadows.
reasoning:
  - >-
    Of course. I've analyzed the `UserDropdown` component and compared it to the
    other UI components in the application. I'll make the necessary adjustments
    to ensure its styling—including colors, spacing, radius, and shadows—is
    consistent with the established design system.
  - 'Here are the changes I''ll make:'
  - >-
    1.  **Refactor `UserDropdown.tsx` for Style Consistency**: I will update the
    component to use theme variables from your `tailwind.config.js` for
    backgrounds, borders, and text colors (e.g., `bg-popover`, `border-border`).
    The custom shadows, radii, and complex background sections will be
    simplified to match the look and feel of other dropdowns like
    `DropdownMenuContent`.
  - >-
    2.  **Harmonize Padding and Spacing**: I will adjust the padding within menu
    items to match the values used in the base `DropdownMenuItem` component
    (`px-3 py-2`), ensuring a uniform appearance across all dropdowns.
  - >-
    3.  **Use Theme Colors for Status Badge**: The colors for the user status
    badge (e.g., "offline", "busy") will be updated to use theme variables like
    `muted` and `destructive` for a more integrated look.
  - 'Here is the updated `UserDropdown.tsx` file:'
  - >-
    These changes simplify the component's structure and align it with your
    application's existing UI, resulting in a more cohesive and consistent user
    experience.
operations:
  - type: write
    path: src/components/UserDropdown.tsx
    content: >
      <<<<<<< SEARCH

      import { Avatar, AvatarFallback, AvatarImage } from
      "@/components/ui/avatar";

      import { Badge } from "@/components/ui/badge";

      import {
        DropdownMenu,
        DropdownMenuContent,
        DropdownMenuGroup,
        DropdownMenuItem,
        DropdownMenuPortal,
        DropdownMenuRadioGroup,
        DropdownMenuRadioItem,
        DropdownMenuSeparator,
        DropdownMenuSub,
        DropdownMenuSubContent,
        DropdownMenuSubTrigger,
        DropdownMenuTrigger,
      } from "@/components/ui/dropdown-menu";

      import { cn } from "@/lib/utils"

      import { Icon } from "@iconify/react";


      const MENU_ITEMS = {
        status: [
          { value: "focus", icon: "solar:emoji-funny-circle-line-duotone", label: "Focus" },
          { value: "offline", icon: "solar:moon-sleep-line-duotone", label: "Appear Offline" }
        ],
        profile: [
          { icon: "solar:user-circle-line-duotone", label: "Your profile", action: "profile" },
          { icon: "solar:sun-line-duotone", label: "Appearance", action: "appearance" },
          { icon: "solar:settings-line-duotone", label: "Settings", action: "settings" },
          { icon: "solar:bell-line-duotone", label: "Notifications", action: "notifications" }
        ],
        premium: [
          { 
            icon: "solar:star-bold", 
            label: "Upgrade to Pro", 
            action: "upgrade",
            iconClass: "text-amber-500",
            badge: { text: "20% off", className: "bg-amber-500 text-white text-[11px]" }
          },
          { icon: "solar:gift-line-duotone", label: "Referrals", action: "referrals" }
        ],
        support: [
          { icon: "solar:download-line-duotone", label: "Download app", action: "download" },
          { 
            icon: "solar:letter-unread-line-duotone", 
            label: "What's new?", 
            action: "whats-new",
            rightIcon: "solar:square-top-down-line-duotone"
          },
          { 
            icon: "solar:question-circle-line-duotone", 
            label: "Get help?", 
            action: "help",
            rightIcon: "solar:square-top-down-line-duotone"
          }
        ],
        account: [
          { 
            icon: "solar:users-group-rounded-bold-duotone", 
            label: "Switch account", 
            action: "switch",
            showAvatar: false
          },
          { icon: "solar:logout-2-bold-duotone", label: "Log out", action: "logout" }
        ]
      };


      // Interface for menu item for better type safety

      interface MenuItem {
        value?: string;
        icon: string;
        label: string;
        action?: string;
        iconClass?: string;
        badge?: { text: string; className: string };
        rightIcon?: string;
        showAvatar?: boolean;
      }


      export const UserDropdown = ({ 
        user = {
          name: "Ayman Echakar",
          username: "@aymanch-03",
          avatar: "https://avatars.githubusercontent.com/u/126724835?v=4",
          initials: "AE",
          status: "online"
        },
        onAction = () => {},
        onStatusChange = () => {},
        selectedStatus = "online",
        promoDiscount = "20% off",
      }) => {
        const renderMenuItem = (item: MenuItem, index: number) => (
          <DropdownMenuItem 
            key={index}
            className={cn(
              "p-2 rounded-lg cursor-pointer",
              item.badge || item.showAvatar || item.rightIcon ? "justify-between" : ""
            )}
            onClick={() => item.action && onAction(item.action)}
          >
            <span className="flex items-center gap-1.5 font-medium">
              <Icon
                icon={item.icon}
                className={cn("h-5 w-5 text-muted-foreground", item.iconClass)}
              />
              {item.label}
            </span>
            {item.badge && (
              <Badge className={item.badge.className}>
                {promoDiscount || item.badge.text}
              </Badge>
            )}
            {item.rightIcon && (
              <Icon
                icon={item.rightIcon}
                className="h-4 w-4 text-muted-foreground"
              />
            )}
            {item.showAvatar && (
              <Avatar className="cursor-pointer h-6 w-6 shadow border-2 border-background">
                <AvatarImage src={user.avatar} alt={user.name} />
                <AvatarFallback>{user.initials}</AvatarFallback>
              </Avatar>
            )}
          </DropdownMenuItem>
        );

        const getStatusColor = (status: string) => {
          const colors = {
            online: "text-green-600 bg-green-100 border-green-300 dark:text-green-400 dark:bg-green-900/30 dark:border-green-500/50",
            offline: "text-muted-foreground bg-muted border-border",
            busy: "text-red-600 bg-red-100 border-red-300 dark:text-red-400 dark:bg-red-900/30 dark:border-red-500/50"
          };
          return colors[status.toLowerCase() as keyof typeof colors] || colors.online;
        };

        return (
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Avatar className="cursor-pointer h-10 w-10 border-2 border-transparent hover:border-primary transition-colors">
                <AvatarImage src={user.avatar} alt={user.name} />
                <AvatarFallback>{user.initials}</AvatarFallback>
              </Avatar>
            </DropdownMenuTrigger>

            <DropdownMenuContent className="no-scrollbar w-[310px] rounded-2xl p-0" align="end">
              <section className="bg-popover/50 backdrop-blur-lg rounded-2xl p-1 shadow-xl border">
                <div className="flex items-center p-2">
                  <div className="flex-1 flex items-center gap-2">
                    <Avatar className="cursor-pointer h-10 w-10">
                      <AvatarImage src={user.avatar} alt={user.name} />
                      <AvatarFallback>{user.initials}</AvatarFallback>
                    </Avatar>
                    <div>
                      <h3 className="font-semibold text-sm">{user.name}</h3>
                      <p className="text-muted-foreground text-xs">{user.username}</p>
                    </div>
                  </div>
                  <Badge variant="outline" className={cn("border-[0.5px] text-[11px] rounded-sm capitalize", getStatusColor(user.status))}>
                    {user.status}
                  </Badge>
                </div>

                <DropdownMenuGroup>
                  <DropdownMenuSub>
                    <DropdownMenuSubTrigger className="cursor-pointer p-2 rounded-lg">
                      <span className="flex items-center gap-1.5 font-medium text-muted-foreground">
                        <Icon icon="solar:smile-circle-line-duotone" className="h-5 w-5" />
                        Update status
                      </span>
                    </DropdownMenuSubTrigger>
                    <DropdownMenuPortal>
                      <DropdownMenuSubContent>
                        <DropdownMenuRadioGroup value={selectedStatus} onValueChange={onStatusChange}>
                          {MENU_ITEMS.status.map((status, index) => (
                            <DropdownMenuRadioItem className="gap-2" key={index} value={status.value}>
                              <Icon icon={status.icon} className="h-5 w-5 text-muted-foreground" />
                              {status.label}
                            </DropdownMenuRadioItem>
                          ))}
                        </DropdownMenuRadioGroup>
                      </DropdownMenuSubContent>
                    </DropdownMenuPortal>
                  </DropdownMenuSub>
                </DropdownMenuGroup>

                <DropdownMenuSeparator />
                <DropdownMenuGroup>
                  {MENU_ITEMS.profile.map(renderMenuItem)}
                </DropdownMenuGroup>

                <DropdownMenuSeparator />
                <DropdownMenuGroup>
                  {MENU_ITEMS.premium.map(renderMenuItem)}
                </DropdownMenuGroup>

                <DropdownMenuSeparator />
                <DropdownMenuGroup>
                  {MENU_ITEMS.support.map(renderMenuItem)}
                </DropdownMenuGroup>
              </section>

              <section className="mt-1 p-1">
                <DropdownMenuGroup>
                  {MENU_ITEMS.account.map(renderMenuItem)}
                </DropdownMenuGroup>
              </section>
            </DropdownMenuContent>
          </DropdownMenu>
        );
      };

      =======

      import { Avatar, AvatarFallback, AvatarImage } from
      "@/components/ui/avatar";

      import { Badge } from "@/components/ui/badge";

      import {
        DropdownMenu,
        DropdownMenuContent,
        DropdownMenuGroup,
        DropdownMenuItem,
        DropdownMenuPortal,
        DropdownMenuRadioGroup,
        DropdownMenuRadioItem,
        DropdownMenuSeparator,
        DropdownMenuSub,
        DropdownMenuSubContent,
        DropdownMenuSubTrigger,
        DropdownMenuTrigger,
      } from "@/components/ui/dropdown-menu";

      import { cn } from "@/lib/utils"

      import { Icon } from "@iconify/react";


      const MENU_ITEMS = {
        status: [
          { value: "focus", icon: "solar:emoji-funny-circle-line-duotone", label: "Focus" },
          { value: "offline", icon: "solar:moon-sleep-line-duotone", label: "Appear Offline" }
        ],
        profile: [
          { icon: "solar:user-circle-line-duotone", label: "Your profile", action: "profile" },
          { icon: "solar:sun-line-duotone", label: "Appearance", action: "appearance" },
          { icon: "solar:settings-line-duotone", label: "Settings", action: "settings" },
          { icon: "solar:bell-line-duotone", label: "Notifications", action: "notifications" }
        ],
        premium: [
          { 
            icon: "solar:star-bold", 
            label: "Upgrade to Pro", 
            action: "upgrade",
            iconClass: "text-amber-500",
            badge: { text: "20% off", className: "bg-amber-500 text-white text-[11px]" }
          },
          { icon: "solar:gift-line-duotone", label: "Referrals", action: "referrals" }
        ],
        support: [
          { icon: "solar:download-line-duotone", label: "Download app", action: "download" },
          { 
            icon: "solar:letter-unread-line-duotone", 
            label: "What's new?", 
            action: "whats-new",
            rightIcon: "solar:square-top-down-line-duotone"
          },
          { 
            icon: "solar:question-circle-line-duotone", 
            label: "Get help?", 
            action: "help",
            rightIcon: "solar:square-top-down-line-duotone"
          }
        ],
        account: [
          { 
            icon: "solar:users-group-rounded-bold-duotone", 
            label: "Switch account", 
            action: "switch",
            showAvatar: false
          },
          { icon: "solar:logout-2-bold-duotone", label: "Log out", action: "logout" }
        ]
      };


      // Interface for menu item for better type safety

      interface MenuItem {
        value?: string;
        icon: string;
        label: string;
        action?: string;
        iconClass?: string;
        badge?: { text: string; className: string };
        rightIcon?: string;
        showAvatar?: boolean;
      }


      export const UserDropdown = ({ 
        user = {
          name: "Ayman Echakar",
          username: "@aymanch-03",
          avatar: "https://avatars.githubusercontent.com/u/126724835?v=4",
          initials: "AE",
          status: "online"
        },
        onAction = () => {},
        onStatusChange = () => {},
        selectedStatus = "online",
        promoDiscount = "20% off",
      }) => {
        const renderMenuItem = (item: MenuItem, index: number) => (
          <DropdownMenuItem 
            key={index}
            className={cn(
              "px-3 py-2", // Consistent with base component
              item.badge || item.showAvatar || item.rightIcon ? "justify-between" : ""
            )}
            onClick={() => item.action && onAction(item.action)}
          >
            <span className="flex items-center gap-2 font-medium">
              <Icon
                icon={item.icon}
                className={cn("h-5 w-5 text-muted-foreground", item.iconClass)}
              />
              {item.label}
            </span>
            {item.badge && (
              <Badge className={item.badge.className}>
                {promoDiscount || item.badge.text}
              </Badge>
            )}
            {item.rightIcon && (
              <Icon
                icon={item.rightIcon}
                className="h-4 w-4 text-muted-foreground"
              />
            )}
            {item.showAvatar && (
              <Avatar className="cursor-pointer h-6 w-6 shadow border-2 border-background">
                <AvatarImage src={user.avatar} alt={user.name} />
                <AvatarFallback>{user.initials}</AvatarFallback>
              </Avatar>
            )}
          </DropdownMenuItem>
        );

        const getStatusColor = (status: string) => {
          const colors = {
            online: "text-green-600 bg-green-100 border-green-300 dark:text-green-400 dark:bg-green-900/30 dark:border-green-500/50",
            offline: "text-muted-foreground bg-muted border-border",
            busy: "text-destructive bg-destructive/20 border-destructive/30"
          };
          return colors[status.toLowerCase() as keyof typeof colors] || colors.online;
        };

        return (
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Avatar className="cursor-pointer h-10 w-10 border-2 border-transparent hover:border-primary transition-colors">
                <AvatarImage src={user.avatar} alt={user.name} />
                <AvatarFallback>{user.initials}</AvatarFallback>
              </Avatar>
            </DropdownMenuTrigger>

            <DropdownMenuContent className="no-scrollbar w-[310px] p-1" align="end">
              <div className="flex items-center p-2.5">
                <div className="flex-1 flex items-center gap-3">
                  <Avatar className="cursor-pointer h-10 w-10">
                    <AvatarImage src={user.avatar} alt={user.name} />
                    <AvatarFallback>{user.initials}</AvatarFallback>
                  </Avatar>
                  <div>
                    <h3 className="font-semibold text-sm">{user.name}</h3>
                    <p className="text-muted-foreground text-xs">{user.username}</p>
                  </div>
                </div>
                <Badge variant="outline" className={cn("border-[0.5px] text-[11px] rounded-sm capitalize", getStatusColor(user.status))}>
                  {user.status}
                </Badge>
              </div>
              
              <DropdownMenuSeparator />
              
              <DropdownMenuGroup>
                <DropdownMenuSub>
                  <DropdownMenuSubTrigger>
                    <span className="flex items-center gap-2 font-medium text-muted-foreground">
                      <Icon icon="solar:smile-circle-line-duotone" className="h-5 w-5" />
                      Update status
                    </span>
                  </DropdownMenuSubTrigger>
                  <DropdownMenuPortal>
                    <DropdownMenuSubContent>
                      <DropdownMenuRadioGroup value={selectedStatus} onValueChange={onStatusChange}>
                        {MENU_ITEMS.status.map((status, index) => (
                          <DropdownMenuRadioItem className="gap-2" key={index} value={status.value}>
                            <Icon icon={status.icon} className="h-5 w-5 text-muted-foreground" />
                            {status.label}
                          </DropdownMenuRadioItem>
                        ))}
                      </DropdownMenuRadioGroup>
                    </DropdownMenuSubContent>
                  </DropdownMenuPortal>
                </DropdownMenuSub>
              </DropdownMenuGroup>

              <DropdownMenuSeparator />
              <DropdownMenuGroup>
                {MENU_ITEMS.profile.map(renderMenuItem)}
              </DropdownMenuGroup>

              <DropdownMenuSeparator />
              <DropdownMenuGroup>
                {MENU_ITEMS.premium.map(renderMenuItem)}
              </DropdownMenuGroup>

              <DropdownMenuSeparator />
              <DropdownMenuGroup>
                {MENU_ITEMS.support.map(renderMenuItem)}
              </DropdownMenuGroup>
           
              <DropdownMenuSeparator />
              <DropdownMenuGroup>
                {MENU_ITEMS.account.map(renderMenuItem)}
              </DropdownMenuGroup>
            </DropdownMenuContent>
          </DropdownMenu>
        );
      };

      >>>>>>> REPLACE
    patchStrategy: search-replace
snapshot:
  src/components/UserDropdown.tsx: >-
    import { Avatar, AvatarFallback, AvatarImage } from
    "@/components/ui/avatar";

    import { Badge } from "@/components/ui/badge";

    import {
      DropdownMenu,
      DropdownMenuContent,
      DropdownMenuGroup,
      DropdownMenuItem,
      DropdownMenuPortal,
      DropdownMenuRadioGroup,
      DropdownMenuRadioItem,
      DropdownMenuSeparator,
      DropdownMenuSub,
      DropdownMenuSubContent,
      DropdownMenuSubTrigger,
      DropdownMenuTrigger,
    } from "@/components/ui/dropdown-menu";

    import { cn } from "@/lib/utils"

    import { Icon } from "@iconify/react";


    const MENU_ITEMS = {
      status: [
        { value: "focus", icon: "solar:emoji-funny-circle-line-duotone", label: "Focus" },
        { value: "offline", icon: "solar:moon-sleep-line-duotone", label: "Appear Offline" }
      ],
      profile: [
        { icon: "solar:user-circle-line-duotone", label: "Your profile", action: "profile" },
        { icon: "solar:sun-line-duotone", label: "Appearance", action: "appearance" },
        { icon: "solar:settings-line-duotone", label: "Settings", action: "settings" },
        { icon: "solar:bell-line-duotone", label: "Notifications", action: "notifications" }
      ],
      premium: [
        { 
          icon: "solar:star-bold", 
          label: "Upgrade to Pro", 
          action: "upgrade",
          iconClass: "text-amber-500",
          badge: { text: "20% off", className: "bg-amber-500 text-white text-[11px]" }
        },
        { icon: "solar:gift-line-duotone", label: "Referrals", action: "referrals" }
      ],
      support: [
        { icon: "solar:download-line-duotone", label: "Download app", action: "download" },
        { 
          icon: "solar:letter-unread-line-duotone", 
          label: "What's new?", 
          action: "whats-new",
          rightIcon: "solar:square-top-down-line-duotone"
        },
        { 
          icon: "solar:question-circle-line-duotone", 
          label: "Get help?", 
          action: "help",
          rightIcon: "solar:square-top-down-line-duotone"
        }
      ],
      account: [
        { 
          icon: "solar:users-group-rounded-bold-duotone", 
          label: "Switch account", 
          action: "switch",
          showAvatar: false
        },
        { icon: "solar:logout-2-bold-duotone", label: "Log out", action: "logout" }
      ]
    };


    // Interface for menu item for better type safety

    interface MenuItem {
      value?: string;
      icon: string;
      label: string;
      action?: string;
      iconClass?: string;
      badge?: { text: string; className: string };
      rightIcon?: string;
      showAvatar?: boolean;
    }


    export const UserDropdown = ({ 
      user = {
        name: "Ayman Echakar",
        username: "@aymanch-03",
        avatar: "https://avatars.githubusercontent.com/u/126724835?v=4",
        initials: "AE",
        status: "online"
      },
      onAction = () => {},
      onStatusChange = () => {},
      selectedStatus = "online",
      promoDiscount = "20% off",
    }) => {
      const renderMenuItem = (item: MenuItem, index: number) => (
        <DropdownMenuItem 
          key={index}
          className={cn(
            "p-2 rounded-lg cursor-pointer",
            item.badge || item.showAvatar || item.rightIcon ? "justify-between" : ""
          )}
          onClick={() => item.action && onAction(item.action)}
        >
          <span className="flex items-center gap-1.5 font-medium">
            <Icon
              icon={item.icon}
              className={cn("h-5 w-5 text-muted-foreground", item.iconClass)}
            />
            {item.label}
          </span>
          {item.badge && (
            <Badge className={item.badge.className}>
              {promoDiscount || item.badge.text}
            </Badge>
          )}
          {item.rightIcon && (
            <Icon
              icon={item.rightIcon}
              className="h-4 w-4 text-muted-foreground"
            />
          )}
          {item.showAvatar && (
            <Avatar className="cursor-pointer h-6 w-6 shadow border-2 border-background">
              <AvatarImage src={user.avatar} alt={user.name} />
              <AvatarFallback>{user.initials}</AvatarFallback>
            </Avatar>
          )}
        </DropdownMenuItem>
      );

      const getStatusColor = (status: string) => {
        const colors = {
          online: "text-green-600 bg-green-100 border-green-300 dark:text-green-400 dark:bg-green-900/30 dark:border-green-500/50",
          offline: "text-muted-foreground bg-muted border-border",
          busy: "text-red-600 bg-red-100 border-red-300 dark:text-red-400 dark:bg-red-900/30 dark:border-red-500/50"
        };
        return colors[status.toLowerCase() as keyof typeof colors] || colors.online;
      };

      return (
        <DropdownMenu>
          <DropdownMenuTrigger asChild>
            <Avatar className="cursor-pointer h-10 w-10 border-2 border-transparent hover:border-primary transition-colors">
              <AvatarImage src={user.avatar} alt={user.name} />
              <AvatarFallback>{user.initials}</AvatarFallback>
            </Avatar>
          </DropdownMenuTrigger>

          <DropdownMenuContent className="no-scrollbar w-[310px] rounded-2xl p-0" align="end">
            <section className="bg-popover/50 backdrop-blur-lg rounded-2xl p-1 shadow-xl border">
              <div className="flex items-center p-2">
                <div className="flex-1 flex items-center gap-2">
                  <Avatar className="cursor-pointer h-10 w-10">
                    <AvatarImage src={user.avatar} alt={user.name} />
                    <AvatarFallback>{user.initials}</AvatarFallback>
                  </Avatar>
                  <div>
                    <h3 className="font-semibold text-sm">{user.name}</h3>
                    <p className="text-muted-foreground text-xs">{user.username}</p>
                  </div>
                </div>
                <Badge variant="outline" className={cn("border-[0.5px] text-[11px] rounded-sm capitalize", getStatusColor(user.status))}>
                  {user.status}
                </Badge>
              </div>

              <DropdownMenuGroup>
                <DropdownMenuSub>
                  <DropdownMenuSubTrigger className="cursor-pointer p-2 rounded-lg">
                    <span className="flex items-center gap-1.5 font-medium text-muted-foreground">
                      <Icon icon="solar:smile-circle-line-duotone" className="h-5 w-5" />
                      Update status
                    </span>
                  </DropdownMenuSubTrigger>
                  <DropdownMenuPortal>
                    <DropdownMenuSubContent>
                      <DropdownMenuRadioGroup value={selectedStatus} onValueChange={onStatusChange}>
                        {MENU_ITEMS.status.map((status, index) => (
                          <DropdownMenuRadioItem className="gap-2" key={index} value={status.value}>
                            <Icon icon={status.icon} className="h-5 w-5 text-muted-foreground" />
                            {status.label}
                          </DropdownMenuRadioItem>
                        ))}
                      </DropdownMenuRadioGroup>
                    </DropdownMenuSubContent>
                  </DropdownMenuPortal>
                </DropdownMenuSub>
              </DropdownMenuGroup>

              <DropdownMenuSeparator />
              <DropdownMenuGroup>
                {MENU_ITEMS.profile.map(renderMenuItem)}
              </DropdownMenuGroup>

              <DropdownMenuSeparator />
              <DropdownMenuGroup>
                {MENU_ITEMS.premium.map(renderMenuItem)}
              </DropdownMenuGroup>

              <DropdownMenuSeparator />
              <DropdownMenuGroup>
                {MENU_ITEMS.support.map(renderMenuItem)}
              </DropdownMenuGroup>
            </section>

            <section className="mt-1 p-1">
              <DropdownMenuGroup>
                {MENU_ITEMS.account.map(renderMenuItem)}
              </DropdownMenuGroup>
            </section>
          </DropdownMenuContent>
        </DropdownMenu>
      );
    };
approved: true
linesAdded: null
linesRemoved: null
linesDifference: null
gitCommittedAt: '2025-10-10T22:47:44.962Z'
status: committed
id: 77
