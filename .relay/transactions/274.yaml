uuid: d2531a61-1a3b-4860-911b-ed24c431dd84
projectId: jeli-app-shell
createdAt: '2025-10-14T02:56:34.798Z'
gitCommitMsg: >-
  fix(typing): Resolve TypeScript errors after refactoring

  This commit addresses several TypeScript errors that arose after the major
  refactoring to eliminate prop drilling.

  - Corrects a type mismatch for `bodyState` in `RightPane` by sourcing it from
  `useAppShell` context, which includes the `fullscreen` state. - Refactors
  `DataTableView` to perform its own data grouping, aligning it with the
  consistent flat-array data structure now provided by the `useDataDemo`
  context. This resolves multiple `unknown` type errors. - Removes unused
  variables and type imports from `DataDemo` feature components that were left
  over from the refactoring.
promptSummary: >-
  The user has executed all parts of a refactoring plan and is now facing
  TypeScript errors. I am tasked with fixing these errors, which involve
  incorrect typings, unused variables/imports, and components having
  inconsistent expectations about data structures.
reasoning:
  - >-
    Of course. It looks like the previous refactor introduced some TypeScript
    errors and left behind some unused code. Let's clean this up. I'll address
    each error and then provide the corrected code.
  - '### Error Analysis & Fixes'
  - >-
    1.  **`RightPane.tsx` type error**: The `bodyState` from `useAppViewManager`
    is derived only from URL parameters and doesn't know about the
    `'fullscreen'` state, which is managed in `AppShellContext`. The fix is to
    get `bodyState` from `useAppShell`, which has the complete type.
  - >-
    2.  **`DataTableView.tsx` type errors**: These errors all stem from the
    component expecting a grouped data structure (an object of arrays), while
    the `useDataManagement` hook now provides a flat array (`DataItem[]`) to all
    views for consistency. The correct approach is to make `DataTableView`
    responsible for grouping the flat array it receives. This keeps the data
    hook simple and decouples the view components. I'll add memoized grouping
    logic inside `DataTableView`.
  - >-
    3.  **Unused Imports/Variables**: In `DataCardView.tsx`, `DataToolbar.tsx`,
    and `DataDemo/index.tsx`, the refactor left behind unused imports and
    variables. These will be removed.
  - Here are the patches to fix the codebase.
  - '### Step 1: Fix `RightPane` `bodyState` Typing'
  - >-
    I'll adjust `RightPane.tsx` to source its `bodyState` from the `useAppShell`
    hook, which correctly includes the `fullscreen` state in its type
    definition.
  - '### Step 2: Clean Up Unused Imports'
  - >-
    Next, I'll remove the unused `ViewProps` and `SortConfig` type imports from
    `DataCardView.tsx` and `DataToolbar.tsx`.
  - '### Step 3: Refactor `DataTableView` to Handle Grouping'
  - >-
    This is the main fix. I'll modify `DataTableView.tsx` to accept the flat
    array of data from the context and perform the grouping operation
    internally. This resolves all the `unknown` type errors and makes the
    component's behavior explicit.
  - '### Step 4: Remove Unused Variables'
  - >-
    Finally, I'll remove the unused `filters` and `sortConfig` variables from
    `DataDemo/index.tsx` to clear the last two warnings.
  - >-
    These changes should resolve all the TypeScript errors and clean up the
    codebase.
operations:
  - type: write
    path: src/components/layout/RightPane.tsx
    content: >+
      --- src/components/layout/RightPane.tsx

      +++ src/components/layout/RightPane.tsx

      @@ -7,10 +7,10 @@
       import { useAppViewManager } from '@/hooks/useAppViewManager.hook'
       import { useRightPaneContent } from '@/hooks/useRightPaneContent.hook'
       
       export const RightPane = forwardRef<HTMLDivElement, { className?: string }>(({ className }, ref) => {
      -  const { dispatch, fullscreenTarget, toggleFullscreen } = useAppShell()

      +  const { dispatch, fullscreenTarget, toggleFullscreen, bodyState } =
      useAppShell()
         const viewManager = useAppViewManager()
      -  const { bodyState, sidePaneContent, closeSidePane, toggleSplitView,
      navigateTo } = viewManager

      +  const { sidePaneContent, closeSidePane, toggleSplitView, navigateTo } =
      viewManager
         
         const { meta, content: children } = useRightPaneContent(sidePaneContent)
         

    patchStrategy: standard-diff
  - type: write
    path: src/pages/DataDemo/components/DataCardView.tsx
    content: |+
      --- src/pages/DataDemo/components/DataCardView.tsx
      +++ src/pages/DataDemo/components/DataCardView.tsx
      @@ -2,7 +2,7 @@
       import { cn } from '@/lib/utils'
       import { Badge } from '@/components/ui/badge'
       import { ArrowUpRight } from 'lucide-react'
      -import type { ViewProps, DataItem } from '../types'
      +import type { DataItem } from '../types'
       import { useStaggeredAnimation } from '@/hooks/useStaggeredAnimation.motion.hook'
       import { EmptyState } from './EmptyState'
       import { useDataDemo } from '../context/DataDemoContext'

    patchStrategy: standard-diff
  - type: write
    path: src/pages/DataDemo/components/DataToolbar.tsx
    content: >+
      --- src/pages/DataDemo/components/DataToolbar.tsx

      +++ src/pages/DataDemo/components/DataToolbar.tsx

      @@ -25,7 +25,7 @@
         CommandSeparator,
       } from '@/components/ui/command'
       
      -import type { SortConfig, SortableField, Status, Priority } from
      '../types'

      +import type { SortableField, Status, Priority } from '../types'
       import { useDataDemo } from '../context/DataDemoContext'
       
       export interface FilterConfig {

    patchStrategy: standard-diff
  - type: write
    path: src/pages/DataDemo/components/DataTableView.tsx
    content: >+
      --- src/pages/DataDemo/components/DataTableView.tsx

      +++ src/pages/DataDemo/components/DataTableView.tsx

      @@ -1,4 +1,4 @@

      -import { useRef, useLayoutEffect } from 'react'

      +import { useRef, useLayoutEffect, useMemo } from 'react'
       import { gsap } from 'gsap'
       import { cn } from '@/lib/utils'
       import { 
      @@ -16,10 +16,11 @@
           onItemSelect,
           selectedItem,
           sortConfig,
      -    setTableSort: onSort

      +    setTableSort: onSort,

      +    groupBy,
         } = useDataDemo();
         const tableRef = useRef<HTMLTableElement>(null)
         const animatedItemsCount = useRef(0)
       
         useLayoutEffect(() => {
           if (tableRef.current) {
             // Only select item rows for animation, not group headers
      @@ -35,11 +36,7 @@
                 stagger: 0.05,
                 ease: "power2.out",
               },
             );
      -      animatedItemsCount.current = Array.isArray(data) 

      -        ? data.length 

      -        : Object.values(data).reduce((sum, items) => sum + items.length,
      0);

      +      animatedItemsCount.current = data.length;
           }
         }, [data]);
       
      @@ -60,9 +57,20 @@
           onSort?.(field)
         }
       
      -  if ((Array.isArray(data) && data.length === 0) || (!Array.isArray(data)
      && Object.keys(data).length === 0)) {

      +  const groupedData = useMemo(() => {

      +    if (groupBy === 'none') return null;

      +    return (data as DataItem[]).reduce((acc, item) => {

      +      const groupKey = item[groupBy as 'status' | 'priority' |
      'category'] || 'N/A';

      +      if (!acc[groupKey]) {

      +        acc[groupKey] = [];

      +      }

      +      acc[groupKey].push(item);

      +      return acc;

      +    }, {} as Record<string, DataItem[]>);

      +  }, [data, groupBy]);

      +

      +  if (data.length === 0) {
           return <EmptyState />
         }
       
      @@ -144,9 +152,9 @@
                   </tr>
                 </thead>
                 <tbody>
      -            {Array.isArray(data)

      -              ? data.map(item => <TableRow key={item.id} item={item}
      isSelected={selectedItem?.id === item.id} onItemSelect={onItemSelect} />)

      -              : Object.entries(data).flatMap(([groupName, items]) => [

      +            {groupedData

      +              ? Object.entries(groupedData).flatMap(([groupName, items])
      => [
                         <tr key={groupName} data-group-header="true" className="sticky top-0 z-10">
                           <td colSpan={8} className="p-2 bg-muted/50 backdrop-blur-sm">
                             <div className="flex items-center gap-2">
      @@ -156,7 +164,8 @@
                           </td>
                         </tr>,
                         ...items.map(item => <TableRow key={item.id} item={item} isSelected={selectedItem?.id === item.id} onItemSelect={onItemSelect} />)
      -                ])

      +                ])

      +              : data.map(item => <TableRow key={item.id} item={item}
      isSelected={selectedItem?.id === item.id} onItemSelect={onItemSelect} />)
                   }
                 </tbody>
               </table>

    patchStrategy: standard-diff
  - type: write
    path: src/pages/DataDemo/index.tsx
    content: |+
      --- src/pages/DataDemo/index.tsx
      +++ src/pages/DataDemo/index.tsx
      @@ -56,9 +56,7 @@
           viewMode,
           groupBy,
           activeGroupTab,
      -    filters,
      -    sortConfig,
           hasMore,
           isLoading,
           loaderRef,

    patchStrategy: standard-diff
snapshot:
  src/components/layout/RightPane.tsx: >-
    import { forwardRef, useMemo, useCallback, createElement } from 'react'

    import {
      ChevronRight,
      X,
      Layers,
      SplitSquareHorizontal,
      ChevronsLeftRight,
    } from 'lucide-react'

    import { cn, BODY_STATES } from '@/lib/utils'

    import { useAppShell } from '@/context/AppShellContext'

    import { useAppViewManager } from '@/hooks/useAppViewManager.hook'

    import { useRightPaneContent } from '@/hooks/useRightPaneContent.hook'


    export const RightPane = forwardRef<HTMLDivElement, { className?: string
    }>(({ className }, ref) => {
      const { dispatch, fullscreenTarget, toggleFullscreen } = useAppShell()
      const viewManager = useAppViewManager()
      const { bodyState, sidePaneContent, closeSidePane, toggleSplitView, navigateTo } = viewManager
      
      const { meta, content: children } = useRightPaneContent(sidePaneContent)
      
      const isSplitView = bodyState === BODY_STATES.SPLIT_VIEW;
      const isFullscreen = bodyState === BODY_STATES.FULLSCREEN;

      const handleMaximize = useCallback(() => {
        if ("page" in meta && meta.page) {
          navigateTo(meta.page);
        }
      }, [meta, navigateTo]);

      const header = useMemo(() => (
        <div className="flex items-center justify-between p-4 border-b border-border h-20 flex-shrink-0 pl-6">
          {bodyState !== BODY_STATES.SPLIT_VIEW && 'icon' in meta ? (
            <div className="flex items-center gap-2">
              {meta.icon && createElement(meta.icon, { className: "w-5 h-5" })}
              <h2 className="text-lg font-semibold whitespace-nowrap">{meta.title}</h2>
            </div>
          ) : <div />}
          <div className="flex items-center">
            {(bodyState === BODY_STATES.SIDE_PANE || bodyState === BODY_STATES.SPLIT_VIEW) && (
              <button onClick={toggleSplitView} className="h-10 w-10 flex items-center justify-center hover:bg-accent rounded-full transition-colors" title={bodyState === BODY_STATES.SIDE_PANE ? "Switch to Split View" : "Switch to Overlay View"}>
                {bodyState === BODY_STATES.SPLIT_VIEW ? <Layers className="w-5 h-5" /> : <SplitSquareHorizontal className="w-5 h-5" />}
              </button>
            )}
            {bodyState !== BODY_STATES.SPLIT_VIEW && "page" in meta && meta.page && (
              <button onClick={handleMaximize} className="h-10 w-10 flex items-center justify-center hover:bg-accent rounded-full transition-colors mr-2" title="Move to Main View">
                <ChevronsLeftRight className="w-5 h-5" />
              </button>
            )}
          </div>
        </div>
      ), [bodyState, meta, handleMaximize, toggleSplitView]);

      if (isFullscreen && fullscreenTarget !== 'right') {
        return null;
      }

      return (
        <aside
          ref={ref}
          className={cn(
            "border-l border-border flex flex-col h-full overflow-hidden",
            isSplitView && "relative bg-background",
            !isSplitView && !isFullscreen && "fixed top-0 right-0 z-[60] bg-card", // side pane overlay
            isFullscreen && fullscreenTarget === 'right' && "fixed inset-0 z-[60] bg-card", // fullscreen
            className,
          )}
        >
          {isFullscreen && fullscreenTarget === 'right' && (
            <button
              onClick={() => toggleFullscreen()}
              className="fixed top-6 right-6 lg:right-12 z-[100] h-12 w-12 flex items-center justify-center rounded-full bg-card/50 backdrop-blur-sm hover:bg-card/75 transition-colors group"
              title="Exit Fullscreen"
            >
              <X className="w-6 h-6 group-hover:scale-110 group-hover:rotate-90 transition-all duration-300" />
            </button>
          )}
          {bodyState !== BODY_STATES.SPLIT_VIEW && !isFullscreen && (
            <button
              onClick={closeSidePane}
              className="absolute top-1/2 -left-px -translate-y-1/2 -translate-x-full w-8 h-16 bg-card border border-r-0 border-border rounded-l-lg flex items-center justify-center hover:bg-accent transition-colors group z-10"
              title="Close pane"
            >
              <ChevronRight className="w-5 h-5 text-muted-foreground group-hover:text-foreground transition-colors" />
            </button>
          )}
          <div 
            className={cn(
              "absolute top-0 left-0 w-2 h-full bg-transparent hover:bg-primary/20 cursor-col-resize z-50 transition-colors duration-200 group -translate-x-1/2"
            )}
            onMouseDown={(e) => {
              e.preventDefault()
              dispatch({ type: 'SET_IS_RESIZING_RIGHT_PANE', payload: true });
            }}
          >
            <div className="w-0.5 h-full bg-border group-hover:bg-primary transition-colors duration-200 mx-auto" />
          </div>
          {header}
          <div className={cn("flex-1 overflow-y-auto")}>
            {children}
          </div>
        </aside>
      )
    })

    RightPane.displayName = "RightPane"
  src/pages/DataDemo/components/DataToolbar.tsx: >-
    import * as React from 'react'

    import { Check, ListFilter, Search, SortAsc } from 'lucide-react'


    import { cn } from '@/lib/utils'

    import { Button } from '@/components/ui/button'

    import { Input } from '@/components/ui/input'

    import { Badge } from '@/components/ui/badge'

    import { Popover, PopoverContent, PopoverTrigger } from
    '@/components/ui/popover'

    import {
      DropdownMenu,
      DropdownMenuContent,
      DropdownMenuRadioGroup,
      DropdownMenuRadioItem,
      DropdownMenuSeparator,
      DropdownMenuLabel,
      DropdownMenuTrigger,
    } from '@/components/ui/dropdown-menu'

    import {
      Command,
      CommandEmpty,
      CommandGroup,
      CommandInput,
      CommandItem,
      CommandList,
      CommandSeparator,
    } from '@/components/ui/command'


    import type { SortConfig, SortableField, Status, Priority } from '../types'

    import { useDataDemo } from '../context/DataDemoContext'


    export interface FilterConfig {
      searchTerm: string
      status: Status[]
      priority: Priority[]
    }


    const statusOptions: { value: Status; label: string }[] = [
      { value: 'active', label: 'Active' },
      { value: 'pending', label: 'Pending' },
      { value: 'completed', label: 'Completed' },
      { value: 'archived', label: 'Archived' },
    ]


    const priorityOptions: { value: Priority; label: string }[] = [
      { value: 'critical', label: 'Critical' },
      { value: 'high', label: 'High' },
      { value: 'medium', label: 'Medium' },
      { value: 'low', label: 'Low' },
    ]


    const sortOptions: { value: SortableField, label: string }[] = [
      { value: 'updatedAt', label: 'Last Updated' },
      { value: 'title', label: 'Title' },
      { value: 'status', label: 'Status' },
      { value: 'priority', label: 'Priority' },
      { value: 'metrics.completion', label: 'Progress' },
    ]



    export function DataToolbar() {
      const {
        filters,
        setFilters: onFiltersChange,
        sortConfig,
        setSort: onSortChange,
      } = useDataDemo();

      const handleSearchChange = (event: React.ChangeEvent<HTMLInputElement>) => {
        onFiltersChange({ ...filters, searchTerm: event.target.value })
      }
      
      const activeFilterCount = filters.status.length + filters.priority.length

      return (
        <div className="flex flex-col md:flex-row items-center justify-between gap-4 w-full">
          {/* Left side: Search, Filters */}
          <div className="flex flex-col sm:flex-row items-center gap-2 w-full md:w-auto">
            <div className="relative w-full sm:w-auto">
              <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground" />
              <Input
                placeholder="Search projects..."
                className="pl-9 w-full sm:w-64"
                value={filters.searchTerm}
                onChange={handleSearchChange}
              />
            </div>

            <Popover>
              <PopoverTrigger asChild>
                <Button variant="outline" size="sm" className="h-9 w-full sm:w-auto justify-start border-dashed">
                  <ListFilter className="mr-2 h-4 w-4" />
                  Filters
                  {activeFilterCount > 0 && (
                    <>
                      <div className="mx-2 h-4 w-px bg-muted-foreground/50" />
                      <Badge variant="secondary" className="rounded-sm px-1 font-normal">
                        {activeFilterCount}
                      </Badge>
                    </>
                  )}
                </Button>
              </PopoverTrigger>
              <PopoverContent className="w-[240px] p-0" align="start">
                <CombinedFilter filters={filters} onFiltersChange={onFiltersChange} />
              </PopoverContent>
            </Popover>

            {activeFilterCount > 0 && (
              <Button variant="ghost" onClick={() => onFiltersChange({ searchTerm: filters.searchTerm, status: [], priority: [] })}>Reset</Button>
            )}
          </div>

          {/* Right side: Sorter */}
          <div className="flex items-center gap-2 w-full md:w-auto justify-start md:justify-end">
            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <Button variant="outline" className="w-full sm:w-auto justify-start">
                  <SortAsc className="mr-2 h-4 w-4" />
                  Sort by: {sortOptions.find(o => o.value === sortConfig?.key)?.label || 'Default'}
                </Button>
              </DropdownMenuTrigger>
              <DropdownMenuContent align="end" className="w-[200px]">
                <DropdownMenuLabel>Sort by</DropdownMenuLabel>
                <DropdownMenuRadioGroup
                  value={`${sortConfig?.key || 'default'}-${sortConfig?.direction || ''}`}
                  onValueChange={(value) => {
                    if (value.startsWith('default')) {
                      onSortChange(null)
                    } else {
                      const [key, direction] = value.split('-')
                      onSortChange({ key: key as SortableField, direction: direction as 'asc' | 'desc' })
                    }
                  }}
                >
                  <DropdownMenuRadioItem value="default-">Default</DropdownMenuRadioItem>
                  <DropdownMenuSeparator />
                  {sortOptions.map(option => (
                    <React.Fragment key={option.value}>
                      <DropdownMenuRadioItem value={`${option.value}-desc`}>{option.label} (Desc)</DropdownMenuRadioItem>
                      <DropdownMenuRadioItem value={`${option.value}-asc`}>{option.label} (Asc)</DropdownMenuRadioItem>
                    </React.Fragment>
                  ))}
                </DropdownMenuRadioGroup>
              </DropdownMenuContent>
            </DropdownMenu>
          </div>
        </div>
      )
    }


    function CombinedFilter({
      filters,
      onFiltersChange,
    }: {
      filters: FilterConfig;
      onFiltersChange: (filters: FilterConfig) => void;
    }) {
      const selectedStatus = new Set(filters.status);
      const selectedPriority = new Set(filters.priority);

      const handleStatusSelect = (status: Status) => {
        selectedStatus.has(status) ? selectedStatus.delete(status) : selectedStatus.add(status);
        onFiltersChange({ ...filters, status: Array.from(selectedStatus) });
      };

      const handlePrioritySelect = (priority: Priority) => {
        selectedPriority.has(priority) ? selectedPriority.delete(priority) : selectedPriority.add(priority);
        onFiltersChange({ ...filters, priority: Array.from(selectedPriority) });
      };

      const hasActiveFilters = filters.status.length > 0 || filters.priority.length > 0;

      return (
        <Command>
          <CommandInput placeholder="Filter by..." />
          <CommandList>
            <CommandEmpty>No results found.</CommandEmpty>

            <CommandGroup heading="Status">
              {statusOptions.map((option) => {
                const isSelected = selectedStatus.has(option.value);
                return (
                  <CommandItem
                    key={option.value}
                    onSelect={() => handleStatusSelect(option.value)}
                  >
                    <div
                      className={cn(
                        'mr-2 flex h-4 w-4 items-center justify-center rounded-sm border border-primary',
                        isSelected ? 'bg-primary text-primary-foreground' : 'opacity-50 [&_svg]:invisible'
                      )}
                    >
                      <Check className={cn('h-4 w-4')} />
                    </div>
                    <span>{option.label}</span>
                  </CommandItem>
                );
              })}
            </CommandGroup>

            <CommandSeparator />

            <CommandGroup heading="Priority">
              {priorityOptions.map((option) => {
                const isSelected = selectedPriority.has(option.value);
                return (
                  <CommandItem
                    key={option.value}
                    onSelect={() => handlePrioritySelect(option.value)}
                  >
                    <div
                      className={cn(
                        'mr-2 flex h-4 w-4 items-center justify-center rounded-sm border border-primary',
                        isSelected ? 'bg-primary text-primary-foreground' : 'opacity-50 [&_svg]:invisible'
                      )}
                    >
                      <Check className={cn('h-4 w-4')} />
                    </div>
                    <span>{option.label}</span>
                  </CommandItem>
                );
              })}
            </CommandGroup>

            {hasActiveFilters && (
              <>
                <CommandSeparator />
                <CommandGroup>
                  <CommandItem
                    onSelect={() => onFiltersChange({ ...filters, status: [], priority: [] })}
                    className="justify-center text-center text-sm"
                  >
                    Clear filters
                  </CommandItem>
                </CommandGroup>
              </>
            )}
          </CommandList>
        </Command>
      )
    }
  src/pages/DataDemo/components/DataCardView.tsx: >-
    import { useRef } from 'react'

    import { cn } from '@/lib/utils'

    import { Badge } from '@/components/ui/badge'

    import { ArrowUpRight } from 'lucide-react'

    import type { ViewProps, DataItem } from '../types'

    import { useStaggeredAnimation } from
    '@/hooks/useStaggeredAnimation.motion.hook'

    import { EmptyState } from './EmptyState'

    import { useDataDemo } from '../context/DataDemoContext'

    import {
      AssigneeInfo,
      ItemMetrics,
      ItemProgressBar,
      ItemStatusBadge,
      ItemTags,
      ItemDateInfo,
    } from './shared/DataItemParts'


    export function DataCardView({ isGrid = false }: { isGrid?: boolean }) {
      const { dataToRender: data, onItemSelect, selectedItem } = useDataDemo();
      const containerRef = useRef<HTMLDivElement>(null)
      useStaggeredAnimation(containerRef, [data], { mode: 'incremental', y: 40 });

      const items = Array.isArray(data) ? data : [];
      if (items.length === 0) {
        return <EmptyState />
      }

      return (
        <div 
          ref={containerRef}
          className={cn(
            "gap-6",
            isGrid
              ? "grid grid-cols-[repeat(auto-fit,minmax(280px,1fr))]"
              : "grid grid-cols-[repeat(auto-fit,minmax(320px,1fr))]"
          )}
        >
          {items.map((item: DataItem) => {
            const isSelected = selectedItem?.id === item.id
            
            return (
              <div
                key={item.id}
                onClick={() => onItemSelect(item)}
                className={cn(
                  "group relative overflow-hidden rounded-3xl border bg-card/50 backdrop-blur-sm transition-all duration-500 cursor-pointer",
                  "hover:bg-card/80 hover:shadow-xl hover:shadow-primary/10 hover:border-primary/30 hover:-translate-y-2",
                  "active:scale-[0.98]",
                  isSelected && "ring-2 ring-primary/30 border-primary/40 bg-card/90 shadow-lg shadow-primary/20",
                )}
              >
                {/* Card Header with Thumbnail */}
                <div className="relative p-6 pb-4">
                  <div className="flex items-start justify-between mb-4">
                    <div className="w-16 h-16 bg-gradient-to-br from-primary/20 to-primary/10 rounded-2xl flex items-center justify-center text-3xl group-hover:scale-110 transition-transform duration-300">
                      {item.thumbnail}
                    </div>
                    <ArrowUpRight className="w-5 h-5 text-muted-foreground group-hover:text-primary group-hover:translate-x-1 group-hover:-translate-y-1 transition-all duration-300" />
                  </div>

                  {/* Priority indicator */}
                  <div className="absolute top-4 right-4">
                    <div className={cn(
                      "w-3 h-3 rounded-full",
                      item.priority === 'critical' && "bg-red-500",
                      item.priority === 'high' && "bg-orange-500",
                      item.priority === 'medium' && "bg-blue-500",
                      item.priority === 'low' && "bg-green-500"
                    )} />
                  </div>
                </div>

                {/* Card Content */}
                <div className="px-6 pb-6">
                  {/* Title and Description */}
                  <h3 className="font-semibold text-lg mb-2 group-hover:text-primary transition-colors line-clamp-2">
                    {item.title}
                  </h3>
                  <p className="text-muted-foreground text-sm mb-4 line-clamp-3">
                    {item.description}
                  </p>

                  {/* Status and Category */}
                  <div className="flex items-center gap-2 mb-4">
                    <ItemStatusBadge status={item.status} />
                    <Badge variant="outline" className="bg-accent/50 text-xs">
                      {item.category}
                    </Badge>
                  </div>

                  {/* Tags */}
                  <div className="mb-4"><ItemTags tags={item.tags} /></div>

                  {/* Progress */}
                  <div className="mb-4"><ItemProgressBar completion={item.metrics.completion} /></div>

                  {/* Assignee */}
                  <div className="mb-4"><AssigneeInfo assignee={item.assignee} /></div>

                  {/* Metrics */}
                  <div className="flex items-center justify-between text-xs text-muted-foreground">
                    <ItemMetrics metrics={item.metrics} />
                    <ItemDateInfo date={item.updatedAt} />
                  </div>
                </div>

                {/* Hover gradient overlay */}
                <div className="absolute inset-0 bg-gradient-to-br from-primary/5 via-transparent to-primary/5 opacity-0 group-hover:opacity-100 transition-opacity duration-500 pointer-events-none" />
                
                {/* Selection indicator */}
                {isSelected && (
                  <div className="absolute inset-0 bg-gradient-to-br from-primary/10 to-primary/5 pointer-events-none" />
                )}
              </div>
            )
          })}
        </div>
      )
    }
  src/pages/DataDemo/index.tsx: >
    import { useRef, useEffect } from 'react'

    import {
      Layers, 
      AlertTriangle, 
      PlayCircle, 
      TrendingUp,
      Loader2,
      ChevronsUpDown
    } from 'lucide-react'

    import { gsap } from 'gsap'

    import { cn } from '@/lib/utils'

    import { Button } from '@/components/ui/button'

    import { 
      DropdownMenu, 
      DropdownMenuContent, 
      DropdownMenuRadioGroup, 
      DropdownMenuRadioItem, 
      DropdownMenuTrigger 
    } from '@/components/ui/dropdown-menu'

    import { PageLayout } from '@/components/shared/PageLayout'

    import { DataListView } from './components/DataListView'

    import { DataCardView } from './components/DataCardView'

    import { DataTableView } from './components/DataTableView'

    import { DataViewModeSelector } from './components/DataViewModeSelector'

    import { AnimatedTabs } from '@/components/ui/animated-tabs'

    import { StatCard } from '@/components/shared/StatCard'

    import { AnimatedLoadingSkeleton } from
    './components/AnimatedLoadingSkeleton'

    import { DataToolbar } from './components/DataToolbar'

    import { mockDataItems } from './data/mockData'

    import type { GroupableField } from './types'

    import { useDataDemo, DataDemoProvider } from './context/DataDemoContext'


    type Stat = {
      title: string;
      value: string;
      icon: React.ReactNode;
      change: string;
      trend: 'up' | 'down';
      type?: 'card';
    };


    type ChartStat = {
      title: string;
      value: string;
      icon: React.ReactNode;
      change: string;
      trend: 'up' | 'down';
      type: 'chart';
      chartData: number[];
    };


    type StatItem = Stat | ChartStat;


    function DataDemoContent() {
      const {
        viewMode,
        groupBy,
        activeGroupTab,
        filters,
        sortConfig,
        hasMore,
        isLoading,
        loaderRef,
        groupTabs,
        dataToRender,
        totalItemCount,
        isInitialLoading,
        setGroupBy,
        setActiveGroupTab,
      } = useDataDemo();

      const groupOptions: { id: GroupableField | 'none'; label: string }[] = [
        { id: 'none', label: 'None' }, { id: 'status', label: 'Status' }, { id: 'priority', label: 'Priority' }, { id: 'category', label: 'Category' }
      ]
      const statsRef = useRef<HTMLDivElement>(null)

      // Calculate stats from data
      const totalItems = mockDataItems.length
      const activeItems = mockDataItems.filter(item => item.status === 'active').length
      const highPriorityItems = mockDataItems.filter(item => item.priority === 'high' || item.priority === 'critical').length
      const avgCompletion = totalItems > 0 ? Math.round(
        mockDataItems.reduce((acc, item) => acc + item.metrics.completion, 0) / totalItems
      ) : 0

      const stats: StatItem[] = [
        {
          title: "Total Projects",
          value: totalItems.toString(),
          icon: <Layers className="w-5 h-5" />,
          change: "+5.2% this month",
          trend: "up" as const,
          type: 'chart',
          chartData: [120, 125, 122, 130, 135, 138, 142]
        },
        {
          title: "Active Projects",
          value: activeItems.toString(),
          icon: <PlayCircle className="w-5 h-5" />,
          change: "+2 this week", 
          trend: "up" as const,
          type: 'chart',
          chartData: [45, 50, 48, 55, 53, 60, 58]
        },
        {
          title: "High Priority",
          value: highPriorityItems.toString(),
          icon: <AlertTriangle className="w-5 h-5" />,
          change: "-1 from last week",
          trend: "down" as const,
          type: 'chart',
          chartData: [25, 26, 28, 27, 26, 24, 23]
        },
        {
          title: "Avg. Completion",
          value: `${avgCompletion}%`,
          icon: <TrendingUp className="w-5 h-5" />,
          change: "+3.2%",
          trend: "up" as const,
          type: 'chart',
          chartData: [65, 68, 70, 69, 72, 75, 78]
        }
      ]

      useEffect(() => {
        // Animate stats cards in
        if (!isInitialLoading && statsRef.current) {
          gsap.fromTo(statsRef.current.children,
            { y: 30, opacity: 0 },
            {
              duration: 0.6,
              y: 0,
              opacity: 1,
              stagger: 0.1,
              ease: "power2.out"
            }
          )
        }
      }, [isInitialLoading])

      return (
        <PageLayout
          // Note: Search functionality is handled by a separate SearchBar in the TopBar
        >
          <div className="space-y-8">
            {/* Header */}
            <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-4">
              <div className="flex-1">
                <h1 className="text-2xl font-bold tracking-tight">Data Showcase</h1>
                <p className="text-muted-foreground">
                  {isInitialLoading 
                    ? "Loading projects..." 
                    : `Showing ${dataToRender.length} of ${totalItemCount} item(s)`}
                </p>
              </div>
              <DataViewModeSelector />
            </div>

            {/* Stats Section */}
            {!isInitialLoading && (
              <div ref={statsRef} className="grid grid-cols-[repeat(auto-fit,minmax(250px,1fr))] gap-6">
                {stats.map((stat) => (
                  <StatCard
                    key={stat.title}
                    title={stat.title}
                    value={stat.value}
                    change={stat.change}
                    trend={stat.trend}
                    icon={stat.icon}
                    chartData={stat.type === 'chart' ? stat.chartData : undefined}
                  />
                ))}
              </div>
            )}

            {/* Controls Area */}
            <div className="space-y-6">
              <DataToolbar />
            </div>

            {/* Group by and Tabs section */}
            <div className={cn(
              "flex items-center justify-between gap-4",
              groupBy !== 'none' && "border-b"
            )}>
              {/* Tabs on the left, takes up available space */}
              <div className="flex-grow overflow-x-auto overflow-y-hidden no-scrollbar">
                {groupBy !== 'none' && groupTabs.length > 1 ? (
                  <AnimatedTabs
                    tabs={groupTabs}
                    activeTab={activeGroupTab}
                    onTabChange={setActiveGroupTab}
                  />
                ) : (
                  <div className="h-[68px]" /> // Placeholder for consistent height.
                )}
              </div>
              
              {/* Group by dropdown on the right */}
              <div className="flex items-center gap-2 shrink-0">
                <span className="text-sm font-medium text-muted-foreground shrink-0">Group by:</span>
                <DropdownMenu>
                  <DropdownMenuTrigger asChild>
                    <Button variant="outline" className="w-[180px] justify-between">
                      {groupOptions.find(o => o.id === groupBy)?.label}
                      <ChevronsUpDown className="ml-2 h-4 w-4 shrink-0 opacity-50" />
                    </Button>
                  </DropdownMenuTrigger>
                  <DropdownMenuContent className="w-[180px]">
                    <DropdownMenuRadioGroup value={groupBy} onValueChange={setGroupBy}>
                      {groupOptions.map(option => (
                        <DropdownMenuRadioItem key={option.id} value={option.id}>
                          {option.label}
                        </DropdownMenuRadioItem>
                      ))}
                    </DropdownMenuRadioGroup>
                  </DropdownMenuContent>
                </DropdownMenu>
              </div>
            </div>

            <div className="min-h-[500px]">
              {isInitialLoading ? <AnimatedLoadingSkeleton viewMode={viewMode} /> : (
                <div>
                  {viewMode === 'table' ? <DataTableView /> : (
                    <>
                      {viewMode === 'list' && <DataListView />}
                      {viewMode === 'cards' && <DataCardView />}
                      {viewMode === 'grid' && <DataCardView isGrid />}
                    </>
                  )}
                </div>
              )}
            </div>

            {/* Loader for infinite scroll */}
            <div ref={loaderRef} className="flex justify-center items-center py-6">
              {isLoading && !isInitialLoading && groupBy === 'none' && (
                <div className="flex items-center gap-2 text-muted-foreground">
                  <Loader2 className="w-5 h-5 animate-spin" />
                  <span>Loading more...</span>
                </div>
              )}
              {!isLoading && !hasMore && dataToRender.length > 0 && !isInitialLoading && groupBy === 'none' && (
                <p className="text-muted-foreground">You've reached the end.</p>
              )}
            </div>
          </div>
        </PageLayout>
      )
    }


    export default function DataDemoPage() {
      return (
        <DataDemoProvider>
          <DataDemoContent />
        </DataDemoProvider>
      );
    }
  src/pages/DataDemo/components/DataTableView.tsx: >-
    import { useRef, useLayoutEffect } from 'react'

    import { gsap } from 'gsap'

    import { cn } from '@/lib/utils'

    import { 
      ArrowUpDown, 
      ArrowUp, 
      ArrowDown,
      ExternalLink
    } from 'lucide-react'

    import type { DataItem, SortableField } from '../types'

    import { EmptyState } from './EmptyState'

    import { useDataDemo } from '../context/DataDemoContext'

    import { capitalize } from '@/lib/utils'

    import {
      AssigneeInfo,
      ItemMetrics,
      ItemStatusBadge,
      ItemPriorityBadge,
      ItemDateInfo,
      ItemProgressBar,
    } from './shared/DataItemParts'


    export function DataTableView() {
      const {
        dataToRender: data,
        onItemSelect,
        selectedItem,
        sortConfig,
        setTableSort: onSort
      } = useDataDemo();
      const tableRef = useRef<HTMLTableElement>(null)
      const animatedItemsCount = useRef(0)

      useLayoutEffect(() => {
        if (tableRef.current) {
          // Only select item rows for animation, not group headers
          const newItems = Array.from( 
            tableRef.current.querySelectorAll('tbody tr')
          ).filter(tr => !(tr as HTMLElement).dataset.groupHeader)
           .slice(animatedItemsCount.current);
          gsap.fromTo(newItems,
            { y: 20, opacity: 0 },
            {
              duration: 0.5,
              y: 0,
              opacity: 1,
              stagger: 0.05,
              ease: "power2.out",
            },
          );
          animatedItemsCount.current = Array.isArray(data) 
            ? data.length 
            : Object.values(data).reduce((sum, items) => sum + items.length, 0);
        }
      }, [data]);

      const SortIcon = ({ field }: { field: SortableField }) => {
        if (sortConfig?.key !== field) {
          return <ArrowUpDown className="w-4 h-4 opacity-50" />
        }
        if (sortConfig.direction === 'asc') {
          return <ArrowUp className="w-4 h-4 text-primary" />
        }
        if (sortConfig.direction === 'desc') {
          return <ArrowDown className="w-4 h-4 text-primary" />
        }
        return <ArrowUpDown className="w-4 h-4 opacity-50" />
      }

      const handleSortClick = (field: SortableField) => {
        onSort?.(field)
      }

      if ((Array.isArray(data) && data.length === 0) || (!Array.isArray(data) && Object.keys(data).length === 0)) {
        return <EmptyState />
      }

      return (
        <div className="relative overflow-hidden rounded-2xl border bg-card/50 backdrop-blur-sm">
          <div className="overflow-x-auto">
            <table ref={tableRef} className="w-full">
              <thead>
                <tr className="border-b border-border/50 bg-muted/20">
                  <th className="text-left p-4 font-semibold text-sm">
                    <button
                      onClick={() => handleSortClick('title')}
                      className="flex items-center gap-2 hover:text-primary transition-colors"
                    >
                      Project
                      <SortIcon field="title" />
                    </button>
                  </th>
                  <th className="text-left p-4 font-semibold text-sm">
                    <button
                      onClick={() => handleSortClick('status')}
                      className="flex items-center gap-2 hover:text-primary transition-colors"
                    >
                      Status
                      <SortIcon field="status" />
                    </button>
                  </th>
                  <th className="text-left p-4 font-semibold text-sm">
                    <button
                      onClick={() => handleSortClick('priority')}
                      className="flex items-center gap-2 hover:text-primary transition-colors"
                    >
                      Priority
                      <SortIcon field="priority" />
                    </button>
                  </th>
                  <th className="text-left p-4 font-semibold text-sm">
                    <button
                      onClick={() => handleSortClick('assignee.name')}
                      className="flex items-center gap-2 hover:text-primary transition-colors"
                    >
                      Assignee
                      <SortIcon field="assignee.name" />
                    </button>
                  </th>
                  <th className="text-left p-4 font-semibold text-sm">
                    <button
                      onClick={() => handleSortClick('metrics.completion')}
                      className="flex items-center gap-2 hover:text-primary transition-colors"
                    >
                      Progress
                      <SortIcon field="metrics.completion" />
                    </button>
                  </th>
                  <th className="text-left p-4 font-semibold text-sm">
                    <button
                      onClick={() => handleSortClick('metrics.views')}
                      className="flex items-center gap-2 hover:text-primary transition-colors"
                    >
                      Engagement
                      <SortIcon field="metrics.views" />
                    </button>
                  </th>
                  <th className="text-left p-4 font-semibold text-sm">Last Updated</th>
                  <th className="text-center p-4 font-semibold text-sm w-16">Actions</th>
                </tr>
              </thead>
              <tbody>
                {Array.isArray(data)
                  ? data.map(item => <TableRow key={item.id} item={item} isSelected={selectedItem?.id === item.id} onItemSelect={onItemSelect} />)
                  : Object.entries(data).flatMap(([groupName, items]) => [
                      <tr key={groupName} data-group-header="true" className="sticky top-0 z-10">
                        <td colSpan={8} className="p-2 bg-muted/50 backdrop-blur-sm">
                          <div className="flex items-center gap-2">
                            <h3 className="font-semibold text-sm">{capitalize(groupName)}</h3>
                            <span className="text-xs px-2 py-0.5 bg-background rounded-full font-medium">{items.length}</span>
                          </div>
                        </td>
                      </tr>,
                      ...items.map(item => <TableRow key={item.id} item={item} isSelected={selectedItem?.id === item.id} onItemSelect={onItemSelect} />)
                    ])
                }
              </tbody>
            </table>
          </div>
        </div>
      )
    }


    function TableRow({ item, isSelected, onItemSelect }: { item: DataItem;
    isSelected: boolean; onItemSelect: (item: DataItem) => void }) {
      return (
        <tr
          onClick={() => onItemSelect(item)}
          className={cn(
            "group border-b border-border/30 transition-all duration-200 cursor-pointer",
            "hover:bg-accent/20 hover:border-primary/20",
            isSelected && "bg-primary/5 border-primary/30"
          )}
        >
          {/* Project Column */}
          <td className="p-4">
            <div className="flex items-center gap-3">
              <div className="w-10 h-10 bg-gradient-to-br from-primary/20 to-primary/10 rounded-lg flex items-center justify-center text-lg flex-shrink-0">
                {item.thumbnail}
              </div>
              <div className="min-w-0 flex-1">
                <h4 className="font-medium group-hover:text-primary transition-colors truncate">
                  {item.title}
                </h4>
                <p className="text-sm text-muted-foreground truncate">
                  {item.category}
                </p>
              </div>
            </div>
          </td>

          {/* Status Column */}
          <td className="p-4">
            <ItemStatusBadge status={item.status} />
          </td>

          {/* Priority Column */}
          <td className="p-4">
            <ItemPriorityBadge priority={item.priority} />
          </td>

          {/* Assignee Column */}
          <td className="p-4">
            <AssigneeInfo assignee={item.assignee} />
          </td>

          {/* Progress Column */}
          {/* Note: This progress bar is custom for the table, so we don't use the shared component here. */}
          <td className="p-4">
            <ItemProgressBar completion={item.metrics.completion} showPercentage />
          </td>

          {/* Engagement Column */}
          <td className="p-4">
            <ItemMetrics metrics={item.metrics} />
          </td>

          {/* Date Column */}
          <td className="p-4">
            <ItemDateInfo date={item.updatedAt} />
          </td>

          {/* Actions Column */}
          <td className="p-4">
            <button 
              onClick={(e) => {
                e.stopPropagation()
                onItemSelect(item)
              }}
              className="flex items-center justify-center w-8 h-8 rounded-lg hover:bg-accent transition-colors"
              title="View details"
            >
              <ExternalLink className="w-4 h-4" />
            </button>
          </td>
        </tr>
      )
    }
approved: true
linesAdded: null
linesRemoved: null
linesDifference: null
gitCommittedAt: null
status: committed
id: 274
