uuid: c25ca66d-195c-44da-9669-e58f001ca275
projectId: jeli-app-shell
createdAt: '2025-10-16T23:08:12.217Z'
gitCommitMsg: >-
  feat(ui): replace RightPane header controls with ViewModeSwitcher

  Replaced the basic view control buttons in the `RightPane` header with the
  full-featured `ViewModeSwitcher` component.

  - Updated `ViewModeSwitcher` to accept a generic `string` for `targetPage`,
  allowing it to handle dynamic routes. - The `ViewModeSwitcher` now appears in
  the `RightPane` header only when it is in the overlay (`SIDE_PANE`) state. -
  This provides a consistent user experience for managing view states (Normal,
  Split, Fullscreen) directly from the side pane. - Removed redundant buttons,
  handler logic, and icon imports from `RightPane`.
promptSummary: >-
  The user wants to replace the simple view control buttons in the `RightPane`
  header with the more comprehensive `ViewModeSwitcher` component, specifically
  when the pane is in its overlay/side-pane mode.
reasoning:
  - >-
    My first step is to make the `ViewModeSwitcher` more versatile. Currently,
    it expects a predefined page type, which is too restrictive for the
    `RightPane` as it often deals with dynamic URLs for detail views (e.g.,
    `/data-demo/item-123`). I'll update the `targetPage` prop to accept a
    generic string and adjust the internal logic to correctly parse the base
    page from the URL. This allows the switcher to function correctly regardless
    of whether the path is static or dynamic.
  - >-
    With the `ViewModeSwitcher` now ready, I'll integrate it into the
    `RightPane`. I'm replacing the simple, hardcoded buttons in the header with
    the new, comprehensive switcher. This change applies only when the pane is
    in its overlay state, ensuring a clean UI and providing the user with a
    consistent and powerful set of view management tools (Normal, Split,
    Fullscreen). I'll also clean up by removing the now-unused handler
    functions, state, and icon imports.
operations:
  - type: write
    path: src/components/layout/ViewModeSwitcher.tsx
    content: >+
      --- src/components/layout/ViewModeSwitcher.tsx

      +++ src/components/layout/ViewModeSwitcher.tsx

      @@ -2,7 +2,7 @@
       import { gsap } from 'gsap';
       import { cn } from '@/lib/utils'
      -import { useAppShellStore, type AppShellState, type ActivePage } from
      '@/store/appShell.store'

      +import { useAppShellStore, type AppShellState } from
      '@/store/appShell.store'
       import { BODY_STATES } from '@/lib/utils'
       import { useAppViewManager } from '@/hooks/useAppViewManager.hook'
       import {
      @@ -16,7 +16,7 @@
         ArrowLeftRight
       } from 'lucide-react'
       
      -export function ViewModeSwitcher({ pane, targetPage }: { pane?: 'main' |
      'right', targetPage?: ActivePage }) {

      +export function ViewModeSwitcher({ pane, targetPage }: { pane?: 'main' |
      'right', targetPage?: string }) {
         const bodyState = useAppShellStore(s => s.bodyState);
         const fullscreenTarget = useAppShellStore(s => s.fullscreenTarget);
         const { toggleFullscreen } = useAppShellStore.getState();
      @@ -75,12 +75,13 @@
         }, [isExpanded, bodyState]); // re-run if bodyState changes to recalc buttons
       
         const handlePaneClick = (type: 'side-pane' | 'split-view') => {
      -    const pageToPaneMap: Record<ActivePage,
      AppShellState['sidePaneContent']> = { // This type is now stricter because
      ActivePage includes messaging

      +    const pageToPaneMap: Record<string, AppShellState['sidePaneContent']>
      = {
             dashboard: 'main', settings: 'settings', toaster: 'toaster', notifications: 'notifications', 'data-demo': 'dataDemo',
             messaging: 'messaging',
           };
      -    const paneContent = pageToPaneMap[activePage];

      +    const basePage = activePage.split('/')[0];

      +    const paneContent = pageToPaneMap[basePage];
           if (type === 'side-pane') toggleSidePane(paneContent);
           else toggleSplitView();
         }

    patchStrategy: standard-diff
  - type: write
    path: src/components/layout/RightPane.tsx
    content: >+
      --- src/components/layout/RightPane.tsx

      +++ src/components/layout/RightPane.tsx

      @@ -1,16 +1,12 @@

      -import { forwardRef, useMemo, useCallback, createElement, memo } from
      'react'

      +import { forwardRef, useMemo, createElement, memo } from 'react'
       import {
         ChevronRight,
         X,
      -  Layers,

      -  SplitSquareHorizontal,

      -  ChevronsLeftRight,
       } from 'lucide-react'
       import { cn, BODY_STATES } from '@/lib/utils';
       import { useAppShellStore } from '@/store/appShell.store';
       import { useAppViewManager } from '@/hooks/useAppViewManager.hook'
       import { useRightPaneContent } from '@/hooks/useRightPaneContent.hook'
      +import { ViewModeSwitcher } from './ViewModeSwitcher';
       
       export const RightPane = memo(forwardRef<HTMLDivElement, { className?: string }>(({ className }, ref) => {
         const fullscreenTarget = useAppShellStore(s => s.fullscreenTarget)
      @@ -19,20 +15,14 @@
           useAppShellStore.getState()
       
         const viewManager = useAppViewManager()
      -  const { sidePaneContent, closeSidePane, toggleSplitView, navigateTo } =
      viewManager

      +  const { sidePaneContent, closeSidePane } = viewManager
         
         const { meta, content: children } = useRightPaneContent(sidePaneContent)
         
         const isSplitView = bodyState === BODY_STATES.SPLIT_VIEW;
         const isFullscreen = bodyState === BODY_STATES.FULLSCREEN;
       
      -  const handleMaximize = useCallback(() => {

      -    if ("page" in meta && meta.page) {

      -      navigateTo(meta.page);

      -    }

      -  }, [meta, navigateTo]);

      -
         const header = useMemo(() => (
           <div className="flex items-center justify-between p-4 border-b border-border h-20 flex-shrink-0 pl-6">
             {bodyState !== BODY_STATES.SPLIT_VIEW && 'icon' in meta ? (
      @@ -43,18 +33,9 @@
               </div>
             ) : <div />}
             <div className="flex items-center">
      -        {(bodyState === BODY_STATES.SIDE_PANE || bodyState ===
      BODY_STATES.SPLIT_VIEW) && (

      -          <button onClick={toggleSplitView} className="h-10 w-10 flex
      items-center justify-center hover:bg-accent rounded-full
      transition-colors" title={bodyState === BODY_STATES.SIDE_PANE ? "Switch to
      Split View" : "Switch to Overlay View"}>

      -            {bodyState === BODY_STATES.SPLIT_VIEW ? <Layers
      className="w-5 h-5" /> : <SplitSquareHorizontal className="w-5 h-5" />}

      -          </button>

      -        )}

      -        {bodyState !== BODY_STATES.SPLIT_VIEW && "page" in meta &&
      meta.page && (

      -          <button onClick={handleMaximize} className="h-10 w-10 flex
      items-center justify-center hover:bg-accent rounded-full transition-colors
      mr-2" title="Move to Main View">

      -            <ChevronsLeftRight className="w-5 h-5" />

      -          </button>

      -        )}

      +        {bodyState === BODY_STATES.SIDE_PANE && 'page' in meta &&
      meta.page && <ViewModeSwitcher pane="right" targetPage={meta.page} />}
             </div>
           </div>
      -  ), [bodyState, meta, handleMaximize, toggleSplitView]);

      +  ), [bodyState, meta]);
       
         if (isFullscreen && fullscreenTarget !== 'right') {
           return null;

    patchStrategy: standard-diff
snapshot:
  src/components/layout/ViewModeSwitcher.tsx: >-
    import { useState, useRef, useEffect } from 'react';

    import { gsap } from 'gsap';

    import { cn } from '@/lib/utils'

    import { useAppShellStore, type AppShellState, type ActivePage } from
    '@/store/appShell.store'

    import { BODY_STATES } from '@/lib/utils'

    import { useAppViewManager } from '@/hooks/useAppViewManager.hook'

    import {
      Columns,
      PanelRightOpen,
      SplitSquareHorizontal,
      Maximize,
      Minimize,
      Layers,
      X,
      ArrowLeftRight
    } from 'lucide-react'


    export function ViewModeSwitcher({ pane, targetPage }: { pane?: 'main' |
    'right', targetPage?: ActivePage }) {
      const bodyState = useAppShellStore(s => s.bodyState);
      const fullscreenTarget = useAppShellStore(s => s.fullscreenTarget);
      const { toggleFullscreen } = useAppShellStore.getState();
      const {
        currentActivePage,
        toggleSidePane,
        toggleSplitView,
        setNormalView,
        navigateTo,
        switchSplitPanes,
        closeSplitPane,
      } = useAppViewManager();

      const activePage = targetPage || currentActivePage;
      const [isExpanded, setIsExpanded] = useState(false);
      const buttonRefs = useRef<(HTMLButtonElement | null)[]>([]);

      const isFullscreen = bodyState === BODY_STATES.FULLSCREEN;
      const isThisPaneFullscreen = isFullscreen && (
        (pane === 'main' && fullscreenTarget !== 'right') ||
        (pane === 'right' && fullscreenTarget === 'right') ||
        (!pane && !fullscreenTarget) // Global switcher, global fullscreen
      );

      useEffect(() => {
        const buttonsToAnimate = buttonRefs.current.filter(Boolean) as HTMLButtonElement[];
        if (buttonsToAnimate.length === 0) return;

        gsap.killTweensOf(buttonsToAnimate);

        if (isExpanded) {
            gsap.to(buttonsToAnimate, {
                width: 32, // h-8 w-8
                opacity: 1,
                pointerEvents: 'auto',
                marginLeft: 4, // from gap-1 in original
                duration: 0.2,
                stagger: {
                    each: 0.05,
                    from: 'start'
                },
                ease: 'power2.out'
            });
        } else {
            gsap.to(buttonsToAnimate, {
                width: 0,
                opacity: 0,
                pointerEvents: 'none',
                marginLeft: 0,
                duration: 0.2,
                stagger: {
                    each: 0.05,
                    from: 'end'
                },
                ease: 'power2.in'
            });
        }
      }, [isExpanded, bodyState]); // re-run if bodyState changes to recalc buttons

      const handlePaneClick = (type: 'side-pane' | 'split-view') => {
        const pageToPaneMap: Record<ActivePage, AppShellState['sidePaneContent']> = { // This type is now stricter because ActivePage includes messaging
          dashboard: 'main', settings: 'settings', toaster: 'toaster', notifications: 'notifications', 'data-demo': 'dataDemo',
          messaging: 'messaging',
        };
        const paneContent = pageToPaneMap[activePage];
        if (type === 'side-pane') toggleSidePane(paneContent);
        else toggleSplitView();
      }

      const handleNormalViewClick = () => {
        if (isFullscreen) {
          toggleFullscreen();
        }
        if (targetPage && targetPage !== currentActivePage) {
          navigateTo(targetPage);
        } else {
          setNormalView();
        }
      }

      const buttons = [
        {
          id: 'normal',
          onClick: handleNormalViewClick,
          active: bodyState === BODY_STATES.NORMAL,
          title: "Normal View",
          icon: <Columns className="w-4 h-4" />
        },
        {
          id: 'side-pane',
          onClick: () => handlePaneClick('side-pane'),
          active: bodyState === BODY_STATES.SIDE_PANE,
          title: "Side Pane View",
          icon: <PanelRightOpen className="w-4 h-4" />
        },
        {
          id: 'split-view',
          onClick: () => handlePaneClick('split-view'),
          active: bodyState === BODY_STATES.SPLIT_VIEW,
          title: bodyState === BODY_STATES.SPLIT_VIEW ? 'Switch to Overlay View' : 'Switch to Split View',
          icon: bodyState === BODY_STATES.SPLIT_VIEW ? <Layers className="w-4 h-4" /> : <SplitSquareHorizontal className="w-4 h-4" />
        },
        {
          id: 'fullscreen',
          onClick: () => {
            if (targetPage && targetPage !== currentActivePage ) {
              navigateTo(targetPage);
              setTimeout(() => toggleFullscreen(pane), 50);
            } else {
              toggleFullscreen(pane);
            }
          },
          active: isThisPaneFullscreen,
          title: "Toggle Fullscreen",
          icon: isThisPaneFullscreen ? <Minimize className="w-4 h-4" /> : <Maximize className="w-4 h-4" />
        }
      ];

      if (bodyState === BODY_STATES.SPLIT_VIEW) {
        buttons.push({
          id: 'switch',
          onClick: switchSplitPanes,
          active: false,
          title: "Switch Panes",
          icon: <ArrowLeftRight className="w-4 h-4" />
        });
        buttons.push({
          id: 'close',
          onClick: () => closeSplitPane(pane || 'right'),
          active: false,
          title: "Close Pane",
          icon: <X className="w-4 h-4 text-muted-foreground group-hover:text-destructive" />
        });
      }

      return (
        <div
          onMouseEnter={() => setIsExpanded(true)}
          onMouseLeave={() => setIsExpanded(false)}
          className="flex items-center gap-0 p-1 bg-card rounded-full border border-border"
        >
            <button
                className='h-8 w-8 flex-shrink-0 flex items-center justify-center rounded-full hover:bg-accent transition-colors'
                title="View Modes"
                onClick={() => setIsExpanded(!isExpanded)}
            >
                <Layers className="w-4 h-4" />
            </button>
          
          {buttons.map((btn, index) => (
            <button
              key={btn.id}
              ref={el => buttonRefs.current[index] = el}
              onClick={btn.onClick}
              className={cn(
                'h-8 w-0 flex items-center justify-center rounded-full hover:bg-accent transition-colors group opacity-0',
                btn.active && 'bg-accent text-accent-foreground',
                btn.id === 'close' && 'hover:bg-destructive/20'
              )}
              style={{ pointerEvents: 'none', marginLeft: 0, overflow: 'hidden' }}
              title={btn.title}
            >
              {btn.icon}
            </button>
          ))}
        </div>
      )
    }
  src/components/layout/RightPane.tsx: >-
    import { forwardRef, useMemo, useCallback, createElement, memo } from
    'react'

    import {
      ChevronRight,
      X,
      Layers,
      SplitSquareHorizontal,
      ChevronsLeftRight,
    } from 'lucide-react'

    import { cn, BODY_STATES } from '@/lib/utils';

    import { useAppShellStore } from '@/store/appShell.store';

    import { useAppViewManager } from '@/hooks/useAppViewManager.hook'

    import { useRightPaneContent } from '@/hooks/useRightPaneContent.hook'


    export const RightPane = memo(forwardRef<HTMLDivElement, { className?:
    string }>(({ className }, ref) => {
      const fullscreenTarget = useAppShellStore(s => s.fullscreenTarget)
      const bodyState = useAppShellStore(s => s.bodyState)
      const { toggleFullscreen, setIsResizingRightPane } =
        useAppShellStore.getState()

      const viewManager = useAppViewManager()
      const { sidePaneContent, closeSidePane, toggleSplitView, navigateTo } = viewManager
      
      const { meta, content: children } = useRightPaneContent(sidePaneContent)
      
      const isSplitView = bodyState === BODY_STATES.SPLIT_VIEW;
      const isFullscreen = bodyState === BODY_STATES.FULLSCREEN;

      const handleMaximize = useCallback(() => {
        if ("page" in meta && meta.page) {
          navigateTo(meta.page);
        }
      }, [meta, navigateTo]);

      const header = useMemo(() => (
        <div className="flex items-center justify-between p-4 border-b border-border h-20 flex-shrink-0 pl-6">
          {bodyState !== BODY_STATES.SPLIT_VIEW && 'icon' in meta ? (
            <div className="flex items-center gap-2">
              {meta.icon && createElement(meta.icon, { className: "w-5 h-5" })}
              <h2 className="text-lg font-semibold whitespace-nowrap">{meta.title}</h2>
            </div>
          ) : <div />}
          <div className="flex items-center">
            {(bodyState === BODY_STATES.SIDE_PANE || bodyState === BODY_STATES.SPLIT_VIEW) && (
              <button onClick={toggleSplitView} className="h-10 w-10 flex items-center justify-center hover:bg-accent rounded-full transition-colors" title={bodyState === BODY_STATES.SIDE_PANE ? "Switch to Split View" : "Switch to Overlay View"}>
                {bodyState === BODY_STATES.SPLIT_VIEW ? <Layers className="w-5 h-5" /> : <SplitSquareHorizontal className="w-5 h-5" />}
              </button>
            )}
            {bodyState !== BODY_STATES.SPLIT_VIEW && "page" in meta && meta.page && (
              <button onClick={handleMaximize} className="h-10 w-10 flex items-center justify-center hover:bg-accent rounded-full transition-colors mr-2" title="Move to Main View">
                <ChevronsLeftRight className="w-5 h-5" />
              </button>
            )}
          </div>
        </div>
      ), [bodyState, meta, handleMaximize, toggleSplitView]);

      if (isFullscreen && fullscreenTarget !== 'right') {
        return null;
      }

      return (
        <aside
          ref={ref}
          className={cn(
            "border-l border-border flex flex-col h-full overflow-hidden",
            isSplitView && "relative bg-background",
            !isSplitView && !isFullscreen && "fixed top-0 right-0 z-[60] bg-card", // side pane overlay
            isFullscreen && fullscreenTarget === 'right' && "fixed inset-0 z-[60] bg-card", // fullscreen
            className,
          )}
        >
          {isFullscreen && fullscreenTarget === 'right' && (
            <button
              onClick={() => toggleFullscreen()}
              className="fixed top-6 right-6 lg:right-12 z-[100] h-12 w-12 flex items-center justify-center rounded-full bg-card/50 backdrop-blur-sm hover:bg-card/75 transition-colors group"
              title="Exit Fullscreen"
            >
              <X className="w-6 h-6 group-hover:scale-110 group-hover:rotate-90 transition-all duration-300" />
            </button>
          )}
          {bodyState !== BODY_STATES.SPLIT_VIEW && !isFullscreen && (
            <button
              onClick={closeSidePane}
              className="absolute top-1/2 -left-px -translate-y-1/2 -translate-x-full w-8 h-16 bg-card border border-r-0 border-border rounded-l-lg flex items-center justify-center hover:bg-accent transition-colors group z-10"
              title="Close pane"
            >
              <ChevronRight className="w-5 h-5 text-muted-foreground group-hover:text-foreground transition-colors" />
            </button>
          )}
          <div 
            className={cn(
              "absolute top-0 left-0 w-2 h-full bg-transparent hover:bg-primary/20 cursor-col-resize z-50 transition-colors duration-200 group -translate-x-1/2"
            )}
            onMouseDown={(e) => {
              e.preventDefault()
              setIsResizingRightPane(true);
            }}
          >
            <div className="w-0.5 h-full bg-border group-hover:bg-primary transition-colors duration-200 mx-auto" />
          </div>
          {!isSplitView && !isFullscreen && header}
          <div className={cn("flex-1 overflow-y-auto")}>
            {children}
          </div>
        </aside>
      )
    }));

    RightPane.displayName = "RightPane"
approved: true
linesAdded: null
linesRemoved: null
linesDifference: null
gitCommittedAt: '2025-10-16T23:09:03.598Z'
status: committed
id: 375
