uuid: c8243f29-23c5-4309-ab99-9b6d800fc48e
projectId: jeli-app-shell
createdAt: '2025-10-18T08:28:35.127Z'
gitCommitMsg: >-
  feat(DataDemo): refactor DataListView to Notion-style list

  - Replaced the card-based layout in DataListView with a clean, row-based,
  Notion-style list. - Used CSS Grid to align item properties into columns
  without a rigid table structure. - Updated row styling for hover and selection
  states to improve UX. - Added a `showEmail` prop to `AssigneeInfo` component
  to allow for a more compact display in the new list view.
promptSummary: >-
  The user wants to refactor the data demo list view to be more like a
  Notion-style list, instead of a collection of cards. The new UI should be
  clean, cohesive, and provide a great user experience.
reasoning:
  - >-
    This request is about transforming the `DataListView` component to emulate a
    Notion-style list view. The current implementation uses a card-based layout
    for each item, which I'll replace with a more structured, row-based design.
    The goal is to create a UI that is clean, organized, and provides a good
    user experience, aligning with the "amazing and cohesive" styling mentioned
    in the prompt, taking cues from `DataKanbanView.tsx` but avoiding a rigid
    table layout.
  - 'Here''s my plan:'
  - >-
    1.  **Refactor `DataListView.tsx`**: I will completely overhaul this
    component.
  - >-
    *   The main container will be a single bordered element with
    `overflow-hidden` to contain the list rows.
  - >-
    *   I'll use CSS Grid to create columns for different data properties
    (Title, Status, Priority, Assignee, etc.). This ensures vertical alignment
    without needing a traditional `<table>` structure, achieving the
    "Notion-like" feel.
  - '*   Each data item will be a row with a subtle bottom border (`divide-y`).'
  - >-
    *   Hover and selection states will be applied to the entire row for better
    interactivity.
  - >-
    *   I will select the most relevant data properties for display to keep the
    view uncluttered and readable, similar to a well-organized Notion database
    view.
  - >-
    2.  **Enhance `DataItemParts.tsx`**: To make the list view cleaner, I'll
    update the `AssigneeInfo` component.
  - >-
    *   I will add a `showEmail` prop to conditionally display the assignee's
    email. This allows me to show just the name and avatar in the dense list
    view, reducing visual noise. This change will be backward compatible, as the
    default behavior will be to show the email.
  - >-
    These changes will result in a more sophisticated and user-friendly list
    view that fits well within the application's aesthetic.
  - >-
    First, I'll update `DataItemParts.tsx` to allow for more control over the
    displayed assignee information.
  - >-
    Now, I'll replace the existing card-based `DataListView.tsx` with the new
    Notion-style implementation.
operations:
  - type: write
    path: src/pages/DataDemo/components/shared/DataItemParts.tsx
    content: >+
      --- src/pages/DataDemo/components/shared/DataItemParts.tsx

      +++ src/pages/DataDemo/components/shared/DataItemParts.tsx

      @@ -23,10 +23,12 @@
       export function AssigneeInfo({
         assignee,
         avatarClassName = "w-8 h-8",
      +  showEmail = true,
       }: {
         assignee: DataItem['assignee']
         avatarClassName?: string
      +  showEmail?: boolean
       }) {
         return (
           <div className="flex items-center gap-2 group">
      @@ -36,7 +38,7 @@
             </Avatar>
             <div className="min-w-0">
               <p className="font-medium text-sm truncate">{assignee.name}</p>
      -        <p className="text-xs text-muted-foreground
      truncate">{assignee.email}</p>

      +        {showEmail && <p className="text-xs text-muted-foreground
      truncate">{assignee.email}</p>}
             </div>
           </div>
         )

    patchStrategy: standard-diff
  - type: write
    path: src/pages/DataDemo/components/DataListView.tsx
    content: >-
      import { useRef } from 'react'

      import { cn } from '@/lib/utils'

      import { ArrowRight } from 'lucide-react'

      import type { DataItem } from '../types'

      import { useStaggeredAnimation } from
      '@/hooks/useStaggeredAnimation.motion.hook'

      import { EmptyState } from './EmptyState'

      import { useAppViewManager } from '@/hooks/useAppViewManager.hook'

      import { 
        useSelectedItem,
      } from '../store/dataDemo.store'

      import {
        AssigneeInfo,
        ItemProgressBar,
        ItemStatusBadge,
        ItemPriorityBadge,
        ItemDateInfo,
      } from './shared/DataItemParts'

      import { AddDataItemCta } from './shared/AddDataItemCta'


      export function DataListView({ data }: { data: DataItem[] }) {
        const { onItemSelect, itemId } = useAppViewManager();
        const selectedItem = useSelectedItem(itemId);

        const listRef = useRef<HTMLDivElement>(null)
        useStaggeredAnimation(listRef, [data], { mode: 'incremental', scale: 1, y: 30, stagger: 0.08, duration: 0.5 });

        const items = Array.isArray(data) ? data : [];
        if (items.length === 0) {
          return <EmptyState />
        }

        return (
          <div className="border bg-card/50 backdrop-blur-sm rounded-2xl overflow-hidden">
            <div ref={listRef} className="divide-y divide-border/50">
              {items.map((item: DataItem) => {
                const isSelected = selectedItem?.id === item.id
                
                return (
                  <div
                    key={item.id}
                    onClick={() => onItemSelect(item)}
                    className={cn(
                      "group grid grid-cols-[minmax(0,_3fr)_repeat(5,_minmax(0,_1fr))_auto] items-center gap-x-6 px-6 py-3 transition-colors duration-200 cursor-pointer",
                      "hover:bg-card/70",
                      isSelected && "bg-primary/10"
                    )}
                  >
                    {/* Column 1: Title */}
                    <div className="flex items-center gap-4 min-w-0">
                      <div className="flex-shrink-0 w-10 h-10 bg-gradient-to-br from-primary/20 to-primary/10 rounded-lg flex items-center justify-center text-xl">
                        {item.thumbnail}
                      </div>
                      <p className="font-medium truncate group-hover:text-primary transition-colors">{item.title}</p>
                    </div>
                    
                    {/* Column 2: Status */}
                    <div className="flex justify-start"><ItemStatusBadge status={item.status} /></div>

                    {/* Column 3: Priority */}
                    <div className="flex justify-start"><ItemPriorityBadge priority={item.priority} /></div>

                    {/* Column 4: Assignee */}
                    <div className="flex justify-start">
                      <AssigneeInfo assignee={item.assignee} avatarClassName="w-7 h-7" showEmail={false} />
                    </div>
                    
                    {/* Column 5: Last Updated */}
                    <div className="flex justify-start"><ItemDateInfo date={item.updatedAt} /></div>
                    
                    {/* Column 6: Progress */}
                    <div className="flex justify-start">
                        <ItemProgressBar completion={item.metrics.completion} showPercentage={true} />
                    </div>

                    {/* Arrow on hover */}
                    <div className="flex justify-end">
                      <ArrowRight className="w-5 h-5 text-transparent group-hover:text-muted-foreground transition-all duration-300 group-hover:translate-x-1" />
                    </div>
                  </div>
                )
              })}
            </div>
            <AddDataItemCta viewMode='list' />
          </div>
        )
      }
    patchStrategy: replace
snapshot:
  src/pages/DataDemo/components/shared/DataItemParts.tsx: >-
    import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar'

    import { Badge } from '@/components/ui/badge'

    import { cn, getStatusColor, getPriorityColor } from '@/lib/utils'

    import { Clock, Eye, Heart, Share } from 'lucide-react'

    import type { DataItem } from '../../types'


    export function ItemStatusBadge({ status }: { status: DataItem['status'] })
    {
      return (
        <Badge variant="outline" className={cn("font-medium", getStatusColor(status))}>
          {status.charAt(0).toUpperCase() + status.slice(1)}
        </Badge>
      )
    }


    export function ItemPriorityBadge({ priority }: { priority:
    DataItem['priority'] }) {
      return (
        <Badge variant="outline" className={cn("font-medium", getPriorityColor(priority))}>
          {priority.charAt(0).toUpperCase() + priority.slice(1)}
        </Badge>
      )
    }


    export function AssigneeInfo({
      assignee,
      avatarClassName = "w-8 h-8",
    }: {
      assignee: DataItem['assignee']
      avatarClassName?: string
    }) {
      return (
        <div className="flex items-center gap-2 group">
          <Avatar className={cn("border-2 border-transparent group-hover:border-primary/50 transition-colors", avatarClassName)}>
            <AvatarImage src={assignee.avatar} alt={assignee.name} />
            <AvatarFallback>{assignee.name.charAt(0)}</AvatarFallback>
          </Avatar>
          <div className="min-w-0">
            <p className="font-medium text-sm truncate">{assignee.name}</p>
            <p className="text-xs text-muted-foreground truncate">{assignee.email}</p>
          </div>
        </div>
      )
    }


    export function ItemMetrics({ metrics }: { metrics: DataItem['metrics'] }) {
      return (
        <div className="flex items-center gap-3 text-sm">
          <div className="flex items-center gap-1"><Eye className="w-4 h-4" /> {metrics.views}</div>
          <div className="flex items-center gap-1"><Heart className="w-4 h-4" /> {metrics.likes}</div>
          <div className="flex items-center gap-1"><Share className="w-4 h-4" /> {metrics.shares}</div>
        </div>
      )
    }


    export function ItemProgressBar({ completion, showPercentage }: {
    completion: number; showPercentage?: boolean }) {
      const bar = (
        <div className="w-full bg-muted rounded-full h-2.5">
          <div
            className="bg-gradient-to-r from-primary to-primary/80 h-2.5 rounded-full transition-all duration-500"
            style={{ width: `${completion}%` }}
          />
        </div>
      );

      if (!showPercentage) return bar;

      return (
        <div className="flex items-center gap-3">
          <div className="flex-1 min-w-0">{bar}</div>
          <span className="text-sm font-medium text-muted-foreground">{completion}%</span>
        </div>
      )
    }


    export function ItemDateInfo({ date }: { date: string }) {
      return (
        <div className="flex items-center gap-1.5 text-sm">
          <Clock className="w-4 h-4" />
          <span>{new Date(date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}</span>
        </div>
      )
    }


    export function ItemTags({ tags }: { tags: string[] }) {
      const MAX_TAGS = 3
      const remainingTags = tags.length - MAX_TAGS
      return (
        <div className="flex items-center gap-1.5 flex-wrap">
          {tags.slice(0, MAX_TAGS).map(tag => (
            <Badge key={tag} variant="secondary" className="text-xs">{tag}</Badge>
          ))}
          {remainingTags > 0 && (
            <Badge variant="outline" className="text-xs">+{remainingTags}</Badge>
          )}
        </div>
      )
    }
  src/pages/DataDemo/components/DataListView.tsx: >-
    import { useRef } from 'react'

    import { cn } from '@/lib/utils'

    import { Badge } from '@/components/ui/badge'

    import { ArrowRight } from 'lucide-react'

    import type { DataItem } from '../types'

    import { useStaggeredAnimation } from
    '@/hooks/useStaggeredAnimation.motion.hook'

    import { EmptyState } from './EmptyState'

    import { useAppViewManager } from '@/hooks/useAppViewManager.hook'

    import { 
      useSelectedItem,
    } from '../store/dataDemo.store'

    import {
      AssigneeInfo,
      ItemMetrics,
      ItemProgressBar,
      ItemStatusBadge,
      ItemPriorityBadge,
      ItemDateInfo,
    } from './shared/DataItemParts'

    import { AddDataItemCta } from './shared/AddDataItemCta'


    export function DataListView({ data }: { data: DataItem[] }) {
      const { onItemSelect, itemId } = useAppViewManager();
      const selectedItem = useSelectedItem(itemId);

      const listRef = useRef<HTMLDivElement>(null)
      useStaggeredAnimation(listRef, [data], { mode: 'incremental', scale: 1, y: 30, stagger: 0.08, duration: 0.5 });

      const items = Array.isArray(data) ? data : [];
      if (items.length === 0) {
        return <EmptyState />
      }

      return (
        <div ref={listRef} className="space-y-4 pb-4">
          {items.map((item: DataItem) => {
            const isSelected = selectedItem?.id === item.id
            
            return (
              <div
                key={item.id}
                onClick={() => onItemSelect(item)}
                className={cn(
                  "group relative overflow-hidden rounded-2xl border bg-card/50 backdrop-blur-sm transition-all duration-300 cursor-pointer",
                  "hover:bg-card/80 hover:shadow-lg hover:shadow-primary/5 hover:border-primary/20",
                  "active:scale-[0.99]",
                  isSelected && "ring-2 ring-primary/20 border-primary/30 bg-card/90"
                )}
              >
                <div className="p-6">
                  <div className="flex items-start gap-4">
                    {/* Thumbnail */}
                    <div className="flex-shrink-0">
                      <div className="w-14 h-14 bg-gradient-to-br from-primary/20 to-primary/10 rounded-xl flex items-center justify-center text-2xl">
                        {item.thumbnail}
                      </div>
                    </div>

                    {/* Content */}
                    <div className="flex-1 min-w-0">
                      <div className="flex items-start justify-between mb-3">
                        <div className="flex-1 min-w-0">
                          <h3 className="font-semibold text-lg mb-1 group-hover:text-primary transition-colors">
                            {item.title}
                          </h3>
                          <p className="text-muted-foreground text-sm mb-3 line-clamp-2">
                            {item.description}
                          </p>
                        </div>
                        <ArrowRight className="w-5 h-5 text-muted-foreground group-hover:text-primary group-hover:translate-x-1 transition-all duration-300 ml-4 flex-shrink-0" />
                      </div>

                      {/* Badges */}
                      <div className="flex items-center gap-2 mb-4">
                        <ItemStatusBadge status={item.status} />
                        <ItemPriorityBadge priority={item.priority} />
                        <Badge variant="outline" className="bg-accent/50">
                          {item.category}
                        </Badge>
                      </div>

                      {/* Meta info */}
                      <div className="flex items-center justify-between text-muted-foreground">
                        <div className="flex items-center gap-4">
                          {/* Assignee */}
                          <AssigneeInfo assignee={item.assignee} avatarClassName="w-7 h-7" />
                          {/* Date */}
                          <ItemDateInfo date={item.updatedAt} />
                        </div>

                        {/* Metrics */}
                        <ItemMetrics metrics={item.metrics} />
                      </div>

                      {/* Progress bar */}
                      <div className="mt-4"><ItemProgressBar completion={item.metrics.completion} /></div>
                    </div>
                  </div>
                </div>

                {/* Hover gradient overlay */}
                <div className="absolute inset-0 bg-gradient-to-r from-primary/5 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300 pointer-events-none" />
              </div>
            )
          })}
          <AddDataItemCta viewMode='list' />
        </div>
      )
    }
approved: false
linesAdded: null
linesRemoved: null
linesDifference: null
gitCommittedAt: null
status: undone
id: 472
