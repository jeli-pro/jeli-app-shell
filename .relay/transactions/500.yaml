uuid: 09d93c1f-9a7c-486e-821f-82782e4f58c7
projectId: jeli-app-shell
createdAt: '2025-10-20T14:11:40.525Z'
gitCommitMsg: >-
  fix(build): resolve all typescript errors post-refactor

  This commit addresses and resolves 56 TypeScript errors that arose after the
  major refactoring of the DataDemo page into a generic `dynamic-view` engine.

  Key fixes include: - Centralized all view-related types into
  `dynamic-view/types.ts`. - Created missing shared components (`Skeleton`,
  `EmptyState`, `AddDataItemCta`). - Corrected component export names to be
  generic (e.g., `DataListView` -> `ListView`). - Repaired all broken import
  paths across the new `dynamic-view` feature. - Refactored `DataDetailPanel` to
  use the generic `FieldRenderer`, removing its last dependencies on the old
  data structure. - Resolved various type mismatches, prop errors, and unused
  variable warnings across the codebase.
promptSummary: >-
  The user's last transaction was rolled back because of a failed file deletion.
  They want me to re-execute the transaction to fix all TypeScript errors, but
  without the failing delete operation.
reasoning:
  - >-
    I understand. The previous transaction failed because it tried to delete a
    file that was already gone, which is a common hiccup in multi-step
    refactors. My apologies.
  - >-
    I will now execute the same comprehensive fix for all 56 TypeScript errors,
    but this time I will omit the problematic file deletion. The core of the
    plan remains: centralize types, create missing components, repair all broken
    imports, correct component signatures, and refactor `DataDetailPanel` to use
    the new `FieldRenderer`. This will bring the new dynamic view engine online
    and stabilize the build.
  - '### Part 1: Create Missing Shared Components'
  - First, I'll create the new UI components required by our generalized views.
  - '### Part 2: Consolidate Types and Fix Core Logic'
  - >-
    Next, I'll centralize all view-related types and resolve errors in
    configurations, hooks, and stores.
  - '### Part 3: Update and Rename All View Components'
  - >-
    Now, I'll fix the view components themselvesâ€”renaming exports, correcting
    import paths, and resolving type errors.
  - '### Part 4: Final Polish and Cleanup'
  - >-
    Finally, I'll fix the remaining files and clean up unused code to complete
    the process.
operations:
  - type: write
    path: src/components/ui/skeleton.tsx
    content: >-
      import { cn } from "@/lib/utils";

      function Skeleton({ className, ...props }:
      React.HTMLAttributes<HTMLDivElement>) {
        return (
          <div
            className={cn("animate-pulse rounded-md bg-muted", className)}
            {...props}
          />
        );
      }

      export { Skeleton };
    patchStrategy: replace
  - type: write
    path: src/features/dynamic-view/components/shared/EmptyState.tsx
    content: |-
      export function EmptyState() {
        return (
          <div className="flex items-center justify-center h-96 text-muted-foreground rounded-lg border border-dashed bg-card/30">
            No items found.
          </div>
        );
      }
    patchStrategy: replace
  - type: write
    path: src/features/dynamic-view/components/shared/AddDataItemCta.tsx
    content: >-
      import { PlusCircle } from 'lucide-react';

      export function AddDataItemCta({ viewMode, colSpan }: { viewMode: string,
      colSpan?: number }) {
        if (viewMode === 'table') {
          return (
            <tr>
              <td colSpan={colSpan} className="p-4 text-center">
                <button className="text-sm text-muted-foreground hover:text-primary transition-colors flex items-center gap-2 mx-auto">
                  <PlusCircle className="w-4 h-4" /> Add new item
                </button>
              </td>
            </tr>
          )
        }
        return (
          <div className="flex justify-center p-4">
              <button className="text-sm text-muted-foreground hover:text-primary transition-colors flex items-center gap-2">
              <PlusCircle className="w-4 h-4" /> Add new item
              </button>
          </div>
        );
      }
    patchStrategy: replace
  - type: write
    path: src/features/dynamic-view/components/views/DataCalendarViewControls.tsx
    content: export function CalendarViewControls() { return null; }
    patchStrategy: replace
  - type: write
    path: src/features/dynamic-view/types.ts
    content: >
      --- src/features/dynamic-view/types.ts

      +++ src/features/dynamic-view/types.ts

      @@ -107,3 +107,24 @@
         kanbanView: KanbanViewConfig;
         calendarView: CalendarViewConfig;
       }
      +

      +// --- GENERIC CONTROL & DATA TYPES ---

      +

      +export type Status = 'active' | 'pending' | 'completed' | 'archived';

      +export type Priority = 'low' | 'medium' | 'high' | 'critical';

      +

      +export interface FilterConfig {

      +  searchTerm: string;

      +  [key: string]: any; // For dynamic filter keys like status, priority

      +}

      +

      +export interface SortConfig {

      +  key: string;

      +  direction: 'asc' | 'desc';

      +}

      +

      +export type GroupableField = 'status' | 'priority' | 'category';

      +

      +export type CalendarDateProp = 'dueDate' | 'createdAt' | 'updatedAt';

      +export type CalendarDisplayProp = 'priority' | 'assignee' | 'status';

      +export type CalendarColorProp = 'priority' | 'status' | 'category' |
      'none';
    patchStrategy: standard-diff
  - type: write
    path: src/pages/DataDemo/DataDemo.config.ts
    content: >
      --- src/pages/DataDemo/DataDemo.config.ts

      +++ src/pages/DataDemo/DataDemo.config.ts

      @@ -1,5 +1,16 @@
       import type { ViewConfig } from '@/features/dynamic-view/types';
      -import { DATA_DEMO_PRIORITY_COLORS, DATA_DEMO_STATUS_COLORS } from
      './data/mockData';

      +

      +const DATA_DEMO_STATUS_COLORS = {

      +  active: 'border-transparent bg-emerald-500/20 text-emerald-700
      dark:text-emerald-400',

      +  pending: 'border-transparent bg-amber-500/20 text-amber-700
      dark:text-amber-400',

      +  completed: 'border-transparent bg-sky-500/20 text-sky-700
      dark:text-sky-400',

      +  archived: 'border-transparent bg-zinc-500/20 text-zinc-700
      dark:text-zinc-400',

      +};

      +const DATA_DEMO_PRIORITY_COLORS = {

      +  low: 'border-transparent bg-blue-500/20 text-blue-700
      dark:text-blue-400',

      +  medium: 'border-transparent bg-yellow-500/20 text-yellow-700
      dark:text-yellow-400',

      +  high: 'border-transparent bg-orange-500/20 text-orange-700
      dark:text-orange-400',

      +  critical: 'border-transparent bg-red-600/20 text-red-700
      dark:text-red-400',

      +};
       
       export const dataDemoViewConfig: ViewConfig = {
         // Field definitions: The source of truth for all data properties
    patchStrategy: standard-diff
  - type: write
    path: src/hooks/useAppViewManager.hook.ts
    content: "--- src/hooks/useAppViewManager.hook.ts\n+++ src/hooks/useAppViewManager.hook.ts\n@@ -1,7 +1,6 @@\n import { useMemo, useCallback, useEffect, useRef } from 'react';\n import { useSearchParams, useNavigate, useLocation, useParams } from 'react-router-dom';\n import { useAppShellStore, type AppShellState, type ActivePage } from '@/store/appShell.store';\n-import type { DataItem, ViewMode, SortConfig, SortableField, GroupableField, Status, Priority, CalendarDateProp, CalendarDisplayProp, CalendarColorProp } from '@/pages/DataDemo/types';\n-import type { FilterConfig } from '@/pages/DataDemo/types';\n+import type { GenericItem, ViewMode, SortConfig, GroupableField, Status, Priority, CalendarDateProp, CalendarDisplayProp, CalendarColorProp, FilterConfig } from '@/features/dynamic-view/types';\n import type { TaskView } from '@/pages/Messaging/types';\n import { BODY_STATES, SIDEBAR_STATES } from '@/lib/utils';\n \n@@ -165,14 +164,14 @@\n     }\n     handleParamsChange({ sort: newSort }, true);\n   };\n-  const setPage = (newPage: number) => handleParamsChange({ page: newPage.toString() });\n+  const setPage = (newPage: number) => handleParamsChange({ page: newPage > 1 ? newPage.toString() : null });\n \n   // Calendar specific actions\n   const setCalendarDateProp = (prop: CalendarDateProp) => handleParamsChange({ calDate: prop === 'dueDate' ? null : prop });\n   const setCalendarDisplayProps = (props: CalendarDisplayProp[]) => {\n     // Check for default state to keep URL clean\n     const isDefault = props.length === 0;\n     handleParamsChange({ calDisplay: isDefault ? null : props.join(',') });\n   };\n   const setCalendarItemLimit = (limit: number | 'all') => handleParamsChange({ calLimit: limit === 3 ? null : String(limit) });\n   const setCalendarColorProp = (prop: CalendarColorProp) => handleParamsChange({ calColor: prop === 'none' ? null : prop });\n \n-  const onItemSelect = useCallback((item: DataItem) => {\n+  const onItemSelect = useCallback((item: GenericItem) => {\n \t\tnavigate(`/data-demo/${item.id}${location.search}`);\n \t}, [navigate, location.search]);\n \n"
    patchStrategy: standard-diff
  - type: write
    path: src/pages/DataDemo/store/dataDemo.store.tsx
    content: >
      --- src/pages/DataDemo/store/dataDemo.store.tsx

      +++ src/pages/DataDemo/store/dataDemo.store.tsx

      @@ -2,8 +2,8 @@
       import { type ReactNode } from 'react';
       import { capitalize, cn } from '@/lib/utils';
       import { Badge } from '@/components/ui/badge';
      -import { mockDataItems } from '../data/mockData';

      -import type { GenericItem, GroupableField, SortConfig, FilterConfig }
      from '@/features/dynamic-view/types';

      +import { mockDataItems } from '@/pages/DataDemo/data/mockData';

      +import type { GenericItem, GroupableField, SortConfig, FilterConfig }
      from '@/features/dynamic-view/types';
       
       // --- State and Actions ---
       interface DataDemoState {
      @@ -33,7 +33,7 @@
       };
       
       // --- Store Implementation ---
      -export const useDataDemoStore = create<DataDemoState &
      DataDemoActions>((set, get) => ({

      +export const useDataDemoStore = create<DataDemoState &
      DataDemoActions>((set) => ({
           ...defaultState,
       
           loadData: ({ page, groupBy, filters, sortConfig, isFullLoad }) => {
    patchStrategy: standard-diff
  - type: write
    path: src/features/dynamic-view/components/controls/ViewControls.tsx
    content: >
      --- src/features/dynamic-view/components/controls/ViewControls.tsx

      +++ src/features/dynamic-view/components/controls/ViewControls.tsx

      @@ -25,9 +25,8 @@
         CommandSeparator,
       } from '@/components/ui/command'
       
      -import type { FilterConfig } from '../../types'

      -import type { SortableField } from '../../pages/DataDemo/types'

      +import type { FilterConfig } from '../../types'
       import { useAppViewManager } from '@/hooks/useAppViewManager.hook'
       import { useDynamicView } from '../../DynamicViewContext'
       
      @@ -35,7 +34,7 @@
         // groupOptions will now come from config
       }
       
      -export function DataViewControls() {

      +export function ViewControls() {
         const {
           filters,
           setFilters,
      @@ -102,7 +101,7 @@
                       setSort(null)
                     } else {
                       const [key, direction] = value.split('-')
      -                setSort({ key: key as SortableField, direction: direction
      as 'asc' | 'desc' })

      +                setSort({ key: key, direction: direction as 'asc' |
      'desc' })
                     }
                   }}
                 >
    patchStrategy: standard-diff
  - type: write
    path: src/features/dynamic-view/components/controls/ViewModeSelector.tsx
    content: |
      --- src/features/dynamic-view/components/controls/ViewModeSelector.tsx
      +++ src/features/dynamic-view/components/controls/ViewModeSelector.tsx
      @@ -2,7 +2,7 @@
       import { gsap } from 'gsap'
       import { cn } from '@/lib/utils'
       import { List, Grid3X3, LayoutGrid, Table, LayoutDashboard, CalendarDays } from 'lucide-react'
      -import type { ViewMode } from '../types'
      +import type { ViewMode } from '../../types'
       import { useAppViewManager } from '@/hooks/useAppViewManager.hook'
       
       const viewModes = [
      @@ -14,7 +14,7 @@
         { id: 'table' as ViewMode, label: 'Table', icon: Table, description: 'Structured data table' }
       ]
       
      -export function DataViewModeSelector() {
      +export function ViewModeSelector() {
         const { viewMode, setViewMode } = useAppViewManager();
         const indicatorRef = useRef<HTMLDivElement>(null)
         const containerRef = useRef<HTMLDivElement>(null)
    patchStrategy: standard-diff
  - type: write
    path: src/features/dynamic-view/components/shared/AnimatedLoadingSkeleton.tsx
    content: >
      ---
      src/features/dynamic-view/components/shared/AnimatedLoadingSkeleton.tsx

      +++
      src/features/dynamic-view/components/shared/AnimatedLoadingSkeleton.tsx

      @@ -1,5 +1,5 @@
       import { type ViewMode } from '../../types'
      -import { Card, CardHeader, CardContent } from '@/components/ui/card'

      +import { Card, CardHeader, CardContent } from
      '../../../../components/ui/card'
       import { Skeleton } from '@/components/ui/skeleton'
       
       export function AnimatedLoadingSkeleton({ viewMode }: { viewMode: ViewMode }) {
    patchStrategy: standard-diff
  - type: write
    path: src/features/dynamic-view/components/views/CalendarView.tsx
    content: >
      --- src/features/dynamic-view/components/views/CalendarView.tsx

      +++ src/features/dynamic-view/components/views/CalendarView.tsx

      @@ -6,11 +6,11 @@
       import { Button } from "@/components/ui/button";
       import { cn } from "@/lib/utils";
       import type { GenericItem } from '../../types';
      -import type { CalendarDisplayProp, CalendarDateProp, CalendarColorProp,
      Status, Priority } from '../../pages/DataDemo/types';

      +import type { CalendarDateProp, CalendarColorProp, Status, Priority }
      from '../../types';
       import { useAppViewManager } from "@/hooks/useAppViewManager.hook";
       import { useResizeObserver } from "@/hooks/useResizeObserver.hook";
      -import { useSelectedItem, useDataDemoStore } from
      "../store/dataDemo.store";

      +import { useSelectedItem, useDataDemoStore } from
      "../../../../pages/DataDemo/store/dataDemo.store";
       import { CalendarViewControls } from "./DataCalendarViewControls";
       import { useDynamicView } from '../../DynamicViewContext'
       import { FieldRenderer } from '../shared/FieldRenderer'
      @@ -73,7 +73,6 @@
           isSelected: boolean;
           isDragging: boolean;
           onDragStart: (e: React.DragEvent<HTMLDivElement>, itemId: string) => void;
      -    displayProps: CalendarDisplayProp[];
           colorProp: CalendarColorProp;
       }) {
         const { onItemSelect } = useAppViewManager();
      @@ -124,7 +123,7 @@
         updatedAt: 'update dates',
       };
       
      -export function DataCalendarView({ data }: CalendarViewProps) {

      +export function CalendarView({ data }: CalendarViewProps) {
         const [currentDate, setCurrentDate] = useState(new Date());
         const { 
           itemId,
      @@ -135,7 +134,7 @@
           calendarColorProp,
         } = useAppViewManager();
         const selectedItem = useSelectedItem(itemId);
      -  const updateItem = useDataDemoStore(s => s.updateItem);

      +  const updateItem = useDataDemoStore((s: any) => s.updateItem);
         
         // Drag & Drop State
         const [draggedItemId, setDraggedItemId] = useState<string | null>(null);
      @@ -281,7 +280,6 @@
                                 isSelected={selectedItem?.id === item.id}
                                 isDragging={draggedItemId === item.id}
                                 onDragStart={handleDragStart}
      -                          displayProps={calendarDisplayProps}
                                 colorProp={calendarColorProp}
                               />
                             ))}
    patchStrategy: standard-diff
  - type: write
    path: src/features/dynamic-view/components/views/CardView.tsx
    content: >
      --- src/features/dynamic-view/components/views/CardView.tsx

      +++ src/features/dynamic-view/components/views/CardView.tsx

      @@ -3,18 +3,18 @@
       import { ArrowUpRight } from 'lucide-react'
       import type { GenericItem } from '../../types'
       import { useStaggeredAnimation } from '@/hooks/useStaggeredAnimation.motion.hook'
      -import { EmptyState } from './EmptyState'

      +import { EmptyState } from '../shared/EmptyState'
       import { useAppViewManager } from '@/hooks/useAppViewManager.hook'
       import {
         useSelectedItem,
      -} from '../store/dataDemo.store'

      -import { AddDataItemCta } from './shared/AddDataItemCta'

      +} from '../../../../pages/DataDemo/store/dataDemo.store'

      +import { AddDataItemCta } from '../shared/AddDataItemCta'
       import { useDynamicView } from '../../DynamicViewContext'
       import { FieldRenderer } from '../shared/FieldRenderer'
       
      -export function DataCardView({ data, isGrid = false }: { data:
      GenericItem[]; isGrid?: boolean }) {

      +export function CardView({ data, isGrid = false }: { data: GenericItem[];
      isGrid?: boolean }) {
         const { onItemSelect, itemId } = useAppViewManager();
         const selectedItem = useSelectedItem(itemId);
         const { config } = useDynamicView();
    patchStrategy: standard-diff
  - type: write
    path: src/features/dynamic-view/components/views/KanbanView.tsx
    content: >
      --- src/features/dynamic-view/components/views/KanbanView.tsx

      +++ src/features/dynamic-view/components/views/KanbanView.tsx

      @@ -6,9 +6,9 @@
       import type { GenericItem } from '../../types'
       import { Card, CardContent } from "@/components/ui/card";
       import { cn } from "@/lib/utils";
      -import { EmptyState } from "./EmptyState";

      +import { EmptyState } from "../shared/EmptyState";
       import { useAppViewManager } from "@/hooks/useAppViewManager.hook";
      -import { useDataDemoStore } from "../store/dataDemo.store";

      +import { useDataDemoStore } from
      "../../../../pages/DataDemo/store/dataDemo.store";
       import { useDynamicView } from '../../DynamicViewContext'
       import { FieldRenderer } from '../shared/FieldRenderer'
       
      @@ -58,12 +58,12 @@
         data: Record<string, GenericItem[]>;
       }
       
      -export function DataKanbanView({ data }: DataKanbanViewProps) {

      +export function KanbanView({ data }: DataKanbanViewProps) {
         const [columns, setColumns] = useState(data);
         const [draggedItemId, setDraggedItemId] = useState<string | null>(null);
         const [dropIndicator, setDropIndicator] = useState<{ columnId: string; index: number } | null>(null);
         const { groupBy } = useAppViewManager();
      -  const updateItem = useDataDemoStore(s => s.updateItem);

      +  const updateItem = useDataDemoStore((s: any) => s.updateItem);
       
         useEffect(() => {
           setColumns(data);
    patchStrategy: standard-diff
  - type: write
    path: src/features/dynamic-view/components/views/ListView.tsx
    content: |
      --- src/features/dynamic-view/components/views/ListView.tsx
      +++ src/features/dynamic-view/components/views/ListView.tsx
      @@ -2,18 +2,18 @@
       import { cn } from '@/lib/utils'
       import type { GenericItem } from '../../types'
       import { useStaggeredAnimation } from '@/hooks/useStaggeredAnimation.motion.hook'
      -import { EmptyState } from './EmptyState'
      +import { EmptyState } from '../shared/EmptyState'
       import { useAppViewManager } from '@/hooks/useAppViewManager.hook'
       import { 
         useSelectedItem,
      -} from '../store/dataDemo.store'
      -import { AddDataItemCta } from './shared/AddDataItemCta'
      +} from '../../../../pages/DataDemo/store/dataDemo.store'
      +import { AddDataItemCta } from '../shared/AddDataItemCta'
       import { useDynamicView } from '../../DynamicViewContext'
       import { FieldRenderer } from '../shared/FieldRenderer'
       
      -export function DataListView({ data }: { data: GenericItem[] }) {
      +export function ListView({ data }: { data: GenericItem[] }) {
         const { onItemSelect, itemId } = useAppViewManager();
         const selectedItem = useSelectedItem(itemId);
         const { config } = useDynamicView();
    patchStrategy: standard-diff
  - type: write
    path: src/features/dynamic-view/components/views/TableView.tsx
    content: |
      --- src/features/dynamic-view/components/views/TableView.tsx
      +++ src/features/dynamic-view/components/views/TableView.tsx
      @@ -8,19 +8,18 @@
         ExternalLink
       } from 'lucide-react'
       import type { GenericItem } from '../../types'
      -import type { SortableField } from '../../pages/DataDemo/types'
      -import { EmptyState } from './EmptyState'
      +import { EmptyState } from '../shared/EmptyState'
       import { useAppViewManager } from '@/hooks/useAppViewManager.hook'
       import {
         useSelectedItem,
      -} from '../store/dataDemo.store'
      +} from '../../../../pages/DataDemo/store/dataDemo.store'
       import { capitalize } from '@/lib/utils'
      -import { AddDataItemCta } from './shared/AddDataItemCta'
      +import { AddDataItemCta } from '../shared/AddDataItemCta'
       import { useDynamicView } from '../../DynamicViewContext'
       import { FieldRenderer } from '../shared/FieldRenderer'
       
      -export function DataTableView({ data }: { data: GenericItem[] }) {
      +export function TableView({ data }: { data: GenericItem[] }) {
         const {
           sortConfig,
           setTableSort,
      @@ -62,7 +61,7 @@
         }
       
         const handleSortClick = (field: string) => {
      -    setTableSort(field as SortableField) // Cast for now
      +    setTableSort(field)
         }
       
         const groupedData = useMemo(() => {
    patchStrategy: standard-diff
  - type: write
    path: src/components/ui/timeline.tsx
    content: |
      --- src/components/ui/timeline.tsx
      +++ src/components/ui/timeline.tsx
      @@ -223,7 +223,6 @@
         if (orientation === "horizontal") {
           return (
             <ScrollArea
      -        orientation="horizontal"
               className={cn("w-full", className)}
               {...props}
             >
    patchStrategy: standard-diff
  - type: write
    path: src/hooks/useRightPaneContent.hook.tsx
    content: |
      --- src/hooks/useRightPaneContent.hook.tsx
      +++ src/hooks/useRightPaneContent.hook.tsx
      @@ -1,5 +1,5 @@
      -import { useMemo, useCallback } from 'react';
      -import { useNavigate, useParams } from 'react-router-dom';
      +import { useMemo } from 'react';
      +import { useParams } from 'react-router-dom';
       import {
         LayoutDashboard,
         Settings,
      @@ -12,14 +12,13 @@
       
       import { DashboardContent } from "@/pages/Dashboard";
       import { SettingsContent } from "@/features/settings/SettingsContent";
       import { ToasterDemo } from "@/pages/ToasterDemo";
       import { NotificationsPage } from "@/pages/Notifications";
      -import DataDemoPage from "@/pages/DataDemo";
      +import DataDemoPage from "@/pages/DataDemo/index";
       import { DataDetailPanel } from "@/pages/DataDemo/components/DataDetailPanel";
       import { mockDataItems } from "@/pages/DataDemo/data/mockData";
       import { MessagingContent } from "@/pages/Messaging/components/MessagingContent";
       import type { AppShellState } from '@/store/appShell.store';
       
       export function useRightPaneContent(sidePaneContent: AppShellState['sidePaneContent']) {
      -  const navigate = useNavigate();
         const { itemId, conversationId } = useParams<{ itemId: string; conversationId: string }>();
       
         const staticContentMap = useMemo(() => ({
    patchStrategy: standard-diff
  - type: write
    path: src/hooks/useScrollToBottom.hook.ts
    content: >
      --- src/hooks/useScrollToBottom.hook.ts

      +++ src/hooks/useScrollToBottom.hook.ts

      @@ -5,7 +5,7 @@
       ) {
         const [showScrollToBottom, setShowScrollToBottom] = useState(false);
       
      -  const handleScroll = useCallback((e: React.UIEvent<HTMLDivElement>) =>
      {

      +  const handleScroll = useCallback(() => {
           if (!contentRef.current) return;
           const { scrollTop, scrollHeight, clientHeight } = contentRef.current;
           // Show button if scrolled down more than 200px, and there's more than 200px left to scroll
    patchStrategy: standard-diff
  - type: write
    path: src/pages/DataDemo/components/DataDetailPanel.tsx
    content: >
      --- src/pages/DataDemo/components/DataDetailPanel.tsx

      +++ src/pages/DataDemo/components/DataDetailPanel.tsx

      @@ -13,18 +13,12 @@
         AlertCircle,
         Circle
       } from 'lucide-react'
      -import type { DataItem } from '../types'

      +import type { GenericItem } from '@/features/dynamic-view/types'
       import { useStaggeredAnimation } from '@/hooks/useStaggeredAnimation.motion.hook'
      -import {

      -  AssigneeInfo,

      -  ItemProgressBar,

      -  ItemPriorityBadge,

      -  ItemTags,

      -} from './shared/DataItemParts'
       import { DataDetailActions } from './DataDetailActions'
      +import { FieldRenderer } from
      '@/features/dynamic-view/components/shared/FieldRenderer'
       interface DataDetailPanelProps {
      -  item: DataItem | null

      +  item: GenericItem | null
       }
       
       export function DataDetailPanel({ item }: DataDetailPanelProps) {
      @@ -62,7 +56,7 @@
             <div className="p-6 border-b border-border/50 bg-gradient-to-r from-card/50 to-card/30 backdrop-blur-sm">
               <div className="flex items-start gap-4 mb-4">
                 <div className="w-16 h-16 bg-gradient-to-br from-primary/20 to-primary/10 rounded-2xl flex items-center justify-center text-3xl flex-shrink-0">
      -            {item.thumbnail}

      +            <FieldRenderer item={item} fieldId="thumbnailEmoji" />
                 </div>
                 <div className="flex-1 min-w-0">
                   <h1 className="text-2xl font-bold mb-2 leading-tight">
      @@ -77,14 +71,14 @@
                 <Badge variant="outline">
                   {React.createElement(getStatusIcon(item.status), { className: "w-3 h-3 mr-1" })}
                   {item.status}
                 </Badge>
      -          <ItemPriorityBadge priority={item.priority} />

      +          <FieldRenderer item={item} fieldId="priority" />
                 <Badge variant="outline" className="bg-accent/50">
                   {item.category}
                 </Badge>
               </div>
       
               {/* Progress */}
      -        <ItemProgressBar completion={item.metrics.completion} />

      +        <FieldRenderer item={item} fieldId="metrics.completion"
      options={{ showPercentage: true }} />
             </div>
       
             {/* Content */}
      @@ -95,7 +89,7 @@
                     <User className="w-4 h-4 text-muted-foreground" />
                     <h3 className="font-semibold text-sm">Assigned to</h3>
                   </div>
      -            <AssigneeInfo assignee={item.assignee} avatarClassName="w-12
      h-12" />

      +            <FieldRenderer item={item} fieldId="assignee" options={{
      avatarClassName: "w-12 h-12" }} />
                 </div>
       
                 {/* Metrics */}
      @@ -104,12 +98,7 @@
                     <BarChart3 className="w-4 h-4 text-muted-foreground" />
                     <h3 className="font-semibold text-sm">Engagement Metrics</h3>
                   </div>
      -            <div className="grid
      grid-cols-[repeat(auto-fit,minmax(80px,1fr))] gap-4">

      -              <div className="text-center">

      -                <p className="text-2xl font-bold">{item.metrics.views +
      item.metrics.likes + item.metrics.shares}</p>

      -                <p className="text-xs text-muted-foreground">Shares</p>

      -              </div>

      -            </div>

      +            <FieldRenderer item={item} fieldId="metrics" />
                 </div>
       
                 {/* Tags */}
      @@ -118,7 +107,7 @@
                     <Tag className="w-4 h-4 text-muted-foreground" />
                     <h3 className="font-semibold text-sm">Tags</h3>
                   </div>
      -            <ItemTags tags={item.tags} />

      +            <FieldRenderer item={item} fieldId="tags" />
                 </div>
       
                 {/* Content Details */}
      @@ -144,7 +133,7 @@
                   <div className="bg-card/30 rounded-2xl p-4 border border-border/30">
                     <h3 className="font-semibold text-sm mb-3">Attachments</h3>
                     <div className="space-y-2">
      -                {item.content.attachments.map((attachment, index) => {

      +                {item.content.attachments.map((attachment: any, index:
      number) => {
                         const IconComponent = getFileIcon(attachment.type)
                         return (
                           <div
    patchStrategy: standard-diff
  - type: write
    path: src/pages/DataDemo/index.tsx
    content: |
      --- src/pages/DataDemo/index.tsx
      +++ src/pages/DataDemo/index.tsx
      @@ -11,7 +11,6 @@
         PlusCircle
       } from 'lucide-react'
       import { gsap } from 'gsap'
      -import { cn } from '@/lib/utils'
       import { DynamicViewProvider } from '@/features/dynamic-view/DynamicViewContext'
       import { PageLayout } from '@/components/shared/PageLayout'
       import { useScrollToBottom } from '@/hooks/useScrollToBottom.hook';
      @@ -58,7 +57,7 @@
       
       type StatItem = Stat | ChartStat;
       
      -function DataDemoContent() {
      +export default function DataDemoPage() {
         const {
           viewMode,
           groupBy,
      @@ -93,10 +92,10 @@
           return allItems.reduce((acc, item) => {
               const groupKey = String(item[groupBy as GroupableField]);
               if (!acc[groupKey]) {
      -            acc[groupKey] = [];
      +            acc[groupKey] = [] as GenericItem[];
               }
      -        acc[groupKey].push(item as any);
      +        acc[groupKey].push(item);
               return acc;
      -    }, {} as Record<string, DataItem[]>);
      +    }, {} as Record<string, GenericItem[]>);
         }, [allItems, groupBy]);
       
         const dataToRender = useMemo(() => {
    patchStrategy: standard-diff
  - type: write
    path: src/pages/Messaging/components/TaskHeader.tsx
    content: >
      --- src/pages/Messaging/components/TaskHeader.tsx

      +++ src/pages/Messaging/components/TaskHeader.tsx

      @@ -29,7 +29,7 @@
       
       
       interface TaskHeaderProps {
      -  task: (Task & { contact: Contact; assignee: Assignee | null });

      +  task: (Task & { contact: Contact; assignee: Assignee | null;
      activeHandler: Assignee | null });
       }
       
       export const TaskHeader: React.FC<TaskHeaderProps> = ({ task }) => {
    patchStrategy: standard-diff
  - type: write
    path: src/pages/Messaging/data/mockData.ts
    content: >
      --- src/pages/Messaging/data/mockData.ts

      +++ src/pages/Messaging/data/mockData.ts

      @@ -155,7 +155,7 @@
                       summaryPoints: Array.from({ length: 3 }, () => faker.lorem.sentence()),
                       suggestedReplies: Array.from({ length: 2 }, () => faker.lorem.words({ min: 3, max: 6})),
                   },
      -            activeHandlerId: faker.helpers.arrayElement([assignee?.id,
      null, 'user-ai-1']),

      +            activeHandlerId: faker.helpers.arrayElement([assignee?.id ??
      null, null, 'user-ai-1']),
               };
               tasks.push(task);
           }
    patchStrategy: standard-diff
  - type: write
    path: src/pages/Messaging/store/messaging.store.ts
    content: >
      --- src/pages/Messaging/store/messaging.store.ts

      +++ src/pages/Messaging/store/messaging.store.ts

      @@ -1,5 +1,5 @@
       import { useState, useEffect } from 'react';
       import { create } from 'zustand';
       import { mockTasks, mockContacts, mockAssignees } from '../data/mockData';
      -import type { Task, Contact, Channel, Assignee, TaskStatus, TaskPriority,
      TaskView, Message, JourneyPointType } from '../types';

      +import type { Task, Contact, Channel, Assignee, TaskStatus, TaskPriority,
      TaskView } from '../types';
       
       const currentUserId = 'user-1'; // Mock current user
    patchStrategy: standard-diff
snapshot:
  src/components/ui/skeleton.tsx: null
  src/features/dynamic-view/components/shared/AddDataItemCta.tsx: null
  src/features/dynamic-view/components/shared/EmptyState.tsx: null
  src/features/dynamic-view/components/views/DataCalendarViewControls.tsx: null
  src/features/dynamic-view/types.ts: >-
    import type { ReactNode } from 'react';


    // --- GENERIC DATA & ITEM ---

    export type GenericItem = Record<string, any> & { id: string };


    // --- FIELD DEFINITIONS ---

    // Describes a single piece of data within a GenericItem.

    export type FieldType = 
      | 'string'
      | 'longtext'
      | 'badge'
      | 'avatar'
      | 'progress'
      | 'date'
      | 'tags'
      | 'metrics'
      | 'thumbnail'
      | 'custom';

    export interface BaseFieldDefinition {
      id: string; // Corresponds to a key in GenericItem
      label: string;
      type: FieldType;
      // Optional custom render function for ultimate flexibility
      render?: (item: GenericItem) => ReactNode;
    }


    export interface BadgeFieldDefinition extends BaseFieldDefinition {
      type: 'badge';
      colorMap?: Record<string, string>; // e.g., { 'active': 'bg-green-500', 'pending': 'bg-yellow-500' }
    }


    // Add other specific field types if they need unique properties

    // For now, most can be handled by the base definition.


    export type FieldDefinition = BaseFieldDefinition | BadgeFieldDefinition;



    // --- VIEW CONFIGURATION ---

    // The master configuration object that defines the entire view.


    export type ViewMode = 'list' | 'cards' | 'grid' | 'table' | 'kanban' |
    'calendar';


    export interface ListViewConfig {
      iconField: string;
      titleField: string;
      metaFields: string[]; // IDs of fields to show on the right
    }


    export interface CardViewConfig {
      thumbnailField: string;
      titleField: string;
      descriptionField: string;
      headerFields: string[];
      contentFields: string[];
      footerFields: string[];
    }


    export interface TableColumnConfig {
      fieldId: string;
      label: string;
      isSortable: boolean;
    }


    export interface TableViewConfig {
      columns: TableColumnConfig[];
    }


    export interface KanbanViewConfig {
      groupByField: string; // Field ID to group by (e.g., 'status')
      cardFields: {
        titleField: string;
        descriptionField: string;
        footerFields: string[];
      };
    }


    export interface CalendarViewConfig {
      dateField: string;
      titleField: string;
      displayFields: string[];
      colorByField?: string; // Field ID to color events by (e.g., 'priority', 'status')
    }


    export interface ControlOption {
      id: string;
      label: string;
    }


    export interface FilterableFieldConfig {
      id: string; // fieldId
      label: string;
      options: ControlOption[];
    }


    export interface ViewConfig {
      fields: FieldDefinition[];
      sortableFields: ControlOption[];
      groupableFields: ControlOption[];
      filterableFields: FilterableFieldConfig[];
      
      // Layouts for each view mode
      listView: ListViewConfig;
      cardView: CardViewConfig;
      tableView: TableViewConfig;
      kanbanView: KanbanViewConfig;
      calendarView: CalendarViewConfig;
    }
  src/pages/DataDemo/DataDemo.config.ts: >-
    import type { ViewConfig } from '@/features/dynamic-view/types';

    import { DATA_DEMO_PRIORITY_COLORS, DATA_DEMO_STATUS_COLORS } from
    './data/mockData';


    export const dataDemoViewConfig: ViewConfig = {
      // Field definitions: The source of truth for all data properties
      fields: [
        { id: 'title', label: 'Title', type: 'string' },
        { id: 'description', label: 'Description', type: 'longtext' },
        { id: 'thumbnailEmoji', label: 'Thumbnail', type: 'thumbnail' },
        {
          id: 'status',
          label: 'Status',
          type: 'badge',
          colorMap: DATA_DEMO_STATUS_COLORS,
        },
        {
          id: 'priority',
          label: 'Priority',
          type: 'badge',
          colorMap: DATA_DEMO_PRIORITY_COLORS,
        },
        { id: 'assignee', label: 'Assignee', type: 'avatar' },
        { id: 'metrics.completion', label: 'Completion', type: 'progress' },
        { id: 'updatedAt', label: 'Last Updated', type: 'date' },
        { id: 'createdAt', label: 'Created', type: 'date' },
        { id: 'dueDate', label: 'Due Date', type: 'date' },
        { id: 'tags', label: 'Tags', type: 'tags' },
        { id: 'metrics', label: 'Metrics', type: 'metrics' },
      ],

      // Control options: What users can sort, filter, and group by
      sortableFields: [
        { id: 'title', label: 'Title' },
        { id: 'status', label: 'Status' },
        { id: 'priority', label: 'Priority' },
        { id: 'updatedAt', label: 'Last Updated' },
        { id: 'createdAt', label: 'Created' },
        { id: 'assignee.name', label: 'Assignee' },
        { id: 'metrics.views', label: 'Views' },
        { id: 'metrics.completion', label: 'Completion' },
      ],
      groupableFields: [
        { id: 'none', label: 'None' },
        { id: 'status', label: 'Status' },
        { id: 'priority', label: 'Priority' },
        { id: 'category', label: 'Category' },
      ],
      filterableFields: [
        {
          id: 'status',
          label: 'Status',
          options: [
            { id: 'active', label: 'Active' },
            { id: 'pending', label: 'Pending' },
            { id: 'completed', label: 'Completed' },
            { id: 'archived', label: 'Archived' },
          ],
        },
        {
          id: 'priority',
          label: 'Priority',
          options: [
            { id: 'low', label: 'Low' },
            { id: 'medium', label: 'Medium' },
            { id: 'high', label: 'High' },
            { id: 'critical', label: 'Critical' },
          ],
        },
      ],
      
      // View layouts: How each view mode should render the data
      listView: {
        iconField: 'thumbnailEmoji',
        titleField: 'title',
        metaFields: ['status', 'priority', 'assignee', 'updatedAt'],
      },
      cardView: {
        thumbnailField: 'thumbnailEmoji',
        titleField: 'title',
        descriptionField: 'description',
        headerFields: ['priority'],
        contentFields: ['metrics.completion'],
        footerFields: ['tags', 'assignee'],
      },
      tableView: {
        columns: [
          { fieldId: 'title', label: 'Title', isSortable: true },
          { fieldId: 'status', label: 'Status', isSortable: true },
          { fieldId: 'priority', label: 'Priority', isSortable: true },
          { fieldId: 'assignee', label: 'Assignee', isSortable: true },
          { fieldId: 'metrics.completion', label: 'Completion', isSortable: true },
          { fieldId: 'updatedAt', label: 'Last Update', isSortable: true },
        ],
      },
      kanbanView: {
        groupByField: 'status', // This is a suggestion; the user can change it.
        cardFields: {
          titleField: 'title',
          descriptionField: 'description',
          footerFields: ['tags', 'assignee'],
        },
      },
      calendarView: {
        dateField: 'dueDate', // Default date field
        titleField: 'title',
        displayFields: ['priority', 'assignee'],
        colorByField: 'priority', // Default coloring
      },
    };
  src/pages/DataDemo/store/dataDemo.store.tsx: >-
    import { create } from 'zustand';

    import { type ReactNode } from 'react';

    import { capitalize, cn } from '@/lib/utils';

    import { Badge } from '@/components/ui/badge';

    import { mockDataItems } from '../data/mockData';

    import type { GenericItem, GroupableField, SortConfig, FilterConfig } from
    '@/features/dynamic-view/types';


    // --- State and Actions ---

    interface DataDemoState {
        items: GenericItem[];
        hasMore: boolean;
        isLoading: boolean;
        isInitialLoading: boolean;
        totalItemCount: number;
    }


    interface DataDemoActions {
        loadData: (params: {
            page: number;
            groupBy: GroupableField | 'none';
            filters: FilterConfig;
            sortConfig: SortConfig | null;
        isFullLoad?: boolean;
        }) => void;
        updateItem: (itemId: string, updates: Partial<GenericItem>) => void;
    }


    const defaultState: DataDemoState = {
        items: [],
        hasMore: true,
        isLoading: true,
        isInitialLoading: true,
        totalItemCount: 0,
    };


    // --- Store Implementation ---

    export const useDataDemoStore = create<DataDemoState &
    DataDemoActions>((set, get) => ({
        ...defaultState,

        loadData: ({ page, groupBy, filters, sortConfig, isFullLoad }) => {
            set({ isLoading: true, ...(page === 1 && { isInitialLoading: true }) });
            const isFirstPage = page === 1;

            const filteredAndSortedData = (() => {
                const filteredItems = mockDataItems.filter((item) => {
                    const searchTermMatch =
                        item.title.toLowerCase().includes(filters.searchTerm.toLowerCase()) ||
                        item.description.toLowerCase().includes(filters.searchTerm.toLowerCase());
                    const statusMatch = filters.status.length === 0 || filters.status.includes(item.status);
                    const priorityMatch = filters.priority.length === 0 || filters.priority.includes(item.priority);
                    return searchTermMatch && statusMatch && priorityMatch;
                });

                if (sortConfig) {
                    filteredItems.sort((a, b) => {
                        // eslint-disable-next-line @typescript-eslint/no-explicit-any
                        const getNestedValue = (obj: GenericItem, path: string): any =>
                            path.split('.').reduce((o: any, k) => (o || {})[k], obj);

                        const aValue = getNestedValue(a, sortConfig.key);
                        const bValue = getNestedValue(b, sortConfig.key);

                        if (aValue === undefined || bValue === undefined) return 0;
                        if (typeof aValue === 'string' && typeof bValue === 'string') {
                            return sortConfig.direction === 'asc' ? aValue.localeCompare(bValue) : bValue.localeCompare(aValue);
                        }
                        if (typeof aValue === 'number' && typeof bValue === 'number') {
                            return sortConfig.direction === 'asc' ? aValue - bValue : bValue - aValue;
                        }
                        if (sortConfig.key === 'updatedAt' || sortConfig.key === 'createdAt') {
                            if (typeof aValue === 'string' && typeof bValue === 'string') {
                                return sortConfig.direction === 'asc'
                                    ? new Date(aValue).getTime() - new Date(bValue).getTime()
                                    : new Date(bValue).getTime() - new Date(aValue).getTime();
                            }
                        }
                        return 0;
                    });
                }
                return filteredItems;
            })();
            
            const totalItemCount = filteredAndSortedData.length;

            setTimeout(() => {
                if (groupBy !== 'none' || isFullLoad) {
                    set({
                        items: filteredAndSortedData,
                        hasMore: false,
                        isLoading: false,
                        isInitialLoading: false,
                        totalItemCount,
                    });
                    return;
                }

                const pageSize = 12;
                const newItems = filteredAndSortedData.slice((page - 1) * pageSize, page * pageSize);
                
                set(state => ({
                    items: isFirstPage ? newItems : [...state.items, ...newItems],
                    hasMore: totalItemCount > page * pageSize,
                    isLoading: false,
                    isInitialLoading: false,
                    totalItemCount,
                }));

            }, isFirstPage ? 1500 : 500);
        },

        updateItem: (itemId, updates) => {
            // In a real app, this would be an API call. Here we update the mock source.
            const itemIndex = mockDataItems.findIndex(i => i.id === itemId);
            if (itemIndex > -1) {
                mockDataItems[itemIndex] = { ...mockDataItems[itemIndex], ...updates };
            }

            // Also update the currently loaded items in the store's state for UI consistency
            set(state => ({
                items: state.items.map(item => 
                    item.id === itemId ? { ...item, ...updates } : item
                ),
            }));
        },
    }));


    // --- Selectors ---

    export const useGroupTabs = (
        groupBy: GroupableField | 'none',
        activeGroupTab: string,
    ) => useDataDemoStore(state => {
        const items = state.items;
        if (groupBy === 'none' || !items.length) return [];
        
        const groupCounts = items.reduce((acc, item) => {
            const groupKey = String(item[groupBy as GroupableField]);
            acc[groupKey] = (acc[groupKey] || 0) + 1;
            return acc;
        }, {} as Record<string, number>);

        const sortedGroups = Object.keys(groupCounts).sort((a, b) => a.localeCompare(b));

        const createLabel = (text: string, count: number, isActive: boolean): ReactNode => (
            <>
                {text}
                <Badge variant={isActive ? 'default' : 'secondary'} className={cn('transition-colors duration-300 text-xs font-semibold', !isActive && 'group-hover:bg-accent group-hover:text-accent-foreground')}>
                    {count}
                </Badge>
            </>
        );
        
        const totalCount = items.length;

        return [
            { id: 'all', label: createLabel('All', totalCount, activeGroupTab === 'all') },
            ...sortedGroups.map((g) => ({
                id: g,
                label: createLabel(capitalize(g), groupCounts[g], activeGroupTab === g),
            })),
        ];
    });


    export const useDataToRender = (
        groupBy: GroupableField | 'none',
        activeGroupTab: string,
    ) => useDataDemoStore(state => {
        const items = state.items;
        if (groupBy === 'none') {
            return items;
        }
        if (activeGroupTab === 'all') {
            return items;
        }
        return items.filter((item) => String(item[groupBy as GroupableField]) === activeGroupTab);
    });


    export const useSelectedItem = (itemId?: string) => {
        if (!itemId) return null;
        return (mockDataItems.find(item => item.id === itemId) as GenericItem) ?? null;
    };
  src/hooks/useAppViewManager.hook.ts: "import { useMemo, useCallback, useEffect, useRef } from 'react';\nimport { useSearchParams, useNavigate, useLocation, useParams } from 'react-router-dom';\nimport { useAppShellStore, type AppShellState, type ActivePage } from '@/store/appShell.store';\nimport type { DataItem, ViewMode, SortConfig, SortableField, GroupableField, Status, Priority, CalendarDateProp, CalendarDisplayProp, CalendarColorProp } from '@/pages/DataDemo/types';\nimport type { FilterConfig } from '@/pages/DataDemo/types';\nimport type { TaskView } from '@/pages/Messaging/types';\nimport { BODY_STATES, SIDEBAR_STATES } from '@/lib/utils';\n\nconst pageToPaneMap: Record<string, AppShellState['sidePaneContent']> = {\n  dashboard: 'main',\n  settings: 'settings',\n  toaster: 'toaster',\n  notifications: 'notifications',\n  'data-demo': 'dataDemo',\n  messaging: 'messaging',\n};\n\nfunction usePrevious<T>(value: T): T | undefined {\n  const ref = useRef<T>();\n  useEffect(() => {\n    ref.current = value;\n  });\n  return ref.current;\n}\n\n/**\n * A centralized hook to manage and synchronize all URL-based view states.\n * This is the single source of truth for view modes, side panes, split views,\n * and page-specific parameters.\n */\nexport function useAppViewManager() {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const navigate = useNavigate();\n  const location = useLocation();\n  const params = useParams<{ itemId: string; conversationId: string }>();\n  const { itemId, conversationId } = params;\n  const { setSidebarState, sidebarState } = useAppShellStore();\n\n  // --- DERIVED STATE FROM URL ---\n\n  const view = searchParams.get('view');\n  const sidePane = searchParams.get('sidePane');\n  const right = searchParams.get('right');\n  const messagingView = searchParams.get('messagingView') as TaskView | null;\n  const q = searchParams.get('q');\n  const status = searchParams.get('status');\n  const priority = searchParams.get('priority');\n  const sort = searchParams.get('sort');\n  const calDate = searchParams.get('calDate');\n  const calDisplay = searchParams.get('calDisplay');\n  const calLimit = searchParams.get('calLimit');\n  const calColor = searchParams.get('calColor');\n\n  const { bodyState, sidePaneContent } = useMemo(() => {\n    const validPanes: AppShellState['sidePaneContent'][] = ['details', 'settings', 'main', 'toaster', 'notifications', 'dataDemo', 'messaging'];\n    \n    // 1. Priority: Explicit side pane overlay via URL param\n    if (sidePane && validPanes.includes(sidePane as AppShellState['sidePaneContent'])) {\n      return { bodyState: BODY_STATES.SIDE_PANE, sidePaneContent: sidePane as AppShellState['sidePaneContent'] };\n    }\n\n    // 2. Data item detail view (can be overlay or split)\n    if (itemId) {\n      if (view === 'split') {\n        return { bodyState: BODY_STATES.SPLIT_VIEW, sidePaneContent: 'dataItem' as const };\n      }\n      return { bodyState: BODY_STATES.SIDE_PANE, sidePaneContent: 'dataItem' as const };\n    }\n\n    // 3. Messaging conversation view (always split)\n    if (conversationId) {\n      return { bodyState: BODY_STATES.SPLIT_VIEW, sidePaneContent: 'messaging' as const };\n    }\n\n    // 4. Generic split view via URL param\n    if (view === 'split' && right && validPanes.includes(right as AppShellState['sidePaneContent'])) {\n      return { bodyState: BODY_STATES.SPLIT_VIEW, sidePaneContent: right as AppShellState['sidePaneContent'] };\n    }\n\n    return { bodyState: BODY_STATES.NORMAL, sidePaneContent: 'details' as const };\n  }, [itemId, conversationId, view, sidePane, right]);\n  \n  const currentActivePage = useMemo(() => (location.pathname.split('/')[1] || 'dashboard') as ActivePage, [location.pathname]);\n  const prevActivePage = usePrevious(currentActivePage);\n\n  // --- SIDE EFFECTS ---\n  useEffect(() => {\n    // On navigating to messaging page, collapse sidebar if it's expanded.\n    // This ensures a good default view but allows the user to expand it again if they wish.\n    if (currentActivePage === 'messaging' && prevActivePage !== 'messaging' && sidebarState === SIDEBAR_STATES.EXPANDED) {\n      setSidebarState(SIDEBAR_STATES.COLLAPSED);\n    }\n  }, [currentActivePage, prevActivePage, sidebarState, setSidebarState]);\n\n  // DataDemo specific state\n  const viewMode = useMemo(() => (searchParams.get('dataView') as ViewMode) || 'list', [searchParams]);\n\tconst page = useMemo(() => parseInt(searchParams.get('page') || '1', 10), [searchParams]);\n\tconst groupBy = useMemo(() => (searchParams.get('groupBy') as GroupableField | 'none') || 'none', [searchParams]);\n\tconst activeGroupTab = useMemo(() => searchParams.get('tab') || 'all', [searchParams]);\n\tconst filters = useMemo<FilterConfig>(\n\t\t() => ({\n\t\t\tsearchTerm: q || '',\n\t\t\tstatus: (status?.split(',') || []).filter(Boolean) as Status[],\n\t\t\tpriority: (priority?.split(',') || []).filter(Boolean) as Priority[],\n\t\t}),\n\t\t[q, status, priority],\n\t);\n\tconst sortConfig = useMemo<SortConfig | null>(() => {\n\t\tconst sortParam = sort;\n\t\tif (!sortParam) return { key: 'updatedAt', direction: 'desc' }; // Default sort\n\t\tif (sortParam === 'default') return null;\n\n\t\tconst [key, direction] = sortParam.split('-');\n\t\treturn { key: key as SortableField, direction: direction as 'asc' | 'desc' };\n\t}, [sort]);\n  const calendarDateProp = useMemo(() => (calDate || 'dueDate') as CalendarDateProp, [calDate]);\n  const calendarDisplayProps = useMemo(\n    () => {\n      if (calDisplay === null) return []; // Default is now nothing\n      if (calDisplay === '') return []; // Explicitly empty is also nothing\n      return calDisplay.split(',') as CalendarDisplayProp[];\n    },\n    [calDisplay]\n  );\n  const calendarItemLimit = useMemo(() => {\n    const limit = parseInt(calLimit || '3', 10);\n    if (calLimit === 'all') return 'all';\n    return isNaN(limit) ? 3 : limit;\n  }, [calLimit]);\n  const calendarColorProp = useMemo(() => (calColor || 'none') as CalendarColorProp, [calColor]);\n\n  // --- MUTATOR ACTIONS ---\n\n  const handleParamsChange = useCallback(\n\t\t(newParams: Record<string, string | string[] | null | undefined>, resetPage = false) => {\n\t\t\tsetSearchParams(\n\t\t\t\t(prev) => {\n\t\t\t\t\tconst updated = new URLSearchParams(prev);\n\t\t\t\t\t\n\t\t\t\t\tfor (const [key, value] of Object.entries(newParams)) {\n\t\t\t\t\t\tif (value === null || value === undefined || (Array.isArray(value) && value.length === 0) || value === '') {\n\t\t\t\t\t\t\tupdated.delete(key);\n\t\t\t\t\t\t} else if (Array.isArray(value)) {\n\t\t\t\t\t\t\tupdated.set(key, value.join(','));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tupdated.set(key, String(value));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (resetPage) {\n\t\t\t\t\t\tupdated.delete('page');\n\t\t\t\t\t}\n\t\t\t\t\tif ('groupBy' in newParams) {\n\t\t\t\t\t\tupdated.delete('tab');\n\t\t\t\t\t}\n\n\t\t\t\t\treturn updated;\n\t\t\t\t},\n\t\t\t\t{ replace: true },\n\t\t\t);\n\t\t},\n\t\t[setSearchParams],\n\t);\n\n  const navigateTo = useCallback((page: string, params?: Record<string, string | null>) => {\n    const targetPath = page.startsWith('/') ? page : `/${page}`;\n    const isSamePage = location.pathname === targetPath;\n    \n    const newSearchParams = new URLSearchParams(isSamePage ? searchParams : undefined);\n\n    if (params) {\n      for (const [key, value] of Object.entries(params)) {\n        if (value === null || value === undefined) {\n          newSearchParams.delete(key);\n        } else {\n          newSearchParams.set(key, value);\n        }\n      }\n    }\n\n    navigate({ pathname: targetPath, search: newSearchParams.toString() });\n  }, [navigate, location.pathname, searchParams]);\n\n  const openSidePane = useCallback((pane: AppShellState['sidePaneContent']) => {\n    if (location.pathname === `/${Object.keys(pageToPaneMap).find(key => pageToPaneMap[key] === pane)}`) {\n        navigate({ pathname: '/dashboard', search: `?sidePane=${pane}` }, { replace: true });\n    } else {\n        handleParamsChange({ sidePane: pane, view: null, right: null });\n    }\n  }, [handleParamsChange, navigate, location.pathname]);\n\n  const closeSidePane = useCallback(() => {\n    if (itemId) {\n      navigate('/data-demo');\n    } else {\n      handleParamsChange({ sidePane: null, view: null, right: null });\n    }\n  }, [itemId, navigate, handleParamsChange]);\n\n  const toggleSidePane = useCallback((pane: AppShellState['sidePaneContent']) => {\n    if (sidePane === pane) {\n      closeSidePane();\n    } else {\n      openSidePane(pane);\n    }\n  }, [sidePane, openSidePane, closeSidePane]);\n\n  const toggleSplitView = useCallback(() => {\n    if (bodyState === BODY_STATES.SIDE_PANE) {\n      handleParamsChange({ view: 'split', right: sidePane, sidePane: null });\n    } else if (bodyState === BODY_STATES.SPLIT_VIEW) {\n      handleParamsChange({ sidePane: right, view: null, right: null });\n    } else { // From normal\n      const paneContent = pageToPaneMap[currentActivePage] || 'details';\n      handleParamsChange({ view: 'split', right: paneContent, sidePane: null });\n    }\n  }, [bodyState, sidePane, right, currentActivePage, handleParamsChange]);\n  \n  const setNormalView = useCallback(() => {\n      handleParamsChange({ sidePane: null, view: null, right: null });\n  }, [handleParamsChange]);\n\n  const switchSplitPanes = useCallback(() => {\n    if (bodyState !== BODY_STATES.SPLIT_VIEW) return;\n    const newSidePaneContent = pageToPaneMap[currentActivePage];\n    const newActivePage = Object.entries(pageToPaneMap).find(\n      ([, value]) => value === sidePaneContent\n    )?.[0] as ActivePage | undefined;\n\n    if (newActivePage && newSidePaneContent) {\n      navigate(`/${newActivePage}?view=split&right=${newSidePaneContent}`, { replace: true });\n    }\n  }, [bodyState, currentActivePage, sidePaneContent, navigate]);\n  \n  const closeSplitPane = useCallback((paneToClose: 'main' | 'right') => {\n    if (bodyState !== BODY_STATES.SPLIT_VIEW) return;\n    if (paneToClose === 'right') {\n      navigate(`/${currentActivePage}`, { replace: true });\n    } else { // Closing main pane\n      const pageToBecomeActive = Object.entries(pageToPaneMap).find(\n        ([, value]) => value === sidePaneContent\n      )?.[0] as ActivePage | undefined;\n      \n      if (pageToBecomeActive) {\n        navigate(`/${pageToBecomeActive}`, { replace: true });\n      } else {\n        navigate(`/dashboard`, { replace: true });\n      }\n    }\n  }, [bodyState, currentActivePage, sidePaneContent, navigate]);\n  \n  // DataDemo actions\n  const setViewMode = (mode: ViewMode) => handleParamsChange({ dataView: mode === 'list' ? null : mode });\n  const setGroupBy = (val: string) => handleParamsChange({ groupBy: val === 'none' ? null : val }, true);\n  const setActiveGroupTab = (tab: string) => handleParamsChange({ tab: tab === 'all' ? null : tab });\n  const setFilters = (newFilters: FilterConfig) => {\n    handleParamsChange({ q: newFilters.searchTerm, status: newFilters.status, priority: newFilters.priority }, true);\n  }\n  const setSort = (config: SortConfig | null) => {\n    if (!config) {\n      handleParamsChange({ sort: null }, true);\n    } else {\n      handleParamsChange({ sort: `${config.key}-${config.direction}` }, true);\n    }\n  }\n  const setTableSort = (field: SortableField) => {\n    let newSort: string | null = `${field}-desc`;\n    if (sortConfig?.key === field) {\n      if (sortConfig.direction === 'desc') newSort = `${field}-asc`;\n      else if (sortConfig.direction === 'asc') newSort = null;\n    }\n    handleParamsChange({ sort: newSort }, true);\n  };\n  const setPage = (newPage: number) => handleParamsChange({ page: newPage.toString() });\n\n  // Calendar specific actions\n  const setCalendarDateProp = (prop: CalendarDateProp) => handleParamsChange({ calDate: prop === 'dueDate' ? null : prop });\n  const setCalendarDisplayProps = (props: CalendarDisplayProp[]) => {\n    // Check for default state to keep URL clean\n    const isDefault = props.length === 0;\n    handleParamsChange({ calDisplay: isDefault ? null : props.join(',') });\n  };\n  const setCalendarItemLimit = (limit: number | 'all') => handleParamsChange({ calLimit: limit === 3 ? null : String(limit) });\n  const setCalendarColorProp = (prop: CalendarColorProp) => handleParamsChange({ calColor: prop === 'none' ? null : prop });\n\n  const onItemSelect = useCallback((item: DataItem) => {\n\t\tnavigate(`/data-demo/${item.id}${location.search}`);\n\t}, [navigate, location.search]);\n\n  const setMessagingView = (view: TaskView) => handleParamsChange({ messagingView: view });\n\n\n  return useMemo(() => ({\n    // State\n    bodyState,\n    sidePaneContent,\n    currentActivePage,\n    itemId,\n    messagingView,\n    // DataDemo State\n    viewMode,\n    page,\n    groupBy,\n    activeGroupTab,\n    filters,\n    sortConfig,\n    calendarDateProp,\n    calendarDisplayProps,\n    calendarItemLimit,\n    calendarColorProp,\n    // Actions\n    navigateTo,\n    openSidePane,\n    closeSidePane,\n    toggleSidePane,\n    toggleSplitView,\n    setNormalView,\n    switchSplitPanes,\n    setMessagingView,\n    closeSplitPane,\n    // DataDemo Actions\n    onItemSelect,\n    setViewMode,\n    setGroupBy,\n    setActiveGroupTab,\n    setFilters,\n    setSort,\n    setTableSort,\n    setPage,\n    setCalendarDateProp,\n    setCalendarDisplayProps,\n    setCalendarItemLimit,\n    setCalendarColorProp,\n  }), [\n    bodyState, sidePaneContent, currentActivePage, itemId, messagingView, viewMode,\n    page, groupBy, activeGroupTab, filters, sortConfig, calendarDateProp,\n    calendarDisplayProps, calendarItemLimit, calendarColorProp,\n    navigateTo, openSidePane, closeSidePane, toggleSidePane, toggleSplitView, setNormalView, setMessagingView,\n    switchSplitPanes, closeSplitPane, onItemSelect, setViewMode, setGroupBy, setActiveGroupTab, setFilters,\n    setSort, setTableSort, setPage, setCalendarDateProp, setCalendarDisplayProps, setCalendarItemLimit, setCalendarColorProp\n  ]);\n}"
  src/features/dynamic-view/components/shared/AnimatedLoadingSkeleton.tsx: >-
    import { type ViewMode } from '../../types'

    import { Card, CardHeader, CardContent } from '@/components/ui/card'

    import { Skeleton } from '@/components/ui/skeleton'


    export function AnimatedLoadingSkeleton({ viewMode }: { viewMode: ViewMode
    }) {
      const renderSkeleton = () => {
        switch (viewMode) {
          case 'table':
            return (
              <div className="space-y-2">
                <Skeleton className="h-12 w-full" />
                {[...Array(5)].map((_, i) => (
                  <Skeleton key={i} className="h-10 w-full" />
                ))}
              </div>
            )
          case 'list':
            return (
              <div className="space-y-4">
                {[...Array(5)].map((_, i) => (
                  <div key={i} className="flex items-center space-x-4">
                    <Skeleton className="h-10 w-10 rounded-full" />
                    <div className="space-y-2 flex-1">
                      <Skeleton className="h-4 w-3/4" />
                    </div>
                    <Skeleton className="h-4 w-1/4" />
                  </div>
                ))}
              </div>
            )
          case 'grid':
          case 'cards':
            return (
              <div className="grid grid-cols-[repeat(auto-fill,minmax(320px,1fr))] gap-6">
                {[...Array(6)].map((_, i) => (
                  <Card key={i}>
                    <CardHeader>
                      <Skeleton className="h-12 w-12 rounded-lg" />
                    </CardHeader>
                    <CardContent className="space-y-3">
                      <Skeleton className="h-5 w-4/5" />
                      <Skeleton className="h-4 w-full" />
                      <Skeleton className="h-4 w-full" />
                      <Skeleton className="h-4 w-2/3" />
                    </CardContent>
                  </Card>
                ))}
              </div>
            )
            case 'kanban':
                return (
                  <div className="flex items-start gap-6">
                    {[...Array(3)].map((_, i) => (
                      <div key={i} className="w-80 flex-shrink-0 space-y-4">
                        <Skeleton className="h-6 w-1/2" />
                        <Skeleton className="h-32 w-full" />
                        <Skeleton className="h-32 w-full" />
                      </div>
                    ))}
                  </div>
                )
            case 'calendar':
                return (
                  <div className="space-y-4">
                      <div className="flex justify-between">
                          <Skeleton className="h-8 w-48" />
                          <Skeleton className="h-8 w-32" />
                      </div>
                    <Skeleton className="h-[600px] w-full" />
                  </div>
                )
          default:
            return <div>Loading...</div>
        }
      }

      return <div>{renderSkeleton()}</div>
    }
  src/features/dynamic-view/components/controls/ViewModeSelector.tsx: >-
    import { useEffect, useRef, useState, useCallback } from 'react'

    import { gsap } from 'gsap'

    import { cn } from '@/lib/utils'

    import { List, Grid3X3, LayoutGrid, Table, LayoutDashboard, CalendarDays }
    from 'lucide-react'

    import type { ViewMode } from '../types'

    import { useAppViewManager } from '@/hooks/useAppViewManager.hook'


    const viewModes = [
      { id: 'list' as ViewMode, label: 'List', icon: List, description: 'Compact list with details' },
      { id: 'cards' as ViewMode, label: 'Cards', icon: LayoutGrid, description: 'Rich card layout' },
      { id: 'kanban' as ViewMode, label: 'Kanban', icon: LayoutDashboard, description: 'Interactive Kanban board' },
      { id: 'calendar' as ViewMode, label: 'Calendar', icon: CalendarDays, description: 'Interactive calendar view' },
      { id: 'grid' as ViewMode, label: 'Grid', icon: Grid3X3, description: 'Masonry grid view' },
      { id: 'table' as ViewMode, label: 'Table', icon: Table, description: 'Structured data table' }
    ]


    export function DataViewModeSelector() {
      const { viewMode, setViewMode } = useAppViewManager();
      const indicatorRef = useRef<HTMLDivElement>(null)
      const containerRef = useRef<HTMLDivElement>(null)
      const [isExpanded, setIsExpanded] = useState(false)
      const [isTransitioning, setIsTransitioning] = useState(false)

      const updateIndicatorPosition = useCallback((immediate = false) => {
        if (!indicatorRef.current || !containerRef.current || isTransitioning) return

        const activeButton = containerRef.current.querySelector(`[data-mode="${viewMode}"]`) as HTMLElement
        if (!activeButton) return

        const containerRect = containerRef.current.getBoundingClientRect()
        const buttonRect = activeButton.getBoundingClientRect()
        
        const left = buttonRect.left - containerRect.left
        const width = buttonRect.width

        if (immediate) {
          // Set position immediately without animation for initial load
          gsap.set(indicatorRef.current, {
            x: left,
            width: width
          })
        } else {
          gsap.to(indicatorRef.current, {
            duration: 0.3,
            x: left,
            width: width,
            ease: "power2.out"
          })
        }
      }, [viewMode, isTransitioning])

      // Initial setup - set position immediately without animation
      useEffect(() => {
        const timer = setTimeout(() => {
          updateIndicatorPosition(true)
        }, 0)
        return () => clearTimeout(timer)
        // eslint-disable-next-line react-hooks/exhaustive-deps
      }, []) // Only run once on mount

      useEffect(() => {
        if (!isTransitioning) {
          updateIndicatorPosition()
        }
      }, [viewMode, isTransitioning, updateIndicatorPosition])

      const handleMouseEnter = () => {
        setIsTransitioning(true)
        setIsExpanded(true)
        
        // Wait for expand animation to complete
        setTimeout(() => {
          setIsTransitioning(false)
        }, 500)
      }

      const handleMouseLeave = () => {
        setIsTransitioning(true)
        setIsExpanded(false)
        
        // Wait for collapse animation to complete
        setTimeout(() => {
          setIsTransitioning(false)
        }, 500)
      }

      return (
        <div 
          ref={containerRef}
          onMouseEnter={handleMouseEnter}
          onMouseLeave={handleMouseLeave}
          className={cn(
            "relative flex items-center bg-card/50 backdrop-blur-sm border border-border/50 rounded-2xl p-1.5 shadow-lg transition-all duration-500 ease-out",
            "hover:shadow-xl hover:bg-card/70",
            isExpanded ? "gap-1" : "gap-0"
          )}
        >
          {/* Animated indicator */}
          <div
            ref={indicatorRef}
            className="absolute inset-y-1.5 bg-gradient-to-r from-primary/20 to-primary/10 border border-primary/20 rounded-xl transition-all duration-300"
            style={{ left: 0, width: 0 }}
          />
          
          {/* Mode buttons */}
          {viewModes.map((mode, index) => {
            const IconComponent = mode.icon
            const isActive = viewMode === mode.id
            
            return (
              <button
                key={mode.id}
                data-mode={mode.id}
                onClick={() => setViewMode(mode.id)}
                className={cn(
                  "relative flex items-center justify-center rounded-xl transition-all duration-500 ease-out group overflow-hidden",
                  "hover:bg-accent/20 active:scale-95",
                  isActive && "text-primary",
                  isExpanded ? "gap-3 px-4 py-2.5" : "gap-0 px-3 py-2.5"
                )}
                title={mode.description}
                style={{
                  transitionDelay: isExpanded ? `${index * 50}ms` : `${(viewModes.length - index - 1) * 30}ms`
                }}
              >
                <IconComponent className={cn(
                  "w-5 h-5 transition-all duration-300 flex-shrink-0",
                  isActive && "scale-110",
                  "group-hover:scale-105",
                  isExpanded ? "rotate-0" : "rotate-0"
                )} />
                
                {/* Label with smooth expand/collapse */}
                <div className={cn(
                  "overflow-hidden transition-all duration-500 ease-out",
                  isExpanded ? "max-w-[80px] opacity-100" : "max-w-0 opacity-0"
                )}>
                  <span className={cn(
                    "font-medium whitespace-nowrap transition-all duration-300",
                    isActive ? "text-primary" : "text-muted-foreground",
                    "group-hover:text-foreground"
                  )}>
                    {mode.label}
                  </span>
                </div>
              </button>
            )
          })}
        </div>
      )
    }
  src/features/dynamic-view/components/views/CardView.tsx: >-
    import { useRef } from 'react'

    import { cn } from '@/lib/utils'

    import { ArrowUpRight } from 'lucide-react'

    import type { GenericItem } from '../../types'

    import { useStaggeredAnimation } from
    '@/hooks/useStaggeredAnimation.motion.hook'

    import { EmptyState } from './EmptyState'

    import { useAppViewManager } from '@/hooks/useAppViewManager.hook'

    import {
      useSelectedItem,
    } from '../store/dataDemo.store'

    import { AddDataItemCta } from './shared/AddDataItemCta'

    import { useDynamicView } from '../../DynamicViewContext'

    import { FieldRenderer } from '../shared/FieldRenderer'


    export function DataCardView({ data, isGrid = false }: { data:
    GenericItem[]; isGrid?: boolean }) {
      const { onItemSelect, itemId } = useAppViewManager();
      const selectedItem = useSelectedItem(itemId);
      const { config } = useDynamicView();
      const { cardView: viewConfig } = config;

      const containerRef = useRef<HTMLDivElement>(null)
      useStaggeredAnimation(containerRef, [data], { mode: 'incremental', y: 40 });

      const items = Array.isArray(data) ? data : [];
      if (items.length === 0) {
        return <EmptyState />
      }

      return (
        <div 
          ref={containerRef}
          className={cn(
            "gap-6",
            isGrid
              ? "grid grid-cols-[repeat(auto-fill,minmax(280px,1fr))]"
              : "grid grid-cols-[repeat(auto-fill,minmax(320px,1fr))]",
            "pb-4"
          )}
        >
          {items.map((item: GenericItem) => {
            const isSelected = selectedItem?.id === item.id
            
            return (
              <div
                key={item.id}
                onClick={() => onItemSelect(item)}
                className={cn(
                  "group relative overflow-hidden rounded-3xl border bg-card/50 backdrop-blur-sm transition-all duration-500 cursor-pointer",
                  "hover:bg-card/80 hover:shadow-xl hover:shadow-primary/10 hover:border-primary/30 hover:-translate-y-2",
                  "active:scale-[0.98]",
                  isSelected && "ring-2 ring-primary/30 border-primary/40 bg-card/90 shadow-lg shadow-primary/20",
                )}
              >
                {/* Card Header with Thumbnail */}
                <div className="relative p-6 pb-4">
                  <div className="flex items-start justify-between mb-4">
                    <div className="w-16 h-16 bg-gradient-to-br from-primary/20 to-primary/10 rounded-2xl flex items-center justify-center text-3xl group-hover:scale-110 transition-transform duration-300">
                      <FieldRenderer item={item} fieldId={viewConfig.thumbnailField} />
                    </div>
                    <ArrowUpRight className="w-5 h-5 text-muted-foreground group-hover:text-primary group-hover:translate-x-1 group-hover:-translate-y-1 transition-all duration-300" />
                  </div>

                  {/* Header Fields (e.g., priority indicator) */}
                  <div className="absolute top-4 right-4 flex items-center gap-2">
                    {viewConfig.headerFields.map(fieldId => (
                      <FieldRenderer key={fieldId} item={item} fieldId={fieldId} />
                    ))}
                  </div>
                </div>

                {/* Card Content */}
                <div className="px-6 pb-6 space-y-4">
                  <div className="font-semibold text-lg group-hover:text-primary transition-colors line-clamp-2">
                    <FieldRenderer item={item} fieldId={viewConfig.titleField} />
                  </div>
                  <div className="text-muted-foreground text-sm line-clamp-3">
                    <FieldRenderer item={item} fieldId={viewConfig.descriptionField} />
                  </div>
                  
                  {viewConfig.contentFields.map(fieldId => (
                    <FieldRenderer key={fieldId} item={item} fieldId={fieldId} options={{ showPercentage: true }} />
                  ))}
                  
                  <div className="flex items-center justify-between text-xs text-muted-foreground">
                    {viewConfig.footerFields.map(fieldId => (
                      <FieldRenderer key={fieldId} item={item} fieldId={fieldId} />
                    ))}
                  </div>
                </div>

                {/* Hover gradient overlay */}
                <div className="absolute inset-0 bg-gradient-to-br from-primary/5 via-transparent to-primary/5 opacity-0 group-hover:opacity-100 transition-opacity duration-500 pointer-events-none" />
                
                {/* Selection indicator */}
                {isSelected && (
                  <div className="absolute inset-0 bg-gradient-to-br from-primary/10 to-primary/5 pointer-events-none" />
                )}
              </div>
            )
          })}
          <AddDataItemCta viewMode={isGrid ? 'grid' : 'cards'} />
        </div>
      )
    }
  src/features/dynamic-view/components/views/CalendarView.tsx: >-
    import { useState, useMemo, useRef, useLayoutEffect } from "react";

    import { format, addMonths, subMonths, startOfMonth, endOfMonth,
    startOfWeek, endOfWeek, eachDayOfInterval, isSameMonth, isToday, isSameDay,
    } from "date-fns";

    import { ChevronLeft, ChevronRight } from "lucide-react";

    import { gsap } from "gsap";


    import { Button } from "@/components/ui/button";

    import { cn } from "@/lib/utils";

    import type { GenericItem } from '../../types';

    import type { CalendarDisplayProp, CalendarDateProp, CalendarColorProp,
    Status, Priority } from '../../pages/DataDemo/types';

    import { useAppViewManager } from "@/hooks/useAppViewManager.hook";

    import { useResizeObserver } from "@/hooks/useResizeObserver.hook";

    import { useSelectedItem, useDataDemoStore } from "../store/dataDemo.store";

    import { CalendarViewControls } from "./DataCalendarViewControls";

    import { useDynamicView } from '../../DynamicViewContext'

    import { FieldRenderer } from '../shared/FieldRenderer'


    interface CalendarViewProps {
      data: GenericItem[];
    }


    const PRIORITY_BG_COLORS: Record<Priority, string> = {
      low: 'bg-blue-500/80 border-blue-600/80 text-white',
      medium: 'bg-yellow-500/80 border-yellow-600/80 text-yellow-950',
      high: 'bg-orange-500/80 border-orange-600/80 text-white',
      critical: 'bg-red-600/80 border-red-700/80 text-white',
    };


    const STATUS_BG_COLORS: Record<Status, string> = {
      active: 'bg-sky-500/80 border-sky-600/80 text-white',
      pending: 'bg-amber-500/80 border-amber-600/80 text-amber-950',
      completed: 'bg-emerald-600/80 border-emerald-700/80 text-white',
      archived: 'bg-zinc-500/80 border-zinc-600/80 text-white',
    };


    const CATEGORY_BG_COLORS = [
      'bg-rose-500/80 border-rose-600/80 text-white',
      'bg-fuchsia-500/80 border-fuchsia-600/80 text-white',
      'bg-indigo-500/80 border-indigo-600/80 text-white',
      'bg-teal-500/80 border-teal-600/80 text-white',
      'bg-lime-500/80 border-lime-600/80 text-lime-950',
    ];


    const getCategoryBgColor = (category: string) => {
      let hash = 0;
      for (let i = 0; i < category.length; i++) {
        hash = category.charCodeAt(i) + ((hash << 5) - hash);
      }
      const index = Math.abs(hash % CATEGORY_BG_COLORS.length);
      return CATEGORY_BG_COLORS[index];
    };


    function CalendarHeader({ currentDate, onPrevMonth, onNextMonth, onToday }:
    {
      currentDate: Date;
      onPrevMonth: () => void;
      onNextMonth: () => void;
      onToday: () => void;
    }) {
      return (
        <div className="flex items-center justify-between gap-4 mb-6">
          <h2 className="text-xl font-bold md:text-2xl tracking-tight">
            {format(currentDate, "MMMM yyyy")}
          </h2>
          <div className="flex items-center gap-2">
            <Button variant="outline" size="sm" onClick={onToday}>Today</Button>
            <CalendarViewControls />
            <div className="flex items-center">
              <Button variant="outline" size="icon" className="h-9 w-9" onClick={onPrevMonth}>
                <ChevronLeft className="h-4 w-4" />
              </Button>
              <Button variant="outline" size="icon" className="h-9 w-9" onClick={onNextMonth}>
                <ChevronRight className="h-4 w-4" />
              </Button>
            </div>
          </div>
        </div>
      );
    }


    function CalendarEvent({ item, isSelected, isDragging, onDragStart,
    displayProps, colorProp }: { 
        item: GenericItem; 
        isSelected: boolean;
        isDragging: boolean;
        onDragStart: (e: React.DragEvent<HTMLDivElement>, itemId: string) => void;
        displayProps: CalendarDisplayProp[];
        colorProp: CalendarColorProp;
    }) {
      const { onItemSelect } = useAppViewManager();
      const { config } = useDynamicView();
      const { calendarView: viewConfig } = config;

        const colorClass = useMemo(() => {
          switch (colorProp) {
            case 'priority': return PRIORITY_BG_COLORS[item.priority as Priority];
            case 'status': return STATUS_BG_COLORS[item.status as Status];
            case 'category': return getCategoryBgColor(item.category as string);
            default: return null;
          }
        }, [colorProp, item]);

        return (
            <div
                draggable
                onDragStart={(e) => onDragStart(e, item.id)}
                onClick={() => onItemSelect(item)}
                className={cn(
                    "p-2 rounded-lg cursor-grab transition-all duration-200 border space-y-1",
                    isSelected && "ring-2 ring-primary ring-offset-background ring-offset-2",
                    isDragging && "opacity-50 ring-2 ring-primary cursor-grabbing",
                    colorClass 
                      ? `${colorClass} hover:brightness-95 dark:hover:brightness-110`
                      : "bg-card/60 dark:bg-neutral-800/60 backdrop-blur-sm hover:bg-card/80 dark:hover:bg-neutral-700/70"
                )}
            >
                <div className={cn(
                  "font-semibold text-sm leading-tight line-clamp-2",
                  colorClass ? "text-inherit" : "text-card-foreground/90"
                )}>
                  <FieldRenderer item={item} fieldId={viewConfig.titleField} />
                </div>

                {viewConfig.displayFields.length > 0 && (
                    <div className={cn(
                        "flex items-center justify-between pt-1 border-t flex-wrap gap-2",
                        colorClass ? "border-black/10 dark:border-white/10" : "border-border/30 dark:border-neutral-700/50"
                    )}>
                      {viewConfig.displayFields.map(fieldId => (
                        <FieldRenderer key={fieldId} item={item} fieldId={fieldId} options={{ compact: true, avatarClassName: 'w-5 h-5' }}/>
                      ))}
                    </div>
                )}
            </div>
        );
    }


    const datePropLabels: Record<CalendarDateProp, string> = {
      dueDate: 'due dates',
      createdAt: 'creation dates',
      updatedAt: 'update dates',
    };


    export function DataCalendarView({ data }: CalendarViewProps) {
      const [currentDate, setCurrentDate] = useState(new Date());
      const { 
        itemId,
        calendarDateProp, 
        calendarDisplayProps, 
        calendarItemLimit,
        calendarColorProp,
      } = useAppViewManager();
      const selectedItem = useSelectedItem(itemId);
      const updateItem = useDataDemoStore(s => s.updateItem);
      
      // Drag & Drop State
      const [draggedItemId, setDraggedItemId] = useState<string | null>(null);
      const [dropTargetDate, setDropTargetDate] = useState<Date | null>(null);

      // GSAP animation state
      const [direction, setDirection] = useState(0); // 0: initial, 1: next, -1: prev

      // Responsive Calendar State
      const calendarContainerRef = useRef<HTMLDivElement>(null);
      const { width } = useResizeObserver(calendarContainerRef);
      const MIN_DAY_WIDTH = 160; // px
      const numColumns = useMemo(() => {
        if (width === 0) return 7;
        const cols = Math.floor(width / MIN_DAY_WIDTH);
        return Math.max(3, Math.min(7, cols));
      }, [width]);

      const gridRef = useRef<HTMLDivElement>(null);
      const itemsByDateProp = useMemo(() => data.filter(item => !!item[calendarDateProp]), [data, calendarDateProp]);

      const eventsByDate = useMemo(() => {
        const eventsMap = new Map<string, GenericItem[]>();
        itemsByDateProp.forEach(item => {
          const dateValue = item[calendarDateProp];
          if (!dateValue) return;
          const date = new Date(dateValue as string);
          const dateKey = format(date, "yyyy-MM-dd");
          if (!eventsMap.has(dateKey)) {
            eventsMap.set(dateKey, []);
          }
          eventsMap.get(dateKey)?.push(item);
        });
        return eventsMap;
      }, [itemsByDateProp, calendarDateProp]);

      const monthStart = startOfMonth(currentDate);
      const monthEnd = endOfMonth(monthStart);
      const startDate = startOfWeek(monthStart, { weekStartsOn: 0 }); // Sunday
      const endDate = endOfWeek(monthEnd, { weekStartsOn: 0 });

      const days = eachDayOfInterval({ start: startDate, end: endDate });
      const weekdays = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
      
      // D&D Handlers
      const handleDragStart = (e: React.DragEvent, itemId: string) => {
        e.dataTransfer.effectAllowed = 'move';
        e.dataTransfer.setData('text/plain', itemId);
        setDraggedItemId(itemId);
      };
      
      const handleDragEnd = () => {
        setDraggedItemId(null);
        setDropTargetDate(null);
      };

      const handleDragOver = (e: React.DragEvent, day: Date) => {
        e.preventDefault();
        if (dropTargetDate === null || !isSameDay(day, dropTargetDate)) {
            setDropTargetDate(day);
        }
      };

      const handleDragLeave = () => {
        setDropTargetDate(null);
      };

      const handleDrop = (e: React.DragEvent, day: Date) => {
        e.preventDefault();
        const itemIdToUpdate = e.dataTransfer.getData('text/plain');
        if (itemIdToUpdate) {
            const originalItem = itemsByDateProp.find(i => i.id === itemIdToUpdate);
            if (originalItem && originalItem[calendarDateProp]) {
                const originalDate = new Date(originalItem[calendarDateProp] as string);
                // Preserve the time, only change the date part
                const newDueDate = new Date(day);
                newDueDate.setHours(originalDate.getHours(), originalDate.getMinutes(), originalDate.getSeconds(), originalDate.getMilliseconds());
                updateItem(itemIdToUpdate, { [calendarDateProp]: newDueDate.toISOString() });
            }
        }
        handleDragEnd(); // Reset state
      };
      
      const handlePrevMonth = () => {
        setDirection(-1);
        setCurrentDate(subMonths(currentDate, 1));
      };
      const handleNextMonth = () => {
        setDirection(1);
        setCurrentDate(addMonths(currentDate, 1));
      };
      const handleToday = () => {
        setDirection(0); // No animation for 'Today'
        setCurrentDate(new Date());
      };

      useLayoutEffect(() => {
        if (direction === 0 || !gridRef.current) return;
        gsap.fromTo(gridRef.current, 
          { opacity: 0, x: 30 * direction }, 
          { opacity: 1, x: 0, duration: 0.3, ease: 'power2.out' }
        );
      }, [currentDate]);

      return (
        <div ref={calendarContainerRef} className="-mx-4 md:-mx-6">
          <div className="px-4 md:px-6 pb-2">
            <CalendarHeader currentDate={currentDate} onPrevMonth={handlePrevMonth} onNextMonth={handleNextMonth} onToday={handleToday} />
          </div>
          {itemsByDateProp.length === 0 ? (
            <div className="flex items-center justify-center h-96 text-muted-foreground rounded-lg border bg-card/30 mx-4 md:mx-6">
              No items with {datePropLabels[calendarDateProp]} to display on the calendar.
            </div>
          ) : (
            <div className="px-2" onDragEnd={handleDragEnd}>
              {numColumns === 7 && (
                <div className="grid grid-cols-7">
                  {weekdays.map(day => (
                    <div key={day} className="py-2 px-3 text-center text-xs font-semibold text-muted-foreground">
                      {day}
                    </div>
                  ))}
                </div>
              )}

                <div
                  ref={gridRef}
                  style={{
                    display: 'grid',
                    gridTemplateColumns: `repeat(${numColumns}, minmax(0, 1fr))`,
                    gap: '0.5rem',
                  }}
                >
                  {days.map(day => {
                    const dateKey = format(day, "yyyy-MM-dd");
                    const dayEvents = eventsByDate.get(dateKey) || [];
                    const visibleEvents = calendarItemLimit === 'all' 
                        ? dayEvents 
                        : dayEvents.slice(0, calendarItemLimit as number);
                    const hiddenEventsCount = dayEvents.length - visibleEvents.length;
                    const isCurrentMonthDay = isSameMonth(day, currentDate);
                    const isDropTarget = dropTargetDate && isSameDay(day, dropTargetDate);
                    return (
                      <div
                        key={day.toString()}
                        onDragOver={(e) => handleDragOver(e, day)}
                        onDragLeave={handleDragLeave}
                        onDrop={(e) => handleDrop(e, day)}
                        className={cn(
                          "relative min-h-[150px] rounded-2xl p-2 flex flex-col gap-2 transition-all duration-300 border",
                          isCurrentMonthDay ? "bg-card/40 dark:bg-neutral-900/40 border-transparent" : "bg-muted/30 dark:bg-neutral-800/20 border-transparent text-muted-foreground/60",
                          isDropTarget ? "border-primary/50 bg-primary/10" : "hover:border-primary/20 hover:bg-card/60"
                        )}
                      >
                        <div className="font-semibold text-sm">
                          {isToday(day) ? (
                            <div className="flex items-center justify-center w-7 h-7 rounded-full bg-primary text-primary-foreground">
                              {format(day, 'd')}
                            </div>
                          ) : (
                            <div className="flex items-baseline gap-1.5 px-1 py-0.5">
                              {numColumns < 7 && <span className="text-xs opacity-70">{format(day, 'eee')}</span>}
                              <span>{format(day, 'd')}</span>
                            </div>
                          )}
                        </div>
                        <div className="space-y-2 overflow-y-auto flex-grow custom-scrollbar">
                          {visibleEvents.map(item => (
                            <CalendarEvent
                              key={item.id} 
                              item={item} 
                              isSelected={selectedItem?.id === item.id}
                              isDragging={draggedItemId === item.id}
                              onDragStart={handleDragStart}
                              displayProps={calendarDisplayProps}
                              colorProp={calendarColorProp}
                            />
                          ))}
                        </div>
                        {hiddenEventsCount > 0 && (
                          <div className="absolute bottom-1 right-2 text-xs font-bold text-muted-foreground">
                            +{hiddenEventsCount} more
                          </div>
                        )}
                      </div>
                    );
                  })}
                </div>
            </div>
          )}
        </div>
      );
    }
  src/features/dynamic-view/components/views/ListView.tsx: >-
    import { useRef } from 'react'

    import { cn } from '@/lib/utils'

    import type { GenericItem } from '../../types'

    import { useStaggeredAnimation } from
    '@/hooks/useStaggeredAnimation.motion.hook'

    import { EmptyState } from './EmptyState'

    import { useAppViewManager } from '@/hooks/useAppViewManager.hook'

    import { 
      useSelectedItem,
    } from '../store/dataDemo.store'

    import { AddDataItemCta } from './shared/AddDataItemCta'

    import { useDynamicView } from '../../DynamicViewContext'

    import { FieldRenderer } from '../shared/FieldRenderer'


    export function DataListView({ data }: { data: GenericItem[] }) {
      const { onItemSelect, itemId } = useAppViewManager();
      const selectedItem = useSelectedItem(itemId);
      const { config } = useDynamicView();

      const listRef = useRef<HTMLDivElement>(null)
      useStaggeredAnimation(listRef, [data], { mode: 'incremental', scale: 1, y: 20, stagger: 0.05, duration: 0.4 });

      const items = Array.isArray(data) ? data : [];
      if (items.length === 0) {
        return <EmptyState />
      }

      return (
        <div ref={listRef}>
          {items.map((item: GenericItem) => {
            const isSelected = selectedItem?.id === item.id
            
            return (
              <div key={item.id} className="px-2">
                <div
                  onClick={() => onItemSelect(item)}
                  className={cn(
                    "group flex items-center px-2 py-2 rounded-md transition-colors duration-200 cursor-pointer",
                    "hover:bg-accent/80",
                    isSelected ? "bg-accent" : "bg-transparent"
                  )}
                >
                  {/* Left side: Icon and Title */}
                  <div className="flex items-center gap-3 flex-1 min-w-0">
                    <div className="flex-shrink-0 w-8 text-center">
                      <FieldRenderer item={item} fieldId={config.listView.iconField} className="text-xl" />
                    </div>
                    <div className="font-medium truncate text-card-foreground group-hover:text-primary">
                      <FieldRenderer item={item} fieldId={config.listView.titleField} />
                    </div>
                  </div>

                  {/* Right side: Metadata */}
                  <div className="flex shrink-0 items-center gap-2 sm:gap-4 md:gap-6 ml-4 text-sm text-muted-foreground">
                    {config.listView.metaFields.map(fieldId => (
                      <FieldRenderer key={fieldId} item={item} fieldId={fieldId} options={{ compact: true, avatarClassName: 'w-7 h-7' }} />
                    ))}
                  </div>
                </div>
              </div>
            )
          })}
          <AddDataItemCta viewMode='list' />
        </div>
      )
    }
  src/features/dynamic-view/components/controls/ViewControls.tsx: >-
    import * as React from 'react'

    import { Check, ListFilter, Search, SortAsc, ChevronsUpDown } from
    'lucide-react'


    import { cn } from '@/lib/utils'

    import { Button } from '@/components/ui/button'

    import { Input } from '@/components/ui/input'

    import { Badge } from '@/components/ui/badge'

    import { Popover, PopoverContent, PopoverTrigger } from
    '@/components/ui/popover'

    import {
      DropdownMenu,
      DropdownMenuContent,
      DropdownMenuRadioGroup,
      DropdownMenuRadioItem,
      DropdownMenuSeparator,
      DropdownMenuLabel,
      DropdownMenuTrigger,
    } from '@/components/ui/dropdown-menu'

    import {
      Command,
      CommandEmpty,
      CommandGroup,
      CommandInput,
      CommandItem,
      CommandList,
      CommandSeparator,
    } from '@/components/ui/command'


    import type { FilterConfig } from '../../types'

    import type { SortableField } from '../../pages/DataDemo/types'

    import { useAppViewManager } from '@/hooks/useAppViewManager.hook'

    import { useDynamicView } from '../../DynamicViewContext'


    export interface DataViewControlsProps {
      // groupOptions will now come from config
    }


    export function DataViewControls() {
      const {
        filters,
        setFilters,
        sortConfig,
        setSort,
        groupBy,
        setGroupBy,
        viewMode,
      } = useAppViewManager();
      const { config } = useDynamicView();
      const sortOptions = config.sortableFields;
      const groupOptions = config.groupableFields;
      const filterableFields = config.filterableFields;

      const handleSearchChange = (event: React.ChangeEvent<HTMLInputElement>) => {
        setFilters({ ...filters, searchTerm: event.target.value })
      }
      
      const activeFilterCount = filterableFields.reduce((acc, field) => acc + (filters[field.id]?.length || 0), 0)

      return (
        <div className="flex flex-col sm:flex-row items-center gap-2 w-full">
          {/* Search */}
          <div className="relative w-full sm:w-auto">
            <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground" />
            <Input
              placeholder="Search projects..."
              className="pl-9 w-full sm:w-64"
              value={filters.searchTerm}
              onChange={handleSearchChange}
            />
          </div>

          {/* Filters */}
          <Popover>
            <PopoverTrigger asChild>
              <Button variant="outline" size="sm" className="h-9 w-full sm:w-auto justify-start border-dashed">
                <ListFilter className="mr-2 h-4 w-4" />
                Filters
                {activeFilterCount > 0 && (
                  <>
                    <div className="mx-2 h-4 w-px bg-muted-foreground/50" />
                    <Badge variant="secondary" className="rounded-sm px-1 font-normal">
                      {activeFilterCount}
                    </Badge>
                  </>
                )}
              </Button>
            </PopoverTrigger>
            <PopoverContent className="w-[240px] p-0" align="start">
              <CombinedFilter filters={filters} onFiltersChange={setFilters} filterableFields={filterableFields} />
            </PopoverContent>
          </Popover>

          {activeFilterCount > 0 && (
            <Button variant="ghost" size="sm" onClick={() => setFilters({ searchTerm: filters.searchTerm, status: [], priority: [] })}>Reset</Button>
          )}

          {/* Spacer */}
          <div className="hidden md:block flex-grow" />

          {/* Sorter */}
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button variant="outline" size="sm" className="h-9 w-full sm:w-auto justify-start">
                <SortAsc className="mr-2 h-4 w-4" />
                Sort by: {sortOptions.find(o => o.id === sortConfig?.key)?.label || 'Default'}
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end" className="w-[200px]">
              <DropdownMenuLabel>Sort by</DropdownMenuLabel>
              <DropdownMenuRadioGroup
                value={`${sortConfig?.key || 'default'}-${sortConfig?.direction || ''}`}
                onValueChange={(value) => {
                  if (value.startsWith('default')) {
                    setSort(null)
                  } else {
                    const [key, direction] = value.split('-')
                    setSort({ key: key as SortableField, direction: direction as 'asc' | 'desc' })
                  }
                }}
              >
                <DropdownMenuRadioItem value="default-">Default</DropdownMenuRadioItem>
                <DropdownMenuSeparator />
                {sortOptions.map(option => (
                  <React.Fragment key={option.id}>
                    <DropdownMenuRadioItem value={`${option.id}-desc`}>{option.label} (Desc)</DropdownMenuRadioItem>
                    <DropdownMenuRadioItem value={`${option.id}-asc`}>{option.label} (Asc)</DropdownMenuRadioItem>
                  </React.Fragment>
                ))}
              </DropdownMenuRadioGroup>
            </DropdownMenuContent>
          </DropdownMenu>

          {/* Group By Dropdown */}
          {viewMode !== 'calendar' && (
            <div className="flex items-center gap-2 shrink-0 w-full sm:w-auto">
              <DropdownMenu>
                <DropdownMenuTrigger asChild>
                  <Button variant="outline" size="sm" className="h-9 w-full justify-between">
                    Group by: {groupOptions.find(o => o.id === groupBy)?.label}
                    <ChevronsUpDown className="ml-2 h-4 w-4 shrink-0 opacity-50" />
                  </Button>
                </DropdownMenuTrigger>
                <DropdownMenuContent className="w-[180px]">
                  <DropdownMenuRadioGroup value={groupBy} onValueChange={setGroupBy}>
                    {groupOptions.map(option => (
                      <DropdownMenuRadioItem key={option.id} value={option.id}>
                        {option.label}
                      </DropdownMenuRadioItem>
                    ))}
                  </DropdownMenuRadioGroup>
                </DropdownMenuContent>
              </DropdownMenu>
            </div>
          )}
        </div>
      )
    }


    function CombinedFilter({
      filters,
      onFiltersChange,
      filterableFields,
    }: {
      filters: FilterConfig;
      onFiltersChange: (filters: FilterConfig) => void;
      filterableFields: { id: string; label: string; options: { id: string; label: string }[] }[];
    }) {
      const handleSelect = (fieldId: string, value: string) => {
        const currentValues = new Set(filters[fieldId] || []);
        currentValues.has(value) ? currentValues.delete(value) : currentValues.add(value);
        
        onFiltersChange({ ...filters, [fieldId]: Array.from(currentValues) });
      };

      const hasActiveFilters = filterableFields.some(field => (filters[field.id] || []).length > 0);

      const clearFilters = () => {
        const clearedFilters: Partial<FilterConfig> = {};
        filterableFields.forEach(field => {
          clearedFilters[field.id as keyof Omit<FilterConfig, 'searchTerm'>] = [];
        });
        onFiltersChange({ searchTerm: filters.searchTerm, ...clearedFilters });
      }

      return (
        <Command>
          <CommandInput placeholder="Filter by..." />
          <CommandList>
            <CommandEmpty>No results found.</CommandEmpty>
            
            {filterableFields.map((field, index) => (
              <React.Fragment key={field.id}>
                <CommandGroup heading={field.label}>
                  {field.options.map((option) => {
                const isSelected = (filters[field.id] || []).includes(option.id);
                return (
                  <CommandItem
                    key={option.id}
                    onSelect={() => handleSelect(field.id, option.id)}
                  >
                    <div
                      className={cn(
                        'mr-2 flex h-4 w-4 items-center justify-center rounded-sm border border-primary',
                        isSelected ? 'bg-primary text-primary-foreground' : 'opacity-50 [&_svg]:invisible'
                      )}
                    >
                      <Check className={cn('h-4 w-4')} />
                    </div>
                    <span>{option.label}</span>
                  </CommandItem>
                );
              })}
                </CommandGroup>
                {index < filterableFields.length - 1 && <CommandSeparator />}
              </React.Fragment>
            ))}

            {hasActiveFilters && (
              <>
                <CommandSeparator />
                <CommandGroup>
                  <CommandItem
                    onSelect={clearFilters}
                    className="justify-center text-center text-sm"
                  >
                    Clear filters
                  </CommandItem>
                </CommandGroup>
              </>
            )}
          </CommandList>
        </Command>
      )
    }
  src/features/dynamic-view/components/views/TableView.tsx: >-
    import { useRef, useLayoutEffect, useMemo } from 'react'

    import { gsap } from 'gsap'

    import { cn } from '@/lib/utils'

    import { 
      ArrowUpDown, 
      ArrowUp, 
      ArrowDown,
      ExternalLink
    } from 'lucide-react'

    import type { GenericItem } from '../../types'

    import type { SortableField } from '../../pages/DataDemo/types'

    import { EmptyState } from './EmptyState'

    import { useAppViewManager } from '@/hooks/useAppViewManager.hook'

    import {
      useSelectedItem,
    } from '../store/dataDemo.store'

    import { capitalize } from '@/lib/utils'

    import { AddDataItemCta } from './shared/AddDataItemCta'

    import { useDynamicView } from '../../DynamicViewContext'

    import { FieldRenderer } from '../shared/FieldRenderer'


    export function DataTableView({ data }: { data: GenericItem[] }) {
      const {
        sortConfig,
        setTableSort,
        groupBy,
        onItemSelect,
        itemId,
      } = useAppViewManager();
      const { config } = useDynamicView();
      const { tableView: viewConfig } = config;
      const selectedItem = useSelectedItem(itemId);

      const tableRef = useRef<HTMLTableElement>(null)
      const animatedItemsCount = useRef(0)

      useLayoutEffect(() => {
        if (tableRef.current) {
          // Only select item rows for animation, not group headers
          const newItems = Array.from( 
            tableRef.current.querySelectorAll('tbody tr')
          ).filter(tr => !(tr as HTMLElement).dataset.groupHeader)
           .slice(animatedItemsCount.current);
          gsap.fromTo(newItems,
            { y: 20, opacity: 0 },
            {
              duration: 0.5,
              y: 0,
              opacity: 1,
              stagger: 0.05,
              ease: "power2.out",
            },
          );
          animatedItemsCount.current = data.length;
        }
      }, [data]);

      const SortIcon = ({ field }: { field: string }) => {
        if (sortConfig?.key !== field) {
          return <ArrowUpDown className="w-4 h-4 opacity-50" />
        }
        if (sortConfig.direction === 'asc') {
          return <ArrowUp className="w-4 h-4 text-primary" />
        }
        if (sortConfig.direction === 'desc') {
          return <ArrowDown className="w-4 h-4 text-primary" />
        }
        return <ArrowUpDown className="w-4 h-4 opacity-50" />
      }

      const handleSortClick = (field: string) => {
        setTableSort(field as SortableField) // Cast for now
      }

      const groupedData = useMemo(() => {
        if (groupBy === 'none') return null;
        return (data as GenericItem[]).reduce((acc, item) => {
          const groupKey = item[groupBy as 'status' | 'priority' | 'category'] || 'N/A';
          if (!acc[groupKey]) {
            acc[groupKey] = [];
          }
          acc[groupKey].push(item);
          return acc;
        }, {} as Record<string, GenericItem[]>);
      }, [data, groupBy]);

      if (data.length === 0) {
        return <EmptyState />
      }

      return (
        <div className="relative overflow-hidden rounded-2xl border bg-card/50 backdrop-blur-sm">
          <div className="overflow-x-auto">
            <table ref={tableRef} className="w-full">
              <thead>
                <tr className="border-b border-border/50 bg-muted/20">
                  {viewConfig.columns.map(col => (
                    <th key={col.fieldId} className="text-left p-4 font-semibold text-sm">
                      {col.isSortable ? (
                        <button
                          onClick={() => handleSortClick(col.fieldId)}
                          className="flex items-center gap-2 hover:text-primary transition-colors"
                        >
                          {col.label}
                          <SortIcon field={col.fieldId} />
                        </button>
                      ) : (
                        <span>{col.label}</span>
                      )}
                    </th>
                  ))}
                  <th className="text-center p-4 font-semibold text-sm w-16">Actions</th>
                </tr>
              </thead>
              <tbody>
                {groupedData
                  ? Object.entries(groupedData).flatMap(([groupName, items]) => [
                      <tr key={groupName} data-group-header="true" className="sticky top-0 z-10">
                        <td colSpan={viewConfig.columns.length + 1} className="p-2 bg-muted/50 backdrop-blur-sm">
                          <div className="flex items-center gap-2">
                            <h3 className="font-semibold text-sm">{capitalize(groupName)}</h3>
                            <span className="text-xs px-2 py-0.5 bg-background rounded-full font-medium">{items.length}</span>
                          </div>
                        </td>
                      </tr>,
                      ...items.map(item => <TableRow key={item.id} item={item} isSelected={selectedItem?.id === item.id} onItemSelect={onItemSelect} />)
                    ])
                  : data.map(item => <TableRow key={item.id} item={item} isSelected={selectedItem?.id === item.id} onItemSelect={onItemSelect} />)
                }
                <AddDataItemCta viewMode='table' colSpan={viewConfig.columns.length + 1} />
              </tbody>
            </table>
          </div>
        </div>
      )
    }


    function TableRow({ item, isSelected, onItemSelect }: { item: GenericItem;
    isSelected: boolean; onItemSelect: (item: GenericItem) => void }) {
      const { config } = useDynamicView();
      return (
        <tr
          onClick={() => onItemSelect(item)}
          className={cn(
            "group border-b border-border/30 transition-all duration-200 cursor-pointer",
            "hover:bg-accent/20 hover:border-primary/20",
            isSelected && "bg-primary/5 border-primary/30"
          )}
        >
          {config.tableView.columns.map(col => (
            <td key={col.fieldId} className="p-4">
              <FieldRenderer item={item} fieldId={col.fieldId} options={{ showPercentage: true }} />
            </td>
          ))}
          {/* Actions Column */}
          <td className="p-4">
            <button 
              onClick={(e) => {
                e.stopPropagation()
                onItemSelect(item)
              }}
              className="flex items-center justify-center w-8 h-8 rounded-lg hover:bg-accent transition-colors"
              title="View details"
            >
              <ExternalLink className="w-4 h-4" />
            </button>
          </td>
        </tr>
      )
    }
  src/features/dynamic-view/components/views/KanbanView.tsx: >-
    import { useState, useEffect, Fragment } from "react";

    import {
      GripVertical,
      Plus,
    } from "lucide-react";

    import type { GenericItem } from '../../types'

    import { Card, CardContent } from "@/components/ui/card";

    import { cn } from "@/lib/utils";

    import { EmptyState } from "./EmptyState";

    import { useAppViewManager } from "@/hooks/useAppViewManager.hook";

    import { useDataDemoStore } from "../store/dataDemo.store";

    import { useDynamicView } from '../../DynamicViewContext'

    import { FieldRenderer } from '../shared/FieldRenderer'


    interface KanbanCardProps {
      item: GenericItem;
      isDragging: boolean;
    }


    function KanbanCard({ item, isDragging, ...props }: KanbanCardProps &
    React.HTMLAttributes<HTMLDivElement>) {
      const { onItemSelect } = useAppViewManager();
      const { config } = useDynamicView();
      const { kanbanView: viewConfig } = config;

      return (
        <Card
          {...props}
          data-draggable-id={item.id}
          onClick={() => onItemSelect(item)}
          className={cn(
            "cursor-pointer transition-all duration-300 border bg-card/60 dark:bg-neutral-800/60 backdrop-blur-sm hover:bg-card/70 dark:hover:bg-neutral-700/70 active:cursor-grabbing",
            isDragging && "opacity-50 ring-2 ring-primary ring-offset-2 ring-offset-background"
          )}
        >
          <CardContent className="p-5">
            <div className="space-y-4">
              <div className="flex items-start justify-between">
                <div className="font-semibold text-card-foreground dark:text-neutral-100 leading-tight flex-1 min-w-0">
                  <FieldRenderer item={item} fieldId={viewConfig.cardFields.titleField} />
                </div>
                <GripVertical className="w-5 h-5 text-muted-foreground/60 dark:text-neutral-400 cursor-grab flex-shrink-0" />
              </div>

              <div className="text-sm text-muted-foreground dark:text-neutral-300 leading-relaxed line-clamp-2">
                <FieldRenderer item={item} fieldId={viewConfig.cardFields.descriptionField} />
              </div>

              <div className="flex items-center justify-between pt-2 border-t border-border/30 dark:border-neutral-700/30">
                {/* 
                  The footer is a bit tricky. The original has a left and right side.
                  For a generic component, let's just render them in a row.
                  A more advanced config could specify 'left' and 'right' arrays.
                  For now, this is a good simplification.
                */}
                <div className="flex items-center justify-between w-full text-muted-foreground/80 dark:text-neutral-400">
                  {viewConfig.cardFields.footerFields.map(fieldId => (
                    <FieldRenderer key={fieldId} item={item} fieldId={fieldId} options={{ compact: true, avatarClassName: 'w-8 h-8' }} />
                  ))}
                </div>
              </div>
            </div>
          </CardContent>
        </Card>
      );
    }


    interface DataKanbanViewProps {
      data: Record<string, GenericItem[]>;
    }


    export function DataKanbanView({ data }: DataKanbanViewProps) {
      const [columns, setColumns] = useState(data);
      const [draggedItemId, setDraggedItemId] = useState<string | null>(null);
      const [dropIndicator, setDropIndicator] = useState<{ columnId: string; index: number } | null>(null);
      const { groupBy } = useAppViewManager();
      const updateItem = useDataDemoStore(s => s.updateItem);

      useEffect(() => {
        setColumns(data);
      }, [data]);

      const handleDragStart = (e: React.DragEvent<HTMLDivElement>, item: GenericItem, sourceColumnId: string) => {
        e.dataTransfer.effectAllowed = 'move';
        e.dataTransfer.setData('text/plain', JSON.stringify({ itemId: item.id, sourceColumnId }));
        setDraggedItemId(item.id);
      };

      const getDropIndicatorIndex = (e: React.DragEvent, elements: HTMLElement[]) => {
        const mouseY = e.clientY;
        let closestIndex = elements.length;

        elements.forEach((el, index) => {
          const { top, height } = el.getBoundingClientRect();
          const offset = mouseY - (top + height / 2);
          if (offset < 0 && index < closestIndex) {
            closestIndex = index;
          }
        });
        return closestIndex;
      };

      const handleDragOverCardsContainer = (e: React.DragEvent<HTMLDivElement>, columnId: string) => {
        e.preventDefault();
        const container = e.currentTarget;
        const draggableElements = Array.from(container.querySelectorAll('[data-draggable-id]')) as HTMLElement[];
        const index = getDropIndicatorIndex(e, draggableElements);

        if (dropIndicator?.columnId === columnId && dropIndicator.index === index) return;
        setDropIndicator({ columnId, index });
      };

      const handleDrop = (e: React.DragEvent<HTMLDivElement>, targetColumnId: string) => {
        e.preventDefault();
        setDropIndicator(null);
        try {
          const { itemId, sourceColumnId } = JSON.parse(e.dataTransfer.getData('text/plain'));

          const droppedItem = columns[sourceColumnId]?.find(i => i.id === itemId);
          if (!droppedItem) return;

          // Update local state for immediate feedback
          setColumns(prev => {
            const newColumns = { ...prev };
            const sourceCol = prev[sourceColumnId].filter(i => i.id !== itemId);

            if (sourceColumnId === targetColumnId) {
              const dropIndex = dropIndicator?.columnId === targetColumnId ? dropIndicator.index : sourceCol.length;
              sourceCol.splice(dropIndex, 0, droppedItem);
              newColumns[sourceColumnId] = sourceCol;
            } else {
              const targetCol = [...prev[targetColumnId]];
              const dropIndex = dropIndicator?.columnId === targetColumnId ? dropIndicator.index : targetCol.length;
              targetCol.splice(dropIndex, 0, droppedItem);
              
              newColumns[sourceColumnId] = sourceCol;
              newColumns[targetColumnId] = targetCol;
            }
            return newColumns;
          });
          
          // Persist change to global store. The groupBy value tells us which property to update.
          if (groupBy !== 'none' && sourceColumnId !== targetColumnId) {
            updateItem(itemId, { [groupBy]: targetColumnId } as Partial<GenericItem>);
          }

        } catch (err) {
          console.error("Failed to parse drag data", err)
        } finally {
          setDraggedItemId(null);
        }
      };

      const handleDragEnd = () => {
        setDraggedItemId(null);
        setDropIndicator(null);
      };

      const initialColumns = Object.entries(data);

      if (!initialColumns || initialColumns.length === 0) {
        return <EmptyState />;
      }

      const statusColors: Record<string, string> = {
        active: "bg-blue-500", pending: "bg-yellow-500", completed: "bg-green-500", archived: "bg-gray-500",
        low: "bg-green-500", medium: "bg-blue-500", high: "bg-orange-500", critical: "bg-red-500",
      };

      const DropIndicator = () => <div className="h-1 my-2 rounded-full bg-primary/60" />;

      return (
        <div className="flex items-start gap-6 pb-4 overflow-x-auto -mx-6 px-6">
          {Object.entries(columns).map(([columnId, items]) => (
            <div
              key={columnId}
              className={cn(
                "w-80 flex-shrink-0 bg-card/20 dark:bg-neutral-900/20 backdrop-blur-xl rounded-3xl p-5 border border-border dark:border-neutral-700/50 transition-all duration-300",
                dropIndicator?.columnId === columnId && "bg-primary/10 border-primary/30"
              )}
            >
              <div className="flex items-center justify-between mb-6">
                <div className="flex items-center gap-3 min-w-0">
                  <div className={cn("w-3.5 h-3.5 rounded-full", statusColors[columnId] || "bg-muted-foreground")} />
                  <h3 className="font-semibold text-card-foreground dark:text-neutral-100 capitalize truncate">{columnId}</h3>
                  <span className="text-sm font-medium text-muted-foreground bg-background/50 rounded-full px-2 py-0.5">{items.length}</span>
                </div>
                <button className="p-1 rounded-full bg-card/30 dark:bg-neutral-800/30 hover:bg-card/50 dark:hover:bg-neutral-700/50 transition-colors">
                  <Plus className="w-4 h-4 text-muted-foreground dark:text-neutral-300" />
                </button>
              </div>

              <div
                onDragOver={(e) => handleDragOverCardsContainer(e, columnId)}
                onDrop={(e) => handleDrop(e, columnId)}
                onDragLeave={() => setDropIndicator(null)}
                className="space-y-4 min-h-[100px]"
              >
                {items.map((item, index) => (
                  <Fragment key={item.id}>
                    {dropIndicator?.columnId === columnId && dropIndicator.index === index && (
                      <DropIndicator />
                    )}
                    <KanbanCard
                      item={item}
                      isDragging={draggedItemId === item.id}
                      draggable
                      onDragStart={(e) => handleDragStart(e, item, columnId)}
                      onDragEnd={handleDragEnd}
                    />
                  </Fragment>
                ))}
                {dropIndicator?.columnId === columnId && dropIndicator.index === items.length && (
                  <DropIndicator />
                )}
              </div>
            </div>
          ))}
        </div>
      );
    }
  src/components/ui/timeline.tsx: >-
    "use client";


    import * as React from "react";

    import { cva, type VariantProps } from "class-variance-authority";

    import { cn } from "@/lib/utils";

    import { ScrollArea } from "@/components/ui/scroll-area";

    import {
      Check,
      Clock,
      AlertCircle,
      X,
      Calendar,
      User,
      MapPin,
      MessageSquare,
      Award,
      Briefcase,
      GraduationCap,
      Heart,
    } from "lucide-react";


    const timelineVariants = cva("relative flex flex-col", {
      variants: {
        variant: {
          default: "gap-4",
          compact: "gap-2",
          spacious: "gap-8",
        },
        orientation: {
          vertical: "flex-col",
          horizontal: "flex-row",
        },
      },
      defaultVariants: {
        variant: "default",
        orientation: "vertical",
      },
    });


    const timelineItemVariants = cva("relative flex gap-3 pb-2", {
      variants: {
        orientation: {
          vertical: "flex-row",
          horizontal: "flex-col min-w-64 shrink-0",
        },
      },
      defaultVariants: {
        orientation: "vertical",
      },
    });


    const timelineConnectorVariants = cva("bg-border", {
      variants: {
        orientation: {
          vertical: "absolute left-3 top-9 h-full w-px",
          horizontal: "absolute top-3 left-8 w-full h-px",
        },
        status: {
          default: "bg-border",
          completed: "bg-primary",
          active: "bg-primary",
          pending: "bg-muted-foreground/30",
          error: "bg-destructive",
        },
      },
      defaultVariants: {
        orientation: "vertical",
        status: "default",
      },
    });


    const timelineIconVariants = cva(
      "flex h-6 w-6 shrink-0 items-center justify-center rounded-full border-2 bg-background text-xs font-medium",
      {
        variants: {
          status: {
            default: "border-border text-muted-foreground",
            completed: "border-primary bg-primary text-primary-foreground",
            active: "border-primary bg-background text-primary animate-pulse",
            pending: "border-muted-foreground/30 text-muted-foreground",
            error: "border-destructive bg-destructive text-destructive-foreground",
          },
        },
        defaultVariants: {
          status: "default",
        },
      },
    );


    export interface TimelineItem {
      id: string;
      title: string;
      description?: string;
      timestamp?: string | Date;
      status?: "default" | "completed" | "active" | "pending" | "error";
      icon?: React.ReactNode;
      content?: React.ReactNode;
      metadata?: Record<string, any>;
    }


    export interface TimelineProps extends VariantProps<typeof timelineVariants>
    {
      items: TimelineItem[];
      className?: string;
      showConnectors?: boolean;
      showTimestamps?: boolean;
      timestampPosition?: "top" | "bottom" | "inline";
    }


    function getStatusIcon(status: TimelineItem["status"]) {
      switch (status) {
        case "completed":
          return <Check className="h-3 w-3" />;
        case "active":
          return <Clock className="h-3 w-3" />;
        case "pending":
          return <Clock className="h-3 w-3" />;
        case "error":
          return <X className="h-3 w-3" />;
        default:
          return <div className="h-2 w-2 rounded-full bg-current" />;
      }
    }


    function formatTimestamp(timestamp: string | Date): string {
      if (!timestamp) return "";
      const date = typeof timestamp === "string" ? new Date(timestamp) : timestamp;
      return date.toLocaleDateString("en-US", {
        month: "short",
        day: "numeric",
        year: "numeric",
        hour: "2-digit",
        minute: "2-digit",
      });
    }


    export function Timeline({
      items,
      className,
      variant,
      orientation = "vertical",
      showConnectors = true,
      showTimestamps = true,
      timestampPosition = "top",
      ...props
    }: TimelineProps) {
      const timelineContent = (
        <div
          className={cn(
            timelineVariants({ variant, orientation }),
            orientation === "horizontal" ? "pb-4" : "",
          )}
        >
          {items.map((item, index) => (
            <div
              key={item.id}
              className={cn(timelineItemVariants({ orientation }))}
            >
              {/* Connector Line */}
              {showConnectors && index < items.length - 1 && (
                <div
                  className={cn(
                    timelineConnectorVariants({
                      orientation,
                      status: item.status,
                    }),
                  )}
                />
              )}

              {/* Icon */}
              <div className="relative z-10 flex shrink-0">
                <div className={cn(timelineIconVariants({ status: item.status }))}>
                  {item.icon || getStatusIcon(item.status)}
                </div>
              </div>

              {/* Content */}
              <div className="flex min-w-0 flex-1 flex-col gap-2">
                {/* Timestamp - Top */}
                {showTimestamps &&
                  timestampPosition === "top" &&
                  item.timestamp && (
                    <time className="text-xs text-muted-foreground">
                      {formatTimestamp(item.timestamp)}
                    </time>
                  )}

                {/* Title and Inline Timestamp */}
                <div className="flex items-start justify-between gap-2">
                  <h3 className="font-medium leading-tight">{item.title}</h3>
                  {showTimestamps &&
                    timestampPosition === "inline" &&
                    item.timestamp && (
                      <time className="shrink-0 text-xs text-muted-foreground">
                        {formatTimestamp(item.timestamp)}
                      </time>
                    )}
                </div>

                {/* Description */}
                {item.description && (
                  <p className="text-sm text-muted-foreground leading-relaxed">
                    {item.description}
                  </p>
                )}

                {/* Custom Content */}
                {item.content && <div className="mt-3">{item.content}</div>}

                {/* Timestamp - Bottom */}
                {showTimestamps &&
                  timestampPosition === "bottom" &&
                  item.timestamp && (
                    <time className="text-xs text-muted-foreground">
                      {formatTimestamp(item.timestamp)}
                    </time>
                  )}
              </div>
            </div>
          ))}
        </div>
      );

      if (orientation === "horizontal") {
        return (
          <ScrollArea
            orientation="horizontal"
            className={cn("w-full", className)}
            {...props}
          >
            {timelineContent}
          </ScrollArea>
        );
      }

      return (
        <div className={className} {...props}>
          {timelineContent}
        </div>
      );
    }


    // Example Components for Documentation

    export function BasicTimelineExample() {
      const items: TimelineItem[] = [
        {
          id: "1",
          title: "Project Started",
          description: "Initial project setup and planning phase",
          timestamp: new Date("2024-01-15T09:00:00"),
          status: "completed",
        },
        {
          id: "2",
          title: "Development Phase",
          description: "Core features implementation in progress",
          timestamp: new Date("2024-02-01T10:30:00"),
          status: "active",
        },
        {
          id: "3",
          title: "Testing & QA",
          description: "Quality assurance and testing phase",
          timestamp: new Date("2024-02-15T14:00:00"),
          status: "pending",
        },
        {
          id: "4",
          title: "Launch",
          description: "Production deployment and launch",
          timestamp: new Date("2024-03-01T16:00:00"),
          status: "pending",
        },
      ];

      return <Timeline items={items} />;
    }


    export function TimelineVariantsExample() {
      const items: TimelineItem[] = [
        {
          id: "1",
          title: "Task Completed",
          description: "Successfully finished the assigned task",
          status: "completed",
        },
        {
          id: "2",
          title: "In Progress",
          description: "Currently working on this item",
          status: "active",
        },
        {
          id: "3",
          title: "Upcoming",
          description: "Scheduled for later",
          status: "pending",
        },
      ];

      return (
        <div className="space-y-8">
          <div>
            <h3 className="mb-4 text-sm font-medium">Default</h3>
            <Timeline items={items} variant="default" />
          </div>
          <div>
            <h3 className="mb-4 text-sm font-medium">Compact</h3>
            <Timeline items={items} variant="compact" />
          </div>
          <div>
            <h3 className="mb-4 text-sm font-medium">Spacious</h3>
            <Timeline items={items} variant="spacious" />
          </div>
        </div>
      );
    }


    export function HorizontalTimelineExample() {
      const items: TimelineItem[] = [
        {
          id: "1",
          title: "Planning",
          description: "Project planning and research",
          status: "completed",
        },
        {
          id: "2",
          title: "Design",
          description: "UI/UX design phase",
          status: "completed",
        },
        {
          id: "3",
          title: "Development",
          description: "Core development work",
          status: "active",
        },
        {
          id: "4",
          title: "Testing",
          description: "Quality assurance",
          status: "pending",
        },
        {
          id: "5",
          title: "Launch",
          description: "Production release",
          status: "pending",
        },
      ];

      return <Timeline items={items} orientation="horizontal" />;
    }


    export function TimelineWithCustomIconsExample() {
      const items: TimelineItem[] = [
        {
          id: "1",
          title: "Account Created",
          description: "Welcome to our platform!",
          timestamp: new Date("2024-01-01T08:00:00"),
          status: "completed",
          icon: <User className="h-3 w-3" />,
        },
        {
          id: "2",
          title: "Profile Updated",
          description: "Personal information has been updated",
          timestamp: new Date("2024-01-02T14:30:00"),
          status: "completed",
          icon: <User className="h-3 w-3" />,
        },
        {
          id: "3",
          title: "First Order Placed",
          description: "Order #12345 has been placed successfully",
          timestamp: new Date("2024-01-03T11:15:00"),
          status: "completed",
          icon: <Briefcase className="h-3 w-3" />,
        },
        {
          id: "4",
          title: "Delivery Scheduled",
          description: "Your order is out for delivery",
          timestamp: new Date("2024-01-04T09:45:00"),
          status: "active",
          icon: <MapPin className="h-3 w-3" />,
        },
      ];

      return <Timeline items={items} />;
    }


    export function TimelineWithContentExample() {
      const items: TimelineItem[] = [
        {
          id: "1",
          title: "Code Review Completed",
          description: "Pull request #123 has been reviewed",
          timestamp: new Date("2024-01-01T10:00:00"),
          status: "completed",
          content: (
            <div className="rounded-md bg-muted p-3 text-sm">
              <p className="font-medium">Changes approved by John Doe</p>
              <p className="text-muted-foreground">
                3 files changed, +45 -12 lines
              </p>
            </div>
          ),
        },
        {
          id: "2",
          title: "Build Failed",
          description: "CI/CD pipeline encountered errors",
          timestamp: new Date("2024-01-01T11:30:00"),
          status: "error",
          content: (
            <div className="rounded-md bg-destructive/10 p-3 text-sm">
              <p className="font-medium text-destructive">Build #456 failed</p>
              <p className="text-muted-foreground">Syntax error in main.tsx:45</p>
            </div>
          ),
        },
        {
          id: "3",
          title: "Issue Assigned",
          description: "Bug report assigned to development team",
          timestamp: new Date("2024-01-01T15:20:00"),
          status: "active",
          content: (
            <div className="rounded-md bg-primary/10 p-3 text-sm">
              <p className="font-medium">Issue #789: Login form validation</p>
              <p className="text-muted-foreground">
                Priority: High | Assigned to: Jane Smith
              </p>
            </div>
          ),
        },
      ];

      return <Timeline items={items} />;
    }


    export function ProjectTimelineExample() {
      const items: TimelineItem[] = [
        {
          id: "1",
          title: "Project Kickoff",
          description: "Initial meeting with stakeholders and team members",
          timestamp: new Date("2024-01-15T09:00:00"),
          status: "completed",
          icon: <Briefcase className="h-3 w-3" />,
          content: (
            <div className="space-y-2">
              <div className="flex gap-2 text-sm">
                <span className="font-medium">Attendees:</span>
                <span className="text-muted-foreground">5 team members</span>
              </div>
              <div className="flex gap-2 text-sm">
                <span className="font-medium">Duration:</span>
                <span className="text-muted-foreground">2 hours</span>
              </div>
            </div>
          ),
        },
        {
          id: "2",
          title: "Requirements Gathering",
          description:
            "Detailed analysis of project requirements and specifications",
          timestamp: new Date("2024-01-20T14:00:00"),
          status: "completed",
          icon: <MessageSquare className="h-3 w-3" />,
        },
        {
          id: "3",
          title: "Design Phase",
          description: "UI/UX design and wireframe creation",
          timestamp: new Date("2024-02-01T10:00:00"),
          status: "active",
          icon: <Award className="h-3 w-3" />,
          content: (
            <div className="rounded-md border border-primary/20 bg-primary/5 p-3 text-sm">
              <p className="font-medium">Current Progress: 60%</p>
              <p className="text-muted-foreground">
                Expected completion: Feb 10, 2024
              </p>
            </div>
          ),
        },
        {
          id: "4",
          title: "Development Sprint 1",
          description: "Core functionality implementation",
          timestamp: new Date("2024-02-15T09:00:00"),
          status: "pending",
          icon: <GraduationCap className="h-3 w-3" />,
        },
        {
          id: "5",
          title: "Testing & QA",
          description: "Quality assurance and bug fixes",
          timestamp: new Date("2024-03-01T09:00:00"),
          status: "pending",
          icon: <AlertCircle className="h-3 w-3" />,
        },
      ];

      return <Timeline items={items} variant="spacious" />;
    }


    export function OrderTrackingTimelineExample() {
      const items: TimelineItem[] = [
        {
          id: "1",
          title: "Order Placed",
          description: "Your order has been successfully placed",
          timestamp: new Date("2024-01-01T10:30:00"),
          status: "completed",
          icon: <Check className="h-3 w-3" />,
        },
        {
          id: "2",
          title: "Payment Confirmed",
          description: "Payment has been processed successfully",
          timestamp: new Date("2024-01-01T10:35:00"),
          status: "completed",
          icon: <Check className="h-3 w-3" />,
        },
        {
          id: "3",
          title: "Order Processing",
          description: "Your order is being prepared for shipment",
          timestamp: new Date("2024-01-01T14:20:00"),
          status: "active",
          icon: <Clock className="h-3 w-3" />,
        },
        {
          id: "4",
          title: "Shipped",
          description: "Your order has been shipped",
          status: "pending",
          icon: <MapPin className="h-3 w-3" />,
        },
        {
          id: "5",
          title: "Delivered",
          description: "Package delivered to your address",
          status: "pending",
          icon: <Heart className="h-3 w-3" />,
        },
      ];

      return <Timeline items={items} timestampPosition="inline" />;
    }


    export function CompactTimelineExample() {
      const items: TimelineItem[] = [
        {
          id: "1",
          title: "Login",
          timestamp: new Date("2024-01-01T08:30:00"),
          status: "completed",
        },
        {
          id: "2",
          title: "File uploaded",
          timestamp: new Date("2024-01-01T08:35:00"),
          status: "completed",
        },
        {
          id: "3",
          title: "Processing started",
          timestamp: new Date("2024-01-01T08:40:00"),
          status: "active",
        },
        {
          id: "4",
          title: "Processing complete",
          status: "pending",
        },
      ];

      return (
        <Timeline
          items={items}
          variant="compact"
          timestampPosition="inline"
          showTimestamps={true}
        />
      );
    }


    export function ExtendedHorizontalTimelineExample() {
      const items: TimelineItem[] = [
        {
          id: "1",
          title: "Research",
          description: "Market research and analysis",
          timestamp: new Date("2024-01-01T09:00:00"),
          status: "completed",
          icon: <MessageSquare className="h-3 w-3" />,
        },
        {
          id: "2",
          title: "Planning",
          description: "Project planning and roadmap",
          timestamp: new Date("2024-01-05T10:00:00"),
          status: "completed",
          icon: <Calendar className="h-3 w-3" />,
        },
        {
          id: "3",
          title: "Design",
          description: "UI/UX design and wireframes",
          timestamp: new Date("2024-01-10T11:00:00"),
          status: "completed",
          icon: <Award className="h-3 w-3" />,
        },
        {
          id: "4",
          title: "Prototype",
          description: "Interactive prototype development",
          timestamp: new Date("2024-01-15T14:00:00"),
          status: "completed",
          icon: <Briefcase className="h-3 w-3" />,
        },
        {
          id: "5",
          title: "Development",
          description: "Core feature implementation",
          timestamp: new Date("2024-01-20T09:00:00"),
          status: "active",
          icon: <GraduationCap className="h-3 w-3" />,
        },
        {
          id: "6",
          title: "Testing",
          description: "Quality assurance and testing",
          timestamp: new Date("2024-02-01T10:00:00"),
          status: "pending",
          icon: <AlertCircle className="h-3 w-3" />,
        },
        {
          id: "7",
          title: "Review",
          description: "Stakeholder review and feedback",
          timestamp: new Date("2024-02-05T15:00:00"),
          status: "pending",
          icon: <User className="h-3 w-3" />,
        },
        {
          id: "8",
          title: "Deploy",
          description: "Production deployment",
          timestamp: new Date("2024-02-10T16:00:00"),
          status: "pending",
          icon: <MapPin className="h-3 w-3" />,
        },
        {
          id: "9",
          title: "Launch",
          description: "Product launch and marketing",
          timestamp: new Date("2024-02-15T09:00:00"),
          status: "pending",
          icon: <Heart className="h-3 w-3" />,
        },
      ];

      return <Timeline items={items} orientation="horizontal" variant="spacious" />;
    }


    export {
      timelineVariants,
      timelineItemVariants,
      timelineConnectorVariants,
      timelineIconVariants,
    };
  src/hooks/useScrollToBottom.hook.ts: |-
    import { useState, useCallback } from 'react';

    export function useScrollToBottom(
      contentRef: React.RefObject<HTMLDivElement>
    ) {
      const [showScrollToBottom, setShowScrollToBottom] = useState(false);

      const handleScroll = useCallback((e: React.UIEvent<HTMLDivElement>) => {
        if (!contentRef.current) return;
        const { scrollTop, scrollHeight, clientHeight } = contentRef.current;
        // Show button if scrolled down more than 200px, and there's more than 200px left to scroll
        setShowScrollToBottom(scrollTop > 200 && scrollTop < scrollHeight - clientHeight - 200);
      }, [contentRef]);

      const scrollToBottom = () => {
        contentRef.current?.scrollTo({
          top: contentRef.current.scrollHeight,
          behavior: 'smooth'
        });
      };

      return { showScrollToBottom, handleScroll, scrollToBottom };
    }
  src/hooks/useRightPaneContent.hook.tsx: >-
    import { useMemo, useCallback } from 'react';

    import { useNavigate, useParams } from 'react-router-dom';

    import {
      LayoutDashboard,
      Settings,
      Component,
      Bell,
      SlidersHorizontal,
      Database,
      MessageSquare,
    } from 'lucide-react';


    import { DashboardContent } from "@/pages/Dashboard";

    import { SettingsContent } from "@/features/settings/SettingsContent";

    import { ToasterDemo } from "@/pages/ToasterDemo";

    import { NotificationsPage } from "@/pages/Notifications";

    import DataDemoPage from "@/pages/DataDemo";

    import { DataDetailPanel } from
    "@/pages/DataDemo/components/DataDetailPanel";

    import { mockDataItems } from "@/pages/DataDemo/data/mockData";

    import { MessagingContent } from
    "@/pages/Messaging/components/MessagingContent";

    import type { AppShellState } from '@/store/appShell.store';


    export function useRightPaneContent(sidePaneContent:
    AppShellState['sidePaneContent']) {
      const navigate = useNavigate();
      const { itemId, conversationId } = useParams<{ itemId: string; conversationId: string }>();

      const staticContentMap = useMemo(() => ({
        main: {
          title: "Dashboard",
          icon: LayoutDashboard,
          page: "dashboard",
          content: <DashboardContent />,
        },
        settings: {
          title: "Settings",
          icon: Settings,
          page: "settings",
          content: <div className="p-6"><SettingsContent /></div>,
        },
        toaster: {
          title: "Toaster Demo",
          icon: Component,
          page: "toaster",
          content: <ToasterDemo />,
        },
        notifications: {
          title: "Notifications",
          icon: Bell,
          page: "notifications",
          content: <NotificationsPage />,
        },
        dataDemo: {
          title: "Data Showcase",
          icon: Database,
          page: "data-demo",
          content: <DataDemoPage />,
        },
        details: {
          title: "Details Panel",
          icon: SlidersHorizontal,
          content: (
            <div className="p-6">
              <p className="text-muted-foreground">
                This is the side pane. It can be used to display contextual
                information, forms, or actions related to the main content.
              </p>
            </div>
          ),
        },
      }), []);

      const contentMap = useMemo(() => ({
        ...staticContentMap,
        messaging: {
          title: "Conversation",
          icon: MessageSquare,
          page: "messaging",
          content: <MessagingContent conversationId={conversationId} />,
        },
      }), [conversationId, staticContentMap]);

      const selectedItem = useMemo(() => {
        if (!itemId) return null;
        return mockDataItems.find(item => item.id === itemId) ?? null;
      }, [itemId]);

      const { meta, content } = useMemo(() => {
        if (sidePaneContent === 'dataItem' && selectedItem) {
          return {
            meta: { title: "Item Details", icon: Database, page: `data-demo/${itemId}` },
            content: <DataDetailPanel item={selectedItem} />,
          };
        }
        const mappedContent = contentMap[sidePaneContent as keyof typeof contentMap] || contentMap.details;
        return {
          meta: mappedContent,
          content: mappedContent.content,
        };
      }, [sidePaneContent, selectedItem, contentMap, itemId]);

      return { meta, content };
    }
  src/pages/Messaging/data/mockData.ts: >-
    import type { Contact, Task, Message, ActivityEvent, Note, Assignee,
    TaskStatus, TaskPriority, Channel, JourneyPointType } from '../types';

    import { faker } from '@faker-js/faker';


    // --- ASSIGNEES ---

    export const mockAssignees: Assignee[] = [
      { id: 'user-1', name: 'You', avatar: `https://avatar.vercel.sh/you.png`, type: 'human' },
      { id: 'user-2', name: 'Alex Johnson', avatar: `https://avatar.vercel.sh/alex.png`, type: 'human' },
      { id: 'user-3', name: 'Samira Kumar', avatar: `https://avatar.vercel.sh/samira.png`, type: 'human' },
      { id: 'user-4', name: 'Casey Lee', avatar: `https://avatar.vercel.sh/casey.png`, type: 'human' },
      { id: 'user-5', name: 'Jordan Rivera', avatar: `https://avatar.vercel.sh/jordan.png`, type: 'human' },
      { id: 'user-ai-1', name: 'AI Assistant', avatar: `https://avatar.vercel.sh/ai.png`, type: 'ai' },
    ];


    // --- HELPERS ---

    const generateNotes = (contactName: string): Note[] => [
      { id: `note-${faker.string.uuid()}`, content: `Initial discovery call with ${contactName}. Seemed very interested in our enterprise package.`, createdAt: faker.date.past().toISOString() },
      { id: `note-${faker.string.uuid()}`, content: `Followed up via email with pricing details.`, createdAt: faker.date.recent().toISOString() },
    ];


    const generateActivity = (contactName: string): ActivityEvent[] => [
      { id: `act-${faker.string.uuid()}`, type: 'email', content: `Sent follow-up email regarding pricing.`, timestamp: faker.date.past().toISOString() },
      { id: `act-${faker.string.uuid()}`, type: 'call', content: `Had a 30-minute discovery call with ${contactName}.`, timestamp: faker.date.recent().toISOString() },
      { id: `act-${faker.string.uuid()}`, type: 'meeting', content: `Scheduled a demo for next week.`, timestamp: faker.date.soon().toISOString() },
    ];


    // --- COMPANIES ---

    const mockCompanies = Array.from({ length: 25 }, () =>
    faker.company.name());


    // --- CONTACTS ---

    export const mockContacts: Contact[] = Array.from({ length: 80 }, (_, i) =>
    {
        const firstName = faker.person.firstName();
        const lastName = faker.person.lastName();
        const name = `${firstName} ${lastName}`;
        const company = faker.helpers.arrayElement(mockCompanies);
        return {
            id: `contact-${i + 1}`,
            name,
            avatar: `https://avatar.vercel.sh/${firstName.toLowerCase()}${lastName.toLowerCase()}.png`,
            online: faker.datatype.boolean(),
            tags: faker.helpers.arrayElements(['VIP', 'New Lead', 'Returning Customer', 'Support Request', 'High Value'], { min: 1, max: 3 }),
            email: faker.internet.email({ firstName, lastName }),
            phone: faker.phone.number(),
            lastSeen: faker.datatype.boolean() ? 'online' : `${faker.number.int({ min: 2, max: 59 })} minutes ago`,
            company,
            role: faker.person.jobTitle(),
            activity: generateActivity(name),
            notes: generateNotes(name),
        };
    });


    // --- MESSAGE GENERATOR ---

    const generateMessages = (messageCount: number, contactName: string,
    journeyPath: JourneyPointType[]): Message[] => {
      const messages: Message[] = [];
      const now = new Date();
      
      const journeyPointsWithIndices = journeyPath.map((point, index) => ({
          point,
          index: Math.floor((messageCount / journeyPath.length) * (index + Math.random() * 0.8))
      }));

      for (let i = 0; i < messageCount; i++) {
        const random = Math.random();
        let sender: Message['sender'] = 'contact';
        let type: Message['type'] = 'comment';
        let text = faker.lorem.sentence();
        let userId: string | undefined = undefined;

        if (random > 0.85) { // Internal Note
          sender = 'user';
          type = 'note';
          const user = faker.helpers.arrayElement(mockAssignees.filter(u => u.type === 'human'));
          userId = user.id;
          text = `Internal note from ${user.name}: ${faker.lorem.sentence()}`;
        } else if (random > 0.7) { // System message
          sender = 'system';
          type = 'system';
          text = faker.helpers.arrayElement(['Task status changed to "in-progress"', 'Task assigned to Alex Johnson', 'User joined the conversation']);
        } else if (random > 0.35) { // User comment
          sender = 'user';
          type = 'comment';
          userId = 'user-1'; // "You"
          text = faker.lorem.sentence();
        }
        
        const journeyPointInfo = journeyPointsWithIndices.find(jp => jp.index === i);

        messages.push({
          id: `msg-${faker.string.uuid()}`,
          text,
          timestamp: new Date(now.getTime() - (messageCount - i) * 60 * 60 * 100).toISOString(),
          sender,
          type,
          read: i < messageCount - faker.number.int({min: 0, max: 5}),
          userId,
          journeyPoint: journeyPointInfo?.point
        });
      }
      
      // Ensure the last message is from the contact for preview purposes
      messages[messages.length - 1] = {
        ...messages[messages.length-1],
        sender: 'contact',
        type: 'comment',
        text: `Hey! This is the latest message from ${contactName}. ${faker.lorem.sentence()}`,
        userId: undefined
      };
      return messages.sort((a, b) => new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime());
    };


    // --- TASK GENERATOR ---

    const generateTasks = (count: number): Task[] => {
        const tasks: Task[] = [];
        const statuses: TaskStatus[] = ['open', 'in-progress', 'done', 'snoozed'];
        const priorities: TaskPriority[] = ['none', 'low', 'medium', 'high'];
        const channels: Channel[] = ['whatsapp', 'instagram', 'facebook', 'email'];
        const possibleJourneys: JourneyPointType[][] = [
            ['Inquiry', 'Consult', 'Quote', 'Order', 'Payment', 'Shipped', 'Delivered', 'Review'],
            ['Inquiry', 'Consult', 'Quote', 'Order', 'Payment', 'Shipped', 'Delivered', 'Follow-up'],
            ['Inquiry', 'Consult', 'Follow-up'],
            ['Inquiry', 'Consult', 'Quote', 'Order', 'Canceled'],
            ['Consult', 'Order', 'Payment', 'Shipped', 'Delivered', 'Complain', 'Refund'],
            ['Consult', 'Order', 'Payment', 'Shipped', 'Complain', 'Follow-up'],
            ['Order', 'Delivered', 'Review', 'Reorder', 'Delivered'],
            ['Complain', 'Follow-up', 'Refund'],
            ['Quote', 'Follow-up', 'Order', 'Payment', 'Shipped', 'Delivered'],
            ['Inquiry', 'Quote', 'Order', 'Payment', 'Shipped', 'Canceled', 'Refund'],
            ['Consult', 'Follow-up'],
            ['Complain'],
            ['Order', 'Delivered'],
        ];

        for (let i = 0; i < count; i++) {
            const contact = faker.helpers.arrayElement(mockContacts);
            const status = faker.helpers.arrayElement(statuses);
            const unreadCount = status === 'open' || status === 'in-progress' ? faker.number.int({ min: 0, max: 8 }) : 0;
            const messageCount = faker.number.int({ min: 10, max: 150 });
            const journey = faker.helpers.arrayElement(possibleJourneys);
            const messages = generateMessages(messageCount, contact.name, journey);
            const assignee = faker.datatype.boolean(0.8) ? faker.helpers.arrayElement(mockAssignees) : null;

            const task: Task = {
                id: `task-${i + 1}`,
                title: faker.lorem.sentence({ min: 3, max: 7 }),
                contactId: contact.id,
                channel: faker.helpers.arrayElement(channels),
                unreadCount,
                messages,
                get lastActivity() { return this.messages[this.messages.length - 1]; },
                status,
                assigneeId: assignee?.id || null,
                dueDate: faker.datatype.boolean() ? faker.date.future().toISOString() : null,
                priority: faker.helpers.arrayElement(priorities),
                tags: faker.helpers.arrayElements(['onboarding', 'pricing', 'bug-report', 'urgent', 'tech-support'], faker.number.int({min: 0, max: 2})),
                aiSummary: {
                    sentiment: faker.helpers.arrayElement(['positive', 'negative', 'neutral']),
                    summaryPoints: Array.from({ length: 3 }, () => faker.lorem.sentence()),
                    suggestedReplies: Array.from({ length: 2 }, () => faker.lorem.words({ min: 3, max: 6})),
                },
                activeHandlerId: faker.helpers.arrayElement([assignee?.id, null, 'user-ai-1']),
            };
            tasks.push(task);
        }
        return tasks;
    }


    export const mockTasks: Task[] = generateTasks(200);
  src/pages/DataDemo/components/DataDetailPanel.tsx: >-
    import React, { useRef } from 'react'

    import { Badge } from '@/components/ui/badge'

    import { Button } from '@/components/ui/button'

    import {
      Clock, 
      Download,
      FileText,
      Image,
      Video,
      File,
      Tag,
      User,
      BarChart3,
      TrendingUp,
      CheckCircle,
      AlertCircle,
      Circle
    } from 'lucide-react'

    import type { DataItem } from '../types'

    import { useStaggeredAnimation } from
    '@/hooks/useStaggeredAnimation.motion.hook'

    import {
      AssigneeInfo,
      ItemProgressBar,
      ItemPriorityBadge,
      ItemTags,
    } from './shared/DataItemParts'

    import { DataDetailActions } from './DataDetailActions'

    interface DataDetailPanelProps {
      item: DataItem | null
    }


    export function DataDetailPanel({ item }: DataDetailPanelProps) {
      const contentRef = useRef<HTMLDivElement>(null)
      useStaggeredAnimation(contentRef, [item]);

      if (!item) {
        return null
      }

      const getFileIcon = (type: string) => {
        switch (type.toLowerCase()) {
          case 'pdf': return FileText
          case 'image':
          case 'png':
          case 'jpg':
          case 'jpeg': return Image
          case 'video':
          case 'mp4': return Video
          default: return File
        }
      }

      const getStatusIcon = (status: string) => {
        switch (status) {
          case 'completed': return CheckCircle
          case 'active': return Circle
          case 'pending': return AlertCircle
          default: return Circle
        }
      }

      return (
        <div ref={contentRef} className="h-full flex flex-col">
          {/* Header */}
          <div className="p-6 border-b border-border/50 bg-gradient-to-r from-card/50 to-card/30 backdrop-blur-sm">
            <div className="flex items-start gap-4 mb-4">
              <div className="w-16 h-16 bg-gradient-to-br from-primary/20 to-primary/10 rounded-2xl flex items-center justify-center text-3xl flex-shrink-0">
                {item.thumbnail}
              </div>
              <div className="flex-1 min-w-0">
                <h1 className="text-2xl font-bold mb-2 leading-tight">
                  {item.title}
                </h1>
                <p className="text-muted-foreground">
                  {item.description}
                </p>
              </div>
            </div>

            {/* Status badges */}
            <div className="flex items-center gap-2 mb-4">
              <Badge variant="outline">
                {React.createElement(getStatusIcon(item.status), { className: "w-3 h-3 mr-1" })}
                {item.status}
              </Badge>
              <ItemPriorityBadge priority={item.priority} />
              <Badge variant="outline" className="bg-accent/50">
                {item.category}
              </Badge>
            </div>

            {/* Progress */}
            <ItemProgressBar completion={item.metrics.completion} />
          </div>

          {/* Content */}
          <div className="flex-1 overflow-y-auto">
            <div className="p-6 space-y-6">
              {/* Assignee Info */}
              <div className="bg-card/30 rounded-2xl p-4 border border-border/30">
                <div className="flex items-center gap-1 mb-3">
                  <User className="w-4 h-4 text-muted-foreground" />
                  <h3 className="font-semibold text-sm">Assigned to</h3>
                </div>
                <AssigneeInfo assignee={item.assignee} avatarClassName="w-12 h-12" />
              </div>

              {/* Metrics */}
              <div className="bg-card/30 rounded-2xl p-4 border border-border/30">
                <div className="flex items-center gap-1 mb-3">
                  <BarChart3 className="w-4 h-4 text-muted-foreground" />
                  <h3 className="font-semibold text-sm">Engagement Metrics</h3>
                </div>
                <div className="grid grid-cols-[repeat(auto-fit,minmax(80px,1fr))] gap-4">
                  <div className="text-center">
                    <p className="text-2xl font-bold">{item.metrics.views + item.metrics.likes + item.metrics.shares}</p>
                    <p className="text-xs text-muted-foreground">Shares</p>
                  </div>
                </div>
              </div>

              {/* Tags */}
              <div className="bg-card/30 rounded-2xl p-4 border border-border/30">
                <div className="flex items-center gap-1 mb-3">
                  <Tag className="w-4 h-4 text-muted-foreground" />
                  <h3 className="font-semibold text-sm">Tags</h3>
                </div>
                <ItemTags tags={item.tags} />
              </div>

              {/* Content Details */}
              {item.content && (
                <div className="bg-card/30 rounded-2xl p-4 border border-border/30">
                  <h3 className="font-semibold text-sm mb-3">Project Details</h3>
                  <div className="space-y-4">
                    <div>
                      <h4 className="font-medium text-sm mb-2">Summary</h4>
                      <p className="text-sm text-muted-foreground leading-relaxed">
                        {item.content.summary}
                      </p>
                    </div>
                    <div>
                      <h4 className="font-medium text-sm mb-2">Description</h4>
                      <p className="text-sm text-muted-foreground leading-relaxed">
                        {item.content.details}
                      </p>
                    </div>
                  </div>
                </div>
              )}

              {/* Attachments */}
              {item.content?.attachments && item.content.attachments.length > 0 && (
                <div className="bg-card/30 rounded-2xl p-4 border border-border/30">
                  <h3 className="font-semibold text-sm mb-3">Attachments</h3>
                  <div className="space-y-2">
                    {item.content.attachments.map((attachment, index) => {
                      const IconComponent = getFileIcon(attachment.type)
                      return (
                        <div
                          key={index}
                          className="flex items-center gap-3 p-3 bg-muted/30 rounded-xl hover:bg-muted/50 transition-colors cursor-pointer group"
                        >
                          <IconComponent className="w-5 h-5 text-muted-foreground" />
                          <div className="flex-1 min-w-0">
                            <p className="text-sm font-medium truncate group-hover:text-primary transition-colors">
                              {attachment.name}
                            </p>
                            <p className="text-xs text-muted-foreground">
                              {attachment.type} â€¢ {attachment.size}
                            </p>
                          </div>
                          <Button size="sm" variant="ghost" className="opacity-0 group-hover:opacity-100 transition-opacity">
                            <Download className="w-4 h-4" />
                          </Button>
                        </div>
                      )
                    })}
                  </div>
                </div>
              )}

              {/* Timeline */}
              <div className="bg-card/30 rounded-2xl p-4 border border-border/30">
                <div className="flex items-center gap-1 mb-3">
                  <Clock className="w-4 h-4 text-muted-foreground" />
                  <h3 className="font-semibold text-sm">Timeline</h3>
                </div>
                <div className="space-y-3">
                  <div className="flex items-center gap-2 text-sm">
                    <Clock className="w-3 h-3 text-muted-foreground" />
                    <span className="text-muted-foreground">Created:</span>
                    <span className="font-medium">
                      {new Date(item.createdAt).toLocaleDateString('en-US', {
                        year: 'numeric',
                        month: 'long',
                        day: 'numeric'
                      })}
                    </span>
                  </div>
                  <div className="flex items-center gap-2 text-sm">
                    <TrendingUp className="w-3 h-3 text-muted-foreground" />
                    <span className="text-muted-foreground">Last updated:</span>
                    <span className="font-medium">
                      {new Date(item.updatedAt).toLocaleDateString('en-US', {
                        year: 'numeric',
                        month: 'long',
                        day: 'numeric'
                      })}
                    </span>
                  </div>
                  {item.dueDate && (
                    <div className="flex items-center gap-2 text-sm">
                      <AlertCircle className="w-3 h-3 text-orange-500" />
                      <span className="text-muted-foreground">Due date:</span>
                      <span className="font-medium text-orange-600">
                        {new Date(item.dueDate).toLocaleDateString('en-US', {
                          year: 'numeric',
                          month: 'long',
                          day: 'numeric'
                        })}
                      </span>
                    </div>
                  )}
                </div>
              </div>
            </div>
          </div>

          {/* Footer Actions */}
          <div className="p-6 border-t border-border/50 bg-card/30">
            <DataDetailActions />
          </div>
        </div>
      )
    }
  src/pages/DataDemo/index.tsx: >-
    import { useRef, useEffect, useCallback, useMemo } from 'react'

    import {
      Layers, 
      AlertTriangle, 
      PlayCircle, 
      Loader2,
      TrendingUp,
      CheckCircle,
      Clock,
      Archive,
      PlusCircle
    } from 'lucide-react'

    import { gsap } from 'gsap'

    import { cn } from '@/lib/utils'

    import { DynamicViewProvider } from
    '@/features/dynamic-view/DynamicViewContext'

    import { PageLayout } from '@/components/shared/PageLayout'

    import { useScrollToBottom } from '@/hooks/useScrollToBottom.hook';

    import { ScrollToBottomButton } from
    '@/components/shared/ScrollToBottomButton';

    import { ListView } from '@/features/dynamic-view/components/views/ListView'

    import { CardView } from '@/features/dynamic-view/components/views/CardView'

    import { TableView } from
    '@/features/dynamic-view/components/views/TableView'

    import { KanbanView } from
    '@/features/dynamic-view/components/views/KanbanView'

    import { CalendarView } from
    '@/features/dynamic-view/components/views/CalendarView'

    import { ViewModeSelector } from
    '@/features/dynamic-view/components/controls/ViewModeSelector'

    import { AnimatedTabs } from '@/components/ui/animated-tabs'

    import { StatCard } from '@/components/shared/StatCard'

    import { AnimatedLoadingSkeleton } from
    '@/features/dynamic-view/components/shared/AnimatedLoadingSkeleton'

    import { ViewControls } from
    '@/features/dynamic-view/components/controls/ViewControls'

    import { mockDataItems } from './data/mockData'

    import type { GroupableField, GenericItem } from
    '@/features/dynamic-view/types'

    import { useAppViewManager } from '@/hooks/useAppViewManager.hook'

    import { useAutoAnimateStats } from './hooks/useAutoAnimateStats.hook'

    import { 
      useDataDemoStore, 
      useGroupTabs
    } from './store/dataDemo.store'


    import { dataDemoViewConfig } from './DataDemo.config'


    type Stat = {
      title: string;
      value: string;
      icon: React.ReactNode;
      change: string;
      trend: 'up' | 'down';
      type?: 'card';
    };


    type ChartStat = {
      title: string;
      value: string;
      icon: React.ReactNode;
      change: string;
      trend: 'up' | 'down';
      type: 'chart';
      chartData: number[];
    };


    type StatItem = Stat | ChartStat;


    function DataDemoContent() {
      const {
        viewMode,
        groupBy,
        activeGroupTab,
        setGroupBy,
        setSort,
        setActiveGroupTab,
        page,
        filters,
        sortConfig,
        setPage,
      } = useAppViewManager();

      const { hasMore, isLoading, isInitialLoading, totalItemCount, loadData } = useDataDemoStore(state => ({
        hasMore: state.hasMore,
        isLoading: state.isLoading,
        isInitialLoading: state.isInitialLoading,
        totalItemCount: state.totalItemCount,
        loadData: state.loadData,
      }));

      const groupTabs = useGroupTabs(groupBy, activeGroupTab);
      const allItems = useDataDemoStore(s => s.items);

      const groupedData = useMemo(() => {
        if (groupBy === 'none') {
            return null;
        }
        return allItems.reduce((acc, item) => {
            const groupKey = String(item[groupBy as GroupableField]);
            if (!acc[groupKey]) {
                acc[groupKey] = [];
            }
            acc[groupKey].push(item as any);
            return acc;
        }, {} as Record<string, DataItem[]>);
      }, [allItems, groupBy]);

      const dataToRender = useMemo(() => {
        if (groupBy === 'none' || activeGroupTab === 'all' || !groupedData) {
          return allItems;
        }
        return groupedData[activeGroupTab] || [];
      }, [groupBy, activeGroupTab, allItems, groupedData]);

      const statsRef = useRef<HTMLDivElement>(null)
      const scrollRef = useRef<HTMLDivElement>(null);

      // Note: The `DynamicViewProvider` needs `GenericItem[]`. 
      // Our store uses `GenericItem` so no cast is needed.
      const genericItems: GenericItem[] = allItems;

      // Auto-hide stats container on scroll down
      useAutoAnimateStats(scrollRef, statsRef);

      // Calculate stats from data
      const totalItems = mockDataItems.length
      const { showScrollToBottom, scrollToBottom, handleScroll } = useScrollToBottom(scrollRef);

      const activeItems = mockDataItems.filter(item => item.status === 'active').length
      const highPriorityItems = mockDataItems.filter(item => item.priority === 'high' || item.priority === 'critical').length
      const avgCompletion = totalItems > 0 ? Math.round(
        mockDataItems.reduce((acc, item) => acc + item.metrics.completion, 0) / totalItems
      ) : 0

      const stats: StatItem[] = [
        {
          title: "Total Projects",
          value: totalItems.toString(),
          icon: <Layers className="w-5 h-5" />,
          change: "+5.2% this month",
          trend: "up" as const,
          type: 'chart',
          chartData: [120, 125, 122, 130, 135, 138, 142]
        },
        {
          title: "Active Projects",
          value: activeItems.toString(),
          icon: <PlayCircle className="w-5 h-5" />,
          change: "+2 this week", 
          trend: "up" as const,
          type: 'chart',
          chartData: [45, 50, 48, 55, 53, 60, 58]
        },
        {
          title: "High Priority",
          value: highPriorityItems.toString(),
          icon: <AlertTriangle className="w-5 h-5" />,
          change: "-1 from last week",
          trend: "down" as const,
          type: 'chart',
          chartData: [25, 26, 28, 27, 26, 24, 23]
        },
        {
          title: "Avg. Completion",
          value: `${avgCompletion}%`,
          icon: <TrendingUp className="w-5 h-5" />,
          change: "+3.2%",
          trend: "up" as const,
          type: 'chart',
          chartData: [65, 68, 70, 69, 72, 75, 78],
        },
        {
          title: "Completion Rate",
          value: "88%",
          icon: <CheckCircle className="w-5 h-5" />,
          change: "+1.5% this month",
          trend: "up" as const,
          type: 'chart',
          chartData: [80, 82, 81, 84, 85, 87, 88],
        },
        {
          title: "Overdue Items",
          value: "8",
          icon: <Clock className="w-5 h-5" />,
          change: "-3 this week",
          trend: "down" as const,
        },
        {
          title: "New This Week",
          value: "12",
          icon: <PlusCircle className="w-5 h-5" />,
          change: "+2 from last week",
          trend: "up" as const,
        },
        {
          title: "Archived Projects",
          value: "153",
          icon: <Archive className="w-5 h-5" />,
          change: "+20 this month",
          trend: "up" as const,
        }
      ]

      useEffect(() => {
        // Animate stats cards in
        if (!isInitialLoading && statsRef.current) {
          gsap.fromTo(statsRef.current.children,
            { y: 30, opacity: 0 },
            {
              duration: 0.5,
              y: 0,
              opacity: 1,
              stagger: 0.08,
              ease: "power2.out"
            }
          )
        }
      }, [isInitialLoading]);

      useEffect(() => {
        loadData({
          page,
          groupBy,
          filters,
          sortConfig,
          isFullLoad: viewMode === 'calendar',
        });
      }, [page, groupBy, filters, sortConfig, loadData, viewMode]);

      const observer = useRef<IntersectionObserver>();
      const loaderRef = useCallback(
        (node: Element | null) => {
          if (isLoading) return;
          if (observer.current) observer.current.disconnect();

          observer.current = new IntersectionObserver((entries) => {
            if (entries[0].isIntersecting && hasMore) {
              setPage(page + 1);
            }
          });
          if (node) observer.current.observe(node);
        },
        [isLoading, hasMore, page, setPage],
      );
      
      // Auto-group by status when switching to kanban view for the first time
      useEffect(() => {
        if (viewMode === 'kanban' && groupBy === 'none') {
          setGroupBy('status');
          setSort(null); // Kanban is manually sorted, so disable programmatic sort
        }
        // For calendar view, we don't want grouping.
        if (viewMode === 'calendar' && groupBy !== 'none') {
          setGroupBy('none');
        }
      }, [viewMode, groupBy, setGroupBy, setSort]);

      const renderViewForData = useCallback((data: GenericItem[]) => {
        const items = data as GenericItem[];
        switch (viewMode) {
            case 'table': return <TableView data={items} />;
            case 'cards': return <CardView data={items} />;
            case 'calendar': return null; // Calendar has its own render path below
            case 'kanban': return null; // Kanban has its own render path below
            case 'grid': return <CardView data={items} isGrid />;
            case 'list': default: return <ListView data={items} />;
        }
      }, [viewMode]);

      const isGroupedView = useMemo(() => 
        groupBy !== 'none' && groupTabs.length > 1 && groupedData,
      [groupBy, groupTabs.length, groupedData]);


      return (
        <DynamicViewProvider viewConfig={dataDemoViewConfig} data={genericItems}>
          <PageLayout
            scrollRef={scrollRef}
            onScroll={handleScroll}
          >
            <div className="space-y-6">
              {/* Header */}
              <div className="space-y-4">
                <div className="flex flex-col md:flex-row md:items-start md:justify-between gap-4">
                  <div className="flex-1">
                    <h1 className="text-2xl font-bold tracking-tight">Data Showcase</h1>
                    <p className="text-muted-foreground">
                      {isInitialLoading 
                        ? "Loading projects..." 
                        : `Showing ${dataToRender.length} of ${totalItemCount} item(s)`}
                    </p>
                  </div>
                  <ViewModeSelector />
                </div>
                <ViewControls />
              </div>

              {/* Stats Section */}
              {!isInitialLoading && (
                <div ref={statsRef} className="flex overflow-x-auto gap-6 pb-4 no-scrollbar">
                  {stats.map((stat) => (
                    <StatCard
                      className="w-64 md:w-72 flex-shrink-0"
                      key={stat.title}
                      title={stat.title}
                      value={stat.value}
                      change={stat.change}
                      trend={stat.trend}
                      icon={stat.icon}
                      chartData={stat.type === 'chart' ? stat.chartData : undefined}
                    />
                  ))}
                </div>
              )}

            <div className="min-h-[500px]">
              {isInitialLoading ? (
                <AnimatedLoadingSkeleton viewMode={viewMode} />
              ) : viewMode === 'calendar' ? (
                <CalendarView data={genericItems} />
              ) : viewMode === 'kanban' ? (
                isGroupedView ? (
                  <KanbanView data={groupedData as Record<string, GenericItem[]>} />
                ) : (
                  <div className="flex items-center justify-center h-96 text-muted-foreground">
                    Group data by a metric to use the Kanban view.
                  </div>
                )
              ) : !isGroupedView ? (
                renderViewForData(allItems)
              ) : (
                // Grouped view with AnimatedTabs
                <div className="relative">
                  <AnimatedTabs
                    tabs={groupTabs}
                    activeTab={activeGroupTab}
                    onTabChange={setActiveGroupTab}
                    wrapperClassName="flex flex-col"
                    className="border-b"
                    contentClassName="pt-6 flex-grow"
                  >
                    {groupTabs.map(tab => (
                      <div key={tab.id} className="min-h-[440px]">
                        {renderViewForData(
                          tab.id === 'all' ? allItems : groupedData?.[tab.id] || []
                        )}
                      </div>
                    ))}
                  </AnimatedTabs>
                </div>
              )}
            </div>

            {/* Loader for infinite scroll */}
            <div ref={loaderRef} className="flex justify-center items-center py-6">
              {isLoading && !isInitialLoading && groupBy === 'none' && viewMode !== 'calendar' && (
                <div className="flex items-center gap-2 text-muted-foreground">
                  <Loader2 className="w-5 h-5 animate-spin" />
                  <span>Loading more...</span>
                </div>
              )}
              {!isLoading && !hasMore && dataToRender.length > 0 && !isInitialLoading && groupBy === 'none' && viewMode !== 'calendar' && (
                <p className="text-muted-foreground">You've reached the end.</p>
              )}
            </div>
          </div>
            <ScrollToBottomButton isVisible={showScrollToBottom} onClick={scrollToBottom} />
          </PageLayout>
        </DynamicViewProvider>
      );
    }
  src/pages/Messaging/components/TaskHeader.tsx: >
    import React from 'react';

    import { useMessagingStore } from '../store/messaging.store';

    import type { Task, TaskStatus, TaskPriority, Assignee, Contact } from
    '../types';

    import {
      DropdownMenu,
      DropdownMenuContent,
      DropdownMenuItem,
      DropdownMenuRadioGroup,
      DropdownMenuRadioItem,
      DropdownMenuTrigger,
      DropdownMenuSeparator
    } from '@/components/ui/dropdown-menu';

    import { Button } from '@/components/ui/button';

    import { Avatar, AvatarFallback, AvatarImage } from
    '@/components/ui/avatar';

    import { ChevronDown, Inbox, Zap, Shield, Clock, Calendar, Plus, User, Eye }
    from 'lucide-react';

    import { Badge } from '@/components/ui/badge';

    import { format } from 'date-fns';


    const statusOptions: { value: TaskStatus; label: string; icon:
    React.ReactNode }[] = [
        { value: 'open', label: 'Open', icon: <Inbox className="w-4 h-4" /> },
        { value: 'in-progress', label: 'In Progress', icon: <Zap className="w-4 h-4" /> },
        { value: 'done', label: 'Done', icon: <Shield className="w-4 h-4" /> },
        { value: 'snoozed', label: 'Snoozed', icon: <Clock className="w-4 h-4" /> },
    ];


    const priorityOptions: { value: TaskPriority; label: string; icon:
    React.ReactNode }[] = [
        { value: 'high', label: 'High', icon: <div className="w-2.5 h-2.5 rounded-full bg-red-500" /> },
        { value: 'medium', label: 'Medium', icon: <div className="w-2.5 h-2.5 rounded-full bg-yellow-500" /> },
        { value: 'low', label: 'Low', icon: <div className="w-2.5 h-2.5 rounded-full bg-green-500" /> },
        { value: 'none', label: 'None', icon: <div className="w-2.5 h-2.5 rounded-full bg-gray-400" /> },
    ];



    interface TaskHeaderProps {
      task: (Task & { contact: Contact; assignee: Assignee | null });
    }


    export const TaskHeader: React.FC<TaskHeaderProps> = ({ task }) => {
      const { updateTask, assignees } = useMessagingStore();
      const currentStatus = statusOptions.find(o => o.value === task.status);
      const currentPriority = priorityOptions.find(o => o.value === task.priority);
      const currentUserId = 'user-1'; // Mock current user
      const isHandledByOther = task.activeHandler && task.activeHandlerId !== currentUserId;


      return (
        <div className="space-y-4">
          {/* Task Title & Contact */}
          <div className="overflow-hidden">
            <h2 className="font-bold text-xl lg:text-2xl truncate" title={task.title}>
              {task.title}
            </h2>
            <p className="text-sm text-muted-foreground">
              With <a href="#" className="hover:underline font-medium text-foreground/80">{task.contact.name}</a> from <strong className="font-medium text-foreground/80">{task.contact.company}</strong>
              <span className="mx-1">&middot;</span>
              via <span className="capitalize font-medium text-foreground/80">{task.channel}</span>
            </p>
          </div>

          {/* Properties Bar */}
          <div className="flex flex-wrap items-center gap-y-2 text-sm">
            {/* Assignee Dropdown */}
            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <Button variant="outline" size="sm" className="gap-2 font-normal">
                  {task.assignee ? (
                    <Avatar className="h-5 w-5"><AvatarImage src={task.assignee.avatar} /><AvatarFallback>{task.assignee.name.charAt(0)}</AvatarFallback></Avatar>
                  ) : (
                    <User className="h-4 w-4 text-muted-foreground" />
                  )}
                  <span className="font-medium">{task.assignee?.name || 'Unassigned'}</span>
                  <ChevronDown className="w-3 h-3 text-muted-foreground" />
                </Button>
              </DropdownMenuTrigger>
              <DropdownMenuContent align="start">
                <DropdownMenuRadioGroup value={task.assigneeId || 'null'} onValueChange={val => updateTask(task.id, { assigneeId: val === 'null' ? null : val })}>
                  <DropdownMenuRadioItem value="null">
                    <User className="w-4 h-4 mr-2 text-muted-foreground" /> Unassigned
                  </DropdownMenuRadioItem>
                  <DropdownMenuSeparator />
                  {assignees.map(a => (
                    <DropdownMenuRadioItem key={a.id} value={a.id}>
                      <Avatar className="h-5 w-5 mr-2"><AvatarImage src={a.avatar} /><AvatarFallback>{a.name.charAt(0)}</AvatarFallback></Avatar>
                      {a.name}
                    </DropdownMenuRadioItem>
                  ))}
                </DropdownMenuRadioGroup>
              </DropdownMenuContent>
            </DropdownMenu>

            {isHandledByOther && (
                <>
                    <div className="mx-2 h-4 w-px bg-border" />
                    <Badge variant="outline" className="gap-2 font-normal text-amber-600 border-amber-600/50">
                        <Eye className="w-3.5 h-3.5" /> Viewing: {task.activeHandler?.name}
                    </Badge>
                </>
            )}
            <div className="mx-2 h-4 w-px bg-border" />

            {/* Status Dropdown */}
            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <Button variant="ghost" size="sm" className="gap-2 text-muted-foreground hover:text-foreground">
                  {currentStatus?.icon}
                  <span className="font-medium text-foreground">{currentStatus?.label}</span>
                </Button>
              </DropdownMenuTrigger>
              <DropdownMenuContent align="start">
                {statusOptions.map(o => (
                  <DropdownMenuItem key={o.value} onClick={() => updateTask(task.id, { status: o.value })}>
                    <div className="flex items-center">
                      <div className="w-4 h-4 mr-2">{o.icon}</div>
                      <span>{o.label}</span>
                    </div>
                  </DropdownMenuItem>
                ))}
              </DropdownMenuContent>
            </DropdownMenu>
            
            <div className="mx-2 h-4 w-px bg-border" />
            
            {/* Priority Dropdown */}
            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <Button variant="ghost" size="sm" className="gap-2 text-muted-foreground hover:text-foreground">
                  {currentPriority?.icon}
                  <span className="font-medium text-foreground">{currentPriority?.label}</span>
                </Button>
              </DropdownMenuTrigger>
              <DropdownMenuContent align="start">
                {priorityOptions.map(o => (
                  <DropdownMenuItem key={o.value} onClick={() => updateTask(task.id, { priority: o.value })}>
                    <div className="flex items-center">
                      <div className="w-2.5 h-2.5 mr-2">{o.icon}</div>
                      <span>{o.label}</span>
                    </div>
                  </DropdownMenuItem>
                ))}
              </DropdownMenuContent>
            </DropdownMenu>

            <div className="mx-2 h-4 w-px bg-border" />

            {/* Due Date - for display, could be a popover trigger */}
            <Button variant="ghost" size="sm" className="gap-2 text-muted-foreground cursor-default" disabled>
                <Calendar className="w-4 h-4" />
                <span className="font-medium text-foreground">{task.dueDate ? format(new Date(task.dueDate), 'MMM d, yyyy') : 'No due date'}</span>
            </Button>
          </div>

          {/* Tags */}
          <div className="flex flex-wrap items-center gap-2">
            {task.tags.map(t => <Badge variant="secondary" key={t}>{t}</Badge>)}
            <Button variant="outline" size="sm" className="h-7 px-2 text-xs rounded-md border-dashed">
              <Plus className="w-3 h-3 mr-1" /> Tag
            </Button>
          </div>
        </div>
      );
    };
  src/pages/Messaging/store/messaging.store.ts: >-
    import { useState, useEffect } from 'react';

    import { create } from 'zustand';

    import { mockTasks, mockContacts, mockAssignees } from '../data/mockData';

    import type { Task, Contact, Channel, Assignee, TaskStatus, TaskPriority,
    TaskView, Message, JourneyPointType } from '../types';


    const currentUserId = 'user-1'; // Mock current user


    interface MessagingState {
      tasks: Task[];
      contacts: Contact[];
      assignees: Assignee[];
      searchTerm: string;
      activeFilters: {
        channels: Channel[];
        tags: string[];
        status: TaskStatus[];
        priority: TaskPriority[];
        assigneeId: string[];
      };
      activeTaskView: TaskView;
    }


    interface MessagingActions {
      getTaskById: (id: string) => (Task & { contact: Contact, assignee: Assignee | null, activeHandler: Assignee | null }) | undefined;
      getFilteredTasks: () => (Task & { contact: Contact, assignee: Assignee | null })[];
      setSearchTerm: (term: string) => void;
      setActiveTaskView: (view: TaskView) => void;
      setFilters: (filters: Partial<MessagingState['activeFilters']>) => void;
      updateTask: (taskId: string, updates: Partial<Omit<Task, 'id'>>) => void;
      takeOverTask: (taskId: string, userId: string) => void;
      requestAndSimulateTakeover: (taskId: string, requestedByUserId: string) => void;
      getAssigneeById: (assigneeId: string) => Assignee | undefined;
      getContactsByCompany: (companyName: string, currentContactId: string) => Contact[];
      getAvailableTags: () => string[];
    }


    export const useMessagingStore = create<MessagingState &
    MessagingActions>((set, get) => ({
      tasks: mockTasks,
      contacts: mockContacts,
      assignees: mockAssignees,
      searchTerm: '',
      activeFilters: {
        channels: [],
        tags: [],
        status: [],
        priority: [],
        assigneeId: [],
      },
      activeTaskView: 'all_open',

      getTaskById: (id) => {
        const task = get().tasks.find(t => t.id === id);
        if (!task) return undefined;

        const contact = get().contacts.find(c => c.id === task.contactId);
        if (!contact) return undefined;

        const assignee = get().assignees.find(a => a.id === task.assigneeId) || null;
        const activeHandler = get().assignees.find(a => a.id === task.activeHandlerId) || null;

        return { ...task, contact, assignee, activeHandler };
      },

      getFilteredTasks: () => {
        const { tasks, contacts, assignees, searchTerm, activeFilters, activeTaskView } = get();
        const lowercasedSearch = searchTerm.toLowerCase();

        const viewFilteredTasks = tasks.filter(task => {
          switch (activeTaskView) {
            case 'all_open':
              return task.status === 'open' || task.status === 'in-progress';
            case 'unassigned':
              return !task.assigneeId && (task.status === 'open' || task.status === 'in-progress');
            case 'me':
              return task.assigneeId === currentUserId && (task.status === 'open' || task.status === 'in-progress');
            case 'done':
              return task.status === 'done';
            default:
              return true;
          }
        });
        const mapped = viewFilteredTasks.map(task => {
          const contact = contacts.find(c => c.id === task.contactId) as Contact;
          const assignee = assignees.find(a => a.id === task.assigneeId) || null;
          return { ...task, contact, assignee };
        });

        const filtered = mapped.filter(task => {
          const searchMatch = task.title.toLowerCase().includes(lowercasedSearch) || task.contact.name.toLowerCase().includes(lowercasedSearch);
          const channelMatch = activeFilters.channels.length === 0 || activeFilters.channels.includes(task.channel);
          const tagMatch = activeFilters.tags.length === 0 || activeFilters.tags.some(tag => task.tags.includes(tag));
          const statusMatch = activeFilters.status.length === 0 || activeFilters.status.includes(task.status);
          const priorityMatch = activeFilters.priority.length === 0 || activeFilters.priority.includes(task.priority);
          const assigneeMatch = activeFilters.assigneeId.length === 0 || (task.assigneeId && activeFilters.assigneeId.includes(task.assigneeId));
          
          return searchMatch && channelMatch && tagMatch && statusMatch && priorityMatch && assigneeMatch;
        });

        return filtered.sort((a, b) => new Date(b.lastActivity.timestamp).getTime() - new Date(a.lastActivity.timestamp).getTime());
      },

      setSearchTerm: (term) => set({ searchTerm: term }),
      
      setActiveTaskView: (view) => set({ activeTaskView: view }),

      setFilters: (newFilters) => set(state => ({
        activeFilters: { ...state.activeFilters, ...newFilters }
      })),

      updateTask: (taskId, updates) => set(state => ({
        tasks: state.tasks.map(task => 
          task.id === taskId 
            ? { ...task, ...updates, lastActivity: { ...task.lastActivity, timestamp: new Date().toISOString() } } 
            : task
        )
      })),

      takeOverTask: (taskId, userId) => set(state => ({
        tasks: state.tasks.map(task => 
          task.id === taskId 
            ? { ...task, activeHandlerId: userId, takeoverRequested: false } 
            : task
        )
      })),

      requestAndSimulateTakeover: (taskId, requestedByUserId) => {
        set(state => ({
          tasks: state.tasks.map(task => 
            task.id === taskId ? { ...task, takeoverRequested: true } : task
          )
        }));
        // Simulate a 2-second delay for the other user to "approve"
        setTimeout(() => get().takeOverTask(taskId, requestedByUserId), 2000);
      },

      getAssigneeById: (assigneeId: string) => {
        return get().assignees.find(a => a.id === assigneeId);
      },

      getContactsByCompany: (companyName, currentContactId) => {
        return get().contacts.filter(
          c => c.company === companyName && c.id !== currentContactId
        );
      },

      getAvailableTags: () => {
        const contactTags = get().contacts.flatMap(c => c.tags);
        const taskTags = get().tasks.flatMap(t => t.tags);
        const allTags = new Set([...contactTags, ...taskTags]);
        return Array.from(allTags);
      }
    }));


    export const useMessagingTaskCounts = () => {
      const tasks = useMessagingStore(s => s.tasks);
      const [counts, setCounts] = useState<Record<TaskView, number>>({
        all_open: 0,
        unassigned: 0,
        me: 0,
        done: 0,
      });

      useEffect(() => {
        // Deferring the count calculation until after the first paint.
        // This frees up the main thread for initial animations to run smoothly.
        const animationFrameId = requestAnimationFrame(() => {
            const newCounts: Record<TaskView, number> = {
                all_open: 0,
                unassigned: 0,
                me: 0,
                done: 0,
            };

            for (const task of tasks) {
                const isOpenOrInProgress = task.status === 'open' || task.status === 'in-progress';

                if (isOpenOrInProgress) {
                    newCounts.all_open++;
                    if (!task.assigneeId) newCounts.unassigned++;
                    if (task.assigneeId === currentUserId) newCounts.me++;
                } else if (task.status === 'done') {
                    newCounts.done++;
                }
            }
            setCounts(newCounts);
        });

        return () => cancelAnimationFrame(animationFrameId);
      }, [tasks]);

      return counts;
    };
approved: true
linesAdded: null
linesRemoved: null
linesDifference: null
gitCommittedAt: '2025-10-20T14:25:32.398Z'
status: committed
id: 500
