uuid: d8e5e80d-886f-4569-87a1-d5f99276d3f2
projectId: amazing-app-shell
createdAt: '2025-10-10T22:23:24.287Z'
gitCommitMsg: >-
  feat(ui): refactor sidebar into composable component library

  This commit refactors the monolithic `EnhancedSidebar` into a reusable and
  pluggable UI library, following a composable component architecture.

  - A new, full-featured `DropdownMenu` component has been added, built on Radix
  UI primitives. - Introduced a suite of composable sidebar components
  (`Sidebar`, `SidebarHeader`, `SidebarMenuItem`, etc.) in
  `src/components/ui/sidebar.tsx`. These components are stateless and controlled
  via props, maximizing reusability. - The original `EnhancedSidebar` component
  has been rewritten to be a consumer of this new component library, cleanly
  separating application logic from the reusable UI. - Added
  `@radix-ui/react-dropdown-menu` as a new dependency.

  This change significantly improves the modularity and maintainability of the
  codebase, making it easier to reuse these UI components in other projects.
promptSummary: >-
  Refactor the app shell into a reusable UI library, focusing on creating a
  pluggable and composable sidebar architecture as requested.
reasoning:
  - >-
    This is an excellent request. Refactoring the application into a reusable UI
    library is a great step towards making it more modular, maintainable, and
    scalable. I will follow your proposed architecture to create a more
    pluggable and developer-friendly component set.
  - 'Here is my plan:'
  - >-
    1.  **Introduce Dropdown Menu**: I'll add a new, fully-featured
    `DropdownMenu` component, built on Radix UI, similar to other components in
    the `ui` directory. This will be essential for creating contextual actions
    in the sidebar.
  - >-
    2.  **Create Composable Sidebar Components**: I will break down the
    monolithic `EnhancedSidebar` into a suite of smaller, composable components
    (`Sidebar`, `SidebarHeader`, `SidebarBody`, `SidebarSection`,
    `SidebarMenuItem`, `SidebarMenuButton`, etc.) in a new
    `src/components/ui/sidebar.tsx` file. These components will be stateless and
    controlled via props, making them highly reusable.
  - >-
    3.  **Refactor `EnhancedSidebar`**: The existing `EnhancedSidebar.tsx` will
    be refactored to become a consumer of this new UI library. It will compose
    the new sidebar components and inject the application-specific logic and
    state from the `zustand` store. This cleanly separates the reusable UI from
    the application's implementation details.
  - >-
    4.  **Update Dependencies**: I'll add the necessary
    `@radix-ui/react-dropdown-menu` dependency to `package.json`.
  - Let's begin the refactoring.
  - '### 1. Update Dependencies'
  - First, I'll add the Radix UI Dropdown Menu package to our dependencies.
  - '### 2. Create `DropdownMenu` Component'
  - >-
    Next, I'll create the new `DropdownMenu` component file. This will provide
    the functionality needed for the sidebar actions.
  - '### 3. Create Composable Sidebar Components'
  - Now, I'll create the new set of composable sidebar components.
  - '### 4. Refactor `EnhancedSidebar` to use the New Components'
  - >-
    Finally, I'll refactor `EnhancedSidebar.tsx`. It will now serve as an
    example implementation, composing our new, reusable UI components and
    connecting them to the application's state.
operations:
  - type: write
    path: package.json
    content: |
      <<<<<<< SEARCH
          "@radix-ui/react-dialog": "^1.0.5",
          "cmdk": "^0.2.0"
      =======
          "@radix-ui/react-dialog": "^1.0.5",
          "@radix-ui/react-dropdown-menu": "^2.0.6",
          "cmdk": "^0.2.0"
      >>>>>>> REPLACE
    patchStrategy: search-replace
  - type: write
    path: src/components/ui/dropdown-menu.tsx
    content: >-
      import * as React from "react"

      import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"

      import { Check, ChevronRight, Circle } from "lucide-react"


      import { cn } from "@/lib/utils"


      const DropdownMenu = DropdownMenuPrimitive.Root


      const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger


      const DropdownMenuGroup = DropdownMenuPrimitive.Group


      const DropdownMenuPortal = DropdownMenuPrimitive.Portal


      const DropdownMenuSub = DropdownMenuPrimitive.Sub


      const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup


      const DropdownMenuSubTrigger = React.forwardRef<
        React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
        React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
          inset?: boolean
        }
      >(({ className, inset, children, ...props }, ref) => (
        <DropdownMenuPrimitive.SubTrigger
          ref={ref}
          className={cn(
            "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent",
            inset && "pl-8",
            className
          )}
          {...props}
        >
          {children}
          <ChevronRight className="ml-auto h-4 w-4" />
        </DropdownMenuPrimitive.SubTrigger>
      ))

      DropdownMenuSubTrigger.displayName =
        DropdownMenuPrimitive.SubTrigger.displayName

      const DropdownMenuSubContent = React.forwardRef<
        React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
        React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
      >(({ className, ...props }, ref) => (
        <DropdownMenuPrimitive.SubContent
          ref={ref}
          className={cn(
            "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
            className
          )}
          {...props}
        />
      ))

      DropdownMenuSubContent.displayName =
        DropdownMenuPrimitive.SubContent.displayName

      const DropdownMenuContent = React.forwardRef<
        React.ElementRef<typeof DropdownMenuPrimitive.Content>,
        React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
      >(({ className, sideOffset = 4, ...props }, ref) => (
        <DropdownMenuPrimitive.Portal>
          <DropdownMenuPrimitive.Content
            ref={ref}
            sideOffset={sideOffset}
            className={cn(
              "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
              className
            )}
            {...props}
          />
        </DropdownMenuPrimitive.Portal>
      ))

      DropdownMenuContent.displayName =
      DropdownMenuPrimitive.Content.displayName


      const DropdownMenuItem = React.forwardRef<
        React.ElementRef<typeof DropdownMenuPrimitive.Item>,
        React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
          inset?: boolean
        }
      >(({ className, inset, ...props }, ref) => (
        <DropdownMenuPrimitive.Item
          ref={ref}
          className={cn(
            "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
            inset && "pl-8",
            className
          )}
          {...props}
        />
      ))

      DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName


      const DropdownMenuCheckboxItem = React.forwardRef<
        React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
        React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
      >(({ className, children, checked, ...props }, ref) => (
        <DropdownMenuPrimitive.CheckboxItem
          ref={ref}
          className={cn(
            "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
            className
          )}
          checked={checked}
          {...props}
        >
          <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
            <DropdownMenuPrimitive.ItemIndicator>
              <Check className="h-4 w-4" />
            </DropdownMenuPrimitive.ItemIndicator>
          </span>
          {children}
        </DropdownMenuPrimitive.CheckboxItem>
      ))

      DropdownMenuCheckboxItem.displayName =
        DropdownMenuPrimitive.CheckboxItem.displayName

      const DropdownMenuRadioItem = React.forwardRef<
        React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
        React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
      >(({ className, children, ...props }, ref) => (
        <DropdownMenuPrimitive.RadioItem
          ref={ref}
          className={cn(
            "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
            className
          )}
          {...props}
        >
          <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
            <DropdownMenuPrimitive.ItemIndicator>
              <Circle className="h-2 w-2 fill-current" />
            </DropdownMenuPrimitive.ItemIndicator>
          </span>
          {children}
        </DropdownMenuPrimitive.RadioItem>
      ))

      DropdownMenuRadioItem.displayName =
      DropdownMenuPrimitive.RadioItem.displayName


      const DropdownMenuLabel = React.forwardRef<
        React.ElementRef<typeof DropdownMenuPrimitive.Label>,
        React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
          inset?: boolean
        }
      >(({ className, inset, ...props }, ref) => (
        <DropdownMenuPrimitive.Label
          ref={ref}
          className={cn(
            "px-2 py-1.5 text-sm font-semibold",
            inset && "pl-8",
            className
          )}
          {...props}
        />
      ))

      DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName


      const DropdownMenuSeparator = React.forwardRef<
        React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
        React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
      >(({ className, ...props }, ref) => (
        <DropdownMenuPrimitive.Separator
          ref={ref}
          className={cn("-mx-1 my-1 h-px bg-muted", className)}
          {...props}
        />
      ))

      DropdownMenuSeparator.displayName =
      DropdownMenuPrimitive.Separator.displayName


      const DropdownMenuShortcut = ({
        className,
        ...props
      }: React.HTMLAttributes<HTMLSpanElement>) => {
        return (
          <span
            className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
            {...props}
          />
        )
      }

      DropdownMenuShortcut.displayName = "DropdownMenuShortcut"


      export {
        DropdownMenu,
        DropdownMenuTrigger,
        DropdownMenuContent,
        DropdownMenuItem,
        DropdownMenuCheckboxItem,
        DropdownMenuRadioItem,
        DropdownMenuLabel,
        DropdownMenuSeparator,
        DropdownMenuShortcut,
        DropdownMenuGroup,
        DropdownMenuPortal,
        DropdownMenuSub,
        DropdownMenuSubContent,
        DropdownMenuSubTrigger,
        DropdownMenuRadioGroup,
      }
    patchStrategy: replace
  - type: write
    path: src/components/ui/sidebar.tsx
    content: >-
      import * as React from "react"

      import { Slot } from "@radix-ui/react-slot"

      import { ChevronDown } from "lucide-react"


      import { cn } from "@/lib/utils"


      interface SidebarContextProps {
        isCollapsed: boolean;
        isPeek: boolean;
        compactMode: boolean;
      }


      const SidebarContext = React.createContext<SidebarContextProps |
      undefined>(undefined);


      function useSidebar() {
        const context = React.useContext(SidebarContext);
        if (!context) {
          throw new Error("useSidebar must be used within a SidebarProvider");
        }
        return context;
      }


      interface SidebarProps extends React.HTMLAttributes<HTMLDivElement> {
        isCollapsed: boolean;
        isPeek?: boolean;
        compactMode?: boolean;
      }


      const Sidebar = React.forwardRef<HTMLDivElement, SidebarProps>(
        ({ className, children, isCollapsed, isPeek = false, compactMode = false, ...props }, ref) => {
          const contextValue = { isCollapsed, isPeek, compactMode };
          return (
            <SidebarContext.Provider value={contextValue}>
              <div
                ref={ref}
                className={cn(
                  "relative bg-card flex-shrink-0 h-full overflow-hidden",
                  isPeek && "shadow-xl z-40",
                  compactMode && "text-sm",
                  className
                )}
                {...props}
              >
                {isPeek && <div className="absolute inset-0 bg-background/80 backdrop-blur-sm" />}
                <div className={cn("relative z-10 h-full flex flex-col", compactMode ? "p-3" : "p-4")}>
                  {children}
                </div>
              </div>
            </SidebarContext.Provider>
          );
        }
      );

      Sidebar.displayName = "Sidebar";


      const SidebarHeader = React.forwardRef<HTMLDivElement,
      React.HTMLAttributes<HTMLDivElement>>(
        ({ className, ...props }, ref) => {
          const { isCollapsed, compactMode } = useSidebar();
          return (
            <div
              ref={ref}
              className={cn(
                "flex items-center",
                isCollapsed ? "justify-center" : "px-3",
                compactMode ? "h-10" : "h-16",
                className
              )}
              {...props}
            />
          );
        }
      );

      SidebarHeader.displayName = "SidebarHeader";


      const SidebarBody = React.forwardRef<HTMLDivElement,
      React.HTMLAttributes<HTMLDivElement>>(
        ({ className, ...props }, ref) => (
          <div
            ref={ref}
            className={cn("flex-1 overflow-y-auto overflow-x-hidden space-y-6 pt-4", className)}
            {...props}
          />
        )
      );

      SidebarBody.displayName = "SidebarBody";


      const SidebarFooter = React.forwardRef<HTMLDivElement,
      React.HTMLAttributes<HTMLDivElement>>(
        ({ className, ...props }, ref) => {
          const { compactMode } = useSidebar();
          return (
            <div
              ref={ref}
              className={cn("pt-4 border-t border-border", compactMode && "pt-3", className)}
              {...props}
            />
          );
        }
      );

      SidebarFooter.displayName = "SidebarFooter";


      interface SidebarSectionProps extends React.HTMLAttributes<HTMLDivElement>
      {
        title?: string;
        isCollapsible?: boolean;
      }


      const SidebarSection = React.forwardRef<HTMLDivElement,
      SidebarSectionProps>(
        ({ className, title, isCollapsible = false, children, ...props }, ref) => {
          const { isCollapsed } = useSidebar();
          const [isExpanded, setIsExpanded] = React.useState(true);

          const handleToggle = () => {
            if (isCollapsible) {
              setIsExpanded(!isExpanded);
            }
          };
          
          return (
            <div ref={ref} className={cn("space-y-1", className)} {...props}>
              {!isCollapsed && title && (
                <div
                  className={cn(
                    "flex items-center justify-between px-3 text-xs font-medium text-muted-foreground uppercase tracking-wider",
                    isCollapsible && "cursor-pointer hover:text-foreground transition-colors"
                  )}
                  onClick={handleToggle}
                >
                  <span className="section-title">{title}</span>
                  {isCollapsible && (
                    <ChevronDown
                      className={cn(
                        "section-chevron w-3 h-3 transition-transform",
                        isExpanded ? "rotate-0" : "-rotate-90"
                      )}
                    />
                  )}
                </div>
              )}
              {(!isCollapsible || isExpanded || isCollapsed) && (
                <nav className="space-y-1">{children}</nav>
              )}
            </div>
          );
        }
      );

      SidebarSection.displayName = "SidebarSection";


      const SidebarMenuItem = React.forwardRef<HTMLDivElement,
      React.HTMLAttributes<HTMLDivElement>>(
        ({ className, ...props }, ref) => (
          <div ref={ref} className={cn("relative flex items-center", className)} {...props} />
        )
      );

      SidebarMenuItem.displayName = "SidebarMenuItem";



      interface SidebarMenuButtonProps extends
      React.ButtonHTMLAttributes<HTMLButtonElement> {
        asChild?: boolean;
        isActive?: boolean;
      }


      const SidebarMenuButton = React.forwardRef<HTMLButtonElement,
      SidebarMenuButtonProps>(
        ({ className, asChild = false, isActive, ...props }, ref) => {
          const { isCollapsed, compactMode } = useSidebar();
          const Comp = asChild ? Slot : "button";
          return (
            <Comp
              ref={ref}
              className={cn(
                "group relative flex items-center gap-3 rounded-lg cursor-pointer transition-all duration-200 w-full text-left",
                "hover:bg-accent",
                compactMode ? "px-2 py-1.5" : "px-4 py-2.5",
                isActive && "bg-primary text-primary-foreground hover:bg-primary/90",
                isCollapsed ? "justify-center" : "flex-1",
                className
              )}
              {...props}
            />
          );
        }
      );

      SidebarMenuButton.displayName = "SidebarMenuButton";


      const SidebarMenuAction = React.forwardRef<HTMLButtonElement,
      React.ButtonHTMLAttributes<HTMLButtonElement>>(
        ({ className, ...props }, ref) => {
          const { isCollapsed } = useSidebar();
          return (
            <button
              ref={ref}
              className={cn(
                "absolute right-2 top-1/2 -translate-y-1/2 p-1 rounded-md hover:bg-accent-foreground/10",
                "opacity-0 group-hover:opacity-100 transition-opacity",
                isCollapsed && "hidden",
                className
              )}
              {...props}
            />
          );
        }
      );

      SidebarMenuAction.displayName = "SidebarMenuAction";


      const SidebarLabel = React.forwardRef<HTMLSpanElement,
      React.HTMLAttributes<HTMLSpanElement>>(
        ({ className, ...props }, ref) => {
          const { isCollapsed } = useSidebar();
          if (isCollapsed) return null;
          return (
            <span
              ref={ref}
              className={cn("flex-1 font-medium truncate", className)}
              {...props}
            />
          );
        }
      );

      SidebarLabel.displayName = "SidebarLabel";


      const SidebarBadge = React.forwardRef<HTMLSpanElement,
      React.HTMLAttributes<HTMLSpanElement>>(
        ({ className, children, ...props }, ref) => {
          const { isCollapsed } = useSidebar();
          if (isCollapsed) return null;
          return (
            <span
              ref={ref}
              className={cn(
                "bg-destructive text-destructive-foreground text-xs px-1.5 py-0.5 rounded-full min-w-[1.25rem] text-center",
                className
              )}
              {...props}
            >
              {Number(children) > 99 ? '99+' : children}
            </span>
          );
        }
      );

      SidebarBadge.displayName = "SidebarBadge";


      const SidebarTooltip = ({ label, badge, children }: { label: string;
      badge?: number | string; children: React.ReactNode }) => {
        const { isCollapsed } = useSidebar();
        if (!isCollapsed) return children;
        return (
          <div className="relative flex items-center justify-center">
            {children}
            <div className="absolute left-full ml-2 px-2 py-1 bg-popover text-popover-foreground text-sm rounded-md shadow-lg opacity-0 group-hover:opacity-100 transition-opacity pointer-events-none whitespace-nowrap z-50">
              {label}
              {badge && (
                <span className="ml-2 bg-destructive text-destructive-foreground text-xs px-1.5 py-0.5 rounded-full">
                  {Number(badge) > 99 ? '99+' : badge}
                </span>
              )}
            </div>
          </div>
        );
      };

      SidebarTooltip.displayName = "SidebarTooltip";



      export {
        Sidebar,
        SidebarHeader,
        SidebarBody,
        SidebarFooter,
        SidebarSection,
        SidebarMenuItem,
        SidebarMenuButton,
        SidebarMenuAction,
        SidebarLabel,
        SidebarBadge,
        SidebarTooltip,
        useSidebar,
      };
    patchStrategy: replace
  - type: write
    path: src/components/EnhancedSidebar.tsx
    content: >+
      --- src/components/EnhancedSidebar.tsx

      +++ src/components/EnhancedSidebar.tsx

      @@ -1,5 +1,4 @@

      -import React, { forwardRef, useRef, useEffect } from 'react'

      -import { gsap } from 'gsap'

      +import React, { forwardRef } from 'react'
       import { 
         Home, 
         Search, 
      @@ -19,25 +18,44 @@
         Trash2,
         ChevronDown,
         Component,
      +  MoreHorizontal,
         Plus,
         Rocket
       } from 'lucide-react'
       import { cn } from '@/lib/utils'
       import { useAppStore } from '@/store/appStore'
       import { SIDEBAR_STATES, BODY_STATES } from '@/lib/utils'
      +import {

      +  Sidebar,

      +  SidebarHeader,

      +  SidebarBody,

      +  SidebarFooter,

      +  SidebarSection,

      +  SidebarMenuItem,

      +  SidebarMenuButton,

      +  SidebarMenuAction,

      +  SidebarLabel,

      +  SidebarBadge,

      +  SidebarTooltip,

      +} from '@/components/ui/sidebar';

      +import {

      +  DropdownMenu,

      +  DropdownMenuContent,

      +  DropdownMenuItem,

      +  DropdownMenuTrigger,

      +} from '@/components/ui/dropdown-menu';
       import { 
           Workspaces, 
           WorkspaceTrigger, 
           WorkspaceContent, 
           type Workspace 
       } from './WorkspaceSwitcher';
      -
       interface NavItem {
         icon: React.ReactNode
         label: string
         href: string
         badge?: number
      -  isActive?: boolean

      +  page?: 'dashboard' | 'settings' | 'toaster' | string; // Use string for
      extensibility
         children?: NavItem[]
       }
       
      @@ -58,7 +76,7 @@
         {
           title: "Main",
           items: [
      -      { icon: <Home className="w-4 h-4" />, label: "Dashboard", href: "/"
      },

      +      { icon: <Home className="w-4 h-4" />, label: "Dashboard", href:
      "/", page: 'dashboard' },
             { icon: <Search className="w-4 h-4" />, label: "Search", href: "/search" },
             { icon: <Bell className="w-4 h-4" />, label: "Notifications", href: "/notifications", badge: 3 },
           ]
      @@ -98,15 +116,15 @@
           collapsible: true,
           defaultExpanded: true,
           items: [
      -      { icon: <Component className="w-4 h-4" />, label: "Toaster", href:
      "/toaster" }

      +      { icon: <Component className="w-4 h-4" />, label: "Toaster", href:
      "/toaster", page: 'toaster' }
           ]
         }
       ]
       
       const bottomNavItems: NavItem[] = [
         { icon: <User className="w-4 h-4" />, label: "Profile", href: "/profile" },
      -  { icon: <Settings className="w-4 h-4" />, label: "Settings", href:
      "/settings" },

      +  { icon: <Settings className="w-4 h-4" />, label: "Settings", href:
      "/settings", page: 'settings' },
         { icon: <HelpCircle className="w-4 h-4" />, label: "Help", href: "/help" },
       ]
       
      @@ -117,143 +135,114 @@
       
       export const EnhancedSidebar = forwardRef<HTMLDivElement, SidebarProps>(
         ({ onMouseEnter, onMouseLeave }, ref) => {
      -    const { sidebarState, sidebarWidth, reducedMotion, compactMode,
      activePage, setActivePage, openSidePane, bodyState, sidePaneContent } =
      useAppStore()

      -    const contentRef = useRef<HTMLDivElement>(null)

      -    const sectionsRef = useRef<(HTMLDivElement | null)[]>([])

      -    const [expandedSections, setExpandedSections] =
      React.useState<Set<string>>(

      -      new Set(navigationSections.filter(s => s.defaultExpanded).map(s =>
      s.title))

      -    )

      +    const { 

      +      sidebarState,

      +      sidebarWidth,

      +      compactMode,

      +      activePage,

      +      setActivePage,

      +      openSidePane,

      +      bodyState,

      +      sidePaneContent

      +    } = useAppStore();
       
           const [selectedWorkspace, setSelectedWorkspace] = React.useState(mockWorkspaces[0]);
      +
           const isCollapsed = sidebarState === SIDEBAR_STATES.COLLAPSED
           const isHidden = sidebarState === SIDEBAR_STATES.HIDDEN
           const isPeek = sidebarState === SIDEBAR_STATES.PEEK
      -    const animationDuration = reducedMotion ? 0.1 : 0.3

      -

      -    // Toggle section expansion

      -    const toggleSection = (sectionTitle: string) => {

      -      setExpandedSections(prev => {

      -        const newSet = new Set(prev)

      -        if (newSet.has(sectionTitle)) {

      -          newSet.delete(sectionTitle)

      -        } else {

      -          newSet.add(sectionTitle)

      -        }

      -        return newSet

      -      })

      -    }

      -

      -    // Animate content visibility

      -    useEffect(() => {

      -      if (!contentRef.current) return

      -

      -      const labels = contentRef.current.querySelectorAll('.nav-label')

      -      const badges = contentRef.current.querySelectorAll('.nav-badge')

      -      const sectionTitles =
      contentRef.current.querySelectorAll('.section-title')

      -      const chevrons =
      contentRef.current.querySelectorAll('.section-chevron')

      -

      -      if (isCollapsed) {

      -        gsap.to([labels, badges, sectionTitles, chevrons], {

      -          opacity: 0,

      -          scale: 0.8,

      -          duration: animationDuration,

      -          ease: "power2.out"

      -        })

      -      } else {

      -        gsap.to([labels, badges, sectionTitles, chevrons], {

      -          opacity: 1,

      -          scale: 1,

      -          duration: animationDuration,

      -          delay: 0.1,

      -          ease: "power2.out"

      -        })

      -      }

      -    }, [isCollapsed, animationDuration])

      -

      -    // Hover animations for nav items

      -    const handleItemHover = (element: HTMLElement, isHovering: boolean)
      => {

      -      if (!element) return

      -

      -      gsap.to(element, {

      -        scale: isHovering ? 1.02 : 1,

      -        x: isHovering ? 4 : 0,

      -        duration: animationDuration,

      -        ease: "power2.out"

      -      })

      -    }
       
           if (isHidden) {
             return null
           }
       
           const renderNavItem = (item: NavItem, depth = 0) => {
      -      const pageName = item.label.toLowerCase();

      -      const isDashboard = pageName === 'dashboard';

      -      const isSettings = pageName === 'settings';

      -      const isToaster = pageName === 'toaster';

      +      const pageName = item.page;
       
      -      const isDashboardActive = activePage === 'dashboard';

      +      const isDashboardActive = activePage === 'dashboard'
             const isSettingsActive = activePage === 'settings' || (bodyState === BODY_STATES.SIDE_PANE && sidePaneContent === 'settings');
             const isToasterActive = activePage === 'toaster' || (bodyState === BODY_STATES.SIDE_PANE && sidePaneContent === 'toaster');
      -      const isPageActive = (isDashboard && isDashboardActive) ||
      (isSettings && isSettingsActive) || (isToaster && isToasterActive);

      +      const isPageActive = (pageName === 'dashboard' &&
      isDashboardActive) ||

      +                           (pageName === 'settings' && isSettingsActive)
      ||

      +                           (pageName === 'toaster' && isToasterActive);
       
      -      const handleClick = () => {

      -        if (isDashboard) {

      -          setActivePage('dashboard');

      -        } else if (isSettings) {

      -          const isSettingsInSidePane = bodyState ===
      BODY_STATES.SIDE_PANE && sidePaneContent === 'settings'

      -          // If we're on the settings page and it's not in the side pane,
      treat this as a "minimize" action.

      -          if (activePage === 'settings' && !isSettingsInSidePane) {

      -            openSidePane('settings');

      -            setActivePage('dashboard');

      -          } else {

      -            // In all other cases (on dashboard page, or settings already
      in pane), just toggle the settings side pane.

      -            openSidePane('settings');

      -          }

      -        } else if (isToaster) {

      -          const isToasterInSidePane = bodyState === BODY_STATES.SIDE_PANE
      && sidePaneContent === 'toaster'

      -          // If we're on the toaster page and it's not in the side pane,
      treat this as a "minimize" action.

      -          if (activePage === 'toaster' && !isToasterInSidePane) {

      -            openSidePane('toaster');

      -            setActivePage('dashboard');

      -          } else {

      -            // In all other cases (on dashboard page, or toaster already
      in pane), just toggle the toaster side pane.

      -            openSidePane('toaster');

      -          }

      +      const handleClick = () => {        

      +        switch(pageName) {

      +          case 'dashboard':

      +            setActivePage('dashboard');

      +            break;

      +          case 'settings': {

      +            const isSettingsInSidePane = bodyState ===
      BODY_STATES.SIDE_PANE && sidePaneContent === 'settings';

      +            if (activePage === 'settings' && !isSettingsInSidePane) {

      +              openSidePane('settings');

      +              setActivePage('dashboard');

      +            } else {

      +              openSidePane('settings');

      +            }

      +            break;

      +          }

      +          case 'toaster': {

      +            const isToasterInSidePane = bodyState ===
      BODY_STATES.SIDE_PANE && sidePaneContent === 'toaster';

      +            if (activePage === 'toaster' && !isToasterInSidePane) {

      +              openSidePane('toaster');

      +              setActivePage('dashboard');

      +            } else {

      +              openSidePane('toaster');

      +            }

      +            break;

      +          }

      +          default:

      +            // Handle other navigation if routing was implemented

      +            break;
               }
      -        // Could add logic for other links here if routing was
      implemented
             };
       
             return (
      -        <div key={item.label} className={cn("space-y-1", depth > 0 &&
      "ml-6")}>

      -        <button

      -          className={cn(

      -            "group relative flex items-center gap-3 rounded-lg
      cursor-pointer transition-all duration-200 w-full text-left",

      -            compactMode ? "px-2 py-1.5" : "px-4 py-2.5",

      -            "hover:bg-accent",

      -            (item.isActive || isPageActive) && "bg-primary
      text-primary-foreground hover:bg-primary/90",

      -            depth > 0 && "text-sm",

      -            isCollapsed && "justify-center"

      -          )}

      -          onMouseEnter={(e) => handleItemHover(e.currentTarget, true)}

      -          onMouseLeave={(e) => handleItemHover(e.currentTarget, false)}

      -          onClick={handleClick}

      -        >

      -          <div className="flex-shrink-0">

      -            {item.icon}

      -          </div>

      -          

      -          {!isCollapsed && (

      -            <>

      -              <span className="nav-label flex-1 font-medium truncate">

      -                {item.label}

      -              </span>

      -              

      -              {item.badge && (

      -                <span className="nav-badge bg-destructive
      text-destructive-foreground text-xs px-1.5 py-0.5 rounded-full
      min-w-[1.25rem] text-center">

      -                  {item.badge > 99 ? '99+' : item.badge}

      -                </span>

      -              )}

      -

      -              {item.children && (

      -                <ChevronDown className="w-3 h-3 transition-transform" />

      -              )}

      -            </>

      +        <div key={item.label}>

      +          <SidebarMenuItem>

      +            <SidebarMenuButton onClick={handleClick}
      isActive={isPageActive} className={cn(depth > 0 && "text-sm")}>

      +              <SidebarTooltip label={item.label} badge={item.badge}>

      +                <div className="flex-shrink-0">{item.icon}</div>

      +              </SidebarTooltip>

      +              <SidebarLabel>{item.label}</SidebarLabel>

      +              {item.badge && <SidebarBadge>{item.badge}</SidebarBadge>}

      +              {item.children && <ChevronDown className="w-3 h-3" />}

      +            </SidebarMenuButton>

      +            

      +            <DropdownMenu>

      +              <DropdownMenuTrigger asChild>

      +                <SidebarMenuAction>

      +                  <MoreHorizontal className="w-4 h-4" />

      +                </SidebarMenuAction>

      +              </DropdownMenuTrigger>

      +              <DropdownMenuContent side="right" align="start">

      +                <DropdownMenuItem>Add to favorites</DropdownMenuItem>

      +                <DropdownMenuItem>Move to folder</DropdownMenuItem>

      +              </DropdownMenuContent>

      +            </DropdownMenu>

      +          </SidebarMenuItem>

      +          {!isCollapsed && item.children && (

      +            <div className="space-y-1 mt-1 pl-6">

      +              {item.children.map(child => renderNavItem(child, depth +
      1))}

      +            </div>
                 )}
      -

      -          {/* Tooltip for collapsed state */}

      -          {isCollapsed && (

      -            <div className="absolute left-full ml-2 px-2 py-1 bg-popover
      text-popover-foreground text-sm rounded-md shadow-lg opacity-0
      group-hover:opacity-100 transition-opacity pointer-events-none
      whitespace-nowrap z-50">

      -              {item.label}

      -              {item.badge && (

      -                <span className="ml-2 bg-destructive
      text-destructive-foreground text-xs px-1.5 py-0.5 rounded-full">

      -                  {item.badge > 99 ? '99+' : item.badge}

      -                </span>

      -              )}

      -            </div>

      -          )}

      -        </button>

      -

      -        {/* Children items */}

      -        {item.children && !isCollapsed && (

      -          <div className="space-y-1">

      -            {item.children.map(child => renderNavItem(child, depth + 1))}

      -          </div>

      -        )}

      -      </div>

      +        </div>
             )
           }
       
           return (
      -      <div

      +      <Sidebar
               ref={ref}
      -        className={cn(

      -          "relative bg-card flex-shrink-0",

      -          "h-full overflow-hidden",

      -          isPeek && "shadow-xl z-40",

      -          compactMode && "text-sm"

      -        )}

      +        isCollapsed={isCollapsed}

      +        isPeek={isPeek}

      +        compactMode={compactMode}
               style={{ width: sidebarWidth }}
               onMouseEnter={onMouseEnter}
               onMouseLeave={onMouseLeave}
             >
      -        {/* Background blur effect for peek mode */}

      -        {isPeek && (

      -          <div className="absolute inset-0 bg-background/80
      backdrop-blur-sm" />

      -        )}

      -

      -        <div 

      -          ref={contentRef}

      -          className={cn(

      -            "relative z-10 h-full flex flex-col",

      -            compactMode ? "p-3" : "p-4"

      -          )}

      -        >

      -          {/* App Header */}

      -          <div 

      -            className={cn(

      -              "flex items-center gap-3",

      -              isCollapsed ? "justify-center" : "px-3",

      -              compactMode ? "h-10" : "h-16"

      -            )}

      -          >

      -            <div className="p-2 bg-primary/20 rounded-lg">

      -              <Rocket className="w-5 h-5 text-primary" />

      -            </div>

      -            {!isCollapsed && <h1 className="text-lg font-bold
      nav-label">Amazing App</h1>}

      -          </div>

      -

      -          {/* Navigation Sections */}

      -          <div className="flex-1 overflow-y-auto overflow-x-hidden
      space-y-6 pt-4">

      +          <SidebarHeader>

      +              <div className="p-2 bg-primary/20 rounded-lg">

      +                <Rocket className="w-5 h-5 text-primary" />

      +              </div>

      +              {!isCollapsed && <h1 className="text-lg font-bold
      ml-3">Amazing App</h1>}

      +          </SidebarHeader>

      +

      +          <SidebarBody>
                   {navigationSections.map((section, sectionIndex) => (
      -              const isExpanded = expandedSections.has(section.title)

      -

      -              return (

      -                <div 

      -                  key={section.title}

      -                  ref={el => sectionsRef.current[sectionIndex] = el}

      -                  className="space-y-1"

      -                >

      -                  {!isCollapsed && (

      -                    <div 

      -                      className={cn(

      -                        "flex items-center justify-between px-3 text-xs
      font-medium text-muted-foreground uppercase tracking-wider",

      -                        section.collapsible && "cursor-pointer
      hover:text-foreground transition-colors"

      -                      )}

      -                      onClick={() => section.collapsible &&
      toggleSection(section.title)}

      -                    >

      -                      <span
      className="section-title">{section.title}</span>

      -                      {section.collapsible && (

      -                        <ChevronDown 

      -                          className={cn(

      -                            "section-chevron w-3 h-3
      transition-transform",

      -                            isExpanded ? "rotate-0" : "-rotate-90"

      -                          )} 

      -                        />

      -                      )}

      -                    </div>

      -                  )}

      -                  

      -                  {(!section.collapsible || isExpanded || isCollapsed) &&
      (

      -                    <nav className="space-y-1">

      -                      {section.items.map(item => renderNavItem(item))}

      -                    </nav>

      -                  )}

      -                </div>

      -              )

      +              <SidebarSection 

      +                key={section.title}

      +                title={section.title}

      +                isCollapsible={section.collapsible}

      +              >

      +                {section.items.map(item => renderNavItem(item))}

      +              </SidebarSection>
                   ))}
      -          </div>

      -

      -          {/* Bottom Navigation */}

      -          <div className={cn("pt-4 border-t border-border", compactMode
      && "pt-3")}>

      -            <nav className="space-y-1">

      +          </SidebarBody>

      +

      +          <SidebarFooter>
                     {bottomNavItems.map((item) => renderNavItem(item))}
      -            </nav>
       
                   {/* Workspace Switcher */}
                   <div className={cn("mt-6", compactMode && "mt-4")}>
      @@ -276,9 +265,8 @@
                         </button>
                       </WorkspaceContent>
                     </Workspaces>
                   </div>
      -          </div>

      -        </div>

      -      </div>

      +          </SidebarFooter>

      +      </Sidebar>
           )
         }
       )

    patchStrategy: standard-diff
snapshot:
  src/components/ui/sidebar.tsx: null
  src/components/ui/dropdown-menu.tsx: null
  package.json: |-
    {
      "name": "amazing-app-shell",
      "private": true,
      "version": "0.0.0",
      "type": "module",
      "scripts": {
        "dev": "vite",
        "build": "tsc && vite build",
        "lint": "eslint . --ext ts,tsx --report-unused-disable-directives --max-warnings 0",
        "preview": "vite preview"
      },
      "dependencies": {
        "react": "^18.2.0",
        "react-dom": "^18.2.0",
        "gsap": "^3.12.2",
        "zustand": "^4.4.7",
        "lucide-react": "^0.294.0",
        "clsx": "^2.0.0",
        "tailwind-merge": "^2.0.0",
        "class-variance-authority": "^0.7.0",
        "@radix-ui/react-slot": "^1.0.2",
        "sonner": "^1.2.4",
        "@radix-ui/react-avatar": "^1.0.4",
        "@radix-ui/react-popover": "^1.0.7",
        "@radix-ui/react-dialog": "^1.0.5",
        "cmdk": "^0.2.0"
      },
      "devDependencies": {
        "@types/node": "^20.10.0",
        "@types/react": "^18.2.37",
        "@types/react-dom": "^18.2.15",
        "@typescript-eslint/eslint-plugin": "^6.10.0",
        "@typescript-eslint/parser": "^6.10.0",
        "@vitejs/plugin-react": "^4.1.1",
        "autoprefixer": "^10.4.16",
        "eslint": "^8.53.0",
        "eslint-plugin-react-hooks": "^4.6.0",
        "eslint-plugin-react-refresh": "^0.4.4",
        "postcss": "^8.4.31",
        "tailwindcss": "^3.3.5",
        "typescript": "^5.2.2",
        "vite": "^4.5.0",
        "tailwindcss-animate": "^1.0.7"
      }
    }
  src/components/EnhancedSidebar.tsx: |-
    import React, { forwardRef, useRef, useEffect } from 'react'
    import { gsap } from 'gsap'
    import { 
      Home, 
      Search, 
      Bell, 
      User,
      Settings, 
      HelpCircle, 
      FileText, 
      Calendar, 
      Mail,
      FolderOpen,
      Bookmark,
      Download,
      Star,
      Trash2,
      ChevronDown,
      Component,
      Plus,
      Rocket
    } from 'lucide-react'
    import { cn } from '@/lib/utils'
    import { useAppStore } from '@/store/appStore'
    import { SIDEBAR_STATES, BODY_STATES } from '@/lib/utils'
    import { 
        Workspaces, 
        WorkspaceTrigger, 
        WorkspaceContent, 
        type Workspace 
    } from './WorkspaceSwitcher';

    interface NavItem {
      icon: React.ReactNode
      label: string
      href: string
      badge?: number
      isActive?: boolean
      children?: NavItem[]
    }

    interface NavSection {
      title: string
      items: NavItem[]
      collapsible?: boolean
      defaultExpanded?: boolean
    }

    interface MyWorkspace extends Workspace {
        logo: string;
        plan: string;
    }

    const mockWorkspaces: MyWorkspace[] = [
        { id: 'ws1', name: 'Acme Inc.', logo: 'https://avatar.vercel.sh/acme.png', plan: 'Pro' },
        { id: 'ws2', name: 'Monsters Inc.', logo: 'https://avatar.vercel.sh/monsters.png', plan: 'Free' },
        { id: 'ws3', name: 'Stark Industries', logo: 'https://avatar.vercel.sh/stark.png', plan: 'Enterprise' },
    ];

    const navigationSections: NavSection[] = [
      {
        title: "Main",
        items: [
          { icon: <Home className="w-4 h-4" />, label: "Dashboard", href: "/" },
          { icon: <Search className="w-4 h-4" />, label: "Search", href: "/search" },
          { icon: <Bell className="w-4 h-4" />, label: "Notifications", href: "/notifications", badge: 3 },
        ]
      },
      {
        title: "Workspace",
        collapsible: true,
        defaultExpanded: true,
        items: [
          { 
            icon: <FileText className="w-4 h-4" />, 
            label: "Documents", 
            href: "/documents",
            children: [
              { icon: <FileText className="w-3 h-3" />, label: "Recent", href: "/documents/recent" },
              { icon: <Star className="w-3 h-3" />, label: "Starred", href: "/documents/starred" },
              { icon: <Trash2 className="w-3 h-3" />, label: "Trash", href: "/documents/trash" },
            ]
          },
          { icon: <FolderOpen className="w-4 h-4" />, label: "Projects", href: "/projects" },
          { icon: <Calendar className="w-4 h-4" />, label: "Calendar", href: "/calendar" },
          { icon: <Mail className="w-4 h-4" />, label: "Messages", href: "/messages", badge: 12 },
        ]
      },
      {
        title: "Personal",
        collapsible: true,
        defaultExpanded: false,
        items: [
          { icon: <Bookmark className="w-4 h-4" />, label: "Bookmarks", href: "/bookmarks" },
          { icon: <Star className="w-4 h-4" />, label: "Favorites", href: "/favorites" },
          { icon: <Download className="w-4 h-4" />, label: "Downloads", href: "/downloads" },
        ]
      },
      {
        title: "Components",
        collapsible: true,
        defaultExpanded: true,
        items: [
          { icon: <Component className="w-4 h-4" />, label: "Toaster", href: "/toaster" }
        ]
      }
    ]

    const bottomNavItems: NavItem[] = [
      { icon: <User className="w-4 h-4" />, label: "Profile", href: "/profile" },
      { icon: <Settings className="w-4 h-4" />, label: "Settings", href: "/settings" },
      { icon: <HelpCircle className="w-4 h-4" />, label: "Help", href: "/help" },
    ]

    interface SidebarProps {
      onMouseEnter?: () => void
      onMouseLeave?: () => void
    }

    export const EnhancedSidebar = forwardRef<HTMLDivElement, SidebarProps>(
      ({ onMouseEnter, onMouseLeave }, ref) => {
        const { sidebarState, sidebarWidth, reducedMotion, compactMode, activePage, setActivePage, openSidePane, bodyState, sidePaneContent } = useAppStore()
        const contentRef = useRef<HTMLDivElement>(null)
        const sectionsRef = useRef<(HTMLDivElement | null)[]>([])
        const [expandedSections, setExpandedSections] = React.useState<Set<string>>(
          new Set(navigationSections.filter(s => s.defaultExpanded).map(s => s.title))
        )

        const [selectedWorkspace, setSelectedWorkspace] = React.useState(mockWorkspaces[0]);
        const isCollapsed = sidebarState === SIDEBAR_STATES.COLLAPSED
        const isHidden = sidebarState === SIDEBAR_STATES.HIDDEN
        const isPeek = sidebarState === SIDEBAR_STATES.PEEK
        const animationDuration = reducedMotion ? 0.1 : 0.3

        // Toggle section expansion
        const toggleSection = (sectionTitle: string) => {
          setExpandedSections(prev => {
            const newSet = new Set(prev)
            if (newSet.has(sectionTitle)) {
              newSet.delete(sectionTitle)
            } else {
              newSet.add(sectionTitle)
            }
            return newSet
          })
        }

        // Animate content visibility
        useEffect(() => {
          if (!contentRef.current) return

          const labels = contentRef.current.querySelectorAll('.nav-label')
          const badges = contentRef.current.querySelectorAll('.nav-badge')
          const sectionTitles = contentRef.current.querySelectorAll('.section-title')
          const chevrons = contentRef.current.querySelectorAll('.section-chevron')

          if (isCollapsed) {
            gsap.to([labels, badges, sectionTitles, chevrons], {
              opacity: 0,
              scale: 0.8,
              duration: animationDuration,
              ease: "power2.out"
            })
          } else {
            gsap.to([labels, badges, sectionTitles, chevrons], {
              opacity: 1,
              scale: 1,
              duration: animationDuration,
              delay: 0.1,
              ease: "power2.out"
            })
          }
        }, [isCollapsed, animationDuration])

        // Hover animations for nav items
        const handleItemHover = (element: HTMLElement, isHovering: boolean) => {
          if (!element) return

          gsap.to(element, {
            scale: isHovering ? 1.02 : 1,
            x: isHovering ? 4 : 0,
            duration: animationDuration,
            ease: "power2.out"
          })
        }

        if (isHidden) {
          return null
        }

        const renderNavItem = (item: NavItem, depth = 0) => {
          const pageName = item.label.toLowerCase();
          const isDashboard = pageName === 'dashboard';
          const isSettings = pageName === 'settings';
          const isToaster = pageName === 'toaster';

          const isDashboardActive = activePage === 'dashboard';
          const isSettingsActive = activePage === 'settings' || (bodyState === BODY_STATES.SIDE_PANE && sidePaneContent === 'settings');
          const isToasterActive = activePage === 'toaster' || (bodyState === BODY_STATES.SIDE_PANE && sidePaneContent === 'toaster');
          const isPageActive = (isDashboard && isDashboardActive) || (isSettings && isSettingsActive) || (isToaster && isToasterActive);

          const handleClick = () => {
            if (isDashboard) {
              setActivePage('dashboard');
            } else if (isSettings) {
              const isSettingsInSidePane = bodyState === BODY_STATES.SIDE_PANE && sidePaneContent === 'settings'
              // If we're on the settings page and it's not in the side pane, treat this as a "minimize" action.
              if (activePage === 'settings' && !isSettingsInSidePane) {
                openSidePane('settings');
                setActivePage('dashboard');
              } else {
                // In all other cases (on dashboard page, or settings already in pane), just toggle the settings side pane.
                openSidePane('settings');
              }
            } else if (isToaster) {
              const isToasterInSidePane = bodyState === BODY_STATES.SIDE_PANE && sidePaneContent === 'toaster'
              // If we're on the toaster page and it's not in the side pane, treat this as a "minimize" action.
              if (activePage === 'toaster' && !isToasterInSidePane) {
                openSidePane('toaster');
                setActivePage('dashboard');
              } else {
                // In all other cases (on dashboard page, or toaster already in pane), just toggle the toaster side pane.
                openSidePane('toaster');
              }
            }
            // Could add logic for other links here if routing was implemented
          };

          return (
            <div key={item.label} className={cn("space-y-1", depth > 0 && "ml-6")}>
            <button
              className={cn(
                "group relative flex items-center gap-3 rounded-lg cursor-pointer transition-all duration-200 w-full text-left",
                compactMode ? "px-2 py-1.5" : "px-4 py-2.5",
                "hover:bg-accent",
                (item.isActive || isPageActive) && "bg-primary text-primary-foreground hover:bg-primary/90",
                depth > 0 && "text-sm",
                isCollapsed && "justify-center"
              )}
              onMouseEnter={(e) => handleItemHover(e.currentTarget, true)}
              onMouseLeave={(e) => handleItemHover(e.currentTarget, false)}
              onClick={handleClick}
            >
              <div className="flex-shrink-0">
                {item.icon}
              </div>
              
              {!isCollapsed && (
                <>
                  <span className="nav-label flex-1 font-medium truncate">
                    {item.label}
                  </span>
                  
                  {item.badge && (
                    <span className="nav-badge bg-destructive text-destructive-foreground text-xs px-1.5 py-0.5 rounded-full min-w-[1.25rem] text-center">
                      {item.badge > 99 ? '99+' : item.badge}
                    </span>
                  )}

                  {item.children && (
                    <ChevronDown className="w-3 h-3 transition-transform" />
                  )}
                </>
              )}

              {/* Tooltip for collapsed state */}
              {isCollapsed && (
                <div className="absolute left-full ml-2 px-2 py-1 bg-popover text-popover-foreground text-sm rounded-md shadow-lg opacity-0 group-hover:opacity-100 transition-opacity pointer-events-none whitespace-nowrap z-50">
                  {item.label}
                  {item.badge && (
                    <span className="ml-2 bg-destructive text-destructive-foreground text-xs px-1.5 py-0.5 rounded-full">
                      {item.badge > 99 ? '99+' : item.badge}
                    </span>
                  )}
                </div>
              )}
            </button>

            {/* Children items */}
            {item.children && !isCollapsed && (
              <div className="space-y-1">
                {item.children.map(child => renderNavItem(child, depth + 1))}
              </div>
            )}
          </div>
          )
        }

        return (
          <div
            ref={ref}
            className={cn(
              "relative bg-card flex-shrink-0",
              "h-full overflow-hidden",
              isPeek && "shadow-xl z-40",
              compactMode && "text-sm"
            )}
            style={{ width: sidebarWidth }}
            onMouseEnter={onMouseEnter}
            onMouseLeave={onMouseLeave}
          >
            {/* Background blur effect for peek mode */}
            {isPeek && (
              <div className="absolute inset-0 bg-background/80 backdrop-blur-sm" />
            )}

            <div 
              ref={contentRef}
              className={cn(
                "relative z-10 h-full flex flex-col",
                compactMode ? "p-3" : "p-4"
              )}
            >
              {/* App Header */}
              <div 
                className={cn(
                  "flex items-center gap-3",
                  isCollapsed ? "justify-center" : "px-3",
                  compactMode ? "h-10" : "h-16"
                )}
              >
                <div className="p-2 bg-primary/20 rounded-lg">
                  <Rocket className="w-5 h-5 text-primary" />
                </div>
                {!isCollapsed && <h1 className="text-lg font-bold nav-label">Amazing App</h1>}
              </div>

              {/* Navigation Sections */}
              <div className="flex-1 overflow-y-auto overflow-x-hidden space-y-6 pt-4">
                {navigationSections.map((section, sectionIndex) => {
                  const isExpanded = expandedSections.has(section.title)

                  return (
                    <div 
                      key={section.title}
                      ref={el => sectionsRef.current[sectionIndex] = el}
                      className="space-y-1"
                    >
                      {!isCollapsed && (
                        <div 
                          className={cn(
                            "flex items-center justify-between px-3 text-xs font-medium text-muted-foreground uppercase tracking-wider",
                            section.collapsible && "cursor-pointer hover:text-foreground transition-colors"
                          )}
                          onClick={() => section.collapsible && toggleSection(section.title)}
                        >
                          <span className="section-title">{section.title}</span>
                          {section.collapsible && (
                            <ChevronDown 
                              className={cn(
                                "section-chevron w-3 h-3 transition-transform",
                                isExpanded ? "rotate-0" : "-rotate-90"
                              )} 
                            />
                          )}
                        </div>
                      )}
                      
                      {(!section.collapsible || isExpanded || isCollapsed) && (
                        <nav className="space-y-1">
                          {section.items.map(item => renderNavItem(item))}
                        </nav>
                      )}
                    </div>
                  )
                })}
              </div>

              {/* Bottom Navigation */}
              <div className={cn("pt-4 border-t border-border", compactMode && "pt-3")}>
                <nav className="space-y-1">
                  {bottomNavItems.map((item) => renderNavItem(item))}
                </nav>

                {/* Workspace Switcher */}
                <div className={cn("mt-6", compactMode && "mt-4")}>
                  <Workspaces
                    workspaces={mockWorkspaces}
                    selectedWorkspaceId={selectedWorkspace.id}
                    onWorkspaceChange={setSelectedWorkspace}
                  >
                    <WorkspaceTrigger
                      collapsed={isCollapsed}
                      className={cn(
                        "rounded-xl transition-colors hover:bg-accent/50 w-full",
                        isCollapsed ? "p-2" : "p-3 bg-accent/50"
                      )}
                      avatarClassName={cn(compactMode ? "h-8 w-8" : "h-10 w-10")}
                    />
                    <WorkspaceContent>
                      <button className="flex w-full items-center gap-2 rounded-sm px-2 py-2 text-left text-sm hover:bg-accent hover:text-accent-foreground focus:outline-none">
                        <Plus className="h-4 w-4" />
                        <span>Create Workspace</span>
                      </button>
                    </WorkspaceContent>
                  </Workspaces>
                </div>
              </div>
            </div>
          </div>
        )
      }
    )

    EnhancedSidebar.displayName = "EnhancedSidebar"
approved: false
linesAdded: null
linesRemoved: null
linesDifference: null
gitCommittedAt: null
status: undone
id: 72
