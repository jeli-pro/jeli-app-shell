uuid: d89f921d-7212-4eb2-a60d-7d72111c6d2c
projectId: jeli-app-shell
createdAt: '2025-10-16T07:47:54.924Z'
gitCommitMsg: >-
  refactor(messaging): implement task-centric three-pane layout

  Refactors the messaging page to a three-pane layout (`List` | `Conversation` |
  `Properties`) inspired by modern task management applications like
  Asana/ClickUp. This enhances UX by focusing on the task itself rather than the
  contact profile.

  - The `MessagingPage` now manages its own resizable three-column layout,
  independent of the main app shell's right pane. - The `TaskHeader` is
  simplified to display only the task title and contact. - A new, unified
  `MessagingContent` component serves as the right-hand properties panel,
  centralizing all editable task fields (Status, Assignee, Priority, Tags) and
  including a concise contact summary. - Removed previous tabbed navigation and
  redundant panel components for a cleaner architecture.
promptSummary: >-
  The user requested to change the messaging layout to be more like a task
  management tool (e.g., Asana, ClickUp) rather than a contact profile view.
reasoning:
  - >-
    Excellent feedback. You're right, the previous design felt too much like a
    CRM contact profile. Shifting to a layout inspired by task management tools
    like Asana or ClickUp is a great idea. It will make the interface more
    focused and intuitive for managing the task at hand.
  - 'Here is my plan to implement this change:'
  - >-
    1.  **Adopt a Three-Pane Layout**: I will modify the core layout of the
    Messaging page to a permanent three-column view: `Task List` |
    `Conversation` | `Task Properties`. This is a classic, effective pattern for
    task management. I'll remove the dependency on the App Shell's right-hand
    pane for this page.
  - >-
    2.  **Simplify the Task Header**: The header above the conversation will be
    streamlined to only show the task title and the associated contact, removing
    all interactive elements.
  - >-
    3.  **Create a Unified Properties Panel**: I will completely redesign the
    right-hand panel (`MessagingContent`). It will no longer use tabs. Instead,
    it will be a single, scrollable panel containing all task metadata.
  - >-
    4.  **Centralize Task Editing**: All editable properties (Status, Assignee,
    Priority, Tags) will be moved into this new properties panel, making it the
    single source of truth for task management.
  - >-
    5.  **Integrate Contact Details**: A concise summary of contact information
    will be included within the properties panel, keeping relevant context close
    without dominating the view.
  - >-
    6.  **Clean Up**: I will delete the now-redundant panel components
    (`AIInsightsPanel`, `ContactInfoPanel`, `TaskPropertiesPanel`) to keep the
    codebase clean.
  - Let's begin the refactoring.
  - '### Step 1: Adjust Application Layout Logic'
  - >-
    First, I'll prevent the Messaging page from triggering the app-wide split
    view. This gives the page itself full control over its layout.
  - '### Step 2: Implement the Three-Pane Layout'
  - >-
    Now, I'll update the `MessagingPage` to have three resizable columns for the
    task list, conversation, and the new properties panel.
  - '### Step 3: Simplify the Task Header'
  - >-
    I'll strip the `TaskHeader` down to its essential elements, moving all
    editable controls to the new properties panel.
  - '### Step 4: Build the New Task Properties Panel'
  - >-
    This is the core of the change. `MessagingContent` is completely rebuilt to
    be the single-pane task properties sidebar, including all editable fields
    and contact info.
  - '### Step 5: Clean Up Redundant Components'
  - >-
    Finally, I'll delete the old panel components which have now been superseded
    by the new, unified `MessagingContent` panel.
  - >-
    This comprehensive refactoring aligns the Messaging view with modern task
    management UI patterns, creating a more focused, powerful, and intuitive
    user experience.
operations:
  - type: write
    path: src/hooks/useAppViewManager.hook.ts
    content: >+
      --- src/hooks/useAppViewManager.hook.ts

      +++ src/hooks/useAppViewManager.hook.ts

      @@ -43,11 +43,6 @@
             return { bodyState: BODY_STATES.SIDE_PANE, sidePaneContent: 'dataItem' as const };
           }
       
      -    // 3. Messaging conversation view (always split)

      -    if (conversationId) {

      -      return { bodyState: BODY_STATES.SPLIT_VIEW, sidePaneContent:
      'messaging' as const };

      -    }

      -
           // 4. Generic split view via URL param
           if (view === 'split' && right && validPanes.includes(right as AppShellState['sidePaneContent'])) {
             return { bodyState: BODY_STATES.SPLIT_VIEW, sidePaneContent: right as AppShellState['sidePaneContent'] };

    patchStrategy: standard-diff
  - type: write
    path: src/pages/Messaging/index.tsx
    content: >-
      import React, { useState, useRef, useEffect, useCallback } from "react";

      import { useParams } from "react-router-dom";

      import { TaskList } from "./components/TaskList";

      import { TaskDetail } from "./components/TaskDetail";

      import { MessagingContent } from "./components/MessagingContent";

      import { cn } from "@/lib/utils";


      // A hook to manage two resizers for a three-pane layout

      const useResizableThreePanes = (
        containerRef: React.RefObject<HTMLDivElement>
      ) => {
        const [isResizingLeft, setIsResizingLeft] = useState(false);
        const [isResizingRight, setIsResizingRight] = useState(false);
        const [listWidth, setListWidth] = useState(320);
        const [contentWidth, setContentWidth] = useState(340);

        const handleLeftMouseDown = useCallback((e: React.MouseEvent<HTMLDivElement>) => {
          e.preventDefault();
          setIsResizingLeft(true);
        }, []);
        
        const handleRightMouseDown = useCallback((e: React.MouseEvent<HTMLDivElement>) => {
          e.preventDefault();
          setIsResizingRight(true);
        }, []);

        useEffect(() => {
          const handleMouseMove = (e: MouseEvent) => {
            if (!containerRef.current) return;
            const containerRect = containerRef.current.getBoundingClientRect();
            
            if (isResizingLeft) {
              const newWidth = e.clientX - containerRect.left;
              setListWidth(Math.max(280, Math.min(newWidth, containerRect.width - contentWidth - 400)));
            } else if (isResizingRight) {
              const newWidth = containerRect.right - e.clientX;
              setContentWidth(Math.max(300, Math.min(newWidth, containerRect.width - listWidth - 400)));
            }
          };

          const handleMouseUp = () => {
            setIsResizingLeft(false);
            setIsResizingRight(false);
          };

          const isResizing = isResizingLeft || isResizingRight;

          if (isResizing) {
            document.body.style.cursor = 'col-resize';
            document.body.style.userSelect = 'none';
            window.addEventListener('mousemove', handleMouseMove);
            window.addEventListener('mouseup', handleMouseUp, { once: true });
          }

          return () => {
            window.removeEventListener('mousemove', handleMouseMove);
            window.removeEventListener('mouseup', handleMouseUp);
            if (document.body) {
              document.body.style.cursor = '';
              document.body.style.userSelect = '';
            }
          };
        }, [isResizingLeft, isResizingRight, containerRef, listWidth, contentWidth]);

        return { 
          listWidth, 
          contentWidth,
          handleLeftMouseDown,
          handleRightMouseDown, 
          isResizing: isResizingLeft || isResizingRight 
        };
      };


      const Resizer: React.FC<{ onMouseDown: (e:
      React.MouseEvent<HTMLDivElement>) => void }> = ({ onMouseDown }) => (
        <div onMouseDown={onMouseDown} className="w-2 flex-shrink-0 cursor-col-resize group flex items-center justify-center">
          <div className="w-0.5 h-full bg-border group-hover:bg-primary transition-colors duration-200" />
        </div>
      );


      export default function MessagingPage() {
        const { conversationId } = useParams<{ conversationId?: string }>();
        const containerRef = useRef<HTMLDivElement>(null);

        const { 
          listWidth, 
          contentWidth, 
          handleLeftMouseDown,
          handleRightMouseDown,
          isResizing 
        } = useResizableThreePanes(containerRef);

        return (
          <div 
            ref={containerRef}
            className={cn(
              "h-full w-full flex bg-background",
              isResizing && "cursor-col-resize select-none"
            )}
          >
            {/* Left Pane: Task List */}
            <div style={{ width: `${listWidth}px` }} className="flex-shrink-0 h-full">
              <TaskList />
            </div>

            <Resizer onMouseDown={handleLeftMouseDown} />

            {/* Middle Pane: Conversation Detail */}
            <div className="flex-1 min-w-0 h-full">
              <TaskDetail />
            </div>

            {/* Right Pane: Task Properties */}
            {conversationId && (
              <>
                <Resizer onMouseDown={handleRightMouseDown} />
                <div style={{ width: `${contentWidth}px` }} className="flex-shrink-0 h-full border-l bg-background/80">
                  <MessagingContent conversationId={conversationId} />
                </div>
              </>
            )}
          </div>
        );
      }
    patchStrategy: replace
  - type: write
    path: src/pages/Messaging/components/TaskHeader.tsx
    content: >
      --- src/pages/Messaging/components/TaskHeader.tsx

      +++ src/pages/Messaging/components/TaskHeader.tsx

      @@ -1,78 +1,19 @@
       import React from 'react';
      -import { useMessagingStore } from '../store/messaging.store';

      -import type { Task, TaskStatus, TaskPriority, Assignee, Contact } from
      '../types';

      -import {

      -  DropdownMenu,

      -  DropdownMenuContent,

      -  DropdownMenuItem,

      -  DropdownMenuRadioGroup,

      -  DropdownMenuRadioItem,

      -  DropdownMenuTrigger,

      -  DropdownMenuSeparator

      -} from '@/components/ui/dropdown-menu';

      -import { Button } from '@/components/ui/button';

      -import { Avatar, AvatarFallback, AvatarImage } from
      '@/components/ui/avatar';

      -import { ChevronDown, Inbox, Zap, Shield, Clock } from 'lucide-react';

      -

      -const statusOptions: { value: TaskStatus; label: string; icon:
      React.ReactNode }[] = [

      -    { value: 'open', label: 'Open', icon: <Inbox className="w-4 h-4 mr-2"
      /> },

      -    { value: 'in-progress', label: 'In Progress', icon: <Zap
      className="w-4 h-4 mr-2" /> },

      -    { value: 'done', label: 'Done', icon: <Shield className="w-4 h-4
      mr-2" /> },

      -    { value: 'snoozed', label: 'Snoozed', icon: <Clock className="w-4 h-4
      mr-2" /> },

      -];

      -

      -const priorityOptions: { value: TaskPriority; label: string; icon:
      React.ReactNode }[] = [

      -    { value: 'high', label: 'High', icon: <div className="w-2.5 h-2.5
      rounded-full bg-red-500 mr-2" /> },

      -    { value: 'medium', label: 'Medium', icon: <div className="w-2.5 h-2.5
      rounded-full bg-yellow-500 mr-2" /> },

      -    { value: 'low', label: 'Low', icon: <div className="w-2.5 h-2.5
      rounded-full bg-green-500 mr-2" /> },

      -    { value: 'none', label: 'None', icon: <div className="w-2.5 h-2.5
      rounded-full bg-gray-400 mr-2" /> },

      -];

      -

      +import type { Task, Assignee, Contact } from '../types';
       
       interface TaskHeaderProps {
         task: (Task & { contact: Contact; assignee: Assignee | null });
       }
       
       export const TaskHeader: React.FC<TaskHeaderProps> = ({ task }) => {
      -  const { updateTask, assignees } = useMessagingStore();

      -  const currentStatus = statusOptions.find(o => o.value === task.status);

      -  const currentPriority = priorityOptions.find(o => o.value ===
      task.priority);

      -
         return (
           <div className="flex items-center gap-4 p-4 border-b h-20 flex-shrink-0 bg-background/80 backdrop-blur-sm">
             <div className="flex-1 overflow-hidden">
               <h2 className="font-bold text-lg truncate" title={task.title}>{task.title}</h2>
               <p className="text-sm text-muted-foreground">
                 with <a href="#" className="hover:underline font-medium text-foreground/80">{task.contact.name}</a>
               </p>
             </div>
      -      <div className="flex items-center gap-2">

      -        {/* Assignee Dropdown */}

      -        <DropdownMenu>

      -            <DropdownMenuTrigger asChild>

      -                <Button variant="ghost" size="sm" className="gap-2">

      -                    {task.assignee ? (

      -                        <Avatar className="h-6 w-6"><AvatarImage
      src={task.assignee.avatar}
      /><AvatarFallback>{task.assignee.name.charAt(0)}</AvatarFallback></Avatar>

      -                    ) : (

      -                        <Avatar className="h-6
      w-6"><AvatarFallback>?</AvatarFallback></Avatar>

      -                    )}

      -                    <span className="hidden
      sm:inline">{task.assignee?.name || 'Unassigned'}</span>

      -                    <ChevronDown className="w-4 h-4
      text-muted-foreground" />

      -                </Button>

      -            </DropdownMenuTrigger>

      -            <DropdownMenuContent align="end">

      -                <DropdownMenuRadioGroup value={task.assigneeId || 'null'}
      onValueChange={val => updateTask(task.id, { assigneeId: val === 'null' ?
      null : val })}>

      -                    <DropdownMenuRadioItem
      value="null">Unassigned</DropdownMenuRadioItem>

      -                    <DropdownMenuSeparator />

      -                    {assignees.map(a => (

      -                        <DropdownMenuRadioItem key={a.id} value={a.id}>

      -                            <Avatar className="h-5 w-5 mr-2"><AvatarImage
      src={a.avatar}
      /><AvatarFallback>{a.name.charAt(0)}</AvatarFallback></Avatar>

      -                            {a.name}

      -                        </DropdownMenuRadioItem>

      -                    ))}

      -                </DropdownMenuRadioGroup>

      -            </DropdownMenuContent>

      -        </DropdownMenu>

      -

      -        {/* Status Dropdown */}

      -        <DropdownMenu>

      -            <DropdownMenuTrigger asChild>

      -                <Button variant="ghost" size="sm" className="gap-2">

      -                    {currentStatus?.icon} {currentStatus?.label}

      -                </Button>

      -            </DropdownMenuTrigger>

      -            <DropdownMenuContent align="end">

      -                 {statusOptions.map(o => (

      -                    <DropdownMenuItem key={o.value} onClick={() =>
      updateTask(task.id, { status: o.value })}>

      -                        {o.icon} {o.label}

      -                    </DropdownMenuItem>

      -                ))}

      -            </DropdownMenuContent>

      -        </DropdownMenu>

      -        

      -        {/* Priority Dropdown */}

      -        <DropdownMenu>

      -            <DropdownMenuTrigger asChild>

      -                <Button variant="ghost" size="sm" className="gap-2">

      -                    {currentPriority?.icon} {currentPriority?.label}

      -                </Button>

      -            </DropdownMenuTrigger>

      -            <DropdownMenuContent align="end">

      -                 {priorityOptions.map(o => (

      -                    <DropdownMenuItem key={o.value} onClick={() =>
      updateTask(task.id, { priority: o.value })}>

      -                        {o.icon} {o.label}

      -                    </DropdownMenuItem>

      -                ))}

      -            </DropdownMenuContent>

      -        </DropdownMenu>

      -      </div>
           </div>
         );
       };
    patchStrategy: standard-diff
  - type: write
    path: src/pages/Messaging/components/MessagingContent.tsx
    content: >-
      import React from 'react';

      import { useMessagingStore } from '../store/messaging.store';

      import type { Task, Contact, Assignee, TaskStatus, TaskPriority } from
      '../types';

      import { Avatar, AvatarFallback, AvatarImage } from
      '@/components/ui/avatar';

      import { Badge } from '@/components/ui/badge';

      import { Button } from '@/components/ui/button';

      import { format } from 'date-fns';

      import {
        Inbox, Zap, Shield, Clock, Calendar, Hash, User, Mail, Phone, Briefcase, ChevronDown, Plus, X
      } from 'lucide-react';

      import { cn } from '@/lib/utils';

      import {
        DropdownMenu,
        DropdownMenuContent,
        DropdownMenuItem,
        DropdownMenuRadioGroup,
        DropdownMenuRadioItem,
        DropdownMenuTrigger,
        DropdownMenuSeparator
      } from '@/components/ui/dropdown-menu';

      import { Popover, PopoverContent, PopoverTrigger } from
      '@/components/ui/popover';

      import { Command, CommandEmpty, CommandGroup, CommandInput, CommandItem,
      CommandList } from '@/components/ui/command';


      // --- Data for Dropdowns ---

      const statusOptions: { value: TaskStatus; label: string; icon:
      React.ReactNode }[] = [
          { value: 'open', label: 'Open', icon: <Inbox className="w-4 h-4 mr-2" /> },
          { value: 'in-progress', label: 'In Progress', icon: <Zap className="w-4 h-4 mr-2" /> },
          { value: 'done', label: 'Done', icon: <Shield className="w-4 h-4 mr-2" /> },
          { value: 'snoozed', label: 'Snoozed', icon: <Clock className="w-4 h-4 mr-2" /> },
      ];


      const priorityOptions: { value: TaskPriority; label: string; icon:
      React.ReactNode }[] = [
          { value: 'high', label: 'High', icon: <div className="w-2.5 h-2.5 rounded-full bg-red-500" /> },
          { value: 'medium', label: 'Medium', icon: <div className="w-2.5 h-2.5 rounded-full bg-yellow-500" /> },
          { value: 'low', label: 'Low', icon: <div className="w-2.5 h-2.5 rounded-full bg-green-500" /> },
          { value: 'none', label: 'None', icon: <div className="w-2.5 h-2.5 rounded-full bg-gray-400" /> },
      ];


      // --- Sub-components ---

      interface DetailRowProps {
          icon: React.ReactNode;
          label: string;
          children: React.ReactNode;
      }

      const DetailRow: React.FC<DetailRowProps> = ({ icon, label, children }) =>
      (
          <div className="grid grid-cols-3 items-start gap-3 text-sm py-2">
              <dt className="col-span-1 text-muted-foreground flex items-center gap-2"><div className="w-4 flex justify-center">{icon}</div>{label}</dt>
              <dd className="col-span-2 font-medium text-foreground/90 flex items-center">{children}</dd>
          </div>
      );


      // --- Main Component ---

      interface MessagingContentProps {
        conversationId: string;
      }


      export const MessagingContent: React.FC<MessagingContentProps> = ({
      conversationId }) => {
        const task = useMessagingStore(state => state.getTaskById(conversationId));
        const { updateTask, assignees, getAvailableTags } = useMessagingStore();
        const availableTags = React.useMemo(() => getAvailableTags(), [getAvailableTags]);

        if (!task) {
          return (
            <div className="h-full flex items-center justify-center p-6">
              <p className="text-muted-foreground">Task not found.</p>
            </div>
          );
        }
        
        const { contact } = task;
        const currentStatus = statusOptions.find(o => o.value === task.status);
        const currentPriority = priorityOptions.find(o => o.value === task.priority);

        const handleTagToggle = (tag: string) => {
          const newTags = task.tags.includes(tag)
            ? task.tags.filter(t => t !== tag)
            : [...task.tags, tag];
          updateTask(task.id, { tags: newTags });
        };

        return (
          <div className="h-full flex flex-col">
            <div className="p-4 border-b">
              <h3 className="font-semibold text-lg">Task Properties</h3>
            </div>
            <div className="flex-1 overflow-y-auto p-4">
              <dl className="divide-y divide-border">
                {/* Status */}
                <DetailRow icon={<Inbox />} label="Status">
                  <DropdownMenu>
                    <DropdownMenuTrigger asChild>
                      <Button variant="ghost" size="sm" className="gap-2 -ml-2">
                        {currentStatus?.icon} {currentStatus?.label}
                      </Button>
                    </DropdownMenuTrigger>
                    <DropdownMenuContent align="start">
                      {statusOptions.map(o => (
                        <DropdownMenuItem key={o.value} onClick={() => updateTask(task.id, { status: o.value })}>
                          {o.icon} {o.label}
                        </DropdownMenuItem>
                      ))}
                    </DropdownMenuContent>
                  </DropdownMenu>
                </DetailRow>

                {/* Assignee */}
                <DetailRow icon={<User />} label="Assignee">
                  <DropdownMenu>
                    <DropdownMenuTrigger asChild>
                      <Button variant="ghost" size="sm" className="gap-2 -ml-2">
                        {task.assignee ? (
                          <Avatar className="h-5 w-5"><AvatarImage src={task.assignee.avatar} /><AvatarFallback>{task.assignee.name.charAt(0)}</AvatarFallback></Avatar>
                        ) : ( <div className="h-5 w-5 rounded-full bg-muted border flex items-center justify-center text-xs">?</div> )}
                        <span className="truncate max-w-[120px]">{task.assignee?.name || 'Unassigned'}</span>
                        <ChevronDown className="w-4 h-4 text-muted-foreground ml-auto" />
                      </Button>
                    </DropdownMenuTrigger>
                    <DropdownMenuContent align="start">
                      <DropdownMenuRadioGroup value={task.assigneeId || 'null'} onValueChange={val => updateTask(task.id, { assigneeId: val === 'null' ? null : val })}>
                        <DropdownMenuRadioItem value="null">Unassigned</DropdownMenuRadioItem>
                        <DropdownMenuSeparator />
                        {assignees.map(a => (
                          <DropdownMenuRadioItem key={a.id} value={a.id}>
                            <Avatar className="h-5 w-5 mr-2"><AvatarImage src={a.avatar} /><AvatarFallback>{a.name.charAt(0)}</AvatarFallback></Avatar>
                            {a.name}
                          </DropdownMenuRadioItem>
                        ))}
                      </DropdownMenuRadioGroup>
                    </DropdownMenuContent>
                  </DropdownMenu>
                </DetailRow>

                {/* Priority */}
                <DetailRow icon={<Zap />} label="Priority">
                  <DropdownMenu>
                    <DropdownMenuTrigger asChild>
                      <Button variant="ghost" size="sm" className="gap-2 -ml-2">
                        {currentPriority?.icon} {currentPriority?.label}
                      </Button>
                    </DropdownMenuTrigger>
                    <DropdownMenuContent align="start">
                      {priorityOptions.map(o => (
                        <DropdownMenuItem key={o.value} onClick={() => updateTask(task.id, { priority: o.value })}>
                          <div className="w-6 flex items-center">{o.icon}</div>
                          {o.label}
                        </DropdownMenuItem>
                      ))}
                    </DropdownMenuContent>
                  </DropdownMenu>
                </DetailRow>

                {/* Due Date */}
                <DetailRow icon={<Calendar />} label="Due Date">
                  <span className="text-sm">{task.dueDate ? format(new Date(task.dueDate), 'MMM d, yyyy') : 'No due date'}</span>
                </DetailRow>
                
                {/* Tags */}
                <DetailRow icon={<Hash />} label="Tags">
                   <div className="flex flex-wrap gap-1.5 items-center">
                      {task.tags.map(t => (
                        <Badge variant="secondary" key={t} className="pr-1.5">
                          {t}
                          <button onClick={() => handleTagToggle(t)} className="ml-1 rounded-full hover:bg-background p-0.5"><X className="w-3 h-3" /></button>
                        </Badge>
                      ))}
                      <Popover>
                          <PopoverTrigger asChild>
                            <Button variant="ghost" size="icon" className="h-6 w-6 rounded-full"><Plus className="w-4 h-4" /></Button>
                          </PopoverTrigger>
                          <PopoverContent className="w-[200px] p-0" align="start">
                            <Command>
                              <CommandInput placeholder="Add tag..." />
                              <CommandList>
                                <CommandEmpty>No tags found.</CommandEmpty>
                                <CommandGroup>
                                  {availableTags.filter(t => !task.tags.includes(t)).map(t => (
                                    <CommandItem key={t} onSelect={() => handleTagToggle(t)}>{t}</CommandItem>
                                  ))}
                                </CommandGroup>
                              </CommandList>
                            </Command>
                          </PopoverContent>
                      </Popover>
                   </div>
                </DetailRow>
              </dl>
              
              {/* Contact Details Section */}
              <div className="mt-6 pt-6 border-t">
                  <h4 className="font-semibold mb-2">Contact Details</h4>
                  <div className="flex items-center gap-3 mb-4">
                      <Avatar className="h-10 w-10 border">
                          <AvatarImage src={contact.avatar} alt={contact.name} />
                          <AvatarFallback className="text-lg">{contact.name.charAt(0)}</AvatarFallback>
                      </Avatar>
                      <div>
                          <p className="font-semibold">{contact.name}</p>
                          <p className="text-xs text-muted-foreground">{contact.online ? 'Online' : `Last seen ${contact.lastSeen}`}</p>
                      </div>
                  </div>
                  <div className="space-y-3 text-sm">
                      <div className="flex items-center gap-3"><Mail className="w-4 h-4 text-muted-foreground" /><a href={`mailto:${contact.email}`} className="hover:underline break-all">{contact.email}</a></div>
                      <div className="flex items-center gap-3"><Phone className="w-4 h-4 text-muted-foreground" /><span>{contact.phone}</span></div>
                      <div className="flex items-center gap-3"><Briefcase className="w-4 h-4 text-muted-foreground" /><span>{contact.role} at <strong>{contact.company}</strong></span></div>
                  </div>
              </div>
            </div>
          </div>
        );
      };
    patchStrategy: replace
  - type: delete
    path: src/pages/Messaging/components/AIInsightsPanel.tsx
  - type: delete
    path: src/pages/Messaging/components/ContactInfoPanel.tsx
  - type: delete
    path: src/pages/Messaging/components/TaskPropertiesPanel.tsx
snapshot:
  src/pages/Messaging/components/TaskHeader.tsx: >
    import React from 'react';

    import { useMessagingStore } from '../store/messaging.store';

    import type { Task, TaskStatus, TaskPriority, Assignee, Contact } from
    '../types';

    import {
      DropdownMenu,
      DropdownMenuContent,
      DropdownMenuItem,
      DropdownMenuRadioGroup,
      DropdownMenuRadioItem,
      DropdownMenuTrigger,
      DropdownMenuSeparator
    } from '@/components/ui/dropdown-menu';

    import { Button } from '@/components/ui/button';

    import { Avatar, AvatarFallback, AvatarImage } from
    '@/components/ui/avatar';

    import { ChevronDown, Inbox, Zap, Shield, Clock } from 'lucide-react';


    const statusOptions: { value: TaskStatus; label: string; icon:
    React.ReactNode }[] = [
        { value: 'open', label: 'Open', icon: <Inbox className="w-4 h-4 mr-2" /> },
        { value: 'in-progress', label: 'In Progress', icon: <Zap className="w-4 h-4 mr-2" /> },
        { value: 'done', label: 'Done', icon: <Shield className="w-4 h-4 mr-2" /> },
        { value: 'snoozed', label: 'Snoozed', icon: <Clock className="w-4 h-4 mr-2" /> },
    ];


    const priorityOptions: { value: TaskPriority; label: string; icon:
    React.ReactNode }[] = [
        { value: 'high', label: 'High', icon: <div className="w-2.5 h-2.5 rounded-full bg-red-500 mr-2" /> },
        { value: 'medium', label: 'Medium', icon: <div className="w-2.5 h-2.5 rounded-full bg-yellow-500 mr-2" /> },
        { value: 'low', label: 'Low', icon: <div className="w-2.5 h-2.5 rounded-full bg-green-500 mr-2" /> },
        { value: 'none', label: 'None', icon: <div className="w-2.5 h-2.5 rounded-full bg-gray-400 mr-2" /> },
    ];



    interface TaskHeaderProps {
      task: (Task & { contact: Contact; assignee: Assignee | null });
    }


    export const TaskHeader: React.FC<TaskHeaderProps> = ({ task }) => {
      const { updateTask, assignees } = useMessagingStore();
      const currentStatus = statusOptions.find(o => o.value === task.status);
      const currentPriority = priorityOptions.find(o => o.value === task.priority);

      return (
        <div className="flex items-center gap-4 p-4 border-b h-20 flex-shrink-0 bg-background/80 backdrop-blur-sm">
          <div className="flex-1 overflow-hidden">
            <h2 className="font-bold text-lg truncate" title={task.title}>{task.title}</h2>
            <p className="text-sm text-muted-foreground">
              with <a href="#" className="hover:underline font-medium text-foreground/80">{task.contact.name}</a>
            </p>
          </div>
          <div className="flex items-center gap-2">
            {/* Assignee Dropdown */}
            <DropdownMenu>
                <DropdownMenuTrigger asChild>
                    <Button variant="ghost" size="sm" className="gap-2">
                        {task.assignee ? (
                            <Avatar className="h-6 w-6"><AvatarImage src={task.assignee.avatar} /><AvatarFallback>{task.assignee.name.charAt(0)}</AvatarFallback></Avatar>
                        ) : (
                            <Avatar className="h-6 w-6"><AvatarFallback>?</AvatarFallback></Avatar>
                        )}
                        <span className="hidden sm:inline">{task.assignee?.name || 'Unassigned'}</span>
                        <ChevronDown className="w-4 h-4 text-muted-foreground" />
                    </Button>
                </DropdownMenuTrigger>
                <DropdownMenuContent align="end">
                    <DropdownMenuRadioGroup value={task.assigneeId || 'null'} onValueChange={val => updateTask(task.id, { assigneeId: val === 'null' ? null : val })}>
                        <DropdownMenuRadioItem value="null">Unassigned</DropdownMenuRadioItem>
                        <DropdownMenuSeparator />
                        {assignees.map(a => (
                            <DropdownMenuRadioItem key={a.id} value={a.id}>
                                <Avatar className="h-5 w-5 mr-2"><AvatarImage src={a.avatar} /><AvatarFallback>{a.name.charAt(0)}</AvatarFallback></Avatar>
                                {a.name}
                            </DropdownMenuRadioItem>
                        ))}
                    </DropdownMenuRadioGroup>
                </DropdownMenuContent>
            </DropdownMenu>

            {/* Status Dropdown */}
            <DropdownMenu>
                <DropdownMenuTrigger asChild>
                    <Button variant="ghost" size="sm" className="gap-2">
                        {currentStatus?.icon} {currentStatus?.label}
                    </Button>
                </DropdownMenuTrigger>
                <DropdownMenuContent align="end">
                     {statusOptions.map(o => (
                        <DropdownMenuItem key={o.value} onClick={() => updateTask(task.id, { status: o.value })}>
                            {o.icon} {o.label}
                        </DropdownMenuItem>
                    ))}
                </DropdownMenuContent>
            </DropdownMenu>
            
            {/* Priority Dropdown */}
            <DropdownMenu>
                <DropdownMenuTrigger asChild>
                    <Button variant="ghost" size="sm" className="gap-2">
                        {currentPriority?.icon} {currentPriority?.label}
                    </Button>
                </DropdownMenuTrigger>
                <DropdownMenuContent align="end">
                     {priorityOptions.map(o => (
                        <DropdownMenuItem key={o.value} onClick={() => updateTask(task.id, { priority: o.value })}>
                            {o.icon} {o.label}
                        </DropdownMenuItem>
                    ))}
                </DropdownMenuContent>
            </DropdownMenu>
          </div>
        </div>
      );
    };
  src/hooks/useAppViewManager.hook.ts: "import { useMemo, useCallback, useEffect, useRef } from 'react';\nimport { useSearchParams, useNavigate, useLocation, useParams } from 'react-router-dom';\nimport { useAppShellStore, type AppShellState, type ActivePage } from '@/store/appShell.store';\nimport type { DataItem, ViewMode, SortConfig, SortableField, GroupableField, Status, Priority } from '@/pages/DataDemo/types';\nimport type { FilterConfig } from '@/pages/DataDemo/components/DataToolbar';\nimport { BODY_STATES, SIDEBAR_STATES } from '@/lib/utils';\n\nconst pageToPaneMap: Record<string, AppShellState['sidePaneContent']> = {\n  dashboard: 'main',\n  settings: 'settings',\n  toaster: 'toaster',\n  notifications: 'notifications',\n  'data-demo': 'dataDemo',\n  messaging: 'messaging',\n};\n\nfunction usePrevious<T>(value: T): T | undefined {\n  const ref = useRef<T>();\n  useEffect(() => {\n    ref.current = value;\n  });\n  return ref.current;\n}\n\n/**\n * A centralized hook to manage and synchronize all URL-based view states.\n * This is the single source of truth for view modes, side panes, split views,\n * and page-specific parameters.\n */\nexport function useAppViewManager() {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const navigate = useNavigate();\n  const location = useLocation();\n  const params = useParams<{ itemId: string; conversationId: string }>();\n  const { itemId, conversationId } = params;\n  const { setSidebarState, sidebarState } = useAppShellStore();\n\n  // --- DERIVED STATE FROM URL ---\n\n  const view = searchParams.get('view');\n  const sidePane = searchParams.get('sidePane');\n  const right = searchParams.get('right');\n\n  const { bodyState, sidePaneContent } = useMemo(() => {\n    const validPanes: AppShellState['sidePaneContent'][] = ['details', 'settings', 'main', 'toaster', 'notifications', 'dataDemo', 'messaging'];\n    \n    // 1. Priority: Explicit side pane overlay via URL param\n    if (sidePane && validPanes.includes(sidePane as AppShellState['sidePaneContent'])) {\n      return { bodyState: BODY_STATES.SIDE_PANE, sidePaneContent: sidePane as AppShellState['sidePaneContent'] };\n    }\n\n    // 2. Data item detail view (can be overlay or split)\n    if (itemId) {\n      if (view === 'split') {\n        return { bodyState: BODY_STATES.SPLIT_VIEW, sidePaneContent: 'dataItem' as const };\n      }\n      return { bodyState: BODY_STATES.SIDE_PANE, sidePaneContent: 'dataItem' as const };\n    }\n\n    // 3. Messaging conversation view (always split)\n    if (conversationId) {\n      return { bodyState: BODY_STATES.SPLIT_VIEW, sidePaneContent: 'messaging' as const };\n    }\n\n    // 4. Generic split view via URL param\n    if (view === 'split' && right && validPanes.includes(right as AppShellState['sidePaneContent'])) {\n      return { bodyState: BODY_STATES.SPLIT_VIEW, sidePaneContent: right as AppShellState['sidePaneContent'] };\n    }\n\n    return { bodyState: BODY_STATES.NORMAL, sidePaneContent: 'details' as const };\n  }, [itemId, conversationId, view, sidePane, right]);\n  \n  const currentActivePage = useMemo(() => (location.pathname.split('/')[1] || 'dashboard') as ActivePage, [location.pathname]);\n  const prevActivePage = usePrevious(currentActivePage);\n\n  // --- SIDE EFFECTS ---\n  useEffect(() => {\n    // On navigating to messaging page, collapse sidebar if it's expanded.\n    // This ensures a good default view but allows the user to expand it again if they wish.\n    if (currentActivePage === 'messaging' && prevActivePage !== 'messaging' && sidebarState === SIDEBAR_STATES.EXPANDED) {\n      setSidebarState(SIDEBAR_STATES.COLLAPSED);\n    }\n  }, [currentActivePage, prevActivePage, sidebarState, setSidebarState]);\n\n  // DataDemo specific state\n  const viewMode = useMemo(() => (searchParams.get('view') as ViewMode) || 'list', [searchParams]);\n\tconst page = useMemo(() => parseInt(searchParams.get('page') || '1', 10), [searchParams]);\n\tconst groupBy = useMemo(() => (searchParams.get('groupBy') as GroupableField | 'none') || 'none', [searchParams]);\n\tconst activeGroupTab = useMemo(() => searchParams.get('tab') || 'all', [searchParams]);\n\tconst filters = useMemo<FilterConfig>(\n\t\t() => ({\n\t\t\tsearchTerm: searchParams.get('q') || '',\n\t\t\tstatus: (searchParams.get('status')?.split(',') || []).filter(Boolean) as Status[],\n\t\t\tpriority: (searchParams.get('priority')?.split(',') || []).filter(Boolean) as Priority[],\n\t\t}),\n\t\t[searchParams],\n\t);\n\tconst sortConfig = useMemo<SortConfig | null>(() => {\n\t\tconst sortParam = searchParams.get('sort');\n\t\tif (!sortParam) return { key: 'updatedAt', direction: 'desc' }; // Default sort\n\t\tif (sortParam === 'default') return null;\n\n\t\tconst [key, direction] = sortParam.split('-');\n\t\treturn { key: key as SortableField, direction: direction as 'asc' | 'desc' };\n\t}, [searchParams]);\n\n  // --- MUTATOR ACTIONS ---\n\n  const handleParamsChange = useCallback(\n\t\t(newParams: Record<string, string | string[] | null | undefined>, resetPage = false) => {\n\t\t\tsetSearchParams(\n\t\t\t\t(prev) => {\n\t\t\t\t\tconst updated = new URLSearchParams(prev);\n\t\t\t\t\t\n\t\t\t\t\tfor (const [key, value] of Object.entries(newParams)) {\n\t\t\t\t\t\tif (value === null || value === undefined || (Array.isArray(value) && value.length === 0) || value === '') {\n\t\t\t\t\t\t\tupdated.delete(key);\n\t\t\t\t\t\t} else if (Array.isArray(value)) {\n\t\t\t\t\t\t\tupdated.set(key, value.join(','));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tupdated.set(key, String(value));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (resetPage) {\n\t\t\t\t\t\tupdated.delete('page');\n\t\t\t\t\t}\n\t\t\t\t\tif ('groupBy' in newParams) {\n\t\t\t\t\t\tupdated.delete('tab');\n\t\t\t\t\t}\n\n\t\t\t\t\treturn updated;\n\t\t\t\t},\n\t\t\t\t{ replace: true },\n\t\t\t);\n\t\t},\n\t\t[setSearchParams],\n\t);\n\n  const navigateTo = useCallback((page: string) => {\n    navigate(page.startsWith('/') ? page : `/${page}`);\n  }, [navigate]);\n\n  const openSidePane = useCallback((pane: AppShellState['sidePaneContent']) => {\n    if (location.pathname === `/${Object.keys(pageToPaneMap).find(key => pageToPaneMap[key] === pane)}`) {\n        navigate({ pathname: '/dashboard', search: `?sidePane=${pane}` }, { replace: true });\n    } else {\n        handleParamsChange({ sidePane: pane, view: null, right: null });\n    }\n  }, [handleParamsChange, navigate, location.pathname]);\n\n  const closeSidePane = useCallback(() => {\n    if (itemId) {\n      navigate('/data-demo');\n    } else {\n      handleParamsChange({ sidePane: null, view: null, right: null });\n    }\n  }, [itemId, navigate, handleParamsChange]);\n\n  const toggleSidePane = useCallback((pane: AppShellState['sidePaneContent']) => {\n    if (sidePane === pane) {\n      closeSidePane();\n    } else {\n      openSidePane(pane);\n    }\n  }, [sidePane, openSidePane, closeSidePane]);\n\n  const toggleSplitView = useCallback(() => {\n    if (bodyState === BODY_STATES.SIDE_PANE) {\n      handleParamsChange({ view: 'split', right: sidePane, sidePane: null });\n    } else if (bodyState === BODY_STATES.SPLIT_VIEW) {\n      handleParamsChange({ sidePane: right, view: null, right: null });\n    } else { // From normal\n      const paneContent = pageToPaneMap[currentActivePage] || 'details';\n      handleParamsChange({ view: 'split', right: paneContent, sidePane: null });\n    }\n  }, [bodyState, sidePane, right, currentActivePage, handleParamsChange]);\n  \n  const setNormalView = useCallback(() => {\n      handleParamsChange({ sidePane: null, view: null, right: null });\n  }, [handleParamsChange]);\n\n  const switchSplitPanes = useCallback(() => {\n    if (bodyState !== BODY_STATES.SPLIT_VIEW) return;\n    const newSidePaneContent = pageToPaneMap[currentActivePage];\n    const newActivePage = Object.entries(pageToPaneMap).find(\n      ([, value]) => value === sidePaneContent\n    )?.[0] as ActivePage | undefined;\n\n    if (newActivePage && newSidePaneContent) {\n      navigate(`/${newActivePage}?view=split&right=${newSidePaneContent}`, { replace: true });\n    }\n  }, [bodyState, currentActivePage, sidePaneContent, navigate]);\n  \n  const closeSplitPane = useCallback((paneToClose: 'main' | 'right') => {\n    if (bodyState !== BODY_STATES.SPLIT_VIEW) return;\n    if (paneToClose === 'right') {\n      navigate(`/${currentActivePage}`, { replace: true });\n    } else { // Closing main pane\n      const pageToBecomeActive = Object.entries(pageToPaneMap).find(\n        ([, value]) => value === sidePaneContent\n      )?.[0] as ActivePage | undefined;\n      \n      if (pageToBecomeActive) {\n        navigate(`/${pageToBecomeActive}`, { replace: true });\n      } else {\n        navigate(`/dashboard`, { replace: true });\n      }\n    }\n  }, [bodyState, currentActivePage, sidePaneContent, navigate]);\n  \n  // DataDemo actions\n  const setViewMode = (mode: ViewMode) => handleParamsChange({ view: mode });\n  const setGroupBy = (val: string) => handleParamsChange({ groupBy: val === 'none' ? null : val }, true);\n  const setActiveGroupTab = (tab: string) => handleParamsChange({ tab: tab === 'all' ? null : tab });\n  const setFilters = (newFilters: FilterConfig) => {\n    handleParamsChange({ q: newFilters.searchTerm, status: newFilters.status, priority: newFilters.priority }, true);\n  }\n  const setSort = (config: SortConfig | null) => {\n    if (!config) {\n      handleParamsChange({ sort: 'default' }, true);\n    } else {\n      handleParamsChange({ sort: `${config.key}-${config.direction}` }, true);\n    }\n  }\n  const setTableSort = (field: SortableField) => {\n    let newSort: string | null = `${field}-desc`;\n    if (sortConfig?.key === field) {\n      if (sortConfig.direction === 'desc') newSort = `${field}-asc`;\n      else if (sortConfig.direction === 'asc') newSort = 'default';\n    }\n    handleParamsChange({ sort: newSort }, true);\n  };\n  const setPage = (newPage: number) => handleParamsChange({ page: newPage.toString() });\n\n  const onItemSelect = useCallback((item: DataItem) => {\n\t\tnavigate(`/data-demo/${item.id}${location.search}`);\n\t}, [navigate, location.search]);\n\n\n  return useMemo(() => ({\n    // State\n    bodyState,\n    sidePaneContent,\n    currentActivePage,\n    itemId,\n    // DataDemo State\n    viewMode,\n    page,\n    groupBy,\n    activeGroupTab,\n    filters,\n    sortConfig,\n    // Actions\n    navigateTo,\n    openSidePane,\n    closeSidePane,\n    toggleSidePane,\n    toggleSplitView,\n    setNormalView,\n    switchSplitPanes,\n    closeSplitPane,\n    // DataDemo Actions\n    onItemSelect,\n    setViewMode,\n    setGroupBy,\n    setActiveGroupTab,\n    setFilters,\n    setSort,\n    setTableSort,\n    setPage,\n  }), [\n    bodyState, sidePaneContent, currentActivePage, itemId,\n    viewMode, page, groupBy, activeGroupTab, filters, sortConfig,\n    navigateTo, openSidePane, closeSidePane, toggleSidePane, toggleSplitView, setNormalView, \n    switchSplitPanes, closeSplitPane, onItemSelect, setViewMode, setGroupBy, setActiveGroupTab, setFilters,\n    setSort, setTableSort, setPage\n  ]);\n}"
  src/pages/Messaging/index.tsx: |-
    import React, { useState, useRef, useEffect, useCallback } from "react";
    import { useParams } from "react-router-dom";
    import { TaskList } from "./components/TaskList";
    import { TaskDetail } from "./components/TaskDetail";
    import { cn } from "@/lib/utils";

    const useResizableMessagingPanes = (
      containerRef: React.RefObject<HTMLDivElement>,
      initialWidth: number = 320
    ) => {
      const [isResizing, setIsResizing] = useState(false);
      const [listWidth, setListWidth] = useState(initialWidth);

      const handleMouseDown = useCallback((e: React.MouseEvent<HTMLDivElement>) => {
        e.preventDefault();
        setIsResizing(true);
      }, []);

      useEffect(() => {
        const handleMouseMove = (e: MouseEvent) => {
          if (!isResizing || !containerRef.current) return;
          const containerRect = containerRef.current.getBoundingClientRect();
          const newWidth = e.clientX - containerRect.left;
          // Constraints for the conversation list pane
          setListWidth(Math.max(280, Math.min(newWidth, containerRect.width - 500)));
        };

        const handleMouseUp = () => {
          setIsResizing(false);
        };

        if (isResizing) {
          document.body.style.cursor = 'col-resize';
          document.body.style.userSelect = 'none';
          window.addEventListener('mousemove', handleMouseMove);
          window.addEventListener('mouseup', handleMouseUp, { once: true });
        }

        return () => {
          window.removeEventListener('mousemove', handleMouseMove);
          window.removeEventListener('mouseup', handleMouseUp);
          if (document.body) {
            document.body.style.cursor = '';
            document.body.style.userSelect = '';
          }
        };
      }, [isResizing, containerRef]);

      return { listWidth, handleMouseDown, isResizing };
    };

    export default function MessagingPage() {
      const { conversationId } = useParams<{ conversationId?: string }>();
      const containerRef = useRef<HTMLDivElement>(null);

      const { listWidth, handleMouseDown, isResizing } = useResizableMessagingPanes(containerRef);

      return (
        <div 
          ref={containerRef}
          className={cn(
            "h-full w-full flex bg-background",
            isResizing && "cursor-col-resize select-none"
          )}
        >
          <div style={{ width: `${listWidth}px` }} className="flex-shrink-0 h-full">
            <TaskList />
          </div>
          <div onMouseDown={handleMouseDown} className="w-2 flex-shrink-0 cursor-col-resize group flex items-center justify-center">
            <div className="w-0.5 h-full bg-border group-hover:bg-primary transition-colors duration-200" />
          </div>
          <div className="flex-1 min-w-0 h-full">
            <TaskDetail />
          </div>
        </div>
      );
    }
  src/pages/Messaging/components/AIInsightsPanel.tsx: >-
    import React from 'react';

    import type { Task, Contact, Assignee } from '../types';

    import { Badge } from '@/components/ui/badge';

    import { Button } from '@/components/ui/button';

    import { Sparkles, Reply, ThumbsUp, ThumbsDown, Copy } from 'lucide-react';

    import { toast } from 'sonner';


    interface AIInsightsPanelProps {
      task: (Task & { contact: Contact; assignee: Assignee | null });
    }


    export const AIInsightsPanel: React.FC<AIInsightsPanelProps> = ({ task }) =>
    {
        const { aiSummary } = task;

        const handleCopy = (text: string) => {
            navigator.clipboard.writeText(text);
            toast.success('Copied to clipboard!');
        };

        return (
            <div className="space-y-6">
                <div className="flex items-center gap-2">
                    <span className="font-semibold text-sm">Sentiment:</span>
                    <Badge variant={
                      aiSummary.sentiment === 'positive' ? 'default' : aiSummary.sentiment === 'negative' ? 'destructive' : 'secondary'
                    } className="capitalize">
                      {aiSummary.sentiment === 'positive' && <ThumbsUp className="w-3 h-3 mr-1.5" />}
                      {aiSummary.sentiment === 'negative' && <ThumbsDown className="w-3 h-3 mr-1.5" />}
                      {aiSummary.sentiment}
                    </Badge>
                </div>
                <div>
                    <h4 className="font-semibold mb-2 flex items-center gap-2 text-sm"><Sparkles className="w-4 h-4 text-yellow-500" /> Key Points</h4>
                    <ul className="list-disc list-inside space-y-1.5 text-sm text-muted-foreground pl-2">
                      {aiSummary.summaryPoints.map((point, i) => <li key={i}>{point}</li>)}
                    </ul>
                </div>
                <div>
                    <h4 className="font-semibold mb-2 flex items-center gap-2 text-sm"><Reply className="w-4 h-4 text-blue-500" /> Suggested Replies</h4>
                    <div className="flex flex-col gap-2">
                      {aiSummary.suggestedReplies.map((reply, i) => (
                        <Button 
                          key={i} 
                          variant="ghost" 
                          size="sm" 
                          className="w-full justify-between text-left h-auto py-2 px-3 group"
                          onClick={() => handleCopy(reply)}
                        >
                          <span className="pr-4">{reply}</span>
                          <Copy className="w-4 h-4 text-muted-foreground group-hover:text-foreground transition-colors flex-shrink-0" />
                        </Button>
                      ))}
                    </div>
                </div>
            </div>
        )
    }
  src/pages/Messaging/components/ContactInfoPanel.tsx: >-
    import React from 'react';

    import { format } from 'date-fns';

    import { Mail, Phone, Briefcase, StickyNote, PhoneCall, Calendar, Send }
    from 'lucide-react';

    import type { Task, Contact, Assignee, ActivityEvent, ActivityEventType }
    from '../types';

    import { cn } from '@/lib/utils';

    import { Button } from '@/components/ui/button';

    import { Textarea } from '@/components/ui/textarea';


    const DetailRow: React.FC<{icon: React.ReactNode, children:
    React.ReactNode}> = ({ icon, children }) => (
        <div className="flex items-start gap-3 text-sm">
            <div className="w-4 h-4 text-muted-foreground mt-0.5 flex-shrink-0">{icon}</div>
            <div className="flex-1 text-foreground/90 break-all">{children}</div>
        </div>
    );


    const activityIcons: Record<ActivityEventType, React.ElementType> = {
        note: StickyNote,
        call: PhoneCall,
        email: Mail,
        meeting: Calendar,
    };


    const ActivityItem = ({ item }: { item: ActivityEvent }) => {
        const Icon = activityIcons[item.type];
        return (
          <div className="flex items-start gap-4">
            <div className="mt-1.5 h-8 flex items-center justify-center">
                <div className="h-full w-0.5 bg-border"></div>
                <div className="absolute p-1.5 bg-background border rounded-full">
                    <Icon className="w-3.5 h-3.5 text-muted-foreground" />
                </div>
            </div>
            <div className="flex-1 text-sm pt-1.5 pb-5"><p>{item.content}</p><p className="text-xs text-muted-foreground mt-1">{format(new Date(item.timestamp), "MMM d, yyyy 'at' h:mm a")}</p></div>
          </div>
        )
    };


    interface ContactInfoPanelProps {
      task: (Task & { contact: Contact; assignee: Assignee | null });
    }


    export const ContactInfoPanel: React.FC<ContactInfoPanelProps> = ({ task })
    => {
        const { contact } = task;
        return (
            <div className="space-y-8">
                {/* Contact Details */}
                <div className="space-y-4">
                    <h4 className="font-semibold text-sm">Contact Details</h4>
                    <DetailRow icon={<Mail />}>{contact.email}</DetailRow>
                    <DetailRow icon={<Phone />}>{contact.phone}</DetailRow>
                    <DetailRow icon={<Briefcase />}>
                        {contact.role} at <strong>{contact.company}</strong>
                    </DetailRow>
                </div>
                
                {/* Activity */}
                <div className="space-y-1">
                    <h4 className="font-semibold text-sm mb-4">Activity</h4>
                    <div className="relative">
                        {contact.activity.map(item => <ActivityItem key={item.id} item={item} />)}
                    </div>
                </div>

                {/* Notes */}
                <div className="space-y-4">
                    <h4 className="font-semibold text-sm">Notes</h4>
                    {contact.notes.map(note => (
                        <div key={note.id} className="text-sm bg-accent/50 p-3 rounded-lg"><p className="mb-1.5">{note.content}</p><p className="text-xs text-muted-foreground">{format(new Date(note.createdAt), "MMM d, yyyy")}</p></div>
                    ))}
                    <div className="relative">
                        <Textarea placeholder="Add a new note..." className="min-h-[60px]" />
                        <Button size="icon" className="absolute right-2 bottom-2 h-7 w-7"><Send className="w-3.5 h-3.5" /></Button>
                    </div>
                </div>
            </div>
        )
    }
  src/pages/Messaging/components/MessagingContent.tsx: >-
    import React, { useState, useMemo } from 'react';

    import { useMessagingStore } from '../store/messaging.store';

    import { TaskPropertiesPanel } from './TaskPropertiesPanel';

    import { ContactInfoPanel } from './ContactInfoPanel';

    import { AIInsightsPanel } from './AIInsightsPanel';

    import { AnimatedTabs } from '@/components/ui/animated-tabs';

    import { TechOrbitDisplay } from '@/components/effects/OrbitingCircles';

    import { Avatar, AvatarFallback, AvatarImage } from
    '@/components/ui/avatar';

    import { Badge } from '@/components/ui/badge';

    import { Button } from '@/components/ui/button';

    import { StickyNote, PhoneCall, Mail, CheckSquare } from 'lucide-react';


    interface MessagingContentProps {
      conversationId?: string;
    }


    export const MessagingContent: React.FC<MessagingContentProps> = ({
    conversationId }) => {
      const [activeTab, setActiveTab] = useState('task');
      const task = useMessagingStore(state => conversationId ? state.getTaskById(conversationId) : undefined);
      
      const tabs = useMemo(() => [
        { id: 'task', label: 'Task' },
        { id: 'contact', label: 'Contact' },
        { id: 'ai', label: 'AI Insights' },
      ], []);

      if (!task) {
        return (
          <div className="h-full flex-1 flex flex-col items-center justify-center bg-background p-6 relative overflow-hidden">
            <TechOrbitDisplay text="Context" />
            <div className="text-center z-10 bg-background/50 backdrop-blur-sm p-6 rounded-lg">
                <h3 className="mt-4 text-lg font-medium">Select a Task</h3>
                <p className="mt-1 text-sm text-muted-foreground">
                    Task details and contact information will appear here.
                </p>
            </div>
          </div>
        );
      }
      
      const { contact } = task;

      return (
        <div className="h-full flex-1 flex flex-col bg-background overflow-y-auto">
          {/* Persistent Header */}
          <div className="p-6 space-y-4 border-b">
            <div className="flex items-start gap-4">
              <Avatar className="h-16 w-16 border">
                <AvatarImage src={contact.avatar} alt={contact.name} />
                <AvatarFallback className="text-2xl">{contact.name.charAt(0)}</AvatarFallback>
              </Avatar>
              <div className="flex-1 pt-1">
                <h2 className="text-xl font-bold">{contact.name}</h2>
                <p className="text-sm text-muted-foreground">
                  {contact.online ? 'Online' : `Last seen ${contact.lastSeen}`}
                </p>
                 <div className="flex flex-wrap gap-1.5 mt-2">
                    {contact.tags.map(tag => (
                      <Badge key={tag} variant="secondary" className="text-xs">{tag}</Badge>
                    ))}
                </div>
              </div>
            </div>
             {/* Action Buttons */}
            <div className="grid grid-cols-2 sm:grid-cols-4 gap-2">
                <Button variant="outline" size="sm" className="gap-2"><StickyNote className="w-3.5 h-3.5" /> Note</Button>
                <Button variant="outline" size="sm" className="gap-2"><PhoneCall className="w-3.5 h-3.5" /> Call</Button>
                <Button variant="outline" size="sm" className="gap-2"><Mail className="w-3.5 h-3.5" /> Email</Button>
                <Button variant="outline" size="sm" className="gap-2"><CheckSquare className="w-3.5 h-3.5" /> Task</Button>
            </div>
          </div>

          <div className="flex-shrink-0 border-b bg-background/80 backdrop-blur-sm sticky top-0 z-10">
            <AnimatedTabs tabs={tabs} activeTab={activeTab} onTabChange={setActiveTab} className="px-6" />
          </div>

          <div className="flex-1 p-6">
            {activeTab === 'task' && <TaskPropertiesPanel task={task} />}
            {activeTab === 'contact' && <ContactInfoPanel task={task} />}
            {activeTab === 'ai' && <AIInsightsPanel task={task} />}
          </div>
        </div>
      );
    };
  src/pages/Messaging/components/TaskPropertiesPanel.tsx: >-
    import React from 'react';

    import { useMessagingStore } from '../store/messaging.store';

    import type { Task, Contact, Assignee, TaskStatus, TaskPriority } from
    '../types';

    import { Avatar, AvatarFallback, AvatarImage } from
    '@/components/ui/avatar';

    import { Badge } from '@/components/ui/badge';

    import { format } from 'date-fns';

    import { Inbox, Zap, Shield, Clock, Calendar, Hash, User, MessageSquare }
    from 'lucide-react';

    import { cn } from '@/lib/utils';



    const getStatusInfo = (status: TaskStatus) => {
        switch(status) {
            case 'open': return { label: 'Open', icon: <Inbox className="w-4 h-4" />, color: 'text-blue-500' };
            case 'in-progress': return { label: 'In Progress', icon: <Zap className="w-4 h-4" />, color: 'text-yellow-500' };
            case 'done': return { label: 'Done', icon: <Shield className="w-4 h-4" />, color: 'text-green-500' };
            case 'snoozed': return { label: 'Snoozed', icon: <Clock className="w-4 h-4" />, color: 'text-gray-500' };
        }
    };


    const getPriorityInfo = (priority: TaskPriority) => {
        switch(priority) {
            case 'high': return { label: 'High', icon: <div className="w-2.5 h-2.5 rounded-full bg-red-500" /> };
            case 'medium': return { label: 'Medium', icon: <div className="w-2.5 h-2.5 rounded-full bg-yellow-500" /> };
            case 'low': return { label: 'Low', icon: <div className="w-2.5 h-2.5 rounded-full bg-green-500" /> };
            default: return { label: 'None', icon: <div className="w-2.5 h-2.5 rounded-full bg-gray-400" /> };
        }
    };


    interface DetailRowProps {
        icon: React.ReactNode;
        label: string;
        children: React.ReactNode;
        className?: string;
    }

    const DetailRow: React.FC<DetailRowProps> = ({ icon, label, children,
    className }) => (
        <div className={cn("grid grid-cols-3 items-start gap-3 text-sm", className)}>
            <dt className="col-span-1 text-muted-foreground flex items-center gap-2 pt-0.5"><div className="w-4 flex justify-center">{icon}</div>{label}</dt>
            <dd className="col-span-2 font-medium text-foreground/90">{children}</dd>
        </div>
    );


    interface TaskPropertiesPanelProps {
      task: (Task & { contact: Contact; assignee: Assignee | null });
    }


    export const TaskPropertiesPanel: React.FC<TaskPropertiesPanelProps> = ({
    task }) => {
        const status = getStatusInfo(task.status);
        const priority = getPriorityInfo(task.priority);

        return (
            <dl className="space-y-4">
                    <DetailRow icon={status.icon} label="Status">
                        <span className={cn("flex items-center gap-2", status.color)}>
                            {status.label}
                        </span>
                    </DetailRow>
                    <DetailRow icon={priority.icon} label="Priority">
                        <span>{priority.label}</span>
                    </DetailRow>
                    <DetailRow icon={<User />} label="Assignee">
                        {task.assignee ? (
                            <div className="flex items-center gap-2">
                                 <Avatar className="h-5 w-5"><AvatarImage src={task.assignee.avatar} /><AvatarFallback>{task.assignee.name.charAt(0)}</AvatarFallback></Avatar>
                                 {task.assignee.name}
                            </div>
                        ) : 'Unassigned'}
                    </DetailRow>
                    <DetailRow icon={<Calendar />} label="Due Date">
                        {task.dueDate ? format(new Date(task.dueDate), 'MMM d, yyyy') : 'No due date'}
                    </DetailRow>
                    <DetailRow icon={<MessageSquare />} label="Channel">
                        <span className="capitalize">{task.channel}</span>
                    </DetailRow>
                     <DetailRow icon={<Hash />} label="Tags">
                        <div className="flex flex-wrap gap-1.5">
                            {task.tags.length > 0 ? task.tags.map(t => <Badge variant="secondary" key={t}>{t}</Badge>) : 'No tags'}
                        </div>
                    </DetailRow>
            </dl>
        )
    }
approved: false
linesAdded: null
linesRemoved: null
linesDifference: null
gitCommittedAt: null
status: undone
id: 332
