uuid: 44026ca2-63b7-4c07-b640-621ca9424e60
projectId: jeli-app-shell
createdAt: '2025-10-21T10:50:43.623Z'
gitCommitMsg: >-
  refactor(dynamic-view): Propagate generics through components and context

  This commit completes Part 2 of the type-safety refactoring plan. It
  introduces generic parameters to the core `DynamicView` component, its React
  context, and the `useDynamicView` hook.

  - `DynamicView` and `DynamicViewProvider` are now generic, accepting
  `TFieldId` and `TItem` to enforce type constraints on the `viewConfig` and
  `items` props. - `useDynamicView` is now a generic hook that provides a
  strongly-typed context to consumer components. - All child view components
  (`ListView`, `CardView`, `TableView`, `KanbanView`, `CalendarView`) and shared
  components (`FieldRenderer`, `ViewControls`) have been updated to consume the
  new generic context, ensuring that data and configuration properties are
  correctly typed throughout the component tree.
promptSummary: I have executed Part 2 of the type-safety refactor for the DynamicView system.
reasoning:
  - >-
    Executing Part 2 of our refactoring plan. I will now propagate the new
    generic types through the `DynamicView` component ecosystem. This involves
    making the React context, the main `DynamicView` component, and all the
    child view components aware of these new generic types. This will thread
    type safety from the top-level configuration all the way down to the
    individual field renderers.
  - '### Step 1: Update `DynamicViewContext` to be Generic'
  - >-
    First, I'll modify the core context to be generic. This is the central hub
    for the `DynamicView`, and making it generic allows it to distribute the
    strongly-typed configuration and data to all child components. I'll also
    update the provider and the `useDynamicView` hook accordingly.
  - '### Step 2: Make `DynamicView` a Generic Component'
  - >-
    Next, I'll update the main `DynamicView` component. It will now be a generic
    component that accepts the typed `viewConfig` and `items` array, passing
    those types down to the `DynamicViewProvider` to be distributed throughout
    the component tree.
  - '### Step 3: Update Child Components to Consume Typed Context'
  - >-
    Finally, I'll update all the child components that consume the context. They
    will now receive strongly-typed data and configuration from the
    `useDynamicView` hook. I'll use a safe generic cast (`useDynamicView<string,
    GenericItem>()`) inside these components to keep them simple and non-generic
    themselves, while still benefiting from the typed context provided by their
    parent.
  - >-
    With these changes, Part 2 is complete. The generic types are now flowing
    from the top-level `DynamicView` component, through the context provider,
    and into all the consumer components, setting the stage for a fully
    type-safe configuration.
  - '---'
  - >-
    - No changes to
    `src/features/dynamic-view/components/shared/DetailPanel.tsx` are required
    in this step.
  - '- No changes to other files.'
  - >-
    I've reviewed all changes, and they align with the plan for Part 2. The
    system is now internally consistent with the new generic types.
operations:
  - type: write
    path: src/features/dynamic-view/DynamicViewContext.tsx
    content: >+
      --- src/features/dynamic-view/DynamicViewContext.tsx

      +++ src/features/dynamic-view/DynamicViewContext.tsx

      @@ -1,47 +1,47 @@
       import { createContext, useContext, useMemo, type ReactNode } from 'react';
      -import type { ViewConfig, GenericItem, ViewMode, FilterConfig,
      SortConfig, CalendarDateProp, CalendarDisplayProp, CalendarColorProp }
      from './types';

      +import type { ViewConfig, GenericItem, ViewMode, FilterConfig,
      SortConfig, CalendarDateProp, CalendarDisplayProp, CalendarColorProp,
      GroupableField } from './types';
       
      -export interface DynamicViewContextProps {

      -  config: ViewConfig;

      -  data: GenericItem[];

      -  getFieldDef: (fieldId: string) => ViewConfig['fields'][number] |
      undefined;

      +export interface DynamicViewContextProps<TFieldId extends string, TItem
      extends GenericItem> {

      +  config: ViewConfig<TFieldId, TItem>;

      +  data: TItem[];

      +  getFieldDef: (fieldId: TFieldId) => ViewConfig<TFieldId,
      TItem>['fields'][number] | undefined;
       
         // Data & State from parent
      -  items: GenericItem[];

      +  items: TItem[];
         isLoading: boolean;
         isInitialLoading: boolean;
         totalItemCount: number;
         hasMore: boolean;
       
         // Controlled State Props from parent
         viewMode: ViewMode;
         filters: FilterConfig;
      -  sortConfig: SortConfig | null;

      -  groupBy: string;

      +  sortConfig: SortConfig<TFieldId> | null;

      +  groupBy: GroupableField<TFieldId>;
         activeGroupTab: string;
         page: number;
         selectedItemId?: string;
         // Calendar-specific state
      -  calendarDateProp?: CalendarDateProp;

      -  calendarDisplayProps?: CalendarDisplayProp[];

      +  calendarDateProp?: CalendarDateProp<TFieldId>;

      +  calendarDisplayProps?: CalendarDisplayProp<TFieldId>[];
         calendarItemLimit?: 'all' | number;
      -  calendarColorProp?: CalendarColorProp;

      +  calendarColorProp?: CalendarColorProp<TFieldId>;
       
         // Callbacks to parent
         onViewModeChange: (mode: ViewMode) => void;
         onFiltersChange: (filters: FilterConfig) => void;
      -  onSortChange: (sort: SortConfig | null) => void;

      -  onGroupByChange: (group: string) => void;

      +  onSortChange: (sort: SortConfig<TFieldId> | null) => void;

      +  onGroupByChange: (group: GroupableField<TFieldId>) => void;
         onActiveGroupTabChange: (tab: string) => void;
         onPageChange: (page: number) => void;
      -  onItemSelect: (item: GenericItem) => void;

      -  onItemUpdate?: (itemId: string, updates: Partial<GenericItem>) => void;

      +  onItemSelect: (item: TItem) => void;

      +  onItemUpdate?: (itemId: string, updates: Partial<TItem>) => void;
         // Calendar-specific callbacks
      -  onCalendarDatePropChange?: (prop: CalendarDateProp) => void;

      -  onCalendarDisplayPropsChange?: (props: CalendarDisplayProp[]) => void;

      +  onCalendarDatePropChange?: (prop: CalendarDateProp<TFieldId>) => void;

      +  onCalendarDisplayPropsChange?: (props: CalendarDisplayProp<TFieldId>[])
      => void;
         onCalendarItemLimitChange?: (limit: 'all' | number) => void;
      -  onCalendarColorPropChange?: (prop: CalendarColorProp) => void;

      +  onCalendarColorPropChange?: (prop: CalendarColorProp<TFieldId>) =>
      void;
       }
       
      -const DynamicViewContext = createContext<DynamicViewContextProps |
      null>(null);

      +const DynamicViewContext = createContext<DynamicViewContextProps<any,
      any> | null>(null);
       
      -interface DynamicViewProviderProps extends Omit<DynamicViewContextProps,
      'getFieldDef' | 'config' | 'data'> {

      -  viewConfig: ViewConfig,

      +interface DynamicViewProviderProps<TFieldId extends string, TItem extends
      GenericItem> extends Omit<DynamicViewContextProps<TFieldId, TItem>,
      'getFieldDef' | 'config' | 'data'> {

      +  viewConfig: ViewConfig<TFieldId, TItem>,
         children: ReactNode;
       }
       
      -export function DynamicViewProvider({ viewConfig, children, ...rest }:
      DynamicViewProviderProps) {

      +export function DynamicViewProvider<TFieldId extends string, TItem
      extends GenericItem>({ viewConfig, children, ...rest }:
      DynamicViewProviderProps<TFieldId, TItem>) {
         const fieldDefsById = useMemo(() => {
           return new Map(viewConfig.fields.map(field => [field.id, field]));
         }, [viewConfig.fields]);
       
      -  const getFieldDef = (fieldId: string) => {

      +  const getFieldDef = (fieldId: TFieldId) => {
           return fieldDefsById.get(fieldId);
         };
       
      @@ -58,11 +58,11 @@
         );
       }
       
      -export function useDynamicView() {

      +export function useDynamicView<TFieldId extends string, TItem extends
      GenericItem>() {
         const context = useContext(DynamicViewContext);
         if (!context) {
           throw new Error('useDynamicView must be used within a DynamicViewProvider');
         }
      -  return context;

      +  return context as DynamicViewContextProps<TFieldId, TItem>;
       }

    patchStrategy: standard-diff
  - type: write
    path: src/features/dynamic-view/DynamicView.tsx
    content: >+
      --- src/features/dynamic-view/DynamicView.tsx

      +++ src/features/dynamic-view/DynamicView.tsx

      @@ -2,7 +2,7 @@
       import { Loader2 } from 'lucide-react';
       import { gsap } from 'gsap';
       import { DynamicViewProvider } from '@/features/dynamic-view/DynamicViewContext';
      -import type { ViewConfig, GenericItem, ViewMode, FilterConfig,
      SortConfig, CalendarDateProp, CalendarDisplayProp, CalendarColorProp,
      StatItem } from './types';

      +import type { ViewConfig, GenericItem, ViewMode, FilterConfig,
      SortConfig, CalendarDateProp, CalendarDisplayProp, CalendarColorProp,
      StatItem, GroupableField } from './types';
       import { ViewControls } from './components/controls/ViewControls';
       import { ViewModeSelector } from './components/controls/ViewModeSelector';
       import { AnimatedLoadingSkeleton } from './components/shared/AnimatedLoadingSkeleton';
      @@ -15,48 +15,48 @@
       import { StatCard } from '@/components/shared/StatCard';
       
       // Define the props for the controlled DynamicView component
      -export interface DynamicViewProps {

      +export interface DynamicViewProps<TFieldId extends string, TItem extends
      GenericItem> {
         // Config
      -  viewConfig: ViewConfig;

      +  viewConfig: ViewConfig<TFieldId, TItem>;
         
         // Data & State
      -  items: GenericItem[];

      +  items: TItem[];
         isLoading: boolean;
         isInitialLoading: boolean;
         totalItemCount: number;
         hasMore: boolean;
         
         // Controlled State Props
         viewMode: ViewMode;
         filters: FilterConfig;
      -  sortConfig: SortConfig | null;

      -  groupBy: string;

      +  sortConfig: SortConfig<TFieldId> | null;

      +  groupBy: GroupableField<TFieldId>;
         activeGroupTab: string;
         page: number;
         selectedItemId?: string;
         // Calendar-specific state
      -  calendarDateProp?: CalendarDateProp;

      -  calendarDisplayProps?: CalendarDisplayProp[];

      +  calendarDateProp?: CalendarDateProp<TFieldId>;

      +  calendarDisplayProps?: CalendarDisplayProp<TFieldId>[];
         calendarItemLimit?: 'all' | number;
      -  calendarColorProp?: CalendarColorProp;

      +  calendarColorProp?: CalendarColorProp<TFieldId>;
         statsData?: StatItem[];
       
         // State Change Callbacks
         onViewModeChange: (mode: ViewMode) => void;
         onFiltersChange: (filters: FilterConfig) => void;
      -  onSortChange: (sort: SortConfig | null) => void;

      -  onGroupByChange: (group: string) => void;

      +  onSortChange: (sort: SortConfig<TFieldId> | null) => void;

      +  onGroupByChange: (group: GroupableField<TFieldId>) => void;
         onActiveGroupTabChange: (tab: string) => void;
         onPageChange: (page: number) => void;
      -  onItemSelect: (item: GenericItem) => void;

      -  onItemUpdate?: (itemId: string, updates: Partial<GenericItem>) => void;

      +  onItemSelect: (item: TItem) => void;

      +  onItemUpdate?: (itemId: string, updates: Partial<TItem>) => void;
         // Calendar-specific callbacks
      -  onCalendarDatePropChange?: (prop: CalendarDateProp) => void;

      -  onCalendarDisplayPropsChange?: (props: CalendarDisplayProp[]) => void;

      +  onCalendarDatePropChange?: (prop: CalendarDateProp<TFieldId>) => void;

      +  onCalendarDisplayPropsChange?: (props: CalendarDisplayProp<TFieldId>[])
      => void;
         onCalendarItemLimitChange?: (limit: 'all' | number) => void;
      -  onCalendarColorPropChange?: (prop: CalendarColorProp) => void;

      +  onCalendarColorPropChange?: (prop: CalendarColorProp<TFieldId>) =>
      void;
         
         // Custom Renderers
         renderHeaderControls?: () => ReactNode;
      @@ -65,7 +65,7 @@
         scrollContainerRef?: React.RefObject<HTMLElement>;
       }
       
      -export function DynamicView({ viewConfig, ...rest }: DynamicViewProps) {

      +export function DynamicView<TFieldId extends string, TItem extends
      GenericItem>({ viewConfig, ...rest }: DynamicViewProps<TFieldId, TItem>) {
         
         const { viewMode, isInitialLoading, isLoading, hasMore, items, groupBy, statsData, scrollContainerRef } = rest;
         const statsRef = useRef<HTMLDivElement>(null);
      @@ -93,17 +93,17 @@
           if (groupBy === 'none' || viewMode !== 'kanban') {
               return null;
           }
      -    return items.reduce((acc, item) => {

      -        const groupKey = String(item[groupBy as keyof GenericItem]) ||
      'N/A';

      +    return (items as TItem[]).reduce((acc, item) => {

      +        const groupKey = String(item[groupBy as keyof TItem]) || 'N/A';
               if (!acc[groupKey]) {
      -            acc[groupKey] = [] as GenericItem[];

      +            acc[groupKey] = [] as TItem[];
               }
               acc[groupKey].push(item);
               return acc;
      -    }, {} as Record<string, GenericItem[]>);

      +    }, {} as Record<string, TItem[]>);
         }, [items, groupBy, viewMode]);
       
      -  const renderViewForData = useCallback((data: GenericItem[], cta:
      ReactNode) => {

      +  const renderViewForData = useCallback((data: TItem[], cta: ReactNode)
      => {
           switch (viewMode) {
               case 'table': return <TableView data={data} ctaElement={cta} />;
               case 'cards': return <CardView data={data} ctaElement={cta} />;
      @@ -142,7 +142,7 @@
         };
       
         return (
      -    <DynamicViewProvider viewConfig={viewConfig} {...rest}>

      +    <DynamicViewProvider<TFieldId, TItem> viewConfig={viewConfig}
      {...rest}>
             <div className="space-y-6">
                 <div className="space-y-4">
                     <div className="flex flex-col md:flex-row md:items-start md:justify-between gap-4">

    patchStrategy: standard-diff
  - type: write
    path: src/features/dynamic-view/components/shared/FieldRenderer.tsx
    content: >+
      --- src/features/dynamic-view/components/shared/FieldRenderer.tsx

      +++ src/features/dynamic-view/components/shared/FieldRenderer.tsx

      @@ -1,5 +1,5 @@
       import { useDynamicView } from '../../DynamicViewContext';
      -import type { GenericItem, BadgeFieldDefinition } from '../../types';

      +import type { GenericItem, BadgeFieldDefinition } from '../../types';
       import { cn, getNestedValue } from '@/lib/utils';
       import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
       import { Badge } from '@/components/ui/badge';
      @@ -13,7 +13,7 @@
       }
       
       export function FieldRenderer({ item, fieldId, className, options }: FieldRendererProps) {
      -  const { getFieldDef } = useDynamicView();

      +  const { getFieldDef } = useDynamicView<string, GenericItem>();
         const fieldDef = getFieldDef(fieldId);
         const value = getNestedValue(item, fieldId);
       
      @@ -34,7 +34,7 @@
             return <span className={cn("text-xl", className)}>{String(value)}</span>;
       
           case 'badge': {
      -      const { colorMap, indicatorColorMap } = fieldDef as
      BadgeFieldDefinition;

      +      const { colorMap, indicatorColorMap } = fieldDef as
      BadgeFieldDefinition<string>;
             
             if (options?.displayAs === 'indicator' && indicatorColorMap) {
               const indicatorColorClass = indicatorColorMap[String(value)] || 'bg-muted-foreground';

    patchStrategy: standard-diff
  - type: write
    path: src/features/dynamic-view/components/views/ListView.tsx
    content: >+
      --- src/features/dynamic-view/components/views/ListView.tsx

      +++ src/features/dynamic-view/components/views/ListView.tsx

      @@ -7,7 +7,7 @@
       import { FieldRenderer } from '../shared/FieldRenderer'
       
       export function ListView({ data, ctaElement }: { data: GenericItem[], ctaElement?: ReactNode }) {
      -  const { config, onItemSelect, selectedItemId } = useDynamicView();

      +  const { config, onItemSelect, selectedItemId } = useDynamicView<string,
      GenericItem>();
       
         const listRef = useRef<HTMLDivElement>(null)
         useStaggeredAnimation(listRef, [data], { mode: 'incremental', scale: 1, y: 20, stagger: 0.05, duration: 0.4 });

    patchStrategy: standard-diff
  - type: write
    path: src/features/dynamic-view/components/views/CardView.tsx
    content: >+
      --- src/features/dynamic-view/components/views/CardView.tsx

      +++ src/features/dynamic-view/components/views/CardView.tsx

      @@ -8,7 +8,7 @@
       import { FieldRenderer } from '../shared/FieldRenderer'
       
       export function CardView({ data, isGrid = false, ctaElement }: { data: GenericItem[]; isGrid?: boolean, ctaElement?: ReactNode }) {
      -  const { config, onItemSelect, selectedItemId } = useDynamicView();

      +  const { config, onItemSelect, selectedItemId } = useDynamicView<string,
      GenericItem>();
         const { cardView: viewConfig } = config;
       
         const containerRef = useRef<HTMLDivElement>(null)

    patchStrategy: standard-diff
  - type: write
    path: src/features/dynamic-view/components/views/TableView.tsx
    content: >+
      --- src/features/dynamic-view/components/views/TableView.tsx

      +++ src/features/dynamic-view/components/views/TableView.tsx

      @@ -12,7 +12,7 @@
       import { FieldRenderer } from '../shared/FieldRenderer'
       
       export function TableView({ data, ctaElement }: { data: GenericItem[], ctaElement?: ReactNode }) {
      -  const { config, sortConfig, onSortChange, groupBy, onItemSelect,
      selectedItemId } = useDynamicView();

      +  const { config, sortConfig, onSortChange, groupBy, onItemSelect,
      selectedItemId } = useDynamicView<string, GenericItem>();
         const { tableView: viewConfig } = config;
       
         const tableRef = useRef<HTMLTableElement>(null)
      @@ -103,7 +103,7 @@
       }
       
       function TableRow({ item, isSelected, onItemSelect }: { item: GenericItem; isSelected: boolean; onItemSelect: (item: GenericItem) => void }) {
      -  const { config } = useDynamicView();

      +  const { config } = useDynamicView<string, GenericItem>();
         return (
           <tr
             onClick={() => onItemSelect(item)}

    patchStrategy: standard-diff
  - type: write
    path: src/features/dynamic-view/components/views/KanbanView.tsx
    content: >+
      --- src/features/dynamic-view/components/views/KanbanView.tsx

      +++ src/features/dynamic-view/components/views/KanbanView.tsx

      @@ -15,7 +15,7 @@
       }
       
       function KanbanCard({ item, isDragging, ...props }: KanbanCardProps & React.HTMLAttributes<HTMLDivElement>) {
      -  const { config, onItemSelect } = useDynamicView();

      +  const { config, onItemSelect } = useDynamicView<string, GenericItem>();
         const { kanbanView: viewConfig } = config;
       
         return (
      @@ -62,7 +62,7 @@
         const [draggedItemId, setDraggedItemId] = useState<string | null>(null);
         const [dropIndicator, setDropIndicator] = useState<{ columnId: string; index: number } | null>(null);
      -  const { groupBy, onItemUpdate } = useDynamicView();

      +  const { groupBy, onItemUpdate } = useDynamicView<string,
      GenericItem>();
       
         useEffect(() => {
           setColumns(data);

    patchStrategy: standard-diff
  - type: write
    path: src/features/dynamic-view/components/views/CalendarView.tsx
    content: |+
      --- src/features/dynamic-view/components/views/CalendarView.tsx
      +++ src/features/dynamic-view/components/views/CalendarView.tsx
      @@ -79,7 +79,7 @@
           onDragStart: (e: React.DragEvent<HTMLDivElement>, itemId: string) => void;
           colorProp: CalendarColorProp;
       }) {
      -  const { config, onItemSelect } = useDynamicView();
      +  const { config, onItemSelect } = useDynamicView<string, GenericItem>();
         const { calendarView: viewConfig } = config;
       
           const colorClass = useMemo(() => {
      @@ -151,9 +151,9 @@
           onItemUpdate,
           calendarDateProp = 'dueDate', // Provide default
           calendarItemLimit = 3, // Provide default
           calendarColorProp = 'none', // Provide default
      -  } = useDynamicView();
      +  } = useDynamicView<string, GenericItem>();
         
         // Drag & Drop State
         const [draggedItemId, setDraggedItemId] = useState<string | null>(null);

    patchStrategy: standard-diff
  - type: write
    path: src/features/dynamic-view/components/controls/ViewControls.tsx
    content: >+
      --- src/features/dynamic-view/components/controls/ViewControls.tsx

      +++ src/features/dynamic-view/components/controls/ViewControls.tsx

      @@ -23,7 +23,7 @@
       import { Switch } from "@/components/ui/switch";
       import { Separator } from "@/components/ui/separator";
       
      -import type { FilterConfig, CalendarDateProp, CalendarDisplayProp,
      CalendarColorProp } from '../../types'

      +import type { FilterConfig, CalendarDateProp, CalendarDisplayProp,
      CalendarColorProp, GenericItem } from '../../types'
       import { useDynamicView } from '../../DynamicViewContext';
       
       export interface DataViewControlsProps {
      @@ -40,7 +40,7 @@
           onSortChange,
           groupBy,
           onGroupByChange,
           viewMode,
      -  } = useDynamicView();

      +  } = useDynamicView<string, GenericItem>();
         const sortOptions = config.sortableFields;
         const groupOptions = config.groupableFields;
         const filterableFields = config.filterableFields;
      @@ -150,9 +150,9 @@
           const {
               calendarDateProp, onCalendarDatePropChange,
               calendarDisplayProps, onCalendarDisplayPropsChange,
               calendarItemLimit, onCalendarItemLimitChange,
               calendarColorProp, onCalendarColorPropChange,
      -    } = useDynamicView();

      +    } = useDynamicView<string, GenericItem>();
       
           const handleDisplayPropChange = (prop: CalendarDisplayProp, checked: boolean) => {
               const newProps = checked 
      @@ -176,7 +176,7 @@
                           <Separator />
                           <div className="space-y-3">
                               <Label className="font-semibold">Item Background Color</Label>
      -                        <RadioGroup value={calendarColorProp}
      onValueChange={(v) => onCalendarColorPropChange?.(v as CalendarColorProp)}
      className="gap-2">

      +                        <RadioGroup value={calendarColorProp}
      onValueChange={(v) => onCalendarColorPropChange?.(v as
      CalendarColorProp<string>)} className="gap-2">
                                   <div className="flex items-center space-x-2">
                                       <RadioGroupItem value="none" id="color-none" />
                                       <Label htmlFor="color-none" className="font-normal">None</Label>
      @@ -197,7 +197,7 @@
                           <Separator />
                           <div className="space-y-3">
                               <Label className="font-semibold">Date Property</Label>
      -                        <RadioGroup value={calendarDateProp}
      onValueChange={(v) => onCalendarDatePropChange?.(v as CalendarDateProp)}
      className="gap-2">

      +                        <RadioGroup value={calendarDateProp}
      onValueChange={(v) => onCalendarDatePropChange?.(v as
      CalendarDateProp<string>)} className="gap-2">
                                   <div className="flex items-center space-x-2">
                                       <RadioGroupItem value="dueDate" id="dueDate" />
                                       <Label htmlFor="dueDate" className="font-normal">Due Date</Label>
      @@ -214,7 +214,7 @@
                           <div className="space-y-3">
                               <Label className="font-semibold">Card Details</Label>
                               <div className="space-y-2">
      -                            {(['priority', 'assignee', 'tags'] as
      CalendarDisplayProp[]).map(prop => (

      +                            {(['priority', 'assignee', 'tags'] as
      CalendarDisplayProp<string>[]).map(prop => (
                                       <div key={prop} className="flex items-center space-x-2">
                                           <Checkbox id={prop} checked={(calendarDisplayProps || []).includes(prop)} onCheckedChange={(c) => handleDisplayPropChange(prop, !!c)} />
                                           <Label htmlFor={prop} className="capitalize font-normal">{prop}</Label>

    patchStrategy: standard-diff
snapshot:
  src/features/dynamic-view/DynamicViewContext.tsx: >-
    import { createContext, useContext, useMemo, type ReactNode } from 'react';

    import type { ViewConfig, GenericItem, ViewMode, FilterConfig, SortConfig,
    CalendarDateProp, CalendarDisplayProp, CalendarColorProp } from './types';


    export interface DynamicViewContextProps {
      config: ViewConfig;
      data: GenericItem[];
      getFieldDef: (fieldId: string) => ViewConfig['fields'][number] | undefined;

      // Data & State from parent
      items: GenericItem[];
      isLoading: boolean;
      isInitialLoading: boolean;
      totalItemCount: number;
      hasMore: boolean;

      // Controlled State Props from parent
      viewMode: ViewMode;
      filters: FilterConfig;
      sortConfig: SortConfig | null;
      groupBy: string;
      activeGroupTab: string;
      page: number;
      selectedItemId?: string;
      // Calendar-specific state
      calendarDateProp?: CalendarDateProp;
      calendarDisplayProps?: CalendarDisplayProp[];
      calendarItemLimit?: 'all' | number;
      calendarColorProp?: CalendarColorProp;

      // Callbacks to parent
      onViewModeChange: (mode: ViewMode) => void;
      onFiltersChange: (filters: FilterConfig) => void;
      onSortChange: (sort: SortConfig | null) => void;
      onGroupByChange: (group: string) => void;
      onActiveGroupTabChange: (tab: string) => void;
      onPageChange: (page: number) => void;
      onItemSelect: (item: GenericItem) => void;
      onItemUpdate?: (itemId: string, updates: Partial<GenericItem>) => void;
      // Calendar-specific callbacks
      onCalendarDatePropChange?: (prop: CalendarDateProp) => void;
      onCalendarDisplayPropsChange?: (props: CalendarDisplayProp[]) => void;
      onCalendarItemLimitChange?: (limit: 'all' | number) => void;
      onCalendarColorPropChange?: (prop: CalendarColorProp) => void;
    }


    const DynamicViewContext = createContext<DynamicViewContextProps |
    null>(null);


    interface DynamicViewProviderProps extends Omit<DynamicViewContextProps,
    'getFieldDef' | 'config' | 'data'> {
      viewConfig: ViewConfig,
      children: ReactNode;
    }


    export function DynamicViewProvider({ viewConfig, children, ...rest }:
    DynamicViewProviderProps) {
      const fieldDefsById = useMemo(() => {
        return new Map(viewConfig.fields.map(field => [field.id, field]));
      }, [viewConfig.fields]);

      const getFieldDef = (fieldId: string) => {
        return fieldDefsById.get(fieldId);
      };

      const value = useMemo(() => ({
        ...rest,
        config: viewConfig,
        data: rest.items, // alias for convenience
        getFieldDef,
      }), [viewConfig, getFieldDef, rest]);

      return (
        <DynamicViewContext.Provider value={value}>
          {children}
        </DynamicViewContext.Provider>
      );
    }


    export function useDynamicView() {
      const context = useContext(DynamicViewContext);
      if (!context) {
        throw new Error('useDynamicView must be used within a DynamicViewProvider');
      }
      return context;
    }
  src/features/dynamic-view/DynamicView.tsx: >-
    import { useMemo, useCallback, type ReactNode, useRef, useEffect } from
    'react';

    import { Loader2 } from 'lucide-react';

    import { gsap } from 'gsap';

    import { DynamicViewProvider } from
    '@/features/dynamic-view/DynamicViewContext';

    import type { ViewConfig, GenericItem, ViewMode, FilterConfig, SortConfig,
    CalendarDateProp, CalendarDisplayProp, CalendarColorProp, StatItem } from
    './types';

    import { ViewControls } from './components/controls/ViewControls';

    import { ViewModeSelector } from './components/controls/ViewModeSelector';

    import { AnimatedLoadingSkeleton } from
    './components/shared/AnimatedLoadingSkeleton';

    import { ListView } from './components/views/ListView';

    import { CardView } from './components/views/CardView';

    import { TableView } from './components/views/TableView';

    import { KanbanView } from './components/views/KanbanView';

    import { CalendarView } from './components/views/CalendarView';

    import { EmptyState } from './components/shared/EmptyState';

    import { useAutoAnimateStats } from '@/hooks/useAutoAnimateStats.hook';

    import { StatCard } from '@/components/shared/StatCard';


    // Define the props for the controlled DynamicView component

    export interface DynamicViewProps {
      // Config
      viewConfig: ViewConfig;
      
      // Data & State
      items: GenericItem[];
      isLoading: boolean;
      isInitialLoading: boolean;
      totalItemCount: number;
      hasMore: boolean;
      
      // Controlled State Props
      viewMode: ViewMode;
      filters: FilterConfig;
      sortConfig: SortConfig | null;
      groupBy: string;
      activeGroupTab: string;
      page: number;
      selectedItemId?: string;
      // Calendar-specific state
      calendarDateProp?: CalendarDateProp;
      calendarDisplayProps?: CalendarDisplayProp[];
      calendarItemLimit?: 'all' | number;
      calendarColorProp?: CalendarColorProp;
      statsData?: StatItem[];

      // State Change Callbacks
      onViewModeChange: (mode: ViewMode) => void;
      onFiltersChange: (filters: FilterConfig) => void;
      onSortChange: (sort: SortConfig | null) => void;
      onGroupByChange: (group: string) => void;
      onActiveGroupTabChange: (tab: string) => void;
      onPageChange: (page: number) => void;
      onItemSelect: (item: GenericItem) => void;
      onItemUpdate?: (itemId: string, updates: Partial<GenericItem>) => void;
      // Calendar-specific callbacks
      onCalendarDatePropChange?: (prop: CalendarDateProp) => void;
      onCalendarDisplayPropsChange?: (props: CalendarDisplayProp[]) => void;
      onCalendarItemLimitChange?: (limit: 'all' | number) => void;
      onCalendarColorPropChange?: (prop: CalendarColorProp) => void;
      
      // Custom Renderers
      renderHeaderControls?: () => ReactNode;
      renderCta?: (viewMode: ViewMode, ctaProps: { colSpan?: number }) => ReactNode;
      loaderRef?: React.Ref<HTMLDivElement>;
      scrollContainerRef?: React.RefObject<HTMLElement>;
    }


    export function DynamicView({ viewConfig, ...rest }: DynamicViewProps) {
      
      const { viewMode, isInitialLoading, isLoading, hasMore, items, groupBy, statsData, scrollContainerRef } = rest;
      const statsRef = useRef<HTMLDivElement>(null);

      // Auto-hide stats container on scroll down
      useAutoAnimateStats(scrollContainerRef!, statsRef);

      useEffect(() => {
        // Animate stats cards in
        if (!isInitialLoading && statsRef.current) {
          gsap.fromTo(statsRef.current.children,
            { y: 30, opacity: 0 },
            {
              duration: 0.5,
              y: 0,
              opacity: 1,
              stagger: 0.08,
              ease: "power2.out"
            }
          )
        }
      }, [isInitialLoading]);

      const groupedData = useMemo(() => {
        if (groupBy === 'none' || viewMode !== 'kanban') {
            return null;
        }
        return items.reduce((acc, item) => {
            const groupKey = String(item[groupBy as keyof GenericItem]) || 'N/A';
            if (!acc[groupKey]) {
                acc[groupKey] = [] as GenericItem[];
            }
            acc[groupKey].push(item);
            return acc;
        }, {} as Record<string, GenericItem[]>);
      }, [items, groupBy, viewMode]);

      const renderViewForData = useCallback((data: GenericItem[], cta: ReactNode) => {
        switch (viewMode) {
            case 'table': return <TableView data={data} ctaElement={cta} />;
            case 'cards': return <CardView data={data} ctaElement={cta} />;
            case 'grid': return <CardView data={data} isGrid ctaElement={cta} />;
            case 'list': default: return <ListView data={data} ctaElement={cta} />;
        }
      }, [viewMode]);

      const renderContent = () => {
        if (isInitialLoading) {
          return <AnimatedLoadingSkeleton viewMode={viewMode} />;
        }

        if (viewMode === 'calendar') {
            return <CalendarView data={items} />;
        }

        if (viewMode === 'kanban') {
            return groupedData ? (
              <KanbanView data={groupedData} />
            ) : (
              <div className="flex items-center justify-center h-96 text-muted-foreground">
                Group data by a metric to use the Kanban view.
              </div>
            );
        }
        
        if (items.length === 0 && !isInitialLoading) {
            return <EmptyState />;
        }
        
        const ctaProps = {
            colSpan: viewMode === 'table' ? viewConfig.tableView.columns.length + 1 : undefined,
        };
        const ctaElement = rest.renderCta
            ? rest.renderCta(viewMode, ctaProps)
            : null;
        
        // This will be expanded later to handle group tabs
        return renderViewForData(items, ctaElement);
      };

      return (
        <DynamicViewProvider viewConfig={viewConfig} {...rest}>
          <div className="space-y-6">
              <div className="space-y-4">
                  <div className="flex flex-col md:flex-row md:items-start md:justify-between gap-4">
                      <div className="flex-1">
                          {rest.renderHeaderControls ? rest.renderHeaderControls() : (
                              <>
                                  <h1 className="text-2xl font-bold tracking-tight">Data Showcase</h1>
                                  <p className="text-muted-foreground">
                                      {isInitialLoading 
                                          ? "Loading projects..." 
                                          : `Showing ${items.length} of ${rest.totalItemCount} item(s)`}
                                  </p>
                              </>
                          )}
                      </div>
                      <ViewModeSelector />
                  </div>
                  <ViewControls />
              </div>

              {!isInitialLoading && statsData && statsData.length > 0 && (
                <div ref={statsRef} className="flex overflow-x-auto gap-6 pb-4 no-scrollbar">
                  {statsData.map((stat) => (
                    <StatCard
                      className="w-64 md:w-72 flex-shrink-0"
                      key={stat.title}
                      title={stat.title}
                      value={stat.value}
                      change={stat.change}
                      trend={stat.trend}
                      icon={stat.icon}
                      chartData={stat.chartData}
                    />
                  ))}
                </div>
              )}
              
              <div className="min-h-[500px]">
                  {renderContent()}
              </div>

              {/* Loader for infinite scroll */}
              <div ref={rest.loaderRef} className="flex justify-center items-center py-6">
                {isLoading && !isInitialLoading && groupBy === 'none' && viewMode !== 'calendar' && viewMode !== 'kanban' && (
                  <div className="flex items-center gap-2 text-muted-foreground">
                    <Loader2 className="w-5 h-5 animate-spin" />
                    <span>Loading more...</span>
                  </div>
                )}
                {!isLoading && !hasMore && items.length > 0 && !isInitialLoading && groupBy === 'none' && viewMode !== 'calendar' && viewMode !== 'kanban' && (
                  <p className="text-muted-foreground">You've reached the end.</p>
                )}
              </div>
          </div>
        </DynamicViewProvider>
      );
    }
  src/features/dynamic-view/components/views/ListView.tsx: >-
    import { useRef, type ReactNode } from 'react'

    import { cn } from '@/lib/utils'

    import type { GenericItem } from '../../types'

    import { useStaggeredAnimation } from
    '@/hooks/useStaggeredAnimation.motion.hook'

    import { EmptyState } from '../shared/EmptyState'

    import { useDynamicView } from '../../DynamicViewContext'

    import { FieldRenderer } from '../shared/FieldRenderer'


    export function ListView({ data, ctaElement }: { data: GenericItem[],
    ctaElement?: ReactNode }) {
      const { config, onItemSelect, selectedItemId } = useDynamicView();

      const listRef = useRef<HTMLDivElement>(null)
      useStaggeredAnimation(listRef, [data], { mode: 'incremental', scale: 1, y: 20, stagger: 0.05, duration: 0.4 });

      const items = Array.isArray(data) ? data : [];
      if (items.length === 0) {
        return <EmptyState />
      }

      return (
        <div ref={listRef}>
          {items.map((item: GenericItem) => {
            const isSelected = selectedItemId === item.id
            
            return (
              <div key={item.id} className="px-2">
                <div
                  onClick={() => onItemSelect(item)}
                  className={cn(
                    "group flex items-center px-2 py-2 rounded-md transition-colors duration-200 cursor-pointer",
                    "hover:bg-accent/80",
                    isSelected ? "bg-accent" : "bg-transparent"
                  )}
                >
                  {/* Left side: Icon and Title */}
                  <div className="flex items-center gap-3 flex-1 min-w-0">
                    <div className="flex-shrink-0 w-8 text-center">
                      <FieldRenderer item={item} fieldId={config.listView.iconField} className="text-xl" />
                    </div>
                    <div className="font-medium truncate text-card-foreground group-hover:text-primary">
                      <FieldRenderer item={item} fieldId={config.listView.titleField} />
                    </div>
                  </div>

                  {/* Right side: Metadata */}
                  <div className="flex shrink-0 items-center gap-2 sm:gap-4 md:gap-6 ml-4 text-sm text-muted-foreground">
                    {config.listView.metaFields.map(fieldConfig => (
                      <div key={fieldConfig.fieldId} className={fieldConfig.className}>
                        <FieldRenderer item={item} fieldId={fieldConfig.fieldId} options={{ avatarClassName: 'w-7 h-7' }} />
                      </div>
                    ))}
                  </div>
                </div>
              </div>
            )
          })}
          {ctaElement}
        </div>
      )
    }
  src/features/dynamic-view/components/shared/FieldRenderer.tsx: >-
    import { useDynamicView } from '../../DynamicViewContext';

    import type { GenericItem, BadgeFieldDefinition } from '../../types';

    import { cn, getNestedValue } from '@/lib/utils';

    import { Avatar, AvatarFallback, AvatarImage } from
    '@/components/ui/avatar';

    import { Badge } from '@/components/ui/badge';

    import { Clock, Eye, Heart, Share } from 'lucide-react';


    interface FieldRendererProps {
      item: GenericItem;
      fieldId: string;
      className?: string;
      options?: Record<string, any>; // For extra props like 'compact' for avatar
    }


    export function FieldRenderer({ item, fieldId, className, options }:
    FieldRendererProps) {
      const { getFieldDef } = useDynamicView();
      const fieldDef = getFieldDef(fieldId);
      const value = getNestedValue(item, fieldId);

      // Custom render function takes precedence
      if (fieldDef?.render) {
        return <>{fieldDef.render(item, options)}</>;
      }

      if (!fieldDef) {
        console.warn(`[FieldRenderer] No field definition found for ID: ${fieldId}`);
        return <span className="text-red-500">?</span>;
      }

      if (value === null || typeof value === 'undefined') {
        return null; // Or some placeholder like 'N/A'
      }
      
      switch (fieldDef.type) {
        case 'string':
        case 'longtext':
          return <span className={cn("truncate", className)}>{String(value)}</span>;
        
        case 'thumbnail':
          return <span className={cn("text-xl", className)}>{String(value)}</span>;

        case 'badge': {
          const { colorMap, indicatorColorMap } = fieldDef as BadgeFieldDefinition;
          
          if (options?.displayAs === 'indicator' && indicatorColorMap) {
            const indicatorColorClass = indicatorColorMap[String(value)] || 'bg-muted-foreground';
            return (
              <div className={cn("w-3 h-3 rounded-full", indicatorColorClass, className)} />
            );
          }

          const colorClass = colorMap?.[String(value)] || '';
          return (
            <Badge variant="outline" className={cn("font-medium capitalize", colorClass, className)}>
              {String(value)}
            </Badge>
          );
        }
        
        case 'avatar': {
          const { compact = false, avatarClassName = "w-8 h-8" } = options || {};
          const avatarUrl = getNestedValue(value, 'avatar');
          const name = getNestedValue(value, 'name');
          const email = getNestedValue(value, 'email');
          const fallback = name?.split(' ').map((n: string) => n[0]).join('') || '?';

          const avatarEl = (
            <Avatar className={cn("border-2 border-transparent group-hover:border-primary/50 transition-colors", avatarClassName)}>
              <AvatarImage src={avatarUrl} alt={name} />
              <AvatarFallback>{fallback}</AvatarFallback>
            </Avatar>
          );
          if (compact) return avatarEl;

          return (
            <div className={cn("flex items-center gap-2 group", className)}>
              {avatarEl}
              <div className="min-w-0 hidden sm:block">
                <p className="font-medium text-sm truncate">{name}</p>
                <p className="text-xs text-muted-foreground truncate">{email}</p>
              </div>
            </div>
          );
        }
        
        case 'progress': {
          const { showPercentage = false } = options || {};
          const bar = (
            <div className="w-full bg-muted rounded-full h-2.5">
              <div
                className="bg-gradient-to-r from-primary to-primary/80 h-2.5 rounded-full transition-all duration-500"
                style={{ width: `${value}%` }}
              />
            </div>
          );
          if (!showPercentage) return bar;
          
          return (
            <div className="flex items-center gap-3">
              <div className="flex-1 min-w-0">{bar}</div>
              <span className="text-sm font-medium text-muted-foreground">{value}%</span>
            </div>
          );
        }

        case 'date':
          return (
            <div className={cn("flex items-center gap-1.5 text-sm", className)}>
              <Clock className="w-4 h-4" />
              <span>{new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}</span>
            </div>
          );

        case 'tags': {
          const MAX_TAGS = 2;
          const tags = Array.isArray(value) ? value : [];
          const remainingTags = tags.length - MAX_TAGS;
          return (
            <div className={cn("flex items-center gap-1.5 flex-wrap", className)}>
              {tags.slice(0, MAX_TAGS).map(tag => (
                <Badge key={tag} variant="secondary" className="text-xs">{tag}</Badge>
              ))}
              {remainingTags > 0 && (
                <Badge variant="outline" className="text-xs">+{remainingTags}</Badge>
              )}
            </div>
          );
        }

        case 'metrics': {
          const views = getNestedValue(value, 'views') || 0;
          const likes = getNestedValue(value, 'likes') || 0;
          const shares = getNestedValue(value, 'shares') || 0;
          return (
            <div className={cn("flex items-center gap-3 text-sm", className)}>
              <div className="flex items-center gap-1"><Eye className="w-4 h-4" /> {views}</div>
              <div className="flex items-center gap-1"><Heart className="w-4 h-4" /> {likes}</div>
              <div className="flex items-center gap-1"><Share className="w-4 h-4" /> {shares}</div>
            </div>
          );
        }
          
        default:
          return <>{String(value)}</>;
      }
    }
  src/features/dynamic-view/components/views/CardView.tsx: >-
    import { useRef, type ReactNode } from 'react'

    import { cn } from '@/lib/utils'

    import { ArrowUpRight } from 'lucide-react'

    import type { GenericItem } from '../../types'

    import { useStaggeredAnimation } from
    '@/hooks/useStaggeredAnimation.motion.hook'

    import { EmptyState } from '../shared/EmptyState'

    import { useDynamicView } from '../../DynamicViewContext'

    import { FieldRenderer } from '../shared/FieldRenderer'


    export function CardView({ data, isGrid = false, ctaElement }: { data:
    GenericItem[]; isGrid?: boolean, ctaElement?: ReactNode }) {
      const { config, onItemSelect, selectedItemId } = useDynamicView();
      const { cardView: viewConfig } = config;

      const containerRef = useRef<HTMLDivElement>(null)
      useStaggeredAnimation(containerRef, [data], { mode: 'incremental', y: 40 });

      const items = Array.isArray(data) ? data : [];
      if (items.length === 0) {
        return <EmptyState />
      }

      return (
        <div 
          ref={containerRef}
          className={cn(
            "gap-6",
            isGrid
              ? "grid grid-cols-[repeat(auto-fill,minmax(280px,1fr))]"
              : "grid grid-cols-[repeat(auto-fill,minmax(320px,1fr))]",
            "pb-4"
          )}
        >
          {items.map((item: GenericItem) => {
            const isSelected = selectedItemId === item.id
            
            return (
              <div
                key={item.id}
                onClick={() => onItemSelect(item)}
                className={cn(
                  "group relative overflow-hidden rounded-3xl border bg-card/50 backdrop-blur-sm transition-all duration-500 cursor-pointer",
                  "hover:bg-card/80 hover:shadow-xl hover:shadow-primary/10 hover:border-primary/30 hover:-translate-y-2",
                  "active:scale-[0.98]",
                  isSelected && "ring-2 ring-primary/30 border-primary/40 bg-card/90 shadow-lg shadow-primary/20",
                )}
              >
                {/* Card Header with Thumbnail */}
                <div className="relative p-6 pb-4">
                  <div className="flex items-start justify-between mb-4">
                    <div className="w-16 h-16 bg-gradient-to-br from-primary/20 to-primary/10 rounded-2xl flex items-center justify-center text-3xl group-hover:scale-110 transition-transform duration-300">
                      <FieldRenderer item={item} fieldId={viewConfig.thumbnailField} />
                    </div>
                    <ArrowUpRight className="w-5 h-5 text-muted-foreground group-hover:text-primary group-hover:translate-x-1 group-hover:-translate-y-1 transition-all duration-300" />
                  </div>

                  {/* Header Fields (e.g., priority indicator) */}
                  <div className="absolute top-4 right-4 flex items-center gap-2">
                    {viewConfig.headerFields.map(fieldId => (
                      <FieldRenderer key={fieldId} item={item} fieldId={fieldId} options={{ displayAs: 'indicator' }} />
                    ))}
                  </div>
                </div>

                {/* Card Content */}
                <div className="px-6 pb-6">
                  <h3 className="font-semibold text-lg mb-2 group-hover:text-primary transition-colors line-clamp-2">
                    <FieldRenderer item={item} fieldId={viewConfig.titleField} />
                  </h3>
                  <p className="text-muted-foreground text-sm mb-4 line-clamp-3">
                    <FieldRenderer item={item} fieldId={viewConfig.descriptionField} />
                  </p>

                  {/* Status and Category */}
                  <div className="flex items-center gap-2 mb-4">
                    <FieldRenderer item={item} fieldId={viewConfig.statusField} />
                    <FieldRenderer item={item} fieldId={viewConfig.categoryField} />
                  </div>

                  {/* Tags, Progress, Assignee */}
                  <div className="space-y-4 mb-4">
                    <FieldRenderer item={item} fieldId={viewConfig.tagsField} />
                    <FieldRenderer item={item} fieldId={viewConfig.progressField} />
                    <FieldRenderer item={item} fieldId={viewConfig.assigneeField} />
                  </div>

                  {/* Metrics and Date */}
                  <div className="flex items-center justify-between text-xs text-muted-foreground">
                    <FieldRenderer item={item} fieldId={viewConfig.metricsField} />
                    <FieldRenderer item={item} fieldId={viewConfig.dateField} />
                  </div>
                </div>

                {/* Hover gradient overlay */}
                <div className="absolute inset-0 bg-gradient-to-br from-primary/5 via-transparent to-primary/5 opacity-0 group-hover:opacity-100 transition-opacity duration-500 pointer-events-none" />
                
                {/* Selection indicator */}
                {isSelected && (
                  <div className="absolute inset-0 bg-gradient-to-br from-primary/10 to-primary/5 pointer-events-none" />
                )}
              </div>
            )
          })}
          {ctaElement}
        </div>
      )
    }
  src/features/dynamic-view/components/views/KanbanView.tsx: >-
    import { useState, useEffect, Fragment } from "react";

    import {
      GripVertical,
      Plus,
    } from "lucide-react";

    import type { GenericItem } from '../../types'

    import { Card, CardContent } from "@/components/ui/card";

    import { cn } from "@/lib/utils";

    import { EmptyState } from "../shared/EmptyState";

    import { useDynamicView } from '../../DynamicViewContext'

    import { FieldRenderer } from '../shared/FieldRenderer'


    interface KanbanCardProps {
      item: GenericItem;
      isDragging: boolean;
    }


    function KanbanCard({ item, isDragging, ...props }: KanbanCardProps &
    React.HTMLAttributes<HTMLDivElement>) {
      const { config, onItemSelect } = useDynamicView();
      const { kanbanView: viewConfig } = config;

      return (
        <Card
          {...props}
          data-draggable-id={item.id}
          onClick={() => onItemSelect(item)}
          className={cn(
            "cursor-pointer transition-all duration-300 border bg-card/60 dark:bg-neutral-800/60 backdrop-blur-sm hover:bg-card/70 dark:hover:bg-neutral-700/70 active:cursor-grabbing",
            isDragging && "opacity-50 ring-2 ring-primary ring-offset-2 ring-offset-background"
          )}
        >
          <CardContent className="p-5">
            <div className="space-y-4">
              <div className="flex items-start justify-between">
                <h4 className="font-semibold text-card-foreground dark:text-neutral-100 leading-tight">
                  <FieldRenderer item={item} fieldId={viewConfig.cardFields.titleField} />
                </h4>
                <GripVertical className="w-5 h-5 text-muted-foreground/60 dark:text-neutral-400 cursor-grab flex-shrink-0" />
              </div>

              <p className="text-sm text-muted-foreground dark:text-neutral-300 leading-relaxed line-clamp-2">
                <FieldRenderer item={item} fieldId={viewConfig.cardFields.descriptionField} />
              </p>

              <div className="flex flex-wrap gap-2">
                <FieldRenderer item={item} fieldId={viewConfig.cardFields.priorityField} />
                <FieldRenderer item={item} fieldId={viewConfig.cardFields.tagsField} />
              </div>

              <div className="flex items-center justify-between pt-2 border-t border-border/30 dark:border-neutral-700/30">
                <div className="flex items-center gap-4 text-muted-foreground/80 dark:text-neutral-400">
                  <FieldRenderer item={item} fieldId={viewConfig.cardFields.dateField} />
                  <FieldRenderer item={item} fieldId={viewConfig.cardFields.metricsField} />
                </div>
                <FieldRenderer item={item} fieldId={viewConfig.cardFields.assigneeField} options={{ compact: true, avatarClassName: 'w-8 h-8 ring-2 ring-white/50 dark:ring-neutral-700/50' }} />
              </div>
            </div>
          </CardContent>
        </Card>
      );
    }


    interface DataKanbanViewProps {
      data: Record<string, GenericItem[]>;
    }


    export function KanbanView({ data }: DataKanbanViewProps) {
      const [columns, setColumns] = useState(data);
      const [draggedItemId, setDraggedItemId] = useState<string | null>(null);
      const [dropIndicator, setDropIndicator] = useState<{ columnId: string; index: number } | null>(null);
      const { groupBy, onItemUpdate } = useDynamicView();

      useEffect(() => {
        setColumns(data);
      }, [data]);

      const handleDragStart = (e: React.DragEvent<HTMLDivElement>, item: GenericItem, sourceColumnId: string) => {
        e.dataTransfer.effectAllowed = 'move';
        e.dataTransfer.setData('text/plain', JSON.stringify({ itemId: item.id, sourceColumnId }));
        setDraggedItemId(item.id);
      };

      const getDropIndicatorIndex = (e: React.DragEvent, elements: HTMLElement[]) => {
        const mouseY = e.clientY;
        let closestIndex = elements.length;

        elements.forEach((el, index) => {
          const { top, height } = el.getBoundingClientRect();
          const offset = mouseY - (top + height / 2);
          if (offset < 0 && index < closestIndex) {
            closestIndex = index;
          }
        });
        return closestIndex;
      };

      const handleDragOverCardsContainer = (e: React.DragEvent<HTMLDivElement>, columnId: string) => {
        e.preventDefault();
        const container = e.currentTarget;
        const draggableElements = Array.from(container.querySelectorAll('[data-draggable-id]')) as HTMLElement[];
        const index = getDropIndicatorIndex(e, draggableElements);

        if (dropIndicator?.columnId === columnId && dropIndicator.index === index) return;
        setDropIndicator({ columnId, index });
      };

      const handleDrop = (e: React.DragEvent<HTMLDivElement>, targetColumnId: string) => {
        e.preventDefault();
        setDropIndicator(null);
        try {
          const { itemId, sourceColumnId } = JSON.parse(e.dataTransfer.getData('text/plain'));

          const droppedItem = columns[sourceColumnId]?.find(i => i.id === itemId);
          if (!droppedItem) return;

          // Update local state for immediate feedback
          setColumns(prev => {
            const newColumns = { ...prev };
            const sourceCol = prev[sourceColumnId].filter(i => i.id !== itemId);

            if (sourceColumnId === targetColumnId) {
              const dropIndex = dropIndicator?.columnId === targetColumnId ? dropIndicator.index : sourceCol.length;
              sourceCol.splice(dropIndex, 0, droppedItem);
              newColumns[sourceColumnId] = sourceCol;
            } else {
              const targetCol = [...prev[targetColumnId]];
              const dropIndex = dropIndicator?.columnId === targetColumnId ? dropIndicator.index : targetCol.length;
              targetCol.splice(dropIndex, 0, droppedItem);
              
              newColumns[sourceColumnId] = sourceCol;
              newColumns[targetColumnId] = targetCol;
            }
            return newColumns;
          });
          
          // Persist change to global store. The groupBy value tells us which property to update.
          if (groupBy !== 'none' && sourceColumnId !== targetColumnId) {
            onItemUpdate?.(itemId, { [groupBy]: targetColumnId } as Partial<GenericItem>);
          }

        } catch (err) {
          console.error("Failed to parse drag data", err)
        } finally {
          setDraggedItemId(null);
        }
      };

      const handleDragEnd = () => {
        setDraggedItemId(null);
        setDropIndicator(null);
      };

      const initialColumns = Object.entries(data);

      if (!initialColumns || initialColumns.length === 0) {
        return <EmptyState />;
      }

      const statusColors: Record<string, string> = {
        active: "bg-blue-500", pending: "bg-yellow-500", completed: "bg-green-500", archived: "bg-gray-500",
        low: "bg-green-500", medium: "bg-blue-500", high: "bg-orange-500", critical: "bg-red-500",
      };

      const DropIndicator = () => <div className="h-1 my-2 rounded-full bg-primary/60" />;

      return (
        <div className="flex items-start gap-6 pb-4 overflow-x-auto -mx-6 px-6">
          {Object.entries(columns).map(([columnId, items]) => (
            <div
              key={columnId}
              className={cn(
                "w-80 flex-shrink-0 bg-card/20 dark:bg-neutral-900/20 backdrop-blur-xl rounded-3xl p-5 border border-border dark:border-neutral-700/50 transition-all duration-300",
                dropIndicator?.columnId === columnId && "bg-primary/10 border-primary/30"
              )}
            >
              <div className="flex items-center justify-between mb-6">
                <div className="flex items-center gap-3 min-w-0">
                  <div className={cn("w-3.5 h-3.5 rounded-full", statusColors[columnId] || "bg-muted-foreground")} />
                  <h3 className="font-semibold text-card-foreground dark:text-neutral-100 capitalize truncate">{columnId}</h3>
                  <span className="text-sm font-medium text-muted-foreground bg-background/50 rounded-full px-2 py-0.5">{items.length}</span>
                </div>
                <button className="p-1 rounded-full bg-card/30 dark:bg-neutral-800/30 hover:bg-card/50 dark:hover:bg-neutral-700/50 transition-colors">
                  <Plus className="w-4 h-4 text-muted-foreground dark:text-neutral-300" />
                </button>
              </div>

              <div
                onDragOver={(e) => handleDragOverCardsContainer(e, columnId)}
                onDrop={(e) => handleDrop(e, columnId)}
                onDragLeave={() => setDropIndicator(null)}
                className="space-y-4 min-h-[100px]"
              >
                {items.map((item, index) => (
                  <Fragment key={item.id}>
                    {dropIndicator?.columnId === columnId && dropIndicator.index === index && (
                      <DropIndicator />
                    )}
                    <KanbanCard
                      item={item}
                      isDragging={draggedItemId === item.id}
                      draggable
                      onDragStart={(e) => handleDragStart(e, item, columnId)}
                      onDragEnd={handleDragEnd}
                    />
                  </Fragment>
                ))}
                {dropIndicator?.columnId === columnId && dropIndicator.index === items.length && (
                  <DropIndicator />
                )}
              </div>
            </div>
          ))}
        </div>
      );
    }
  src/features/dynamic-view/components/views/CalendarView.tsx: >-
    import { useState, useMemo, useRef, useLayoutEffect } from "react";

    import { format, addMonths, subMonths, startOfMonth, endOfMonth,
    startOfWeek, endOfWeek, eachDayOfInterval, isSameMonth, isToday, isSameDay,
    } from "date-fns";

    import { ChevronLeft, ChevronRight } from "lucide-react";

    import { gsap } from "gsap";


    import { Button } from "@/components/ui/button";

    import { cn } from "@/lib/utils";

    import type { GenericItem } from '../../types';

    import type { CalendarDateProp, CalendarColorProp, Status, Priority } from
    '../../types';

    import { useResizeObserver } from "@/hooks/useResizeObserver.hook";

    import { useDynamicView } from '../../DynamicViewContext'

    import { FieldRenderer } from '../shared/FieldRenderer'


    interface CalendarViewProps {
      data: GenericItem[];
    }


    const PRIORITY_BG_COLORS: Record<Priority, string> = {
      low: 'bg-blue-500/80 border-blue-600/80 text-white',
      medium: 'bg-yellow-500/80 border-yellow-600/80 text-yellow-950',
      high: 'bg-orange-500/80 border-orange-600/80 text-white',
      critical: 'bg-red-600/80 border-red-700/80 text-white',
    };


    const STATUS_BG_COLORS: Record<Status, string> = {
      active: 'bg-sky-500/80 border-sky-600/80 text-white',
      pending: 'bg-amber-500/80 border-amber-600/80 text-amber-950',
      completed: 'bg-emerald-600/80 border-emerald-700/80 text-white',
      archived: 'bg-zinc-500/80 border-zinc-600/80 text-white',
    };


    const CATEGORY_BG_COLORS = [
      'bg-rose-500/80 border-rose-600/80 text-white',
      'bg-fuchsia-500/80 border-fuchsia-600/80 text-white',
      'bg-indigo-500/80 border-indigo-600/80 text-white',
      'bg-teal-500/80 border-teal-600/80 text-white',
      'bg-lime-500/80 border-lime-600/80 text-lime-950',
    ];


    const getCategoryBgColor = (category: string) => {
      let hash = 0;
      for (let i = 0; i < category.length; i++) {
        hash = category.charCodeAt(i) + ((hash << 5) - hash);
      }
      const index = Math.abs(hash % CATEGORY_BG_COLORS.length);
      return CATEGORY_BG_COLORS[index];
    };


    function CalendarHeader({ currentDate, onPrevMonth, onNextMonth, onToday }:
    {
      currentDate: Date;
      onPrevMonth: () => void;
      onNextMonth: () => void;
      onToday: () => void;
    }) {
      return (
        <div className="flex items-center justify-between gap-4 mb-6">
          <h2 className="text-xl font-bold md:text-2xl tracking-tight">
            {format(currentDate, "MMMM yyyy")}
          </h2>
          <div className="flex items-center gap-2">
            <Button variant="outline" size="sm" onClick={onToday}>Today</Button>
            <div className="flex items-center">
              <Button variant="outline" size="icon" className="h-9 w-9" onClick={onPrevMonth}>
                <ChevronLeft className="h-4 w-4" />
              </Button>
              <Button variant="outline" size="icon" className="h-9 w-9" onClick={onNextMonth}>
                <ChevronRight className="h-4 w-4" />
              </Button>
            </div>
          </div>
        </div>
      );
    }


    function CalendarEvent({ item, isSelected, isDragging, onDragStart,
    colorProp }: { 
        item: GenericItem; 
        isSelected: boolean;
        isDragging: boolean;
        onDragStart: (e: React.DragEvent<HTMLDivElement>, itemId: string) => void;
        colorProp: CalendarColorProp;
    }) {
      const { config, onItemSelect } = useDynamicView();
      const { calendarView: viewConfig } = config;

        const colorClass = useMemo(() => {
          switch (colorProp) {
            case 'priority': return PRIORITY_BG_COLORS[item.priority as Priority];
            case 'status': return STATUS_BG_COLORS[item.status as Status];
            case 'category': return getCategoryBgColor(item.category as string);
            default: return null;
          }
        }, [colorProp, item]);

        return (
            <div
                draggable
                onDragStart={(e) => onDragStart(e, item.id)}
                onClick={() => onItemSelect(item)}
                className={cn(
                    "p-2 rounded-lg cursor-grab transition-all duration-200 border space-y-1",
                    isSelected && "ring-2 ring-primary ring-offset-background ring-offset-2",
                    isDragging && "opacity-50 ring-2 ring-primary cursor-grabbing",
                    colorClass 
                      ? `${colorClass} hover:brightness-95 dark:hover:brightness-110`
                      : "bg-card/60 dark:bg-neutral-800/60 backdrop-blur-sm hover:bg-card/80 dark:hover:bg-neutral-700/70"
                )}
            >
                <div className={cn(
                  "font-semibold text-sm leading-tight line-clamp-2",
                  colorClass ? "text-inherit" : "text-card-foreground/90"
                )}>
                  <FieldRenderer item={item} fieldId={viewConfig.titleField} />
                </div>

                {viewConfig.displayFields.includes('tags') && <FieldRenderer item={item} fieldId="tags" />}

                {(viewConfig.displayFields.includes('priority') || viewConfig.displayFields.includes('assignee')) && (
                    <div className={cn(
                        "flex items-center justify-between pt-1 border-t",
                        colorClass ? "border-black/10 dark:border-white/10" : "border-border/30 dark:border-neutral-700/50"
                    )}>
                        <div>
                          {viewConfig.displayFields.includes('priority') && <FieldRenderer item={item} fieldId="priority" />}
                        </div>
                        <div>
                          {viewConfig.displayFields.includes('assignee') && <FieldRenderer item={item} fieldId="assignee" options={{ compact: true, avatarClassName: 'w-5 h-5' }}/>}
                        </div>
                    </div>
                )}
            </div>
        );
    }


    const datePropLabels: Record<CalendarDateProp, string> = {
      dueDate: 'due dates',
      createdAt: 'creation dates',
      updatedAt: 'update dates',
    };


    export function CalendarView({ data }: CalendarViewProps) {
      const [currentDate, setCurrentDate] = useState(new Date());
      const {
        selectedItemId,
        onItemUpdate,
        calendarDateProp = 'dueDate', // Provide default
        calendarItemLimit = 3, // Provide default
        calendarColorProp = 'none', // Provide default
      } = useDynamicView();
      
      // Drag & Drop State
      const [draggedItemId, setDraggedItemId] = useState<string | null>(null);
      const [dropTargetDate, setDropTargetDate] = useState<Date | null>(null);

      // GSAP animation state
      const [direction, setDirection] = useState(0); // 0: initial, 1: next, -1: prev

      // Responsive Calendar State
      const calendarContainerRef = useRef<HTMLDivElement>(null);
      const { width } = useResizeObserver(calendarContainerRef);
      const MIN_DAY_WIDTH = 160; // px
      const numColumns = useMemo(() => {
        if (width === 0) return 7;
        const cols = Math.floor(width / MIN_DAY_WIDTH);
        return Math.max(3, Math.min(7, cols));
      }, [width]);

      const gridRef = useRef<HTMLDivElement>(null);
      const itemsByDateProp = useMemo(() => data.filter(item => !!item[calendarDateProp]), [data, calendarDateProp]);

      const eventsByDate = useMemo(() => {
        const eventsMap = new Map<string, GenericItem[]>();
        itemsByDateProp.forEach(item => {
          const dateValue = item[calendarDateProp];
          if (!dateValue) return;
          const date = new Date(dateValue as string);
          const dateKey = format(date, "yyyy-MM-dd");
          if (!eventsMap.has(dateKey)) {
            eventsMap.set(dateKey, []);
          }
          eventsMap.get(dateKey)?.push(item);
        });
        return eventsMap;
      }, [itemsByDateProp, calendarDateProp]);

      const monthStart = startOfMonth(currentDate);
      const monthEnd = endOfMonth(monthStart);
      const startDate = startOfWeek(monthStart, { weekStartsOn: 0 }); // Sunday
      const endDate = endOfWeek(monthEnd, { weekStartsOn: 0 });

      const days = eachDayOfInterval({ start: startDate, end: endDate });
      const weekdays = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
      
      // D&D Handlers
      const handleDragStart = (e: React.DragEvent, itemId: string) => {
        e.dataTransfer.effectAllowed = 'move';
        e.dataTransfer.setData('text/plain', itemId);
        setDraggedItemId(itemId);
      };
      
      const handleDragEnd = () => {
        setDraggedItemId(null);
        setDropTargetDate(null);
      };

      const handleDragOver = (e: React.DragEvent, day: Date) => {
        e.preventDefault();
        if (dropTargetDate === null || !isSameDay(day, dropTargetDate)) {
            setDropTargetDate(day);
        }
      };

      const handleDragLeave = () => {
        setDropTargetDate(null);
      };

      const handleDrop = (e: React.DragEvent, day: Date) => {
        e.preventDefault();
        const itemIdToUpdate = e.dataTransfer.getData('text/plain');
        if (itemIdToUpdate) {
            const originalItem = itemsByDateProp.find(i => i.id === itemIdToUpdate);
            if (originalItem && originalItem[calendarDateProp]) {
                const originalDate = new Date(originalItem[calendarDateProp] as string);
                // Preserve the time, only change the date part
                const newDueDate = new Date(day);
                newDueDate.setHours(originalDate.getHours(), originalDate.getMinutes(), originalDate.getSeconds(), originalDate.getMilliseconds());
                onItemUpdate?.(itemIdToUpdate, { [calendarDateProp]: newDueDate.toISOString() });
            }
        }
        handleDragEnd(); // Reset state
      };
      
      const handlePrevMonth = () => {
        setDirection(-1);
        setCurrentDate(subMonths(currentDate, 1));
      };
      const handleNextMonth = () => {
        setDirection(1);
        setCurrentDate(addMonths(currentDate, 1));
      };
      const handleToday = () => {
        setDirection(0); // No animation for 'Today'
        setCurrentDate(new Date());
      };

      useLayoutEffect(() => {
        if (direction === 0 || !gridRef.current) return;
        gsap.fromTo(gridRef.current, 
          { opacity: 0, x: 30 * direction }, 
          { opacity: 1, x: 0, duration: 0.3, ease: 'power2.out' }
        );
      }, [currentDate]);

      return (
        <div ref={calendarContainerRef} className="-mx-4 md:-mx-6">
          <div className="px-4 md:px-6 pb-2">
            <CalendarHeader currentDate={currentDate} onPrevMonth={handlePrevMonth} onNextMonth={handleNextMonth} onToday={handleToday} />
          </div>
          {itemsByDateProp.length === 0 ? (
            <div className="flex items-center justify-center h-96 text-muted-foreground rounded-lg border bg-card/30 mx-4 md:mx-6">
              No items with {datePropLabels[calendarDateProp]} to display on the calendar.
            </div>
          ) : (
            <div className="px-2" onDragEnd={handleDragEnd}>
              {numColumns === 7 && (
                <div className="grid grid-cols-7">
                  {weekdays.map(day => (
                    <div key={day} className="py-2 px-3 text-center text-xs font-semibold text-muted-foreground">
                      {day}
                    </div>
                  ))}
                </div>
              )}

                <div
                  ref={gridRef}
                  style={{
                    display: 'grid',
                    gridTemplateColumns: `repeat(${numColumns}, minmax(0, 1fr))`,
                    gap: '0.5rem',
                  }}
                >
                  {days.map(day => {
                    const dateKey = format(day, "yyyy-MM-dd");
                    const dayEvents = eventsByDate.get(dateKey) || [];
                    const visibleEvents = calendarItemLimit === 'all' 
                        ? dayEvents 
                        : dayEvents.slice(0, calendarItemLimit as number);
                    const hiddenEventsCount = dayEvents.length - visibleEvents.length;
                    const isCurrentMonthDay = isSameMonth(day, currentDate);
                    const isDropTarget = dropTargetDate && isSameDay(day, dropTargetDate);
                    return (
                      <div
                        key={day.toString()}
                        onDragOver={(e) => handleDragOver(e, day)}
                        onDragLeave={handleDragLeave}
                        onDrop={(e) => handleDrop(e, day)}
                        className={cn(
                          "relative min-h-[150px] rounded-2xl p-2 flex flex-col gap-2 transition-all duration-300 border",
                          isCurrentMonthDay ? "bg-card/40 dark:bg-neutral-900/40 border-transparent" : "bg-muted/30 dark:bg-neutral-800/20 border-transparent text-muted-foreground/60",
                          isDropTarget ? "border-primary/50 bg-primary/10" : "hover:border-primary/20 hover:bg-card/60"
                        )}
                      >
                        <div className="font-semibold text-sm">
                          {isToday(day) ? (
                            <div className="flex items-center justify-center w-7 h-7 rounded-full bg-primary text-primary-foreground">
                              {format(day, 'd')}
                            </div>
                          ) : (
                            <div className="flex items-baseline gap-1.5 px-1 py-0.5">
                              {numColumns < 7 && <span className="text-xs opacity-70">{format(day, 'eee')}</span>}
                              <span>{format(day, 'd')}</span>
                            </div>
                          )}
                        </div>
                        <div className="space-y-2 overflow-y-auto flex-grow custom-scrollbar">
                          {visibleEvents.map(item => (
                            <CalendarEvent
                              key={item.id} 
                              item={item} 
                              isSelected={selectedItemId === item.id}
                              isDragging={draggedItemId === item.id}
                              onDragStart={handleDragStart}
                              colorProp={calendarColorProp}
                            />
                          ))}
                        </div>
                        {hiddenEventsCount > 0 && (
                          <div className="absolute bottom-1 right-2 text-xs font-bold text-muted-foreground">
                            +{hiddenEventsCount} more
                          </div>
                        )}
                      </div>
                    );
                  })}
                </div>
            </div>
          )}
        </div>
      );
    }
  src/features/dynamic-view/components/views/TableView.tsx: >-
    import { useRef, useLayoutEffect, useMemo, type ReactNode } from 'react'

    import { gsap } from 'gsap'

    import { cn } from '@/lib/utils'

    import { 
      ArrowUpDown, 
      ArrowUp, 
      ArrowDown,
      ExternalLink
    } from 'lucide-react'

    import type { GenericItem } from '../../types'

    import { EmptyState } from '../shared/EmptyState'

    import { capitalize } from '@/lib/utils'

    import { useDynamicView } from '../../DynamicViewContext'

    import { FieldRenderer } from '../shared/FieldRenderer'


    export function TableView({ data, ctaElement }: { data: GenericItem[],
    ctaElement?: ReactNode }) {
      const { config, sortConfig, onSortChange, groupBy, onItemSelect, selectedItemId } = useDynamicView();
      const { tableView: viewConfig } = config;

      const tableRef = useRef<HTMLTableElement>(null)
      const animatedItemsCount = useRef(0)

      useLayoutEffect(() => {
        if (tableRef.current) {
          // Only select item rows for animation, not group headers
          const newItems = Array.from( 
            tableRef.current.querySelectorAll('tbody tr')
          ).filter(tr => !(tr as HTMLElement).dataset.groupHeader)
           .slice(animatedItemsCount.current);
          gsap.fromTo(newItems,
            { y: 20, opacity: 0 },
            {
              duration: 0.5,
              y: 0,
              opacity: 1,
              stagger: 0.05,
              ease: "power2.out",
            },
          );
          animatedItemsCount.current = data.length;
        }
      }, [data]);

      const SortIcon = ({ field }: { field: string }) => {
        if (sortConfig?.key !== field) {
          return <ArrowUpDown className="w-4 h-4 opacity-50" />
        }
        if (sortConfig.direction === 'asc') {
          return <ArrowUp className="w-4 h-4 text-primary" />
        }
        if (sortConfig.direction === 'desc') {
          return <ArrowDown className="w-4 h-4 text-primary" />
        }
        return <ArrowUpDown className="w-4 h-4 opacity-50" />
      }

      const handleSortClick = (field: string) => {
        const newDirection = (sortConfig?.key === field && sortConfig.direction === 'desc') ? 'asc' : 'desc';
        onSortChange({ key: field, direction: newDirection });
      }

      const groupedData = useMemo(() => {
        if (groupBy === 'none') return null;
        return (data as GenericItem[]).reduce((acc, item) => {
          const groupKey = item[groupBy as 'status' | 'priority' | 'category'] || 'N/A';
          if (!acc[groupKey]) {
            acc[groupKey] = [];
          }
          acc[groupKey].push(item);
          return acc;
        }, {} as Record<string, GenericItem[]>);
      }, [data, groupBy]);

      if (data.length === 0) {
        return <EmptyState />
      }

      return (
        <div className="relative overflow-hidden rounded-2xl border bg-card/50 backdrop-blur-sm">
          <div className="overflow-x-auto">
            <table ref={tableRef} className="w-full">
              <thead>
                <tr className="border-b border-border/50 bg-muted/20">
                  {viewConfig.columns.map(col => (
                    <th key={col.fieldId} className="text-left p-4 font-semibold text-sm">
                      {col.isSortable ? (
                        <button
                          onClick={() => handleSortClick(col.fieldId)}
                          className="flex items-center gap-2 hover:text-primary transition-colors"
                        >
                          {col.label}
                          <SortIcon field={col.fieldId} />
                        </button>
                      ) : (
                        <span>{col.label}</span>
                      )}
                    </th>
                  ))}
                  <th className="text-center p-4 font-semibold text-sm w-16">Actions</th>
                </tr>
              </thead>
              <tbody>
                {groupedData
                  ? Object.entries(groupedData).flatMap(([groupName, items]) => [
                      <tr key={groupName} data-group-header="true" className="sticky top-0 z-10">
                        <td colSpan={viewConfig.columns.length + 1} className="p-2 bg-muted/50 backdrop-blur-sm">
                          <div className="flex items-center gap-2">
                            <h3 className="font-semibold text-sm">{capitalize(groupName)}</h3>
                            <span className="text-xs px-2 py-0.5 bg-background rounded-full font-medium">{items.length}</span>
                          </div>
                        </td>
                      </tr>,
                      ...items.map(item => <TableRow key={item.id} item={item} isSelected={selectedItemId === item.id} onItemSelect={onItemSelect} />)
                    ])
                  : data.map(item => <TableRow key={item.id} item={item} isSelected={selectedItemId === item.id} onItemSelect={onItemSelect} />)
                }
                {ctaElement}
              </tbody>
            </table>
          </div>
        </div>
      )
    }


    function TableRow({ item, isSelected, onItemSelect }: { item: GenericItem;
    isSelected: boolean; onItemSelect: (item: GenericItem) => void }) {
      const { config } = useDynamicView();
      return (
        <tr
          onClick={() => onItemSelect(item)}
          className={cn(
            "group border-b border-border/30 transition-all duration-200 cursor-pointer",
            "hover:bg-accent/20 hover:border-primary/20",
            isSelected && "bg-primary/5 border-primary/30"
          )}
        >
          {config.tableView.columns.map(col => (
            <td key={col.fieldId} className="p-4">
              <FieldRenderer item={item} fieldId={col.fieldId} options={{ showPercentage: true }} />
            </td>
          ))}
          {/* Actions Column */}
          <td className="p-4">
            <button 
              onClick={(e) => {
                e.stopPropagation()
                onItemSelect(item)
              }}
              className="flex items-center justify-center w-8 h-8 rounded-lg hover:bg-accent transition-colors"
              title="View details"
            >
              <ExternalLink className="w-4 h-4" />
            </button>
          </td>
        </tr>
      )
    }
  src/features/dynamic-view/components/controls/ViewControls.tsx: >-
    import * as React from 'react'

    import { Check, ListFilter, Search, SortAsc, ChevronsUpDown, Settings } from
    'lucide-react'


    import { cn } from '@/lib/utils'

    import { Button } from '@/components/ui/button'

    import { Input } from '@/components/ui/input'

    import { Badge } from '@/components/ui/badge'

    import { Popover, PopoverContent, PopoverTrigger } from
    '@/components/ui/popover'

    import {
      DropdownMenu,
      DropdownMenuContent,
      DropdownMenuRadioGroup,
      DropdownMenuRadioItem,
      DropdownMenuSeparator,
      DropdownMenuLabel,
      DropdownMenuTrigger,
    } from '@/components/ui/dropdown-menu'

    import {
      Command,
      CommandEmpty,
      CommandGroup,
      CommandInput,
      CommandItem,
      CommandList,
      CommandSeparator,
    } from '@/components/ui/command'

    import { Label } from "@/components/ui/label";

    import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";

    import { Checkbox } from "@/components/ui/checkbox";

    import { Switch } from "@/components/ui/switch";

    import { Separator } from "@/components/ui/separator";


    import type { FilterConfig, CalendarDateProp, CalendarDisplayProp,
    CalendarColorProp } from '../../types'

    import { useDynamicView } from '../../DynamicViewContext';


    export interface DataViewControlsProps {
      // groupOptions will now come from config
    }


    export function ViewControls() {
      const {
        config,
        filters,
        onFiltersChange,
        sortConfig,
        onSortChange,
        groupBy,
        onGroupByChange,
        viewMode,
      } = useDynamicView();
      const sortOptions = config.sortableFields;
      const groupOptions = config.groupableFields;
      const filterableFields = config.filterableFields;

      const handleSearchChange = (event: React.ChangeEvent<HTMLInputElement>) => {
        onFiltersChange({ ...filters, searchTerm: event.target.value });
      }
      
      const activeFilterCount = filterableFields.reduce((acc, field) => acc + (filters[field.id]?.length || 0), 0)

      return (
        <div className="flex flex-col sm:flex-row items-center gap-2 w-full">
          {/* Search */}
          <div className="relative w-full sm:w-auto">
            <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground" />
            <Input
              placeholder="Search projects..."
              className="pl-9 w-full sm:w-64"
              value={filters.searchTerm}
              onChange={handleSearchChange}
            />
          </div>

          {/* Filters */}
          <Popover>
            <PopoverTrigger asChild>
              <Button variant="outline" size="sm" className="h-9 w-full sm:w-auto justify-start border-dashed">
                <ListFilter className="mr-2 h-4 w-4" />
                Filters
                {activeFilterCount > 0 && (
                  <>
                    <div className="mx-2 h-4 w-px bg-muted-foreground/50" />
                    <Badge variant="secondary" className="rounded-sm px-1 font-normal">
                      {activeFilterCount}
                    </Badge>
                  </>
                )}
              </Button>
            </PopoverTrigger>
            <PopoverContent className="w-[240px] p-0" align="start">
              <CombinedFilter filters={filters} onFiltersChange={onFiltersChange} filterableFields={filterableFields} />
            </PopoverContent>
          </Popover>

          {activeFilterCount > 0 && (
            <Button variant="ghost" size="sm" onClick={() => onFiltersChange({ searchTerm: filters.searchTerm, status: [], priority: [] })}>Reset</Button>
          )}

          {/* Spacer */}
          <div className="hidden md:block flex-grow" />

          {viewMode === 'calendar' ? (
            <CalendarSpecificControls />
          ) : (
            <>
              {/* Sorter */}
              <DropdownMenu>
                <DropdownMenuTrigger asChild>
                  <Button variant="outline" size="sm" className="h-9 w-full sm:w-auto justify-start">
                    <SortAsc className="mr-2 h-4 w-4" />
                    Sort by: {sortOptions.find(o => o.id === sortConfig?.key)?.label || 'Default'}
                  </Button>
                </DropdownMenuTrigger>
                <DropdownMenuContent align="end" className="w-[200px]">
                  <DropdownMenuLabel>Sort by</DropdownMenuLabel>
                  <DropdownMenuRadioGroup
                    value={`${sortConfig?.key || 'default'}-${sortConfig?.direction || ''}`}
                    onValueChange={(value) => {
                      if (value.startsWith('default')) {
                        onSortChange(null);
                      } else {
                        const [key, direction] = value.split('-')
                        onSortChange({ key: key, direction: direction as 'asc' | 'desc' });
                      }
                    }}
                  >
                    <DropdownMenuRadioItem value="default-">Default</DropdownMenuRadioItem>
                    <DropdownMenuSeparator />
                    {sortOptions.map(option => (
                      <React.Fragment key={option.id}>
                        <DropdownMenuRadioItem value={`${option.id}-desc`}>{option.label} (Desc)</DropdownMenuRadioItem>
                        <DropdownMenuRadioItem value={`${option.id}-asc`}>{option.label} (Asc)</DropdownMenuRadioItem>
                      </React.Fragment>
                    ))}
                  </DropdownMenuRadioGroup>
                </DropdownMenuContent>
              </DropdownMenu>

              {/* Group By Dropdown */}
              <div className="flex items-center gap-2 shrink-0 w-full sm:w-auto">
                <DropdownMenu>
                  <DropdownMenuTrigger asChild>
                    <Button variant="outline" size="sm" className="h-9 w-full justify-between">
                      Group by: {groupOptions.find(o => o.id === groupBy)?.label}
                      <ChevronsUpDown className="ml-2 h-4 w-4 shrink-0 opacity-50" />
                    </Button>
                  </DropdownMenuTrigger>
                  <DropdownMenuContent className="w-[180px]">
                    <DropdownMenuRadioGroup value={groupBy} onValueChange={onGroupByChange}>
                      {groupOptions.map(option => (
                        <DropdownMenuRadioItem key={option.id} value={option.id}>
                          {option.label}
                        </DropdownMenuRadioItem>
                      ))}
                    </DropdownMenuRadioGroup>
                  </DropdownMenuContent>
                </DropdownMenu>
              </div>
            </>
          )}
        </div>
      )
    }


    function CalendarSpecificControls() {
        const {
            calendarDateProp, onCalendarDatePropChange,
            calendarDisplayProps, onCalendarDisplayPropsChange,
            calendarItemLimit, onCalendarItemLimitChange,
            calendarColorProp, onCalendarColorPropChange,
        } = useDynamicView();

        const handleDisplayPropChange = (prop: CalendarDisplayProp, checked: boolean) => {
            const newProps = checked 
                ? [...(calendarDisplayProps || []), prop] 
                : (calendarDisplayProps || []).filter(p => p !== prop);
            onCalendarDisplayPropsChange?.(newProps);
        };

        return (
            <Popover>
                <PopoverTrigger asChild>
                    <Button variant="outline" size="icon" className="h-9 w-9">
                        <Settings className="h-4 w-4" />
                    </Button>
                </PopoverTrigger>
                <PopoverContent className="w-80 p-4" align="end">
                    <div className="space-y-4">
                        <div className="space-y-1">
                            <h4 className="font-medium leading-none">Calendar Settings</h4>
                            <p className="text-sm text-muted-foreground">
                                Customize the calendar view.
                            </p>
                        </div>
                        <Separator />
                        <div className="space-y-3">
                            <Label className="font-semibold">Item Background Color</Label>
                            <RadioGroup value={calendarColorProp} onValueChange={(v) => onCalendarColorPropChange?.(v as CalendarColorProp)} className="gap-2">
                                <div className="flex items-center space-x-2">
                                    <RadioGroupItem value="none" id="color-none" />
                                    <Label htmlFor="color-none" className="font-normal">None</Label>
                                </div>
                                <div className="flex items-center space-x-2">
                                    <RadioGroupItem value="priority" id="color-priority" />
                                    <Label htmlFor="color-priority" className="font-normal">By Priority</Label>
                                </div>
                                <div className="flex items-center space-x-2">
                                    <RadioGroupItem value="status" id="color-status" />
                                    <Label htmlFor="color-status" className="font-normal">By Status</Label>
                                </div>
                                 <div className="flex items-center space-x-2">
                                    <RadioGroupItem value="category" id="color-category" />
                                    <Label htmlFor="color-category" className="font-normal">By Category</Label>
                                </div>
                            </RadioGroup>
                        </div>
                        <Separator />
                        <div className="space-y-3">
                            <Label className="font-semibold">Date Property</Label>
                            <RadioGroup value={calendarDateProp} onValueChange={(v) => onCalendarDatePropChange?.(v as CalendarDateProp)} className="gap-2">
                                <div className="flex items-center space-x-2">
                                    <RadioGroupItem value="dueDate" id="dueDate" />
                                    <Label htmlFor="dueDate" className="font-normal">Due Date</Label>
                                </div>
                                <div className="flex items-center space-x-2">
                                    <RadioGroupItem value="createdAt" id="createdAt" />
                                    <Label htmlFor="createdAt" className="font-normal">Created Date</Label>
                                </div>
                                <div className="flex items-center space-x-2">
                                    <RadioGroupItem value="updatedAt" id="updatedAt" />
                                    <Label htmlFor="updatedAt" className="font-normal">Updated Date</Label>
                                </div>
                            </RadioGroup>
                        </div>
                        <div className="space-y-3">
                            <Label className="font-semibold">Card Details</Label>
                            <div className="space-y-2">
                                {(['priority', 'assignee', 'tags'] as CalendarDisplayProp[]).map(prop => (
                                    <div key={prop} className="flex items-center space-x-2">
                                        <Checkbox id={prop} checked={(calendarDisplayProps || []).includes(prop)} onCheckedChange={(c) => handleDisplayPropChange(prop, !!c)} />
                                        <Label htmlFor={prop} className="capitalize font-normal">{prop}</Label>
                                    </div>
                                ))}
                            </div>
                        </div>
                        <Separator />
                        <div className="flex items-center justify-between">
                             <div className="space-y-0.5">
                                <Label htmlFor="show-all" className="font-semibold">Show all items</Label>
                                <p className="text-xs text-muted-foreground">Display all items on a given day.</p>
                            </div>
                            <Switch id="show-all" checked={calendarItemLimit === 'all'} onCheckedChange={(c) => onCalendarItemLimitChange?.(c ? 'all' : 3)} />
                        </div>
                    </div>
                </PopoverContent>
            </Popover>
        );
    }


    function CombinedFilter({
      filters,
      onFiltersChange,
      filterableFields,
    }: {
      filters: FilterConfig;
      onFiltersChange: (filters: FilterConfig) => void;
      filterableFields: { id: string; label: string; options: { id: string; label: string }[] }[];
    }) {
      const handleSelect = (fieldId: string, value: string) => {
        const currentValues = new Set(filters[fieldId] || []);
        currentValues.has(value) ? currentValues.delete(value) : currentValues.add(value);
        
        onFiltersChange({ ...filters, [fieldId]: Array.from(currentValues) });
      };

      const hasActiveFilters = filterableFields.some(field => (filters[field.id] || []).length > 0);

      const clearFilters = () => {
        const clearedFilters: Partial<FilterConfig> = {};
        filterableFields.forEach(field => {
          clearedFilters[field.id as keyof Omit<FilterConfig, 'searchTerm'>] = [];
        });
        onFiltersChange({ searchTerm: filters.searchTerm, ...clearedFilters });
      }

      return (
        <Command>
          <CommandInput placeholder="Filter by..." />
          <CommandList>
            <CommandEmpty>No results found.</CommandEmpty>
            
            {filterableFields.map((field, index) => (
              <React.Fragment key={field.id}>
                <CommandGroup heading={field.label}>
                  {field.options.map((option) => {
                const isSelected = (filters[field.id] || []).includes(option.id);
                return (
                  <CommandItem
                    key={option.id}
                    onSelect={() => handleSelect(field.id, option.id)}
                  >
                    <div
                      className={cn(
                        'mr-2 flex h-4 w-4 items-center justify-center rounded-sm border border-primary',
                        isSelected ? 'bg-primary text-primary-foreground' : 'opacity-50 [&_svg]:invisible'
                      )}
                    >
                      <Check className={cn('h-4 w-4')} />
                    </div>
                    <span>{option.label}</span>
                  </CommandItem>
                );
              })}
                </CommandGroup>
                {index < filterableFields.length - 1 && <CommandSeparator />}
              </React.Fragment>
            ))}

            {hasActiveFilters && (
              <>
                <CommandSeparator />
                <CommandGroup>
                  <CommandItem
                    onSelect={clearFilters}
                    className="justify-center text-center text-sm"
                  >
                    Clear filters
                  </CommandItem>
                </CommandGroup>
              </>
            )}
          </CommandList>
        </Command>
      )
    }
approved: true
linesAdded: null
linesRemoved: null
linesDifference: null
gitCommittedAt: null
status: committed
id: 535
