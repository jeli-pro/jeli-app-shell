uuid: c25dbb9a-41e5-4720-a292-06909867b140
projectId: jeli-app-shell
createdAt: '2025-10-13T01:38:11.217Z'
gitCommitMsg: >-
  refactor(DataDemo): enhance UI cohesion and minimalism

  - Consolidates the page header and toolbar into a single, responsive row in
  `DataDemoPage`. - Moves `DataViewModeSelector` out of the toolbar to give it
  more prominence and separate view from data controls. - Redesigns
  `DataToolbar` to be more compact and streamlined. - Combines "Status" and
  "Priority" filters into a single "Filter" popover, reducing UI clutter. -
  Simplifies button labels and adjusts input sizes for a cleaner aesthetic. -
  Updates the project count display to be more informative during pagination.
promptSummary: >-
  I've refactored the data demo page UI to be more cohesive and minimalist. I
  consolidated the page header and toolbar, combined multiple filter controls
  into a single popover, and refined component styles for a cleaner look, while
  keeping the user-praised view mode selector prominent.
reasoning:
  - >-
    Of course. I can certainly refine the UI to be more cohesive and minimalist
    while preserving the distinct style of the `DataViewModeSelector`.
  - 'My plan is to:'
  - >-
    1.  **Consolidate the Header**: I'll merge the page title and the toolbar
    into a single, clean header row. The page title will be on the left, while
    all controls are grouped on the right.
  - >-
    2.  **Streamline the Toolbar**: I'll combine the "Status" and "Priority"
    filters into a single, unified "Filter" popover. This will reduce the number
    of buttons from four (2 filters, 1 sort, 1 reset) to just two or three,
    making the interface much cleaner.
  - >-
    3.  **Refine Control Styles**: I will adjust the styles of the search input
    and sort button to be more compact and visually consistent with the new,
    minimalist filter button.
  - Let's start by restructuring the main page layout.
  - '### Step 1: Update Page Layout'
  - >-
    I'll adjust `DataDemoPage/index.tsx` to create a more integrated header. The
    `DataViewModeSelector` will be moved out of the `DataToolbar` and placed
    alongside it, giving it prominence while grouping all controls logically.
  - '### Step 2: Redesign the Data Toolbar'
  - >-
    Next, I'll completely redesign the `DataToolbar` component. The separate
    filter buttons will be replaced with a single, elegant popover that houses
    both "Status" and "Priority" options. This significantly declutters the
    interface.
  - >-
    These changes create a much cleaner, more cohesive, and minimalist user
    experience for the data demonstration page, focusing on a clear information
    hierarchy and streamlined user controls.
operations:
  - type: write
    path: src/pages/DataDemo/index.tsx
    content: >+
      --- src/pages/DataDemo/index.tsx

      +++ src/pages/DataDemo/index.tsx

      @@ -11,6 +11,7 @@
       import { DataListView } from './components/DataListView'
       import { DataCardView } from './components/DataCardView'
       import { DataTableView } from './components/DataTableView'
      +import { DataViewModeSelector } from './components/DataViewModeSelector'
       import { DataDetailPanel } from './components/DataDetailPanel'
       import { AnimatedLoadingSkeleton } from './components/AnimatedLoadingSkeleton'
       import { StatChartCard } from './components/StatChartCard'
      @@ -282,21 +283,21 @@
           >
             <div className="space-y-8">
               {/* Header */}
      -        <div className="flex flex-col md:flex-row md:items-center
      md:justify-between gap-4">

      +        <div className="flex flex-col sm:flex-row sm:items-start
      sm:justify-between gap-4">
                 <div>
                   <h1 className="text-2xl font-bold tracking-tight">Data Showcase</h1>
                   <p className="text-muted-foreground">
                     {isInitialLoading 
                       ? "Loading projects..." 
      -                : `Showing ${processedData.length} item(s)`}

      +                : `Showing ${items.length} of ${processedData.length}
      item(s)`}
                   </p>
                 </div>
      -        </div>

      -        <div className="flex flex-col md:flex-row md:items-center
      md:justify-between gap-4">

      -          <DataToolbar 

      -            viewMode={viewMode} onViewModeChange={setViewMode}

      -            filters={filters} onFiltersChange={handleFilterChange}

      -            sortConfig={sortConfig} onSortChange={handleSortChange} />

      +          <div className="flex flex-col-reverse items-stretch gap-4
      sm:flex-row sm:items-center">

      +            <DataToolbar 

      +              filters={filters} onFiltersChange={handleFilterChange}

      +              sortConfig={sortConfig} onSortChange={handleSortChange} />

      +            <DataViewModeSelector viewMode={viewMode}
      onChange={setViewMode} />

      +          </div>
               </div>
       
               {/* Stats Section */}

    patchStrategy: standard-diff
  - type: write
    path: src/pages/DataDemo/components/DataToolbar.tsx
    content: >-
      import * as React from 'react'

      import { Check, ListFilter, Search, SortAsc, X } from 'lucide-react'


      import { cn } from '@/lib/utils'

      import { Button } from '@/components/ui/button'

      import { Input } from '@/components/ui/input'

      import { Badge } from '@/components/ui/badge'

      import { Popover, PopoverContent, PopoverTrigger } from
      '@/components/ui/popover'

      import {
        DropdownMenu,
        DropdownMenuContent,
        DropdownMenuRadioGroup,
        DropdownMenuRadioItem,
        DropdownMenuSeparator,
        DropdownMenuLabel,
        DropdownMenuTrigger,
      } from '@/components/ui/dropdown-menu'

      import {
        Command,
        CommandEmpty,
        CommandGroup,
        CommandInput,
        CommandItem,
        CommandList,
        CommandSeparator,
      } from '@/components/ui/command'


      import type { SortConfig, SortableField, Status, Priority } from
      '../types'


      export interface FilterConfig {
        searchTerm: string
        status: Status[]
        priority: Priority[]
      }


      interface DataToolbarProps {
        filters: FilterConfig
        onFiltersChange: (filters: FilterConfig) => void
        sortConfig: SortConfig | null
        onSortChange: (config: SortConfig | null) => void
      }


      const statusOptions: { value: Status; label: string }[] = [
        { value: 'active', label: 'Active' },
        { value: 'pending', label: 'Pending' },
        { value: 'completed', label: 'Completed' },
        { value: 'archived', label: 'Archived' },
      ]


      const priorityOptions: { value: Priority; label: string }[] = [
        { value: 'critical', label: 'Critical' },
        { value: 'high', label: 'High' },
        { value: 'medium', label: 'Medium' },
        { value: 'low', label: 'Low' },
      ]


      const sortOptions: { value: SortableField, label: string }[] = [
        { value: 'updatedAt', label: 'Last Updated' },
        { value: 'title', label: 'Title' },
        { value: 'status', label: 'Status' },
        { value: 'priority', label: 'Priority' },
        { value: 'metrics.completion', label: 'Progress' },
      ]



      export function DataToolbar({
        filters,
        onFiltersChange,
        sortConfig,
        onSortChange,
      }: DataToolbarProps) {
        const handleSearchChange = (event: React.ChangeEvent<HTMLInputElement>) => {
          onFiltersChange({ ...filters, searchTerm: event.target.value })
        }
        
        const selectedStatuses = new Set(filters.status)
        const selectedPriorities = new Set(filters.priority)
        const activeFilterCount = selectedStatuses.size + selectedPriorities.size

        return (
          <div className="flex items-center gap-2">
            <div className="relative">
              <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground" />
              <Input
                placeholder="Search..."
                className="pl-9 h-9 w-40 lg:w-64"
                value={filters.searchTerm}
                onChange={handleSearchChange}
              />
            </div>

            <Popover>
              <PopoverTrigger asChild>
                <Button variant="outline" size="sm" className="h-9 border-dashed">
                  <ListFilter className="mr-2 h-4 w-4" />
                  Filter
                  {activeFilterCount > 0 && (
                    <>
                      <div className="mx-2 h-4 w-px bg-muted-foreground/50" />
                      <Badge variant="secondary" className="rounded-sm px-1 font-normal">
                        {activeFilterCount}
                      </Badge>
                    </>
                  )}
                </Button>
              </PopoverTrigger>
              <PopoverContent className="w-[220px] p-0" align="start">
                <Command>
                  <CommandInput placeholder="Filter by..." />
                  <CommandList>
                    <CommandEmpty>No results found.</CommandEmpty>
                    <CommandGroup heading="Status">
                      {statusOptions.map((option) => {
                        const isSelected = selectedStatuses.has(option.value)
                        return (
                          <CommandItem
                            key={option.value}
                            onSelect={() => {
                              if (isSelected) {
                                selectedStatuses.delete(option.value)
                              } else {
                                selectedStatuses.add(option.value)
                              }
                              onFiltersChange({ ...filters, status: Array.from(selectedStatuses) })
                            }}
                          >
                            <div
                              className={cn(
                                'mr-2 flex h-4 w-4 items-center justify-center rounded-sm border border-primary',
                                isSelected ? 'bg-primary text-primary-foreground' : 'opacity-50 [&_svg]:invisible'
                              )}
                            >
                              <Check className={cn('h-4 w-4')} />
                            </div>
                            <span>{option.label}</span>
                          </CommandItem>
                        )
                      })}
                    </CommandGroup>
                    <CommandSeparator />
                    <CommandGroup heading="Priority">
                      {priorityOptions.map((option) => {
                        const isSelected = selectedPriorities.has(option.value)
                        return (
                          <CommandItem
                            key={option.value}
                            onSelect={() => {
                              if (isSelected) {
                                selectedPriorities.delete(option.value)
                              } else {
                                selectedPriorities.add(option.value)
                              }
                              onFiltersChange({ ...filters, priority: Array.from(selectedPriorities) })
                            }}
                          >
                            <div
                              className={cn(
                                'mr-2 flex h-4 w-4 items-center justify-center rounded-sm border border-primary',
                                isSelected ? 'bg-primary text-primary-foreground' : 'opacity-50 [&_svg]:invisible'
                              )}
                            >
                              <Check className={cn('h-4 w-4')} />
                            </div>
                            <span>{option.label}</span>
                          </CommandItem>
                        )
                      })}
                    </CommandGroup>
                    {activeFilterCount > 0 && (
                      <>
                        <CommandSeparator />
                        <CommandGroup>
                          <CommandItem
                            onSelect={() => onFiltersChange({ ...filters, status: [], priority: [] })}
                            className="justify-center text-center"
                          >
                            Clear filters
                          </CommandItem>
                        </CommandGroup>
                      </>
                    )}
                  </CommandList>
                </Command>
              </PopoverContent>
            </Popover>
            
            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <Button variant="outline" size="sm" className="h-9">
                  <SortAsc className="mr-2 h-4 w-4" />
                  {sortOptions.find(o => o.value === sortConfig?.key)?.label || 'Sort by'}
                </Button>
              </DropdownMenuTrigger>
              <DropdownMenuContent align="end" className="w-[200px]">
                <DropdownMenuLabel>Sort by</DropdownMenuLabel>
                <DropdownMenuRadioGroup
                  value={`${sortConfig?.key || 'default'}-${sortConfig?.direction || ''}`}
                  onValueChange={(value) => {
                    if (value.startsWith('default')) {
                      onSortChange(null)
                    } else {
                      const [key, direction] = value.split('-')
                      onSortChange({ key: key as SortableField, direction: direction as 'asc' | 'desc' })
                    }
                  }}
                >
                  <DropdownMenuRadioItem value="default-">Default</DropdownMenuRadioItem>
                  <DropdownMenuSeparator />
                  {sortOptions.map(option => (
                    <React.Fragment key={option.value}>
                      <DropdownMenuRadioItem value={`${option.value}-desc`}>{option.label} (Desc)</DropdownMenuRadioItem>
                      <DropdownMenuRadioItem value={`${option.value}-asc`}>{option.label} (Asc)</DropdownMenuRadioItem>
                    </React.Fragment>
                  ))}
                </DropdownMenuRadioGroup>
              </DropdownMenuContent>
            </DropdownMenu>

            {activeFilterCount > 0 && (
              <Button
                variant="ghost"
                onClick={() => onFiltersChange({ searchTerm: filters.searchTerm, status: [], priority: [] })}
                className="h-9 px-2 lg:px-3"
              >
                Reset
                <X className="ml-2 h-4 w-4" />
              </Button>
            )}
          </div>
        )
      }
    patchStrategy: replace
snapshot:
  src/pages/DataDemo/index.tsx: >-
    import { useState, useRef, useEffect, useCallback, useMemo } from 'react'

    import { 
      Layers, 
      AlertTriangle, 
      PlayCircle, 
      TrendingUp,
      Loader2
    } from 'lucide-react'

    import { gsap } from 'gsap'

    import { PageLayout } from '@/components/shared/PageLayout'

    import { DataListView } from './components/DataListView'

    import { DataCardView } from './components/DataCardView'

    import { DataTableView } from './components/DataTableView'

    import { DataDetailPanel } from './components/DataDetailPanel'

    import { AnimatedLoadingSkeleton } from
    './components/AnimatedLoadingSkeleton'

    import { StatChartCard } from './components/StatChartCard'

    import { DataToolbar, FilterConfig } from './components/DataToolbar'

    import { useAppShell } from '@/context/AppShellContext'

    import { mockDataItems } from './data/mockData'

    import type { DataItem, ViewMode, SortConfig, SortableField } from './types'


    type Stat = {
      title: string;
      value: string;
      icon: React.ReactNode;
      change: string;
      trend: 'up' | 'down';
      type?: 'card';
    };


    type ChartStat = {
      title: string;
      value: string;
      icon: React.ReactNode;
      change: string;
      trend: 'up' | 'down';
      type: 'chart';
      chartData: number[];
    };


    type StatItem = Stat | ChartStat;


    export default function DataDemoPage() {
      const [viewMode, setViewMode] = useState<ViewMode>('list')
      const [filters, setFilters] = useState<FilterConfig>({
        searchTerm: '',
        status: [],
        priority: [],
      })
      const [sortConfig, setSortConfig] = useState<SortConfig | null>({ key: 'updatedAt', direction: 'desc' })
      const [selectedItem, setSelectedItem] = useState<DataItem | null>(null)  
      const [items, setItems] = useState<DataItem[]>([])
      const [page, setPage] = useState(0) // Start at 0 to trigger initial load effect
      const [hasMore, setHasMore] = useState(true)
      const [isLoading, setIsLoading] = useState(true)
      const contentRef = useRef<HTMLDivElement>(null)
      const statsRef = useRef<HTMLDivElement>(null)
      const observer = useRef<IntersectionObserver>()
      const { openSidePane } = useAppShell()

      const isInitialLoading = isLoading && items.length === 0

      // Centralized data processing
      const processedData = useMemo(() => {
        let filteredItems = mockDataItems.filter(item => {
          const searchTermMatch =
            item.title.toLowerCase().includes(filters.searchTerm.toLowerCase()) ||
            item.description.toLowerCase().includes(filters.searchTerm.toLowerCase())

          const statusMatch = filters.status.length === 0 || filters.status.includes(item.status)
          const priorityMatch = filters.priority.length === 0 || filters.priority.includes(item.priority)

          return searchTermMatch && statusMatch && priorityMatch
        })

        if (sortConfig) {
          filteredItems.sort((a, b) => {
            let aValue: any
            let bValue: any

            const getNestedValue = (obj: any, path: string) => path.split('.').reduce((o, k) => (o || {})[k], obj)

            aValue = getNestedValue(a, sortConfig.key)
            bValue = getNestedValue(b, sortConfig.key)

            if (aValue === undefined || bValue === undefined) return 0;

            if (typeof aValue === 'string' && typeof bValue === 'string') {
              return sortConfig.direction === 'asc'
                ? aValue.localeCompare(bValue)
                : bValue.localeCompare(aValue)
            }
            if (typeof aValue === 'number' && typeof bValue === 'number') {
              return sortConfig.direction === 'asc' ? aValue - bValue : bValue - aValue
            }
            // Date sorting (assuming ISO strings)
            if (sortConfig.key === 'updatedAt' || sortConfig.key === 'createdAt') {
                return sortConfig.direction === 'asc'
                    ? new Date(aValue).getTime() - new Date(aValue).getTime()
                    : new Date(bValue).getTime() - new Date(bValue).getTime()
            }
            return 0
          })
        }
        return filteredItems
      }, [filters, sortConfig])

      // Calculate stats from data
      const totalItems = mockDataItems.length
      const activeItems = mockDataItems.filter(item => item.status === 'active').length
      const highPriorityItems = mockDataItems.filter(item => item.priority === 'high' || item.priority === 'critical').length
      const avgCompletion = totalItems > 0 ? Math.round(
        mockDataItems.reduce((acc, item) => acc + item.metrics.completion, 0) / totalItems
      ) : 0

      // Reset pagination when filters or sort change
      useEffect(() => {
        setItems([])
        setPage(0) // This will be incremented to 1 in the loader `useEffect`, triggering a fresh load
        setHasMore(true)
        // This timeout helps prevent a flicker between old and new filtered data
        setTimeout(() => setPage(1), 50)
      }, [processedData])

      // Infinite scroll logic
      useEffect(() => { // eslint-disable-line react-hooks/exhaustive-deps
        if (page === 0) return;

        const fetchItems = () => {
          setIsLoading(true);
          const isFirstPage = page === 1
          
          const pageSize = 12;
          const newItems = processedData.slice((page - 1) * pageSize, page * pageSize);
          
          // Simulate network delay, longer for initial load to showcase skeleton
          setTimeout(() => {
            setItems(prev => (isFirstPage ? newItems : [...prev, ...newItems]))
            setHasMore(processedData.length > page * pageSize)
            setIsLoading(false)
          }, isFirstPage && items.length === 0 ? 1500 : 500)
        };

        if (hasMore) fetchItems();
      }, [page]);

      const loaderRef = useCallback(node => {
        if (isLoading) return;
        if (observer.current) observer.current.disconnect();
        
        observer.current = new IntersectionObserver(entries => {
          if (entries[0].isIntersecting && hasMore) {
            setPage(prevPage => prevPage + 1);
          }
        });
        if (node) observer.current.observe(node);
      }, [isLoading, hasMore]);

      const stats: StatItem[] = [
        {
          title: "Total Projects",
          value: totalItems.toString(),
          icon: <Layers className="w-5 h-5" />,
          change: "+5.2% this month",
          trend: "up" as const,
          type: 'chart',
          chartData: [120, 125, 122, 130, 135, 138, 142]
        },
        {
          title: "Active Projects",
          value: activeItems.toString(),
          icon: <PlayCircle className="w-5 h-5" />,
          change: "+2 this week", 
          trend: "up" as const,
          type: 'chart',
          chartData: [45, 50, 48, 55, 53, 60, 58]
        },
        {
          title: "High Priority",
          value: highPriorityItems.toString(),
          icon: <AlertTriangle className="w-5 h-5" />,
          change: "-1 from last week",
          trend: "down" as const,
          type: 'chart',
          chartData: [25, 26, 28, 27, 26, 24, 23]
        },
        {
          title: "Avg. Completion",
          value: `${avgCompletion}%`,
          icon: <TrendingUp className="w-5 h-5" />,
          change: "+3.2%",
          trend: "up" as const,
          type: 'chart',
          chartData: [65, 68, 70, 69, 72, 75, 78]
        }
      ]

      useEffect(() => {
        // Animate stats cards in
        if (!isInitialLoading && statsRef.current) {
          gsap.fromTo(statsRef.current.children,
            { y: 30, opacity: 0 },
            {
              duration: 0.6,
              y: 0,
              opacity: 1,
              stagger: 0.1,
              ease: "power2.out"
            }
          )
        }
      }, [isInitialLoading])

      const handleSortChange = (config: SortConfig | null) => {
        setSortConfig(config)
      }

      // For table view header clicks
      const handleTableSort = (field: SortableField) => {
        if (sortConfig?.key === field) {
          if (sortConfig.direction === 'desc') {
            // Cycle: desc -> asc
            setSortConfig({ key: field, direction: 'asc' })
          } else {
            // Cycle: asc -> default
            setSortConfig(null)
          }
        } else {
          // New field, default to desc
          setSortConfig({ key: field, direction: 'desc' })
        }
      }

      const handleFilterChange = (newFilters: FilterConfig) => {
        setFilters(newFilters)
      }
      
      // Handle item selection and open side panel
      const handleItemSelect = (item: DataItem) => {
        setSelectedItem(item)
        openSidePane('data-details')
      }

      const renderView = () => {
        const commonProps = {
          data: items,
          onItemSelect: handleItemSelect,
          selectedItem,
          sortConfig,
          onSort: handleTableSort,
        }

        switch (viewMode) {
          case 'list':
            return <DataListView {...commonProps} />
          case 'cards':
            return <DataCardView {...commonProps} />
          case 'grid':
            return <DataCardView {...commonProps} isGrid />
          case 'table':
            return <DataTableView {...commonProps} />
          default:
            return <DataListView {...commonProps} />
        }
      }

      return (
        <PageLayout
          // Note: Search functionality is handled by a separate SearchBar in the TopBar
        >
          <div className="space-y-8">
            {/* Header */}
            <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-4">
              <div>
                <h1 className="text-2xl font-bold tracking-tight">Data Showcase</h1>
                <p className="text-muted-foreground">
                  {isInitialLoading 
                    ? "Loading projects..." 
                    : `Showing ${processedData.length} item(s)`}
                </p>
              </div>
            </div>
            <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-4">
              <DataToolbar 
                viewMode={viewMode} onViewModeChange={setViewMode}
                filters={filters} onFiltersChange={handleFilterChange}
                sortConfig={sortConfig} onSortChange={handleSortChange} />
            </div>

            {/* Stats Section */}
            {!isInitialLoading && (
              <div ref={statsRef} className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
                {stats.map((stat) => {
                  if (stat.type === 'chart') {
                    return (
                      <StatChartCard
                        key={stat.title}
                        title={stat.title}
                        value={stat.value}
                        change={stat.change}
                        trend={stat.trend}
                        icon={stat.icon}
                        chartData={stat.chartData}
                      />
                    )
                  }
                })}
              </div>
            )}

            <div ref={contentRef} className="min-h-[500px]">
              {isInitialLoading ? <AnimatedLoadingSkeleton viewMode={viewMode} /> : renderView()}
            </div>

            {/* Loader for infinite scroll */}
            <div ref={loaderRef} className="flex justify-center items-center py-6">
              {isLoading && !isInitialLoading && (
                <div className="flex items-center gap-2 text-muted-foreground">
                  <Loader2 className="w-5 h-5 animate-spin" />
                  <span>Loading more...</span>
                </div>
              )}
              {!isLoading && !hasMore && processedData.length > 0 && !isInitialLoading && (
                <p className="text-muted-foreground">You've reached the end.</p>
              )}
            </div>
          </div>

          {/* Detail Panel */}
          <DataDetailPanel 
            item={selectedItem}
            onClose={() => setSelectedItem(null)}
          />
        </PageLayout>
      )
    }
  src/pages/DataDemo/components/DataToolbar.tsx: >-
    import * as React from 'react'

    import { Check, ListFilter, Search, SortAsc, X } from 'lucide-react'


    import { cn } from '@/lib/utils'

    import { Button } from '@/components/ui/button'

    import { Input } from '@/components/ui/input'

    import { Badge } from '@/components/ui/badge'

    import { Popover, PopoverContent, PopoverTrigger } from
    '@/components/ui/popover'

    import {
      DropdownMenu,
      DropdownMenuContent,
      DropdownMenuRadioGroup,
      DropdownMenuRadioItem,
      DropdownMenuSeparator,
      DropdownMenuLabel,
      DropdownMenuTrigger,
    } from '@/components/ui/dropdown-menu'

    import {
      Command,
      CommandEmpty,
      CommandGroup,
      CommandInput,
      CommandItem,
      CommandList,
      CommandSeparator,
    } from '@/components/ui/command'


    import { DataViewModeSelector } from './DataViewModeSelector'

    import type { ViewMode, SortConfig, SortableField, Status, Priority } from
    '../types'


    export interface FilterConfig {
      searchTerm: string
      status: Status[]
      priority: Priority[]
    }


    interface DataToolbarProps {
      viewMode: ViewMode
      onViewModeChange: (mode: ViewMode) => void
      filters: FilterConfig
      onFiltersChange: (filters: FilterConfig) => void
      sortConfig: SortConfig | null
      onSortChange: (config: SortConfig | null) => void
    }


    const statusOptions: { value: Status; label: string }[] = [
      { value: 'active', label: 'Active' },
      { value: 'pending', label: 'Pending' },
      { value: 'completed', label: 'Completed' },
      { value: 'archived', label: 'Archived' },
    ]


    const priorityOptions: { value: Priority; label: string }[] = [
      { value: 'critical', label: 'Critical' },
      { value: 'high', label: 'High' },
      { value: 'medium', label: 'Medium' },
      { value: 'low', label: 'Low' },
    ]


    const sortOptions: { value: SortableField, label: string }[] = [
      { value: 'updatedAt', label: 'Last Updated' },
      { value: 'title', label: 'Title' },
      { value: 'status', label: 'Status' },
      { value: 'priority', label: 'Priority' },
      { value: 'metrics.completion', label: 'Progress' },
    ]



    export function DataToolbar({
      viewMode,
      onViewModeChange,
      filters,
      onFiltersChange,
      sortConfig,
      onSortChange,
    }: DataToolbarProps) {
      const handleSearchChange = (event: React.ChangeEvent<HTMLInputElement>) => {
        onFiltersChange({ ...filters, searchTerm: event.target.value })
      }
      
      const activeFilterCount =
        (filters.status.length > 0 ? 1 : 0) +
        (filters.priority.length > 0 ? 1 : 0)

      return (
        <div className="flex flex-col md:flex-row items-center justify-between gap-4">
          {/* Left side: Search and Filters */}
          <div className="flex flex-col sm:flex-row items-center gap-2 w-full md:w-auto">
            <div className="relative w-full sm:w-auto">
              <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground" />
              <Input
                placeholder="Search projects..."
                className="pl-9 w-full sm:w-64"
                value={filters.searchTerm}
                onChange={handleSearchChange}
              />
            </div>

            {/* Status Filter */}
            <MultiSelectFilter
              title="Status"
              options={statusOptions}
              selected={filters.status}
              onChange={(selected) => onFiltersChange({ ...filters, status: selected as Status[] })}
            />

            {/* Priority Filter */}
            <MultiSelectFilter
              title="Priority"
              options={priorityOptions}
              selected={filters.priority}
              onChange={(selected) => onFiltersChange({ ...filters, priority: selected as Priority[] })}
            />

            {activeFilterCount > 0 && (
              <Button
                variant="ghost"
                onClick={() => onFiltersChange({ searchTerm: filters.searchTerm, status: [], priority: [] })}
                className="h-9 px-2 lg:px-3"
              >
                Reset
                <X className="ml-2 h-4 w-4" />
              </Button>
            )}
          </div>

          {/* Right side: Sorter and View Mode */}
          <div className="flex items-center gap-2 w-full md:w-auto justify-end">
            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <Button variant="outline" className="w-full sm:w-auto justify-start">
                  <SortAsc className="mr-2 h-4 w-4" />
                  Sort by: {sortOptions.find(o => o.value === sortConfig?.key)?.label || 'Default'}
                </Button>
              </DropdownMenuTrigger>
              <DropdownMenuContent align="end" className="w-[200px]">
                <DropdownMenuLabel>Sort by</DropdownMenuLabel>
                <DropdownMenuRadioGroup
                  value={`${sortConfig?.key || 'default'}-${sortConfig?.direction || ''}`}
                  onValueChange={(value) => {
                    if (value.startsWith('default')) {
                      onSortChange(null)
                    } else {
                      const [key, direction] = value.split('-')
                      onSortChange({ key: key as SortableField, direction: direction as 'asc' | 'desc' })
                    }
                  }}
                >
                  <DropdownMenuRadioItem value="default-">Default</DropdownMenuRadioItem>
                  <DropdownMenuSeparator />
                  {sortOptions.map(option => (
                    <React.Fragment key={option.value}>
                      <DropdownMenuRadioItem value={`${option.value}-desc`}>{option.label} (Desc)</DropdownMenuRadioItem>
                      <DropdownMenuRadioItem value={`${option.value}-asc`}>{option.label} (Asc)</DropdownMenuRadioItem>
                    </React.Fragment>
                  ))}
                </DropdownMenuRadioGroup>
              </DropdownMenuContent>
            </DropdownMenu>

            <DataViewModeSelector viewMode={viewMode} onChange={onViewModeChange} />
          </div>
        </div>
      )
    }


    function MultiSelectFilter({
      title,
      options,
      selected,
      onChange,
    }: {
      title: string
      options: { value: string; label: string }[]
      selected: string[]
      onChange: (selected: string[]) => void
    }) {
      const selectedSet = new Set(selected)

      return (
        <Popover>
          <PopoverTrigger asChild>
            <Button variant="outline" size="sm" className="h-9 w-full sm:w-auto justify-start border-dashed">
              <ListFilter className="mr-2 h-4 w-4" />
              {title}
              {selected.length > 0 && (
                <>
                  <div className="mx-2 h-4 w-px bg-muted-foreground/50" />
                  <Badge variant="secondary" className="rounded-sm px-1 font-normal">
                    {selected.length}
                  </Badge>
                </>
              )}
            </Button>
          </PopoverTrigger>
          <PopoverContent className="w-[220px] p-0" align="start">
            <Command>
              <CommandInput placeholder={`Filter ${title.toLowerCase()}...`} />
              <CommandList>
                <CommandEmpty>No results found.</CommandEmpty>
                <CommandGroup>
                  {options.map((option) => {
                    const isSelected = selectedSet.has(option.value)
                    return (
                      <CommandItem
                        key={option.value}
                        onSelect={() => {
                          if (isSelected) {
                            selectedSet.delete(option.value)
                          } else {
                            selectedSet.add(option.value)
                          }
                          onChange(Array.from(selectedSet))
                        }}
                      >
                        <div
                          className={cn(
                            'mr-2 flex h-4 w-4 items-center justify-center rounded-sm border border-primary',
                            isSelected ? 'bg-primary text-primary-foreground' : 'opacity-50 [&_svg]:invisible'
                          )}
                        >
                          <Check className={cn('h-4 w-4')} />
                        </div>
                        <span>{option.label}</span>
                      </CommandItem>
                    )
                  })}
                </CommandGroup>
                {selected.length > 0 && (
                  <>
                    <CommandSeparator />
                    <CommandGroup>
                      <CommandItem
                        onSelect={() => onChange([])}
                        className="justify-center text-center"
                      >
                        Clear filters
                      </CommandItem>
                    </CommandGroup>
                  </>
                )}
              </CommandList>
            </Command>
          </PopoverContent>
        </Popover>
      )
    }
approved: false
linesAdded: null
linesRemoved: null
linesDifference: null
gitCommittedAt: null
status: undone
id: 178
