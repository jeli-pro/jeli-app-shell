uuid: 13b0c36f-8703-490b-93f8-bb836e4fdd3a
projectId: jeli-app-shell
createdAt: '2025-10-21T10:46:07.320Z'
gitCommitMsg: >-
  refactor(dynamic-view): parameterize core types for type safety

  Introduces generics `<TFieldId, TItem>` to the core `ViewConfig` and all
  related type definitions in `types.ts`. This is the foundational step for
  enforcing end-to-end type safety in the DynamicView system.

  Key changes include: - `ViewConfig` is now `ViewConfig<TFieldId, TItem>`. -
  All `fieldId` properties in view layouts are now typed as `TFieldId`. -
  Control-related types like `SortConfig` and `FilterableFieldConfig` are
    now generic to use `TFieldId`.
  - This change propagates type information from the configuration,
    enabling compile-time validation of `fieldId`s and data shapes in
    subsequent steps.
promptSummary: >-
  The user wants to refactor the DynamicView system for end-to-end type safety.
  This first part involves making the core configuration types generic.
reasoning:
  - >-
    Executing Part 1 of the plan to refactor the `DynamicView` system for
    end-to-end type safety.
  - >-
    This first and most critical step is to make the core types generic. I will
    modify `src/features/dynamic-view/types.ts` to parameterize `ViewConfig` and
    all related interfaces with `TFieldId` and `TItem`. This will allow the
    TypeScript compiler to understand the shape of the data and the valid field
    identifiers, laying the groundwork for type safety throughout the entire
    system.
operations:
  - type: write
    path: src/features/dynamic-view/types.ts
    content: >-
      import type { ReactNode } from 'react';


      // --- GENERIC DATA & ITEM ---

      export type GenericItem = Record<string, any> & { id: string };


      // --- FIELD DEFINITIONS ---

      // Describes a single piece of data within a GenericItem.

      export type FieldType =
        | 'string'
        | 'longtext'
        | 'badge'
        | 'avatar'
        | 'progress'
        | 'date'
        | 'tags'
        | 'metrics'
        | 'thumbnail'
        | 'custom';

      export interface BaseFieldDefinition<TFieldId extends string> {
        id: TFieldId; // Corresponds to a key in GenericItem
        label: string;
        type: FieldType;
        // Optional custom render function for ultimate flexibility.
        render?: (item: GenericItem, options?: Record<string, any>) => ReactNode;
      }


      export interface BadgeFieldDefinition<TFieldId extends string>
        extends BaseFieldDefinition<TFieldId> {
        type: 'badge';
        colorMap?: Record<string, string>; // e.g., { 'active': 'bg-green-500', 'pending': 'bg-yellow-500' }
        indicatorColorMap?: Record<string, string>; // e.g., { 'critical': 'bg-red-500' }
      }


      // Add other specific field types if they need unique properties

      // For now, most can be handled by the base definition.


      export type FieldDefinition<TFieldId extends string> =
        | BaseFieldDefinition<TFieldId>
        | BadgeFieldDefinition<TFieldId>;

      // --- VIEW CONFIGURATION ---

      // The master configuration object that defines the entire view.


      export type ViewMode = 'list' | 'cards' | 'grid' | 'table' | 'kanban' |
      'calendar';


      export interface ListViewConfig<TFieldId extends string> {
        iconField: TFieldId;
        titleField: TFieldId;
        metaFields: Array<{
          fieldId: TFieldId;
          className?: string;
        }>;
      }


      export interface CardViewConfig<TFieldId extends string> {
        thumbnailField: TFieldId;
        titleField: TFieldId;
        descriptionField: TFieldId;
        headerFields: TFieldId[];
        // Specific fields to recreate the original layout
        statusField: TFieldId;
        categoryField: TFieldId;
        tagsField: TFieldId;
        progressField: TFieldId;
        assigneeField: TFieldId;
        metricsField: TFieldId;
        dateField: TFieldId;
      }


      export interface TableColumnConfig<TFieldId extends string> {
        fieldId: TFieldId;
        label: string;
        isSortable: boolean;
      }


      export interface TableViewConfig<TFieldId extends string> {
        columns: TableColumnConfig<TFieldId>[];
      }


      export interface KanbanViewConfig<TFieldId extends string> {
        groupByField: TFieldId; // Field ID to group by (e.g., 'status')
        cardFields: {
          titleField: TFieldId;
          descriptionField: TFieldId;
          priorityField: TFieldId;
          tagsField: TFieldId;
          // footer fields
          dateField: TFieldId;
          metricsField: TFieldId; // for comments/attachments
          assigneeField: TFieldId;
        };
      }


      export interface CalendarViewConfig<TFieldId extends string> {
        dateField: TFieldId;
        titleField: TFieldId;
        displayFields: TFieldId[];
        colorByField?: TFieldId; // Field ID to color events by (e.g., 'priority', 'status')
      }


      export interface ControlOption<TId extends string> {
        id: TId;
        label: string;
      }


      export interface FilterableFieldConfig<TFieldId extends string> {
        id: TFieldId; // fieldId
        label: string;
        options: ControlOption<string>[];
      }


      export interface ViewConfig<
        TFieldId extends string,
        TItem extends GenericItem,
      > {
        fields: FieldDefinition<TFieldId>[];
        sortableFields: ControlOption<TFieldId>[];
        groupableFields: ControlOption<TFieldId | 'none'>[];
        filterableFields: FilterableFieldConfig<TFieldId>[];

        // Layouts for each view mode
        listView: ListViewConfig<TFieldId>;
        cardView: CardViewConfig<TFieldId>;
        tableView: TableViewConfig<TFieldId>;
        kanbanView: KanbanViewConfig<TFieldId>;
        calendarView: CalendarViewConfig<TFieldId>;
        detailView: DetailViewConfig<TFieldId>;
      }


      // --- DETAIL VIEW ---

      export interface DetailViewSection<TFieldId extends string> {
        title: string;
        fields: TFieldId[];
      }


      export interface DetailViewConfig<TFieldId extends string> {
        header: {
          thumbnailField: TFieldId;
          titleField: TFieldId;
          descriptionField: TFieldId;
          badgeFields: TFieldId[];
          progressField: TFieldId;
        };
        body: {
          sections: DetailViewSection<TFieldId>[];
        };
      }


      // --- GENERIC CONTROL & DATA TYPES ---


      export type Status = 'active' | 'pending' | 'completed' | 'archived';

      export type Priority = 'low' | 'medium' | 'high' | 'critical';


      export interface FilterConfig {
        searchTerm: string;
        [key: string]: any; // For dynamic filter keys like status, priority
      }


      export interface SortConfig<TFieldId extends string> {
        key: TFieldId;
        direction: 'asc' | 'desc';
      }


      export type GroupableField<TFieldId extends string> = TFieldId | 'none';


      export type CalendarDateProp<TFieldId extends string> = TFieldId;

      export type CalendarDisplayProp<TFieldId extends string> = TFieldId;

      export type CalendarColorProp<TFieldId extends string> = TFieldId |
      'none';


      // --- STATS ---

      export type StatItem = {
        title: string;
        value: string;
        icon: ReactNode;
        change: string;
        trend: 'up' | 'down';
        chartData?: number[];
      };
    patchStrategy: replace
snapshot:
  src/features/dynamic-view/types.ts: >-
    import type { ReactNode } from 'react';


    // --- GENERIC DATA & ITEM ---

    export type GenericItem = Record<string, any> & { id: string };


    // --- FIELD DEFINITIONS ---

    // Describes a single piece of data within a GenericItem.

    export type FieldType = 
      | 'string'
      | 'longtext'
      | 'badge'
      | 'avatar'
      | 'progress'
      | 'date'
      | 'tags'
      | 'metrics'
      | 'thumbnail'
      | 'custom';

    export interface BaseFieldDefinition {
      id: string; // Corresponds to a key in GenericItem
      label: string;
      type: FieldType;
      // Optional custom render function for ultimate flexibility.
      render?: (item: GenericItem, options?: Record<string, any>) => ReactNode;
    }


    export interface BadgeFieldDefinition extends BaseFieldDefinition {
      type: 'badge';
      colorMap?: Record<string, string>; // e.g., { 'active': 'bg-green-500', 'pending': 'bg-yellow-500' }
      indicatorColorMap?: Record<string, string>; // e.g., { 'critical': 'bg-red-500' }
    }


    // Add other specific field types if they need unique properties

    // For now, most can be handled by the base definition.


    export type FieldDefinition = BaseFieldDefinition | BadgeFieldDefinition;



    // --- VIEW CONFIGURATION ---

    // The master configuration object that defines the entire view.


    export type ViewMode = 'list' | 'cards' | 'grid' | 'table' | 'kanban' |
    'calendar';


    export interface ListViewConfig {
      iconField: string;
      titleField: string;
      metaFields: Array<{
        fieldId: string;
        className?: string;
      }>;
    }


    export interface CardViewConfig {
      thumbnailField: string;
      titleField: string;
      descriptionField: string;
      headerFields: string[];
      // Specific fields to recreate the original layout
      statusField: string;
      categoryField: string;
      tagsField: string;
      progressField: string;
      assigneeField: string;
      metricsField: string;
      dateField: string;
    }


    export interface TableColumnConfig {
      fieldId: string;
      label: string;
      isSortable: boolean;
    }


    export interface TableViewConfig {
      columns: TableColumnConfig[];
    }


    export interface KanbanViewConfig {
      groupByField: string; // Field ID to group by (e.g., 'status')
      cardFields: {
        titleField: string;
        descriptionField: string;
        priorityField: string;
        tagsField: string;
        // footer fields
        dateField: string;
        metricsField: string; // for comments/attachments
        assigneeField: string;
      };
    }


    export interface CalendarViewConfig {
      dateField: string;
      titleField: string;
      displayFields: string[];
      colorByField?: string; // Field ID to color events by (e.g., 'priority', 'status')
    }


    export interface ControlOption {
      id: string;
      label: string;
    }


    export interface FilterableFieldConfig {
      id: string; // fieldId
      label: string;
      options: ControlOption[];
    }


    export interface ViewConfig {
      fields: FieldDefinition[];
      sortableFields: ControlOption[];
      groupableFields: ControlOption[];
      filterableFields: FilterableFieldConfig[];
      
      // Layouts for each view mode
      listView: ListViewConfig;
      cardView: CardViewConfig;
      tableView: TableViewConfig;
      kanbanView: KanbanViewConfig;
      calendarView: CalendarViewConfig;
      detailView: DetailViewConfig;
    }


    // --- DETAIL VIEW ---

    export interface DetailViewSection {
      title: string;
      fields: string[];
    }


    export interface DetailViewConfig {
      header: {
        thumbnailField: string;
        titleField: string;
        descriptionField: string;
        badgeFields: string[];
        progressField: string;
      };
      body: {
        sections: DetailViewSection[];
      };
    }


    // --- GENERIC CONTROL & DATA TYPES ---


    export type Status = 'active' | 'pending' | 'completed' | 'archived';

    export type Priority = 'low' | 'medium' | 'high' | 'critical';


    export interface FilterConfig {
      searchTerm: string;
      [key: string]: any; // For dynamic filter keys like status, priority
    }


    export interface SortConfig {
      key: string;
      direction: 'asc' | 'desc';
    }


    export type GroupableField = 'status' | 'priority' | 'category';


    export type CalendarDateProp = 'dueDate' | 'createdAt' | 'updatedAt';

    export type CalendarDisplayProp = 'priority' | 'assignee' | 'tags' |
    'status';

    export type CalendarColorProp = 'priority' | 'status' | 'category' | 'none';


    // --- STATS ---

    export type StatItem = {
      title: string;
      value: string;
      icon: ReactNode;
      change: string;
      trend: 'up' | 'down';
      chartData?: number[];
    };
approved: true
linesAdded: null
linesRemoved: null
linesDifference: null
gitCommittedAt: null
status: committed
id: 534
