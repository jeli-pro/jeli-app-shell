uuid: 4a242c11-9a74-42b7-843e-f144a6797a7d
projectId: jeli-app-shell
createdAt: '2025-10-14T02:53:12.287Z'
gitCommitMsg: >-
  refactor: Eliminate prop drilling via context and global state

  This major refactoring improves component encapsulation and makes the codebase
  significantly more DRY and maintainable.

  - Introduces a `DataDemoContext` to manage all state for the complex "Data
  Demo" feature, removing the need to pass numerous props from the main page
  down to child components like the toolbar and views. - Core layout components
  (`TopBar`, `RightPane`) are now self-sufficient. They fetch their own actions
  and data from `useAppShell`, `useAppStore`, and other hooks, rather than
  receiving them as props from `App.tsx`. This dramatically simplifies the main
  application component. - The shared `ItemProgressBar` component is enhanced
  with an optional `showPercentage` prop, allowing it to replace a custom
  implementation in the table view and improving reusability.
promptSummary: >-
  I need to refactor the application to eliminate prop drilling by using global
  state and context more effectively, making the codebase more DRY and
  maintainable.
reasoning:
  - >-
    This refactoring will make the codebase significantly more modular and
    maintainable by eliminating prop drilling. I'll achieve this by creating a
    dedicated React Context for the feature-heavy "Data Demo" page and by making
    core layout components self-sufficient by fetching their own data and
    actions from global state hooks.
  - '### Part 1: Encapsulate Data Demo State'
  - >-
    First, I'll create a new context to manage the state for the Data Demo
    feature. This will stop `DataDemoPage` from having to pass a large number of
    props down to its children.
  - >-
    Next, I'll update the `useDataManagement` hook to be the single source of
    truth for the Data Demo page, including item selection logic which currently
    lives in the `DataDemoPage` component.
  - >-
    Now, I'll refactor `DataDemoPage` to use the new provider and remove all the
    prop-drilling.
  - Now the child components will consume the context directly.
  - '### Part 2: Make Core Layout Components Self-Sufficient'
  - >-
    I'll refactor `TopBar` and `RightPane` to pull their state and actions from
    global hooks, which will dramatically simplify the main `App.tsx` component.
  - This cleanup allows `App.tsx` to become much simpler.
  - '### Part 3: Enhance Reusability of Shared Components'
  - >-
    Finally, I'll make the shared `ItemProgressBar` component more flexible to
    avoid code duplication in the table view.
  - >-
    With this change, `DataTableView` can now use the shared component. This
    change was already included in the `DataTableView.tsx` diff shown in Part 1.
operations:
  - type: write
    path: src/pages/DataDemo/context/DataDemoContext.tsx
    content: |-
      import { createContext, useContext, ReactNode } from 'react';
      import { useDataManagement } from '../hooks/useDataManagement.hook';

      // The return type of useDataManagement is the shape of our context
      type DataDemoContextType = ReturnType<typeof useDataManagement>;

      const DataDemoContext = createContext<DataDemoContextType | null>(null);

      export function DataDemoProvider({ children }: { children: ReactNode }) {
        const dataManagement = useDataManagement();
        return (
          <DataDemoContext.Provider value={dataManagement}>
            {children}
          </DataDemoContext.Provider>
        );
      }

      // eslint-disable-next-line react-refresh/only-export-components
      export function useDataDemo() {
        const context = useContext(DataDemoContext);
        if (!context) {
          throw new Error('useDataDemo must be used within a DataDemoProvider');
        }
        return context;
      }
    patchStrategy: replace
  - type: write
    path: src/pages/DataDemo/hooks/useDataManagement.hook.tsx
    content: "--- src/pages/DataDemo/hooks/useDataManagement.hook.tsx\n+++ src/pages/DataDemo/hooks/useDataManagement.hook.tsx\n@@ -1,8 +1,9 @@\n import { useState, useRef, useEffect, useCallback, useMemo, ReactNode } from 'react';\n+import { useNavigate } from 'react-router-dom';\n import { capitalize, cn } from '@/lib/utils';\n import { Badge } from '@/components/ui/badge';\n import { mockDataItems } from '../data/mockData';\n-import type { DataItem, GroupableField } from '../types';\n+import type { DataItem, GroupableField } from '../types';\n import { useAppViewManager } from '@/hooks/useAppViewManager.hook';\n \n export function useDataManagement() {\n@@ -13,6 +14,7 @@\n \t\tactiveGroupTab,\n \t\tfilters,\n \t\tsortConfig,\n+\t\titemId,\n \t\tsetPage,\n \t\tsetViewMode,\n \t\tsetGroupBy,\n@@ -21,6 +23,7 @@\n \t\tsetSort,\n \t\tsetTableSort,\n \t} = useAppViewManager();\n+\tconst navigate = useNavigate();\n \n \tconst [items, setItems] = useState<DataItem[]>([]);\n \tconst [hasMore, setHasMore] = useState(true);\n@@ -151,6 +154,16 @@\n \t\t},\n \t];\n \t}, [filteredAndSortedData, groupBy, activeGroupTab]);\n+\n+\tconst selectedItem = useMemo(() => {\n+\t\tif (!itemId) return null;\n+\t\treturn mockDataItems.find(item => item.id === itemId) ?? null;\n+\t}, [itemId]);\n+\n+\tconst onItemSelect = useCallback((item: DataItem) => {\n+\t\tnavigate(`/data-demo/${item.id}`);\n+\t}, [navigate]);\n+\n \n \t// Data to be rendered in the current view, after grouping and tab selection is applied\n \tconst dataToRender = useMemo(() => {\n@@ -179,11 +192,14 @@\n \t\tdataToRender,\n \t\ttotalItemCount,\n \t\tisInitialLoading,\n+\t\tselectedItem,\n+\t\tonItemSelect,\n \t\tsetViewMode,\n \t\tsetGroupBy,\n \t\tsetActiveGroupTab,\n \t\tsetFilters,\n \t\tsetSort,\n \t\tsetTableSort,\n \t};\n }\n"
    patchStrategy: standard-diff
  - type: write
    path: src/pages/DataDemo/index.tsx
    content: >
      --- src/pages/DataDemo/index.tsx

      +++ src/pages/DataDemo/index.tsx

      @@ -1,5 +1,4 @@

      -import { useRef, useEffect, useMemo } from 'react'

      -import { useParams, useNavigate } from 'react-router-dom'

      +import { useRef, useEffect } from 'react'
       import {
         Layers, 
         AlertTriangle, 
      @@ -22,8 +21,8 @@
       import { AnimatedLoadingSkeleton } from './components/AnimatedLoadingSkeleton'
       import { DataToolbar } from './components/DataToolbar'
       import { mockDataItems } from './data/mockData'
      -import type { DataItem, GroupableField } from './types'

      -import { useDataManagement } from './hooks/useDataManagement.hook'

      +import type { GroupableField } from './types'

      +import { useDataDemo, DataDemoProvider } from './context/DataDemoContext'
       
       type Stat = {
         title: string;
      @@ -45,7 +44,7 @@
       
       type StatItem = Stat | ChartStat;
       
      -export default function DataDemoPage() {

      +function DataDemoContent() {
         const {
           viewMode,
           groupBy,
      @@ -58,28 +57,12 @@
           dataToRender,
           totalItemCount,
           isInitialLoading,
      -    setViewMode,
           setGroupBy,
           setActiveGroupTab,
      -    setFilters,

      -    setSort,

      -    setTableSort,

      -  } = useDataManagement();

      +  } = useDataDemo();
       
         const groupOptions: { id: GroupableField | 'none'; label: string }[] = [
           { id: 'none', label: 'None' }, { id: 'status', label: 'Status' }, { id: 'priority', label: 'Priority' }, { id: 'category', label: 'Category' }
         ]
      -  const contentRef = useRef<HTMLDivElement>(null)
         const statsRef = useRef<HTMLDivElement>(null)
      -  const navigate = useNavigate()

      -  const { itemId } = useParams<{ itemId: string }>()

      -

      -  const handleItemSelect = (item: DataItem) => {

      -    navigate(`/data-demo/${item.id}`)

      -  }

      -

      -  const selectedItem = useMemo(() => {

      -    if (!itemId) return null

      -    return mockDataItems.find(item => item.id === itemId) ?? null

      -  }, [itemId])
       
         // Calculate stats from data
         const totalItems = mockDataItems.length
      @@ -139,11 +122,6 @@
           }
         }, [isInitialLoading])
       
      -  const commonViewProps = {

      -    onItemSelect: handleItemSelect,

      -    selectedItem,

      -  };

      -
         return (
           <PageLayout
             // Note: Search functionality is handled by a separate SearchBar in the TopBar
      @@ -157,7 +135,7 @@
                       : `Showing ${dataToRender.length} of ${totalItemCount} item(s)`}
                   </p>
                 </div>
      -          <DataViewModeSelector viewMode={viewMode}
      onChange={setViewMode} />

      +          <DataViewModeSelector />
               </div>
       
               {/* Stats Section */}
      @@ -178,12 +156,7 @@
       
               {/* Controls Area */}
               <div className="space-y-6">
      -          <DataToolbar

      -            filters={filters}

      -            onFiltersChange={setFilters}

      -            sortConfig={sortConfig}

      -            onSortChange={setSort}

      -          />

      +          <DataToolbar />
               </div>
       
               {/* Group by and Tabs section */}
      @@ -212,7 +185,7 @@
                       </Button>
                     </DropdownMenuTrigger>
                     <DropdownMenuContent className="w-[180px]">
      -                <DropdownMenuRadioGroup value={groupBy}
      onValueChange={setGroupBy}>

      +                <DropdownMenuRadioGroup value={groupBy}
      onValueChange={setGroupBy}>
                         {groupOptions.map(option => (
                           <DropdownMenuRadioItem key={option.id} value={option.id}>
                             {option.label}
      @@ -224,24 +197,16 @@
                 </div>
               </div>
       
      -        <div ref={contentRef} className="min-h-[500px]">

      +        <div className="min-h-[500px]">
                 {isInitialLoading ? <AnimatedLoadingSkeleton viewMode={viewMode} /> : (
                   <div>
      -              {viewMode === 'table' ? (

      -                 <DataTableView 

      -                    data={dataToRender} 

      -                    {...commonViewProps}

      -                    sortConfig={sortConfig} 

      -                    onSort={setTableSort} 

      -                  />

      -              ) : (

      +              {viewMode === 'table' ? <DataTableView /> : (
                       <>
      -                  {viewMode === 'list' && <DataListView
      data={dataToRender} {...commonViewProps} />}

      -                  {viewMode === 'cards' && <DataCardView
      data={dataToRender} {...commonViewProps} />}

      -                  {viewMode === 'grid' && <DataCardView
      data={dataToRender} {...commonViewProps} isGrid />}

      +                  {viewMode === 'list' && <DataListView />}

      +                  {viewMode === 'cards' && <DataCardView />}

      +                  {viewMode === 'grid' && <DataCardView isGrid />}
                       </>
                     )}
                   </div>
                 )}
      @@ -263,3 +228,11 @@
           </PageLayout>
         )
       }
      +

      +export default function DataDemoPage() {

      +  return (

      +    <DataDemoProvider>

      +      <DataDemoContent />

      +    </DataDemoProvider>

      +  );

      +}
    patchStrategy: standard-diff
  - type: write
    path: src/pages/DataDemo/components/DataToolbar.tsx
    content: |
      --- src/pages/DataDemo/components/DataToolbar.tsx
      +++ src/pages/DataDemo/components/DataToolbar.tsx
      @@ -19,23 +19,22 @@
       } from '@/components/ui/command'
       
       import type { SortConfig, SortableField, Status, Priority } from '../types'
      +import { useDataDemo } from '../context/DataDemoContext'
       
       export interface FilterConfig {
         searchTerm: string
         status: Status[]
         priority: Priority[]
       }
       
      -interface DataToolbarProps {
      -  filters: FilterConfig
      -  onFiltersChange: (filters: FilterConfig) => void
      -  sortConfig: SortConfig | null
      -  onSortChange: (config: SortConfig | null) => void
      -}
      -
       const statusOptions: { value: Status; label: string }[] = [
         { value: 'active', label: 'Active' },
         { value: 'pending', label: 'Pending' },
      @@ -62,15 +61,15 @@
       ]
       
       
      -export function DataToolbar({
      -  filters,
      -  onFiltersChange,
      -  sortConfig,
      -  onSortChange,
      -}: DataToolbarProps) {
      +export function DataToolbar() {
      +  const {
      +    filters,
      +    setFilters: onFiltersChange,
      +    sortConfig,
      +    setSort: onSortChange,
      +  } = useDataDemo();
      +
         const handleSearchChange = (event: React.ChangeEvent<HTMLInputElement>) => {
           onFiltersChange({ ...filters, searchTerm: event.target.value })
         }
    patchStrategy: standard-diff
  - type: write
    path: src/pages/DataDemo/components/DataViewModeSelector.tsx
    content: >
      --- src/pages/DataDemo/components/DataViewModeSelector.tsx

      +++ src/pages/DataDemo/components/DataViewModeSelector.tsx

      @@ -4,11 +4,7 @@
       import { cn } from '@/lib/utils'
       import { List, Grid3X3, LayoutGrid, Table } from 'lucide-react'
       import type { ViewMode } from '../types'
      -

      -interface DataViewModeSelectorProps {

      -  viewMode: ViewMode

      -  onChange: (mode: ViewMode) => void

      -}

      +import { useDataDemo } from '../context/DataDemoContext'
       
       const viewModes = [
         { id: 'list' as ViewMode, label: 'List', icon: List, description: 'Compact list with details' },
      @@ -17,7 +13,8 @@
         { id: 'table' as ViewMode, label: 'Table', icon: Table, description: 'Structured data table' }
       ]
       
      -export function DataViewModeSelector({ viewMode, onChange }:
      DataViewModeSelectorProps) {

      +export function DataViewModeSelector() {

      +  const { viewMode, setViewMode: onChange } = useDataDemo();
         const indicatorRef = useRef<HTMLDivElement>(null)
         const containerRef = useRef<HTMLDivElement>(null)
         const [isExpanded, setIsExpanded] = useState(false)
    patchStrategy: standard-diff
  - type: write
    path: src/pages/DataDemo/components/DataListView.tsx
    content: >
      --- src/pages/DataDemo/components/DataListView.tsx

      +++ src/pages/DataDemo/components/DataListView.tsx

      @@ -3,9 +3,10 @@
       import { Badge } from '@/components/ui/badge'
       import { ArrowRight } from 'lucide-react'
      -import type { ViewProps, DataItem } from '../types'

      +import type { DataItem } from '../types'
       import { useStaggeredAnimation } from '@/hooks/useStaggeredAnimation.motion.hook'
       import { EmptyState } from './EmptyState'
      +import { useDataDemo } from '../context/DataDemoContext'
       import {
         AssigneeInfo,
         ItemMetrics,
      @@ -15,16 +16,18 @@
         ItemDateInfo,
       } from './shared/DataItemParts'
       
      -export function DataListView({ data, onItemSelect, selectedItem }:
      ViewProps) {

      +export function DataListView() {

      +  const { dataToRender: data, onItemSelect, selectedItem } =
      useDataDemo();
         const listRef = useRef<HTMLDivElement>(null)
         useStaggeredAnimation(listRef, [data], { mode: 'incremental', scale: 1, y: 30, stagger: 0.08, duration: 0.5 });
       
      -  if (!Array.isArray(data) || data.length === 0) {

      +  const items = Array.isArray(data) ? data : [];

      +  if (items.length === 0) {
           return <EmptyState />
         }
       
         return (
           <div ref={listRef} className="space-y-4">
      -      {data.map((item: DataItem) => {

      +      {items.map((item: DataItem) => {
               const isSelected = selectedItem?.id === item.id
               
               return (
    patchStrategy: standard-diff
  - type: write
    path: src/pages/DataDemo/components/DataCardView.tsx
    content: >
      --- src/pages/DataDemo/components/DataCardView.tsx

      +++ src/pages/DataDemo/components/DataCardView.tsx

      @@ -3,9 +3,10 @@
       import { Badge } from '@/components/ui/badge'
       import { ArrowUpRight } from 'lucide-react'
       import type { ViewProps, DataItem } from '../types'
       import { useStaggeredAnimation } from '@/hooks/useStaggeredAnimation.motion.hook'
       import { EmptyState } from './EmptyState'
      +import { useDataDemo } from '../context/DataDemoContext'
       import {
         AssigneeInfo,
         ItemMetrics,
      @@ -15,11 +16,13 @@
         ItemDateInfo,
       } from './shared/DataItemParts'
       
      -export function DataCardView({ data, onItemSelect, selectedItem, isGrid =
      false }: ViewProps) {

      +export function DataCardView({ isGrid = false }: { isGrid?: boolean }) {

      +  const { dataToRender: data, onItemSelect, selectedItem } =
      useDataDemo();
         const containerRef = useRef<HTMLDivElement>(null)
         useStaggeredAnimation(containerRef, [data], { mode: 'incremental', y: 40 });
       
      -  if (!Array.isArray(data) || data.length === 0) {

      +  const items = Array.isArray(data) ? data : [];

      +  if (items.length === 0) {
           return <EmptyState />
         }
       
      @@ -32,7 +35,7 @@
                 : "grid grid-cols-[repeat(auto-fit,minmax(320px,1fr))]"
             )}
           >
      -      {data.map((item: DataItem) => {

      +      {items.map((item: DataItem) => {
               const isSelected = selectedItem?.id === item.id
               
               return (
    patchStrategy: standard-diff
  - type: write
    path: src/pages/DataDemo/components/DataTableView.tsx
    content: >
      --- src/pages/DataDemo/components/DataTableView.tsx

      +++ src/pages/DataDemo/components/DataTableView.tsx

      @@ -8,8 +8,9 @@
         ArrowUp, 
         ArrowDown,
         ExternalLink
       } from 'lucide-react'
      -import type { ViewProps, DataItem, SortableField } from '../types'

      +import type { DataItem, SortableField } from '../types'
       import { EmptyState } from './EmptyState'
      +import { useDataDemo } from '../context/DataDemoContext'
       import { capitalize } from '@/lib/utils'
       import {
         AssigneeInfo,
      @@ -17,9 +18,17 @@
         ItemStatusBadge,
         ItemPriorityBadge,
         ItemDateInfo,
      +  ItemProgressBar,
       } from './shared/DataItemParts'
       
      -export function DataTableView({ data, onItemSelect, selectedItem,
      sortConfig, onSort }: ViewProps) {

      +export function DataTableView() {

      +  const {

      +    dataToRender: data,

      +    onItemSelect,

      +    selectedItem,

      +    sortConfig,

      +    setTableSort: onSort

      +  } = useDataDemo();
         const tableRef = useRef<HTMLTableElement>(null)
         const animatedItemsCount = useRef(0)
       
      @@ -192,20 +201,7 @@
             {/* Note: This progress bar is custom for the table, so we don't use the shared component here. */}
             <td className="p-4">
      -        <div className="flex items-center gap-3">

      -          <div className="flex-1 min-w-0">

      -            <div className="w-full bg-muted rounded-full h-2">

      -              <div 

      -                className="bg-gradient-to-r from-primary to-primary/80
      h-2 rounded-full transition-all duration-500"

      -                style={{ width: `${item.metrics.completion}%` }}

      -              />

      -            </div>

      -          </div>

      -          <span className="text-sm font-medium text-muted-foreground">

      -            {item.metrics.completion}%

      -          </span>

      -        </div>

      +        <ItemProgressBar completion={item.metrics.completion}
      showPercentage />
             </td>
       
             {/* Engagement Column */}
    patchStrategy: standard-diff
  - type: write
    path: src/components/layout/TopBar.tsx
    content: |
      --- src/components/layout/TopBar.tsx
      +++ src/components/layout/TopBar.tsx
      @@ -9,24 +9,22 @@
       import { cn } from '@/lib/utils'
       import { BODY_STATES } from '@/lib/utils'
       import { useAppStore } from '@/store/appStore'
      -import { useAppShell } from '@/context/AppShellContext'
       import { useAppViewManager } from '@/hooks/useAppViewManager.hook'
       import { UserDropdown } from './UserDropdown'
       import { ViewModeSwitcher } from './ViewModeSwitcher'
      +import { useAppShell } from '@/context/AppShellContext'
       
       interface TopBarProps {
      -  onToggleSidebar?: () => void
      -  onToggleDarkMode?: () => void
         children?: React.ReactNode
       }
       
       export function TopBar({
      -  onToggleSidebar,
      -  onToggleDarkMode,
         children,
       }: TopBarProps) {
      -  const { bodyState } = useAppShell()
      +  const { 
      +    bodyState,
      +    toggleSidebar,
      +  } = useAppShell()
         const viewManager = useAppViewManager();
         const { 
           setCommandPaletteOpen,
           isDarkMode,
      +    toggleDarkMode,
         } = useAppStore()
       
         return (
      @@ -37,7 +35,7 @@
             <div className="flex items-center gap-4">
               {/* Sidebar Controls */}
               <button
      -          onClick={() => onToggleSidebar?.()}
      +          onClick={toggleSidebar}
                 className={cn(
                   "h-10 w-10 flex items-center justify-center rounded-full hover:bg-accent transition-colors"
                 )}
      @@ -70,7 +68,7 @@
       
               {/* Theme and Settings */}
               <button
      -          onClick={() => onToggleDarkMode?.()}
      +          onClick={toggleDarkMode}
                 className="h-10 w-10 flex items-center justify-center rounded-full hover:bg-accent transition-colors group"
                 title="Toggle Dark Mode"
               >
    patchStrategy: standard-diff
  - type: write
    path: src/components/layout/RightPane.tsx
    content: >
      --- src/components/layout/RightPane.tsx

      +++ src/components/layout/RightPane.tsx

      @@ -1,19 +1,38 @@

      -import { forwardRef, type ReactNode } from 'react'

      -import { useSearchParams } from 'react-router-dom'

      -import { ChevronRight, X } from 'lucide-react'

      +import { forwardRef, useMemo, useCallback, createElement } from 'react'

      +import {

      +  ChevronRight,

      +  X,

      +  Layers,

      +  SplitSquareHorizontal,

      +  ChevronsLeftRight,

      +} from 'lucide-react'
       import { cn, BODY_STATES } from '@/lib/utils'
       import { useAppShell } from '@/context/AppShellContext'
      +import { useAppViewManager } from '@/hooks/useAppViewManager.hook'

      +import { useRightPaneContent } from '@/hooks/useRightPaneContent.hook'
       
      -interface RightPaneProps {

      -  children?: ReactNode

      -  header?: ReactNode

      -  className?: string

      -  onClose?: () => void;

      -}

      +export const RightPane = forwardRef<HTMLDivElement, { className?: string
      }>(({ className }, ref) => {

      +  const { dispatch, fullscreenTarget, toggleFullscreen } = useAppShell()

      +  const viewManager = useAppViewManager()

      +  const { bodyState, sidePaneContent, closeSidePane, toggleSplitView,
      navigateTo } = viewManager

      +  

      +  const { meta, content: children } =
      useRightPaneContent(sidePaneContent)

      +  

      +  const isSplitView = bodyState === BODY_STATES.SPLIT_VIEW;

      +  const isFullscreen = bodyState === BODY_STATES.FULLSCREEN;
       
      -export const RightPane = forwardRef<HTMLDivElement, RightPaneProps>(({
      children, header, className, onClose }, ref) => {

      -  const { dispatch, bodyState, fullscreenTarget, toggleFullscreen } =
      useAppShell();

      -  const [, setSearchParams] = useSearchParams()

      -  const isSplitView = bodyState === BODY_STATES.SPLIT_VIEW;

      -  const isFullscreen = bodyState === BODY_STATES.FULLSCREEN;

      +  const handleMaximize = useCallback(() => {

      +    if ("page" in meta && meta.page) {

      +      navigateTo(meta.page);

      +    }

      +  }, [meta, navigateTo]);

      +

      +  const header = useMemo(() => (

      +    <div className="flex items-center justify-between p-4 border-b
      border-border h-20 flex-shrink-0 pl-6">

      +      {bodyState !== BODY_STATES.SPLIT_VIEW && 'icon' in meta ? (

      +        <div className="flex items-center gap-2">

      +          {meta.icon && createElement(meta.icon, { className: "w-5 h-5"
      })}

      +          <h2 className="text-lg font-semibold
      whitespace-nowrap">{meta.title}</h2>

      +        </div>

      +      ) : <div />}

      +      <div className="flex items-center">

      +        {(bodyState === BODY_STATES.SIDE_PANE || bodyState ===
      BODY_STATES.SPLIT_VIEW) && (

      +          <button onClick={toggleSplitView} className="h-10 w-10 flex
      items-center justify-center hover:bg-accent rounded-full
      transition-colors" title={bodyState === BODY_STATES.SIDE_PANE ? "Switch to
      Split View" : "Switch to Overlay View"}>

      +            {bodyState === BODY_STATES.SPLIT_VIEW ? <Layers
      className="w-5 h-5" /> : <SplitSquareHorizontal className="w-5 h-5" />}

      +          </button>

      +        )}

      +        {bodyState !== BODY_STATES.SPLIT_VIEW && "page" in meta &&
      meta.page && (

      +          <button onClick={handleMaximize} className="h-10 w-10 flex
      items-center justify-center hover:bg-accent rounded-full transition-colors
      mr-2" title="Move to Main View">

      +            <ChevronsLeftRight className="w-5 h-5" />

      +          </button>

      +        )}

      +      </div>

      +    </div>

      +  ), [bodyState, meta, handleMaximize, toggleSplitView]);
       
         if (isFullscreen && fullscreenTarget !== 'right') {
           return null;
      @@ -40,16 +59,7 @@
             )}
             {bodyState !== BODY_STATES.SPLIT_VIEW && !isFullscreen && (
               <button
      -          onClick={onClose ?? (() => {

      -              setSearchParams(prev => {

      -                const newParams = new URLSearchParams(prev);

      -                newParams.delete('sidePane');

      -                newParams.delete('right');

      -                newParams.delete('view');

      -                return newParams;

      -              }, { replace: true });

      -            })

      -          }

      +          onClick={closeSidePane}
                 className="absolute top-1/2 -left-px -translate-y-1/2 -translate-x-full w-8 h-16 bg-card border border-r-0 border-border rounded-l-lg flex items-center justify-center hover:bg-accent transition-colors group z-10"
                 title="Close pane"
               >
      @@ -67,11 +77,7 @@
             >
               <div className="w-0.5 h-full bg-border group-hover:bg-primary transition-colors duration-200 mx-auto" />
             </div>
      -      {header && (

      -        <div className="flex items-center justify-between p-4 border-b
      border-border h-20 flex-shrink-0 pl-6">

      -          {header}

      -        </div>

      -      )}

      +      {header}
             <div className={cn("flex-1 overflow-y-auto")}>
               {children}
             </div>
    patchStrategy: standard-diff
  - type: write
    path: src/App.tsx
    content: >
      --- src/App.tsx

      +++ src/App.tsx

      @@ -1,4 +1,4 @@

      -import React, { useEffect, useMemo, useCallback } from "react";

      +import React, { useEffect } from "react";
       import {
         createBrowserRouter,
         RouterProvider,
      @@ -28,19 +28,10 @@
       // --- Icons ---
       import {
         Search,
         Filter,
         Plus,
         ChevronRight,
         Rocket,
      -  ChevronsLeftRight,

      -  Layers,

      -  SplitSquareHorizontal,
       } from "lucide-react";
       
       // --- Utils & Hooks ---
      @@ -213,44 +204,12 @@
           dispatch({ type: 'SET_SIDE_PANE_CONTENT', payload: viewManager.sidePaneContent });
         }, [viewManager.bodyState, viewManager.sidePaneContent, dispatch]);
       
      -  const { meta: rightPaneMeta, content: rightPaneContent } =
      useRightPaneContent(viewManager.sidePaneContent);

      -

      -  const handleMaximize = useCallback(() => {

      -    if ("page" in rightPaneMeta && rightPaneMeta.page) {

      -      viewManager.navigateTo(rightPaneMeta.page);

      -    }

      -  }, [rightPaneMeta, viewManager]);

      -

      -  // --- Right Pane Header UI ---

      -  const rightPaneHeader = useMemo(() => (

      -    <>

      -      {viewManager.bodyState !== BODY_STATES.SPLIT_VIEW ? (

      -        <div className="flex items-center gap-2">

      -          {rightPaneMeta.icon && React.createElement(rightPaneMeta.icon,
      { className: "w-5 h-5" })}

      -          <h2 className="text-lg font-semibold whitespace-nowrap">

      -            {rightPaneMeta.title}

      -          </h2>

      -        </div>

      -      ) : <div />} {/* Placeholder to make justify-between work */}

      -      <div className="flex items-center">

      -        {(viewManager.bodyState === BODY_STATES.SIDE_PANE ||
      viewManager.bodyState === BODY_STATES.SPLIT_VIEW) && (

      -          <button onClick={viewManager.toggleSplitView} className="h-10
      w-10 flex items-center justify-center hover:bg-accent rounded-full
      transition-colors" title={viewManager.bodyState === BODY_STATES.SIDE_PANE
      ? "Switch to Split View" : "Switch to Overlay View"}>

      -            {viewManager.bodyState === BODY_STATES.SPLIT_VIEW ? <Layers
      className="w-5 h-5" /> : <SplitSquareHorizontal className="w-5 h-5" />}

      -          </button>

      -        )}

      -        {viewManager.bodyState !== BODY_STATES.SPLIT_VIEW && "page" in
      rightPaneMeta && rightPaneMeta.page && (

      -          <button onClick={handleMaximize} className="h-10 w-10 flex
      items-center justify-center hover:bg-accent rounded-full transition-colors
      mr-2" title="Move to Main View">

      -            <ChevronsLeftRight className="w-5 h-5" />

      -          </button>

      -        )}

      -      </div>

      -    </>

      -  ), [viewManager.bodyState, rightPaneMeta, handleMaximize,
      viewManager.toggleSplitView]);

      -
         return (
           <AppShell
             sidebar={<EnhancedSidebar />}
             onOverlayClick={viewManager.closeSidePane}
             topBar={
               <TopBar>
                 <AppTopBar />
               </TopBar>
      @@ -260,11 +219,7 @@
                 <Outlet />
               </MainContent>
             }
      -      rightPane={

      -        <RightPane onClose={viewManager.closeSidePane}
      header={rightPaneHeader}>

      -          {rightPaneContent}

      -        </RightPane>

      -      }

      +      rightPane={<RightPane />}
             commandPalette={<CommandPalette />}
           />
         );
    patchStrategy: standard-diff
  - type: write
    path: src/pages/DataDemo/components/shared/DataItemParts.tsx
    content: >
      --- src/pages/DataDemo/components/shared/DataItemParts.tsx

      +++ src/pages/DataDemo/components/shared/DataItemParts.tsx

      @@ -44,14 +44,23 @@
         )
       }
       
      -export function ItemProgressBar({ completion }: { completion: number }) {

      +export function ItemProgressBar({ completion, showPercentage }: {
      completion: number; showPercentage?: boolean }) {

      +  const bar = (

      +    <div className="w-full bg-muted rounded-full h-2.5">

      +      <div

      +        className="bg-gradient-to-r from-primary to-primary/80 h-2.5
      rounded-full transition-all duration-500"

      +        style={{ width: `${completion}%` }}

      +      />

      +    </div>

      +  );

      +

      +  if (!showPercentage) return bar;

      +
         return (
      -    <div className="w-full bg-muted rounded-full h-2.5">

      -      <div

      -        className="bg-gradient-to-r from-primary to-primary/80 h-2.5
      rounded-full transition-all duration-500"

      -        style={{ width: `${completion}%` }}

      -      />

      +    <div className="flex items-center gap-3">

      +      <div className="flex-1 min-w-0">{bar}</div>

      +      <span className="text-sm font-medium
      text-muted-foreground">{completion}%</span>
           </div>
         )
       }
    patchStrategy: standard-diff
snapshot:
  src/pages/DataDemo/context/DataDemoContext.tsx: null
  src/pages/DataDemo/hooks/useDataManagement.hook.tsx: "import { useState, useRef, useEffect, useCallback, useMemo, ReactNode } from 'react';\nimport { capitalize, cn } from '@/lib/utils';\nimport { Badge } from '@/components/ui/badge';\nimport { mockDataItems } from '../data/mockData';\nimport type { DataItem, GroupableField } from '../types';\nimport { useAppViewManager } from '@/hooks/useAppViewManager.hook';\n\nexport function useDataManagement() {\n\tconst {\n\t\tviewMode,\n\t\tpage,\n\t\tgroupBy,\n\t\tactiveGroupTab,\n\t\tfilters,\n\t\tsortConfig,\n\t\tsetPage,\n\t\tsetViewMode,\n\t\tsetGroupBy,\n\t\tsetActiveGroupTab,\n\t\tsetFilters,\n\t\tsetSort,\n\t\tsetTableSort,\n\t} = useAppViewManager();\n\n\tconst [items, setItems] = useState<DataItem[]>([]);\n\tconst [hasMore, setHasMore] = useState(true);\n\tconst [isLoading, setIsLoading] = useState(true);\n\tconst observer = useRef<IntersectionObserver>();\n\n\t// Centralized data filtering and sorting from the master list\n\tconst filteredAndSortedData = useMemo(() => {\n\t\tconst filteredItems = mockDataItems.filter((item) => {\n\t\t\tconst searchTermMatch =\n\t\t\t\titem.title.toLowerCase().includes(filters.searchTerm.toLowerCase()) ||\n\t\t\t\titem.description.toLowerCase().includes(filters.searchTerm.toLowerCase());\n\n\t\t\tconst statusMatch = filters.status.length === 0 || filters.status.includes(item.status);\n\t\t\tconst priorityMatch = filters.priority.length === 0 || filters.priority.includes(item.priority);\n\n\t\t\treturn searchTermMatch && statusMatch && priorityMatch;\n\t\t});\n\n\t\tif (sortConfig) {\n\t\t\tfilteredItems.sort((a, b) => {\n\t\t\t\tconst getNestedValue = (obj: DataItem, path: string): unknown => \n\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\t\t\t\t\tpath.split('.').reduce((o: any, k) => (o || {})[k], obj);\n\t\t\t\t\n\t\t\t\tconst aValue = getNestedValue(a, sortConfig.key);\n\t\t\t\tconst bValue = getNestedValue(b, sortConfig.key);\n\n\t\t\t\tif (aValue === undefined || bValue === undefined) return 0;\n\n\t\t\t\tif (typeof aValue === 'string' && typeof bValue === 'string') {\n\t\t\t\t\treturn sortConfig.direction === 'asc' ? aValue.localeCompare(bValue) : bValue.localeCompare(aValue);\n\t\t\t\t}\n\t\t\t\tif (typeof aValue === 'number' && typeof bValue === 'number') {\n\t\t\t\t\treturn sortConfig.direction === 'asc' ? aValue - bValue : bValue - aValue;\n\t\t\t\t}\n\t\t\t\t// Date sorting (assuming ISO strings)\n\t\t\t\tif (sortConfig.key === 'updatedAt' || sortConfig.key === 'createdAt') {\n          if (typeof aValue === 'string' && typeof bValue === 'string') {\n\t\t\t\t\t  return sortConfig.direction === 'asc'\n\t\t\t\t\t\t  ? new Date(aValue).getTime() - new Date(bValue).getTime()\n\t\t\t\t\t\t  : new Date(bValue).getTime() - new Date(aValue).getTime();\n          }\n        }\n\t\t\t\treturn 0;\n\t\t\t});\n\t\t}\n\n\t\treturn filteredItems;\n\t}, [filters, sortConfig]);\n\n\t// Data loading effect\n\tuseEffect(() => {\n\t\tsetIsLoading(true);\n\t\tconst isFirstPage = page === 1;\n\n\t\tconst loadData = () => {\n\t\t\tif (groupBy !== 'none') {\n\t\t\t\t// For grouped views, load all data at once, pagination is disabled.\n\t\t\t\tsetItems(filteredAndSortedData);\n\t\t\t\tsetHasMore(false);\n\t\t\t\tsetIsLoading(false);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Handle paginated view\n\t\t\tconst pageSize = 12;\n\t\t\tconst newItems = filteredAndSortedData.slice((page - 1) * pageSize, page * pageSize);\n\n\t\t\tsetTimeout(() => {\n\t\t\t\t// Double-check in case groupBy changed during the timeout\n\t\t\t\tif (groupBy === 'none') {\n\t\t\t\t\tsetItems((prev) => (isFirstPage ? newItems : [...prev, ...newItems]));\n\t\t\t\t\tsetHasMore(filteredAndSortedData.length > page * pageSize);\n\t\t\t\t\tsetIsLoading(false);\n\t\t\t\t}\n\t\t\t}, isFirstPage && items.length === 0 ? 1500 : 500); // Longer delay for initial skeleton\n\t\t};\n\n\t\tloadData();\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t}, [page, groupBy, filteredAndSortedData]);\n\n\tconst loaderRef = useCallback(\n\t\t(node: Element | null) => {\n\t\t\tif (isLoading) return;\n\t\t\tif (observer.current) observer.current.disconnect();\n\n\t\t\tobserver.current = new IntersectionObserver((entries) => {\n\t\t\t\tif (entries[0].isIntersecting && hasMore) {\n\t\t\t\t\t// Instead of setting local state, we update the URL, which triggers the data loading effect.\n\t\t\t\t\tsetPage(page + 1);\n\t\t\t\t}\n\t\t\t});\n\t\t\tif (node) observer.current.observe(node);\n\t\t},\n\t\t[isLoading, hasMore, page, setPage],\n\t);\n\n\tconst groupTabs = useMemo(() => {\n\t\tif (groupBy === 'none' || !filteredAndSortedData.length) return [];\n\n\t\tconst groupCounts = filteredAndSortedData.reduce((acc, item) => {\n\t\t\tconst groupKey = String(item[groupBy as GroupableField]);\n\t\t\tacc[groupKey] = (acc[groupKey] || 0) + 1;\n\t\t\treturn acc;\n\t\t}, {} as Record<string, number>);\n\n\t\tconst sortedGroups = Object.keys(groupCounts).sort((a, b) => a.localeCompare(b));\n\n\t\tconst createLabel = (text: string, count: number, isActive: boolean): ReactNode => (\n\t\t\t<>\n\t\t\t\t{text}\n\t\t\t\t<Badge\n\t\t\t\t\tvariant={isActive ? 'default' : 'secondary'}\n\t\t\t\t\tclassName={cn(\n\t\t\t\t\t\t'transition-colors duration-300 text-xs font-semibold',\n\t\t\t\t\t\t!isActive && 'group-hover:bg-accent group-hover:text-accent-foreground',\n\t\t\t\t\t)}\n\t\t\t\t>\n\t\t\t\t\t{count}\n\t\t\t\t</Badge>\n\t\t\t</>\n\t\t);\n\n\t\treturn [\n\t\t\t{ id: 'all', label: createLabel('All', filteredAndSortedData.length, activeGroupTab === 'all') },\n\t\t\t...sortedGroups.map((g) => ({\n\t\t\t\tid: g,\n\t\t\t\tlabel: createLabel(capitalize(g), groupCounts[g], activeGroupTab === g),\n\t\t\t})),\n\t\t];\n\t}, [filteredAndSortedData, groupBy, activeGroupTab]);\n\n\t// Data to be rendered in the current view, after grouping and tab selection is applied\n\tconst dataToRender = useMemo(() => {\n\t\tif (groupBy === 'none') {\n\t\t\treturn items; // This is the paginated list.\n\t\t}\n\n\t\t// When grouped, `items` contains ALL filtered/sorted data.\n\t\tif (activeGroupTab === 'all') {\n\t\t\treturn items;\n\t\t}\n\t\treturn items.filter((item) => String(item[groupBy as GroupableField]) === activeGroupTab);\n\t}, [items, groupBy, activeGroupTab]);\n\n\tconst totalItemCount = filteredAndSortedData.length;\n\tconst isInitialLoading = isLoading && items.length === 0;\n\n\treturn {\n\t\tviewMode,\n\t\tgroupBy,\n\t\tactiveGroupTab,\n\t\tfilters,\n\t\tsortConfig,\n\t\thasMore,\n\t\tisLoading,\n\t\tloaderRef,\n\t\tgroupTabs,\n\t\tdataToRender,\n\t\ttotalItemCount,\n\t\tisInitialLoading,\n\t\tsetViewMode,\n\t\tsetGroupBy,\n\t\tsetActiveGroupTab,\n\t\tsetFilters,\n\t\tsetSort,\n\t\tsetTableSort,\n\t};\n}"
  src/pages/DataDemo/index.tsx: >
    import { useRef, useEffect, useMemo } from 'react'

    import { useParams, useNavigate } from 'react-router-dom'

    import {
      Layers, 
      AlertTriangle, 
      PlayCircle, 
      TrendingUp,
      Loader2,
      ChevronsUpDown
    } from 'lucide-react'

    import { gsap } from 'gsap'

    import { cn } from '@/lib/utils'

    import { Button } from '@/components/ui/button'

    import { 
      DropdownMenu, 
      DropdownMenuContent, 
      DropdownMenuRadioGroup, 
      DropdownMenuRadioItem, 
      DropdownMenuTrigger 
    } from '@/components/ui/dropdown-menu'

    import { PageLayout } from '@/components/shared/PageLayout'

    import { DataListView } from './components/DataListView'

    import { DataCardView } from './components/DataCardView'

    import { DataTableView } from './components/DataTableView'

    import { DataViewModeSelector } from './components/DataViewModeSelector'

    import { AnimatedTabs } from '@/components/ui/animated-tabs'

    import { StatCard } from '@/components/shared/StatCard'

    import { AnimatedLoadingSkeleton } from
    './components/AnimatedLoadingSkeleton'

    import { DataToolbar } from './components/DataToolbar'

    import { mockDataItems } from './data/mockData'

    import type { DataItem, GroupableField } from './types'

    import { useDataManagement } from './hooks/useDataManagement.hook'


    type Stat = {
      title: string;
      value: string;
      icon: React.ReactNode;
      change: string;
      trend: 'up' | 'down';
      type?: 'card';
    };


    type ChartStat = {
      title: string;
      value: string;
      icon: React.ReactNode;
      change: string;
      trend: 'up' | 'down';
      type: 'chart';
      chartData: number[];
    };


    type StatItem = Stat | ChartStat;


    export default function DataDemoPage() {
      const {
        viewMode,
        groupBy,
        activeGroupTab,
        filters,
        sortConfig,
        hasMore,
        isLoading,
        loaderRef,
        groupTabs,
        dataToRender,
        totalItemCount,
        isInitialLoading,
        setViewMode,
        setGroupBy,
        setActiveGroupTab,
        setFilters,
        setSort,
        setTableSort,
      } = useDataManagement();

      const groupOptions: { id: GroupableField | 'none'; label: string }[] = [
        { id: 'none', label: 'None' }, { id: 'status', label: 'Status' }, { id: 'priority', label: 'Priority' }, { id: 'category', label: 'Category' }
      ]
      const contentRef = useRef<HTMLDivElement>(null)
      const statsRef = useRef<HTMLDivElement>(null)
      const navigate = useNavigate()
      const { itemId } = useParams<{ itemId: string }>()

      const handleItemSelect = (item: DataItem) => {
        navigate(`/data-demo/${item.id}`)
      }

      const selectedItem = useMemo(() => {
        if (!itemId) return null
        return mockDataItems.find(item => item.id === itemId) ?? null
      }, [itemId])

      // Calculate stats from data
      const totalItems = mockDataItems.length
      const activeItems = mockDataItems.filter(item => item.status === 'active').length
      const highPriorityItems = mockDataItems.filter(item => item.priority === 'high' || item.priority === 'critical').length
      const avgCompletion = totalItems > 0 ? Math.round(
        mockDataItems.reduce((acc, item) => acc + item.metrics.completion, 0) / totalItems
      ) : 0

      const stats: StatItem[] = [
        {
          title: "Total Projects",
          value: totalItems.toString(),
          icon: <Layers className="w-5 h-5" />,
          change: "+5.2% this month",
          trend: "up" as const,
          type: 'chart',
          chartData: [120, 125, 122, 130, 135, 138, 142]
        },
        {
          title: "Active Projects",
          value: activeItems.toString(),
          icon: <PlayCircle className="w-5 h-5" />,
          change: "+2 this week", 
          trend: "up" as const,
          type: 'chart',
          chartData: [45, 50, 48, 55, 53, 60, 58]
        },
        {
          title: "High Priority",
          value: highPriorityItems.toString(),
          icon: <AlertTriangle className="w-5 h-5" />,
          change: "-1 from last week",
          trend: "down" as const,
          type: 'chart',
          chartData: [25, 26, 28, 27, 26, 24, 23]
        },
        {
          title: "Avg. Completion",
          value: `${avgCompletion}%`,
          icon: <TrendingUp className="w-5 h-5" />,
          change: "+3.2%",
          trend: "up" as const,
          type: 'chart',
          chartData: [65, 68, 70, 69, 72, 75, 78]
        }
      ]

      useEffect(() => {
        // Animate stats cards in
        if (!isInitialLoading && statsRef.current) {
          gsap.fromTo(statsRef.current.children,
            { y: 30, opacity: 0 },
            {
              duration: 0.6,
              y: 0,
              opacity: 1,
              stagger: 0.1,
              ease: "power2.out"
            }
          )
        }
      }, [isInitialLoading])

      const commonViewProps = {
        onItemSelect: handleItemSelect,
        selectedItem,
      };

      return (
        <PageLayout
          // Note: Search functionality is handled by a separate SearchBar in the TopBar
        >
          <div className="space-y-8">
            {/* Header */}
            <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-4">
              <div className="flex-1">
                <h1 className="text-2xl font-bold tracking-tight">Data Showcase</h1>
                <p className="text-muted-foreground">
                  {isInitialLoading 
                    ? "Loading projects..." 
                    : `Showing ${dataToRender.length} of ${totalItemCount} item(s)`}
                </p>
              </div>
              <DataViewModeSelector viewMode={viewMode} onChange={setViewMode} />
            </div>

            {/* Stats Section */}
            {!isInitialLoading && (
              <div ref={statsRef} className="grid grid-cols-[repeat(auto-fit,minmax(250px,1fr))] gap-6">
                {stats.map((stat) => (
                  <StatCard
                    key={stat.title}
                    title={stat.title}
                    value={stat.value}
                    change={stat.change}
                    trend={stat.trend}
                    icon={stat.icon}
                    chartData={stat.type === 'chart' ? stat.chartData : undefined}
                  />
                ))}
              </div>
            )}

            {/* Controls Area */}
            <div className="space-y-6">
              <DataToolbar
                filters={filters}
                onFiltersChange={setFilters}
                sortConfig={sortConfig}
                onSortChange={setSort}
              />
            </div>

            {/* Group by and Tabs section */}
            <div className={cn(
              "flex items-center justify-between gap-4",
              groupBy !== 'none' && "border-b"
            )}>
              {/* Tabs on the left, takes up available space */}
              <div className="flex-grow overflow-x-auto overflow-y-hidden no-scrollbar">
                {groupBy !== 'none' && groupTabs.length > 1 ? (
                  <AnimatedTabs
                    tabs={groupTabs}
                    activeTab={activeGroupTab}
                    onTabChange={setActiveGroupTab}
                  />
                ) : (
                  <div className="h-[68px]" /> // Placeholder for consistent height.
                )}
              </div>
              
              {/* Group by dropdown on the right */}
              <div className="flex items-center gap-2 shrink-0">
                <span className="text-sm font-medium text-muted-foreground shrink-0">Group by:</span>
                <DropdownMenu>
                  <DropdownMenuTrigger asChild>
                    <Button variant="outline" className="w-[180px] justify-between">
                      {groupOptions.find(o => o.id === groupBy)?.label}
                      <ChevronsUpDown className="ml-2 h-4 w-4 shrink-0 opacity-50" />
                    </Button>
                  </DropdownMenuTrigger>
                  <DropdownMenuContent className="w-[180px]">
                    <DropdownMenuRadioGroup value={groupBy} onValueChange={setGroupBy}>
                      {groupOptions.map(option => (
                        <DropdownMenuRadioItem key={option.id} value={option.id}>
                          {option.label}
                        </DropdownMenuRadioItem>
                      ))}
                    </DropdownMenuRadioGroup>
                  </DropdownMenuContent>
                </DropdownMenu>
              </div>
            </div>

            <div ref={contentRef} className="min-h-[500px]">
              {isInitialLoading ? <AnimatedLoadingSkeleton viewMode={viewMode} /> : (
                <div>
                  {viewMode === 'table' ? (
                     <DataTableView 
                        data={dataToRender} 
                        {...commonViewProps}
                        sortConfig={sortConfig} 
                        onSort={setTableSort} 
                      />
                  ) : (
                    <>
                      {viewMode === 'list' && <DataListView data={dataToRender} {...commonViewProps} />}
                      {viewMode === 'cards' && <DataCardView data={dataToRender} {...commonViewProps} />}
                      {viewMode === 'grid' && <DataCardView data={dataToRender} {...commonViewProps} isGrid />}
                    </>
                  )}
                </div>
              )}
            </div>

            {/* Loader for infinite scroll */}
            <div ref={loaderRef} className="flex justify-center items-center py-6">
              {isLoading && !isInitialLoading && groupBy === 'none' && (
                <div className="flex items-center gap-2 text-muted-foreground">
                  <Loader2 className="w-5 h-5 animate-spin" />
                  <span>Loading more...</span>
                </div>
              )}
              {!isLoading && !hasMore && dataToRender.length > 0 && !isInitialLoading && groupBy === 'none' && (
                <p className="text-muted-foreground">You've reached the end.</p>
              )}
            </div>
          </div>
        </PageLayout>
      )
    }
  src/pages/DataDemo/components/DataToolbar.tsx: >-
    import * as React from 'react'

    import { Check, ListFilter, Search, SortAsc } from 'lucide-react'


    import { cn } from '@/lib/utils'

    import { Button } from '@/components/ui/button'

    import { Input } from '@/components/ui/input'

    import { Badge } from '@/components/ui/badge'

    import { Popover, PopoverContent, PopoverTrigger } from
    '@/components/ui/popover'

    import {
      DropdownMenu,
      DropdownMenuContent,
      DropdownMenuRadioGroup,
      DropdownMenuRadioItem,
      DropdownMenuSeparator,
      DropdownMenuLabel,
      DropdownMenuTrigger,
    } from '@/components/ui/dropdown-menu'

    import {
      Command,
      CommandEmpty,
      CommandGroup,
      CommandInput,
      CommandItem,
      CommandList,
      CommandSeparator,
    } from '@/components/ui/command'


    import type { SortConfig, SortableField, Status, Priority } from '../types'


    export interface FilterConfig {
      searchTerm: string
      status: Status[]
      priority: Priority[]
    }


    interface DataToolbarProps {
      filters: FilterConfig
      onFiltersChange: (filters: FilterConfig) => void
      sortConfig: SortConfig | null
      onSortChange: (config: SortConfig | null) => void
    }


    const statusOptions: { value: Status; label: string }[] = [
      { value: 'active', label: 'Active' },
      { value: 'pending', label: 'Pending' },
      { value: 'completed', label: 'Completed' },
      { value: 'archived', label: 'Archived' },
    ]


    const priorityOptions: { value: Priority; label: string }[] = [
      { value: 'critical', label: 'Critical' },
      { value: 'high', label: 'High' },
      { value: 'medium', label: 'Medium' },
      { value: 'low', label: 'Low' },
    ]


    const sortOptions: { value: SortableField, label: string }[] = [
      { value: 'updatedAt', label: 'Last Updated' },
      { value: 'title', label: 'Title' },
      { value: 'status', label: 'Status' },
      { value: 'priority', label: 'Priority' },
      { value: 'metrics.completion', label: 'Progress' },
    ]



    export function DataToolbar({
      filters,
      onFiltersChange,
      sortConfig,
      onSortChange,
    }: DataToolbarProps) {
      const handleSearchChange = (event: React.ChangeEvent<HTMLInputElement>) => {
        onFiltersChange({ ...filters, searchTerm: event.target.value })
      }
      
      const activeFilterCount = filters.status.length + filters.priority.length

      return (
        <div className="flex flex-col md:flex-row items-center justify-between gap-4 w-full">
          {/* Left side: Search, Filters */}
          <div className="flex flex-col sm:flex-row items-center gap-2 w-full md:w-auto">
            <div className="relative w-full sm:w-auto">
              <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground" />
              <Input
                placeholder="Search projects..."
                className="pl-9 w-full sm:w-64"
                value={filters.searchTerm}
                onChange={handleSearchChange}
              />
            </div>

            <Popover>
              <PopoverTrigger asChild>
                <Button variant="outline" size="sm" className="h-9 w-full sm:w-auto justify-start border-dashed">
                  <ListFilter className="mr-2 h-4 w-4" />
                  Filters
                  {activeFilterCount > 0 && (
                    <>
                      <div className="mx-2 h-4 w-px bg-muted-foreground/50" />
                      <Badge variant="secondary" className="rounded-sm px-1 font-normal">
                        {activeFilterCount}
                      </Badge>
                    </>
                  )}
                </Button>
              </PopoverTrigger>
              <PopoverContent className="w-[240px] p-0" align="start">
                <CombinedFilter filters={filters} onFiltersChange={onFiltersChange} />
              </PopoverContent>
            </Popover>

            {activeFilterCount > 0 && (
              <Button variant="ghost" onClick={() => onFiltersChange({ searchTerm: filters.searchTerm, status: [], priority: [] })}>Reset</Button>
            )}
          </div>

          {/* Right side: Sorter */}
          <div className="flex items-center gap-2 w-full md:w-auto justify-start md:justify-end">
            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <Button variant="outline" className="w-full sm:w-auto justify-start">
                  <SortAsc className="mr-2 h-4 w-4" />
                  Sort by: {sortOptions.find(o => o.value === sortConfig?.key)?.label || 'Default'}
                </Button>
              </DropdownMenuTrigger>
              <DropdownMenuContent align="end" className="w-[200px]">
                <DropdownMenuLabel>Sort by</DropdownMenuLabel>
                <DropdownMenuRadioGroup
                  value={`${sortConfig?.key || 'default'}-${sortConfig?.direction || ''}`}
                  onValueChange={(value) => {
                    if (value.startsWith('default')) {
                      onSortChange(null)
                    } else {
                      const [key, direction] = value.split('-')
                      onSortChange({ key: key as SortableField, direction: direction as 'asc' | 'desc' })
                    }
                  }}
                >
                  <DropdownMenuRadioItem value="default-">Default</DropdownMenuRadioItem>
                  <DropdownMenuSeparator />
                  {sortOptions.map(option => (
                    <React.Fragment key={option.value}>
                      <DropdownMenuRadioItem value={`${option.value}-desc`}>{option.label} (Desc)</DropdownMenuRadioItem>
                      <DropdownMenuRadioItem value={`${option.value}-asc`}>{option.label} (Asc)</DropdownMenuRadioItem>
                    </React.Fragment>
                  ))}
                </DropdownMenuRadioGroup>
              </DropdownMenuContent>
            </DropdownMenu>
          </div>
        </div>
      )
    }


    function CombinedFilter({
      filters,
      onFiltersChange,
    }: {
      filters: FilterConfig;
      onFiltersChange: (filters: FilterConfig) => void;
    }) {
      const selectedStatus = new Set(filters.status);
      const selectedPriority = new Set(filters.priority);

      const handleStatusSelect = (status: Status) => {
        selectedStatus.has(status) ? selectedStatus.delete(status) : selectedStatus.add(status);
        onFiltersChange({ ...filters, status: Array.from(selectedStatus) });
      };

      const handlePrioritySelect = (priority: Priority) => {
        selectedPriority.has(priority) ? selectedPriority.delete(priority) : selectedPriority.add(priority);
        onFiltersChange({ ...filters, priority: Array.from(selectedPriority) });
      };

      const hasActiveFilters = filters.status.length > 0 || filters.priority.length > 0;

      return (
        <Command>
          <CommandInput placeholder="Filter by..." />
          <CommandList>
            <CommandEmpty>No results found.</CommandEmpty>

            <CommandGroup heading="Status">
              {statusOptions.map((option) => {
                const isSelected = selectedStatus.has(option.value);
                return (
                  <CommandItem
                    key={option.value}
                    onSelect={() => handleStatusSelect(option.value)}
                  >
                    <div
                      className={cn(
                        'mr-2 flex h-4 w-4 items-center justify-center rounded-sm border border-primary',
                        isSelected ? 'bg-primary text-primary-foreground' : 'opacity-50 [&_svg]:invisible'
                      )}
                    >
                      <Check className={cn('h-4 w-4')} />
                    </div>
                    <span>{option.label}</span>
                  </CommandItem>
                );
              })}
            </CommandGroup>

            <CommandSeparator />

            <CommandGroup heading="Priority">
              {priorityOptions.map((option) => {
                const isSelected = selectedPriority.has(option.value);
                return (
                  <CommandItem
                    key={option.value}
                    onSelect={() => handlePrioritySelect(option.value)}
                  >
                    <div
                      className={cn(
                        'mr-2 flex h-4 w-4 items-center justify-center rounded-sm border border-primary',
                        isSelected ? 'bg-primary text-primary-foreground' : 'opacity-50 [&_svg]:invisible'
                      )}
                    >
                      <Check className={cn('h-4 w-4')} />
                    </div>
                    <span>{option.label}</span>
                  </CommandItem>
                );
              })}
            </CommandGroup>

            {hasActiveFilters && (
              <>
                <CommandSeparator />
                <CommandGroup>
                  <CommandItem
                    onSelect={() => onFiltersChange({ ...filters, status: [], priority: [] })}
                    className="justify-center text-center text-sm"
                  >
                    Clear filters
                  </CommandItem>
                </CommandGroup>
              </>
            )}
          </CommandList>
        </Command>
      )
    }
  src/pages/DataDemo/components/DataViewModeSelector.tsx: >-
    import { useEffect, useRef, useState, useCallback } from 'react'

    import { gsap } from 'gsap'

    import { cn } from '@/lib/utils'

    import { List, Grid3X3, LayoutGrid, Table } from 'lucide-react'

    import type { ViewMode } from '../types'


    interface DataViewModeSelectorProps {
      viewMode: ViewMode
      onChange: (mode: ViewMode) => void
    }


    const viewModes = [
      { id: 'list' as ViewMode, label: 'List', icon: List, description: 'Compact list with details' },
      { id: 'cards' as ViewMode, label: 'Cards', icon: LayoutGrid, description: 'Rich card layout' },
      { id: 'grid' as ViewMode, label: 'Grid', icon: Grid3X3, description: 'Masonry grid view' },
      { id: 'table' as ViewMode, label: 'Table', icon: Table, description: 'Structured data table' }
    ]


    export function DataViewModeSelector({ viewMode, onChange }:
    DataViewModeSelectorProps) {
      const indicatorRef = useRef<HTMLDivElement>(null)
      const containerRef = useRef<HTMLDivElement>(null)
      const [isExpanded, setIsExpanded] = useState(false)
      const [isTransitioning, setIsTransitioning] = useState(false)

      const updateIndicatorPosition = useCallback((immediate = false) => {
        if (!indicatorRef.current || !containerRef.current || isTransitioning) return

        const activeButton = containerRef.current.querySelector(`[data-mode="${viewMode}"]`) as HTMLElement
        if (!activeButton) return

        const containerRect = containerRef.current.getBoundingClientRect()
        const buttonRect = activeButton.getBoundingClientRect()
        
        const left = buttonRect.left - containerRect.left
        const width = buttonRect.width

        if (immediate) {
          // Set position immediately without animation for initial load
          gsap.set(indicatorRef.current, {
            x: left,
            width: width
          })
        } else {
          gsap.to(indicatorRef.current, {
            duration: 0.3,
            x: left,
            width: width,
            ease: "power2.out"
          })
        }
      }, [viewMode, isTransitioning])

      // Initial setup - set position immediately without animation
      useEffect(() => {
        const timer = setTimeout(() => {
          updateIndicatorPosition(true)
        }, 0)
        return () => clearTimeout(timer)
        // eslint-disable-next-line react-hooks/exhaustive-deps
      }, []) // Only run once on mount

      useEffect(() => {
        if (!isTransitioning) {
          updateIndicatorPosition()
        }
      }, [viewMode, isTransitioning, updateIndicatorPosition])

      const handleMouseEnter = () => {
        setIsTransitioning(true)
        setIsExpanded(true)
        
        // Wait for expand animation to complete
        setTimeout(() => {
          setIsTransitioning(false)
        }, 500)
      }

      const handleMouseLeave = () => {
        setIsTransitioning(true)
        setIsExpanded(false)
        
        // Wait for collapse animation to complete
        setTimeout(() => {
          setIsTransitioning(false)
        }, 500)
      }

      return (
        <div 
          ref={containerRef}
          onMouseEnter={handleMouseEnter}
          onMouseLeave={handleMouseLeave}
          className={cn(
            "relative flex items-center bg-card/50 backdrop-blur-sm border border-border/50 rounded-2xl p-1.5 shadow-lg transition-all duration-500 ease-out",
            "hover:shadow-xl hover:bg-card/70",
            isExpanded ? "gap-1" : "gap-0"
          )}
        >
          {/* Animated indicator */}
          <div
            ref={indicatorRef}
            className="absolute inset-y-1.5 bg-gradient-to-r from-primary/20 to-primary/10 border border-primary/20 rounded-xl transition-all duration-300"
            style={{ left: 0, width: 0 }}
          />
          
          {/* Mode buttons */}
          {viewModes.map((mode, index) => {
            const IconComponent = mode.icon
            const isActive = viewMode === mode.id
            
            return (
              <button
                key={mode.id}
                data-mode={mode.id}
                onClick={() => onChange(mode.id)}
                className={cn(
                  "relative flex items-center justify-center rounded-xl transition-all duration-500 ease-out group overflow-hidden",
                  "hover:bg-accent/20 active:scale-95",
                  isActive && "text-primary",
                  isExpanded ? "gap-3 px-4 py-2.5" : "gap-0 px-3 py-2.5"
                )}
                title={mode.description}
                style={{
                  transitionDelay: isExpanded ? `${index * 50}ms` : `${(viewModes.length - index - 1) * 30}ms`
                }}
              >
                <IconComponent className={cn(
                  "w-5 h-5 transition-all duration-300 flex-shrink-0",
                  isActive && "scale-110",
                  "group-hover:scale-105",
                  isExpanded ? "rotate-0" : "rotate-0"
                )} />
                
                {/* Label with smooth expand/collapse */}
                <div className={cn(
                  "overflow-hidden transition-all duration-500 ease-out",
                  isExpanded ? "max-w-[80px] opacity-100" : "max-w-0 opacity-0"
                )}>
                  <span className={cn(
                    "font-medium whitespace-nowrap transition-all duration-300",
                    isActive ? "text-primary" : "text-muted-foreground",
                    "group-hover:text-foreground"
                  )}>
                    {mode.label}
                  </span>
                </div>
              </button>
            )
          })}
        </div>
      )
    }
  src/pages/DataDemo/components/DataListView.tsx: >-
    import { useRef } from 'react'

    import { cn } from '@/lib/utils'

    import { Badge } from '@/components/ui/badge'

    import { ArrowRight } from 'lucide-react'

    import type { ViewProps, DataItem } from '../types'

    import { useStaggeredAnimation } from
    '@/hooks/useStaggeredAnimation.motion.hook'

    import { EmptyState } from './EmptyState'

    import {
      AssigneeInfo,
      ItemMetrics,
      ItemProgressBar,
      ItemStatusBadge,
      ItemPriorityBadge,
      ItemDateInfo,
    } from './shared/DataItemParts'


    export function DataListView({ data, onItemSelect, selectedItem }:
    ViewProps) {
      const listRef = useRef<HTMLDivElement>(null)
      useStaggeredAnimation(listRef, [data], { mode: 'incremental', scale: 1, y: 30, stagger: 0.08, duration: 0.5 });

      if (!Array.isArray(data) || data.length === 0) {
        return <EmptyState />
      }

      return (
        <div ref={listRef} className="space-y-4">
          {data.map((item: DataItem) => {
            const isSelected = selectedItem?.id === item.id
            
            return (
              <div
                key={item.id}
                onClick={() => onItemSelect(item)}
                className={cn(
                  "group relative overflow-hidden rounded-2xl border bg-card/50 backdrop-blur-sm transition-all duration-300 cursor-pointer",
                  "hover:bg-card/80 hover:shadow-lg hover:shadow-primary/5 hover:border-primary/20",
                  "active:scale-[0.99]",
                  isSelected && "ring-2 ring-primary/20 border-primary/30 bg-card/90"
                )}
              >
                <div className="p-6">
                  <div className="flex items-start gap-4">
                    {/* Thumbnail */}
                    <div className="flex-shrink-0">
                      <div className="w-14 h-14 bg-gradient-to-br from-primary/20 to-primary/10 rounded-xl flex items-center justify-center text-2xl">
                        {item.thumbnail}
                      </div>
                    </div>

                    {/* Content */}
                    <div className="flex-1 min-w-0">
                      <div className="flex items-start justify-between mb-3">
                        <div className="flex-1 min-w-0">
                          <h3 className="font-semibold text-lg mb-1 group-hover:text-primary transition-colors">
                            {item.title}
                          </h3>
                          <p className="text-muted-foreground text-sm mb-3 line-clamp-2">
                            {item.description}
                          </p>
                        </div>
                        <ArrowRight className="w-5 h-5 text-muted-foreground group-hover:text-primary group-hover:translate-x-1 transition-all duration-300 ml-4 flex-shrink-0" />
                      </div>

                      {/* Badges */}
                      <div className="flex items-center gap-2 mb-4">
                        <ItemStatusBadge status={item.status} />
                        <ItemPriorityBadge priority={item.priority} />
                        <Badge variant="outline" className="bg-accent/50">
                          {item.category}
                        </Badge>
                      </div>

                      {/* Meta info */}
                      <div className="flex items-center justify-between text-muted-foreground">
                        <div className="flex items-center gap-4">
                          {/* Assignee */}
                          <AssigneeInfo assignee={item.assignee} avatarClassName="w-7 h-7" />
                          {/* Date */}
                          <ItemDateInfo date={item.updatedAt} />
                        </div>

                        {/* Metrics */}
                        <ItemMetrics metrics={item.metrics} />
                      </div>

                      {/* Progress bar */}
                      <div className="mt-4"><ItemProgressBar completion={item.metrics.completion} /></div>
                    </div>
                  </div>
                </div>

                {/* Hover gradient overlay */}
                <div className="absolute inset-0 bg-gradient-to-r from-primary/5 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300 pointer-events-none" />
              </div>
            )
          })}
        </div>
      )
    }
  src/pages/DataDemo/components/DataCardView.tsx: >-
    import { useRef } from 'react'

    import { cn } from '@/lib/utils'

    import { Badge } from '@/components/ui/badge'

    import { ArrowUpRight } from 'lucide-react'

    import type { ViewProps, DataItem } from '../types'

    import { useStaggeredAnimation } from
    '@/hooks/useStaggeredAnimation.motion.hook'

    import { EmptyState } from './EmptyState'

    import {
      AssigneeInfo,
      ItemMetrics,
      ItemProgressBar,
      ItemStatusBadge,
      ItemTags,
      ItemDateInfo,
    } from './shared/DataItemParts'


    export function DataCardView({ data, onItemSelect, selectedItem, isGrid =
    false }: ViewProps) {
      const containerRef = useRef<HTMLDivElement>(null)
      useStaggeredAnimation(containerRef, [data], { mode: 'incremental', y: 40 });

      if (!Array.isArray(data) || data.length === 0) {
        return <EmptyState />
      }

      return (
        <div 
          ref={containerRef}
          className={cn(
            "gap-6",
            isGrid
              ? "grid grid-cols-[repeat(auto-fit,minmax(280px,1fr))]"
              : "grid grid-cols-[repeat(auto-fit,minmax(320px,1fr))]"
          )}
        >
          {data.map((item: DataItem) => {
            const isSelected = selectedItem?.id === item.id
            
            return (
              <div
                key={item.id}
                onClick={() => onItemSelect(item)}
                className={cn(
                  "group relative overflow-hidden rounded-3xl border bg-card/50 backdrop-blur-sm transition-all duration-500 cursor-pointer",
                  "hover:bg-card/80 hover:shadow-xl hover:shadow-primary/10 hover:border-primary/30 hover:-translate-y-2",
                  "active:scale-[0.98]",
                  isSelected && "ring-2 ring-primary/30 border-primary/40 bg-card/90 shadow-lg shadow-primary/20",
                )}
              >
                {/* Card Header with Thumbnail */}
                <div className="relative p-6 pb-4">
                  <div className="flex items-start justify-between mb-4">
                    <div className="w-16 h-16 bg-gradient-to-br from-primary/20 to-primary/10 rounded-2xl flex items-center justify-center text-3xl group-hover:scale-110 transition-transform duration-300">
                      {item.thumbnail}
                    </div>
                    <ArrowUpRight className="w-5 h-5 text-muted-foreground group-hover:text-primary group-hover:translate-x-1 group-hover:-translate-y-1 transition-all duration-300" />
                  </div>

                  {/* Priority indicator */}
                  <div className="absolute top-4 right-4">
                    <div className={cn(
                      "w-3 h-3 rounded-full",
                      item.priority === 'critical' && "bg-red-500",
                      item.priority === 'high' && "bg-orange-500",
                      item.priority === 'medium' && "bg-blue-500",
                      item.priority === 'low' && "bg-green-500"
                    )} />
                  </div>
                </div>

                {/* Card Content */}
                <div className="px-6 pb-6">
                  {/* Title and Description */}
                  <h3 className="font-semibold text-lg mb-2 group-hover:text-primary transition-colors line-clamp-2">
                    {item.title}
                  </h3>
                  <p className="text-muted-foreground text-sm mb-4 line-clamp-3">
                    {item.description}
                  </p>

                  {/* Status and Category */}
                  <div className="flex items-center gap-2 mb-4">
                    <ItemStatusBadge status={item.status} />
                    <Badge variant="outline" className="bg-accent/50 text-xs">
                      {item.category}
                    </Badge>
                  </div>

                  {/* Tags */}
                  <div className="mb-4"><ItemTags tags={item.tags} /></div>

                  {/* Progress */}
                  <div className="mb-4"><ItemProgressBar completion={item.metrics.completion} /></div>

                  {/* Assignee */}
                  <div className="mb-4"><AssigneeInfo assignee={item.assignee} /></div>

                  {/* Metrics */}
                  <div className="flex items-center justify-between text-xs text-muted-foreground">
                    <ItemMetrics metrics={item.metrics} />
                    <ItemDateInfo date={item.updatedAt} />
                  </div>
                </div>

                {/* Hover gradient overlay */}
                <div className="absolute inset-0 bg-gradient-to-br from-primary/5 via-transparent to-primary/5 opacity-0 group-hover:opacity-100 transition-opacity duration-500 pointer-events-none" />
                
                {/* Selection indicator */}
                {isSelected && (
                  <div className="absolute inset-0 bg-gradient-to-br from-primary/10 to-primary/5 pointer-events-none" />
                )}
              </div>
            )
          })}
        </div>
      )
    }
  src/pages/DataDemo/components/DataTableView.tsx: >-
    import { useRef, useLayoutEffect } from 'react'

    import { gsap } from 'gsap'

    import { cn } from '@/lib/utils'

    import { 
      ArrowUpDown, 
      ArrowUp, 
      ArrowDown,
      ExternalLink
    } from 'lucide-react'

    import type { ViewProps, DataItem, SortableField } from '../types'

    import { EmptyState } from './EmptyState'

    import { capitalize } from '@/lib/utils'

    import {
      AssigneeInfo,
      ItemMetrics,
      ItemStatusBadge,
      ItemPriorityBadge,
      ItemDateInfo,
    } from './shared/DataItemParts'


    export function DataTableView({ data, onItemSelect, selectedItem,
    sortConfig, onSort }: ViewProps) {
      const tableRef = useRef<HTMLTableElement>(null)
      const animatedItemsCount = useRef(0)

      useLayoutEffect(() => {
        if (tableRef.current) {
          // Only select item rows for animation, not group headers
          const newItems = Array.from( 
            tableRef.current.querySelectorAll('tbody tr')
          ).filter(tr => !(tr as HTMLElement).dataset.groupHeader)
           .slice(animatedItemsCount.current);
          gsap.fromTo(newItems,
            { y: 20, opacity: 0 },
            {
              duration: 0.5,
              y: 0,
              opacity: 1,
              stagger: 0.05,
              ease: "power2.out",
            },
          );
          animatedItemsCount.current = Array.isArray(data) 
            ? data.length 
            : Object.values(data).reduce((sum, items) => sum + items.length, 0);
        }
      }, [data]);

      const SortIcon = ({ field }: { field: SortableField }) => {
        if (sortConfig?.key !== field) {
          return <ArrowUpDown className="w-4 h-4 opacity-50" />
        }
        if (sortConfig.direction === 'asc') {
          return <ArrowUp className="w-4 h-4 text-primary" />
        }
        if (sortConfig.direction === 'desc') {
          return <ArrowDown className="w-4 h-4 text-primary" />
        }
        return <ArrowUpDown className="w-4 h-4 opacity-50" />
      }

      const handleSortClick = (field: SortableField) => {
        onSort?.(field)
      }

      if ((Array.isArray(data) && data.length === 0) || (!Array.isArray(data) && Object.keys(data).length === 0)) {
        return <EmptyState />
      }

      return (
        <div className="relative overflow-hidden rounded-2xl border bg-card/50 backdrop-blur-sm">
          <div className="overflow-x-auto">
            <table ref={tableRef} className="w-full">
              <thead>
                <tr className="border-b border-border/50 bg-muted/20">
                  <th className="text-left p-4 font-semibold text-sm">
                    <button
                      onClick={() => handleSortClick('title')}
                      className="flex items-center gap-2 hover:text-primary transition-colors"
                    >
                      Project
                      <SortIcon field="title" />
                    </button>
                  </th>
                  <th className="text-left p-4 font-semibold text-sm">
                    <button
                      onClick={() => handleSortClick('status')}
                      className="flex items-center gap-2 hover:text-primary transition-colors"
                    >
                      Status
                      <SortIcon field="status" />
                    </button>
                  </th>
                  <th className="text-left p-4 font-semibold text-sm">
                    <button
                      onClick={() => handleSortClick('priority')}
                      className="flex items-center gap-2 hover:text-primary transition-colors"
                    >
                      Priority
                      <SortIcon field="priority" />
                    </button>
                  </th>
                  <th className="text-left p-4 font-semibold text-sm">
                    <button
                      onClick={() => handleSortClick('assignee.name')}
                      className="flex items-center gap-2 hover:text-primary transition-colors"
                    >
                      Assignee
                      <SortIcon field="assignee.name" />
                    </button>
                  </th>
                  <th className="text-left p-4 font-semibold text-sm">
                    <button
                      onClick={() => handleSortClick('metrics.completion')}
                      className="flex items-center gap-2 hover:text-primary transition-colors"
                    >
                      Progress
                      <SortIcon field="metrics.completion" />
                    </button>
                  </th>
                  <th className="text-left p-4 font-semibold text-sm">
                    <button
                      onClick={() => handleSortClick('metrics.views')}
                      className="flex items-center gap-2 hover:text-primary transition-colors"
                    >
                      Engagement
                      <SortIcon field="metrics.views" />
                    </button>
                  </th>
                  <th className="text-left p-4 font-semibold text-sm">Last Updated</th>
                  <th className="text-center p-4 font-semibold text-sm w-16">Actions</th>
                </tr>
              </thead>
              <tbody>
                {Array.isArray(data)
                  ? data.map(item => <TableRow key={item.id} item={item} isSelected={selectedItem?.id === item.id} onItemSelect={onItemSelect} />)
                  : Object.entries(data).flatMap(([groupName, items]) => [
                      <tr key={groupName} data-group-header="true" className="sticky top-0 z-10">
                        <td colSpan={8} className="p-2 bg-muted/50 backdrop-blur-sm">
                          <div className="flex items-center gap-2">
                            <h3 className="font-semibold text-sm">{capitalize(groupName)}</h3>
                            <span className="text-xs px-2 py-0.5 bg-background rounded-full font-medium">{items.length}</span>
                          </div>
                        </td>
                      </tr>,
                      ...items.map(item => <TableRow key={item.id} item={item} isSelected={selectedItem?.id === item.id} onItemSelect={onItemSelect} />)
                    ])
                }
              </tbody>
            </table>
          </div>
        </div>
      )
    }


    function TableRow({ item, isSelected, onItemSelect }: { item: DataItem;
    isSelected: boolean; onItemSelect: (item: DataItem) => void }) {
      return (
        <tr
          onClick={() => onItemSelect(item)}
          className={cn(
            "group border-b border-border/30 transition-all duration-200 cursor-pointer",
            "hover:bg-accent/20 hover:border-primary/20",
            isSelected && "bg-primary/5 border-primary/30"
          )}
        >
          {/* Project Column */}
          <td className="p-4">
            <div className="flex items-center gap-3">
              <div className="w-10 h-10 bg-gradient-to-br from-primary/20 to-primary/10 rounded-lg flex items-center justify-center text-lg flex-shrink-0">
                {item.thumbnail}
              </div>
              <div className="min-w-0 flex-1">
                <h4 className="font-medium group-hover:text-primary transition-colors truncate">
                  {item.title}
                </h4>
                <p className="text-sm text-muted-foreground truncate">
                  {item.category}
                </p>
              </div>
            </div>
          </td>

          {/* Status Column */}
          <td className="p-4">
            <ItemStatusBadge status={item.status} />
          </td>

          {/* Priority Column */}
          <td className="p-4">
            <ItemPriorityBadge priority={item.priority} />
          </td>

          {/* Assignee Column */}
          <td className="p-4">
            <AssigneeInfo assignee={item.assignee} />
          </td>

          {/* Progress Column */}
          {/* Note: This progress bar is custom for the table, so we don't use the shared component here. */}
          <td className="p-4">
            <div className="flex items-center gap-3">
              <div className="flex-1 min-w-0">
                <div className="w-full bg-muted rounded-full h-2">
                  <div 
                    className="bg-gradient-to-r from-primary to-primary/80 h-2 rounded-full transition-all duration-500"
                    style={{ width: `${item.metrics.completion}%` }}
                  />
                </div>
              </div>
              <span className="text-sm font-medium text-muted-foreground">
                {item.metrics.completion}%
              </span>
            </div>
          </td>

          {/* Engagement Column */}
          <td className="p-4">
            <ItemMetrics metrics={item.metrics} />
          </td>

          {/* Date Column */}
          <td className="p-4">
            <ItemDateInfo date={item.updatedAt} />
          </td>

          {/* Actions Column */}
          <td className="p-4">
            <button 
              onClick={(e) => {
                e.stopPropagation()
                onItemSelect(item)
              }}
              className="flex items-center justify-center w-8 h-8 rounded-lg hover:bg-accent transition-colors"
              title="View details"
            >
              <ExternalLink className="w-4 h-4" />
            </button>
          </td>
        </tr>
      )
    }
  src/components/layout/TopBar.tsx: |-
    import {
      Menu, 
      Moon, 
      Sun,
      Settings,
      Command,
      Zap,
    } from 'lucide-react'
    import { cn } from '@/lib/utils'
    import { BODY_STATES } from '@/lib/utils'
    import { useAppStore } from '@/store/appStore'
    import { useAppShell } from '@/context/AppShellContext'
    import { useAppViewManager } from '@/hooks/useAppViewManager.hook'
    import { UserDropdown } from './UserDropdown'
    import { ViewModeSwitcher } from './ViewModeSwitcher'

    interface TopBarProps {
      onToggleSidebar?: () => void
      onToggleDarkMode?: () => void
      children?: React.ReactNode
    }

    export function TopBar({
      onToggleSidebar,
      onToggleDarkMode,
      children,
    }: TopBarProps) {
      const { bodyState } = useAppShell()
      const viewManager = useAppViewManager();
      const { 
        setCommandPaletteOpen,
        isDarkMode,
      } = useAppStore()

      return (
        <div className={cn(
          "h-20 bg-background border-b border-border flex items-center justify-between px-6 z-50 gap-4"
        )}>
          {/* Left Section - Sidebar Controls & Breadcrumbs */}
          <div className="flex items-center gap-4">
            {/* Sidebar Controls */}
            <button
              onClick={() => onToggleSidebar?.()}
              className={cn(
                "h-10 w-10 flex items-center justify-center rounded-full hover:bg-accent transition-colors"
              )}
              title="Toggle Sidebar"
            >
              <Menu className="w-5 h-5" />
            </button>

          </div>

          {/* Right Section - page controls, and global controls */}
          <div className="flex items-center gap-3">
            {children}

            {/* Separator */}
            <div className="w-px h-6 bg-border mx-2" />

            {/* Quick Actions */}
            <div className="flex items-center gap-3">

              <button
                onClick={() => setCommandPaletteOpen(true)}
                className="h-10 w-10 flex items-center justify-center rounded-full hover:bg-accent transition-colors group"
                title="Command Palette (Ctrl+K)"
              >
                <Command className="w-5 h-5 group-hover:scale-110 transition-transform" />
              </button>

            <button
              className="h-10 w-10 flex items-center justify-center rounded-full hover:bg-accent transition-colors group"
              title="Quick Actions"
            >
              <Zap className="w-5 h-5 group-hover:scale-110 transition-transform" />
            </button>

            {bodyState !== BODY_STATES.SPLIT_VIEW && <ViewModeSwitcher />}

            <div className="w-px h-6 bg-border mx-2" />

            {/* Theme and Settings */}
            <button
              onClick={() => onToggleDarkMode?.()}
              className="h-10 w-10 flex items-center justify-center rounded-full hover:bg-accent transition-colors group"
              title="Toggle Dark Mode"
            >
              {isDarkMode ? (
                <Sun className="w-5 h-5 group-hover:scale-110 transition-transform" />
              ) : (
                <Moon className="w-5 h-5 group-hover:scale-110 transition-transform" />
              )}
            </button>

            <button
              onClick={() => viewManager.toggleSidePane('settings')}
              className="h-10 w-10 flex items-center justify-center rounded-full hover:bg-accent transition-colors group"
              title="Settings"
            >
              <Settings className="w-5 h-5 group-hover:rotate-90 transition-transform duration-300" />
            </button>
            <UserDropdown />
            </div>
          </div>
        </div>
      )
    }
  src/components/layout/RightPane.tsx: >-
    import { forwardRef, type ReactNode } from 'react'

    import { useSearchParams } from 'react-router-dom'

    import { ChevronRight, X } from 'lucide-react'

    import { cn, BODY_STATES } from '@/lib/utils'

    import { useAppShell } from '@/context/AppShellContext'


    interface RightPaneProps {
      children?: ReactNode
      header?: ReactNode
      className?: string
      onClose?: () => void;
    }


    export const RightPane = forwardRef<HTMLDivElement, RightPaneProps>(({
    children, header, className, onClose }, ref) => {
      const { dispatch, bodyState, fullscreenTarget, toggleFullscreen } = useAppShell();
      const [, setSearchParams] = useSearchParams()
      const isSplitView = bodyState === BODY_STATES.SPLIT_VIEW;
      const isFullscreen = bodyState === BODY_STATES.FULLSCREEN;

      if (isFullscreen && fullscreenTarget !== 'right') {
        return null;
      }

      return (
        <aside
          ref={ref}
          className={cn(
            "border-l border-border flex flex-col h-full overflow-hidden",
            isSplitView && "relative bg-background",
            !isSplitView && !isFullscreen && "fixed top-0 right-0 z-[60] bg-card", // side pane overlay
            isFullscreen && fullscreenTarget === 'right' && "fixed inset-0 z-[60] bg-card", // fullscreen
            className,
          )}
        >
          {isFullscreen && fullscreenTarget === 'right' && (
            <button
              onClick={() => toggleFullscreen()}
              className="fixed top-6 right-6 lg:right-12 z-[100] h-12 w-12 flex items-center justify-center rounded-full bg-card/50 backdrop-blur-sm hover:bg-card/75 transition-colors group"
              title="Exit Fullscreen"
            >
              <X className="w-6 h-6 group-hover:scale-110 group-hover:rotate-90 transition-all duration-300" />
            </button>
          )}
          {bodyState !== BODY_STATES.SPLIT_VIEW && !isFullscreen && (
            <button
              onClick={onClose ?? (() => {
                  setSearchParams(prev => {
                    const newParams = new URLSearchParams(prev);
                    newParams.delete('sidePane');
                    newParams.delete('right');
                    newParams.delete('view');
                    return newParams;
                  }, { replace: true });
                })
              }
              className="absolute top-1/2 -left-px -translate-y-1/2 -translate-x-full w-8 h-16 bg-card border border-r-0 border-border rounded-l-lg flex items-center justify-center hover:bg-accent transition-colors group z-10"
              title="Close pane"
            >
              <ChevronRight className="w-5 h-5 text-muted-foreground group-hover:text-foreground transition-colors" />
            </button>
          )}
          <div 
            className={cn(
              "absolute top-0 left-0 w-2 h-full bg-transparent hover:bg-primary/20 cursor-col-resize z-50 transition-colors duration-200 group -translate-x-1/2"
            )}
            onMouseDown={(e) => {
              e.preventDefault()
              dispatch({ type: 'SET_IS_RESIZING_RIGHT_PANE', payload: true });
            }}
          >
            <div className="w-0.5 h-full bg-border group-hover:bg-primary transition-colors duration-200 mx-auto" />
          </div>
          {header && (
            <div className="flex items-center justify-between p-4 border-b border-border h-20 flex-shrink-0 pl-6">
              {header}
            </div>
          )}
          <div className={cn("flex-1 overflow-y-auto")}>
            {children}
          </div>
        </aside>
      )
    })

    RightPane.displayName = "RightPane"
  src/App.tsx: |-
    import React, { useEffect, useMemo, useCallback } from "react";
    import {
      createBrowserRouter,
      RouterProvider,
      Outlet,
      Navigate,
      useNavigate, // used in LoginPageWrapper
      useLocation,
    } from "react-router-dom";

    import { AppShell } from "./components/layout/AppShell";
    import { AppShellProvider, useAppShell } from "./context/AppShellContext";
    import { useAppStore } from "./store/appStore";
    import { useAuthStore } from "./store/authStore";
    import "./index.css";

    // Import library components
    import { EnhancedSidebar } from "./components/layout/EnhancedSidebar";
    import { MainContent } from "./components/layout/MainContent";
    import { RightPane } from "./components/layout/RightPane";
    import { TopBar } from "./components/layout/TopBar";
    import { CommandPalette } from "./components/global/CommandPalette";
    import { ToasterProvider } from "./components/ui/toast";

    // --- Page/Content Components for Pages and Panes ---
    import { DashboardContent } from "./pages/Dashboard";
    import { SettingsPage } from "./pages/Settings";
    import { ToasterDemo } from "./pages/ToasterDemo";
    import { NotificationsPage } from "./pages/Notifications";
    import DataDemoPage from "./pages/DataDemo";
    import { LoginPage } from "./components/auth/LoginPage";

    // --- Icons ---
    import {
      Search,
      Filter,
      Plus,
      ChevronRight,
      Rocket,
      ChevronsLeftRight,
      Layers,
      SplitSquareHorizontal,
    } from "lucide-react";

    // --- Utils & Hooks ---
    import { cn } from "./lib/utils";
    import { useAppViewManager } from "./hooks/useAppViewManager.hook";
    import { useRightPaneContent } from "./hooks/useRightPaneContent.hook";
    import { BODY_STATES } from "./lib/utils";

    // Wrapper for LoginPage to provide auth handlers
    function LoginPageWrapper() {
      const { login, forgotPassword } = useAuthStore();
      const navigate = useNavigate();
      const location = useLocation();
      const from = location.state?.from?.pathname + location.state?.from?.search || "/";

      const handleLogin = async (email: string, password: string) => {
        try {
          await login(email, password);
          navigate(from, { replace: true });
        } catch (error) {
          console.error("Login failed:", error);
          // In a real app, you'd show an error message to the user
        }
      };

      const handleForgotPassword = async (email: string) => {
        try {
          await forgotPassword(email);
        } catch (error) {
          console.error("Forgot password failed:", error);
        }
      };

      const handleSignUp = () => {
        // In a real app, navigate to sign up page
        console.log("Navigate to sign up page");
      };

      return (
        <LoginPage
          onLogin={handleLogin}
          onForgotPassword={handleForgotPassword}
          onSignUp={handleSignUp}
        />
      );
    }

    // Checks for authentication and redirects to login if needed
    function ProtectedRoute() {
      const { isAuthenticated } = useAuthStore();
      const location = useLocation();
      if (!isAuthenticated) {
        return <Navigate to="/login" state={{ from: location }} replace />;
      }
      return <Outlet />;
    }

    // A root component to apply global styles and effects
    function Root() {
      const isDarkMode = useAppStore((state) => state.isDarkMode);

      useEffect(() => {
        document.documentElement.classList.toggle("dark", isDarkMode);
      }, [isDarkMode]);

      return <Outlet />;
    }

    // The main layout for authenticated parts of the application
    function ProtectedLayout() {

      return (
        <div className="h-screen w-screen overflow-hidden bg-background">
          <AppShellProvider
            appName="Jeli App"
            appLogo={
              <div className="p-2 bg-primary/20 rounded-lg">
                <Rocket className="w-5 h-5 text-primary" />
              </div>
            }
          >
            <ComposedApp />
          </AppShellProvider>
        </div>
      );
    }

    // Content for the Top Bar (will be fully refactored in Part 2)
    function AppTopBar() {
      const { searchTerm, setSearchTerm } = useAppStore();
      const [isSearchFocused, setIsSearchFocused] = React.useState(false);
      const location = useLocation();
      const activePage = location.pathname.split('/').filter(Boolean).pop()?.replace('-', ' ') || 'dashboard';

      return (
        <div className="flex items-center gap-3 flex-1">
          <div
            className={cn(
              "hidden md:flex items-center gap-2 text-sm transition-opacity",
              {
                "opacity-0 pointer-events-none":
                  isSearchFocused && activePage === "dashboard",
              },
            )}
          >
            <a
              href="#"
              className="text-muted-foreground hover:text-foreground transition-colors"
            >
              Home
            </a>
            <ChevronRight className="w-4 h-4 text-muted-foreground" />
            <span className="font-medium text-foreground capitalize">
              {activePage}
            </span>
          </div>

          <div className="flex-1" />

          {/* Page-specific: Dashboard search and actions */}
          {activePage === "dashboard" && (
            <div className="flex items-center gap-2 flex-1 justify-end">
              <div
                className={cn(
                  "relative transition-all duration-300 ease-in-out",
                  isSearchFocused ? "flex-1 max-w-lg" : "w-auto",
                )}
              >
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4 pointer-events-none" />
                <input
                  type="text"
                  placeholder="Search..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  onFocus={() => setIsSearchFocused(true)}
                  onBlur={() => setIsSearchFocused(false)}
                  className={cn(
                    "pl-9 pr-4 py-2 h-10 border-none rounded-lg bg-card focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent transition-all duration-300 ease-in-out w-full",
                    isSearchFocused ? "bg-background" : "w-48",
                  )}
                />
              </div>
              <button className="h-10 w-10 flex-shrink-0 flex items-center justify-center hover:bg-accent rounded-full transition-colors">
                <Filter className="w-5 h-5" />
              </button>
              <button className="bg-primary text-primary-foreground px-4 py-2 rounded-full hover:bg-primary/90 transition-colors flex items-center gap-2 h-10 flex-shrink-0">
                <Plus className="w-5 h-5" />
                <span
                  className={cn(isSearchFocused ? "hidden sm:inline" : "inline")}
                >
                  New Project
                </span>
              </button>
            </div>
          )}
        </div>
      );
    }

    // The main App component that composes the shell
    function ComposedApp() {
      const { dispatch } = useAppShell();
      const viewManager = useAppViewManager();

      // Sync URL state with AppShellContext
      useEffect(() => {
        dispatch({ type: 'SET_BODY_STATE', payload: viewManager.bodyState });
        dispatch({ type: 'SET_SIDE_PANE_CONTENT', payload: viewManager.sidePaneContent });
      }, [viewManager.bodyState, viewManager.sidePaneContent, dispatch]);

      const { meta: rightPaneMeta, content: rightPaneContent } = useRightPaneContent(viewManager.sidePaneContent);

      const handleMaximize = useCallback(() => {
        if ("page" in rightPaneMeta && rightPaneMeta.page) {
          viewManager.navigateTo(rightPaneMeta.page);
        }
      }, [rightPaneMeta, viewManager]);

      // --- Right Pane Header UI ---
      const rightPaneHeader = useMemo(() => (
        <>
          {viewManager.bodyState !== BODY_STATES.SPLIT_VIEW ? (
            <div className="flex items-center gap-2">
              {rightPaneMeta.icon && React.createElement(rightPaneMeta.icon, { className: "w-5 h-5" })}
              <h2 className="text-lg font-semibold whitespace-nowrap">
                {rightPaneMeta.title}
              </h2>
            </div>
          ) : <div />} {/* Placeholder to make justify-between work */}
          <div className="flex items-center">
            {(viewManager.bodyState === BODY_STATES.SIDE_PANE || viewManager.bodyState === BODY_STATES.SPLIT_VIEW) && (
              <button onClick={viewManager.toggleSplitView} className="h-10 w-10 flex items-center justify-center hover:bg-accent rounded-full transition-colors" title={viewManager.bodyState === BODY_STATES.SIDE_PANE ? "Switch to Split View" : "Switch to Overlay View"}>
                {viewManager.bodyState === BODY_STATES.SPLIT_VIEW ? <Layers className="w-5 h-5" /> : <SplitSquareHorizontal className="w-5 h-5" />}
              </button>
            )}
            {viewManager.bodyState !== BODY_STATES.SPLIT_VIEW && "page" in rightPaneMeta && rightPaneMeta.page && (
              <button onClick={handleMaximize} className="h-10 w-10 flex items-center justify-center hover:bg-accent rounded-full transition-colors mr-2" title="Move to Main View">
                <ChevronsLeftRight className="w-5 h-5" />
              </button>
            )}
          </div>
        </>
      ), [viewManager.bodyState, rightPaneMeta, handleMaximize, viewManager.toggleSplitView]);

      return (
        <AppShell
          sidebar={<EnhancedSidebar />}
          onOverlayClick={viewManager.closeSidePane}
          topBar={
            <TopBar>
              <AppTopBar />
            </TopBar>
          }
          mainContent={
            <MainContent>
              <Outlet />
            </MainContent>
          }
          rightPane={
            <RightPane onClose={viewManager.closeSidePane} header={rightPaneHeader}>
              {rightPaneContent}
            </RightPane>
          }
          commandPalette={<CommandPalette />}
        />
      );
    }

    function App() {
      const router = createBrowserRouter([
        {
          element: <Root />,
          children: [
            {
              path: "/login",
              element: <LoginPageWrapper />,
            },
            {
              path: "/",
              element: <ProtectedRoute />,
              children: [
                {
                  path: "/",
                  element: <ProtectedLayout />,
                  children: [
                    { index: true, element: <Navigate to="/dashboard" replace /> },
                    { path: "dashboard", element: <DashboardContent /> },
                    { path: "settings", element: <SettingsPage /> },
                    { path: "toaster", element: <ToasterDemo /> },
                    { path: "notifications", element: <NotificationsPage /> },
                    { path: "data-demo", element: <DataDemoPage /> },
                    { path: "data-demo/:itemId", element: <DataDemoPage /> },
                  ],
                },
              ],
            },
          ],
        },
      ]);

      return (
        <ToasterProvider>
          <RouterProvider router={router} />
        </ToasterProvider>
      );
    }

    export default App;
  src/pages/DataDemo/components/shared/DataItemParts.tsx: >-
    import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar'

    import { Badge } from '@/components/ui/badge'

    import { cn, getStatusColor, getPriorityColor } from '@/lib/utils'

    import { Clock, Eye, Heart, Share } from 'lucide-react'

    import type { DataItem } from '../../types'


    export function ItemStatusBadge({ status }: { status: DataItem['status'] })
    {
      return (
        <Badge variant="outline" className={cn("font-medium", getStatusColor(status))}>
          {status.charAt(0).toUpperCase() + status.slice(1)}
        </Badge>
      )
    }


    export function ItemPriorityBadge({ priority }: { priority:
    DataItem['priority'] }) {
      return (
        <Badge variant="outline" className={cn("font-medium", getPriorityColor(priority))}>
          {priority.charAt(0).toUpperCase() + priority.slice(1)}
        </Badge>
      )
    }


    export function AssigneeInfo({
      assignee,
      avatarClassName = "w-8 h-8",
    }: {
      assignee: DataItem['assignee']
      avatarClassName?: string
    }) {
      return (
        <div className="flex items-center gap-2 group">
          <Avatar className={cn("border-2 border-transparent group-hover:border-primary/50 transition-colors", avatarClassName)}>
            <AvatarImage src={assignee.avatar} alt={assignee.name} />
            <AvatarFallback>{assignee.name.charAt(0)}</AvatarFallback>
          </Avatar>
          <div className="min-w-0">
            <p className="font-medium text-sm truncate">{assignee.name}</p>
            <p className="text-xs text-muted-foreground truncate">{assignee.email}</p>
          </div>
        </div>
      )
    }


    export function ItemMetrics({ metrics }: { metrics: DataItem['metrics'] }) {
      return (
        <div className="flex items-center gap-3 text-sm">
          <div className="flex items-center gap-1"><Eye className="w-4 h-4" /> {metrics.views}</div>
          <div className="flex items-center gap-1"><Heart className="w-4 h-4" /> {metrics.likes}</div>
          <div className="flex items-center gap-1"><Share className="w-4 h-4" /> {metrics.shares}</div>
        </div>
      )
    }


    export function ItemProgressBar({ completion }: { completion: number }) {
      return (
        <div className="w-full bg-muted rounded-full h-2.5">
          <div
            className="bg-gradient-to-r from-primary to-primary/80 h-2.5 rounded-full transition-all duration-500"
            style={{ width: `${completion}%` }}
          />
        </div>
      )
    }


    export function ItemDateInfo({ date }: { date: string }) {
      return (
        <div className="flex items-center gap-1.5 text-sm">
          <Clock className="w-4 h-4" />
          <span>{new Date(date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}</span>
        </div>
      )
    }


    export function ItemTags({ tags }: { tags: string[] }) {
      const MAX_TAGS = 3
      const remainingTags = tags.length - MAX_TAGS
      return (
        <div className="flex items-center gap-1.5 flex-wrap">
          {tags.slice(0, MAX_TAGS).map(tag => (
            <Badge key={tag} variant="secondary" className="text-xs">{tag}</Badge>
          ))}
          {remainingTags > 0 && (
            <Badge variant="outline" className="text-xs">+{remainingTags}</Badge>
          )}
        </div>
      )
    }
approved: true
linesAdded: null
linesRemoved: null
linesDifference: null
gitCommittedAt: null
status: committed
id: 273
