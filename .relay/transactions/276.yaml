uuid: d2531d2e-436f-44e2-9b24-b1df70c490a2
projectId: jeli-app-shell
createdAt: '2025-10-14T03:12:08.106Z'
gitCommitMsg: >-
  refactor(state): extract notification and data-demo logic to stores

  This commit executes Part 2 of the DRY refactor plan.

  - Extracts state and actions from `NotificationsPage` into a new
  `useNotificationsStore`, making the component purely presentational. - Creates
  `useDataDemoStore` to absorb all data management logic from the
  `useDataManagement` hook and `DataDemoContext`. - Deletes the now-redundant
  `DataDemoContext` and `useDataManagement` hook, simplifying the component
  tree. - Refactors all sub-components within the Data Demo feature
  (`DataToolbar`, `DataListView`, etc.) to consume state directly from
  `useDataDemoStore` and `useAppViewManager`, eliminating prop drilling. - Adds
  an `onItemSelect` callback to `useAppViewManager` for consistent navigation
  handling.
promptSummary: >-
  The user asked me to execute Part 2 of the refactoring plan, which involves
  extracting domain logic for Notifications and DataDemo pages into their own
  dedicated Zustand stores, removing the old context and hook patterns, and
  refactoring all related components to use the new stores.
reasoning:
  - >-
    This is Part 2 of the refactoring plan. I will now extract the domain logic
    from the `Notifications` and `DataDemo` pages into their own dedicated
    Zustand stores. This will centralize their state, eliminate prop drilling,
    and remove the `DataDemoContext`.
  - '### Step 1: Create `notifications.store.ts` and Refactor Component'
  - >-
    First, I'll create a new store to manage the state for the notifications
    page. This includes the list of notifications, the active tab, and actions
    to modify them. Then, I'll update the `NotificationsPage` component to be a
    "dumb" renderer that pulls all its state and actions from this new store.
  - '### Step 2: Create `dataDemo.store.ts` and Absorb `useDataManagement`'
  - >-
    Next, I'll perform the major refactor for the Data Demo feature. I'll create
    a new `dataDemo.store.ts` to manage all data fetching, filtering, and state
    logic. This will allow me to delete the `useDataManagement` hook and the
    `DataDemoContext`.
  - '### Step 3: Remove `DataDemoContext` and Refactor Components'
  - >-
    Now that the store is ready, I'll delete the context and old hook, then
    refactor all the Data Demo components to get their state and actions from
    the new store and the `useAppViewManager` hook.
  - >-
    Final review. This looks correct and complete for Part 2. I have created the
    stores, removed the contexts/hooks, and rewired the components.
operations:
  - type: write
    path: src/pages/Notifications/notifications.store.ts
    content: >-
      import { create } from 'zustand';


      // --- Types ---

      export type Notification = {
        id: number;
        type: string;
        user: {
          name: string;
          avatar: string;
          fallback: string;
        };
        action: string;
        target?: string;
        content?: string;
        timestamp: string;
        timeAgo: string;
        isRead: boolean;
        hasActions?: boolean;
        file?: {
          name: string;
          size: string;
          type: string;
        };
      };


      const initialNotifications: Array<Notification> = [
          { id: 1, type: "comment", user: { name: "Amélie", avatar: "https://api.dicebear.com/7.x/notionists/svg?seed=Amélie", fallback: "A" }, action: "commented in", target: "Dashboard 2.0", content: "Really love this approach. I think this is the best solution for the document sync UX issue.", timestamp: "Friday 3:12 PM", timeAgo: "2 hours ago", isRead: false },
          { id: 2, type: "follow", user: { name: "Sienna", avatar: "https://api.dicebear.com/7.x/notionists/svg?seed=Sienna", fallback: "S" }, action: "followed you", timestamp: "Friday 3:04 PM", timeAgo: "2 hours ago", isRead: false },
          { id: 3, type: "invitation", user: { name: "Ammar", avatar: "https://api.dicebear.com/7.x/notionists/svg?seed=Ammar", fallback: "A" }, action: "invited you to", target: "Blog design", timestamp: "Friday 2:22 PM", timeAgo: "3 hours ago", isRead: true, hasActions: true },
          { id: 4, type: "file_share", user: { name: "Mathilde", avatar: "https://api.dicebear.com/7.x/notionists/svg?seed=Mathilde", fallback: "M" }, action: "shared a file in", target: "Dashboard 2.0", file: { name: "Prototype recording 01.mp4", size: "14 MB", type: "MP4" }, timestamp: "Friday 1:40 PM", timeAgo: "4 hours ago", isRead: true },
          { id: 5, type: "mention", user: { name: "James", avatar: "https://api.dicebear.com/7.x/notionists/svg?seed=James", fallback: "J" }, action: "mentioned you in", target: "Project Alpha", content: "Hey @you, can you review the latest designs when you get a chance?", timestamp: "Thursday 11:30 AM", timeAgo: "1 day ago", isRead: true },
          { id: 6, type: "like", user: { name: "Sofia", avatar: "https://api.dicebear.com/7.x/notionists/svg?seed=Sofia", fallback: "S" }, action: "liked your comment in", target: "Team Meeting Notes", timestamp: "Thursday 9:15 AM", timeAgo: "1 day ago", isRead: true },
          { id: 7, type: "task_assignment", user: { name: "Admin", avatar: "https://api.dicebear.com/7.x/bottts/svg?seed=Admin", fallback: "AD" }, action: "assigned you a new task in", target: "Q3 Marketing", content: "Finalize the social media campaign assets.", timestamp: "Wednesday 5:00 PM", timeAgo: "2 days ago", isRead: true },
          { id: 8, type: "system_update", user: { name: "System", avatar: "https://api.dicebear.com/7.x/shapes/svg?seed=System", fallback: "SYS" }, action: "pushed a new update", content: "Version 2.1.0 is now live with improved performance and new features. Check out the release notes for more details.", timestamp: "Wednesday 9:00 AM", timeAgo: "2 days ago", isRead: true },
          { id: 9, type: 'comment', user: { name: 'Elena', avatar: 'https://api.dicebear.com/7.x/notionists/svg?seed=Elena', fallback: 'E' }, action: 'replied to your comment in', target: 'Dashboard 2.0', content: 'Thanks for the feedback! I\'ve updated the prototype.', timestamp: 'Tuesday 4:30 PM', timeAgo: '3 days ago', isRead: false },
          { id: 10, type: 'invitation', user: { name: 'Carlos', avatar: 'https://api.dicebear.com/7.x/notionists/svg?seed=Carlos', fallback: 'C' }, action: 'invited you to', target: 'API Integration', timestamp: 'Tuesday 10:00 AM', timeAgo: '3 days ago', isRead: true, hasActions: true },
      ];


      // --- State and Actions ---

      type ActiveTab = 'all' | 'verified' | 'mentions';


      interface NotificationsState {
          notifications: Notification[];
          activeTab: ActiveTab;
      }


      interface NotificationsActions {
          markAsRead: (id: number) => void;
          markAllAsRead: () => number; // Returns number of items marked as read
          setActiveTab: (tab: ActiveTab) => void;
      }


      // --- Store ---

      export const useNotificationsStore = create<NotificationsState &
      NotificationsActions>((set, get) => ({
          notifications: initialNotifications,
          activeTab: 'all',

          markAsRead: (id) => set(state => ({
              notifications: state.notifications.map(n => n.id === id ? { ...n, isRead: true } : n)
          })),

          markAllAsRead: () => {
              const unreadCount = get().notifications.filter(n => !n.isRead).length;
              if (unreadCount > 0) {
                  set(state => ({
                      notifications: state.notifications.map(n => ({ ...n, isRead: true }))
                  }));
              }
              return unreadCount;
          },

          setActiveTab: (tab) => set({ activeTab: tab }),
      }));


      // --- Selectors ---

      const selectNotifications = (state: NotificationsState) =>
      state.notifications;

      const selectActiveTab = (state: NotificationsState) => state.activeTab;


      export const useFilteredNotifications = () => useNotificationsStore(state
      => {
          const notifications = selectNotifications(state);
          const activeTab = selectActiveTab(state);

          switch (activeTab) {
              case 'verified': return notifications.filter(n => n.type === 'follow' || n.type === 'like');
              case 'mentions': return notifications.filter(n => n.type === 'mention');
              default: return notifications;
          }
      });


      export const useNotificationCounts = () => useNotificationsStore(state =>
      {
          const notifications = selectNotifications(state);
          const unreadCount = notifications.filter(n => !n.isRead).length;
          const verifiedCount = notifications.filter(n => (n.type === 'follow' || n.type === 'like') && !n.isRead).length;
          const mentionCount = notifications.filter(n => n.type === 'mention' && !n.isRead).length;
          return { unreadCount, verifiedCount, mentionCount };
      });
    patchStrategy: replace
  - type: write
    path: src/pages/Notifications/index.tsx
    content: >+
      --- src/pages/Notifications/index.tsx

      +++ src/pages/Notifications/index.tsx

      @@ -5,7 +5,6 @@
       import { Tabs, TabsList, TabsTrigger } from "@/components/ui/tabs";
       import { PageHeader } from "@/components/shared/PageHeader";
       import { useToast } from "@/components/ui/toast";
      -import { PageLayout } from "@/components/shared/PageLayout";
       import { cn } from "@/lib/utils";
       import { 
         CheckCheck, 
      @@ -23,128 +22,18 @@
         ShieldCheck,
       } from "lucide-react";
       
      +import { PageLayout } from "@/components/shared/PageLayout";

      +import { 

      +  useNotificationsStore,

      +  useFilteredNotifications,

      +  useNotificationCounts,

      +  type Notification

      +} from "./notifications.store";
       
      -type Notification = {

      -  id: number;

      -  type: string;

      -  user: {

      -    name: string;

      -    avatar: string;

      -    fallback: string;

      -  };

      -  action: string;

      -  target?: string;

      -  content?: string;

      -  timestamp: string;

      -  timeAgo: string;

      -  isRead: boolean;

      -  hasActions?: boolean;

      -  file?: {

      -    name: string;

      -    size: string;

      -    type: string;

      -  };

      -};

      -

      -const initialNotifications: Array<Notification> = [

      -  {

      -    id: 1,

      -    type: "comment",

      -    user: { name: "Amélie", avatar:
      "https://api.dicebear.com/7.x/notionists/svg?seed=Amélie", fallback: "A"
      },

      -    action: "commented in",

      -    target: "Dashboard 2.0",

      -    content: "Really love this approach. I think this is the best
      solution for the document sync UX issue.",

      -    timestamp: "Friday 3:12 PM",

      -    timeAgo: "2 hours ago",

      -    isRead: false,

      -  },

      -  {

      -    id: 2,

      -    type: "follow",

      -    user: { name: "Sienna", avatar:
      "https://api.dicebear.com/7.x/notionists/svg?seed=Sienna", fallback: "S"
      },

      -    action: "followed you",

      -    timestamp: "Friday 3:04 PM",

      -    timeAgo: "2 hours ago",

      -    isRead: false,

      -  },

      -  {

      -    id: 3,

      -    type: "invitation",

      -    user: { name: "Ammar", avatar:
      "https://api.dicebear.com/7.x/notionists/svg?seed=Ammar", fallback: "A" },

      -    action: "invited you to",

      -    target: "Blog design",

      -    timestamp: "Friday 2:22 PM",

      -    timeAgo: "3 hours ago",

      -    isRead: true,

      -    hasActions: true,

      -  },

      -  {

      -    id: 4,

      -    type: "file_share",

      -    user: { name: "Mathilde", avatar:
      "https://api.dicebear.com/7.x/notionists/svg?seed=Mathilde", fallback: "M"
      },

      -    action: "shared a file in",

      -    target: "Dashboard 2.0",

      -    file: { name: "Prototype recording 01.mp4", size: "14 MB", type:
      "MP4" },

      -    timestamp: "Friday 1:40 PM",

      -    timeAgo: "4 hours ago",

      -    isRead: true,

      -  },

      -  {

      -    id: 5,

      -    type: "mention",

      -    user: { name: "James", avatar:
      "https://api.dicebear.com/7.x/notionists/svg?seed=James", fallback: "J" },

      -    action: "mentioned you in",

      -    target: "Project Alpha",

      -    content: "Hey @you, can you review the latest designs when you get a
      chance?",

      -    timestamp: "Thursday 11:30 AM",

      -    timeAgo: "1 day ago",

      -    isRead: true,

      -  },

      -  {

      -    id: 6,

      -    type: "like",

      -    user: { name: "Sofia", avatar:
      "https://api.dicebear.com/7.x/notionists/svg?seed=Sofia", fallback: "S" },

      -    action: "liked your comment in",

      -    target: "Team Meeting Notes",

      -    timestamp: "Thursday 9:15 AM",

      -    timeAgo: "1 day ago",

      -    isRead: true,

      -  },

      -  {

      -    id: 7,

      -    type: "task_assignment",

      -    user: { name: "Admin", avatar:
      "https://api.dicebear.com/7.x/bottts/svg?seed=Admin", fallback: "AD" },

      -    action: "assigned you a new task in",

      -    target: "Q3 Marketing",

      -    content: "Finalize the social media campaign assets.",

      -    timestamp: "Wednesday 5:00 PM",

      -    timeAgo: "2 days ago",

      -    isRead: true,

      -  },

      -  {

      -    id: 8,

      -    type: "system_update",

      -    user: { name: "System", avatar:
      "https://api.dicebear.com/7.x/shapes/svg?seed=System", fallback: "SYS" },

      -    action: "pushed a new update",

      -    content: "Version 2.1.0 is now live with improved performance and new
      features. Check out the release notes for more details.",

      -    timestamp: "Wednesday 9:00 AM",

      -    timeAgo: "2 days ago",

      -    isRead: true,

      -  },

      -  {

      -    id: 9,

      -    type: 'comment',

      -    user: { name: 'Elena', avatar:
      'https://api.dicebear.com/7.x/notionists/svg?seed=Elena', fallback: 'E' },

      -    action: 'replied to your comment in',

      -    target: 'Dashboard 2.0',

      -    content: 'Thanks for the feedback! I\'ve updated the prototype.',

      -    timestamp: 'Tuesday 4:30 PM',

      -    timeAgo: '3 days ago',

      -    isRead: false,

      -  },

      -  {

      -    id: 10,

      -    type: 'invitation',

      -    user: { name: 'Carlos', avatar:
      'https://api.dicebear.com/7.x/notionists/svg?seed=Carlos', fallback: 'C'
      },

      -    action: 'invited you to',

      -    target: 'API Integration',

      -    timestamp: 'Tuesday 10:00 AM',

      -    timeAgo: '3 days ago',

      -    isRead: true,

      -    hasActions: true,

      -  },

      -];

      -
       const iconMap: { [key: string]: React.ElementType } = {
         comment: MessageSquare,
         follow: UserPlus,
      @@ -156,7 +45,8 @@
         system_update: ShieldCheck,
       };
       
      -function NotificationItem({ notification, onMarkAsRead }: { notification:
      Notification; onMarkAsRead: (id: number) => void; }) {

      +function NotificationItem({ notification }: { notification: Notification;
      }) {

      +  const markAsRead = useNotificationsStore(s => s.markAsRead);
         const Icon = iconMap[notification.type];
       
         return (
      @@ -181,7 +71,7 @@
                     <div className="mt-0.5 text-xs text-muted-foreground">{notification.timeAgo}</div>
                   </div>
                   <button
      -              onClick={() => !notification.isRead &&
      onMarkAsRead(notification.id)}

      +              onClick={() => !notification.isRead &&
      markAsRead(notification.id)}
                     title={notification.isRead ? "Read" : "Mark as read"}
                     className={cn("size-2.5 rounded-full mt-1 shrink-0 transition-all duration-300",
                       notification.isRead ? 'bg-transparent' : 'bg-primary hover:scale-125 cursor-pointer'
      @@ -219,17 +109,12 @@
       }
       
       export function NotificationsPage({ isInSidePane = false }: { isInSidePane?: boolean; }) {
      -  const [notifications, setNotifications] =
      React.useState<Notification[]>(initialNotifications);

      -  const [activeTab, setActiveTab] = React.useState<string>("all");

      +  const { activeTab, setActiveTab, markAllAsRead } =
      useNotificationsStore(s => ({ activeTab: s.activeTab, setActiveTab:
      s.setActiveTab, markAllAsRead: s.markAllAsRead }));

      +  const filteredNotifications = useFilteredNotifications();

      +  const { unreadCount, verifiedCount, mentionCount } =
      useNotificationCounts();
         const { show: showToast } = useToast();
       
      -  const handleMarkAsRead = (id: number) => {

      -    setNotifications(prev =>

      -      prev.map(n => (n.id === id ? { ...n, isRead: true } : n))

      -    );

      -  };

      -
         const handleMarkAllAsRead = () => {
      -    const unreadCount = notifications.filter(n => !n.isRead).length;

      -    if (unreadCount === 0) {

      +    const count = markAllAsRead();

      +    if (count === 0) {
             showToast({
               title: "Already up to date!",
               message: "You have no unread notifications.",
      @@ -237,31 +122,12 @@
             });
             return;
           }
      -    setNotifications(prev => prev.map(n => ({ ...n, isRead: true })));
           showToast({
               title: "All Caught Up!",
               message: "All notifications have been marked as read.",
               variant: "success",
           });
         };
      -

      -  const unreadCount = notifications.filter(n => !n.isRead).length;

      -

      -  const verifiedNotifications = notifications.filter((n) => n.type ===
      "follow" || n.type === "like");

      -  const mentionNotifications = notifications.filter((n) => n.type ===
      "mention");

      -

      -  const verifiedCount = verifiedNotifications.filter(n =>
      !n.isRead).length;

      -  const mentionCount = mentionNotifications.filter(n =>
      !n.isRead).length;

      -

      -  const getFilteredNotifications = () => {

      -    switch (activeTab) {

      -      case "verified": return verifiedNotifications;

      -      case "mentions": return mentionNotifications;

      -      default: return notifications;

      -    }

      -  };

      -

      -  const filteredNotifications = getFilteredNotifications();
       
         const content = (
           <Card className={cn("flex w-full flex-col shadow-none", isInSidePane ? "border-none" : "")}>
      @@ -279,7 +145,7 @@
                 </div>
               </div>
       
      -        <Tabs value={activeTab} onValueChange={setActiveTab}
      className="w-full flex-col justify-start mt-4">

      +        <Tabs value={activeTab} onValueChange={(val) => setActiveTab(val
      as 'all' | 'verified' | 'mentions')} className="w-full flex-col
      justify-start mt-4">
                 <TabsList className="gap-1.5">
                   <TabsTrigger value="all" className="gap-1.5">
                     View all {unreadCount > 0 && <Badge variant="secondary" className="rounded-full">{unreadCount}</Badge>}
      @@ -298,7 +164,7 @@
               <div className="space-y-2 divide-y divide-border">
                 {filteredNotifications.length > 0 ? (
                   filteredNotifications.map((notification) => (
      -              <NotificationItem key={notification.id}
      notification={notification} onMarkAsRead={handleMarkAsRead} />

      +              <NotificationItem key={notification.id}
      notification={notification} />
                   ))
                 ) : (
                   <div className="flex flex-col items-center justify-center space-y-2.5 py-12 text-center">

    patchStrategy: standard-diff
  - type: write
    path: src/pages/DataDemo/store/dataDemo.store.ts
    content: >-
      import { create } from 'zustand';

      import { type ReactNode } from 'react';

      import { capitalize, cn } from '@/lib/utils';

      import { Badge } from '@/components/ui/badge';

      import { mockDataItems } from '../data/mockData';

      import type { DataItem, GroupableField, SortConfig } from '../types';

      import type { FilterConfig } from '../components/DataToolbar';


      // --- State and Actions ---

      interface DataDemoState {
          items: DataItem[];
          hasMore: boolean;
          isLoading: boolean;
          isInitialLoading: boolean;
          totalItemCount: number;
      }


      interface DataDemoActions {
          loadData: (params: {
              page: number;
              groupBy: GroupableField | 'none';
              filters: FilterConfig;
              sortConfig: SortConfig | null;
          }) => void;
      }


      const defaultState: DataDemoState = {
          items: [],
          hasMore: true,
          isLoading: true,
          isInitialLoading: true,
          totalItemCount: 0,
      };


      // --- Store Implementation ---

      export const useDataDemoStore = create<DataDemoState &
      DataDemoActions>((set) => ({
          ...defaultState,

          loadData: ({ page, groupBy, filters, sortConfig }) => {
              set({ isLoading: true, ...(page === 1 && { isInitialLoading: true }) });
              const isFirstPage = page === 1;

              const filteredAndSortedData = (() => {
                  const filteredItems = mockDataItems.filter((item) => {
                      const searchTermMatch =
                          item.title.toLowerCase().includes(filters.searchTerm.toLowerCase()) ||
                          item.description.toLowerCase().includes(filters.searchTerm.toLowerCase());
                      const statusMatch = filters.status.length === 0 || filters.status.includes(item.status);
                      const priorityMatch = filters.priority.length === 0 || filters.priority.includes(item.priority);
                      return searchTermMatch && statusMatch && priorityMatch;
                  });

                  if (sortConfig) {
                      filteredItems.sort((a, b) => {
                          // eslint-disable-next-line @typescript-eslint/no-explicit-any
                          const getNestedValue = (obj: DataItem, path: string): any =>
                              path.split('.').reduce((o: any, k) => (o || {})[k], obj);

                          const aValue = getNestedValue(a, sortConfig.key);
                          const bValue = getNestedValue(b, sortConfig.key);

                          if (aValue === undefined || bValue === undefined) return 0;
                          if (typeof aValue === 'string' && typeof bValue === 'string') {
                              return sortConfig.direction === 'asc' ? aValue.localeCompare(bValue) : bValue.localeCompare(aValue);
                          }
                          if (typeof aValue === 'number' && typeof bValue === 'number') {
                              return sortConfig.direction === 'asc' ? aValue - bValue : bValue - aValue;
                          }
                          if (sortConfig.key === 'updatedAt' || sortConfig.key === 'createdAt') {
                              if (typeof aValue === 'string' && typeof bValue === 'string') {
                                  return sortConfig.direction === 'asc'
                                      ? new Date(aValue).getTime() - new Date(bValue).getTime()
                                      : new Date(bValue).getTime() - new Date(aValue).getTime();
                              }
                          }
                          return 0;
                      });
                  }
                  return filteredItems;
              })();
              
              const totalItemCount = filteredAndSortedData.length;

              setTimeout(() => {
                  if (groupBy !== 'none') {
                      set({
                          items: filteredAndSortedData,
                          hasMore: false,
                          isLoading: false,
                          isInitialLoading: false,
                          totalItemCount,
                      });
                      return;
                  }

                  const pageSize = 12;
                  const newItems = filteredAndSortedData.slice((page - 1) * pageSize, page * pageSize);
                  
                  set(state => ({
                      items: isFirstPage ? newItems : [...state.items, ...newItems],
                      hasMore: totalItemCount > page * pageSize,
                      isLoading: false,
                      isInitialLoading: false,
                      totalItemCount,
                  }));

              }, isFirstPage ? 1500 : 500);
          }
      }));


      // --- Selectors ---

      export const useGroupTabs = (
          groupBy: GroupableField | 'none',
          activeGroupTab: string,
      ) => useDataDemoStore(state => {
          const items = state.items;
          if (groupBy === 'none' || !items.length) return [];
          
          const groupCounts = items.reduce((acc, item) => {
              const groupKey = String(item[groupBy as GroupableField]);
              acc[groupKey] = (acc[groupKey] || 0) + 1;
              return acc;
          }, {} as Record<string, number>);

          const sortedGroups = Object.keys(groupCounts).sort((a, b) => a.localeCompare(b));

          const createLabel = (text: string, count: number, isActive: boolean): ReactNode => (
              <>
                  {text}
                  <Badge variant={isActive ? 'default' : 'secondary'} className={cn('transition-colors duration-300 text-xs font-semibold', !isActive && 'group-hover:bg-accent group-hover:text-accent-foreground')}>
                      {count}
                  </Badge>
              </>
          );
          
          const totalCount = items.length;

          return [
              { id: 'all', label: createLabel('All', totalCount, activeGroupTab === 'all') },
              ...sortedGroups.map((g) => ({
                  id: g,
                  label: createLabel(capitalize(g), groupCounts[g], activeGroupTab === g),
              })),
          ];
      });


      export const useDataToRender = (
          groupBy: GroupableField | 'none',
          activeGroupTab: string,
      ) => useDataDemoStore(state => {
          const items = state.items;
          if (groupBy === 'none') {
              return items;
          }
          if (activeGroupTab === 'all') {
              return items;
          }
          return items.filter((item) => String(item[groupBy as GroupableField]) === activeGroupTab);
      });


      export const useSelectedItem = (itemId?: string) => {
          if (!itemId) return null;
          return mockDataItems.find(item => item.id === itemId) ?? null;
      };
    patchStrategy: replace
  - type: write
    path: src/hooks/useAppViewManager.hook.ts
    content: "--- src/hooks/useAppViewManager.hook.ts\n+++ src/hooks/useAppViewManager.hook.ts\n@@ -1,8 +1,8 @@\n import { useMemo, useCallback } from 'react';\n import { useSearchParams, useNavigate, useLocation, useParams } from 'react-router-dom';\n-import type { AppShellState } from '@/context/AppShellContext';\n+import type { AppShellState } from '@/store/appShell.store';\n import type { ActivePage } from '@/store/appStore';\n-import type { ViewMode, SortConfig, SortableField, GroupableField, Status, Priority } from '@/pages/DataDemo/types';\n+import type { DataItem, ViewMode, SortConfig, SortableField, GroupableField, Status, Priority } from '@/pages/DataDemo/types';\n import type { FilterConfig } from '@/pages/DataDemo/components/DataToolbar';\n import { BODY_STATES } from '@/lib/utils';\n \n@@ -181,6 +181,10 @@\n   };\n   const setPage = (newPage: number) => handleParamsChange({ page: newPage.toString() });\n \n+  const onItemSelect = useCallback((item: DataItem) => {\n+\t\tnavigate(`/data-demo/${item.id}${location.search}`);\n+\t}, [navigate, location.search]);\n+\n \n   return useMemo(() => ({\n     // State\n@@ -200,12 +204,13 @@\n     switchSplitPanes,\n     closeSplitPane,\n     // DataDemo Actions\n+    onItemSelect,\n     setViewMode,\n     setGroupBy,\n     setActiveGroupTab,\n     setFilters,\n     setSort,\n     setTableSort,\n     setPage,\n   }), [\n     bodyState, sidePaneContent, currentActivePage, itemId,\n     viewMode, page, groupBy, activeGroupTab, filters, sortConfig,\n-    navigateTo, openSidePane, closeSidePane, toggleSidePane, toggleSplitView, setNormalView,\n-    switchSplitPanes, closeSplitPane, setViewMode, setGroupBy, setActiveGroupTab, setFilters,\n+    navigateTo, openSidePane, closeSidePane, toggleSidePane, toggleSplitView, setNormalView, \n+    switchSplitPanes, closeSplitPane, onItemSelect, setViewMode, setGroupBy, setActiveGroupTab, setFilters,\n     setSort, setTableSort, setPage\n   ]);\n }\n\n"
    patchStrategy: standard-diff
  - type: delete
    path: src/pages/DataDemo/context/DataDemoContext.tsx
  - type: delete
    path: src/pages/DataDemo/hooks/useDataManagement.hook.tsx
  - type: write
    path: src/pages/DataDemo/index.tsx
    content: >
      --- src/pages/DataDemo/index.tsx

      +++ src/pages/DataDemo/index.tsx

      @@ -1,4 +1,4 @@

      -import { useRef, useEffect } from 'react'

      +import { useRef, useEffect, useCallback } from 'react'
       import {
         Layers, 
         AlertTriangle, 
      @@ -17,9 +17,14 @@
       import { AnimatedLoadingSkeleton } from './components/AnimatedLoadingSkeleton'
       import { DataToolbar } from './components/DataToolbar'
       import { mockDataItems } from './data/mockData'
      -import type { GroupableField } from './types'

      -import { useDataDemo, DataDemoProvider } from './context/DataDemoContext'

      +import type { GroupableField } from './types'

      +import { useAppViewManager } from '@/hooks/useAppViewManager.hook'

      +import { 

      +  useDataDemoStore,

      +  useGroupTabs,

      +  useDataToRender,

      +} from './store/dataDemo.store'
       
       type Stat = {
         title: string;
      @@ -43,21 +48,36 @@
       
       function DataDemoContent() {
         const {
           viewMode,
           groupBy,
           activeGroupTab,
      -    hasMore,

      -    isLoading,

      -    loaderRef,

      -    groupTabs,

      -    dataToRender,

      -    totalItemCount,

      -    isInitialLoading,
           setGroupBy,
           setActiveGroupTab,
      -  } = useDataDemo();

      +    page,

      +    filters,

      +    sortConfig,

      +    setPage,

      +  } = useAppViewManager();

      +

      +  const { hasMore, isLoading, isInitialLoading, totalItemCount, loadData
      } = useDataDemoStore(state => ({

      +    hasMore: state.hasMore,

      +    isLoading: state.isLoading,

      +    isInitialLoading: state.isInitialLoading,

      +    totalItemCount: state.totalItemCount,

      +    loadData: state.loadData,

      +  }));

      +

      +  const groupTabs = useGroupTabs(groupBy, activeGroupTab);

      +  const dataToRender = useDataToRender(groupBy, activeGroupTab);
       
         const groupOptions: { id: GroupableField | 'none'; label: string }[] = [
           { id: 'none', label: 'None' }, { id: 'status', label: 'Status' }, { id: 'priority', label: 'Priority' }, { id: 'category', label: 'Category' }
      @@ -112,6 +132,28 @@
               }
             )
           }
      -  }, [isInitialLoading])

      +  }, [isInitialLoading]);

      +

      +  useEffect(() => {

      +    loadData({ page, groupBy, filters, sortConfig });

      +  }, [page, groupBy, filters, sortConfig, loadData]);

      +

      +  const observer = useRef<IntersectionObserver>();

      +  const loaderRef = useCallback(

      +    (node: Element | null) => {

      +      if (isLoading) return;

      +      if (observer.current) observer.current.disconnect();

      +

      +      observer.current = new IntersectionObserver((entries) => {

      +        if (entries[0].isIntersecting && hasMore) {

      +          setPage(page + 1);

      +        }

      +      });

      +      if (node) observer.current.observe(node);

      +    },

      +    [isLoading, hasMore, page, setPage],

      +  );
       
         return (
           <PageLayout
      @@ -197,11 +239,7 @@
       }
       
       export default function DataDemoPage() {
      -  return (

      -    <DataDemoProvider>

      -      <DataDemoContent />

      -    </DataDemoProvider>

      -  );

      +  return <DataDemoContent />;
       }
    patchStrategy: standard-diff
  - type: write
    path: src/pages/DataDemo/components/DataToolbar.tsx
    content: >+
      --- src/pages/DataDemo/components/DataToolbar.tsx

      +++ src/pages/DataDemo/components/DataToolbar.tsx

      @@ -21,7 +21,7 @@
       } from '@/components/ui/command'
       
       import type { SortableField, Status, Priority } from '../types'
      -import { useDataDemo } from '../context/DataDemoContext'

      +import { useAppViewManager } from '@/hooks/useAppViewManager.hook'
       
       export interface FilterConfig {
         searchTerm: string
      @@ -58,13 +58,13 @@
       export function DataToolbar() {
         const {
           filters,
      -    setFilters: onFiltersChange,

      +    setFilters,
           sortConfig,
      -    setSort: onSortChange,

      -  } = useDataDemo();

      +    setSort,

      +  } = useAppViewManager();
       
         const handleSearchChange = (event: React.ChangeEvent<HTMLInputElement>) => {
      -    onFiltersChange({ ...filters, searchTerm: event.target.value })

      +    setFilters({ ...filters, searchTerm: event.target.value })
         }
         
         const activeFilterCount = filters.status.length + filters.priority.length
      @@ -95,12 +95,12 @@
                   </Button>
                 </PopoverTrigger>
                 <PopoverContent className="w-[240px] p-0" align="start">
      -            <CombinedFilter filters={filters}
      onFiltersChange={onFiltersChange} />

      +            <CombinedFilter filters={filters}
      onFiltersChange={setFilters} />
                 </PopoverContent>
               </Popover>
       
               {activeFilterCount > 0 && (
      -          <Button variant="ghost" onClick={() => onFiltersChange({
      searchTerm: filters.searchTerm, status: [], priority: []
      })}>Reset</Button>

      +          <Button variant="ghost" onClick={() => setFilters({ searchTerm:
      filters.searchTerm, status: [], priority: [] })}>Reset</Button>
               )}
             </div>
       
      @@ -118,10 +118,10 @@
                     value={`${sortConfig?.key || 'default'}-${sortConfig?.direction || ''}`}
                     onValueChange={(value) => {
                       if (value.startsWith('default')) {
      -                  onSortChange(null)

      +                  setSort(null)
                       } else {
                         const [key, direction] = value.split('-')
      -                  onSortChange({ key: key as SortableField, direction:
      direction as 'asc' | 'desc' })

      +                  setSort({ key: key as SortableField, direction:
      direction as 'asc' | 'desc' })
                       }
                     }}
                   >

    patchStrategy: standard-diff
  - type: write
    path: src/pages/DataDemo/components/DataViewModeSelector.tsx
    content: |
      --- src/pages/DataDemo/components/DataViewModeSelector.tsx
      +++ src/pages/DataDemo/components/DataViewModeSelector.tsx
      @@ -3,7 +3,7 @@
       import { cn } from '@/lib/utils'
       import { List, Grid3X3, LayoutGrid, Table } from 'lucide-react'
       import type { ViewMode } from '../types'
      -import { useDataDemo } from '../context/DataDemoContext'
      +import { useAppViewManager } from '@/hooks/useAppViewManager.hook'
       
       const viewModes = [
         { id: 'list' as ViewMode, label: 'List', icon: List, description: 'Compact list with details' },
      @@ -13,7 +13,7 @@
       ]
       
       export function DataViewModeSelector() {
      -  const { viewMode, setViewMode: onChange } = useDataDemo();
      +  const { viewMode, setViewMode } = useAppViewManager();
         const indicatorRef = useRef<HTMLDivElement>(null)
         const containerRef = useRef<HTMLDivElement>(null)
         const [isExpanded, setIsExpanded] = useState(false)
      @@ -94,7 +94,7 @@
                 <button
                   key={mode.id}
                   data-mode={mode.id}
      -            onClick={() => onChange(mode.id)}
      +            onClick={() => setViewMode(mode.id)}
                   className={cn(
                     "relative flex items-center justify-center rounded-xl transition-all duration-500 ease-out group overflow-hidden",
                     "hover:bg-accent/20 active:scale-95",
    patchStrategy: standard-diff
  - type: write
    path: src/pages/DataDemo/components/DataListView.tsx
    content: >+
      --- src/pages/DataDemo/components/DataListView.tsx

      +++ src/pages/DataDemo/components/DataListView.tsx

      @@ -4,8 +4,11 @@
       import { ArrowRight } from 'lucide-react'
       import type { DataItem } from '../types'
       import { useStaggeredAnimation } from '@/hooks/useStaggeredAnimation.motion.hook'
       import { EmptyState } from './EmptyState'
      -import { useDataDemo } from '../context/DataDemoContext'

      +import { useAppViewManager } from '@/hooks/useAppViewManager.hook'

      +import { 

      +  useDataToRender,

      +  useSelectedItem,

      +} from '../store/dataDemo.store'
       import {
         AssigneeInfo,
         ItemMetrics,
      @@ -16,7 +19,11 @@
       } from './shared/DataItemParts'
       
       export function DataListView() {
      -  const { dataToRender: data, onItemSelect, selectedItem } =
      useDataDemo();

      +  const { groupBy, activeGroupTab, onItemSelect, itemId } =
      useAppViewManager();

      +  const data = useDataToRender(groupBy, activeGroupTab);

      +  const selectedItem = useSelectedItem(itemId);

      +
         const listRef = useRef<HTMLDivElement>(null)
         useStaggeredAnimation(listRef, [data], { mode: 'incremental', scale: 1, y: 30, stagger: 0.08, duration: 0.5 });
       

    patchStrategy: standard-diff
  - type: write
    path: src/pages/DataDemo/components/DataCardView.tsx
    content: >+
      --- src/pages/DataDemo/components/DataCardView.tsx

      +++ src/pages/DataDemo/components/DataCardView.tsx

      @@ -4,8 +4,11 @@
       import { ArrowUpRight } from 'lucide-react'
       import type { DataItem } from '../types'
       import { useStaggeredAnimation } from '@/hooks/useStaggeredAnimation.motion.hook'
       import { EmptyState } from './EmptyState'
      -import { useDataDemo } from '../context/DataDemoContext'

      +import { useAppViewManager } from '@/hooks/useAppViewManager.hook'

      +import {

      +  useDataToRender,

      +  useSelectedItem,

      +} from '../store/dataDemo.store'
       import {
         AssigneeInfo,
         ItemMetrics,
      @@ -16,7 +19,11 @@
       } from './shared/DataItemParts'
       
       export function DataCardView({ isGrid = false }: { isGrid?: boolean }) {
      -  const { dataToRender: data, onItemSelect, selectedItem } =
      useDataDemo();

      +  const { groupBy, activeGroupTab, onItemSelect, itemId } =
      useAppViewManager();

      +  const data = useDataToRender(groupBy, activeGroupTab);

      +  const selectedItem = useSelectedItem(itemId);

      +
         const containerRef = useRef<HTMLDivElement>(null)
         useStaggeredAnimation(containerRef, [data], { mode: 'incremental', y: 40 });
       

    patchStrategy: standard-diff
  - type: write
    path: src/pages/DataDemo/components/DataTableView.tsx
    content: |+
      --- src/pages/DataDemo/components/DataTableView.tsx
      +++ src/pages/DataDemo/components/DataTableView.tsx
      @@ -8,7 +8,11 @@
       } from 'lucide-react'
       import type { DataItem, SortableField } from '../types'
       import { EmptyState } from './EmptyState'
      -import { useDataDemo } from '../context/DataDemoContext'
      +import { useAppViewManager } from '@/hooks/useAppViewManager.hook'
      +import {
      +  useDataToRender,
      +  useSelectedItem,
      +} from '../store/dataDemo.store'
       import { capitalize } from '@/lib/utils'
       import {
         AssigneeInfo,
      @@ -21,14 +25,17 @@
       
       export function DataTableView() {
         const {
      -    dataToRender: data,
      -    onItemSelect,
      -    selectedItem,
           sortConfig,
      -    setTableSort: onSort,
      +    setTableSort,
           groupBy,
      -  } = useDataDemo();
      +    activeGroupTab,
      +    onItemSelect,
      +    itemId,
      +  } = useAppViewManager();
      +  const data = useDataToRender(groupBy, activeGroupTab);
      +  const selectedItem = useSelectedItem(itemId);
      +
         const tableRef = useRef<HTMLTableElement>(null)
         const animatedItemsCount = useRef(0)
       
      @@ -59,7 +66,7 @@
         }
       
         const handleSortClick = (field: SortableField) => {
      -    onSort?.(field)
      +    setTableSort(field)
         }
       
         const groupedData = useMemo(() => {

    patchStrategy: standard-diff
snapshot:
  src/pages/Notifications/notifications.store.ts: null
  src/pages/DataDemo/store/dataDemo.store.ts: null
  src/pages/DataDemo/context/DataDemoContext.tsx: |-
    import { createContext, useContext, ReactNode } from 'react';
    import { useDataManagement } from '../hooks/useDataManagement.hook';

    // The return type of useDataManagement is the shape of our context
    type DataDemoContextType = ReturnType<typeof useDataManagement>;

    const DataDemoContext = createContext<DataDemoContextType | null>(null);

    export function DataDemoProvider({ children }: { children: ReactNode }) {
      const dataManagement = useDataManagement();
      return (
        <DataDemoContext.Provider value={dataManagement}>
          {children}
        </DataDemoContext.Provider>
      );
    }

    // eslint-disable-next-line react-refresh/only-export-components
    export function useDataDemo() {
      const context = useContext(DataDemoContext);
      if (!context) {
        throw new Error('useDataDemo must be used within a DataDemoProvider');
      }
      return context;
    }
  src/hooks/useAppViewManager.hook.ts: "import { useMemo, useCallback } from 'react';\nimport { useSearchParams, useNavigate, useLocation, useParams } from 'react-router-dom';\nimport type { AppShellState } from '@/context/AppShellContext';\nimport type { ActivePage } from '@/store/appStore';\nimport type { ViewMode, SortConfig, SortableField, GroupableField, Status, Priority } from '@/pages/DataDemo/types';\nimport type { FilterConfig } from '@/pages/DataDemo/components/DataToolbar';\nimport { BODY_STATES } from '@/lib/utils';\n\nconst pageToPaneMap: Record<string, AppShellState['sidePaneContent']> = {\n  dashboard: 'main',\n  settings: 'settings',\n  toaster: 'toaster',\n  notifications: 'notifications',\n  'data-demo': 'dataDemo',\n};\n\n/**\n * A centralized hook to manage and synchronize all URL-based view states.\n * This is the single source of truth for view modes, side panes, split views,\n * and page-specific parameters.\n */\nexport function useAppViewManager() {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const navigate = useNavigate();\n  const location = useLocation();\n  const { itemId } = useParams<{ itemId: string }>();\n\n  // --- DERIVED STATE FROM URL ---\n\n  const view = searchParams.get('view');\n  const sidePane = searchParams.get('sidePane');\n  const right = searchParams.get('right');\n\n  const { bodyState, sidePaneContent } = useMemo(() => {\n    const validPanes: AppShellState['sidePaneContent'][] = ['details', 'settings', 'main', 'toaster', 'notifications', 'dataDemo'];\n    \n    if (itemId) {\n      if (view === 'split') {\n        return { bodyState: BODY_STATES.SPLIT_VIEW, sidePaneContent: 'dataItem' as const };\n      }\n      return { bodyState: BODY_STATES.SIDE_PANE, sidePaneContent: 'dataItem' as const };\n    }\n    \n    if (sidePane && validPanes.includes(sidePane as AppShellState['sidePaneContent'])) {\n      return { bodyState: BODY_STATES.SIDE_PANE, sidePaneContent: sidePane as AppShellState['sidePaneContent'] };\n    }\n    \n    if (view === 'split' && right && validPanes.includes(right as AppShellState['sidePaneContent'])) {\n      return { bodyState: BODY_STATES.SPLIT_VIEW, sidePaneContent: right as AppShellState['sidePaneContent'] };\n    }\n    \n    return { bodyState: BODY_STATES.NORMAL, sidePaneContent: 'details' as const };\n  }, [itemId, view, sidePane, right]);\n  \n  const currentActivePage = useMemo(() => (location.pathname.split('/')[1] || 'dashboard') as ActivePage, [location.pathname]);\n\n  // DataDemo specific state\n  const viewMode = useMemo(() => (searchParams.get('view') as ViewMode) || 'list', [searchParams]);\n\tconst page = useMemo(() => parseInt(searchParams.get('page') || '1', 10), [searchParams]);\n\tconst groupBy = useMemo(() => (searchParams.get('groupBy') as GroupableField | 'none') || 'none', [searchParams]);\n\tconst activeGroupTab = useMemo(() => searchParams.get('tab') || 'all', [searchParams]);\n\tconst filters = useMemo<FilterConfig>(\n\t\t() => ({\n\t\t\tsearchTerm: searchParams.get('q') || '',\n\t\t\tstatus: (searchParams.get('status')?.split(',') || []).filter(Boolean) as Status[],\n\t\t\tpriority: (searchParams.get('priority')?.split(',') || []).filter(Boolean) as Priority[],\n\t\t}),\n\t\t[searchParams],\n\t);\n\tconst sortConfig = useMemo<SortConfig | null>(() => {\n\t\tconst sortParam = searchParams.get('sort');\n\t\tif (!sortParam) return { key: 'updatedAt', direction: 'desc' }; // Default sort\n\t\tif (sortParam === 'default') return null;\n\n\t\tconst [key, direction] = sortParam.split('-');\n\t\treturn { key: key as SortableField, direction: direction as 'asc' | 'desc' };\n\t}, [searchParams]);\n\n  // --- MUTATOR ACTIONS ---\n\n  const handleParamsChange = useCallback(\n\t\t(newParams: Record<string, string | string[] | null | undefined>, resetPage = false) => {\n\t\t\tsetSearchParams(\n\t\t\t\t(prev) => {\n\t\t\t\t\tconst updated = new URLSearchParams(prev);\n\t\t\t\t\t\n\t\t\t\t\tfor (const [key, value] of Object.entries(newParams)) {\n\t\t\t\t\t\tif (value === null || value === undefined || (Array.isArray(value) && value.length === 0) || value === '') {\n\t\t\t\t\t\t\tupdated.delete(key);\n\t\t\t\t\t\t} else if (Array.isArray(value)) {\n\t\t\t\t\t\t\tupdated.set(key, value.join(','));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tupdated.set(key, String(value));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (resetPage) {\n\t\t\t\t\t\tupdated.delete('page');\n\t\t\t\t\t}\n\t\t\t\t\tif ('groupBy' in newParams) {\n\t\t\t\t\t\tupdated.delete('tab');\n\t\t\t\t\t}\n\n\t\t\t\t\treturn updated;\n\t\t\t\t},\n\t\t\t\t{ replace: true },\n\t\t\t);\n\t\t},\n\t\t[setSearchParams],\n\t);\n\n  const navigateTo = useCallback((page: string) => {\n    navigate(page.startsWith('/') ? page : `/${page}`);\n  }, [navigate]);\n\n  const openSidePane = useCallback((pane: AppShellState['sidePaneContent']) => {\n    if (location.pathname === `/${Object.keys(pageToPaneMap).find(key => pageToPaneMap[key] === pane)}`) {\n        navigate({ pathname: '/dashboard', search: `?sidePane=${pane}` }, { replace: true });\n    } else {\n        handleParamsChange({ sidePane: pane, view: null, right: null });\n    }\n  }, [handleParamsChange, navigate, location.pathname]);\n\n  const closeSidePane = useCallback(() => {\n    if (itemId) {\n      navigate('/data-demo');\n    } else {\n      handleParamsChange({ sidePane: null, view: null, right: null });\n    }\n  }, [itemId, navigate, handleParamsChange]);\n\n  const toggleSidePane = useCallback((pane: AppShellState['sidePaneContent']) => {\n    if (sidePane === pane) {\n      closeSidePane();\n    } else {\n      openSidePane(pane);\n    }\n  }, [sidePane, openSidePane, closeSidePane]);\n\n  const toggleSplitView = useCallback(() => {\n    if (bodyState === BODY_STATES.SIDE_PANE) {\n      handleParamsChange({ view: 'split', right: sidePane, sidePane: null });\n    } else if (bodyState === BODY_STATES.SPLIT_VIEW) {\n      handleParamsChange({ sidePane: right, view: null, right: null });\n    } else { // From normal\n      const paneContent = pageToPaneMap[currentActivePage] || 'details';\n      handleParamsChange({ view: 'split', right: paneContent, sidePane: null });\n    }\n  }, [bodyState, sidePane, right, currentActivePage, handleParamsChange]);\n  \n  const setNormalView = useCallback(() => {\n      handleParamsChange({ sidePane: null, view: null, right: null });\n  }, [handleParamsChange]);\n\n  const switchSplitPanes = useCallback(() => {\n    if (bodyState !== BODY_STATES.SPLIT_VIEW) return;\n    const newSidePaneContent = pageToPaneMap[currentActivePage];\n    const newActivePage = Object.entries(pageToPaneMap).find(\n      ([, value]) => value === sidePaneContent\n    )?.[0] as ActivePage | undefined;\n\n    if (newActivePage && newSidePaneContent) {\n      navigate(`/${newActivePage}?view=split&right=${newSidePaneContent}`, { replace: true });\n    }\n  }, [bodyState, currentActivePage, sidePaneContent, navigate]);\n  \n  const closeSplitPane = useCallback((paneToClose: 'main' | 'right') => {\n    if (bodyState !== BODY_STATES.SPLIT_VIEW) return;\n    if (paneToClose === 'right') {\n      navigate(`/${currentActivePage}`, { replace: true });\n    } else { // Closing main pane\n      const pageToBecomeActive = Object.entries(pageToPaneMap).find(\n        ([, value]) => value === sidePaneContent\n      )?.[0] as ActivePage | undefined;\n      \n      if (pageToBecomeActive) {\n        navigate(`/${pageToBecomeActive}`, { replace: true });\n      } else {\n        navigate(`/dashboard`, { replace: true });\n      }\n    }\n  }, [bodyState, currentActivePage, sidePaneContent, navigate]);\n  \n  // DataDemo actions\n  const setViewMode = (mode: ViewMode) => handleParamsChange({ view: mode });\n  const setGroupBy = (val: string) => handleParamsChange({ groupBy: val === 'none' ? null : val }, true);\n  const setActiveGroupTab = (tab: string) => handleParamsChange({ tab: tab === 'all' ? null : tab });\n  const setFilters = (newFilters: FilterConfig) => {\n    handleParamsChange({ q: newFilters.searchTerm, status: newFilters.status, priority: newFilters.priority }, true);\n  }\n  const setSort = (config: SortConfig | null) => {\n    if (!config) {\n      handleParamsChange({ sort: 'default' }, true);\n    } else {\n      handleParamsChange({ sort: `${config.key}-${config.direction}` }, true);\n    }\n  }\n  const setTableSort = (field: SortableField) => {\n    let newSort: string | null = `${field}-desc`;\n    if (sortConfig?.key === field) {\n      if (sortConfig.direction === 'desc') newSort = `${field}-asc`;\n      else if (sortConfig.direction === 'asc') newSort = 'default';\n    }\n    handleParamsChange({ sort: newSort }, true);\n  };\n  const setPage = (newPage: number) => handleParamsChange({ page: newPage.toString() });\n\n\n  return useMemo(() => ({\n    // State\n    bodyState,\n    sidePaneContent,\n    currentActivePage,\n    itemId,\n    // DataDemo State\n    viewMode,\n    page,\n    groupBy,\n    activeGroupTab,\n    filters,\n    sortConfig,\n    // Actions\n    navigateTo,\n    openSidePane,\n    closeSidePane,\n    toggleSidePane,\n    toggleSplitView,\n    setNormalView,\n    switchSplitPanes,\n    closeSplitPane,\n    // DataDemo Actions\n    setViewMode,\n    setGroupBy,\n    setActiveGroupTab,\n    setFilters,\n    setSort,\n    setTableSort,\n    setPage,\n  }), [\n    bodyState, sidePaneContent, currentActivePage, itemId,\n    viewMode, page, groupBy, activeGroupTab, filters, sortConfig,\n    navigateTo, openSidePane, closeSidePane, toggleSidePane, toggleSplitView, setNormalView,\n    switchSplitPanes, closeSplitPane, setViewMode, setGroupBy, setActiveGroupTab, setFilters,\n    setSort, setTableSort, setPage\n  ]);\n}"
  src/pages/DataDemo/index.tsx: >
    import { useRef, useEffect } from 'react'

    import {
      Layers, 
      AlertTriangle, 
      PlayCircle, 
      TrendingUp,
      Loader2,
      ChevronsUpDown
    } from 'lucide-react'

    import { gsap } from 'gsap'

    import { cn } from '@/lib/utils'

    import { Button } from '@/components/ui/button'

    import { 
      DropdownMenu, 
      DropdownMenuContent, 
      DropdownMenuRadioGroup, 
      DropdownMenuRadioItem, 
      DropdownMenuTrigger 
    } from '@/components/ui/dropdown-menu'

    import { PageLayout } from '@/components/shared/PageLayout'

    import { DataListView } from './components/DataListView'

    import { DataCardView } from './components/DataCardView'

    import { DataTableView } from './components/DataTableView'

    import { DataViewModeSelector } from './components/DataViewModeSelector'

    import { AnimatedTabs } from '@/components/ui/animated-tabs'

    import { StatCard } from '@/components/shared/StatCard'

    import { AnimatedLoadingSkeleton } from
    './components/AnimatedLoadingSkeleton'

    import { DataToolbar } from './components/DataToolbar'

    import { mockDataItems } from './data/mockData'

    import type { GroupableField } from './types'

    import { useDataDemo, DataDemoProvider } from './context/DataDemoContext'


    type Stat = {
      title: string;
      value: string;
      icon: React.ReactNode;
      change: string;
      trend: 'up' | 'down';
      type?: 'card';
    };


    type ChartStat = {
      title: string;
      value: string;
      icon: React.ReactNode;
      change: string;
      trend: 'up' | 'down';
      type: 'chart';
      chartData: number[];
    };


    type StatItem = Stat | ChartStat;


    function DataDemoContent() {
      const {
        viewMode,
        groupBy,
        activeGroupTab,
        hasMore,
        isLoading,
        loaderRef,
        groupTabs,
        dataToRender,
        totalItemCount,
        isInitialLoading,
        setGroupBy,
        setActiveGroupTab,
      } = useDataDemo();

      const groupOptions: { id: GroupableField | 'none'; label: string }[] = [
        { id: 'none', label: 'None' }, { id: 'status', label: 'Status' }, { id: 'priority', label: 'Priority' }, { id: 'category', label: 'Category' }
      ]
      const statsRef = useRef<HTMLDivElement>(null)

      // Calculate stats from data
      const totalItems = mockDataItems.length
      const activeItems = mockDataItems.filter(item => item.status === 'active').length
      const highPriorityItems = mockDataItems.filter(item => item.priority === 'high' || item.priority === 'critical').length
      const avgCompletion = totalItems > 0 ? Math.round(
        mockDataItems.reduce((acc, item) => acc + item.metrics.completion, 0) / totalItems
      ) : 0

      const stats: StatItem[] = [
        {
          title: "Total Projects",
          value: totalItems.toString(),
          icon: <Layers className="w-5 h-5" />,
          change: "+5.2% this month",
          trend: "up" as const,
          type: 'chart',
          chartData: [120, 125, 122, 130, 135, 138, 142]
        },
        {
          title: "Active Projects",
          value: activeItems.toString(),
          icon: <PlayCircle className="w-5 h-5" />,
          change: "+2 this week", 
          trend: "up" as const,
          type: 'chart',
          chartData: [45, 50, 48, 55, 53, 60, 58]
        },
        {
          title: "High Priority",
          value: highPriorityItems.toString(),
          icon: <AlertTriangle className="w-5 h-5" />,
          change: "-1 from last week",
          trend: "down" as const,
          type: 'chart',
          chartData: [25, 26, 28, 27, 26, 24, 23]
        },
        {
          title: "Avg. Completion",
          value: `${avgCompletion}%`,
          icon: <TrendingUp className="w-5 h-5" />,
          change: "+3.2%",
          trend: "up" as const,
          type: 'chart',
          chartData: [65, 68, 70, 69, 72, 75, 78]
        }
      ]

      useEffect(() => {
        // Animate stats cards in
        if (!isInitialLoading && statsRef.current) {
          gsap.fromTo(statsRef.current.children,
            { y: 30, opacity: 0 },
            {
              duration: 0.6,
              y: 0,
              opacity: 1,
              stagger: 0.1,
              ease: "power2.out"
            }
          )
        }
      }, [isInitialLoading])

      return (
        <PageLayout
          // Note: Search functionality is handled by a separate SearchBar in the TopBar
        >
          <div className="space-y-8">
            {/* Header */}
            <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-4">
              <div className="flex-1">
                <h1 className="text-2xl font-bold tracking-tight">Data Showcase</h1>
                <p className="text-muted-foreground">
                  {isInitialLoading 
                    ? "Loading projects..." 
                    : `Showing ${dataToRender.length} of ${totalItemCount} item(s)`}
                </p>
              </div>
              <DataViewModeSelector />
            </div>

            {/* Stats Section */}
            {!isInitialLoading && (
              <div ref={statsRef} className="grid grid-cols-[repeat(auto-fit,minmax(250px,1fr))] gap-6">
                {stats.map((stat) => (
                  <StatCard
                    key={stat.title}
                    title={stat.title}
                    value={stat.value}
                    change={stat.change}
                    trend={stat.trend}
                    icon={stat.icon}
                    chartData={stat.type === 'chart' ? stat.chartData : undefined}
                  />
                ))}
              </div>
            )}

            {/* Controls Area */}
            <div className="space-y-6">
              <DataToolbar />
            </div>

            {/* Group by and Tabs section */}
            <div className={cn(
              "flex items-center justify-between gap-4",
              groupBy !== 'none' && "border-b"
            )}>
              {/* Tabs on the left, takes up available space */}
              <div className="flex-grow overflow-x-auto overflow-y-hidden no-scrollbar">
                {groupBy !== 'none' && groupTabs.length > 1 ? (
                  <AnimatedTabs
                    tabs={groupTabs}
                    activeTab={activeGroupTab}
                    onTabChange={setActiveGroupTab}
                  />
                ) : (
                  <div className="h-[68px]" /> // Placeholder for consistent height.
                )}
              </div>
              
              {/* Group by dropdown on the right */}
              <div className="flex items-center gap-2 shrink-0">
                <span className="text-sm font-medium text-muted-foreground shrink-0">Group by:</span>
                <DropdownMenu>
                  <DropdownMenuTrigger asChild>
                    <Button variant="outline" className="w-[180px] justify-between">
                      {groupOptions.find(o => o.id === groupBy)?.label}
                      <ChevronsUpDown className="ml-2 h-4 w-4 shrink-0 opacity-50" />
                    </Button>
                  </DropdownMenuTrigger>
                  <DropdownMenuContent className="w-[180px]">
                    <DropdownMenuRadioGroup value={groupBy} onValueChange={setGroupBy}>
                      {groupOptions.map(option => (
                        <DropdownMenuRadioItem key={option.id} value={option.id}>
                          {option.label}
                        </DropdownMenuRadioItem>
                      ))}
                    </DropdownMenuRadioGroup>
                  </DropdownMenuContent>
                </DropdownMenu>
              </div>
            </div>

            <div className="min-h-[500px]">
              {isInitialLoading ? <AnimatedLoadingSkeleton viewMode={viewMode} /> : (
                <div>
                  {viewMode === 'table' ? <DataTableView /> : (
                    <>
                      {viewMode === 'list' && <DataListView />}
                      {viewMode === 'cards' && <DataCardView />}
                      {viewMode === 'grid' && <DataCardView isGrid />}
                    </>
                  )}
                </div>
              )}
            </div>

            {/* Loader for infinite scroll */}
            <div ref={loaderRef} className="flex justify-center items-center py-6">
              {isLoading && !isInitialLoading && groupBy === 'none' && (
                <div className="flex items-center gap-2 text-muted-foreground">
                  <Loader2 className="w-5 h-5 animate-spin" />
                  <span>Loading more...</span>
                </div>
              )}
              {!isLoading && !hasMore && dataToRender.length > 0 && !isInitialLoading && groupBy === 'none' && (
                <p className="text-muted-foreground">You've reached the end.</p>
              )}
            </div>
          </div>
        </PageLayout>
      )
    }


    export default function DataDemoPage() {
      return (
        <DataDemoProvider>
          <DataDemoContent />
        </DataDemoProvider>
      );
    }
  src/pages/DataDemo/components/DataToolbar.tsx: >-
    import * as React from 'react'

    import { Check, ListFilter, Search, SortAsc } from 'lucide-react'


    import { cn } from '@/lib/utils'

    import { Button } from '@/components/ui/button'

    import { Input } from '@/components/ui/input'

    import { Badge } from '@/components/ui/badge'

    import { Popover, PopoverContent, PopoverTrigger } from
    '@/components/ui/popover'

    import {
      DropdownMenu,
      DropdownMenuContent,
      DropdownMenuRadioGroup,
      DropdownMenuRadioItem,
      DropdownMenuSeparator,
      DropdownMenuLabel,
      DropdownMenuTrigger,
    } from '@/components/ui/dropdown-menu'

    import {
      Command,
      CommandEmpty,
      CommandGroup,
      CommandInput,
      CommandItem,
      CommandList,
      CommandSeparator,
    } from '@/components/ui/command'


    import type { SortableField, Status, Priority } from '../types'

    import { useDataDemo } from '../context/DataDemoContext'


    export interface FilterConfig {
      searchTerm: string
      status: Status[]
      priority: Priority[]
    }


    const statusOptions: { value: Status; label: string }[] = [
      { value: 'active', label: 'Active' },
      { value: 'pending', label: 'Pending' },
      { value: 'completed', label: 'Completed' },
      { value: 'archived', label: 'Archived' },
    ]


    const priorityOptions: { value: Priority; label: string }[] = [
      { value: 'critical', label: 'Critical' },
      { value: 'high', label: 'High' },
      { value: 'medium', label: 'Medium' },
      { value: 'low', label: 'Low' },
    ]


    const sortOptions: { value: SortableField, label: string }[] = [
      { value: 'updatedAt', label: 'Last Updated' },
      { value: 'title', label: 'Title' },
      { value: 'status', label: 'Status' },
      { value: 'priority', label: 'Priority' },
      { value: 'metrics.completion', label: 'Progress' },
    ]



    export function DataToolbar() {
      const {
        filters,
        setFilters: onFiltersChange,
        sortConfig,
        setSort: onSortChange,
      } = useDataDemo();

      const handleSearchChange = (event: React.ChangeEvent<HTMLInputElement>) => {
        onFiltersChange({ ...filters, searchTerm: event.target.value })
      }
      
      const activeFilterCount = filters.status.length + filters.priority.length

      return (
        <div className="flex flex-col md:flex-row items-center justify-between gap-4 w-full">
          {/* Left side: Search, Filters */}
          <div className="flex flex-col sm:flex-row items-center gap-2 w-full md:w-auto">
            <div className="relative w-full sm:w-auto">
              <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground" />
              <Input
                placeholder="Search projects..."
                className="pl-9 w-full sm:w-64"
                value={filters.searchTerm}
                onChange={handleSearchChange}
              />
            </div>

            <Popover>
              <PopoverTrigger asChild>
                <Button variant="outline" size="sm" className="h-9 w-full sm:w-auto justify-start border-dashed">
                  <ListFilter className="mr-2 h-4 w-4" />
                  Filters
                  {activeFilterCount > 0 && (
                    <>
                      <div className="mx-2 h-4 w-px bg-muted-foreground/50" />
                      <Badge variant="secondary" className="rounded-sm px-1 font-normal">
                        {activeFilterCount}
                      </Badge>
                    </>
                  )}
                </Button>
              </PopoverTrigger>
              <PopoverContent className="w-[240px] p-0" align="start">
                <CombinedFilter filters={filters} onFiltersChange={onFiltersChange} />
              </PopoverContent>
            </Popover>

            {activeFilterCount > 0 && (
              <Button variant="ghost" onClick={() => onFiltersChange({ searchTerm: filters.searchTerm, status: [], priority: [] })}>Reset</Button>
            )}
          </div>

          {/* Right side: Sorter */}
          <div className="flex items-center gap-2 w-full md:w-auto justify-start md:justify-end">
            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <Button variant="outline" className="w-full sm:w-auto justify-start">
                  <SortAsc className="mr-2 h-4 w-4" />
                  Sort by: {sortOptions.find(o => o.value === sortConfig?.key)?.label || 'Default'}
                </Button>
              </DropdownMenuTrigger>
              <DropdownMenuContent align="end" className="w-[200px]">
                <DropdownMenuLabel>Sort by</DropdownMenuLabel>
                <DropdownMenuRadioGroup
                  value={`${sortConfig?.key || 'default'}-${sortConfig?.direction || ''}`}
                  onValueChange={(value) => {
                    if (value.startsWith('default')) {
                      onSortChange(null)
                    } else {
                      const [key, direction] = value.split('-')
                      onSortChange({ key: key as SortableField, direction: direction as 'asc' | 'desc' })
                    }
                  }}
                >
                  <DropdownMenuRadioItem value="default-">Default</DropdownMenuRadioItem>
                  <DropdownMenuSeparator />
                  {sortOptions.map(option => (
                    <React.Fragment key={option.value}>
                      <DropdownMenuRadioItem value={`${option.value}-desc`}>{option.label} (Desc)</DropdownMenuRadioItem>
                      <DropdownMenuRadioItem value={`${option.value}-asc`}>{option.label} (Asc)</DropdownMenuRadioItem>
                    </React.Fragment>
                  ))}
                </DropdownMenuRadioGroup>
              </DropdownMenuContent>
            </DropdownMenu>
          </div>
        </div>
      )
    }


    function CombinedFilter({
      filters,
      onFiltersChange,
    }: {
      filters: FilterConfig;
      onFiltersChange: (filters: FilterConfig) => void;
    }) {
      const selectedStatus = new Set(filters.status);
      const selectedPriority = new Set(filters.priority);

      const handleStatusSelect = (status: Status) => {
        selectedStatus.has(status) ? selectedStatus.delete(status) : selectedStatus.add(status);
        onFiltersChange({ ...filters, status: Array.from(selectedStatus) });
      };

      const handlePrioritySelect = (priority: Priority) => {
        selectedPriority.has(priority) ? selectedPriority.delete(priority) : selectedPriority.add(priority);
        onFiltersChange({ ...filters, priority: Array.from(selectedPriority) });
      };

      const hasActiveFilters = filters.status.length > 0 || filters.priority.length > 0;

      return (
        <Command>
          <CommandInput placeholder="Filter by..." />
          <CommandList>
            <CommandEmpty>No results found.</CommandEmpty>

            <CommandGroup heading="Status">
              {statusOptions.map((option) => {
                const isSelected = selectedStatus.has(option.value);
                return (
                  <CommandItem
                    key={option.value}
                    onSelect={() => handleStatusSelect(option.value)}
                  >
                    <div
                      className={cn(
                        'mr-2 flex h-4 w-4 items-center justify-center rounded-sm border border-primary',
                        isSelected ? 'bg-primary text-primary-foreground' : 'opacity-50 [&_svg]:invisible'
                      )}
                    >
                      <Check className={cn('h-4 w-4')} />
                    </div>
                    <span>{option.label}</span>
                  </CommandItem>
                );
              })}
            </CommandGroup>

            <CommandSeparator />

            <CommandGroup heading="Priority">
              {priorityOptions.map((option) => {
                const isSelected = selectedPriority.has(option.value);
                return (
                  <CommandItem
                    key={option.value}
                    onSelect={() => handlePrioritySelect(option.value)}
                  >
                    <div
                      className={cn(
                        'mr-2 flex h-4 w-4 items-center justify-center rounded-sm border border-primary',
                        isSelected ? 'bg-primary text-primary-foreground' : 'opacity-50 [&_svg]:invisible'
                      )}
                    >
                      <Check className={cn('h-4 w-4')} />
                    </div>
                    <span>{option.label}</span>
                  </CommandItem>
                );
              })}
            </CommandGroup>

            {hasActiveFilters && (
              <>
                <CommandSeparator />
                <CommandGroup>
                  <CommandItem
                    onSelect={() => onFiltersChange({ ...filters, status: [], priority: [] })}
                    className="justify-center text-center text-sm"
                  >
                    Clear filters
                  </CommandItem>
                </CommandGroup>
              </>
            )}
          </CommandList>
        </Command>
      )
    }
  src/pages/DataDemo/hooks/useDataManagement.hook.tsx: "import { useState, useRef, useEffect, useCallback, useMemo, ReactNode } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { capitalize, cn } from '@/lib/utils';\nimport { Badge } from '@/components/ui/badge';\nimport { mockDataItems } from '../data/mockData';\nimport type { DataItem, GroupableField } from '../types';\nimport { useAppViewManager } from '@/hooks/useAppViewManager.hook';\n\nexport function useDataManagement() {\n\tconst {\n\t\tviewMode,\n\t\tpage,\n\t\tgroupBy,\n\t\tactiveGroupTab,\n\t\tfilters,\n\t\tsortConfig,\n\t\titemId,\n\t\tsetPage,\n\t\tsetViewMode,\n\t\tsetGroupBy,\n\t\tsetActiveGroupTab,\n\t\tsetFilters,\n\t\tsetSort,\n\t\tsetTableSort,\n\t} = useAppViewManager();\n\tconst navigate = useNavigate();\n\n\tconst [items, setItems] = useState<DataItem[]>([]);\n\tconst [hasMore, setHasMore] = useState(true);\n\tconst [isLoading, setIsLoading] = useState(true);\n\tconst observer = useRef<IntersectionObserver>();\n\n\t// Centralized data filtering and sorting from the master list\n\tconst filteredAndSortedData = useMemo(() => {\n\t\tconst filteredItems = mockDataItems.filter((item) => {\n\t\t\tconst searchTermMatch =\n\t\t\t\titem.title.toLowerCase().includes(filters.searchTerm.toLowerCase()) ||\n\t\t\t\titem.description.toLowerCase().includes(filters.searchTerm.toLowerCase());\n\n\t\t\tconst statusMatch = filters.status.length === 0 || filters.status.includes(item.status);\n\t\t\tconst priorityMatch = filters.priority.length === 0 || filters.priority.includes(item.priority);\n\n\t\t\treturn searchTermMatch && statusMatch && priorityMatch;\n\t\t});\n\n\t\tif (sortConfig) {\n\t\t\tfilteredItems.sort((a, b) => {\n\t\t\t\tconst getNestedValue = (obj: DataItem, path: string): unknown => \n\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\t\t\t\t\tpath.split('.').reduce((o: any, k) => (o || {})[k], obj);\n\t\t\t\t\n\t\t\t\tconst aValue = getNestedValue(a, sortConfig.key);\n\t\t\t\tconst bValue = getNestedValue(b, sortConfig.key);\n\n\t\t\t\tif (aValue === undefined || bValue === undefined) return 0;\n\n\t\t\t\tif (typeof aValue === 'string' && typeof bValue === 'string') {\n\t\t\t\t\treturn sortConfig.direction === 'asc' ? aValue.localeCompare(bValue) : bValue.localeCompare(aValue);\n\t\t\t\t}\n\t\t\t\tif (typeof aValue === 'number' && typeof bValue === 'number') {\n\t\t\t\t\treturn sortConfig.direction === 'asc' ? aValue - bValue : bValue - aValue;\n\t\t\t\t}\n\t\t\t\t// Date sorting (assuming ISO strings)\n\t\t\t\tif (sortConfig.key === 'updatedAt' || sortConfig.key === 'createdAt') {\n          if (typeof aValue === 'string' && typeof bValue === 'string') {\n\t\t\t\t\t  return sortConfig.direction === 'asc'\n\t\t\t\t\t\t  ? new Date(aValue).getTime() - new Date(bValue).getTime()\n\t\t\t\t\t\t  : new Date(bValue).getTime() - new Date(aValue).getTime();\n          }\n        }\n\t\t\t\treturn 0;\n\t\t\t});\n\t\t}\n\n\t\treturn filteredItems;\n\t}, [filters, sortConfig]);\n\n\t// Data loading effect\n\tuseEffect(() => {\n\t\tsetIsLoading(true);\n\t\tconst isFirstPage = page === 1;\n\n\t\tconst loadData = () => {\n\t\t\tif (groupBy !== 'none') {\n\t\t\t\t// For grouped views, load all data at once, pagination is disabled.\n\t\t\t\tsetItems(filteredAndSortedData);\n\t\t\t\tsetHasMore(false);\n\t\t\t\tsetIsLoading(false);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Handle paginated view\n\t\t\tconst pageSize = 12;\n\t\t\tconst newItems = filteredAndSortedData.slice((page - 1) * pageSize, page * pageSize);\n\n\t\t\tsetTimeout(() => {\n\t\t\t\t// Double-check in case groupBy changed during the timeout\n\t\t\t\tif (groupBy === 'none') {\n\t\t\t\t\tsetItems((prev) => (isFirstPage ? newItems : [...prev, ...newItems]));\n\t\t\t\t\tsetHasMore(filteredAndSortedData.length > page * pageSize);\n\t\t\t\t\tsetIsLoading(false);\n\t\t\t\t}\n\t\t\t}, isFirstPage && items.length === 0 ? 1500 : 500); // Longer delay for initial skeleton\n\t\t};\n\n\t\tloadData();\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t}, [page, groupBy, filteredAndSortedData]);\n\n\tconst loaderRef = useCallback(\n\t\t(node: Element | null) => {\n\t\t\tif (isLoading) return;\n\t\t\tif (observer.current) observer.current.disconnect();\n\n\t\t\tobserver.current = new IntersectionObserver((entries) => {\n\t\t\t\tif (entries[0].isIntersecting && hasMore) {\n\t\t\t\t\t// Instead of setting local state, we update the URL, which triggers the data loading effect.\n\t\t\t\t\tsetPage(page + 1);\n\t\t\t\t}\n\t\t\t});\n\t\t\tif (node) observer.current.observe(node);\n\t\t},\n\t\t[isLoading, hasMore, page, setPage],\n\t);\n\n\tconst groupTabs = useMemo(() => {\n\t\tif (groupBy === 'none' || !filteredAndSortedData.length) return [];\n\n\t\tconst groupCounts = filteredAndSortedData.reduce((acc, item) => {\n\t\t\tconst groupKey = String(item[groupBy as GroupableField]);\n\t\t\tacc[groupKey] = (acc[groupKey] || 0) + 1;\n\t\t\treturn acc;\n\t\t}, {} as Record<string, number>);\n\n\t\tconst sortedGroups = Object.keys(groupCounts).sort((a, b) => a.localeCompare(b));\n\n\t\tconst createLabel = (text: string, count: number, isActive: boolean): ReactNode => (\n\t\t\t<>\n\t\t\t\t{text}\n\t\t\t\t<Badge\n\t\t\t\t\tvariant={isActive ? 'default' : 'secondary'}\n\t\t\t\t\tclassName={cn(\n\t\t\t\t\t\t'transition-colors duration-300 text-xs font-semibold',\n\t\t\t\t\t\t!isActive && 'group-hover:bg-accent group-hover:text-accent-foreground',\n\t\t\t\t\t)}\n\t\t\t\t>\n\t\t\t\t\t{count}\n\t\t\t\t</Badge>\n\t\t\t</>\n\t\t);\n\n\t\treturn [\n\t\t\t{ id: 'all', label: createLabel('All', filteredAndSortedData.length, activeGroupTab === 'all') },\n\t\t\t...sortedGroups.map((g) => ({\n\t\t\t\tid: g,\n\t\t\t\tlabel: createLabel(capitalize(g), groupCounts[g], activeGroupTab === g),\n\t\t\t})),\n\t\t];\n\t}, [filteredAndSortedData, groupBy, activeGroupTab]);\n\n\tconst selectedItem = useMemo(() => {\n\t\tif (!itemId) return null;\n\t\treturn mockDataItems.find(item => item.id === itemId) ?? null;\n\t}, [itemId]);\n\n\tconst onItemSelect = useCallback((item: DataItem) => {\n\t\tnavigate(`/data-demo/${item.id}`);\n\t}, [navigate]);\n\n\n\t// Data to be rendered in the current view, after grouping and tab selection is applied\n\tconst dataToRender = useMemo(() => {\n\t\tif (groupBy === 'none') {\n\t\t\treturn items; // This is the paginated list.\n\t\t}\n\n\t\t// When grouped, `items` contains ALL filtered/sorted data.\n\t\tif (activeGroupTab === 'all') {\n\t\t\treturn items;\n\t\t}\n\t\treturn items.filter((item) => String(item[groupBy as GroupableField]) === activeGroupTab);\n\t}, [items, groupBy, activeGroupTab]);\n\n\tconst totalItemCount = filteredAndSortedData.length;\n\tconst isInitialLoading = isLoading && items.length === 0;\n\n\treturn {\n\t\tviewMode,\n\t\tgroupBy,\n\t\tactiveGroupTab,\n\t\tfilters,\n\t\tsortConfig,\n\t\thasMore,\n\t\tisLoading,\n\t\tloaderRef,\n\t\tgroupTabs,\n\t\tdataToRender,\n\t\ttotalItemCount,\n\t\tisInitialLoading,\n\t\tselectedItem,\n\t\tonItemSelect,\n\t\tsetViewMode,\n\t\tsetGroupBy,\n\t\tsetActiveGroupTab,\n\t\tsetFilters,\n\t\tsetSort,\n\t\tsetTableSort,\n\t};\n}"
  src/pages/Notifications/index.tsx: >-
    import React from "react";

    import { Avatar, AvatarFallback, AvatarImage } from
    "@/components/ui/avatar";

    import { Badge } from "@/components/ui/badge";

    import { Button } from "@/components/ui/button";

    import { Card, CardContent, CardHeader } from "@/components/ui/card";

    import { Tabs, TabsList, TabsTrigger } from "@/components/ui/tabs";

    import { PageHeader } from "@/components/shared/PageHeader";

    import { useToast } from "@/components/ui/toast";

    import { PageLayout } from "@/components/shared/PageLayout";

    import { cn } from "@/lib/utils";

    import { 
      CheckCheck, 
      Download, 
      Settings, 
      Bell,
      MessageSquare,
      UserPlus,
      Mail,
      File as FileIcon,
      Heart,
      AtSign,
      ClipboardCheck,
      ShieldCheck,
    } from "lucide-react";



    type Notification = {
      id: number;
      type: string;
      user: {
        name: string;
        avatar: string;
        fallback: string;
      };
      action: string;
      target?: string;
      content?: string;
      timestamp: string;
      timeAgo: string;
      isRead: boolean;
      hasActions?: boolean;
      file?: {
        name: string;
        size: string;
        type: string;
      };
    };


    const initialNotifications: Array<Notification> = [
      {
        id: 1,
        type: "comment",
        user: { name: "Amélie", avatar: "https://api.dicebear.com/7.x/notionists/svg?seed=Amélie", fallback: "A" },
        action: "commented in",
        target: "Dashboard 2.0",
        content: "Really love this approach. I think this is the best solution for the document sync UX issue.",
        timestamp: "Friday 3:12 PM",
        timeAgo: "2 hours ago",
        isRead: false,
      },
      {
        id: 2,
        type: "follow",
        user: { name: "Sienna", avatar: "https://api.dicebear.com/7.x/notionists/svg?seed=Sienna", fallback: "S" },
        action: "followed you",
        timestamp: "Friday 3:04 PM",
        timeAgo: "2 hours ago",
        isRead: false,
      },
      {
        id: 3,
        type: "invitation",
        user: { name: "Ammar", avatar: "https://api.dicebear.com/7.x/notionists/svg?seed=Ammar", fallback: "A" },
        action: "invited you to",
        target: "Blog design",
        timestamp: "Friday 2:22 PM",
        timeAgo: "3 hours ago",
        isRead: true,
        hasActions: true,
      },
      {
        id: 4,
        type: "file_share",
        user: { name: "Mathilde", avatar: "https://api.dicebear.com/7.x/notionists/svg?seed=Mathilde", fallback: "M" },
        action: "shared a file in",
        target: "Dashboard 2.0",
        file: { name: "Prototype recording 01.mp4", size: "14 MB", type: "MP4" },
        timestamp: "Friday 1:40 PM",
        timeAgo: "4 hours ago",
        isRead: true,
      },
      {
        id: 5,
        type: "mention",
        user: { name: "James", avatar: "https://api.dicebear.com/7.x/notionists/svg?seed=James", fallback: "J" },
        action: "mentioned you in",
        target: "Project Alpha",
        content: "Hey @you, can you review the latest designs when you get a chance?",
        timestamp: "Thursday 11:30 AM",
        timeAgo: "1 day ago",
        isRead: true,
      },
      {
        id: 6,
        type: "like",
        user: { name: "Sofia", avatar: "https://api.dicebear.com/7.x/notionists/svg?seed=Sofia", fallback: "S" },
        action: "liked your comment in",
        target: "Team Meeting Notes",
        timestamp: "Thursday 9:15 AM",
        timeAgo: "1 day ago",
        isRead: true,
      },
      {
        id: 7,
        type: "task_assignment",
        user: { name: "Admin", avatar: "https://api.dicebear.com/7.x/bottts/svg?seed=Admin", fallback: "AD" },
        action: "assigned you a new task in",
        target: "Q3 Marketing",
        content: "Finalize the social media campaign assets.",
        timestamp: "Wednesday 5:00 PM",
        timeAgo: "2 days ago",
        isRead: true,
      },
      {
        id: 8,
        type: "system_update",
        user: { name: "System", avatar: "https://api.dicebear.com/7.x/shapes/svg?seed=System", fallback: "SYS" },
        action: "pushed a new update",
        content: "Version 2.1.0 is now live with improved performance and new features. Check out the release notes for more details.",
        timestamp: "Wednesday 9:00 AM",
        timeAgo: "2 days ago",
        isRead: true,
      },
      {
        id: 9,
        type: 'comment',
        user: { name: 'Elena', avatar: 'https://api.dicebear.com/7.x/notionists/svg?seed=Elena', fallback: 'E' },
        action: 'replied to your comment in',
        target: 'Dashboard 2.0',
        content: 'Thanks for the feedback! I\'ve updated the prototype.',
        timestamp: 'Tuesday 4:30 PM',
        timeAgo: '3 days ago',
        isRead: false,
      },
      {
        id: 10,
        type: 'invitation',
        user: { name: 'Carlos', avatar: 'https://api.dicebear.com/7.x/notionists/svg?seed=Carlos', fallback: 'C' },
        action: 'invited you to',
        target: 'API Integration',
        timestamp: 'Tuesday 10:00 AM',
        timeAgo: '3 days ago',
        isRead: true,
        hasActions: true,
      },
    ];


    const iconMap: { [key: string]: React.ElementType } = {
      comment: MessageSquare,
      follow: UserPlus,
      invitation: Mail,
      file_share: FileIcon,
      mention: AtSign,
      like: Heart,
      task_assignment: ClipboardCheck,
      system_update: ShieldCheck,
    };


    function NotificationItem({ notification, onMarkAsRead }: { notification:
    Notification; onMarkAsRead: (id: number) => void; }) {
      const Icon = iconMap[notification.type];

      return (
        <div className={cn(
          "group w-full p-4 hover:bg-accent/50 rounded-lg transition-colors duration-200"
        )}>
          <div className="flex gap-3">
            <div className="relative h-10 w-10 shrink-0">
              <Avatar className="h-10 w-10">
                <AvatarImage src={notification.user.avatar} alt={`${notification.user.name}'s profile picture`} />
                <AvatarFallback>{notification.user.fallback}</AvatarFallback>
              </Avatar>
              {Icon && (
                <div className="absolute -bottom-1 -right-1 flex h-5 w-5 items-center justify-center rounded-full border-2 border-card bg-background">
                  <Icon className={cn("h-3 w-3", notification.type === 'like' ? 'text-red-500 fill-current' : 'text-muted-foreground')} />
                </div>
              )}
            </div>

            <div className="flex flex-1 flex-col space-y-2">
              <div className="flex items-start justify-between">
                <div className="text-sm">
                  <span className="font-semibold">{notification.user.name}</span>
                  <span className="text-muted-foreground"> {notification.action} </span>
                  {notification.target && <span className="font-semibold">{notification.target}</span>}
                  <div className="mt-0.5 text-xs text-muted-foreground">{notification.timeAgo}</div>
                </div>
                <button
                  onClick={() => !notification.isRead && onMarkAsRead(notification.id)}
                  title={notification.isRead ? "Read" : "Mark as read"}
                  className={cn("size-2.5 rounded-full mt-1 shrink-0 transition-all duration-300",
                    notification.isRead ? 'bg-transparent' : 'bg-primary hover:scale-125 cursor-pointer'
                  )}
                ></button>
              </div>

              {notification.content && <div className="rounded-lg border bg-muted/50 p-3 text-sm">{notification.content}</div>}

              {notification.file && (
                <div className="flex items-center gap-2 rounded-lg bg-muted/50 p-2 border border-border">
                  <div className="shrink-0 w-10 h-10 flex items-center justify-center bg-background rounded-md border border-border">
                    <FileIcon className="w-5 h-5 text-muted-foreground" />
                  </div>
                  <div className="flex-1 min-w-0">
                    <div className="text-sm font-medium truncate">{notification.file.name}</div>
                    <div className="text-xs text-muted-foreground">{notification.file.type} • {notification.file.size}</div>
                  </div>
                  <Button variant="ghost" size="icon" className="size-8 shrink-0">
                    <Download className="w-4 h-4" />
                  </Button>
                </div>
              )}

              {notification.hasActions && (
                <div className="flex gap-2">
                  <Button variant="outline" size="sm">Decline</Button>
                  <Button size="sm">Accept</Button>
                </div>
              )}
            </div>
          </div>
        </div>
      );
    }


    export function NotificationsPage({ isInSidePane = false }: { isInSidePane?:
    boolean; }) {
      const [notifications, setNotifications] = React.useState<Notification[]>(initialNotifications);
      const [activeTab, setActiveTab] = React.useState<string>("all");
      const { show: showToast } = useToast();

      const handleMarkAsRead = (id: number) => {
        setNotifications(prev =>
          prev.map(n => (n.id === id ? { ...n, isRead: true } : n))
        );
      };

      const handleMarkAllAsRead = () => {
        const unreadCount = notifications.filter(n => !n.isRead).length;
        if (unreadCount === 0) {
          showToast({
            title: "Already up to date!",
            message: "You have no unread notifications.",
            variant: "default",
          });
          return;
        }
        setNotifications(prev => prev.map(n => ({ ...n, isRead: true })));
        showToast({
            title: "All Caught Up!",
            message: "All notifications have been marked as read.",
            variant: "success",
        });
      };

      const unreadCount = notifications.filter(n => !n.isRead).length;

      const verifiedNotifications = notifications.filter((n) => n.type === "follow" || n.type === "like");
      const mentionNotifications = notifications.filter((n) => n.type === "mention");

      const verifiedCount = verifiedNotifications.filter(n => !n.isRead).length;
      const mentionCount = mentionNotifications.filter(n => !n.isRead).length;

      const getFilteredNotifications = () => {
        switch (activeTab) {
          case "verified": return verifiedNotifications;
          case "mentions": return mentionNotifications;
          default: return notifications;
        }
      };

      const filteredNotifications = getFilteredNotifications();

      const content = (
        <Card className={cn("flex w-full flex-col shadow-none", isInSidePane ? "border-none" : "")}>
          <CardHeader className={cn(isInSidePane ? "p-4" : "p-6")}>
            <div className="flex items-center justify-between">
              <h3 className="text-lg font-semibold">
                Your notifications
              </h3>
              <div className="flex items-center gap-1">
                <Button variant="ghost" size="icon" className="size-8" onClick={handleMarkAllAsRead} title="Mark all as read">
                  <CheckCheck className="size-4 text-muted-foreground" />
                </Button>
                <Button variant="ghost" size="icon" className="size-8">
                  <Settings className="size-4 text-muted-foreground" />
                </Button>
              </div>
            </div>

            <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full flex-col justify-start mt-4">
              <TabsList className="gap-1.5">
                <TabsTrigger value="all" className="gap-1.5">
                  View all {unreadCount > 0 && <Badge variant="secondary" className="rounded-full">{unreadCount}</Badge>}
                </TabsTrigger>
                <TabsTrigger value="verified" className="gap-1.5">
                  Verified {verifiedCount > 0 && <Badge variant="secondary" className="rounded-full">{verifiedCount}</Badge>}
                </TabsTrigger>
                <TabsTrigger value="mentions" className="gap-1.5">
                  Mentions {mentionCount > 0 && <Badge variant="secondary" className="rounded-full">{mentionCount}</Badge>}
                </TabsTrigger>
              </TabsList>
            </Tabs>
          </CardHeader>

          <CardContent className={cn("h-full p-0", isInSidePane ? "px-2" : "px-6")}>
            <div className="space-y-2 divide-y divide-border">
              {filteredNotifications.length > 0 ? (
                filteredNotifications.map((notification) => (
                  <NotificationItem key={notification.id} notification={notification} onMarkAsRead={handleMarkAsRead} />
                ))
              ) : (
                <div className="flex flex-col items-center justify-center space-y-2.5 py-12 text-center">
                  <div className="rounded-full bg-muted p-4">
                    <Bell className="text-muted-foreground" />
                  </div>
                  <p className="text-sm font-medium text-muted-foreground">No notifications yet.</p>
                </div>
              )}
            </div>
          </CardContent>
        </Card>
      );

      return (
        <PageLayout isInSidePane={isInSidePane}>
          {!isInSidePane && (
            <PageHeader
              title="Notifications"
              description="Manage your notifications and stay up-to-date."
            />
          )}
          {content}
        </PageLayout>
      );
    }
  src/pages/DataDemo/components/DataListView.tsx: >-
    import { useRef } from 'react'

    import { cn } from '@/lib/utils'

    import { Badge } from '@/components/ui/badge'

    import { ArrowRight } from 'lucide-react'

    import type { DataItem } from '../types'

    import { useStaggeredAnimation } from
    '@/hooks/useStaggeredAnimation.motion.hook'

    import { EmptyState } from './EmptyState'

    import { useDataDemo } from '../context/DataDemoContext'

    import {
      AssigneeInfo,
      ItemMetrics,
      ItemProgressBar,
      ItemStatusBadge,
      ItemPriorityBadge,
      ItemDateInfo,
    } from './shared/DataItemParts'


    export function DataListView() {
      const { dataToRender: data, onItemSelect, selectedItem } = useDataDemo();
      const listRef = useRef<HTMLDivElement>(null)
      useStaggeredAnimation(listRef, [data], { mode: 'incremental', scale: 1, y: 30, stagger: 0.08, duration: 0.5 });

      const items = Array.isArray(data) ? data : [];
      if (items.length === 0) {
        return <EmptyState />
      }

      return (
        <div ref={listRef} className="space-y-4">
          {items.map((item: DataItem) => {
            const isSelected = selectedItem?.id === item.id
            
            return (
              <div
                key={item.id}
                onClick={() => onItemSelect(item)}
                className={cn(
                  "group relative overflow-hidden rounded-2xl border bg-card/50 backdrop-blur-sm transition-all duration-300 cursor-pointer",
                  "hover:bg-card/80 hover:shadow-lg hover:shadow-primary/5 hover:border-primary/20",
                  "active:scale-[0.99]",
                  isSelected && "ring-2 ring-primary/20 border-primary/30 bg-card/90"
                )}
              >
                <div className="p-6">
                  <div className="flex items-start gap-4">
                    {/* Thumbnail */}
                    <div className="flex-shrink-0">
                      <div className="w-14 h-14 bg-gradient-to-br from-primary/20 to-primary/10 rounded-xl flex items-center justify-center text-2xl">
                        {item.thumbnail}
                      </div>
                    </div>

                    {/* Content */}
                    <div className="flex-1 min-w-0">
                      <div className="flex items-start justify-between mb-3">
                        <div className="flex-1 min-w-0">
                          <h3 className="font-semibold text-lg mb-1 group-hover:text-primary transition-colors">
                            {item.title}
                          </h3>
                          <p className="text-muted-foreground text-sm mb-3 line-clamp-2">
                            {item.description}
                          </p>
                        </div>
                        <ArrowRight className="w-5 h-5 text-muted-foreground group-hover:text-primary group-hover:translate-x-1 transition-all duration-300 ml-4 flex-shrink-0" />
                      </div>

                      {/* Badges */}
                      <div className="flex items-center gap-2 mb-4">
                        <ItemStatusBadge status={item.status} />
                        <ItemPriorityBadge priority={item.priority} />
                        <Badge variant="outline" className="bg-accent/50">
                          {item.category}
                        </Badge>
                      </div>

                      {/* Meta info */}
                      <div className="flex items-center justify-between text-muted-foreground">
                        <div className="flex items-center gap-4">
                          {/* Assignee */}
                          <AssigneeInfo assignee={item.assignee} avatarClassName="w-7 h-7" />
                          {/* Date */}
                          <ItemDateInfo date={item.updatedAt} />
                        </div>

                        {/* Metrics */}
                        <ItemMetrics metrics={item.metrics} />
                      </div>

                      {/* Progress bar */}
                      <div className="mt-4"><ItemProgressBar completion={item.metrics.completion} /></div>
                    </div>
                  </div>
                </div>

                {/* Hover gradient overlay */}
                <div className="absolute inset-0 bg-gradient-to-r from-primary/5 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300 pointer-events-none" />
              </div>
            )
          })}
        </div>
      )
    }
  src/pages/DataDemo/components/DataTableView.tsx: >-
    import { useRef, useLayoutEffect, useMemo } from 'react'

    import { gsap } from 'gsap'

    import { cn } from '@/lib/utils'

    import { 
      ArrowUpDown, 
      ArrowUp, 
      ArrowDown,
      ExternalLink
    } from 'lucide-react'

    import type { DataItem, SortableField } from '../types'

    import { EmptyState } from './EmptyState'

    import { useDataDemo } from '../context/DataDemoContext'

    import { capitalize } from '@/lib/utils'

    import {
      AssigneeInfo,
      ItemMetrics,
      ItemStatusBadge,
      ItemPriorityBadge,
      ItemDateInfo,
      ItemProgressBar,
    } from './shared/DataItemParts'


    export function DataTableView() {
      const {
        dataToRender: data,
        onItemSelect,
        selectedItem,
        sortConfig,
        setTableSort: onSort,
        groupBy,
      } = useDataDemo();
      const tableRef = useRef<HTMLTableElement>(null)
      const animatedItemsCount = useRef(0)

      useLayoutEffect(() => {
        if (tableRef.current) {
          // Only select item rows for animation, not group headers
          const newItems = Array.from( 
            tableRef.current.querySelectorAll('tbody tr')
          ).filter(tr => !(tr as HTMLElement).dataset.groupHeader)
           .slice(animatedItemsCount.current);
          gsap.fromTo(newItems,
            { y: 20, opacity: 0 },
            {
              duration: 0.5,
              y: 0,
              opacity: 1,
              stagger: 0.05,
              ease: "power2.out",
            },
          );
          animatedItemsCount.current = data.length;
        }
      }, [data]);

      const SortIcon = ({ field }: { field: SortableField }) => {
        if (sortConfig?.key !== field) {
          return <ArrowUpDown className="w-4 h-4 opacity-50" />
        }
        if (sortConfig.direction === 'asc') {
          return <ArrowUp className="w-4 h-4 text-primary" />
        }
        if (sortConfig.direction === 'desc') {
          return <ArrowDown className="w-4 h-4 text-primary" />
        }
        return <ArrowUpDown className="w-4 h-4 opacity-50" />
      }

      const handleSortClick = (field: SortableField) => {
        onSort?.(field)
      }

      const groupedData = useMemo(() => {
        if (groupBy === 'none') return null;
        return (data as DataItem[]).reduce((acc, item) => {
          const groupKey = item[groupBy as 'status' | 'priority' | 'category'] || 'N/A';
          if (!acc[groupKey]) {
            acc[groupKey] = [];
          }
          acc[groupKey].push(item);
          return acc;
        }, {} as Record<string, DataItem[]>);
      }, [data, groupBy]);

      if (data.length === 0) {
        return <EmptyState />
      }

      return (
        <div className="relative overflow-hidden rounded-2xl border bg-card/50 backdrop-blur-sm">
          <div className="overflow-x-auto">
            <table ref={tableRef} className="w-full">
              <thead>
                <tr className="border-b border-border/50 bg-muted/20">
                  <th className="text-left p-4 font-semibold text-sm">
                    <button
                      onClick={() => handleSortClick('title')}
                      className="flex items-center gap-2 hover:text-primary transition-colors"
                    >
                      Project
                      <SortIcon field="title" />
                    </button>
                  </th>
                  <th className="text-left p-4 font-semibold text-sm">
                    <button
                      onClick={() => handleSortClick('status')}
                      className="flex items-center gap-2 hover:text-primary transition-colors"
                    >
                      Status
                      <SortIcon field="status" />
                    </button>
                  </th>
                  <th className="text-left p-4 font-semibold text-sm">
                    <button
                      onClick={() => handleSortClick('priority')}
                      className="flex items-center gap-2 hover:text-primary transition-colors"
                    >
                      Priority
                      <SortIcon field="priority" />
                    </button>
                  </th>
                  <th className="text-left p-4 font-semibold text-sm">
                    <button
                      onClick={() => handleSortClick('assignee.name')}
                      className="flex items-center gap-2 hover:text-primary transition-colors"
                    >
                      Assignee
                      <SortIcon field="assignee.name" />
                    </button>
                  </th>
                  <th className="text-left p-4 font-semibold text-sm">
                    <button
                      onClick={() => handleSortClick('metrics.completion')}
                      className="flex items-center gap-2 hover:text-primary transition-colors"
                    >
                      Progress
                      <SortIcon field="metrics.completion" />
                    </button>
                  </th>
                  <th className="text-left p-4 font-semibold text-sm">
                    <button
                      onClick={() => handleSortClick('metrics.views')}
                      className="flex items-center gap-2 hover:text-primary transition-colors"
                    >
                      Engagement
                      <SortIcon field="metrics.views" />
                    </button>
                  </th>
                  <th className="text-left p-4 font-semibold text-sm">Last Updated</th>
                  <th className="text-center p-4 font-semibold text-sm w-16">Actions</th>
                </tr>
              </thead>
              <tbody>
                {groupedData
                  ? Object.entries(groupedData).flatMap(([groupName, items]) => [
                      <tr key={groupName} data-group-header="true" className="sticky top-0 z-10">
                        <td colSpan={8} className="p-2 bg-muted/50 backdrop-blur-sm">
                          <div className="flex items-center gap-2">
                            <h3 className="font-semibold text-sm">{capitalize(groupName)}</h3>
                            <span className="text-xs px-2 py-0.5 bg-background rounded-full font-medium">{items.length}</span>
                          </div>
                        </td>
                      </tr>,
                      ...items.map(item => <TableRow key={item.id} item={item} isSelected={selectedItem?.id === item.id} onItemSelect={onItemSelect} />)
                    ])
                  : data.map(item => <TableRow key={item.id} item={item} isSelected={selectedItem?.id === item.id} onItemSelect={onItemSelect} />)
                }
              </tbody>
            </table>
          </div>
        </div>
      )
    }


    function TableRow({ item, isSelected, onItemSelect }: { item: DataItem;
    isSelected: boolean; onItemSelect: (item: DataItem) => void }) {
      return (
        <tr
          onClick={() => onItemSelect(item)}
          className={cn(
            "group border-b border-border/30 transition-all duration-200 cursor-pointer",
            "hover:bg-accent/20 hover:border-primary/20",
            isSelected && "bg-primary/5 border-primary/30"
          )}
        >
          {/* Project Column */}
          <td className="p-4">
            <div className="flex items-center gap-3">
              <div className="w-10 h-10 bg-gradient-to-br from-primary/20 to-primary/10 rounded-lg flex items-center justify-center text-lg flex-shrink-0">
                {item.thumbnail}
              </div>
              <div className="min-w-0 flex-1">
                <h4 className="font-medium group-hover:text-primary transition-colors truncate">
                  {item.title}
                </h4>
                <p className="text-sm text-muted-foreground truncate">
                  {item.category}
                </p>
              </div>
            </div>
          </td>

          {/* Status Column */}
          <td className="p-4">
            <ItemStatusBadge status={item.status} />
          </td>

          {/* Priority Column */}
          <td className="p-4">
            <ItemPriorityBadge priority={item.priority} />
          </td>

          {/* Assignee Column */}
          <td className="p-4">
            <AssigneeInfo assignee={item.assignee} />
          </td>

          {/* Progress Column */}
          {/* Note: This progress bar is custom for the table, so we don't use the shared component here. */}
          <td className="p-4">
            <ItemProgressBar completion={item.metrics.completion} showPercentage />
          </td>

          {/* Engagement Column */}
          <td className="p-4">
            <ItemMetrics metrics={item.metrics} />
          </td>

          {/* Date Column */}
          <td className="p-4">
            <ItemDateInfo date={item.updatedAt} />
          </td>

          {/* Actions Column */}
          <td className="p-4">
            <button 
              onClick={(e) => {
                e.stopPropagation()
                onItemSelect(item)
              }}
              className="flex items-center justify-center w-8 h-8 rounded-lg hover:bg-accent transition-colors"
              title="View details"
            >
              <ExternalLink className="w-4 h-4" />
            </button>
          </td>
        </tr>
      )
    }
  src/pages/DataDemo/components/DataViewModeSelector.tsx: |-
    import { useEffect, useRef, useState, useCallback } from 'react'
    import { gsap } from 'gsap'
    import { cn } from '@/lib/utils'
    import { List, Grid3X3, LayoutGrid, Table } from 'lucide-react'
    import type { ViewMode } from '../types'
    import { useDataDemo } from '../context/DataDemoContext'

    const viewModes = [
      { id: 'list' as ViewMode, label: 'List', icon: List, description: 'Compact list with details' },
      { id: 'cards' as ViewMode, label: 'Cards', icon: LayoutGrid, description: 'Rich card layout' },
      { id: 'grid' as ViewMode, label: 'Grid', icon: Grid3X3, description: 'Masonry grid view' },
      { id: 'table' as ViewMode, label: 'Table', icon: Table, description: 'Structured data table' }
    ]

    export function DataViewModeSelector() {
      const { viewMode, setViewMode: onChange } = useDataDemo();
      const indicatorRef = useRef<HTMLDivElement>(null)
      const containerRef = useRef<HTMLDivElement>(null)
      const [isExpanded, setIsExpanded] = useState(false)
      const [isTransitioning, setIsTransitioning] = useState(false)

      const updateIndicatorPosition = useCallback((immediate = false) => {
        if (!indicatorRef.current || !containerRef.current || isTransitioning) return

        const activeButton = containerRef.current.querySelector(`[data-mode="${viewMode}"]`) as HTMLElement
        if (!activeButton) return

        const containerRect = containerRef.current.getBoundingClientRect()
        const buttonRect = activeButton.getBoundingClientRect()
        
        const left = buttonRect.left - containerRect.left
        const width = buttonRect.width

        if (immediate) {
          // Set position immediately without animation for initial load
          gsap.set(indicatorRef.current, {
            x: left,
            width: width
          })
        } else {
          gsap.to(indicatorRef.current, {
            duration: 0.3,
            x: left,
            width: width,
            ease: "power2.out"
          })
        }
      }, [viewMode, isTransitioning])

      // Initial setup - set position immediately without animation
      useEffect(() => {
        const timer = setTimeout(() => {
          updateIndicatorPosition(true)
        }, 0)
        return () => clearTimeout(timer)
        // eslint-disable-next-line react-hooks/exhaustive-deps
      }, []) // Only run once on mount

      useEffect(() => {
        if (!isTransitioning) {
          updateIndicatorPosition()
        }
      }, [viewMode, isTransitioning, updateIndicatorPosition])

      const handleMouseEnter = () => {
        setIsTransitioning(true)
        setIsExpanded(true)
        
        // Wait for expand animation to complete
        setTimeout(() => {
          setIsTransitioning(false)
        }, 500)
      }

      const handleMouseLeave = () => {
        setIsTransitioning(true)
        setIsExpanded(false)
        
        // Wait for collapse animation to complete
        setTimeout(() => {
          setIsTransitioning(false)
        }, 500)
      }

      return (
        <div 
          ref={containerRef}
          onMouseEnter={handleMouseEnter}
          onMouseLeave={handleMouseLeave}
          className={cn(
            "relative flex items-center bg-card/50 backdrop-blur-sm border border-border/50 rounded-2xl p-1.5 shadow-lg transition-all duration-500 ease-out",
            "hover:shadow-xl hover:bg-card/70",
            isExpanded ? "gap-1" : "gap-0"
          )}
        >
          {/* Animated indicator */}
          <div
            ref={indicatorRef}
            className="absolute inset-y-1.5 bg-gradient-to-r from-primary/20 to-primary/10 border border-primary/20 rounded-xl transition-all duration-300"
            style={{ left: 0, width: 0 }}
          />
          
          {/* Mode buttons */}
          {viewModes.map((mode, index) => {
            const IconComponent = mode.icon
            const isActive = viewMode === mode.id
            
            return (
              <button
                key={mode.id}
                data-mode={mode.id}
                onClick={() => onChange(mode.id)}
                className={cn(
                  "relative flex items-center justify-center rounded-xl transition-all duration-500 ease-out group overflow-hidden",
                  "hover:bg-accent/20 active:scale-95",
                  isActive && "text-primary",
                  isExpanded ? "gap-3 px-4 py-2.5" : "gap-0 px-3 py-2.5"
                )}
                title={mode.description}
                style={{
                  transitionDelay: isExpanded ? `${index * 50}ms` : `${(viewModes.length - index - 1) * 30}ms`
                }}
              >
                <IconComponent className={cn(
                  "w-5 h-5 transition-all duration-300 flex-shrink-0",
                  isActive && "scale-110",
                  "group-hover:scale-105",
                  isExpanded ? "rotate-0" : "rotate-0"
                )} />
                
                {/* Label with smooth expand/collapse */}
                <div className={cn(
                  "overflow-hidden transition-all duration-500 ease-out",
                  isExpanded ? "max-w-[80px] opacity-100" : "max-w-0 opacity-0"
                )}>
                  <span className={cn(
                    "font-medium whitespace-nowrap transition-all duration-300",
                    isActive ? "text-primary" : "text-muted-foreground",
                    "group-hover:text-foreground"
                  )}>
                    {mode.label}
                  </span>
                </div>
              </button>
            )
          })}
        </div>
      )
    }
  src/pages/DataDemo/components/DataCardView.tsx: >-
    import { useRef } from 'react'

    import { cn } from '@/lib/utils'

    import { Badge } from '@/components/ui/badge'

    import { ArrowUpRight } from 'lucide-react'

    import type { DataItem } from '../types'

    import { useStaggeredAnimation } from
    '@/hooks/useStaggeredAnimation.motion.hook'

    import { EmptyState } from './EmptyState'

    import { useDataDemo } from '../context/DataDemoContext'

    import {
      AssigneeInfo,
      ItemMetrics,
      ItemProgressBar,
      ItemStatusBadge,
      ItemTags,
      ItemDateInfo,
    } from './shared/DataItemParts'


    export function DataCardView({ isGrid = false }: { isGrid?: boolean }) {
      const { dataToRender: data, onItemSelect, selectedItem } = useDataDemo();
      const containerRef = useRef<HTMLDivElement>(null)
      useStaggeredAnimation(containerRef, [data], { mode: 'incremental', y: 40 });

      const items = Array.isArray(data) ? data : [];
      if (items.length === 0) {
        return <EmptyState />
      }

      return (
        <div 
          ref={containerRef}
          className={cn(
            "gap-6",
            isGrid
              ? "grid grid-cols-[repeat(auto-fit,minmax(280px,1fr))]"
              : "grid grid-cols-[repeat(auto-fit,minmax(320px,1fr))]"
          )}
        >
          {items.map((item: DataItem) => {
            const isSelected = selectedItem?.id === item.id
            
            return (
              <div
                key={item.id}
                onClick={() => onItemSelect(item)}
                className={cn(
                  "group relative overflow-hidden rounded-3xl border bg-card/50 backdrop-blur-sm transition-all duration-500 cursor-pointer",
                  "hover:bg-card/80 hover:shadow-xl hover:shadow-primary/10 hover:border-primary/30 hover:-translate-y-2",
                  "active:scale-[0.98]",
                  isSelected && "ring-2 ring-primary/30 border-primary/40 bg-card/90 shadow-lg shadow-primary/20",
                )}
              >
                {/* Card Header with Thumbnail */}
                <div className="relative p-6 pb-4">
                  <div className="flex items-start justify-between mb-4">
                    <div className="w-16 h-16 bg-gradient-to-br from-primary/20 to-primary/10 rounded-2xl flex items-center justify-center text-3xl group-hover:scale-110 transition-transform duration-300">
                      {item.thumbnail}
                    </div>
                    <ArrowUpRight className="w-5 h-5 text-muted-foreground group-hover:text-primary group-hover:translate-x-1 group-hover:-translate-y-1 transition-all duration-300" />
                  </div>

                  {/* Priority indicator */}
                  <div className="absolute top-4 right-4">
                    <div className={cn(
                      "w-3 h-3 rounded-full",
                      item.priority === 'critical' && "bg-red-500",
                      item.priority === 'high' && "bg-orange-500",
                      item.priority === 'medium' && "bg-blue-500",
                      item.priority === 'low' && "bg-green-500"
                    )} />
                  </div>
                </div>

                {/* Card Content */}
                <div className="px-6 pb-6">
                  {/* Title and Description */}
                  <h3 className="font-semibold text-lg mb-2 group-hover:text-primary transition-colors line-clamp-2">
                    {item.title}
                  </h3>
                  <p className="text-muted-foreground text-sm mb-4 line-clamp-3">
                    {item.description}
                  </p>

                  {/* Status and Category */}
                  <div className="flex items-center gap-2 mb-4">
                    <ItemStatusBadge status={item.status} />
                    <Badge variant="outline" className="bg-accent/50 text-xs">
                      {item.category}
                    </Badge>
                  </div>

                  {/* Tags */}
                  <div className="mb-4"><ItemTags tags={item.tags} /></div>

                  {/* Progress */}
                  <div className="mb-4"><ItemProgressBar completion={item.metrics.completion} /></div>

                  {/* Assignee */}
                  <div className="mb-4"><AssigneeInfo assignee={item.assignee} /></div>

                  {/* Metrics */}
                  <div className="flex items-center justify-between text-xs text-muted-foreground">
                    <ItemMetrics metrics={item.metrics} />
                    <ItemDateInfo date={item.updatedAt} />
                  </div>
                </div>

                {/* Hover gradient overlay */}
                <div className="absolute inset-0 bg-gradient-to-br from-primary/5 via-transparent to-primary/5 opacity-0 group-hover:opacity-100 transition-opacity duration-500 pointer-events-none" />
                
                {/* Selection indicator */}
                {isSelected && (
                  <div className="absolute inset-0 bg-gradient-to-br from-primary/10 to-primary/5 pointer-events-none" />
                )}
              </div>
            )
          })}
        </div>
      )
    }
approved: true
linesAdded: null
linesRemoved: null
linesDifference: null
gitCommittedAt: null
status: committed
id: 276
