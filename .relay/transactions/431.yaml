uuid: 18b05611-d1d7-4c4f-94d7-42867f1b20e0
projectId: jeli-app-shell
createdAt: '2025-10-17T13:37:37.278Z'
gitCommitMsg: >-
  feat(messaging): Show search icon on thread hover

  This commit refines the floating search UI in the message thread.

  The search icon button is now hidden by default and will only appear when the
  user's mouse cursor is over the message area. Once the search input is
  activated, it remains visible until explicitly closed, ensuring a seamless
  user experience. This change further declutters the interface.
promptSummary: >-
  The user wants the floating search icon in the message thread to be hidden by
  default and only appear when the user hovers over the message thread area.
reasoning:
  - >-
    Got it. Hiding the search button until the user actively engages with the
    message area is a great way to declutter the interface. I'll make that
    adjustment.
  - >-
    The search icon will now only appear when you hover the mouse over the
    message thread. Once the search bar is opened, it will remain visible until
    you close it, even if you move the mouse away.
  - 'Here are the changes to `TaskDetail.tsx`:'
operations:
  - type: write
    path: src/pages/Messaging/components/TaskDetail.tsx
    content: |+
      --- src/pages/Messaging/components/TaskDetail.tsx
      +++ src/pages/Messaging/components/TaskDetail.tsx
      @@ -24,7 +24,8 @@
         const [isJourneyHovered, setIsJourneyHovered] = useState(false);
         const [isSearchVisible, setIsSearchVisible] = useState(false);
         const [searchTerm, setSearchTerm] = useState('');
         const searchInputRef = useRef<HTMLInputElement>(null);
      +  const [isHoveringThread, setIsHoveringThread] = useState(false);
       
         useLayoutEffect(() => {
           // On conversation change, scroll to the bottom of the message list.
      @@ -126,11 +127,17 @@
                   onRequestTakeover={handleRequestTakeover}
               />
             )}
      -      <div className="relative flex-1 overflow-hidden">
      +      <div
      +        className="relative flex-1 overflow-hidden"
      +        onMouseEnter={() => setIsHoveringThread(true)}
      +        onMouseLeave={() => setIsHoveringThread(false)}
      +      >
               <div className={cn(
                 "absolute top-4 right-4 z-10 transition-all duration-300",
      -          isJourneyHovered && "opacity-0 pointer-events-none"
      +          isJourneyHovered && "opacity-0 pointer-events-none",
      +          !isHoveringThread && !isSearchVisible && "opacity-0"
               )}>
                 <div className={cn(
                   "transition-opacity duration-300",

    patchStrategy: standard-diff
snapshot:
  src/pages/Messaging/components/TaskDetail.tsx: >-
    import React, { useRef, useEffect, useLayoutEffect, useState, useMemo } from
    'react';

    import { useParams } from 'react-router-dom';

    import { useMessagingStore } from '../store/messaging.store';

    import { ActivityFeed } from './ActivityFeed';

    import { Button } from '@/components/ui/button';

    import { Textarea } from '@/components/ui/textarea';

    import { Paperclip, Search, SendHorizontal, Smile, StickyNote, X } from
    'lucide-react';

    import { Tabs, TabsContent, TabsList, TabsTrigger } from
    "@/components/ui/tabs";

    import { Input } from '@/components/ui/input';

    import { TakeoverBanner } from './TakeoverBanner';

    import { useToast } from '@/components/ui/toast';

    import { gsap } from 'gsap';

    import { cn } from '@/lib/utils';

    import { useAppShellStore } from '@/store/appShell.store';

    import { JourneyScrollbar } from './JourneyScrollbar';



    export const TaskDetail: React.FC = () => {
      const { conversationId: taskId } = useParams<{ conversationId: string }>();
      const { show } = useToast();
      const { getTaskById, takeOverTask, requestAndSimulateTakeover } = useMessagingStore();
      const reducedMotion = useAppShellStore(s => s.reducedMotion);
      
      const task = taskId ? getTaskById(taskId) : undefined;

      // In a real app, this would come from the auth store
      const currentUserId = 'user-1'; 

      const scrollContainerRef = useRef<HTMLDivElement>(null);
      const isLocked = !!task?.activeHandlerId && task.activeHandlerId !== currentUserId;
      const inputAreaRef = useRef<HTMLDivElement>(null);
      const isFirstRender = useRef(true);
      const [isJourneyHovered, setIsJourneyHovered] = useState(false);
      const [isSearchVisible, setIsSearchVisible] = useState(false);
      const [searchTerm, setSearchTerm] = useState('');
      const searchInputRef = useRef<HTMLInputElement>(null);

      useLayoutEffect(() => {
        // On conversation change, scroll to the bottom of the message list.
        // This ensures the user sees the latest message and that the scrollbar
        // component has the correct scrollHeight to calculate its visibility.
        if (scrollContainerRef.current) {
          scrollContainerRef.current.scrollTop = scrollContainerRef.current.scrollHeight;
        }
      }, [taskId]);

      useEffect(() => {
        const handleKeyDown = (event: KeyboardEvent) => {
          if ((event.ctrlKey || event.metaKey) && event.key === 'f') {
            event.preventDefault();
            setIsSearchVisible(true);
          }
          if (event.key === 'Escape' && isSearchVisible) {
            setIsSearchVisible(false);
            setSearchTerm('');
          }
        };

        window.addEventListener('keydown', handleKeyDown);
        return () => {
          window.removeEventListener('keydown', handleKeyDown);
        };
      }, [isSearchVisible]);

      useEffect(() => {
        if (isSearchVisible) {
          // Timeout to allow for the element to be rendered and transitioned
          setTimeout(() => searchInputRef.current?.focus(), 50);
        }
      }, [isSearchVisible]);

      useEffect(() => {
        if (!inputAreaRef.current) return;

        const initialBorderWidth = '1px'; // from 'border-t'
        const initialPadding = '1rem';    // from 'p-4'

        const target = isLocked
          ? {
              y: 20,
              opacity: 0,
              maxHeight: 0,
              paddingTop: 0,
              paddingBottom: 0,
              borderTopWidth: 0,
              pointerEvents: 'none' as const,
            }
          : {
              y: 0,
              opacity: 1,
              maxHeight: 500, // Ample room for the input
              paddingTop: initialPadding,
              paddingBottom: initialPadding,
              borderTopWidth: initialBorderWidth,
              pointerEvents: 'auto' as const,
            };

        if (reducedMotion) {
          gsap.set(inputAreaRef.current, target);
          return;
        }
        
        if (isFirstRender.current) {
          gsap.set(inputAreaRef.current, target);
          isFirstRender.current = false;
        } else {
          gsap.to(inputAreaRef.current, {
            ...target,
            duration: 0.35,
            ease: 'power2.inOut',
          });
        }
      }, [isLocked, reducedMotion]);

      if (!taskId || !task) {
        return (
            <div className="h-full flex flex-col items-center justify-center p-6 bg-background">
                <p className="text-muted-foreground">Select a task to see its details.</p>
            </div>
        );
      }

      const journeyPoints = task.messages.filter(m => m.journeyPoint);

      const filteredMessages = useMemo(() => {
        if (!searchTerm) {
          return task.messages;
        }
        return task.messages.filter(msg => msg.text.toLowerCase().includes(searchTerm.toLowerCase()));
      }, [task.messages, searchTerm]);

      const handleDotClick = (messageId: string) => {
        const container = scrollContainerRef.current;
        if (!container) return;
        
        const element = container.querySelector(`[data-message-id="${messageId}"]`);
        
        if (element) {
          // Using 'center' to avoid the message being at the very top/bottom of the view
          element.scrollIntoView({ behavior: 'smooth', block: 'center' });
        }
      };

      const handleTakeOver = () => {
        takeOverTask(task.id, currentUserId);
        show({
            variant: 'success',
            title: 'Task Taken Over',
            message: `You are now handling the task from ${task.contact.name}.`
        });
      };

      const handleRequestTakeover = () => {
        requestAndSimulateTakeover(task.id, currentUserId);
        if (task.activeHandler) {
            show({
                variant: 'default',
                title: 'Request Sent',
                message: `A takeover request has been sent to ${task.activeHandler.name}.`
            });
        }
      };

      return (
        <div className="h-full flex flex-col bg-background overflow-hidden">
          {isLocked && task.activeHandler && (
            <TakeoverBanner
                activeHandler={task.activeHandler}
                isRequesting={!!task.takeoverRequested}
                onTakeOver={handleTakeOver}
                onRequestTakeover={handleRequestTakeover}
            />
          )}
          <div className="relative flex-1 overflow-hidden">
            <div className={cn(
              "absolute top-4 right-4 z-10 transition-all duration-300",
              isJourneyHovered && "opacity-0 pointer-events-none"
            )}>
              <div className={cn(
                "transition-opacity duration-300",
                isSearchVisible ? "opacity-0 pointer-events-none" : "opacity-100"
              )}>
                <Button
                  variant="outline"
                  size="icon"
                  className="rounded-full shadow-lg bg-background/80 backdrop-blur-sm"
                  onClick={() => setIsSearchVisible(true)}
                >
                  <Search className="w-4 h-4" />
                </Button>
              </div>
              <div className={cn(
                "absolute top-0 right-0 transition-all duration-300 w-64 origin-right",
                isSearchVisible ? "opacity-100 scale-x-100" : "opacity-0 scale-x-0 pointer-events-none"
              )}>
                <div className="relative w-full bg-background/80 backdrop-blur-sm rounded-full shadow-lg border">
                  <Search className="absolute left-3 top-1/2 -translate-y-1/2 w-4 h-4 text-muted-foreground" />
                  <Input
                    ref={searchInputRef}
                    placeholder="Search conversation..."
                    className="pl-9 pr-9 h-10 border-none bg-transparent focus-visible:ring-0 focus-visible:ring-offset-0"
                    value={searchTerm}
                    onChange={e => setSearchTerm(e.target.value)}
                  />
                  <Button
                    variant="ghost" size="icon" className="absolute right-1 top-1/2 -translate-y-1/2 h-8 w-8 rounded-full"
                    onClick={() => { setIsSearchVisible(false); setSearchTerm(''); }}>
                    <X className="w-4 h-4" />
                  </Button>
                </div>
              </div>
            </div>
            <div
              ref={scrollContainerRef}
              className={cn(
                "h-full overflow-y-auto pr-8 [&::-webkit-scrollbar]:hidden [-ms-overflow-style:none] [scrollbar-width:none]",
                "transition-all duration-200",
                isJourneyHovered && "blur-sm pointer-events-none"
              )}
            >
              <ActivityFeed messages={filteredMessages} contact={task.contact} searchTerm={searchTerm} />
            </div>
            {journeyPoints.length > 0 && (
                <JourneyScrollbar
                    scrollContainerRef={scrollContainerRef}
                    journeyPoints={journeyPoints}
                    onDotClick={handleDotClick}
                    onHoverChange={setIsJourneyHovered}
                    showAllTooltips={isJourneyHovered}
                />
            )}
          </div>

          {/* Input Form */}
          <div ref={inputAreaRef} className="p-4 border-t flex-shrink-0 bg-background/50">
            <Tabs defaultValue="comment" className="w-full" >
              <TabsList className="grid w-full grid-cols-2 mb-2">
                <TabsTrigger value="comment" disabled={isLocked}>Comment</TabsTrigger>
                <TabsTrigger value="note" disabled={isLocked}><StickyNote className="w-4 h-4 mr-2" />Internal Note</TabsTrigger>
              </TabsList>
              <TabsContent value="comment">
                 <div className="relative">
                    <Textarea placeholder={isLocked ? "Take over to reply..." : `Reply to ${task.contact.name}...`} className="pr-24 min-h-[52px]" disabled={isLocked} />
                    <div className="absolute right-2 top-2 flex items-center gap-1">
                        <Button variant="ghost" size="icon" className="rounded-full h-8 w-8" disabled={isLocked}><Smile className="w-4 h-4" /></Button>
                        <Button variant="ghost" size="icon" className="rounded-full h-8 w-8" disabled={isLocked}><Paperclip className="w-4 h-4" /></Button>
                        <Button size="icon" className="rounded-full h-8 w-8" disabled={isLocked}><SendHorizontal className="w-4 h-4" /></Button>
                    </div>
                </div>
              </TabsContent>
              <TabsContent value="note">
                <div className="relative">
                    <Textarea placeholder={isLocked ? "Take over to add a note..." : "Add an internal note..."} className="pr-24 min-h-[52px] bg-yellow-400/10 border-yellow-400/30 focus-visible:ring-yellow-500" disabled={isLocked} />
                    <div className="absolute right-2 top-2 flex items-center gap-1">
                        <Button size="icon" className="rounded-full h-8 w-8" disabled={isLocked}><SendHorizontal className="w-4 h-4" /></Button>
                    </div>
                </div>
              </TabsContent>
            </Tabs>
          </div>
        </div>
      );
    };
approved: true
linesAdded: null
linesRemoved: null
linesDifference: null
gitCommittedAt: null
status: committed
id: 431
