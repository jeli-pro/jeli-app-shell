uuid: c4400790-2646-444f-8ce6-a67b40974533
projectId: jeli-app-shell
createdAt: '2025-10-13T01:01:27.294Z'
gitCommitMsg: >-
  feat(DataDemo): implement global sorting and filtering

  - Centralized all data processing logic (sorting, filtering) into the main
  `DataDemoPage` component using `useMemo` for performance. - Created a new
  `DataToolbar` component to encapsulate all user controls, including search,
  multi-select filters for status and priority, and a sort dropdown. -
  Refactored `DataTableView` to be a controlled component, removing its internal
  sorting state. - Updated the infinite scroll mechanism to work with the
  processed (filtered and sorted) data, including resetting pagination when
  controls change. - All view modes now reflect the applied filters and sorting,
  providing a unified user experience.
promptSummary: >-
  I need to add global sorting and filtering capabilities to the Data Demo page
  that work across all view modes (list, cards, grid, table).
reasoning:
  - >-
    Here is the implementation for global sorting and filtering on the data demo
    page.
  - >-
    I'll start by updating the type definitions to support the new sorting and
    filtering states.
  - >-
    Next, I'll create a new `DataToolbar` component. This component will
    encapsulate all the user controls for searching, filtering, sorting, and
    changing the view mode, cleaning up the main page component.
  - >-
    Now I'll refactor the `DataTableView` to remove its internal sorting logic
    and make it a "dumb" component controlled by props.
  - >-
    Finally, I'll update the main `DataDemoPage` to centralize all data
    processing logic, manage the state for filters and sorting, and integrate
    the new `DataToolbar`.
operations:
  - type: write
    path: src/pages/DataDemo/types.ts
    content: >+
      --- src/pages/DataDemo/types.ts

      +++ src/pages/DataDemo/types.ts

      @@ -1,4 +1,11 @@
       export type ViewMode = 'list' | 'cards' | 'grid' | 'table'
      +

      +export type SortableField = 'title' | 'status' | 'priority' | 'updatedAt'
      | 'assignee.name' | 'metrics.views' | 'metrics.completion' | 'createdAt'

      +export type SortDirection = 'asc' | 'desc'

      +export interface SortConfig {

      +  key: SortableField

      +  direction: SortDirection

      +}
       
       export interface DataItem {
         id: string
      @@ -40,4 +47,12 @@
         onItemSelect: (item: DataItem) => void
         selectedItem: DataItem | null
         isGrid?: boolean
      +

      +  // Props for table view specifically

      +  sortConfig?: SortConfig | null

      +  onSort?: (field: SortableField) => void
       }
      +

      +export type Status = DataItem['status']

      +export type Priority = DataItem['priority']

      +

    patchStrategy: standard-diff
  - type: write
    path: src/pages/DataDemo/components/DataToolbar.tsx
    content: >-
      import * as React from 'react'

      import { Check, ListFilter, Search, SortAsc, X } from 'lucide-react'


      import { cn } from '@/lib/utils'

      import { Button } from '@/components/ui/button'

      import { Input } from '@/components/ui/input'

      import { Badge } from '@/components/ui/badge'

      import { Popover, PopoverContent, PopoverTrigger } from
      '@/components/ui/popover'

      import {
        DropdownMenu,
        DropdownMenuContent,
        DropdownMenuRadioGroup,
        DropdownMenuRadioItem,
        DropdownMenuSeparator,
        DropdownMenuLabel,
        DropdownMenuTrigger,
      } from '@/components/ui/dropdown-menu'

      import {
        Command,
        CommandEmpty,
        CommandGroup,
        CommandInput,
        CommandItem,
        CommandList,
        CommandSeparator,
      } from '@/components/ui/command'


      import { DataViewModeSelector } from './DataViewModeSelector'

      import type { ViewMode, SortConfig, SortableField, Status, Priority } from
      '../types'


      export interface FilterConfig {
        searchTerm: string
        status: Status[]
        priority: Priority[]
      }


      interface DataToolbarProps {
        viewMode: ViewMode
        onViewModeChange: (mode: ViewMode) => void
        filters: FilterConfig
        onFiltersChange: (filters: FilterConfig) => void
        sortConfig: SortConfig | null
        onSortChange: (config: SortConfig | null) => void
      }


      const statusOptions: { value: Status; label: string }[] = [
        { value: 'active', label: 'Active' },
        { value: 'pending', label: 'Pending' },
        { value: 'completed', label: 'Completed' },
        { value: 'archived', label: 'Archived' },
      ]


      const priorityOptions: { value: Priority; label: string }[] = [
        { value: 'critical', label: 'Critical' },
        { value: 'high', label: 'High' },
        { value: 'medium', label: 'Medium' },
        { value: 'low', label: 'Low' },
      ]


      const sortOptions: { value: SortableField, label: string }[] = [
        { value: 'updatedAt', label: 'Last Updated' },
        { value: 'title', label: 'Title' },
        { value: 'status', label: 'Status' },
        { value: 'priority', label: 'Priority' },
        { value: 'metrics.completion', label: 'Progress' },
      ]



      export function DataToolbar({
        viewMode,
        onViewModeChange,
        filters,
        onFiltersChange,
        sortConfig,
        onSortChange,
      }: DataToolbarProps) {
        const handleSearchChange = (event: React.ChangeEvent<HTMLInputElement>) => {
          onFiltersChange({ ...filters, searchTerm: event.target.value })
        }
        
        const activeFilterCount =
          (filters.status.length > 0 ? 1 : 0) +
          (filters.priority.length > 0 ? 1 : 0)

        return (
          <div className="flex flex-col md:flex-row items-center justify-between gap-4">
            {/* Left side: Search and Filters */}
            <div className="flex flex-col sm:flex-row items-center gap-2 w-full md:w-auto">
              <div className="relative w-full sm:w-auto">
                <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground" />
                <Input
                  placeholder="Search projects..."
                  className="pl-9 w-full sm:w-64"
                  value={filters.searchTerm}
                  onChange={handleSearchChange}
                />
              </div>

              {/* Status Filter */}
              <MultiSelectFilter
                title="Status"
                options={statusOptions}
                selected={filters.status}
                onChange={(selected) => onFiltersChange({ ...filters, status: selected as Status[] })}
              />

              {/* Priority Filter */}
              <MultiSelectFilter
                title="Priority"
                options={priorityOptions}
                selected={filters.priority}
                onChange={(selected) => onFiltersChange({ ...filters, priority: selected as Priority[] })}
              />

              {activeFilterCount > 0 && (
                <Button
                  variant="ghost"
                  onClick={() => onFiltersChange({ searchTerm: filters.searchTerm, status: [], priority: [] })}
                  className="h-9 px-2 lg:px-3"
                >
                  Reset
                  <X className="ml-2 h-4 w-4" />
                </Button>
              )}
            </div>

            {/* Right side: Sorter and View Mode */}
            <div className="flex items-center gap-2 w-full md:w-auto justify-end">
              <DropdownMenu>
                <DropdownMenuTrigger asChild>
                  <Button variant="outline" className="w-full sm:w-auto justify-start">
                    <SortAsc className="mr-2 h-4 w-4" />
                    Sort by: {sortOptions.find(o => o.value === sortConfig?.key)?.label || 'Default'}
                  </Button>
                </DropdownMenuTrigger>
                <DropdownMenuContent align="end" className="w-[200px]">
                  <DropdownMenuLabel>Sort by</DropdownMenuLabel>
                  <DropdownMenuRadioGroup
                    value={`${sortConfig?.key || 'default'}-${sortConfig?.direction || ''}`}
                    onValueChange={(value) => {
                      if (value.startsWith('default')) {
                        onSortChange(null)
                      } else {
                        const [key, direction] = value.split('-')
                        onSortChange({ key: key as SortableField, direction: direction as 'asc' | 'desc' })
                      }
                    }}
                  >
                    <DropdownMenuRadioItem value="default-">Default</DropdownMenuRadioItem>
                    <DropdownMenuSeparator />
                    {sortOptions.map(option => (
                      <React.Fragment key={option.value}>
                        <DropdownMenuRadioItem value={`${option.value}-desc`}>{option.label} (Desc)</DropdownMenuRadioItem>
                        <DropdownMenuRadioItem value={`${option.value}-asc`}>{option.label} (Asc)</DropdownMenuRadioItem>
                      </React.Fragment>
                    ))}
                  </DropdownMenuRadioGroup>
                </DropdownMenuContent>
              </DropdownMenu>

              <DataViewModeSelector viewMode={viewMode} onChange={onViewModeChange} />
            </div>
          </div>
        )
      }


      function MultiSelectFilter({
        title,
        options,
        selected,
        onChange,
      }: {
        title: string
        options: { value: string; label: string }[]
        selected: string[]
        onChange: (selected: string[]) => void
      }) {
        const selectedSet = new Set(selected)

        return (
          <Popover>
            <PopoverTrigger asChild>
              <Button variant="outline" size="sm" className="h-9 w-full sm:w-auto justify-start border-dashed">
                <ListFilter className="mr-2 h-4 w-4" />
                {title}
                {selected.length > 0 && (
                  <>
                    <div className="mx-2 h-4 w-px bg-muted-foreground/50" />
                    <Badge variant="secondary" className="rounded-sm px-1 font-normal">
                      {selected.length}
                    </Badge>
                  </>
                )}
              </Button>
            </PopoverTrigger>
            <PopoverContent className="w-[220px] p-0" align="start">
              <Command>
                <CommandInput placeholder={`Filter ${title.toLowerCase()}...`} />
                <CommandList>
                  <CommandEmpty>No results found.</CommandEmpty>
                  <CommandGroup>
                    {options.map((option) => {
                      const isSelected = selectedSet.has(option.value)
                      return (
                        <CommandItem
                          key={option.value}
                          onSelect={() => {
                            if (isSelected) {
                              selectedSet.delete(option.value)
                            } else {
                              selectedSet.add(option.value)
                            }
                            onChange(Array.from(selectedSet))
                          }}
                        >
                          <div
                            className={cn(
                              'mr-2 flex h-4 w-4 items-center justify-center rounded-sm border border-primary',
                              isSelected ? 'bg-primary text-primary-foreground' : 'opacity-50 [&_svg]:invisible'
                            )}
                          >
                            <Check className={cn('h-4 w-4')} />
                          </div>
                          <span>{option.label}</span>
                        </CommandItem>
                      )
                    })}
                  </CommandGroup>
                  {selected.length > 0 && (
                    <>
                      <CommandSeparator />
                      <CommandGroup>
                        <CommandItem
                          onSelect={() => onChange([])}
                          className="justify-center text-center"
                        >
                          Clear filters
                        </CommandItem>
                      </CommandGroup>
                    </>
                  )}
                </CommandList>
              </Command>
            </PopoverContent>
          </Popover>
        )
      }
    patchStrategy: replace
  - type: write
    path: src/pages/DataDemo/components/DataTableView.tsx
    content: >+
      --- src/pages/DataDemo/components/DataTableView.tsx

      +++ src/pages/DataDemo/components/DataTableView.tsx

      @@ -11,16 +11,10 @@
         MoreHorizontal,
         ExternalLink
       } from 'lucide-react'
      -import type { ViewProps, DataItem } from '../types'

      +import type { ViewProps, DataItem, SortableField } from '../types'
       import { getStatusColor, getPriorityColor } from '../utils'
       import { EmptyState } from './EmptyState'
       
      -type SortField = keyof DataItem | 'assignee.name' | 'metrics.views' |
      'metrics.completion'

      -type SortDirection = 'asc' | 'desc' | null

      -

      -export function DataTableView({ data, onItemSelect, selectedItem }:
      ViewProps) {

      -  const [sortField, setSortField] = useState<SortField | null>(null)

      -  const [sortDirection, setSortDirection] = useState<SortDirection>(null)

      +export function DataTableView({ data, onItemSelect, selectedItem,
      sortConfig, onSort }: ViewProps) {
         const tableRef = useRef<HTMLTableElement>(null)
         const animatedItemsCount = useRef(0)
       
      @@ -43,65 +37,23 @@
           }
         }, [data]);
       
      -  const handleSort = (field: SortField) => {

      -    if (sortField === field) {

      -      setSortDirection(prev => 

      -        prev === 'asc' ? 'desc' : prev === 'desc' ? null : 'asc'

      -      )

      -      if (sortDirection === 'desc') {

      -        setSortField(null)

      -      }

      -    } else {

      -      setSortField(field)

      -      setSortDirection('asc')

      -    }

      -  }

      -

      -  const getSortedData = () => {

      -    if (!sortField || !sortDirection) return data

      -

      -    return [...data].sort((a, b) => {

      -      let aValue: any

      -      let bValue: any

      -

      -      if (sortField === 'assignee.name') {

      -        aValue = a.assignee.name

      -        bValue = b.assignee.name

      -      } else if (sortField === 'metrics.views') {

      -        aValue = a.metrics.views

      -        bValue = b.metrics.views

      -      } else if (sortField === 'metrics.completion') {

      -        aValue = a.metrics.completion

      -        bValue = b.metrics.completion

      -      } else {

      -        aValue = a[sortField as keyof DataItem]

      -        bValue = b[sortField as keyof DataItem]

      -      }

      -

      -      if (typeof aValue === 'string' && typeof bValue === 'string') {

      -        return sortDirection === 'asc' 

      -          ? aValue.localeCompare(bValue)

      -          : bValue.localeCompare(aValue)

      -      }

      -

      -      if (typeof aValue === 'number' && typeof bValue === 'number') {

      -        return sortDirection === 'asc' ? aValue - bValue : bValue -
      aValue

      -      }

      -

      -      return 0

      -    })

      -  }

      -

      -  const SortIcon = ({ field }: { field: SortField }) => {

      -    if (sortField !== field) {

      +  const SortIcon = ({ field }: { field: SortableField }) => {

      +    if (sortConfig?.key !== field) {
             return <ArrowUpDown className="w-4 h-4 opacity-50" />
           }
      -    if (sortDirection === 'asc') {

      +    if (sortConfig.direction === 'asc') {
             return <ArrowUp className="w-4 h-4 text-primary" />
           }
      -    if (sortDirection === 'desc') {

      +    if (sortConfig.direction === 'desc') {
             return <ArrowDown className="w-4 h-4 text-primary" />
           }
           return <ArrowUpDown className="w-4 h-4 opacity-50" />
         }
       
      -  const sortedData = getSortedData()

      +  const handleSortClick = (field: SortableField) => {

      +    onSort?.(field)

      +  }
       
         if (data.length === 0) {
           return <EmptyState />
      @@ -115,59 +67,59 @@
                   <tr className="border-b border-border/50 bg-muted/20">
                     <th className="text-left p-4 font-semibold text-sm">
                       <button
      -                  onClick={() => handleSort('title')}

      +                  onClick={() => handleSortClick('title')}
                         className="flex items-center gap-2 hover:text-primary transition-colors"
                       >
                         Project
                         <SortIcon field="title" />
                       </button>
                     </th>
                     <th className="text-left p-4 font-semibold text-sm">
                       <button
      -                  onClick={() => handleSort('status')}

      +                  onClick={() => handleSortClick('status')}
                         className="flex items-center gap-2 hover:text-primary transition-colors"
                       >
                         Status
                         <SortIcon field="status" />
                       </button>
                     </th>
                     <th className="text-left p-4 font-semibold text-sm">
                       <button
      -                  onClick={() => handleSort('priority')}

      +                  onClick={() => handleSortClick('priority')}
                         className="flex items-center gap-2 hover:text-primary transition-colors"
                       >
                         Priority
                         <SortIcon field="priority" />
                       </button>
                     </th>
                     <th className="text-left p-4 font-semibold text-sm">
                       <button
      -                  onClick={() => handleSort('assignee.name')}

      +                  onClick={() => handleSortClick('assignee.name')}
                         className="flex items-center gap-2 hover:text-primary transition-colors"
                       >
                         Assignee
                         <SortIcon field="assignee.name" />
                       </button>
                     </th>
                     <th className="text-left p-4 font-semibold text-sm">
                       <button
      -                  onClick={() => handleSort('metrics.completion')}

      +                  onClick={() => handleSortClick('metrics.completion')}
                         className="flex items-center gap-2 hover:text-primary transition-colors"
                       >
                         Progress
                         <SortIcon field="metrics.completion" />
                       </button>
                     </th>
                     <th className="text-left p-4 font-semibold text-sm">
                       <button
      -                  onClick={() => handleSort('metrics.views')}

      +                  onClick={() => handleSortClick('metrics.views')}
                         className="flex items-center gap-2 hover:text-primary transition-colors"
                       >
                         Engagement
                         <SortIcon field="metrics.views" />
                       </button>
                     </th>
      -              <th className="text-left p-4 font-semibold
      text-sm">Date</th>

      +              <th className="text-left p-4 font-semibold text-sm">Last
      Updated</th>
                     <th className="text-center p-4 font-semibold text-sm w-16">Actions</th>
                   </tr>
                 </thead>
                 <tbody>
      -            {sortedData.map((item, index) => {

      +            {data.map((item) => {
                     const isSelected = selectedItem?.id === item.id
                     
                     return (

    patchStrategy: standard-diff
  - type: write
    path: src/pages/DataDemo/index.tsx
    content: >+
      --- src/pages/DataDemo/index.tsx

      +++ src/pages/DataDemo/index.tsx

      @@ -1,4 +1,4 @@

      -import { useState, useRef, useEffect, useCallback } from 'react'

      +import { useState, useRef, useEffect, useCallback, useMemo } from 'react'
       import { 
         Layers, 
         AlertTriangle, 
      @@ -7,16 +7,14 @@
         Loader2
       } from 'lucide-react'
       import { gsap } from 'gsap'
      -import { cn } from '@/lib/utils'
       import { PageLayout } from '@/components/shared/PageLayout'
      -import { DataViewModeSelector } from './components/DataViewModeSelector'
       import { DataListView } from './components/DataListView'
       import { DataCardView } from './components/DataCardView'
       import { DataTableView } from './components/DataTableView'
       import { DataDetailPanel } from './components/DataDetailPanel'
       import { AnimatedLoadingSkeleton } from './components/AnimatedLoadingSkeleton'
       import { StatChartCard } from './components/StatChartCard'
      +import { DataToolbar, FilterConfig } from './components/DataToolbar'
       import { useAppShell } from '@/context/AppShellContext'
       import { mockDataItems } from './data/mockData'
      -import { Card } from '@/components/ui/card'

      -import type { DataItem, ViewMode } from './types'

      +import type { DataItem, ViewMode, SortConfig, SortableField } from
      './types'
       
       type Stat = {
         title: string;
      @@ -40,6 +38,12 @@
       
       export default function DataDemoPage() {
         const [viewMode, setViewMode] = useState<ViewMode>('list')
      +  const [filters, setFilters] = useState<FilterConfig>({

      +    searchTerm: '',

      +    status: [],

      +    priority: [],

      +  })

      +  const [sortConfig, setSortConfig] = useState<SortConfig | null>({ key:
      'updatedAt', direction: 'desc' })
         const [selectedItem, setSelectedItem] = useState<DataItem | null>(null)  
         const [items, setItems] = useState<DataItem[]>([])
         const [page, setPage] = useState(0) // Start at 0 to trigger initial load effect
      @@ -51,6 +55,52 @@
       
         const isInitialLoading = isLoading && items.length === 0
       
      +  // Centralized data processing

      +  const processedData = useMemo(() => {

      +    let filteredItems = mockDataItems.filter(item => {

      +      const searchTermMatch =

      +       
      item.title.toLowerCase().includes(filters.searchTerm.toLowerCase()) ||

      +       
      item.description.toLowerCase().includes(filters.searchTerm.toLowerCase())

      +

      +      const statusMatch = filters.status.length === 0 ||
      filters.status.includes(item.status)

      +      const priorityMatch = filters.priority.length === 0 ||
      filters.priority.includes(item.priority)

      +

      +      return searchTermMatch && statusMatch && priorityMatch

      +    })

      +

      +    if (sortConfig) {

      +      filteredItems.sort((a, b) => {

      +        let aValue: any

      +        let bValue: any

      +

      +        const getNestedValue = (obj: any, path: string) =>
      path.split('.').reduce((o, k) => (o || {})[k], obj)

      +

      +        aValue = getNestedValue(a, sortConfig.key)

      +        bValue = getNestedValue(b, sortConfig.key)

      +

      +        if (aValue === undefined || bValue === undefined) return 0;

      +

      +        if (typeof aValue === 'string' && typeof bValue === 'string') {

      +          return sortConfig.direction === 'asc'

      +            ? aValue.localeCompare(bValue)

      +            : bValue.localeCompare(aValue)

      +        }

      +        if (typeof aValue === 'number' && typeof bValue === 'number') {

      +          return sortConfig.direction === 'asc' ? aValue - bValue :
      bValue - aValue

      +        }

      +        // Date sorting (assuming ISO strings)

      +        if (sortConfig.key === 'updatedAt' || sortConfig.key ===
      'createdAt') {

      +            return sortConfig.direction === 'asc'

      +                ? new Date(aValue).getTime() - new Date(aValue).getTime()

      +                : new Date(bValue).getTime() - new Date(bValue).getTime()

      +        }

      +        return 0

      +      })

      +    }

      +    return filteredItems

      +  }, [filters, sortConfig])

      +
         // Calculate stats from data
         const totalItems = mockDataItems.length
         const activeItems = mockDataItems.filter(item => item.status === 'active').length
      @@ -60,25 +110,32 @@
           mockDataItems.reduce((acc, item) => acc + item.metrics.completion, 0) / totalItems
         ) : 0
       
      +  // Reset pagination when filters or sort change

      +  useEffect(() => {

      +    setItems([])

      +    setPage(0) // This will be incremented to 1 in the loader
      `useEffect`, triggering a fresh load

      +    setHasMore(true)

      +    // This timeout helps prevent a flicker between old and new filtered
      data

      +    setTimeout(() => setPage(1), 50)

      +  }, [processedData])

      +
         // Infinite scroll logic
         useEffect(() => { // eslint-disable-line react-hooks/exhaustive-deps
           if (page === 0) return;
       
      -    const fetchItems = async () => {

      +    const fetchItems = () => {
             setIsLoading(true);
      -      // Add a longer delay for the initial load to showcase the skeleton

      -      const delay = page === 1 ? 1500 : 500

      -      await new Promise(resolve => setTimeout(resolve, delay)); //
      Simulate network delay

      +      const isFirstPage = page === 1
             
             const pageSize = 12;
      -      const newItems = mockDataItems.slice((page - 1) * pageSize, page *
      pageSize);

      +      const newItems = processedData.slice((page - 1) * pageSize, page *
      pageSize);
             
      -      if (newItems.length > 0) {

      -        setItems(prev => [...prev, ...newItems]);

      -      }

      -      if (items.length + newItems.length >= mockDataItems.length) {

      -        setHasMore(false);

      -      }

      -      setIsLoading(false);

      +      // Simulate network delay, longer for initial load to showcase
      skeleton

      +      setTimeout(() => {

      +        setItems(prev => (isFirstPage ? newItems : [...prev,
      ...newItems]))

      +        setHasMore(processedData.length > page * pageSize)

      +        setIsLoading(false)

      +      }, isFirstPage && items.length === 0 ? 1500 : 500)
           };
       
           if (hasMore) fetchItems();
      @@ -150,11 +207,30 @@
           }
         }, [isInitialLoading])
       
      -  useEffect(() => {

      -    // Initial load by setting page to 1

      -    setPage(1);

      -  }, []);

      +  const handleSortChange = (config: SortConfig | null) => {

      +    setSortConfig(config)

      +  }
       
      +  // For table view header clicks

      +  const handleTableSort = (field: SortableField) => {

      +    if (sortConfig?.key === field) {

      +      if (sortConfig.direction === 'desc') {

      +        // Cycle: desc -> asc

      +        setSortConfig({ key: field, direction: 'asc' })

      +      } else {

      +        // Cycle: asc -> default

      +        setSortConfig(null)

      +      }

      +    } else {

      +      // New field, default to desc

      +      setSortConfig({ key: field, direction: 'desc' })

      +    }

      +  }

      +

      +  const handleFilterChange = (newFilters: FilterConfig) => {

      +    setFilters(newFilters)

      +  }

      +  
         // Handle item selection and open side panel
         const handleItemSelect = (item: DataItem) => {
           setSelectedItem(item)
      @@ -165,7 +241,9 @@
           const commonProps = {
             data: items,
             onItemSelect: handleItemSelect,
      -      selectedItem

      +      selectedItem,

      +      sortConfig,

      +      onSort: handleTableSort,
           }
       
           switch (viewMode) {
      @@ -192,13 +270,15 @@
                   <p className="text-muted-foreground">
                     {isInitialLoading 
                       ? "Loading projects..." 
      -                : `Showing ${items.length} of ${mockDataItems.length}
      items`}

      +                : `Showing ${processedData.length} item(s)`}
                   </p>
                 </div>
      -          <DataViewModeSelector 

      -            viewMode={viewMode} 

      -            onChange={setViewMode}

      -          />

      +        </div>

      +        <div className="flex flex-col md:flex-row md:items-center
      md:justify-between gap-4">

      +          <DataToolbar 

      +            viewMode={viewMode} onViewModeChange={setViewMode}

      +            filters={filters} onFiltersChange={handleFilterChange}

      +            sortConfig={sortConfig} onSortChange={handleSortChange} />
               </div>
       
               {/* Stats Section */}
      @@ -218,24 +298,6 @@
                         />
                       )
                     }
      -              return (

      -                <Card

      -                  key={stat.title}

      -                  className="p-6 border-border/50 hover:border-primary/30
      transition-all duration-300 group cursor-pointer"

      -                >

      -                  <div className="flex items-center justify-between">

      -                    <div className="p-3 bg-primary/10 rounded-full
      group-hover:bg-primary/20 transition-colors">

      -                      {stat.icon}

      -                    </div>

      -                    <div className={cn("text-sm font-medium", stat.trend
      === 'up' ? "text-green-600" : "text-red-600")}>

      -                      {stat.change}

      -                    </div>

      -                  </div>

      -                  <div className="mt-4">

      -                    <h3 className="text-2xl font-bold">{stat.value}</h3>

      -                    <p className="text-sm text-muted-foreground
      mt-1">{stat.title}</p>

      -                  </div>

      -                </Card>

      -              )
                   })}
                 </div>
               )}
      @@ -251,7 +313,7 @@
                     <span>Loading more...</span>
                   </div>
                 )}
      -          {!isLoading && !hasMore && items.length > 0 &&
      !isInitialLoading && (

      +          {!isLoading && !hasMore && processedData.length > 0 &&
      !isInitialLoading && (
                   <p className="text-muted-foreground">You've reached the end.</p>
                 )}
               </div>

    patchStrategy: standard-diff
snapshot:
  src/pages/DataDemo/components/DataToolbar.tsx: null
  src/pages/DataDemo/types.ts: |-
    export type ViewMode = 'list' | 'cards' | 'grid' | 'table'

    export interface DataItem {
      id: string
      title: string
      description: string
      category: string
      status: 'active' | 'pending' | 'completed' | 'archived'
      priority: 'low' | 'medium' | 'high' | 'critical'
      assignee: {
        name: string
        avatar: string
        email: string
      }
      metrics: {
        views: number
        likes: number
        shares: number
        completion: number
      }
      tags: string[]
      createdAt: string
      updatedAt: string
      dueDate?: string
      thumbnail?: string
      content?: {
        summary: string
        details: string
        attachments?: Array<{
          name: string
          type: string
          size: string
          url: string
        }>
      }
    }

    export interface ViewProps {
      data: DataItem[]
      onItemSelect: (item: DataItem) => void
      selectedItem: DataItem | null
      isGrid?: boolean
    }
  src/pages/DataDemo/index.tsx: >-
    import { useState, useRef, useEffect, useCallback } from 'react'

    import { 
      Layers, 
      AlertTriangle, 
      PlayCircle, 
      TrendingUp,
      Loader2
    } from 'lucide-react'

    import { gsap } from 'gsap'

    import { cn } from '@/lib/utils'

    import { PageLayout } from '@/components/shared/PageLayout'

    import { DataViewModeSelector } from './components/DataViewModeSelector'

    import { DataListView } from './components/DataListView'

    import { DataCardView } from './components/DataCardView'

    import { DataTableView } from './components/DataTableView'

    import { DataDetailPanel } from './components/DataDetailPanel'

    import { AnimatedLoadingSkeleton } from
    './components/AnimatedLoadingSkeleton'

    import { StatChartCard } from './components/StatChartCard'

    import { useAppShell } from '@/context/AppShellContext'

    import { mockDataItems } from './data/mockData'

    import { Card } from '@/components/ui/card'

    import type { DataItem, ViewMode } from './types'


    type Stat = {
      title: string;
      value: string;
      icon: React.ReactNode;
      change: string;
      trend: 'up' | 'down';
      type?: 'card';
    };


    type ChartStat = {
      title: string;
      value: string;
      icon: React.ReactNode;
      change: string;
      trend: 'up' | 'down';
      type: 'chart';
      chartData: number[];
    };


    type StatItem = Stat | ChartStat;


    export default function DataDemoPage() {
      const [viewMode, setViewMode] = useState<ViewMode>('list')
      const [selectedItem, setSelectedItem] = useState<DataItem | null>(null)  
      const [items, setItems] = useState<DataItem[]>([])
      const [page, setPage] = useState(0) // Start at 0 to trigger initial load effect
      const [hasMore, setHasMore] = useState(true)
      const [isLoading, setIsLoading] = useState(true)
      const contentRef = useRef<HTMLDivElement>(null)
      const statsRef = useRef<HTMLDivElement>(null)
      const observer = useRef<IntersectionObserver>()
      const { openSidePane } = useAppShell()

      const isInitialLoading = isLoading && items.length === 0

      // Calculate stats from data
      const totalItems = mockDataItems.length
      const activeItems = mockDataItems.filter(item => item.status === 'active').length
      const highPriorityItems = mockDataItems.filter(item => item.priority === 'high' || item.priority === 'critical').length
      const avgCompletion = totalItems > 0 ? Math.round(
        mockDataItems.reduce((acc, item) => acc + item.metrics.completion, 0) / totalItems
      ) : 0

      // Infinite scroll logic
      useEffect(() => { // eslint-disable-line react-hooks/exhaustive-deps
        if (page === 0) return;

        const fetchItems = async () => {
          setIsLoading(true);
          // Add a longer delay for the initial load to showcase the skeleton
          const delay = page === 1 ? 1500 : 500
          await new Promise(resolve => setTimeout(resolve, delay)); // Simulate network delay
          
          const pageSize = 12;
          const newItems = mockDataItems.slice((page - 1) * pageSize, page * pageSize);
          
          if (newItems.length > 0) {
            setItems(prev => [...prev, ...newItems]);
          }
          if (items.length + newItems.length >= mockDataItems.length) {
            setHasMore(false);
          }
          setIsLoading(false);
        };

        if (hasMore) fetchItems();
      }, [page]);

      const loaderRef = useCallback(node => {
        if (isLoading) return;
        if (observer.current) observer.current.disconnect();
        
        observer.current = new IntersectionObserver(entries => {
          if (entries[0].isIntersecting && hasMore) {
            setPage(prevPage => prevPage + 1);
          }
        });
        if (node) observer.current.observe(node);
      }, [isLoading, hasMore]);

      const stats: StatItem[] = [
        {
          title: "Total Projects",
          value: totalItems.toString(),
          icon: <Layers className="w-5 h-5" />,
          change: "+5.2% this month",
          trend: "up" as const,
          type: 'chart',
          chartData: [120, 125, 122, 130, 135, 138, 142]
        },
        {
          title: "Active Projects",
          value: activeItems.toString(),
          icon: <PlayCircle className="w-5 h-5" />,
          change: "+2 this week", 
          trend: "up" as const,
          type: 'chart',
          chartData: [45, 50, 48, 55, 53, 60, 58]
        },
        {
          title: "High Priority",
          value: highPriorityItems.toString(),
          icon: <AlertTriangle className="w-5 h-5" />,
          change: "-1 from last week",
          trend: "down" as const,
          type: 'chart',
          chartData: [25, 26, 28, 27, 26, 24, 23]
        },
        {
          title: "Avg. Completion",
          value: `${avgCompletion}%`,
          icon: <TrendingUp className="w-5 h-5" />,
          change: "+3.2%",
          trend: "up" as const,
          type: 'chart',
          chartData: [65, 68, 70, 69, 72, 75, 78]
        }
      ]

      useEffect(() => {
        // Animate stats cards in
        if (!isInitialLoading && statsRef.current) {
          gsap.fromTo(statsRef.current.children,
            { y: 30, opacity: 0 },
            {
              duration: 0.6,
              y: 0,
              opacity: 1,
              stagger: 0.1,
              ease: "power2.out"
            }
          )
        }
      }, [isInitialLoading])

      useEffect(() => {
        // Initial load by setting page to 1
        setPage(1);
      }, []);

      // Handle item selection and open side panel
      const handleItemSelect = (item: DataItem) => {
        setSelectedItem(item)
        openSidePane('data-details')
      }

      const renderView = () => {
        const commonProps = {
          data: items,
          onItemSelect: handleItemSelect,
          selectedItem
        }

        switch (viewMode) {
          case 'list':
            return <DataListView {...commonProps} />
          case 'cards':
            return <DataCardView {...commonProps} />
          case 'grid':
            return <DataCardView {...commonProps} isGrid />
          case 'table':
            return <DataTableView {...commonProps} />
          default:
            return <DataListView {...commonProps} />
        }
      }

      return (
        <PageLayout
          // Note: Search functionality is handled by a separate SearchBar in the TopBar
        >
          <div className="space-y-8">
            {/* Header */}
            <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-4">
              <div>
                <h1 className="text-2xl font-bold tracking-tight">Data Showcase</h1>
                <p className="text-muted-foreground">
                  {isInitialLoading 
                    ? "Loading projects..." 
                    : `Showing ${items.length} of ${mockDataItems.length} items`}
                </p>
              </div>
              <DataViewModeSelector 
                viewMode={viewMode} 
                onChange={setViewMode}
              />
            </div>

            {/* Stats Section */}
            {!isInitialLoading && (
              <div ref={statsRef} className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
                {stats.map((stat) => {
                  if (stat.type === 'chart') {
                    return (
                      <StatChartCard
                        key={stat.title}
                        title={stat.title}
                        value={stat.value}
                        change={stat.change}
                        trend={stat.trend}
                        icon={stat.icon}
                        chartData={stat.chartData}
                      />
                    )
                  }
                  return (
                    <Card
                      key={stat.title}
                      className="p-6 border-border/50 hover:border-primary/30 transition-all duration-300 group cursor-pointer"
                    >
                      <div className="flex items-center justify-between">
                        <div className="p-3 bg-primary/10 rounded-full group-hover:bg-primary/20 transition-colors">
                          {stat.icon}
                        </div>
                        <div className={cn("text-sm font-medium", stat.trend === 'up' ? "text-green-600" : "text-red-600")}>
                          {stat.change}
                        </div>
                      </div>
                      <div className="mt-4">
                        <h3 className="text-2xl font-bold">{stat.value}</h3>
                        <p className="text-sm text-muted-foreground mt-1">{stat.title}</p>
                      </div>
                    </Card>
                  )
                })}
              </div>
            )}

            <div ref={contentRef} className="min-h-[500px]">
              {isInitialLoading ? <AnimatedLoadingSkeleton viewMode={viewMode} /> : renderView()}
            </div>

            {/* Loader for infinite scroll */}
            <div ref={loaderRef} className="flex justify-center items-center py-6">
              {isLoading && !isInitialLoading && (
                <div className="flex items-center gap-2 text-muted-foreground">
                  <Loader2 className="w-5 h-5 animate-spin" />
                  <span>Loading more...</span>
                </div>
              )}
              {!isLoading && !hasMore && items.length > 0 && !isInitialLoading && (
                <p className="text-muted-foreground">You've reached the end.</p>
              )}
            </div>
          </div>

          {/* Detail Panel */}
          <DataDetailPanel 
            item={selectedItem}
            onClose={() => setSelectedItem(null)}
          />
        </PageLayout>
      )
    }
  src/pages/DataDemo/components/DataTableView.tsx: >-
    import { useState, useRef, useLayoutEffect } from 'react'

    import { gsap } from 'gsap'

    import { cn } from '@/lib/utils'

    import { Badge } from '@/components/ui/badge'

    import { Avatar } from '@/components/ui/avatar'

    import { 
      Calendar, 
      Eye, 
      Heart, 
      Share, 
      ArrowUpDown, 
      ArrowUp, 
      ArrowDown,
      MoreHorizontal,
      ExternalLink
    } from 'lucide-react'

    import type { ViewProps, DataItem } from '../types'

    import { getStatusColor, getPriorityColor } from '../utils'

    import { EmptyState } from './EmptyState'


    type SortField = keyof DataItem | 'assignee.name' | 'metrics.views' |
    'metrics.completion'

    type SortDirection = 'asc' | 'desc' | null


    export function DataTableView({ data, onItemSelect, selectedItem }:
    ViewProps) {
      const [sortField, setSortField] = useState<SortField | null>(null)
      const [sortDirection, setSortDirection] = useState<SortDirection>(null)
      const tableRef = useRef<HTMLTableElement>(null)
      const animatedItemsCount = useRef(0)

      useLayoutEffect(() => {
        if (tableRef.current && data.length > animatedItemsCount.current) {
          const newItems = Array.from(
            tableRef.current.querySelectorAll('tbody tr')
          ).slice(animatedItemsCount.current);
          gsap.fromTo(newItems,
            { y: 20, opacity: 0 },
            {
              duration: 0.5,
              y: 0,
              opacity: 1,
              stagger: 0.05,
              ease: "power2.out",
            },
          );
          animatedItemsCount.current = data.length;
        }
      }, [data]);

      const handleSort = (field: SortField) => {
        if (sortField === field) {
          setSortDirection(prev => 
            prev === 'asc' ? 'desc' : prev === 'desc' ? null : 'asc'
          )
          if (sortDirection === 'desc') {
            setSortField(null)
          }
        } else {
          setSortField(field)
          setSortDirection('asc')
        }
      }

      const getSortedData = () => {
        if (!sortField || !sortDirection) return data

        return [...data].sort((a, b) => {
          let aValue: any
          let bValue: any

          if (sortField === 'assignee.name') {
            aValue = a.assignee.name
            bValue = b.assignee.name
          } else if (sortField === 'metrics.views') {
            aValue = a.metrics.views
            bValue = b.metrics.views
          } else if (sortField === 'metrics.completion') {
            aValue = a.metrics.completion
            bValue = b.metrics.completion
          } else {
            aValue = a[sortField as keyof DataItem]
            bValue = b[sortField as keyof DataItem]
          }

          if (typeof aValue === 'string' && typeof bValue === 'string') {
            return sortDirection === 'asc' 
              ? aValue.localeCompare(bValue)
              : bValue.localeCompare(aValue)
          }

          if (typeof aValue === 'number' && typeof bValue === 'number') {
            return sortDirection === 'asc' ? aValue - bValue : bValue - aValue
          }

          return 0
        })
      }

      const SortIcon = ({ field }: { field: SortField }) => {
        if (sortField !== field) {
          return <ArrowUpDown className="w-4 h-4 opacity-50" />
        }
        if (sortDirection === 'asc') {
          return <ArrowUp className="w-4 h-4 text-primary" />
        }
        if (sortDirection === 'desc') {
          return <ArrowDown className="w-4 h-4 text-primary" />
        }
        return <ArrowUpDown className="w-4 h-4 opacity-50" />
      }

      const sortedData = getSortedData()

      if (data.length === 0) {
        return <EmptyState />
      }

      return (
        <div className="relative overflow-hidden rounded-2xl border bg-card/50 backdrop-blur-sm">
          <div className="overflow-x-auto">
            <table ref={tableRef} className="w-full">
              <thead>
                <tr className="border-b border-border/50 bg-muted/20">
                  <th className="text-left p-4 font-semibold text-sm">
                    <button
                      onClick={() => handleSort('title')}
                      className="flex items-center gap-2 hover:text-primary transition-colors"
                    >
                      Project
                      <SortIcon field="title" />
                    </button>
                  </th>
                  <th className="text-left p-4 font-semibold text-sm">
                    <button
                      onClick={() => handleSort('status')}
                      className="flex items-center gap-2 hover:text-primary transition-colors"
                    >
                      Status
                      <SortIcon field="status" />
                    </button>
                  </th>
                  <th className="text-left p-4 font-semibold text-sm">
                    <button
                      onClick={() => handleSort('priority')}
                      className="flex items-center gap-2 hover:text-primary transition-colors"
                    >
                      Priority
                      <SortIcon field="priority" />
                    </button>
                  </th>
                  <th className="text-left p-4 font-semibold text-sm">
                    <button
                      onClick={() => handleSort('assignee.name')}
                      className="flex items-center gap-2 hover:text-primary transition-colors"
                    >
                      Assignee
                      <SortIcon field="assignee.name" />
                    </button>
                  </th>
                  <th className="text-left p-4 font-semibold text-sm">
                    <button
                      onClick={() => handleSort('metrics.completion')}
                      className="flex items-center gap-2 hover:text-primary transition-colors"
                    >
                      Progress
                      <SortIcon field="metrics.completion" />
                    </button>
                  </th>
                  <th className="text-left p-4 font-semibold text-sm">
                    <button
                      onClick={() => handleSort('metrics.views')}
                      className="flex items-center gap-2 hover:text-primary transition-colors"
                    >
                      Engagement
                      <SortIcon field="metrics.views" />
                    </button>
                  </th>
                  <th className="text-left p-4 font-semibold text-sm">Date</th>
                  <th className="text-center p-4 font-semibold text-sm w-16">Actions</th>
                </tr>
              </thead>
              <tbody>
                {sortedData.map((item, index) => {
                  const isSelected = selectedItem?.id === item.id
                  
                  return (
                    <tr
                      key={item.id}
                      onClick={() => onItemSelect(item)}
                      className={cn(
                        "group border-b border-border/30 transition-all duration-200 cursor-pointer",
                        "hover:bg-accent/20 hover:border-primary/20",
                        isSelected && "bg-primary/5 border-primary/30"
                      )}
                    >
                      {/* Project Column */}
                      <td className="p-4">
                        <div className="flex items-center gap-3">
                          <div className="w-10 h-10 bg-gradient-to-br from-primary/20 to-primary/10 rounded-lg flex items-center justify-center text-lg flex-shrink-0">
                            {item.thumbnail}
                          </div>
                          <div className="min-w-0 flex-1">
                            <h4 className="font-medium group-hover:text-primary transition-colors truncate">
                              {item.title}
                            </h4>
                            <p className="text-sm text-muted-foreground truncate">
                              {item.category}
                            </p>
                          </div>
                        </div>
                      </td>

                      {/* Status Column */}
                      <td className="p-4">
                        <Badge variant="outline" className={getStatusColor(item.status)}>
                          {item.status}
                        </Badge>
                      </td>

                      {/* Priority Column */}
                      <td className="p-4">
                        <Badge variant="outline" className={getPriorityColor(item.priority)}>
                          {item.priority}
                        </Badge>
                      </td>

                      {/* Assignee Column */}
                      <td className="p-4">
                        <div className="flex items-center gap-2">
                          <Avatar className="w-8 h-8 text-sm">
                            {item.assignee.avatar}
                          </Avatar>
                          <div className="min-w-0">
                            <p className="text-sm font-medium truncate">
                              {item.assignee.name}
                            </p>
                          </div>
                        </div>
                      </td>

                      {/* Progress Column */}
                      <td className="p-4">
                        <div className="flex items-center gap-3">
                          <div className="flex-1 min-w-0">
                            <div className="w-full bg-muted rounded-full h-2">
                              <div 
                                className="bg-gradient-to-r from-primary to-primary/80 h-2 rounded-full transition-all duration-500"
                                style={{ width: `${item.metrics.completion}%` }}
                              />
                            </div>
                          </div>
                          <span className="text-sm font-medium text-muted-foreground">
                            {item.metrics.completion}%
                          </span>
                        </div>
                      </td>

                      {/* Engagement Column */}
                      <td className="p-4">
                        <div className="flex items-center gap-4 text-xs text-muted-foreground">
                          <div className="flex items-center gap-1">
                            <Eye className="w-3 h-3" />
                            {item.metrics.views}
                          </div>
                          <div className="flex items-center gap-1">
                            <Heart className="w-3 h-3" />
                            {item.metrics.likes}
                          </div>
                          <div className="flex items-center gap-1">
                            <Share className="w-3 h-3" />
                            {item.metrics.shares}
                          </div>
                        </div>
                      </td>

                      {/* Date Column */}
                      <td className="p-4">
                        <div className="flex items-center gap-1 text-sm text-muted-foreground">
                          <Calendar className="w-3 h-3" />
                          {new Date(item.updatedAt).toLocaleDateString()}
                        </div>
                      </td>

                      {/* Actions Column */}
                      <td className="p-4">
                        <button 
                          onClick={(e) => {
                            e.stopPropagation()
                            onItemSelect(item)
                          }}
                          className="flex items-center justify-center w-8 h-8 rounded-lg hover:bg-accent transition-colors"
                          title="View details"
                        >
                          <ExternalLink className="w-4 h-4" />
                        </button>
                      </td>
                    </tr>
                  )
                })}
              </tbody>
            </table>
          </div>
        </div>
      )
    }
approved: true
linesAdded: null
linesRemoved: null
linesDifference: null
gitCommittedAt: '2025-10-13T01:49:58.232Z'
status: committed
id: 174
