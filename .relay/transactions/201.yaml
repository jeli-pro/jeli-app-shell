uuid: c32c1ed1-8551-46fd-9e6b-a25e197c31e9
projectId: jeli-app-shell
createdAt: '2025-10-13T03:50:16.676Z'
gitCommitMsg: >-
  feat(sidebar): show ViewModeSwitcher on menu item hover

  This commit introduces a new interaction pattern for sidebar menu items. When
  a user hovers over a menu item associated with a page, a `ViewModeSwitcher`
  now appears, allowing them to open the page in a specific view (Normal, Side
  Pane, Split View, Fullscreen) directly.

  - Updated `ViewModeSwitcher` to accept a `targetPage` prop, making it
    context-aware and reusable.
  - Integrated the `ViewModeSwitcher` into `AppMenuItem` in the
    `EnhancedSidebar`, making it visible on hover for applicable items.
promptSummary: >-
  Add a ViewModeSwitcher to sidebar items on hover to allow users to select a
  view mode for a page before navigating to it.
reasoning:
  - >-
    Based on your request, I will modify the sidebar items to show a
    `ViewModeSwitcher` on hover. This will allow you to open a page in a
    specific view mode (like side pane or fullscreen) directly from the sidebar.
  - 'Here is my plan:'
  - >-
    1.  **Update `ViewModeSwitcher`:** I will enhance the `ViewModeSwitcher`
    component to accept a `targetPage` prop. This will allow it to perform
    view-changing actions on a specific page, not just the currently active one.
    I will also adjust its click handlers to navigate to the `targetPage` when
    necessary (e.g., for 'Normal' or 'Fullscreen' views).
  - >-
    2.  **Modify `EnhancedSidebar`:** I will edit the `AppMenuItem` component
    within the `EnhancedSidebar`. A `ViewModeSwitcher` will be added to each
    menu item that corresponds to a page. It will be hidden by default and will
    appear on the right side of the item when you hover over it.
  - '### 1. Update `ViewModeSwitcher` to be context-aware'
  - >-
    I'll start by modifying `src/components/layout/ViewModeSwitcher.tsx` to
    accept a `targetPage` prop. This makes the component reusable in different
    contexts, such as the main top bar (acting on the current page) and sidebar
    items (acting on a target page).
  - '### 2. Integrate `ViewModeSwitcher` into Sidebar Items'
  - >-
    Now, I'll modify `src/components/layout/EnhancedSidebar.tsx` to include the
    updated `ViewModeSwitcher` in each `AppMenuItem`. It will appear on hover,
    allowing for view mode selection before navigation.
  - >-
    These changes will add the desired hover functionality to the sidebar items,
    improving user interaction and control over the application layout.
  - '---'
operations:
  - type: write
    path: src/components/layout/ViewModeSwitcher.tsx
    content: >+
      --- src/components/layout/ViewModeSwitcher.tsx

      +++ src/components/layout/ViewModeSwitcher.tsx

      @@ -23,7 +23,7 @@
         'data-demo': 'dataDemo',
       };
       
      -export function ViewModeSwitcher({ pane }: { pane?: 'main' | 'right' }) {

      +export function ViewModeSwitcher({ pane, targetPage }: { pane?: 'main' |
      'right', targetPage?: ActivePage }) {
         const {
           bodyState,
           sidePaneContent,
      @@ -34,8 +34,9 @@
           fullscreenTarget,
           dispatch,
         } = useAppShell()
      -  const { activePage, setActivePage } = useAppStore()

      +  const { activePage: currentActivePage, setActivePage } = useAppStore()
       
      +  const activePage = targetPage || currentActivePage;
         const [isExpanded, setIsExpanded] = useState(false);
         const buttonRefs = useRef<(HTMLButtonElement | null)[]>([]);
       
      @@ -107,6 +108,9 @@
           if (isFullscreen) {
             toggleFullscreen();
           }
      +    if (targetPage) {

      +      setActivePage(targetPage);

      +    }
         }
       
         const buttons = [
      @@ -128,7 +132,14 @@
           },
           {
             id: 'fullscreen',
      -      onClick: () => toggleFullscreen(pane),

      +      onClick: () => {

      +        if (targetPage && targetPage !== currentActivePage) {

      +          setActivePage(targetPage);

      +          setTimeout(() => toggleFullscreen(pane), 50);

      +        } else {

      +          toggleFullscreen(pane);

      +        }

      +      },
             active: isThisPaneFullscreen,
             title: "Toggle Fullscreen",
             icon: isThisPaneFullscreen ? <Minimize className="w-4 h-4" /> : <Maximize className="w-4 h-4" />

    patchStrategy: standard-diff
  - type: write
    path: src/components/layout/EnhancedSidebar.tsx
    content: >+
      --- src/components/layout/EnhancedSidebar.tsx

      +++ src/components/layout/EnhancedSidebar.tsx

      @@ -26,6 +26,7 @@
         DropdownMenuContent,
         DropdownMenuItem,
         DropdownMenuTrigger,
       } from '@/components/ui/dropdown-menu';
       import {
         Sidebar,
      @@ -42,6 +43,7 @@
         SidebarIcon,
         useSidebar,
       } from './Sidebar';
      +import { ViewModeSwitcher } from './ViewModeSwitcher';
       import { cn } from '@/lib/utils';
       
       interface MyWorkspace extends Workspace {
      @@ -194,6 +196,15 @@
                 <SidebarTooltip label={label} badge={badge} />
               </SidebarMenuButton>
       
      +        {page && !isCollapsed && (

      +          <div className={cn(

      +            "opacity-0 group-hover/item:opacity-100
      group-focus-within/item:opacity-100",

      +            "transition-opacity pointer-events-none
      group-hover/item:pointer-events-auto shrink-0"

      +          )}>

      +            <ViewModeSwitcher targetPage={page} />

      +          </div>

      +        )}

      +
               {hasActions && (
                 <DropdownMenu>
                   <DropdownMenuTrigger asChild>

    patchStrategy: standard-diff
snapshot:
  src/components/layout/ViewModeSwitcher.tsx: >-
    import { useState, useRef, useEffect } from 'react';

    import { gsap } from 'gsap';

    import { cn } from '@/lib/utils'

    import { useAppShell } from '@/context/AppShellContext'

    import { useAppStore, type ActivePage } from '@/store/appStore'

    import { BODY_STATES } from '@/lib/utils'

    import { type AppShellState } from '@/context/AppShellContext'

    import {
      Columns,
      PanelRightOpen,
      SplitSquareHorizontal,
      Maximize,
      Minimize,
      Layers,
      X,
      ArrowLeftRight
    } from 'lucide-react'


    const pageToPaneMap: Record<ActivePage, AppShellState['sidePaneContent']> =
    {
      dashboard: 'main',
      settings: 'settings',
      toaster: 'toaster',
      notifications: 'notifications',
      'data-demo': 'dataDemo',
    };


    export function ViewModeSwitcher({ pane }: { pane?: 'main' | 'right' }) {
      const {
        bodyState,
        sidePaneContent,
        openSidePane,
        closeSidePane,
        toggleFullscreen,
        toggleSplitView,
        fullscreenTarget,
        dispatch,
      } = useAppShell()
      const { activePage, setActivePage } = useAppStore()

      const [isExpanded, setIsExpanded] = useState(false);
      const buttonRefs = useRef<(HTMLButtonElement | null)[]>([]);

      const isFullscreen = bodyState === BODY_STATES.FULLSCREEN;
      const isThisPaneFullscreen = isFullscreen && (
        (pane === 'main' && fullscreenTarget !== 'right') ||
        (pane === 'right' && fullscreenTarget === 'right') ||
        (!pane && !fullscreenTarget) // Global switcher, global fullscreen
      );

      useEffect(() => {
        const buttonsToAnimate = buttonRefs.current.filter(Boolean) as HTMLButtonElement[];
        if (buttonsToAnimate.length === 0) return;

        gsap.killTweensOf(buttonsToAnimate);

        if (isExpanded) {
            gsap.to(buttonsToAnimate, {
                width: 32, // h-8 w-8
                opacity: 1,
                pointerEvents: 'auto',
                marginLeft: 4, // from gap-1 in original
                duration: 0.2,
                stagger: {
                    each: 0.05,
                    from: 'start'
                },
                ease: 'power2.out'
            });
        } else {
            gsap.to(buttonsToAnimate, {
                width: 0,
                opacity: 0,
                pointerEvents: 'none',
                marginLeft: 0,
                duration: 0.2,
                stagger: {
                    each: 0.05,
                    from: 'end'
                },
                ease: 'power2.in'
            });
        }
      }, [isExpanded, bodyState]); // re-run if bodyState changes to recalc buttons

      const handleSidePaneClick = () => {
        const paneContent = pageToPaneMap[activePage] || 'details';
        if (pane === 'right') return;
        if (bodyState === BODY_STATES.SIDE_PANE && sidePaneContent === paneContent) {
          closeSidePane();
        } else {
          openSidePane(paneContent);
        }
      };
      
      const handleSplitViewClick = () => {
          const paneContent = pageToPaneMap[activePage] || 'details';
          if (pane === 'right') return;
          toggleSplitView(paneContent);
      }

      const handleSwitchPanes = () => {
        if (bodyState !== BODY_STATES.SPLIT_VIEW) return;
        const newSidePaneContent = pageToPaneMap[activePage];
        const newActivePage = Object.entries(pageToPaneMap).find(
          ([, value]) => value === sidePaneContent
        )?.[0] as ActivePage | undefined;

        if (newActivePage && newSidePaneContent) {
          setActivePage(newActivePage);
          dispatch({ type: 'SET_SIDE_PANE_CONTENT', payload: newSidePaneContent });
        }
      };

      const handleClosePane = () => {
        if (bodyState !== BODY_STATES.SPLIT_VIEW) return;
        if (pane === 'right') {
          closeSidePane();
        } else if (pane === 'main') {
          const pageToBecomeActive = Object.entries(pageToPaneMap).find(
            ([, value]) => value === sidePaneContent
          )?.[0] as ActivePage | undefined;
          
          if (pageToBecomeActive) {
            setActivePage(pageToBecomeActive);
          }
          closeSidePane();
        }
      }

      const handleNormalViewClick = () => {
        if (bodyState === BODY_STATES.SIDE_PANE || bodyState === BODY_STATES.SPLIT_VIEW) {
          closeSidePane();
        }
        if (isFullscreen) {
          toggleFullscreen();
        }
      }

      const buttons = [
        {
          id: 'normal',
          onClick: handleNormalViewClick,
          active: bodyState === BODY_STATES.NORMAL,
          title: "Normal View",
          icon: <Columns className="w-4 h-4" />
        },
        {
          id: 'side-pane',
          onClick: handleSidePaneClick,
          active: bodyState === BODY_STATES.SIDE_PANE,
          title: "Side Pane View",
          icon: <PanelRightOpen className="w-4 h-4" />
        },
        {
          id: 'split-view',
          onClick: handleSplitViewClick,
          active: bodyState === BODY_STATES.SPLIT_VIEW,
          title: bodyState === BODY_STATES.SPLIT_VIEW ? 'Switch to Overlay View' : 'Switch to Split View',
          icon: bodyState === BODY_STATES.SPLIT_VIEW ? <Layers className="w-4 h-4" /> : <SplitSquareHorizontal className="w-4 h-4" />
        },
        {
          id: 'fullscreen',
          onClick: () => toggleFullscreen(pane),
          active: isThisPaneFullscreen,
          title: "Toggle Fullscreen",
          icon: isThisPaneFullscreen ? <Minimize className="w-4 h-4" /> : <Maximize className="w-4 h-4" />
        }
      ];

      if (bodyState === BODY_STATES.SPLIT_VIEW) {
        buttons.push({
          id: 'switch',
          onClick: handleSwitchPanes,
          active: false,
          title: "Switch Panes",
          icon: <ArrowLeftRight className="w-4 h-4" />
        });
        buttons.push({
          id: 'close',
          onClick: handleClosePane,
          active: false,
          title: "Close Pane",
          icon: <X className="w-4 h-4 text-muted-foreground group-hover:text-destructive" />
        });
      }

      return (
        <div
          onMouseEnter={() => setIsExpanded(true)}
          onMouseLeave={() => setIsExpanded(false)}
          className="flex items-center gap-0 p-1 bg-card rounded-full border border-border"
        >
            <button
                className='h-8 w-8 flex-shrink-0 flex items-center justify-center rounded-full hover:bg-accent transition-colors'
                title="View Modes"
                onClick={() => setIsExpanded(!isExpanded)}
            >
                <Layers className="w-4 h-4" />
            </button>
          
          {buttons.map((btn, index) => (
            <button
              key={btn.id}
              ref={el => buttonRefs.current[index] = el}
              onClick={btn.onClick}
              className={cn(
                'h-8 w-0 flex items-center justify-center rounded-full hover:bg-accent transition-colors group opacity-0',
                btn.active && 'bg-accent text-accent-foreground',
                btn.id === 'close' && 'hover:bg-destructive/20'
              )}
              style={{ pointerEvents: 'none', marginLeft: 0, overflow: 'hidden' }}
              title={btn.title}
            >
              {btn.icon}
            </button>
          ))}
        </div>
      )
    }
  src/components/layout/EnhancedSidebar.tsx: >-
    import React from 'react';

    import {
      Home,
      Settings,
      HelpCircle,
      Component,
      Rocket,
      MoreHorizontal,
      Bell,
      Search,
      FileText,
      Star,
      Trash2,
      FolderOpen,
      Mail,
      Bookmark,
      Download,
      User,
      Plus,
      Database
    } from 'lucide-react';

    import { useAppStore, type ActivePage } from '@/store/appStore';

    import { useAppShell } from '@/context/AppShellContext';

    import { BODY_STATES } from '@/lib/utils';

    import {
      Workspaces,
      WorkspaceTrigger,
      WorkspaceContent,
      type Workspace,
    } from './WorkspaceSwitcher';

    import {
      DropdownMenu,
      DropdownMenuContent,
      DropdownMenuItem,
      DropdownMenuTrigger,
    } from '@/components/ui/dropdown-menu';

    import {
      Sidebar,
      SidebarContent,
      SidebarHeader,
      SidebarTitle,
      SidebarBody,
      SidebarFooter,
      SidebarSection,
      SidebarMenuItem,
      SidebarMenuButton,
      SidebarMenuAction,
      SidebarLabel,
      SidebarBadge,
      SidebarTooltip,
      SidebarIcon,
      useSidebar,
    } from './Sidebar';

    import { cn } from '@/lib/utils';


    interface MyWorkspace extends Workspace {
      logo: string;
      plan: string;
    }


    const mockWorkspaces: MyWorkspace[] = [
      { id: 'ws1', name: 'Acme Inc.', logo: 'https://avatar.vercel.sh/acme.png', plan: 'Pro' },
      { id: 'ws2', name: 'Monsters Inc.', logo: 'https://avatar.vercel.sh/monsters.png', plan: 'Free' },
      { id: 'ws3', name: 'Stark Industries', logo: 'https://avatar.vercel.sh/stark.png', plan: 'Enterprise' },
    ];


    const SidebarWorkspaceTrigger = () => {
      const { isCollapsed, compactMode } = useSidebar();

      return (
        <WorkspaceTrigger
          collapsed={isCollapsed}
          className={cn(
            'rounded-xl transition-colors hover:bg-accent/50 w-full',
            isCollapsed ? 'p-2' : 'p-3 bg-accent/50',
          )}
          avatarClassName={cn(compactMode ? 'h-8 w-8' : 'h-10 w-10')}
        />
      );
    };


    interface SidebarProps {
      onMouseEnter?: () => void;
      onMouseLeave?: () => void;
    }


    export const EnhancedSidebar = React.forwardRef<HTMLDivElement,
    SidebarProps>(
      ({ onMouseEnter, onMouseLeave }, ref) => {
        const { sidebarWidth, compactMode, appName, appLogo } = useAppShell();
        const [selectedWorkspace, setSelectedWorkspace] = React.useState(mockWorkspaces[0]);

        return (
          <Sidebar
            ref={ref}
            style={{ width: sidebarWidth }}
            onMouseEnter={onMouseEnter}
            onMouseLeave={onMouseLeave}
          >
            <SidebarContent>
              <SidebarHeader>
                {appLogo || (
                  <div className="p-2 bg-primary/20 rounded-lg">
                    <Rocket className="w-5 h-5 text-primary" />
                  </div>
                )}
                <SidebarTitle>{appName}</SidebarTitle>
              </SidebarHeader>

              <SidebarBody>
                <SidebarSection title="Main">
                  <AppMenuItem icon={Home} label="Dashboard" page="dashboard" />
                  <AppMenuItem icon={Database} label="Data Demo" page="data-demo" />
                  <AppMenuItem icon={Search} label="Search" />
                  <AppMenuItem icon={Bell} label="Notifications" badge={3} page="notifications" opensInSidePane />
                </SidebarSection>
                
                <SidebarSection title="Workspace" collapsible defaultExpanded>
                  <AppMenuItem icon={FileText} label="Documents" hasActions>
                    <AppMenuItem icon={FileText} label="Recent" isSubItem />
                    <AppMenuItem icon={Star} label="Starred" isSubItem />
                    <AppMenuItem icon={Trash2} label="Trash" isSubItem />
                  </AppMenuItem>
                  <AppMenuItem icon={FolderOpen} label="Projects" hasActions />
                  <AppMenuItem icon={Mail} label="Messages" badge={12} />
                </SidebarSection>
                
                <SidebarSection title="Personal" collapsible>
                  <AppMenuItem icon={Bookmark} label="Bookmarks" />
                  <AppMenuItem icon={Star} label="Favorites" />
                  <AppMenuItem icon={Download} label="Downloads" />
                </SidebarSection>

                <SidebarSection title="Components" collapsible defaultExpanded>
                  <AppMenuItem icon={Component} label="Toaster" page="toaster" />
                </SidebarSection>
              </SidebarBody>

              <SidebarFooter>
                <SidebarSection>
                  <AppMenuItem icon={User} label="Profile" />
                  <AppMenuItem icon={Settings} label="Settings" page="settings" />
                  <AppMenuItem icon={HelpCircle} label="Help" />
                </SidebarSection>

                <div className={cn(compactMode ? 'mt-4' : 'mt-6')}>
                  <Workspaces
                    workspaces={mockWorkspaces}
                    selectedWorkspaceId={selectedWorkspace.id}
                    onWorkspaceChange={setSelectedWorkspace}
                  >
                    <SidebarWorkspaceTrigger />
                    <WorkspaceContent>
                      <button className="flex w-full items-center gap-2 rounded-sm px-2 py-2 text-left text-sm hover:bg-accent hover:text-accent-foreground focus:outline-none">
                        <Plus className="h-4 w-4" />
                        <span>Create Workspace</span>
                      </button>
                    </WorkspaceContent>
                  </Workspaces>
                </div>
              </SidebarFooter>
            </SidebarContent>
          </Sidebar>
        );
      },
    );

    EnhancedSidebar.displayName = 'EnhancedSidebar';



    // Example of a reusable menu item component built with the new Sidebar
    primitives

    interface AppMenuItemProps {
      icon: React.ElementType;
      label: string;
      badge?: number;
      hasActions?: boolean;
      children?: React.ReactNode;
      isSubItem?: boolean;
      page?: ActivePage;
      opensInSidePane?: boolean;
    }


    const AppMenuItem: React.FC<AppMenuItemProps> = ({ icon: Icon, label, badge,
    hasActions, children, isSubItem = false, page, opensInSidePane = false }) =>
    {
      const { handleNavigation, activePage } = useAppStore()
      const { compactMode, bodyState, sidePaneContent, openSidePane, dispatch } = useAppShell()
      const { isCollapsed } = useSidebar();

      const isPageActive = (page: ActivePage) => {
        const pageToSidePaneContent: { [key in ActivePage]?: 'main' | 'settings' | 'toaster' | 'notifications' } = {
          dashboard: 'main',
          settings: 'settings',
          toaster: 'toaster',
          notifications: 'notifications',
          'data-demo': 'main',
        };
        return activePage === page || (bodyState === BODY_STATES.SIDE_PANE && sidePaneContent === pageToSidePaneContent[page]);
      };
      
      const isActive = page ? isPageActive(page) : false;

      const handleClick = () => {
        if (page) {
          if (opensInSidePane) {
            const pageToPaneMap: { [key in ActivePage]?: 'main' | 'settings' | 'toaster' | 'notifications' } = {
              dashboard: 'main',
              settings: 'settings',
              toaster: 'toaster',
              notifications: 'notifications',
              'data-demo': 'main',
            };
            if (pageToPaneMap[page]) openSidePane(pageToPaneMap[page]!)
          } else {
            handleNavigation(page);
          }
        }
      };

      return (
        <div className={isSubItem ? (compactMode ? 'ml-4' : 'ml-6') : ''}>
          <SidebarMenuItem>
            <SidebarMenuButton
              onClick={handleClick}
              isActive={isActive}
              draggable={!!page}
              onDragStart={(_e) => {
                if (page) {
                  // set dragged page in AppShell context
                  dispatch({ type: 'SET_DRAGGED_PAGE', payload: page });
                }
              }}
              onDragEnd={() => {
                dispatch({ type: 'SET_DRAGGED_PAGE', payload: null });
                dispatch({ type: 'SET_DRAG_HOVER_TARGET', payload: null });
              }}
            >
              <SidebarIcon>
                <Icon className={isSubItem ? "w-3 h-3" : "w-4 h-4"}/>
              </SidebarIcon>
              <SidebarLabel>{label}</SidebarLabel>
              {badge && <SidebarBadge>{badge}</SidebarBadge>}
              <SidebarTooltip label={label} badge={badge} />
            </SidebarMenuButton>

            {hasActions && (
              <DropdownMenu>
                <DropdownMenuTrigger asChild>
                  <SidebarMenuAction>
                    <MoreHorizontal className="h-4 w-4" />
                  </SidebarMenuAction>
                </DropdownMenuTrigger>
                <DropdownMenuContent side="right" align="start">
                  <DropdownMenuItem>
                    <span>Edit {label}</span>
                  </DropdownMenuItem>
                  <DropdownMenuItem>
                    <span>Delete {label}</span>
                  </DropdownMenuItem>
                </DropdownMenuContent>
              </DropdownMenu>
            )}
          </SidebarMenuItem>
          {!isCollapsed && children && (
            <div className="space-y-1 mt-1">{children}</div>
          )}
        </div>
      );
    };
approved: true
linesAdded: null
linesRemoved: null
linesDifference: null
gitCommittedAt: null
status: committed
id: 201
