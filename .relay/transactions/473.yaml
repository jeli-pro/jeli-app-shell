uuid: a6977717-da07-425f-9e73-b2308630737a
projectId: jeli-app-shell
createdAt: '2025-10-18T08:32:09.379Z'
gitCommitMsg: >-
  feat(DataDemo): refactor DataListView to Notion-style layout

  - Overhauled `DataListView` to use a compact, row-based design, replacing the
  previous card-based UI. - Each item is now a clean, hoverable row with
  metadata aligned to the right. - Implemented responsive visibility for
  metadata to ensure a cohesive UX across different screen sizes. - Updated
  `AssigneeInfo` component in `DataItemParts` with a `compact` prop to show only
  the avatar, making it suitable for dense UIs. - Improved `AssigneeInfo` avatar
  fallback to display user initials for better readability.
promptSummary: >-
  I want to refactor the list view in the data demo page to be more like a
  Notion list view. It should be less card-like and more of a compact, row-based
  layout.
reasoning:
  - >-
    I will update the data demo page's list view to a more compact, Notion-style
    layout. This involves two main changes:
  - >-
    1.  **Refactoring `DataListView.tsx`**: I'll completely overhaul this
    component to display data items as clean, hoverable rows instead of large
    cards. Each row will feature the item's title and thumbnail, with key
    metadata like status, priority, assignee, and date aligned to the right. To
    ensure a good user experience on all screen sizes, some metadata will be
    responsively hidden on smaller viewports.
  - >-
    2.  **Enhancing `DataItemParts.tsx`**: To support the new compact list view,
    I'll update the `AssigneeInfo` component. I'm adding a `compact` prop that
    will render only the assignee's avatar, which is perfect for
    information-dense layouts. This change is backward-compatible, so other
    views using this component will not be affected. I will also improve the
    avatar fallback to show initials instead of just the first letter.
  - >-
    These modifications will result in a more streamlined and
    professional-looking list view that is both aesthetically pleasing and
    functionally cohesive with modern data-centric applications.
  - >-
    First, I'll update `DataItemParts.tsx` to add a `compact` variant to the
    `AssigneeInfo` component. This will allow it to show only the avatar, which
    is ideal for the new dense list view. I'll also improve the avatar fallback
    to show initials.
  - >-
    Next, I'll replace the entire `DataListView.tsx` component with a new
    implementation that uses a row-based layout, similar to Notion's list view.
    This version is cleaner, more compact, and uses the new `compact` prop on
    `AssigneeInfo`.
operations:
  - type: write
    path: src/pages/DataDemo/components/shared/DataItemParts.tsx
    content: >+
      --- src/pages/DataDemo/components/shared/DataItemParts.tsx

      +++ src/pages/DataDemo/components/shared/DataItemParts.tsx

      @@ -19,25 +19,35 @@
       
       export function AssigneeInfo({
         assignee,
         avatarClassName = "w-8 h-8",
      +  compact = false,
       }: {
         assignee: DataItem['assignee']
         avatarClassName?: string
      +  compact?: boolean
       }) {
      +  const avatar = (

      +    <Avatar className={cn("border-2 border-transparent
      group-hover:border-primary/50 transition-colors", avatarClassName)}>

      +      <AvatarImage src={assignee.avatar} alt={assignee.name} />

      +      <AvatarFallback>{assignee.name.split(' ').map(n =>
      n[0]).join('')}</AvatarFallback>

      +    </Avatar>

      +  )

      +

      +  if (compact) {

      +    return avatar

      +  }

      +
         return (
           <div className="flex items-center gap-2 group">
      -      <Avatar className={cn("border-2 border-transparent
      group-hover:border-primary/50 transition-colors", avatarClassName)}>

      -        <AvatarImage src={assignee.avatar} alt={assignee.name} />

      -        <AvatarFallback>{assignee.name.charAt(0)}</Fallback>

      -      </Avatar>

      +      {avatar}
             <div className="min-w-0">
               <p className="font-medium text-sm truncate">{assignee.name}</p>
               <p className="text-xs text-muted-foreground truncate">{assignee.email}</p>
             </div>
           </div>
         )
       }
       
       export function ItemMetrics({ metrics }: { metrics: DataItem['metrics'] }) {
         return (

    patchStrategy: standard-diff
  - type: write
    path: src/pages/DataDemo/components/DataListView.tsx
    content: >-
      import { useRef } from 'react'

      import { cn } from '@/lib/utils'

      import type { DataItem } from '../types'

      import { useStaggeredAnimation } from
      '@/hooks/useStaggeredAnimation.motion.hook'

      import { EmptyState } from './EmptyState'

      import { useAppViewManager } from '@/hooks/useAppViewManager.hook'

      import { 
        useSelectedItem,
      } from '../store/dataDemo.store'

      import {
        AssigneeInfo,
        ItemStatusBadge,
        ItemPriorityBadge,
        ItemDateInfo,
        ItemTags,
      } from './shared/DataItemParts'

      import { AddDataItemCta } from './shared/AddDataItemCta'


      export function DataListView({ data }: { data: DataItem[] }) {
        const { onItemSelect, itemId } = useAppViewManager();
        const selectedItem = useSelectedItem(itemId);

        const listRef = useRef<HTMLDivElement>(null)
        useStaggeredAnimation(listRef, [data], { mode: 'incremental', scale: 1, y: 20, stagger: 0.05, duration: 0.4 });

        const items = Array.isArray(data) ? data : [];
        if (items.length === 0) {
          return <EmptyState />
        }

        return (
          <div ref={listRef} className="border-t">
            {items.map((item: DataItem) => {
              const isSelected = selectedItem?.id === item.id
              
              return (
                <div
                  key={item.id}
                  onClick={() => onItemSelect(item)}
                  className={cn(
                    "group flex items-center px-4 py-2 border-b transition-colors duration-200 cursor-pointer",
                    "hover:bg-accent/80",
                    isSelected ? "bg-accent" : "bg-transparent"
                  )}
                >
                  {/* Left side: Icon and Title */}
                  <div className="flex items-center gap-3 flex-1 min-w-0">
                    <span className="text-xl flex-shrink-0 w-8 text-center">{item.thumbnail}</span>
                    <p className="font-medium truncate text-card-foreground group-hover:text-primary">{item.title}</p>
                  </div>

                  {/* Right side: Metadata */}
                  <div className="flex items-center gap-4 ml-4 text-sm text-muted-foreground shrink-0">
                    <div className="hidden lg:flex items-center gap-4">
                      <ItemStatusBadge status={item.status} />
                      <ItemTags tags={item.tags} />
                    </div>
                    <div className="hidden md:flex items-center gap-4">
                      <ItemDateInfo date={item.updatedAt} />
                    </div>
                    <AssigneeInfo assignee={item.assignee} avatarClassName="w-7 h-7" compact />
                    <ItemPriorityBadge priority={item.priority} />
                  </div>
                </div>
              )
            })}
            <AddDataItemCta viewMode='list' />
          </div>
        )
      }
    patchStrategy: replace
snapshot:
  src/pages/DataDemo/components/shared/DataItemParts.tsx: >-
    import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar'

    import { Badge } from '@/components/ui/badge'

    import { cn, getStatusColor, getPriorityColor } from '@/lib/utils'

    import { Clock, Eye, Heart, Share } from 'lucide-react'

    import type { DataItem } from '../../types'


    export function ItemStatusBadge({ status }: { status: DataItem['status'] })
    {
      return (
        <Badge variant="outline" className={cn("font-medium", getStatusColor(status))}>
          {status.charAt(0).toUpperCase() + status.slice(1)}
        </Badge>
      )
    }


    export function ItemPriorityBadge({ priority }: { priority:
    DataItem['priority'] }) {
      return (
        <Badge variant="outline" className={cn("font-medium", getPriorityColor(priority))}>
          {priority.charAt(0).toUpperCase() + priority.slice(1)}
        </Badge>
      )
    }


    export function AssigneeInfo({
      assignee,
      avatarClassName = "w-8 h-8",
    }: {
      assignee: DataItem['assignee']
      avatarClassName?: string
    }) {
      return (
        <div className="flex items-center gap-2 group">
          <Avatar className={cn("border-2 border-transparent group-hover:border-primary/50 transition-colors", avatarClassName)}>
            <AvatarImage src={assignee.avatar} alt={assignee.name} />
            <AvatarFallback>{assignee.name.charAt(0)}</AvatarFallback>
          </Avatar>
          <div className="min-w-0">
            <p className="font-medium text-sm truncate">{assignee.name}</p>
            <p className="text-xs text-muted-foreground truncate">{assignee.email}</p>
          </div>
        </div>
      )
    }


    export function ItemMetrics({ metrics }: { metrics: DataItem['metrics'] }) {
      return (
        <div className="flex items-center gap-3 text-sm">
          <div className="flex items-center gap-1"><Eye className="w-4 h-4" /> {metrics.views}</div>
          <div className="flex items-center gap-1"><Heart className="w-4 h-4" /> {metrics.likes}</div>
          <div className="flex items-center gap-1"><Share className="w-4 h-4" /> {metrics.shares}</div>
        </div>
      )
    }


    export function ItemProgressBar({ completion, showPercentage }: {
    completion: number; showPercentage?: boolean }) {
      const bar = (
        <div className="w-full bg-muted rounded-full h-2.5">
          <div
            className="bg-gradient-to-r from-primary to-primary/80 h-2.5 rounded-full transition-all duration-500"
            style={{ width: `${completion}%` }}
          />
        </div>
      );

      if (!showPercentage) return bar;

      return (
        <div className="flex items-center gap-3">
          <div className="flex-1 min-w-0">{bar}</div>
          <span className="text-sm font-medium text-muted-foreground">{completion}%</span>
        </div>
      )
    }


    export function ItemDateInfo({ date }: { date: string }) {
      return (
        <div className="flex items-center gap-1.5 text-sm">
          <Clock className="w-4 h-4" />
          <span>{new Date(date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}</span>
        </div>
      )
    }


    export function ItemTags({ tags }: { tags: string[] }) {
      const MAX_TAGS = 3
      const remainingTags = tags.length - MAX_TAGS
      return (
        <div className="flex items-center gap-1.5 flex-wrap">
          {tags.slice(0, MAX_TAGS).map(tag => (
            <Badge key={tag} variant="secondary" className="text-xs">{tag}</Badge>
          ))}
          {remainingTags > 0 && (
            <Badge variant="outline" className="text-xs">+{remainingTags}</Badge>
          )}
        </div>
      )
    }
  src/pages/DataDemo/components/DataListView.tsx: >-
    import { useRef } from 'react'

    import { cn } from '@/lib/utils'

    import { Badge } from '@/components/ui/badge'

    import { ArrowRight } from 'lucide-react'

    import type { DataItem } from '../types'

    import { useStaggeredAnimation } from
    '@/hooks/useStaggeredAnimation.motion.hook'

    import { EmptyState } from './EmptyState'

    import { useAppViewManager } from '@/hooks/useAppViewManager.hook'

    import { 
      useSelectedItem,
    } from '../store/dataDemo.store'

    import {
      AssigneeInfo,
      ItemMetrics,
      ItemProgressBar,
      ItemStatusBadge,
      ItemPriorityBadge,
      ItemDateInfo,
    } from './shared/DataItemParts'

    import { AddDataItemCta } from './shared/AddDataItemCta'


    export function DataListView({ data }: { data: DataItem[] }) {
      const { onItemSelect, itemId } = useAppViewManager();
      const selectedItem = useSelectedItem(itemId);

      const listRef = useRef<HTMLDivElement>(null)
      useStaggeredAnimation(listRef, [data], { mode: 'incremental', scale: 1, y: 30, stagger: 0.08, duration: 0.5 });

      const items = Array.isArray(data) ? data : [];
      if (items.length === 0) {
        return <EmptyState />
      }

      return (
        <div ref={listRef} className="space-y-4 pb-4">
          {items.map((item: DataItem) => {
            const isSelected = selectedItem?.id === item.id
            
            return (
              <div
                key={item.id}
                onClick={() => onItemSelect(item)}
                className={cn(
                  "group relative overflow-hidden rounded-2xl border bg-card/50 backdrop-blur-sm transition-all duration-300 cursor-pointer",
                  "hover:bg-card/80 hover:shadow-lg hover:shadow-primary/5 hover:border-primary/20",
                  "active:scale-[0.99]",
                  isSelected && "ring-2 ring-primary/20 border-primary/30 bg-card/90"
                )}
              >
                <div className="p-6">
                  <div className="flex items-start gap-4">
                    {/* Thumbnail */}
                    <div className="flex-shrink-0">
                      <div className="w-14 h-14 bg-gradient-to-br from-primary/20 to-primary/10 rounded-xl flex items-center justify-center text-2xl">
                        {item.thumbnail}
                      </div>
                    </div>

                    {/* Content */}
                    <div className="flex-1 min-w-0">
                      <div className="flex items-start justify-between mb-3">
                        <div className="flex-1 min-w-0">
                          <h3 className="font-semibold text-lg mb-1 group-hover:text-primary transition-colors">
                            {item.title}
                          </h3>
                          <p className="text-muted-foreground text-sm mb-3 line-clamp-2">
                            {item.description}
                          </p>
                        </div>
                        <ArrowRight className="w-5 h-5 text-muted-foreground group-hover:text-primary group-hover:translate-x-1 transition-all duration-300 ml-4 flex-shrink-0" />
                      </div>

                      {/* Badges */}
                      <div className="flex items-center gap-2 mb-4">
                        <ItemStatusBadge status={item.status} />
                        <ItemPriorityBadge priority={item.priority} />
                        <Badge variant="outline" className="bg-accent/50">
                          {item.category}
                        </Badge>
                      </div>

                      {/* Meta info */}
                      <div className="flex items-center justify-between text-muted-foreground">
                        <div className="flex items-center gap-4">
                          {/* Assignee */}
                          <AssigneeInfo assignee={item.assignee} avatarClassName="w-7 h-7" />
                          {/* Date */}
                          <ItemDateInfo date={item.updatedAt} />
                        </div>

                        {/* Metrics */}
                        <ItemMetrics metrics={item.metrics} />
                      </div>

                      {/* Progress bar */}
                      <div className="mt-4"><ItemProgressBar completion={item.metrics.completion} /></div>
                    </div>
                  </div>
                </div>

                {/* Hover gradient overlay */}
                <div className="absolute inset-0 bg-gradient-to-r from-primary/5 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300 pointer-events-none" />
              </div>
            )
          })}
          <AddDataItemCta viewMode='list' />
        </div>
      )
    }
approved: true
linesAdded: null
linesRemoved: null
linesDifference: null
gitCommittedAt: '2025-10-18T08:43:55.203Z'
status: committed
id: 473
