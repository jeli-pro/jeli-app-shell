uuid: 489d892d-4560-4e18-8f55-1f953c82d921
projectId: jeli-app-shell
createdAt: '2025-10-15T00:58:25.220Z'
gitCommitMsg: >-
  feat(messaging): implement collapsible contact profile pane

  Introduces a collapsible and resizable contact profile pane within the
  messaging interface. This feature is enabled in both the main `/messaging`
  route and when the messaging component is active in the split-view's right
  pane.

  - Extended `appShell.store` with state for the profile pane's width, collapsed
  state, and resizing status. - Added a `useResizableMessagingProfile` hook to
  handle resizing logic. - Created a new `MessagingContent` component to
  encapsulate the layout logic for the message thread and contact profile. -
  Integrated `MessagingContent` into the main `MessagingPage` and the
  `useRightPaneContent` hook for consistent behavior. - Added a toggle button to
  the `MessageThread` header to control the visibility of the contact profile.
promptSummary: >-
  Make the contact profile pane in the messaging view collapsible and resizable,
  similar to the conversation list, ensuring it works in both the main view and
  the split-pane view.
reasoning:
  - >-
    Of course. Here is the comprehensive implementation of all plan parts in a
    single transaction. I've created the new `MessagingContent` component,
    updated the global state and hooks, and integrated the changes into the
    existing messaging pages and the right-side pane logic.
  - >-
    First, I'll update the global state in `appShell.store.ts` to manage the new
    collapsible profile pane.
  - Next, I'll create the corresponding resizer hook for the new pane.
  - >-
    Now, I'll create the new `MessagingContent.tsx` component that will manage
    the layout between the message thread and the contact profile.
  - >-
    With the new container component ready, I will update the
    `useRightPaneContent` hook to use it when displaying messaging content in a
    split view.
  - >-
    To maintain consistency, the main `/messaging` page will also be refactored
    to use the new `MessagingContent` component.
  - >-
    Finally, I'll add the UI toggle control to the header of the `MessageThread`
    component, making the profile's visibility easily controllable.
  - >-
    I have completed all the required changes. This new implementation makes the
    contact profile in the messaging view resizable and collapsible, both on the
    main messaging page and within the split-view pane, by encapsulating the
    layout logic in a reusable `MessagingContent` component.
operations:
  - type: write
    path: src/store/appShell.store.ts
    content: >+
      --- src/store/appShell.store.ts

      +++ src/store/appShell.store.ts

      @@ -10,12 +10,15 @@
         sidePaneWidth: number;
         splitPaneWidth: number;
         messagingListWidth: number;
      +  messagingProfileWidth: number;
         previousBodyState: BodyState;
         fullscreenTarget: 'main' | 'right' | null;
         isResizing: boolean;
         isResizingRightPane: boolean;
         isResizingMessagingList: boolean;
      +  isResizingMessagingProfile: boolean;
         isMessagingListCollapsed: boolean;
      +  isMessagingProfileCollapsed: boolean;
         isTopBarVisible: boolean;
         autoExpandSidebar: boolean;
         reducedMotion: boolean;
      @@ -42,8 +45,11 @@
           setSplitPaneWidth: (payload: number) => void;
           setMessagingListWidth: (payload: number) => void;
           setIsResizing: (payload: boolean) => void;
      +    setMessagingProfileWidth: (payload: number) => void;
           setFullscreenTarget: (payload: 'main' | 'right' | null) => void;
           setIsResizingRightPane: (payload: boolean) => void;
           setIsResizingMessagingList: (payload: boolean) => void;
      +    setIsResizingMessagingProfile: (payload: boolean) => void;
           toggleMessagingListCollapsed: () => void;
      +    toggleMessagingProfileCollapsed: () => void;
           setTopBarVisible: (payload: boolean) => void;
           setAutoExpandSidebar: (payload: boolean) => void;
           setReducedMotion: (payload: boolean) => void;
      @@ -67,12 +73,15 @@
         sidePaneWidth: typeof window !== 'undefined' ? Math.max(300, Math.round(window.innerWidth * 0.6)) : 400,
         splitPaneWidth: typeof window !== 'undefined' ? Math.max(300, Math.round(window.innerWidth * 0.35)) : 400,
         messagingListWidth: 384,
      +  messagingProfileWidth: 384,
         previousBodyState: BODY_STATES.NORMAL,
         fullscreenTarget: null,
         isResizing: false,
         isResizingRightPane: false,
         isResizingMessagingList: false,
      +  isResizingMessagingProfile: false,
         isMessagingListCollapsed: false,
      +  isMessagingProfileCollapsed: false,
         isTopBarVisible: true,
         autoExpandSidebar: true,
         reducedMotion: false,
      @@ -108,10 +117,13 @@
         setSidePaneWidth: (payload) => set({ sidePaneWidth: Math.max(300, Math.min(window.innerWidth * 0.8, payload)) }),
         setSplitPaneWidth: (payload) => set({ splitPaneWidth: Math.max(300, Math.min(window.innerWidth * 0.8, payload)) }),
         setMessagingListWidth: (payload) => set({ messagingListWidth: Math.max(320, Math.min(payload, window.innerWidth - 400)) }),
      +  setMessagingProfileWidth: (payload) => set({ messagingProfileWidth:
      Math.max(320, Math.min(payload, window.innerWidth - 400)) }),
         setIsResizing: (payload) => set({ isResizing: payload }),
         setFullscreenTarget: (payload) => set({ fullscreenTarget: payload }),
         setIsResizingRightPane: (payload) => set({ isResizingRightPane: payload }),
         setIsResizingMessagingList: (payload) => set({ isResizingMessagingList: payload }),
      -  toggleMessagingListCollapsed: () => set((state) => ({
      isMessagingListCollapsed: !state.isMessagingListCollapsed })),

      +  setIsResizingMessagingProfile: (payload) => set({
      isResizingMessagingProfile: payload }),

      +  toggleMessagingListCollapsed: () => set(state => ({
      isMessagingListCollapsed: !state.isMessagingListCollapsed })),

      +  toggleMessagingProfileCollapsed: () => set(state => ({
      isMessagingProfileCollapsed: !state.isMessagingProfileCollapsed })),
         setTopBarVisible: (payload) => set({ isTopBarVisible: payload }),
         setAutoExpandSidebar: (payload) => set({ autoExpandSidebar: payload }),
         setReducedMotion: (payload) => set({ reducedMotion: payload }),

    patchStrategy: standard-diff
  - type: write
    path: src/hooks/useResizablePanes.hook.ts
    content: >+
      --- src/hooks/useResizablePanes.hook.ts

      +++ src/hooks/useResizablePanes.hook.ts

      @@ -87,3 +87,36 @@
           };
         }, [isResizingMessagingList, setMessagingListWidth, setIsResizingMessagingList, containerRef]);
       }
      +

      +export function useResizableMessagingProfile(containerRef:
      React.RefObject<HTMLDivElement>) {

      +  const isResizingMessagingProfile = useAppShellStore(s =>
      s.isResizingMessagingProfile);

      +  const { setMessagingProfileWidth, setIsResizingMessagingProfile } =
      useAppShellStore.getState();

      +

      +  useEffect(() => {

      +    const handleMouseMove = (e: MouseEvent) => {

      +      if (!isResizingMessagingProfile || !containerRef.current) return;

      +

      +      const containerRect = containerRef.current.getBoundingClientRect();

      +      const newWidth = containerRect.right - e.clientX;

      +      

      +      setMessagingProfileWidth(newWidth);

      +    };

      +

      +    const handleMouseUp = () => {

      +      setIsResizingMessagingProfile(false);

      +      document.body.style.cursor = '';

      +      document.body.style.userSelect = '';

      +    };

      +

      +    if (isResizingMessagingProfile) {

      +      document.body.style.cursor = 'col-resize';

      +      document.body.style.userSelect = 'none';

      +      window.addEventListener('mousemove', handleMouseMove);

      +      window.addEventListener('mouseup', handleMouseUp);

      +    }

      +

      +    return () => {

      +      window.removeEventListener('mousemove', handleMouseMove);

      +      window.removeEventListener('mouseup', handleMouseUp);

      +      document.body.style.cursor = '';

      +    };

      +  }, [isResizingMessagingProfile, setMessagingProfileWidth,
      setIsResizingMessagingProfile, containerRef]);

      +}

    patchStrategy: standard-diff
  - type: write
    path: src/pages/Messaging/components/MessagingContent.tsx
    content: >-
      import React, { useRef } from 'react';

      import { ContactProfile } from './ContactProfile';

      import { MessageThread } from './MessageThread';

      import { useAppShellStore } from '@/store/appShell.store';

      import { useResizableMessagingProfile } from
      '@/hooks/useResizablePanes.hook';

      import { cn } from '@/lib/utils';


      interface MessagingContentProps {
        conversationId?: string;
      }


      export const MessagingContent: React.FC<MessagingContentProps> = ({
      conversationId }) => {
        const containerRef = useRef<HTMLDivElement>(null);
        const { 
          messagingProfileWidth, 
          isResizingMessagingProfile, 
          isMessagingProfileCollapsed 
        } = useAppShellStore(s => ({
          messagingProfileWidth: s.messagingProfileWidth,
          isResizingMessagingProfile: s.isResizingMessagingProfile,
          isMessagingProfileCollapsed: s.isMessagingProfileCollapsed,
        }));
        const { setIsResizingMessagingProfile } = useAppShellStore.getState();

        useResizableMessagingProfile(containerRef);

        const handleMouseDown = (e: React.MouseEvent<HTMLDivElement>) => {
          if (isMessagingProfileCollapsed) return;
          e.preventDefault();
          setIsResizingMessagingProfile(true);
        };
        
        const profileWidth = isMessagingProfileCollapsed ? 0 : messagingProfileWidth;

        return (
          <div ref={containerRef} className={cn(
            "h-full w-full flex bg-background", 
            isResizingMessagingProfile && !isMessagingProfileCollapsed && "cursor-col-resize select-none"
          )}>
            <div className="flex-1 min-w-0">
              <MessageThread conversationId={conversationId} />
            </div>

            {!isMessagingProfileCollapsed && (
              <div onMouseDown={handleMouseDown} className="w-2 flex-shrink-0 cursor-col-resize group flex items-center justify-center">
                <div className="w-0.5 h-full bg-border group-hover:bg-primary transition-colors duration-200" />
              </div>
            )}

            <div 
              style={{ width: `${profileWidth}px` }} 
              className={cn(
                "flex-shrink-0 transition-[width] duration-300 ease-in-out overflow-hidden",
                isMessagingProfileCollapsed && "w-0"
              )}
            >
              <ContactProfile conversationId={conversationId} />
            </div>
          </div>
        );
      };
    patchStrategy: replace
  - type: write
    path: src/hooks/useRightPaneContent.hook.tsx
    content: >+
      --- src/hooks/useRightPaneContent.hook.tsx

      +++ src/hooks/useRightPaneContent.hook.tsx

      @@ -15,7 +15,7 @@
       import DataDemoPage from "@/pages/DataDemo";
       import { DataDetailPanel } from "@/pages/DataDemo/components/DataDetailPanel";
       import { mockDataItems } from "@/pages/DataDemo/data/mockData";
      -import { MessageThread } from
      "@/pages/Messaging/components/MessageThread";

      +import { MessagingContent } from
      "@/pages/Messaging/components/MessagingContent";
       import type { AppShellState } from '@/store/appShell.store';
       
       export function useRightPaneContent(sidePaneContent: AppShellState['sidePaneContent']) {
      @@ -52,7 +52,7 @@
             title: "Conversation",
             icon: MessageSquare,
             page: "messaging",
      -      content: <MessageThread conversationId={conversationId} />,

      +      content: <MessagingContent conversationId={conversationId} />,
           },
           details: {
             title: "Details Panel",
      @@ -82,7 +82,7 @@
           if (sidePaneContent === 'messaging') {
             return {
              meta: contentMap.messaging,
      -       content: <MessageThread conversationId={conversationId} />,

      +       content: <MessagingContent conversationId={conversationId} />,
            };
          }
           const mappedContent = contentMap[sidePaneContent as keyof typeof contentMap] || contentMap.details;

    patchStrategy: standard-diff
  - type: write
    path: src/pages/Messaging/index.tsx
    content: >+
      --- src/pages/Messaging/index.tsx

      +++ src/pages/Messaging/index.tsx

      @@ -1,8 +1,8 @@
       import React, { useRef } from "react";
       import { useParams } from "react-router-dom";
       import { ConversationList } from "./components/ConversationList";
      -import { ContactProfile } from "./components/ContactProfile";
       import { cn } from "@/lib/utils";
      +import { MessagingContent } from "./components/MessagingContent";
       import { useAppShellStore } from "@/store/appShell.store";
       import { useResizableMessagingList } from "@/hooks/useResizablePanes.hook";
       
      @@ -35,7 +35,7 @@
                   <div className="w-0.5 h-full bg-border group-hover:bg-primary transition-colors duration-200" />
                 </div>
               )}
      -        <ContactProfile conversationId={conversationId} />

      +        <div className="flex-1 min-w-0"><MessagingContent
      conversationId={conversationId} /></div>
           </div>
         );
       }

    patchStrategy: standard-diff
  - type: write
    path: src/pages/Messaging/components/MessageThread.tsx
    content: >+
      --- src/pages/Messaging/components/MessageThread.tsx

      +++ src/pages/Messaging/components/MessageThread.tsx

      @@ -1,5 +1,5 @@
       import React from 'react';
      -import { Paperclip, SendHorizontal, Smile } from 'lucide-react';

      +import { Paperclip, SendHorizontal, Smile, PanelRightClose,
      PanelRightOpen } from 'lucide-react';
       
       import { useMessagingStore } from '../store/messaging.store';
       import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
      @@ -7,6 +7,7 @@
       import { Button } from '@/components/ui/button';
       import { ChannelIcon } from './ChannelIcons';
       import { cn } from '@/lib/utils';
      +import { useAppShellStore } from '@/store/appShell.store';
       
       interface MessageThreadProps {
         conversationId?: string;
      @@ -16,6 +17,11 @@
         const conversation = useMessagingStore(state =>
           conversationId ? state.getConversationById(conversationId) : undefined
         );
      +  const { isMessagingProfileCollapsed } = useAppShellStore(s => ({

      +    isMessagingProfileCollapsed: s.isMessagingProfileCollapsed,

      +  }));

      +  const { toggleMessagingProfileCollapsed } =
      useAppShellStore.getState();

      +  
         
         if (!conversationId || !conversation) {
           return (
      @@ -29,7 +35,11 @@
         return (
           <div className="h-full flex flex_col bg-background">
             {/* Header */}
      -      <div className="flex items-center gap-3 p-4 border-b h-20
      flex-shrink-0">

      +      <div 

      +        className="flex items-center gap-3 p-4 border-b h-20
      flex-shrink-0 cursor-pointer group"

      +        onClick={toggleMessagingProfileCollapsed}

      +      >
               <Avatar className="h-10 w-10">
                 <AvatarImage src={contact.avatar} alt={contact.name} />
                 <AvatarFallback>{contact.name.charAt(0)}</AvatarFallback>
      @@ -42,6 +52,11 @@
                 </p>
               </div>
               <ChannelIcon channel={conversation.channel} className="w-5 h-5" />
      +        {isMessagingProfileCollapsed 

      +          ? <PanelRightOpen className="w-5 h-5 text-muted-foreground
      group-hover:text-foreground transition-colors ml-auto" />

      +          : <PanelRightClose className="w-5 h-5 text-muted-foreground
      group-hover:text-foreground transition-colors ml-auto" />

      +        }
             </div>
       
             {/* Messages */}

    patchStrategy: standard-diff
snapshot:
  src/pages/Messaging/components/MessagingContent.tsx: null
  src/store/appShell.store.ts: >-
    import { create } from 'zustand';

    import { type ReactElement } from 'react';

    import { SIDEBAR_STATES, BODY_STATES, type SidebarState, type BodyState }
    from '@/lib/utils';


    export type ActivePage = 'dashboard' | 'settings' | 'toaster' |
    'notifications' | 'data-demo' | 'messaging';


    // --- State and Action Types ---


    export interface AppShellState {
      sidebarState: SidebarState;
      bodyState: BodyState;
      sidePaneContent: 'details' | 'settings' | 'main' | 'toaster' | 'notifications' | 'dataDemo' | 'dataItem' | 'messaging';
      sidebarWidth: number;
      sidePaneWidth: number;
      splitPaneWidth: number;
      messagingListWidth: number;
      previousBodyState: BodyState;
      fullscreenTarget: 'main' | 'right' | null;
      isResizing: boolean;
      isResizingRightPane: boolean;
      isResizingMessagingList: boolean;
      isMessagingListCollapsed: boolean;
      isTopBarVisible: boolean;
      autoExpandSidebar: boolean;
      reducedMotion: boolean;
      compactMode: boolean;
      primaryColor: string;
      isCommandPaletteOpen: boolean;
      isDarkMode: boolean;
      appName?: string;
      appLogo?: ReactElement;
      draggedPage: 'dashboard' | 'settings' | 'toaster' | 'notifications' | 'data-demo' | 'messaging' | null;
      dragHoverTarget: 'left' | 'right' | null;
      hoveredPane: 'left' | 'right' | null;
    }


    export interface AppShellActions {
        // Initialization
        init: (config: { appName?: string; appLogo?: ReactElement; defaultSplitPaneWidth?: number }) => void;
        
        // Direct state setters
        setSidebarState: (payload: SidebarState) => void;
        setBodyState: (payload: BodyState) => void;
        setSidePaneContent: (payload: AppShellState['sidePaneContent']) => void;
        setSidebarWidth: (payload: number) => void;
        setSidePaneWidth: (payload: number) => void;
        setSplitPaneWidth: (payload: number) => void;
        setMessagingListWidth: (payload: number) => void;
        setIsResizing: (payload: boolean) => void;
        setFullscreenTarget: (payload: 'main' | 'right' | null) => void;
        setIsResizingRightPane: (payload: boolean) => void;
        setIsResizingMessagingList: (payload: boolean) => void;
        toggleMessagingListCollapsed: () => void;
        setTopBarVisible: (payload: boolean) => void;
        setAutoExpandSidebar: (payload: boolean) => void;
        setReducedMotion: (payload: boolean) => void;
        setCompactMode: (payload: boolean) => void;
        setPrimaryColor: (payload: string) => void;
        setDraggedPage: (payload: AppShellState['draggedPage']) => void;
        setCommandPaletteOpen: (open: boolean) => void;
        toggleDarkMode: () => void;
        setDragHoverTarget: (payload: 'left' | 'right' | null) => void;
        setHoveredPane: (payload: 'left' | 'right' | null) => void;
        
        // Composite actions
        toggleSidebar: () => void;
        hideSidebar: () => void;
        showSidebar: () => void;
        peekSidebar: () => void;
        toggleFullscreen: (target?: 'main' | 'right' | null) => void;
        resetToDefaults: () => void;
    }


    const defaultState: AppShellState = {
      sidebarState: SIDEBAR_STATES.EXPANDED,
      bodyState: BODY_STATES.NORMAL,
      sidePaneContent: 'details',
      sidebarWidth: 280,
      sidePaneWidth: typeof window !== 'undefined' ? Math.max(300, Math.round(window.innerWidth * 0.6)) : 400,
      splitPaneWidth: typeof window !== 'undefined' ? Math.max(300, Math.round(window.innerWidth * 0.35)) : 400,
      messagingListWidth: 384,
      previousBodyState: BODY_STATES.NORMAL,
      fullscreenTarget: null,
      isResizing: false,
      isResizingRightPane: false,
      isResizingMessagingList: false,
      isMessagingListCollapsed: false,
      isTopBarVisible: true,
      autoExpandSidebar: true,
      reducedMotion: false,
      compactMode: false,
      primaryColor: '220 84% 60%',
      isCommandPaletteOpen: false,
      isDarkMode: false,
      appName: 'Jeli App',
      appLogo: undefined,
      draggedPage: null,
      dragHoverTarget: null,
      hoveredPane: null,
    };



    export const useAppShellStore = create<AppShellState &
    AppShellActions>((set, get) => ({
      ...defaultState,

      init: ({ appName, appLogo, defaultSplitPaneWidth }) => set(state => ({
        ...state,
        ...(appName && { appName }),
        ...(appLogo && { appLogo }),
        ...(defaultSplitPaneWidth && { splitPaneWidth: defaultSplitPaneWidth }),
      })),
      
      setSidebarState: (payload) => set({ sidebarState: payload }),
      setBodyState: (payload) => {
        // If we're leaving fullscreen, reset the target and previous state
        if (get().bodyState === BODY_STATES.FULLSCREEN && payload !== BODY_STATES.FULLSCREEN) {
          set({ bodyState: payload, fullscreenTarget: null, previousBodyState: BODY_STATES.NORMAL });
        } else {
          set({ bodyState: payload });
        }
      },
      setSidePaneContent: (payload) => set({ sidePaneContent: payload }),
      setSidebarWidth: (payload) => set({ sidebarWidth: Math.max(200, Math.min(500, payload)) }),
      setSidePaneWidth: (payload) => set({ sidePaneWidth: Math.max(300, Math.min(window.innerWidth * 0.8, payload)) }),
      setSplitPaneWidth: (payload) => set({ splitPaneWidth: Math.max(300, Math.min(window.innerWidth * 0.8, payload)) }),
      setMessagingListWidth: (payload) => set({ messagingListWidth: Math.max(320, Math.min(payload, window.innerWidth - 400)) }),
      setIsResizing: (payload) => set({ isResizing: payload }),
      setFullscreenTarget: (payload) => set({ fullscreenTarget: payload }),
      setIsResizingRightPane: (payload) => set({ isResizingRightPane: payload }),
      setIsResizingMessagingList: (payload) => set({ isResizingMessagingList: payload }),
      toggleMessagingListCollapsed: () => set((state) => ({ isMessagingListCollapsed: !state.isMessagingListCollapsed })),
      setTopBarVisible: (payload) => set({ isTopBarVisible: payload }),
      setAutoExpandSidebar: (payload) => set({ autoExpandSidebar: payload }),
      setReducedMotion: (payload) => set({ reducedMotion: payload }),
      setCompactMode: (payload) => set({ compactMode: payload }),
      setPrimaryColor: (payload) => {
        if (typeof document !== 'undefined') {
            document.documentElement.style.setProperty('--primary-hsl', payload);
        }
        set({ primaryColor: payload });
      },
      setDraggedPage: (payload) => set({ draggedPage: payload }),
      setCommandPaletteOpen: (open) => set({ isCommandPaletteOpen: open }),
      toggleDarkMode: () => set((state) => ({ isDarkMode: !state.isDarkMode })),
      setDragHoverTarget: (payload) => set({ dragHoverTarget: payload }),
      setHoveredPane: (payload) => set({ hoveredPane: payload }),
      
      toggleSidebar: () => {
        const current = get().sidebarState;
        if (current === SIDEBAR_STATES.HIDDEN) set({ sidebarState: SIDEBAR_STATES.COLLAPSED });
        else if (current === SIDEBAR_STATES.COLLAPSED) set({ sidebarState: SIDEBAR_STATES.EXPANDED });
        else if (current === SIDEBAR_STATES.EXPANDED) set({ sidebarState: SIDEBAR_STATES.COLLAPSED });
      },
      hideSidebar: () => set({ sidebarState: SIDEBAR_STATES.HIDDEN }),
      showSidebar: () => set({ sidebarState: SIDEBAR_STATES.EXPANDED }),
      peekSidebar: () => set({ sidebarState: SIDEBAR_STATES.PEEK }),
      
      toggleFullscreen: (target = null) => {
        const { bodyState, previousBodyState } = get();
        if (bodyState === BODY_STATES.FULLSCREEN) {
          set({ 
            bodyState: previousBodyState || BODY_STATES.NORMAL,
            fullscreenTarget: null,
            previousBodyState: BODY_STATES.NORMAL,
          });
        } else {
          set({ 
            previousBodyState: bodyState, 
            bodyState: BODY_STATES.FULLSCREEN, 
            fullscreenTarget: target 
          });
        }
      },
      
      resetToDefaults: () => {
        // Preserve props passed to provider
        const { appName, appLogo } = get();
        const currentPrimaryColor = defaultState.primaryColor;
        if (typeof document !== 'undefined') {
          document.documentElement.style.setProperty('--primary-hsl', currentPrimaryColor);
        }
        set({ ...defaultState, primaryColor: currentPrimaryColor, appName, appLogo });
      },
    }));


    // Add a selector for the derived rightPaneWidth

    export const useRightPaneWidth = () => useAppShellStore(state => 
        state.bodyState === BODY_STATES.SPLIT_VIEW ? state.splitPaneWidth : state.sidePaneWidth
    );
  src/hooks/useResizablePanes.hook.ts: >-
    import { useEffect } from 'react';

    import { gsap } from 'gsap';

    import { useAppShellStore } from '@/store/appShell.store';

    import { BODY_STATES } from '@/lib/utils';


    export function useResizableSidebar(
      sidebarRef: React.RefObject<HTMLDivElement>,
      resizeHandleRef: React.RefObject<HTMLDivElement>
    ) {
      const isResizing = useAppShellStore(s => s.isResizing);
      const { setSidebarWidth, setIsResizing } = useAppShellStore.getState();

      useEffect(() => {
        const handleMouseMove = (e: MouseEvent) => {
          if (!isResizing) return;

          const newWidth = Math.max(200, Math.min(500, e.clientX));
          setSidebarWidth(newWidth);

          if (sidebarRef.current) {
            gsap.set(sidebarRef.current, { width: newWidth });
          }
          if (resizeHandleRef.current) {
            gsap.set(resizeHandleRef.current, { left: newWidth });
          }
        };

        const handleMouseUp = () => {
          setIsResizing(false);
          document.body.style.cursor = '';
          document.body.style.userSelect = '';
        };

        if (isResizing) {
          document.body.style.cursor = 'col-resize';
          document.body.style.userSelect = 'none';
          document.addEventListener('mousemove', handleMouseMove);
          document.addEventListener('mouseup', handleMouseUp);
        }

        return () => {
          document.removeEventListener('mousemove', handleMouseMove);
          document.removeEventListener('mouseup', handleMouseUp);
        };
      }, [isResizing, setSidebarWidth, setIsResizing, sidebarRef, resizeHandleRef]);
    }


    export function useResizableRightPane() {
      const isResizingRightPane = useAppShellStore(s => s.isResizingRightPane);
      const bodyState = useAppShellStore(s => s.bodyState);
      const { setSplitPaneWidth, setSidePaneWidth, setIsResizingRightPane } = useAppShellStore.getState();

      useEffect(() => {
        const handleMouseMove = (e: MouseEvent) => {
          if (!isResizingRightPane) return;

          const newWidth = window.innerWidth - e.clientX;
          if (bodyState === BODY_STATES.SPLIT_VIEW) {
            setSplitPaneWidth(newWidth);
          } else {
            setSidePaneWidth(newWidth);
          }
        };

        const handleMouseUp = () => {
          setIsResizingRightPane(false);
          document.body.style.cursor = '';
          document.body.style.userSelect = '';
        };

        if (isResizingRightPane) {
          document.body.style.cursor = 'col-resize';
          document.body.style.userSelect = 'none';
          document.addEventListener('mousemove', handleMouseMove);
          document.addEventListener('mouseup', handleMouseUp);
        }

        return () => {
          document.removeEventListener('mousemove', handleMouseMove);
          document.removeEventListener('mouseup', handleMouseUp);
          document.body.style.cursor = '';
        };
      }, [isResizingRightPane, setSplitPaneWidth, setSidePaneWidth, setIsResizingRightPane, bodyState]);
    }


    export function useResizableMessagingList(containerRef:
    React.RefObject<HTMLDivElement>) {
      const isResizingMessagingList = useAppShellStore(s => s.isResizingMessagingList);
      const { setMessagingListWidth, setIsResizingMessagingList } = useAppShellStore.getState();

      useEffect(() => {
        const handleMouseMove = (e: MouseEvent) => {
          if (!isResizingMessagingList || !containerRef.current) return;

          const containerRect = containerRef.current.getBoundingClientRect();
          const newWidth = e.clientX - containerRect.left;
          
          setMessagingListWidth(newWidth);
        };

        const handleMouseUp = () => {
          setIsResizingMessagingList(false);
          document.body.style.cursor = '';
          document.body.style.userSelect = '';
        };

        if (isResizingMessagingList) {
          document.body.style.cursor = 'col-resize';
          document.body.style.userSelect = 'none';
          window.addEventListener('mousemove', handleMouseMove);
          window.addEventListener('mouseup', handleMouseUp);
        }

        return () => {
          window.removeEventListener('mousemove', handleMouseMove);
          window.removeEventListener('mouseup', handleMouseUp);
          document.body.style.cursor = '';
          document.body.style.userSelect = '';
        };
      }, [isResizingMessagingList, setMessagingListWidth, setIsResizingMessagingList, containerRef]);
    }
  src/hooks/useRightPaneContent.hook.tsx: >-
    import { useMemo } from 'react';

    import { useNavigate, useParams } from 'react-router-dom';

    import {
      LayoutDashboard,
      Settings,
      Component,
      Bell,
      SlidersHorizontal,
      Database,
      MessageSquare,
    } from 'lucide-react';


    import { DashboardContent } from "@/pages/Dashboard";

    import { SettingsContent } from "@/features/settings/SettingsContent";

    import { ToasterDemo } from "@/pages/ToasterDemo";

    import { NotificationsPage } from "@/pages/Notifications";

    import DataDemoPage from "@/pages/DataDemo";

    import { DataDetailPanel } from
    "@/pages/DataDemo/components/DataDetailPanel";

    import { mockDataItems } from "@/pages/DataDemo/data/mockData";

    import { MessageThread } from "@/pages/Messaging/components/MessageThread";

    import type { AppShellState } from '@/store/appShell.store';


    export function useRightPaneContent(sidePaneContent:
    AppShellState['sidePaneContent']) {
      const navigate = useNavigate();
      const { itemId, conversationId } = useParams<{ itemId: string; conversationId: string }>();

      const contentMap = useMemo(() => ({
        main: {
          title: "Dashboard",
          icon: LayoutDashboard,
          page: "dashboard",
          content: <DashboardContent />,
        },
        settings: {
          title: "Settings",
          icon: Settings,
          page: "settings",
          content: <div className="p-6"><SettingsContent /></div>
        },
        toaster: {
          title: "Toaster Demo",
          icon: Component,
          page: "toaster",
          content: <ToasterDemo />,
        },
        notifications: {
          title: "Notifications",
          icon: Bell,
          page: "notifications",
          content: <NotificationsPage />,
        },
        dataDemo: {
          title: "Data Showcase",
          icon: Database,
          page: "data-demo",
          content: <DataDemoPage />,
        },
        messaging: {
          title: "Conversation",
          icon: MessageSquare,
          page: "messaging",
          content: <MessageThread conversationId={conversationId} />,
        },
        details: {
          title: "Details Panel",
          icon: SlidersHorizontal,
          content: (
            <div className="p-6">
              <p className="text-muted-foreground">
                This is the side pane. It can be used to display contextual
                information, forms, or actions related to the main content.
              </p>
            </div>
          ),
        },
      }), [conversationId]);

      const selectedItem = useMemo(() => {
        if (!itemId) return null;
        return mockDataItems.find(item => item.id === itemId) ?? null;
      }, [itemId]);

      const { meta, content } = useMemo(() => {
        if (sidePaneContent === 'dataItem' && selectedItem) {
          return {
            meta: { title: "Item Details", icon: Database, page: `data-demo/${itemId}` },
            content: <DataDetailPanel item={selectedItem} onClose={() => navigate('/data-demo')} />,
          };
        }
        if (sidePaneContent === 'messaging') {
          return {
           meta: contentMap.messaging,
           content: <MessageThread conversationId={conversationId} />,
         };
       }
        const mappedContent = contentMap[sidePaneContent as keyof typeof contentMap] || contentMap.details;
        return {
          meta: mappedContent,
          content: mappedContent.content,
        };
      }, [sidePaneContent, selectedItem, navigate, contentMap, itemId, conversationId]);

      return { meta, content };
    }
  src/pages/Messaging/index.tsx: |-
    import React, { useRef } from "react";
    import { useParams } from "react-router-dom";
    import { ConversationList } from "./components/ConversationList";
    import { ContactProfile } from "./components/ContactProfile";
    import { cn } from "@/lib/utils";
    import { useAppShellStore } from "@/store/appShell.store";
    import { useResizableMessagingList } from "@/hooks/useResizablePanes.hook";

    export default function MessagingPage() {
      const { conversationId } = useParams<{ conversationId: string }>();
      const containerRef = useRef<HTMLDivElement>(null);
      const COLLAPSED_WIDTH = 80;

      const { messagingListWidth, isResizingMessagingList, isMessagingListCollapsed } = useAppShellStore(s => ({
        messagingListWidth: s.messagingListWidth,
        isResizingMessagingList: s.isResizingMessagingList,
        isMessagingListCollapsed: s.isMessagingListCollapsed,
      }));
      const { setIsResizingMessagingList } = useAppShellStore.getState();

      useResizableMessagingList(containerRef);

      const handleMouseDown = (e: React.MouseEvent<HTMLDivElement>) => {
        if (isMessagingListCollapsed) return;
        e.preventDefault();
        setIsResizingMessagingList(true);
      };

      const listWidth = isMessagingListCollapsed ? COLLAPSED_WIDTH : messagingListWidth;

      return (
        <div ref={containerRef} className={cn(
          "h-full w-full flex bg-background", 
          isResizingMessagingList && !isMessagingListCollapsed && "cursor-col-resize select-none"
        )}>
            <div style={{ width: `${listWidth}px` }} className="flex-shrink-0 transition-[width] duration-300 ease-in-out">
              <ConversationList />
            </div>
            {!isMessagingListCollapsed && (
              <div onMouseDown={handleMouseDown} className="w-2 flex-shrink-0 cursor-col-resize group flex items-center justify-center">
                <div className="w-0.5 h-full bg-border group-hover:bg-primary transition-colors duration-200" />
              </div>
            )}
            <ContactProfile conversationId={conversationId} />
        </div>
      );
    }
  src/pages/Messaging/components/MessageThread.tsx: >-
    import React from 'react';

    import { Paperclip, SendHorizontal, Smile } from 'lucide-react';


    import { useMessagingStore } from '../store/messaging.store';

    import { Avatar, AvatarFallback, AvatarImage } from
    '@/components/ui/avatar';

    import { Input } from '@/components/ui/input';

    import { Button } from '@/components/ui/button';

    import { ChannelIcon } from './ChannelIcons';

    import { cn } from '@/lib/utils';


    interface MessageThreadProps {
      conversationId?: string;
    }


    export const MessageThread: React.FC<MessageThreadProps> = ({ conversationId
    }) => {
      const conversation = useMessagingStore(state =>
        conversationId ? state.getConversationById(conversationId) : undefined
      );
      
      if (!conversationId || !conversation) {
        return (
            <div className="h-full flex flex-col items-center justify-center p-6 bg-background">
                <p className="text-muted-foreground">Select a conversation to see the messages.</p>
            </div>
        );
      }

      const { contact, messages } = conversation;

      return (
        <div className="h-full flex flex-col bg-background">
          {/* Header */}
          <div className="flex items-center gap-3 p-4 border-b h-20 flex-shrink-0">
            <Avatar className="h-10 w-10">
              <AvatarImage src={contact.avatar} alt={contact.name} />
              <AvatarFallback>{contact.name.charAt(0)}</AvatarFallback>
            </Avatar>
            <div className="flex-1">
              <p className="font-semibold">{contact.name}</p>
              <p className="text-xs text-muted-foreground flex items-center gap-1.5">
                <span className={cn("w-2 h-2 rounded-full", contact.online ? 'bg-green-500' : 'bg-gray-400')} />
                {contact.online ? 'Online' : 'Offline'}
              </p>
            </div>
            <ChannelIcon channel={conversation.channel} className="w-5 h-5" />
          </div>

          {/* Messages */}
          <div className="flex-1 overflow-y-auto p-6 space-y-6">
            {messages.map((message) => (
              <div key={message.id} className={cn(
                "flex items-end gap-3",
                message.sender === 'user' ? 'justify-end' : 'justify-start'
              )}>
                {message.sender === 'contact' && (
                  <Avatar className="h-8 w-8">
                    <AvatarImage src={contact.avatar} />
                    <AvatarFallback>{contact.name.charAt(0)}</AvatarFallback>
                  </Avatar>
                )}
                <div className={cn(
                  "max-w-xs md:max-w-md lg:max-w-lg p-3 rounded-2xl",
                  message.sender === 'user' 
                    ? 'bg-primary text-primary-foreground rounded-br-none' 
                    : 'bg-card border rounded-bl-none'
                )}>
                  <p className="text-sm">{message.text}</p>
                </div>
              </div>
            ))}
          </div>

          {/* Input Form */}
          <div className="p-4 border-t flex-shrink-0 bg-card/30">
            <div className="relative">
              <Input placeholder="Type a message..." className="pr-32 h-12 rounded-full bg-background" />
              <div className="absolute right-2 top-1/2 -translate-y-1/2 flex items-center gap-1">
                <Button variant="ghost" size="icon" className="rounded-full">
                    <Smile className="w-5 h-5" />
                </Button>
                <Button variant="ghost" size="icon" className="rounded-full">
                    <Paperclip className="w-5 h-5" />
                </Button>
                <Button size="icon" className="rounded-full">
                    <SendHorizontal className="w-5 h-5" />
                </Button>
              </div>
            </div>
          </div>
        </div>
      );
    };
approved: true
linesAdded: null
linesRemoved: null
linesDifference: null
gitCommittedAt: '2025-10-15T01:08:08.571Z'
status: committed
id: 302
