uuid: c257c742-dd89-4091-a182-ed3026330084
projectId: jeli-app-shell
createdAt: '2025-10-12T10:02:19.308Z'
gitCommitMsg: >-
  fix(DataDemo): animate only new items on infinite scroll

  - Updated the animation logic in DataCardView, DataListView, and
  DataTableView. - Implemented a counter using `useRef` to track already
  animated items. - Modified the GSAP selector to target only new DOM elements
  when data is appended. - This prevents the animation from re-playing on the
  entire list and provides a smooth "load more" effect.
promptSummary: >-
  The animations on the data demo page restart for the entire list when loading
  more items.
reasoning:
  - >-
    You've noticed that the animations replay for all items when new ones are
    loaded, which is not the desired effect. This happens because the animation
    logic reruns on the entire list whenever the `data` prop changes.
  - >-
    To fix this, I will modify the animation logic in `DataCardView.tsx`,
    `DataListView.tsx`, and `DataTableView.tsx`. The new approach will track the
    number of items that have already been animated. When new items are loaded,
    the animation will be applied *only* to the newly added elements, ensuring a
    smooth and correct visual effect for the infinite scroll feature.
  - Here are the specific changes for each file.
  - '### 1. Update Card View Animation'
  - >-
    I'll adjust `DataCardView.tsx` to animate only the new cards that are
    appended to the list.
  - '### 2. Update List View Animation'
  - >-
    Similarly, I'll update `DataListView.tsx` to ensure only new list items are
    animated upon load.
  - '### 3. Update Table View Animation'
  - Finally, I'll apply the same fix to `DataTableView.tsx` for the table rows.
  - >-
    These changes will resolve the animation issue and provide a much smoother
    user experience when loading more data.
operations:
  - type: write
    path: src/pages/DataDemo/components/DataCardView.tsx
    content: >+
      --- src/pages/DataDemo/components/DataCardView.tsx

      +++ src/pages/DataDemo/components/DataCardView.tsx

      @@ -9,22 +9,27 @@
       
       export function DataCardView({ data, onItemSelect, selectedItem, isGrid = false }: ViewProps) {
         const containerRef = useRef<HTMLDivElement>(null)
      +  const animatedItemsCount = useRef(0)
       
         useLayoutEffect(() => {
      -    if (containerRef.current) {

      -      gsap.fromTo(containerRef.current.children, 

      -        { y: 40, opacity: 0, scale: 0.95 },

      -        {

      -          duration: 0.6,

      -          y: 0,

      -          opacity: 1,

      -          scale: 1,

      -          stagger: 0.1,

      -          ease: "power2.out",

      -        }

      -      )

      +    if (containerRef.current && data.length > animatedItemsCount.current)
      {

      +      const newItems = Array.from(containerRef.current.children).slice(

      +        animatedItemsCount.current

      +      );

      +      gsap.fromTo(

      +        newItems,

      +        { y: 40, opacity: 0, scale: 0.95 },

      +        {

      +          duration: 0.6,

      +          y: 0,

      +          opacity: 1,

      +          scale: 1,

      +          stagger: 0.1,

      +          ease: 'power2.out',

      +        },

      +      );

      +      animatedItemsCount.current = data.length;
           }
      -  }, [data])

      +  }, [data]);
       
         if (data.length === 0) {
           return <EmptyState />

    patchStrategy: standard-diff
  - type: write
    path: src/pages/DataDemo/components/DataListView.tsx
    content: >+
      --- src/pages/DataDemo/components/DataListView.tsx

      +++ src/pages/DataDemo/components/DataListView.tsx

      @@ -9,22 +9,26 @@
       
       export function DataListView({ data, onItemSelect, selectedItem }: ViewProps) {
         const listRef = useRef<HTMLDivElement>(null)
      +  const animatedItemsCount = useRef(0)
       
         useLayoutEffect(() => {
      -    if (listRef.current) {

      -      gsap.fromTo(listRef.current.children,

      +    if (listRef.current && data.length > animatedItemsCount.current) {

      +      const newItems =
      Array.from(listRef.current.children).slice(animatedItemsCount.current);

      +      gsap.fromTo(newItems,
               { y: 30, opacity: 0 },
               {
                 duration: 0.5,
                 y: 0,
                 opacity: 1,
                 stagger: 0.08,
      -          ease: "power2.out"

      -        }

      -      )

      +          ease: "power2.out",

      +        },

      +      );

      +      animatedItemsCount.current = data.length;
           }
      -  }, [data])

      +  }, [data]);
       
         if (data.length === 0) {
           return <EmptyState />

    patchStrategy: standard-diff
  - type: write
    path: src/pages/DataDemo/components/DataTableView.tsx
    content: |+
      --- src/pages/DataDemo/components/DataTableView.tsx
      +++ src/pages/DataDemo/components/DataTableView.tsx
      @@ -19,22 +19,27 @@
         const [sortField, setSortField] = useState<SortField | null>(null)
         const [sortDirection, setSortDirection] = useState<SortDirection>(null)
         const tableRef = useRef<HTMLTableElement>(null)
      +  const animatedItemsCount = useRef(0)
       
         useLayoutEffect(() => {
      -    if (tableRef.current) {
      -      gsap.fromTo(tableRef.current.querySelectorAll('tbody tr'),
      +    if (tableRef.current && data.length > animatedItemsCount.current) {
      +      const newItems = Array.from(
      +        tableRef.current.querySelectorAll('tbody tr')
      +      ).slice(animatedItemsCount.current);
      +      gsap.fromTo(newItems,
               { y: 20, opacity: 0 },
               {
                 duration: 0.5,
                 y: 0,
                 opacity: 1,
                 stagger: 0.05,
      -          ease: "power2.out"
      -        }
      -      )
      +          ease: "power2.out",
      +        },
      +      );
      +      animatedItemsCount.current = data.length;
           }
      -  }, [data])
      +  }, [data]);
       
         const handleSort = (field: SortField) => {
           if (sortField === field) {

    patchStrategy: standard-diff
snapshot:
  src/pages/DataDemo/components/DataCardView.tsx: >-
    import { useRef, useLayoutEffect } from 'react'

    import { gsap } from 'gsap'

    import { cn } from '@/lib/utils'

    import { Badge } from '@/components/ui/badge'

    import { Avatar } from '@/components/ui/avatar'

    import { Calendar, Eye, Heart, Share, ArrowUpRight, Tag } from
    'lucide-react'

    import type { ViewProps } from '../types'

    import { getStatusColor, getPriorityColor } from '../utils'

    import { EmptyState } from './EmptyState'


    export function DataCardView({ data, onItemSelect, selectedItem, isGrid =
    false }: ViewProps) {
      const containerRef = useRef<HTMLDivElement>(null)

      useLayoutEffect(() => {
        if (containerRef.current) {
          gsap.fromTo(containerRef.current.children, 
            { y: 40, opacity: 0, scale: 0.95 },
            {
              duration: 0.6,
              y: 0,
              opacity: 1,
              scale: 1,
              stagger: 0.1,
              ease: "power2.out",
            }
          )
        }
      }, [data])

      if (data.length === 0) {
        return <EmptyState />
      }

      return (
        <div 
          ref={containerRef}
          className={cn(
            "gap-6",
            isGrid 
              ? "columns-1 sm:columns-2 lg:columns-3 xl:columns-4 space-y-6" 
              : "grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 2xl:grid-cols-4"
          )}
        >
          {data.map((item) => {
            const isSelected = selectedItem?.id === item.id
            
            return (
              <div
                key={item.id}
                onClick={() => onItemSelect(item)}
                className={cn(
                  "group relative overflow-hidden rounded-3xl border bg-card/50 backdrop-blur-sm transition-all duration-500 cursor-pointer",
                  "hover:bg-card/80 hover:shadow-xl hover:shadow-primary/10 hover:border-primary/30 hover:-translate-y-2",
                  "active:scale-[0.98]",
                  isSelected && "ring-2 ring-primary/30 border-primary/40 bg-card/90 shadow-lg shadow-primary/20",
                  isGrid && "break-inside-avoid mb-6"
                )}
              >
                {/* Card Header with Thumbnail */}
                <div className="relative p-6 pb-4">
                  <div className="flex items-start justify-between mb-4">
                    <div className="w-16 h-16 bg-gradient-to-br from-primary/20 to-primary/10 rounded-2xl flex items-center justify-center text-3xl group-hover:scale-110 transition-transform duration-300">
                      {item.thumbnail}
                    </div>
                    <ArrowUpRight className="w-5 h-5 text-muted-foreground group-hover:text-primary group-hover:translate-x-1 group-hover:-translate-y-1 transition-all duration-300" />
                  </div>

                  {/* Priority indicator */}
                  <div className="absolute top-4 right-4">
                    <div className={cn(
                      "w-3 h-3 rounded-full",
                      item.priority === 'critical' && "bg-red-500",
                      item.priority === 'high' && "bg-orange-500",
                      item.priority === 'medium' && "bg-blue-500",
                      item.priority === 'low' && "bg-green-500"
                    )} />
                  </div>
                </div>

                {/* Card Content */}
                <div className="px-6 pb-6">
                  {/* Title and Description */}
                  <h3 className="font-semibold text-lg mb-2 group-hover:text-primary transition-colors line-clamp-2">
                    {item.title}
                  </h3>
                  <p className="text-muted-foreground text-sm mb-4 line-clamp-3">
                    {item.description}
                  </p>

                  {/* Status and Category */}
                  <div className="flex items-center gap-2 mb-4">
                    <Badge variant="outline" className={getStatusColor(item.status)}>
                      {item.status}
                    </Badge>
                    <Badge variant="outline" className="bg-accent/50 text-xs">
                      {item.category}
                    </Badge>
                  </div>

                  {/* Tags */}
                  <div className="flex items-center gap-1 mb-4">
                    <Tag className="w-3 h-3 text-muted-foreground" />
                    <div className="flex flex-wrap gap-1">
                      {item.tags.slice(0, 3).map((tag, index) => (
                        <span key={index} className="text-xs text-muted-foreground bg-muted/50 px-2 py-1 rounded-md">
                          {tag}
                        </span>
                      ))}
                      {item.tags.length > 3 && (
                        <span className="text-xs text-muted-foreground">
                          +{item.tags.length - 3}
                        </span>
                      )}
                    </div>
                  </div>

                  {/* Progress */}
                  <div className="mb-4">
                    <div className="flex items-center justify-between mb-2">
                      <span className="text-xs text-muted-foreground">Progress</span>
                      <span className="text-xs font-semibold">{item.metrics.completion}%</span>
                    </div>
                    <div className="w-full bg-muted rounded-full h-2">
                      <div 
                        className="bg-gradient-to-r from-primary to-primary/80 h-2 rounded-full transition-all duration-700 ease-out"
                        style={{ width: `${item.metrics.completion}%` }}
                      />
                    </div>
                  </div>

                  {/* Assignee */}
                  <div className="flex items-center gap-3 mb-4">
                    <Avatar className="w-8 h-8 text-sm">
                      {item.assignee.avatar}
                    </Avatar>
                    <div className="flex-1 min-w-0">
                      <p className="text-sm font-medium truncate">
                        {item.assignee.name}
                      </p>
                      <p className="text-xs text-muted-foreground truncate">
                        {item.assignee.email}
                      </p>
                    </div>
                  </div>

                  {/* Metrics */}
                  <div className="flex items-center justify-between text-xs text-muted-foreground">
                    <div className="flex items-center gap-3">
                      <div className="flex items-center gap-1">
                        <Eye className="w-3 h-3" />
                        {item.metrics.views}
                      </div>
                      <div className="flex items-center gap-1">
                        <Heart className="w-3 h-3" />
                        {item.metrics.likes}
                      </div>
                      <div className="flex items-center gap-1">
                        <Share className="w-3 h-3" />
                        {item.metrics.shares}
                      </div>
                    </div>
                    <div className="flex items-center gap-1">
                      <Calendar className="w-3 h-3" />
                      {new Date(item.updatedAt).toLocaleDateString()}
                    </div>
                  </div>
                </div>

                {/* Hover gradient overlay */}
                <div className="absolute inset-0 bg-gradient-to-br from-primary/5 via-transparent to-primary/5 opacity-0 group-hover:opacity-100 transition-opacity duration-500 pointer-events-none" />
                
                {/* Selection indicator */}
                {isSelected && (
                  <div className="absolute inset-0 bg-gradient-to-br from-primary/10 to-primary/5 pointer-events-none" />
                )}
              </div>
            )
          })}
        </div>
      )
    }
  src/pages/DataDemo/components/DataListView.tsx: >-
    import { useRef, useLayoutEffect } from 'react'

    import { gsap } from 'gsap'

    import { cn } from '@/lib/utils'

    import { Badge } from '@/components/ui/badge'

    import { Avatar } from '@/components/ui/avatar'

    import { Calendar, Eye, Heart, Share, ArrowRight } from 'lucide-react'

    import type { ViewProps } from '../types'

    import { getStatusColor, getPriorityColor } from '../utils'

    import { EmptyState } from './EmptyState'


    export function DataListView({ data, onItemSelect, selectedItem }:
    ViewProps) {
      const listRef = useRef<HTMLDivElement>(null)

      useLayoutEffect(() => {
        if (listRef.current) {
          gsap.fromTo(listRef.current.children,
            { y: 30, opacity: 0 },
            {
              duration: 0.5,
              y: 0,
              opacity: 1,
              stagger: 0.08,
              ease: "power2.out"
            }
          )
        }
      }, [data])

      if (data.length === 0) {
        return <EmptyState />
      }

      return (
        <div ref={listRef} className="space-y-4">
          {data.map((item) => {
            const isSelected = selectedItem?.id === item.id
            
            return (
              <div
                key={item.id}
                onClick={() => onItemSelect(item)}
                className={cn(
                  "group relative overflow-hidden rounded-2xl border bg-card/50 backdrop-blur-sm transition-all duration-300 cursor-pointer",
                  "hover:bg-card/80 hover:shadow-lg hover:shadow-primary/5 hover:border-primary/20",
                  "active:scale-[0.99]",
                  isSelected && "ring-2 ring-primary/20 border-primary/30 bg-card/90"
                )}
              >
                <div className="p-6">
                  <div className="flex items-start gap-4">
                    {/* Thumbnail */}
                    <div className="flex-shrink-0">
                      <div className="w-14 h-14 bg-gradient-to-br from-primary/20 to-primary/10 rounded-xl flex items-center justify-center text-2xl">
                        {item.thumbnail}
                      </div>
                    </div>

                    {/* Content */}
                    <div className="flex-1 min-w-0">
                      <div className="flex items-start justify-between mb-3">
                        <div className="flex-1 min-w-0">
                          <h3 className="font-semibold text-lg mb-1 group-hover:text-primary transition-colors">
                            {item.title}
                          </h3>
                          <p className="text-muted-foreground text-sm mb-3 line-clamp-2">
                            {item.description}
                          </p>
                        </div>
                        <ArrowRight className="w-5 h-5 text-muted-foreground group-hover:text-primary group-hover:translate-x-1 transition-all duration-300 ml-4 flex-shrink-0" />
                      </div>

                      {/* Badges */}
                      <div className="flex items-center gap-2 mb-4">
                        <Badge variant="outline" className={getStatusColor(item.status)}>
                          {item.status}
                        </Badge>
                        <Badge variant="outline" className={getPriorityColor(item.priority)}>
                          {item.priority}
                        </Badge>
                        <Badge variant="outline" className="bg-accent/50">
                          {item.category}
                        </Badge>
                      </div>

                      {/* Meta info */}
                      <div className="flex items-center justify-between">
                        <div className="flex items-center gap-4">
                          {/* Assignee */}
                          <div className="flex items-center gap-2">
                            <Avatar className="w-7 h-7 text-sm">
                              {item.assignee.avatar}
                            </Avatar>
                            <span className="text-sm text-muted-foreground font-medium">
                              {item.assignee.name}
                            </span>
                          </div>

                          {/* Date */}
                          <div className="flex items-center gap-1 text-xs text-muted-foreground">
                            <Calendar className="w-3 h-3" />
                            {new Date(item.updatedAt).toLocaleDateString()}
                          </div>
                        </div>

                        {/* Metrics */}
                        <div className="flex items-center gap-4 text-xs text-muted-foreground">
                          <div className="flex items-center gap-1">
                            <Eye className="w-3 h-3" />
                            {item.metrics.views}
                          </div>
                          <div className="flex items-center gap-1">
                            <Heart className="w-3 h-3" />
                            {item.metrics.likes}
                          </div>
                          <div className="flex items-center gap-1">
                            <Share className="w-3 h-3" />
                            {item.metrics.shares}
                          </div>
                        </div>
                      </div>

                      {/* Progress bar */}
                      <div className="mt-4">
                        <div className="flex items-center justify-between mb-2">
                          <span className="text-xs text-muted-foreground">Progress</span>
                          <span className="text-xs font-medium">{item.metrics.completion}%</span>
                        </div>
                        <div className="w-full bg-muted rounded-full h-1.5">
                          <div 
                            className="bg-gradient-to-r from-primary to-primary/80 h-1.5 rounded-full transition-all duration-500 ease-out"
                            style={{ width: `${item.metrics.completion}%` }}
                          />
                        </div>
                      </div>
                    </div>
                  </div>
                </div>

                {/* Hover gradient overlay */}
                <div className="absolute inset-0 bg-gradient-to-r from-primary/5 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300 pointer-events-none" />
              </div>
            )
          })}
        </div>
      )
    }
  src/pages/DataDemo/components/DataTableView.tsx: >-
    import { useState, useRef, useLayoutEffect } from 'react'

    import { gsap } from 'gsap'

    import { cn } from '@/lib/utils'

    import { Badge } from '@/components/ui/badge'

    import { Avatar } from '@/components/ui/avatar'

    import { 
      Calendar, 
      Eye, 
      Heart, 
      Share, 
      ArrowUpDown, 
      ArrowUp, 
      ArrowDown,
      MoreHorizontal,
      ExternalLink
    } from 'lucide-react'

    import type { ViewProps, DataItem } from '../types'

    import { getStatusColor, getPriorityColor } from '../utils'

    import { EmptyState } from './EmptyState'


    type SortField = keyof DataItem | 'assignee.name' | 'metrics.views' |
    'metrics.completion'

    type SortDirection = 'asc' | 'desc' | null


    export function DataTableView({ data, onItemSelect, selectedItem }:
    ViewProps) {
      const [sortField, setSortField] = useState<SortField | null>(null)
      const [sortDirection, setSortDirection] = useState<SortDirection>(null)
      const tableRef = useRef<HTMLTableElement>(null)

      useLayoutEffect(() => {
        if (tableRef.current) {
          gsap.fromTo(tableRef.current.querySelectorAll('tbody tr'),
            { y: 20, opacity: 0 },
            {
              duration: 0.5,
              y: 0,
              opacity: 1,
              stagger: 0.05,
              ease: "power2.out"
            }
          )
        }
      }, [data])

      const handleSort = (field: SortField) => {
        if (sortField === field) {
          setSortDirection(prev => 
            prev === 'asc' ? 'desc' : prev === 'desc' ? null : 'asc'
          )
          if (sortDirection === 'desc') {
            setSortField(null)
          }
        } else {
          setSortField(field)
          setSortDirection('asc')
        }
      }

      const getSortedData = () => {
        if (!sortField || !sortDirection) return data

        return [...data].sort((a, b) => {
          let aValue: any
          let bValue: any

          if (sortField === 'assignee.name') {
            aValue = a.assignee.name
            bValue = b.assignee.name
          } else if (sortField === 'metrics.views') {
            aValue = a.metrics.views
            bValue = b.metrics.views
          } else if (sortField === 'metrics.completion') {
            aValue = a.metrics.completion
            bValue = b.metrics.completion
          } else {
            aValue = a[sortField as keyof DataItem]
            bValue = b[sortField as keyof DataItem]
          }

          if (typeof aValue === 'string' && typeof bValue === 'string') {
            return sortDirection === 'asc' 
              ? aValue.localeCompare(bValue)
              : bValue.localeCompare(aValue)
          }

          if (typeof aValue === 'number' && typeof bValue === 'number') {
            return sortDirection === 'asc' ? aValue - bValue : bValue - aValue
          }

          return 0
        })
      }

      const SortIcon = ({ field }: { field: SortField }) => {
        if (sortField !== field) {
          return <ArrowUpDown className="w-4 h-4 opacity-50" />
        }
        if (sortDirection === 'asc') {
          return <ArrowUp className="w-4 h-4 text-primary" />
        }
        if (sortDirection === 'desc') {
          return <ArrowDown className="w-4 h-4 text-primary" />
        }
        return <ArrowUpDown className="w-4 h-4 opacity-50" />
      }

      const sortedData = getSortedData()

      if (data.length === 0) {
        return <EmptyState />
      }

      return (
        <div className="relative overflow-hidden rounded-2xl border bg-card/50 backdrop-blur-sm">
          <div className="overflow-x-auto">
            <table ref={tableRef} className="w-full">
              <thead>
                <tr className="border-b border-border/50 bg-muted/20">
                  <th className="text-left p-4 font-semibold text-sm">
                    <button
                      onClick={() => handleSort('title')}
                      className="flex items-center gap-2 hover:text-primary transition-colors"
                    >
                      Project
                      <SortIcon field="title" />
                    </button>
                  </th>
                  <th className="text-left p-4 font-semibold text-sm">
                    <button
                      onClick={() => handleSort('status')}
                      className="flex items-center gap-2 hover:text-primary transition-colors"
                    >
                      Status
                      <SortIcon field="status" />
                    </button>
                  </th>
                  <th className="text-left p-4 font-semibold text-sm">
                    <button
                      onClick={() => handleSort('priority')}
                      className="flex items-center gap-2 hover:text-primary transition-colors"
                    >
                      Priority
                      <SortIcon field="priority" />
                    </button>
                  </th>
                  <th className="text-left p-4 font-semibold text-sm">
                    <button
                      onClick={() => handleSort('assignee.name')}
                      className="flex items-center gap-2 hover:text-primary transition-colors"
                    >
                      Assignee
                      <SortIcon field="assignee.name" />
                    </button>
                  </th>
                  <th className="text-left p-4 font-semibold text-sm">
                    <button
                      onClick={() => handleSort('metrics.completion')}
                      className="flex items-center gap-2 hover:text-primary transition-colors"
                    >
                      Progress
                      <SortIcon field="metrics.completion" />
                    </button>
                  </th>
                  <th className="text-left p-4 font-semibold text-sm">
                    <button
                      onClick={() => handleSort('metrics.views')}
                      className="flex items-center gap-2 hover:text-primary transition-colors"
                    >
                      Engagement
                      <SortIcon field="metrics.views" />
                    </button>
                  </th>
                  <th className="text-left p-4 font-semibold text-sm">Date</th>
                  <th className="text-center p-4 font-semibold text-sm w-16">Actions</th>
                </tr>
              </thead>
              <tbody>
                {sortedData.map((item, index) => {
                  const isSelected = selectedItem?.id === item.id
                  
                  return (
                    <tr
                      key={item.id}
                      onClick={() => onItemSelect(item)}
                      className={cn(
                        "group border-b border-border/30 transition-all duration-200 cursor-pointer",
                        "hover:bg-accent/20 hover:border-primary/20",
                        isSelected && "bg-primary/5 border-primary/30"
                      )}
                    >
                      {/* Project Column */}
                      <td className="p-4">
                        <div className="flex items-center gap-3">
                          <div className="w-10 h-10 bg-gradient-to-br from-primary/20 to-primary/10 rounded-lg flex items-center justify-center text-lg flex-shrink-0">
                            {item.thumbnail}
                          </div>
                          <div className="min-w-0 flex-1">
                            <h4 className="font-medium group-hover:text-primary transition-colors truncate">
                              {item.title}
                            </h4>
                            <p className="text-sm text-muted-foreground truncate">
                              {item.category}
                            </p>
                          </div>
                        </div>
                      </td>

                      {/* Status Column */}
                      <td className="p-4">
                        <Badge variant="outline" className={getStatusColor(item.status)}>
                          {item.status}
                        </Badge>
                      </td>

                      {/* Priority Column */}
                      <td className="p-4">
                        <Badge variant="outline" className={getPriorityColor(item.priority)}>
                          {item.priority}
                        </Badge>
                      </td>

                      {/* Assignee Column */}
                      <td className="p-4">
                        <div className="flex items-center gap-2">
                          <Avatar className="w-8 h-8 text-sm">
                            {item.assignee.avatar}
                          </Avatar>
                          <div className="min-w-0">
                            <p className="text-sm font-medium truncate">
                              {item.assignee.name}
                            </p>
                          </div>
                        </div>
                      </td>

                      {/* Progress Column */}
                      <td className="p-4">
                        <div className="flex items-center gap-3">
                          <div className="flex-1 min-w-0">
                            <div className="w-full bg-muted rounded-full h-2">
                              <div 
                                className="bg-gradient-to-r from-primary to-primary/80 h-2 rounded-full transition-all duration-500"
                                style={{ width: `${item.metrics.completion}%` }}
                              />
                            </div>
                          </div>
                          <span className="text-sm font-medium text-muted-foreground">
                            {item.metrics.completion}%
                          </span>
                        </div>
                      </td>

                      {/* Engagement Column */}
                      <td className="p-4">
                        <div className="flex items-center gap-4 text-xs text-muted-foreground">
                          <div className="flex items-center gap-1">
                            <Eye className="w-3 h-3" />
                            {item.metrics.views}
                          </div>
                          <div className="flex items-center gap-1">
                            <Heart className="w-3 h-3" />
                            {item.metrics.likes}
                          </div>
                          <div className="flex items-center gap-1">
                            <Share className="w-3 h-3" />
                            {item.metrics.shares}
                          </div>
                        </div>
                      </td>

                      {/* Date Column */}
                      <td className="p-4">
                        <div className="flex items-center gap-1 text-sm text-muted-foreground">
                          <Calendar className="w-3 h-3" />
                          {new Date(item.updatedAt).toLocaleDateString()}
                        </div>
                      </td>

                      {/* Actions Column */}
                      <td className="p-4">
                        <button 
                          onClick={(e) => {
                            e.stopPropagation()
                            onItemSelect(item)
                          }}
                          className="flex items-center justify-center w-8 h-8 rounded-lg hover:bg-accent transition-colors"
                          title="View details"
                        >
                          <ExternalLink className="w-4 h-4" />
                        </button>
                      </td>
                    </tr>
                  )
                })}
              </tbody>
            </table>
          </div>
        </div>
      )
    }
approved: true
linesAdded: null
linesRemoved: null
linesDifference: null
gitCommittedAt: '2025-10-12T10:03:15.352Z'
status: committed
id: 169
