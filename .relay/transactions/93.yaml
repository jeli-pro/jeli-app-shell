uuid: 4d284f67-a2f0-4665-983b-f6a6c0b3d11b
projectId: amazing-app-shell
createdAt: '2025-10-11T00:28:07.463Z'
gitCommitMsg: >-
  refactor(arch): decouple layout state into AppShellContext

  Refactors the application shell to be a more reusable and pluggable library by
  decoupling layout state management from the global application store
  (Zustand).

  - Introduces a new `AppShellProvider` and `useAppShell` hook via React Context
  to manage all layout-related state (sidebar, dark mode, panes, etc.) in a
  self-contained manner. - Simplifies the global `appStore` to only handle
  application-specific state (e.g., active page), preparing it to serve as a
  demo-only store. - All layout components (`AppShell`, `Sidebar`, `TopBar`,
  `RightPane`) and related hooks are updated to consume the new
  `AppShellContext`, removing their dependency on the global store for layout
  logic. - Centralizes side effects like applying dark mode and primary color
  CSS variables within the `AppShellProvider`. - Deletes the `usePrimaryColor`
  hook as its functionality is now encapsulated in the provider.

  This change is the foundational step towards making the App Shell a true UI
  library component that can be easily integrated into other projects.
promptSummary: >-
  The user wants to refactor the project into a reusable UI library with a
  pluggable architecture.
reasoning:
  - >-
    This is an excellent request. Refactoring the application shell into a
    reusable, pluggable library is a great step toward making it
    production-ready. The key to this is decoupling the UI/layout state from the
    application-specific state.
  - 'I will achieve this by:'
  - >-
    1.  **Introducing a React Context (`AppShellProvider`)**: This will
    encapsulate all layout-related state (like sidebar visibility, dark mode,
    color themes, pane sizes) and logic, making the `AppShell` component and its
    parts self-contained.
  - >-
    2.  **Removing Layout State from Zustand**: The global `appStore` will be
    simplified to only manage application-specific state (like the current page
    or search term), which is appropriate for a demo application but should not
    be part of the reusable library.
  - >-
    3.  **Refactoring Components**: All layout components will be updated to
    consume the new `AppShellContext` for their state, removing their dependency
    on the global Zustand store for layout purposes.
  - >-
    4.  **Centralizing Side Effects**: Logic for applying dark mode and primary
    color themes will be moved into the `AppShellProvider`, making it the single
    source of truth for the shell's appearance.
  - >-
    This refactoring will create a clear separation between the reusable
    `AppShell` library and the example application that uses it, which is a
    hallmark of a well-designed, pluggable architecture.
  - 'Here are the changes:'
  - '### Step 1: Create the App Shell Context and Provider'
  - >-
    I'll create a new file to house the `AppShellProvider`, its context, and the
    `useAppShell` hook. This provider will manage all layout-related state using
    a React reducer for organized state transitions. It will also handle side
    effects like applying the dark mode class and setting CSS variables for the
    primary color.
  - '### Step 2: Remove Old Color Hook'
  - >-
    The logic from `usePrimaryColor.hook.ts` is now inside our
    `AppShellProvider`, so the standalone hook is no longer needed.
  - '### Step 3: Simplify the Global App Store'
  - >-
    I'll remove all layout-related state from the Zustand store, leaving only
    state that is specific to the demo application, like the active page and
    search term.
  - '### Step 4: Integrate the Provider into the App'
  - >-
    I'll now wrap the main `App` component with the new `AppShellProvider` to
    make the context available to all child components.
  - '### Step 5: Refactor Components to Use the New Context'
  - >-
    This is the most extensive step, where I'll update all relevant components
    to use `useAppShell` for layout state and logic, while still using
    `useAppStore` for application-specific data.
  - '**Updating Animation Hooks:**'
  - '**Updating Layout Components:**'
  - '**Updating Features and Global Components:**'
operations:
  - type: write
    path: src/context/AppShellContext.tsx
    content: >-
      import React, {
        createContext,
        useContext,
        useReducer,
        useEffect,
        useMemo,
        type ReactNode,
        type Dispatch,
      } from 'react';

      import { SIDEBAR_STATES, BODY_STATES, type SidebarState, type BodyState }
      from '@/lib/utils';


      // --- State and Action Types ---


      interface AppShellState {
        sidebarState: SidebarState;
        bodyState: BodyState;
        isDarkMode: boolean;
        sidebarWidth: number;
        rightPaneWidth: number;
        isResizing: boolean;
        isResizingRightPane: boolean;
        isTopBarVisible: boolean;
        autoExpandSidebar: boolean;
        reducedMotion: boolean;
        compactMode: boolean;
        primaryColor: string;
      }


      type AppShellAction =
        | { type: 'SET_SIDEBAR_STATE'; payload: SidebarState }
        | { type: 'SET_BODY_STATE'; payload: BodyState }
        | { type: 'TOGGLE_DARK_MODE' }
        | { type: 'SET_SIDEBAR_WIDTH'; payload: number }
        | { type: 'SET_RIGHT_PANE_WIDTH'; payload: number }
        | { type: 'SET_IS_RESIZING'; payload: boolean }
        | { type: 'SET_IS_RESIZING_RIGHT_PANE'; payload: boolean }
        | { type: 'SET_TOP_BAR_VISIBLE'; payload: boolean }
        | { type: 'SET_AUTO_EXPAND_SIDEBAR'; payload: boolean }
        | { type: 'SET_REDUCED_MOTION'; payload: boolean }
        | { type: 'SET_COMPACT_MODE'; payload: boolean }
        | { type: 'SET_PRIMARY_COLOR'; payload: string }
        | { type: 'RESET_TO_DEFAULTS' };

      // --- Reducer ---


      const defaultState: AppShellState = {
        sidebarState: SIDEBAR_STATES.EXPANDED,
        bodyState: BODY_STATES.NORMAL,
        isDarkMode: false,
        sidebarWidth: 280,
        rightPaneWidth: typeof window !== 'undefined' ? Math.max(300, Math.round(window.innerWidth * 0.6)) : 400,
        isResizing: false,
        isResizingRightPane: false,
        isTopBarVisible: true,
        autoExpandSidebar: true,
        reducedMotion: false,
        compactMode: false,
        primaryColor: '220 84% 60%',
      };


      function appShellReducer(state: AppShellState, action: AppShellAction):
      AppShellState {
        switch (action.type) {
          case 'SET_SIDEBAR_STATE': return { ...state, sidebarState: action.payload };
          case 'SET_BODY_STATE': return { ...state, bodyState: action.payload };
          case 'TOGGLE_DARK_MODE': return { ...state, isDarkMode: !state.isDarkMode };
          case 'SET_SIDEBAR_WIDTH': return { ...state, sidebarWidth: Math.max(200, Math.min(500, action.payload)) };
          case 'SET_RIGHT_PANE_WIDTH': return { ...state, rightPaneWidth: Math.max(300, Math.min(window.innerWidth * 0.8, action.payload)) };
          case 'SET_IS_RESIZING': return { ...state, isResizing: action.payload };
          case 'SET_IS_RESIZING_RIGHT_PANE': return { ...state, isResizingRightPane: action.payload };
          case 'SET_TOP_BAR_VISIBLE': return { ...state, isTopBarVisible: action.payload };
          case 'SET_AUTO_EXPAND_SIDEBAR': return { ...state, autoExpandSidebar: action.payload };
          case 'SET_REDUCED_MOTION': return { ...state, reducedMotion: action.payload };
          case 'SET_COMPACT_MODE': return { ...state, compactMode: action.payload };
          case 'SET_PRIMARY_COLOR': return { ...state, primaryColor: action.payload };
          case 'RESET_TO_DEFAULTS': return defaultState;
          default: return state;
        }
      }


      // --- Context and Provider ---


      interface AppShellContextValue extends AppShellState {
        dispatch: Dispatch<AppShellAction>;
        // Composite actions for convenience
        toggleSidebar: () => void;
        hideSidebar: () => void;
        showSidebar: () => void;
        peekSidebar: () => void;
        toggleFullscreen: () => void;
        closeSidePane: () => void;
        resetToDefaults: () => void;
      }


      const AppShellContext = createContext<AppShellContextValue | null>(null);


      export function AppShellProvider({ children }: { children: ReactNode }) {
        const [state, dispatch] = useReducer(appShellReducer, defaultState);

        // Side effect for dark mode
        useEffect(() => {
          document.documentElement.classList.toggle('dark', state.isDarkMode);
        }, [state.isDarkMode]);

        // Side effect for primary color
        useEffect(() => {
          document.documentElement.style.setProperty('--primary-hsl', state.primaryColor);
        }, [state.primaryColor]);

        // Memoized composite actions
        const actions = useMemo(() => ({
          toggleSidebar: () => {
            const current = state.sidebarState;
            if (current === SIDEBAR_STATES.HIDDEN) dispatch({ type: 'SET_SIDEBAR_STATE', payload: SIDEBAR_STATES.COLLAPSED });
            else if (current === SIDEBAR_STATES.COLLAPSED) dispatch({ type: 'SET_SIDEBAR_STATE', payload: SIDEBAR_STATES.EXPANDED });
            else if (current === SIDEBAR_STATES.EXPANDED) dispatch({ type: 'SET_SIDEBAR_STATE', payload: SIDEBAR_STATES.COLLAPSED });
          },
          hideSidebar: () => dispatch({ type: 'SET_SIDEBAR_STATE', payload: SIDEBAR_STATES.HIDDEN }),
          showSidebar: () => dispatch({ type: 'SET_SIDEBAR_STATE', payload: SIDEBAR_STATES.EXPANDED }),
          peekSidebar: () => dispatch({ type: 'SET_SIDEBAR_STATE', payload: SIDEBAR_STATES.PEEK }),
          toggleFullscreen: () => {
            const current = state.bodyState;
            dispatch({ type: 'SET_BODY_STATE', payload: current === BODY_STATES.FULLSCREEN ? BODY_STATES.NORMAL : BODY_STATES.FULLSCREEN });
          },
          closeSidePane: () => dispatch({ type: 'SET_BODY_STATE', payload: BODY_STATES.NORMAL }),
          resetToDefaults: () => dispatch({ type: 'RESET_TO_DEFAULTS' }),
        }), [state.sidebarState, state.bodyState]);

        const value = useMemo(() => ({ ...state, dispatch, ...actions }), [state, actions]);

        return (
          <AppShellContext.Provider value={value}>
            {children}
          </AppShellContext.Provider>
        );
      }


      // --- Hook ---


      export function useAppShell() {
        const context = useContext(AppShellContext);
        if (!context) {
          throw new Error('useAppShell must be used within an AppShellProvider');
        }
        return context;
      }
    patchStrategy: replace
  - type: delete
    path: src/hooks/usePrimaryColor.hook.ts
  - type: write
    path: src/store/appStore.ts
    content: >
      --- src/store/appStore.ts

      +++ src/store/appStore.ts

      @@ -1,133 +1,60 @@
       import { create } from 'zustand'
       import { persist } from 'zustand/middleware'
      -import { SIDEBAR_STATES, BODY_STATES, type SidebarState, type BodyState }
      from '@/lib/utils'

      +import { BODY_STATES, type BodyState } from '@/lib/utils'
       
       export type ActivePage = 'dashboard' | 'settings' | 'toaster' | 'notifications';
       
       interface AppState {
         // UI States
      -  sidebarState: SidebarState

      -  bodyState: BodyState

      -  isDarkMode: boolean
         sidePaneContent: 'details' | 'settings' | 'main' | 'toaster' | 'notifications'
         activePage: ActivePage
      -  sidebarWidth: number

      -  rightPaneWidth: number

      -  isResizing: boolean

      -  isResizingRightPane: boolean

      -  isTopBarVisible: boolean
         isCommandPaletteOpen: boolean
         searchTerm: string
         
      -  // User Preferences

      -  autoExpandSidebar: boolean

      -  reducedMotion: boolean

      -  compactMode: boolean

      -  primaryColor: string

      -  
         // Actions
      -  setSidebarState: (state: SidebarState) => void

      -  setBodyState: (state: BodyState) => void

      -  toggleDarkMode: () => void
         setActivePage: (page: ActivePage) => void
      -  setSidebarWidth: (width: number) => void

      -  setRightPaneWidth: (width: number) => void

      -  setIsResizing: (resizing: boolean) => void

      -  setIsResizingRightPane: (resizing: boolean) => void

      -  setTopBarVisible: (visible: boolean) => void

      -  setAutoExpandSidebar: (auto: boolean) => void

      -  setReducedMotion: (reduced: boolean) => void

      -  setCompactMode: (compact: boolean) => void

      -  setPrimaryColor: (color: string) => void

      +  setSidePaneContent: (content: AppState['sidePaneContent']) => void
         setCommandPaletteOpen: (open: boolean) => void
         setSearchTerm: (term: string) => void
         
         // Composite Actions
      -  toggleSidebar: () => void

      -  hideSidebar: () => void

      -  showSidebar: () => void

      -  peekSidebar: () => void

      -  toggleFullscreen: () => void

      -  openSidePane: (content: 'details' | 'settings' | 'main' | 'toaster' |
      'notifications') => void

      -  closeSidePane: () => void

      -  resetToDefaults: () => void
         handleNavigation: (page: ActivePage) => void
      -  isPageActive: (page: ActivePage) => boolean
       }
       
       const defaultState = {
      -  sidebarState: SIDEBAR_STATES.EXPANDED as SidebarState,

      -  bodyState: BODY_STATES.NORMAL as BodyState,
         sidePaneContent: 'details' as const,
         activePage: 'dashboard' as ActivePage,
      -  isDarkMode: false,

      -  sidebarWidth: 280,

      -  rightPaneWidth: typeof window !== 'undefined' ? Math.max(300,
      Math.round(window.innerWidth * 0.6)) : 400,

      -  isResizing: false,

      -  isResizingRightPane: false,

      -  isTopBarVisible: true,
         isCommandPaletteOpen: false,
      -  autoExpandSidebar: true,

      -  reducedMotion: false,

      -  compactMode: false,

      -  primaryColor: '220 84% 60%',
         searchTerm: '',
       }
       
       export const useAppStore = create<AppState>()(
         persist(
      -    (set, get) => ({

      +    (set) => ({
             ...defaultState,
             
             // Basic setters
             sidePaneContent: 'details',
      -      setSidebarState: (state) => set({ sidebarState: state }),

      -      setBodyState: (state) => set({ bodyState: state }),
             setActivePage: (page) => set({ activePage: page }),
      -      toggleDarkMode: () => {

      -        const newMode = !get().isDarkMode

      -        set({ isDarkMode: newMode })

      -        document.documentElement.classList.toggle('dark', newMode)

      -      },

      -      setSidebarWidth: (width) => set({ sidebarWidth: Math.max(200,
      Math.min(500, width)) }),

      -      setRightPaneWidth: (width) => set({ rightPaneWidth: Math.max(300,
      Math.min(window.innerWidth * 0.8, width)) }),

      -      setIsResizing: (resizing) => set({ isResizing: resizing }),

      -      setIsResizingRightPane: (resizing) => set({ isResizingRightPane:
      resizing }),

      -      setTopBarVisible: (visible) => set({ isTopBarVisible: visible }),

      -      setAutoExpandSidebar: (auto) => set({ autoExpandSidebar: auto }),

      -      setReducedMotion: (reduced) => set({ reducedMotion: reduced }),

      -      setCompactMode: (compact) => set({ compactMode: compact }),

      -      setPrimaryColor: (color) => set({ primaryColor: color }),

      +      setSidePaneContent: (content) => set({ sidePaneContent: content }),
             setCommandPaletteOpen: (open) => set({ isCommandPaletteOpen: open }),
             setSearchTerm: (term) => set({ searchTerm: term }),
             
             // Composite actions
      -      toggleSidebar: () => {

      -        const current = get().sidebarState

      -        if (current === SIDEBAR_STATES.HIDDEN) {

      -          set({ sidebarState: SIDEBAR_STATES.COLLAPSED })

      -        } else if (current === SIDEBAR_STATES.COLLAPSED) {

      -          set({ sidebarState: SIDEBAR_STATES.EXPANDED })

      -        } else if (current === SIDEBAR_STATES.EXPANDED) {

      -          set({ sidebarState: SIDEBAR_STATES.COLLAPSED })

      -        }

      -      },

      -      

      -      hideSidebar: () => set({ sidebarState: SIDEBAR_STATES.HIDDEN }),

      -      showSidebar: () => set({ sidebarState: SIDEBAR_STATES.EXPANDED }),

      -      peekSidebar: () => set({ sidebarState: SIDEBAR_STATES.PEEK }),

      -      

      -      toggleFullscreen: () => {

      -        const current = get().bodyState

      -        set({ 

      -          bodyState: current === BODY_STATES.FULLSCREEN ?
      BODY_STATES.NORMAL : BODY_STATES.FULLSCREEN 

      -        })

      -      },

      -      

      -      openSidePane: (content) => {

      -        const { bodyState, sidePaneContent } = get()

      -        if (bodyState === BODY_STATES.SIDE_PANE && sidePaneContent ===
      content) {

      -          // If it's open with same content, close it.

      -          set({ bodyState: BODY_STATES.NORMAL });

      -        } else {

      -          // If closed, or different content, open with new content.

      -          set({ bodyState: BODY_STATES.SIDE_PANE, sidePaneContent:
      content });

      -        }

      -      },

      -      closeSidePane: () => {

      -        set({ bodyState: BODY_STATES.NORMAL })

      -      },

      -      

      -      resetToDefaults: () => {

      -        set(defaultState)

      -        // Also reset dark mode class on html element

      -        if (defaultState.isDarkMode) {

      -          document.documentElement.classList.add('dark')

      -        } else {

      -          document.documentElement.classList.remove('dark')

      -        }

      -      },
             handleNavigation: (page) => {
               set({ activePage: page });
             },
      -      isPageActive: (page) => {

      -        const { activePage, bodyState, sidePaneContent } = get();

      -        const pageToSidePaneContent = {

      -          dashboard: 'main',

      -          settings: 'settings',

      -          toaster: 'toaster',

      -          notifications: 'notifications',

      -        };

      -        return activePage === page || (bodyState ===
      BODY_STATES.SIDE_PANE && sidePaneContent === pageToSidePaneContent[page]);

      -      },
           }),
           {
             name: 'app-preferences',
             partialize: (state) => ({
      -        sidebarState: state.sidebarState,

      -        bodyState: state.bodyState,
               activePage: state.activePage,
               sidePaneContent: state.sidePaneContent,
      -        isDarkMode: state.isDarkMode,

      -        sidebarWidth: state.sidebarWidth,

      -        rightPaneWidth: state.rightPaneWidth,

      -        autoExpandSidebar: state.autoExpandSidebar,

      -        reducedMotion: state.reducedMotion,

      -        compactMode: state.compactMode,

      -        primaryColor: state.primaryColor,
               // searchTerm is not persisted
             }),
           }
         )
       )
      -

      -// Initialize dark mode on load

      -if (typeof window !== 'undefined') {

      -  const stored = localStorage.getItem('app-preferences')

      -  if (stored) {

      -    const parsed = JSON.parse(stored)

      -    if (parsed.state?.isDarkMode) {

      -      document.documentElement.classList.add('dark')

      -    }

      -  }

      -}
    patchStrategy: standard-diff
  - type: write
    path: src/App.tsx
    content: |+
      --- src/App.tsx
      +++ src/App.tsx
      @@ -1,9 +1,12 @@
       import { AppShell } from './components/layout/AppShell'
      +import { AppShellProvider } from './context/AppShellContext'
       import './index.css'
       
       function App() {
         return (
           <div className="h-screen w-screen overflow-hidden bg-background">
      -      <AppShell />
      +      <AppShellProvider>
      +        <AppShell />
      +      </AppShellProvider>
           </div>
         )
       }

    patchStrategy: standard-diff
  - type: write
    path: src/hooks/useAppShellAnimations.hook.ts
    content: >
      --- src/hooks/useAppShellAnimations.hook.ts

      +++ src/hooks/useAppShellAnimations.hook.ts

      @@ -1,10 +1,10 @@
       import { useEffect } from 'react';
       import { gsap } from 'gsap';
      -import { useAppStore } from '@/store/appStore';

      +import { useAppShell } from '@/context/AppShellContext';
       import { SIDEBAR_STATES, BODY_STATES } from '@/lib/utils';
       
       export function useSidebarAnimations(
      @@ -12,7 +12,7 @@
         sidebarRef: React.RefObject<HTMLDivElement>,
         resizeHandleRef: React.RefObject<HTMLDivElement>
       ) {
      -  const { sidebarState, sidebarWidth, bodyState, reducedMotion } =
      useAppStore(

      +  const { sidebarState, sidebarWidth, bodyState, reducedMotion } =
      useAppShell(
           (state) => ({
             sidebarState: state.sidebarState,
             sidebarWidth: state.sidebarWidth,
      @@ -62,14 +62,13 @@
         rightPaneRef: React.RefObject<HTMLDivElement>,
         topBarContainerRef: React.RefObject<HTMLDivElement>
       ) {
      +  const { bodyState, reducedMotion, rightPaneWidth, isTopBarVisible,
      closeSidePane } = useAppShell();
         const {
      -    bodyState,

      -    reducedMotion,

      -    rightPaneWidth,
           closeSidePane,
           isTopBarVisible,
      -  } = useAppStore((state) => ({

      +  } = useAppShell((state) => ({
           bodyState: state.bodyState,
           reducedMotion: state.reducedMotion,
           rightPaneWidth: state.rightPaneWidth,
    patchStrategy: standard-diff
  - type: write
    path: src/hooks/useResizablePanes.hook.ts
    content: >+
      --- src/hooks/useResizablePanes.hook.ts

      +++ src/hooks/useResizablePanes.hook.ts

      @@ -1,14 +1,14 @@
       import { useEffect } from 'react';
       import { gsap } from 'gsap';
      -import { useAppStore } from '@/store/appStore';

      +import { useAppShell } from '@/context/AppShellContext';
       
       export function useResizableSidebar(
         sidebarRef: React.RefObject<HTMLDivElement>,
         resizeHandleRef: React.RefObject<HTMLDivElement>
       ) {
      -  const { isResizing, setIsResizing, setSidebarWidth } = useAppStore(

      +  const { isResizing, dispatch } = useAppShell(
           (state) => ({
             isResizing: state.isResizing,
      -      setIsResizing: state.setIsResizing,

      -      setSidebarWidth: state.setSidebarWidth,

      +      dispatch: state.dispatch,
           })
         );
       
      @@ -16,7 +16,7 @@
           const handleMouseMove = (e: MouseEvent) => {
             if (!isResizing) return;
       
             const newWidth = Math.max(200, Math.min(500, e.clientX));
      -      setSidebarWidth(newWidth);

      +      dispatch({ type: 'SET_SIDEBAR_WIDTH', payload: newWidth });
       
             if (sidebarRef.current) {
               gsap.set(sidebarRef.current, { width: newWidth });
      @@ -27,7 +27,7 @@
           };
       
           const handleMouseUp = () => {
      -      setIsResizing(false);

      +      dispatch({ type: 'SET_IS_RESIZING', payload: false });
             document.body.style.cursor = '';
             document.body.style.userSelect = '';
           };
      @@ -42,22 +42,20 @@
             document.removeEventListener('mousemove', handleMouseMove);
             document.removeEventListener('mouseup', handleMouseUp);
           };
      -  }, [isResizing, setIsResizing, setSidebarWidth, sidebarRef,
      resizeHandleRef]);

      +  }, [isResizing, dispatch, sidebarRef, resizeHandleRef]);
       }
       
       export function useResizableRightPane() {
      -  const {

      -    isResizingRightPane,

      -    setIsResizingRightPane,

      -    setRightPaneWidth,

      -  } = useAppStore((state) => ({

      -    isResizingRightPane: state.isResizingRightPane,

      -    setIsResizingRightPane: state.setIsResizingRightPane,

      -    setRightPaneWidth: state.setRightPaneWidth,

      -  }));

      +  const { isResizingRightPane, dispatch } = useAppShell();
       
         useEffect(() => {
           const handleMouseMove = (e: MouseEvent) => {
             if (!isResizingRightPane) return;
       
             const newWidth = window.innerWidth - e.clientX;
      -      setRightPaneWidth(newWidth);

      +      dispatch({ type: 'SET_RIGHT_PANE_WIDTH', payload: newWidth });
           };
       
           const handleMouseUp = () => {
      -      setIsResizingRightPane(false);

      +      dispatch({ type: 'SET_IS_RESIZING_RIGHT_PANE', payload: false });
             document.body.style.cursor = '';
             document.body.style.userSelect = '';
           };
      @@ -74,5 +72,5 @@
             document.removeEventListener('mousemove', handleMouseMove);
             document.removeEventListener('mouseup', handleMouseUp);
             document.body.style.cursor = '';
           };
      -  }, [isResizingRightPane, setIsResizingRightPane, setRightPaneWidth]);

      +  }, [isResizingRightPane, dispatch]);
       }

    patchStrategy: standard-diff
  - type: write
    path: src/hooks/useAutoAnimateTopBar.ts
    content: >+
      --- src/hooks/useAutoAnimateTopBar.ts

      +++ src/hooks/useAutoAnimateTopBar.ts

      @@ -1,8 +1,8 @@
       import { useRef, useCallback, useEffect } from 'react';
      -import { useAppStore } from '@/store/appStore';

      +import { useAppShell } from '@/context/AppShellContext';
       
       export function useAutoAnimateTopBar(isPane = false) {
      -  const setTopBarVisible = useAppStore((state) =>
      state.setTopBarVisible);

      +  const { dispatch } = useAppShell();
         const lastScrollTop = useRef(0);
         const scrollTimeout = useRef<ReturnType<typeof setTimeout> | null>(null);
       
      @@ -16,9 +16,9 @@
           const { scrollTop } = event.currentTarget;
           
           if (scrollTop > lastScrollTop.current && scrollTop > 200) {
      -      setTopBarVisible(false);

      +      dispatch({ type: 'SET_TOP_BAR_VISIBLE', payload: false });
           } else if (scrollTop < lastScrollTop.current || scrollTop <= 0) {
      -      setTopBarVisible(true);

      +      dispatch({ type: 'SET_TOP_BAR_VISIBLE', payload: true });
           }
           
           lastScrollTop.current = scrollTop <= 0 ? 0 : scrollTop;
      @@ -28,10 +28,10 @@
             // Don't hide, just ensure it's visible after scrolling stops
             // and we are not at the top of the page.
             if (scrollTop > 0) {
      -        setTopBarVisible(true);

      +        dispatch({ type: 'SET_TOP_BAR_VISIBLE', payload: true });
             }
           }, 250); // Adjust timeout as needed
      -  }, [isPane, setTopBarVisible]);

      +  }, [isPane, dispatch]);
       
         // Cleanup on unmount
         useEffect(() => {

    patchStrategy: standard-diff
  - type: write
    path: src/components/layout/AppShell.tsx
    content: >+
      --- src/components/layout/AppShell.tsx

      +++ src/components/layout/AppShell.tsx

      @@ -4,22 +4,20 @@
       import { MainContent } from './MainContent'
       import { RightPane } from './RightPane'
       import { TopBar } from './TopBar'
      -import { CommandPalette } from '@/components/global/CommandPalette'

      -import { useAppStore } from '@/store/appStore'

      +import { CommandPalette } from '@/components/global/CommandPalette';

      +import { useAppShell } from '@/context/AppShellContext';
       import { SIDEBAR_STATES } from '@/lib/utils'
      -import { usePrimaryColor } from '@/hooks/usePrimaryColor.hook'
       import { useResizableSidebar, useResizableRightPane } from '@/hooks/useResizablePanes.hook'
       import { useSidebarAnimations, useBodyStateAnimations } from '@/hooks/useAppShellAnimations.hook'
       
       export function AppShell() {
         const {
           sidebarState,
           isDarkMode,
      -    setSidebarState,

      -    setIsResizing,

      +    dispatch,

      +    autoExpandSidebar,
           toggleSidebar,
           peekSidebar,
           toggleFullscreen,
      -    toggleDarkMode,

      -    autoExpandSidebar,

      -  } = useAppStore()

      +  } = useAppShell();
         
         const appRef = useRef<HTMLDivElement>(null)
         const sidebarRef = useRef<HTMLDivElement>(null)
      @@ -30,7 +28,6 @@
         const topBarContainerRef = useRef<HTMLDivElement>(null)
       
         // Custom hooks for logic
      -  usePrimaryColor();
         useResizableSidebar(sidebarRef, resizeHandleRef);
         useResizableRightPane();
         useSidebarAnimations(sidebarRef, resizeHandleRef);
      @@ -53,7 +50,7 @@
                 }}
                 onMouseLeave={() => {
                   if (autoExpandSidebar && sidebarState === SIDEBAR_STATES.PEEK) {
      -              setSidebarState(SIDEBAR_STATES.COLLAPSED)

      +              dispatch({ type: 'SET_SIDEBAR_STATE', payload:
      SIDEBAR_STATES.COLLAPSED });
                   }
                 }}
               />
      @@ -66,7 +63,7 @@
                   )}
                   onMouseDown={(e) => {
                     e.preventDefault()
      -              setIsResizing(true)

      +              dispatch({ type: 'SET_IS_RESIZING', payload: true });
                   }}
                 >
                   <div className="w-0.5 h-full bg-border group-hover:bg-primary transition-colors duration-200 mx-auto" />
      @@ -78,7 +75,7 @@
                   <TopBar
                     onToggleSidebar={toggleSidebar}
                     onToggleFullscreen={toggleFullscreen}
      -              onToggleDarkMode={toggleDarkMode}

      +              onToggleDarkMode={() => dispatch({ type: 'TOGGLE_DARK_MODE'
      })}
                   />
                 </div>
                 

    patchStrategy: standard-diff
  - type: write
    path: src/components/layout/EnhancedSidebar.tsx
    content: >+
      --- src/components/layout/EnhancedSidebar.tsx

      +++ src/components/layout/EnhancedSidebar.tsx

      @@ -14,6 +14,8 @@
         Plus
       } from 'lucide-react';
       import { useAppStore, type ActivePage } from '@/store/appStore';
      +import { useAppShell } from '@/context/AppShellContext';

      +import { BODY_STATES } from '@/lib/utils';
       import {
         Workspaces,
         WorkspaceTrigger,
      @@ -74,7 +76,7 @@
       
       export const EnhancedSidebar = React.forwardRef<HTMLDivElement, SidebarProps>(
         ({ onMouseEnter, onMouseLeave }, ref) => {
      -    const { sidebarWidth, compactMode } = useAppStore();

      +    const { sidebarWidth, compactMode } = useAppShell();
           const [selectedWorkspace, setSelectedWorkspace] = React.useState(mockWorkspaces[0]);
       
           return (
      @@ -143,10 +145,21 @@
       }
       
       const AppMenuItem: React.FC<AppMenuItemProps> = ({ icon: Icon, label, badge, hasActions, children, isSubItem = false, page, opensInSidePane = false }) => {
      -  const { handleNavigation, isPageActive, openSidePane } = useAppStore();

      -  const isActive = page ? isPageActive(page) : false;

      -  const { compactMode } = useAppStore();

      +  const { handleNavigation, activePage, sidePaneContent,
      setSidePaneContent } = useAppStore();

      +  const { compactMode, bodyState, setBodyState } = useAppShell();
         const { isCollapsed } = useSidebar();
      +

      +  const isPageActive = (page: ActivePage) => {

      +    const pageToSidePaneContent: { [key in ActivePage]?: 'main' |
      'settings' | 'toaster' | 'notifications' } = {

      +      dashboard: 'main',

      +      settings: 'settings',

      +      toaster: 'toaster',

      +      notifications: 'notifications',

      +    };

      +    return activePage === page || (bodyState === BODY_STATES.SIDE_PANE &&
      sidePaneContent === pageToSidePaneContent[page]);

      +  };

      +  

      +  const isActive = page ? isPageActive(page) : false;
       
         const handleClick = () => {
           if (page) {
      @@ -157,7 +170,16 @@
                 toaster: 'toaster',
                 notifications: 'notifications',
               };
      -        if (pageToPaneMap[page]) openSidePane(pageToPaneMap[page]!);

      +        const content = pageToPaneMap[page];

      +        if (content) {

      +           if (bodyState === BODY_STATES.SIDE_PANE && sidePaneContent ===
      content) {

      +            // If it's open with same content, close it.

      +            setBodyState(BODY_STATES.NORMAL);

      +          } else {

      +            // If closed, or different content, open with new content.

      +            setSidePaneContent(content);

      +            setBodyState(BODY_STATES.SIDE_PANE);

      +          }

      +        }
             } else {
               handleNavigation(page);
             }

    patchStrategy: standard-diff
  - type: write
    path: src/components/layout/RightPane.tsx
    content: >+
      --- src/components/layout/RightPane.tsx

      +++ src/components/layout/RightPane.tsx

      @@ -2,12 +2,13 @@
       import { SlidersHorizontal, Settings, ChevronRight, LayoutDashboard, ChevronsLeftRight, Component, Bell } from 'lucide-react'
       import { useAppStore } from '@/store/appStore'
       import { cn } from '@/lib/utils'
      +import { useAppShell } from '@/context/AppShellContext'
       import { SettingsContent } from '@/features/settings/SettingsContent'
       import { DashboardContent } from '@/pages/Dashboard'
       import { ToasterDemo } from '@/pages/ToasterDemo'
       import { NotificationsPage } from '@/pages/Notifications'
       
       export const RightPane = forwardRef<HTMLDivElement>((_props, ref) => {
      -  const { closeSidePane, setIsResizingRightPane, sidePaneContent,
      setActivePage } = useAppStore();

      +  const { sidePaneContent, setActivePage, setSidePaneContent } =
      useAppStore();

      +  const { closeSidePane, dispatch } = useAppShell();
       
         const contentMap = {
           main: { title: 'Dashboard', icon: LayoutDashboard, page: 'dashboard', content: <DashboardContent isInSidePane /> },
      @@ -42,7 +43,7 @@
               )}
               onMouseDown={(e) => {
                 e.preventDefault()
      -          setIsResizingRightPane(true)

      +          dispatch({ type: 'SET_IS_RESIZING_RIGHT_PANE', payload: true
      });
               }}
             >
               <div className="w-0.5 h-full bg-border group-hover:bg-primary transition-colors duration-200 mx-auto" />

    patchStrategy: standard-diff
  - type: write
    path: src/components/layout/Sidebar.tsx
    content: |+
      --- src/components/layout/Sidebar.tsx
      +++ src/components/layout/Sidebar.tsx
      @@ -1,6 +1,6 @@
       import * as React from 'react';
       import { ChevronDown } from 'lucide-react';
       import { Slot } from '@radix-ui/react-slot';
      -import { useAppStore } from '@/store/appStore';
      +import { useAppShell } from '@/context/AppShellContext';
       import { SIDEBAR_STATES } from '@/lib/utils';
       import { cn } from '@/lib/utils';
       import { Button } from '@/components/ui/button';
      @@ -27,7 +27,7 @@
       
       const Sidebar = React.forwardRef<HTMLDivElement, SidebarProps>(
         ({ children, className, ...props }, ref) => {
      -    const { sidebarState, compactMode } = useAppStore();
      +    const { sidebarState, compactMode } = useAppShell();
           const isCollapsed = sidebarState === SIDEBAR_STATES.COLLAPSED;
           const isPeek = sidebarState === SIDEBAR_STATES.PEEK;
       

    patchStrategy: standard-diff
  - type: write
    path: src/components/layout/TopBar.tsx
    content: >+
      --- src/components/layout/TopBar.tsx

      +++ src/components/layout/TopBar.tsx

      @@ -12,8 +12,9 @@
         PanelRight,
       } from 'lucide-react'
       import { cn } from '@/lib/utils'
      -import { BODY_STATES } from '@/lib/utils'

      +import { BODY_STATES, type BodyState } from '@/lib/utils'
       import { useAppStore } from '@/store/appStore'
      +import { useAppShell } from '@/context/AppShellContext'
       import { UserDropdown } from './UserDropdown'
       
       interface TopBarProps {
      @@ -27,41 +28,49 @@
         onToggleFullscreen,
         onToggleDarkMode
       }: TopBarProps) {
      +  const { bodyState, isDarkMode, setBodyState } = useAppShell();
         const { 
      -    bodyState, 

      -    isDarkMode, 

      -    openSidePane,

      +    activePage,
           sidePaneContent,
      -    activePage,
           setActivePage,
      +    setSidePaneContent,
           searchTerm,
           setCommandPaletteOpen,
           setSearchTerm,
         } = useAppStore()
       
         const [isSearchFocused, setIsSearchFocused] = useState(false)
      +  

      +  const openSidePane = (content: Parameters<typeof
      setSidePaneContent>[0], newBodyState: BodyState = BODY_STATES.SIDE_PANE)
      => {

      +    if (bodyState === BODY_STATES.SIDE_PANE && sidePaneContent ===
      content) {

      +      setBodyState(BODY_STATES.NORMAL);

      +    } else {

      +      setSidePaneContent(content);

      +      setBodyState(newBodyState);

      +    }

      +  };
       
         const handleSettingsClick = () => {
           const isSettingsInSidePane = bodyState === BODY_STATES.SIDE_PANE && sidePaneContent === 'settings'
       
           // If we're on the settings page and it's not in the side pane, treat this as a "minimize" action.
           if (activePage === 'settings' && !isSettingsInSidePane) {
      -      openSidePane('settings');

      +      setSidePaneContent('settings');

      +      setBodyState(BODY_STATES.SIDE_PANE);
             setActivePage('dashboard');
           } else {
             // In all other cases (on dashboard page, or settings already in pane),
             // just toggle the settings side pane.
      -      openSidePane('settings');

      +      openSidePane('settings')
           }
         }
       
         const handleMoveToSidePane = () => {
           const mapping = { dashboard: 'main', settings: 'settings', toaster: 'toaster', notifications: 'notifications' } as const;
      -    openSidePane(mapping[activePage]);

      +    setSidePaneContent(mapping[activePage]);

      +    setBodyState(BODY_STATES.SIDE_PANE);
           if (activePage !== 'dashboard') setActivePage('dashboard');
         };
       

    patchStrategy: standard-diff
  - type: write
    path: src/features/settings/SettingsContent.tsx
    content: >
      --- src/features/settings/SettingsContent.tsx

      +++ src/features/settings/SettingsContent.tsx

      @@ -14,8 +14,8 @@
         Check
       } from 'lucide-react'
       import { cn } from '@/lib/utils'
      -import { useAppStore } from '@/store/appStore'

      +import { useAppShell } from '@/context/AppShellContext'
       import { SettingsToggle } from './SettingsToggle'
       import { SettingsSection } from './SettingsSection'
       
      @@ -29,28 +29,29 @@
       ]
       
       export function SettingsContent() {
      -  const {

      +  const shell = useAppShell()

      +  const dispatch = shell.dispatch

      +

      +  const [tempSidebarWidth, setTempSidebarWidth] =
      useState(shell.sidebarWidth)

      +

      +  const handleSidebarWidthChange = (width: number) => {

      +    setTempSidebarWidth(width)

      +    dispatch({ type: 'SET_SIDEBAR_WIDTH', payload: width });

      +  }

      +

      +  const handleReset = () => {

      +    shell.resetToDefaults();

      +    setTempSidebarWidth(280); // Reset temp state as well

      +  }

      +

      +  const setCompactMode = (payload: boolean) => dispatch({ type:
      'SET_COMPACT_MODE', payload });

      +  const setReducedMotion = (payload: boolean) => dispatch({ type:
      'SET_REDUCED_MOTION', payload });

      +  const setSidebarWidth = (payload: number) => {

      +    dispatch({ type: 'SET_SIDEBAR_WIDTH', payload });

      +    setTempSidebarWidth(payload);

      +  };

      +

      +  return (

      +    <div className="space-y-10">

      +      {/* Appearance */}

      +      <SettingsSection icon={<Palette />} title="Appearance">

      +        {/* Dark Mode */}

      +        <SettingsToggle

      +          icon={shell.isDarkMode ? <Moon className="w-4 h-4" /> : <Sun
      className="w-4 h-4" />}

      +          title="Dark Mode"

      +          description="Toggle dark theme"

      +          checked={shell.isDarkMode}

      +          onCheckedChange={() => dispatch({ type: 'TOGGLE_DARK_MODE' })}

      +        />

      +

      +        {/* Compact Mode */}

      +        <SettingsToggle

      +          icon={<Minimize2 className="w-4 h-4" />}

      +          title="Compact Mode"

      +          description="Reduce spacing and sizes"

      +          checked={shell.compactMode}

      +          onCheckedChange={(payload) => dispatch({ type:
      'SET_COMPACT_MODE', payload })}

      +        />

      +

      +        {/* Accent Color */}

      +        <div className="space-y-3">

      +          <div className="flex items-center gap-3">

      +            <Palette className="w-4 h-4" />

      +            <div>

      +              <p className="font-medium">Accent Color</p>

      +              <p className="text-sm text-muted-foreground">Customize the
      main theme color</p>

      +            </div>

      +          </div>

      +          <div className="grid grid-cols-6 gap-2 pt-1">

      +            {colorPresets.map(color => {

      +              const isActive = color.value === shell.primaryColor

      +              return (

      +                <button

      +                  key={color.name}

      +                  title={color.name}

      +                  onClick={() => dispatch({ type: 'SET_PRIMARY_COLOR',
      payload: color.value })}

      +                  className={cn(

      +                    "w-8 h-8 rounded-full border-2 transition-transform
      hover:scale-110 flex items-center justify-center",

      +                    isActive ? 'border-primary' : 'border-transparent'

      +                  )}

      +                  style={{ backgroundColor: `hsl(${color.value})` }}

      +                >{isActive && <Check className="w-5 h-5
      text-primary-foreground" />}</button>

      +              )

      +            })}

      +          </div>

      +        </div>

      +      </SettingsSection>

      +

      +      {/* Behavior */}

      +      <SettingsSection icon={<Zap />} title="Behavior">

      +        {/* Auto Expand Sidebar */}

      +        <SettingsToggle

      +          icon={<Eye className="w-4 h-4" />}

      +          title="Auto Expand Sidebar"

      +          description="Expand on hover when collapsed"

      +          checked={shell.autoExpandSidebar}

      +          onCheckedChange={(payload) => dispatch({ type:
      'SET_AUTO_EXPAND_SIDEBAR', payload })}

      +        />

      +

      +        {/* Sidebar Width */}

      +        <div className="space-y-3">

      +          <div className="flex items-center gap-3">

      +            <Monitor className="w-4 h-4" />

      +            <div>

      +              <p className="font-medium">Sidebar Width</p>

      +              <p className="text-sm
      text-muted-foreground">{tempSidebarWidth}px</p>

      +            </div>

      +          </div>

      +          <div className="space-y-2">

      +            <input

      +              type="range"

      +              min="200"

      +              max="500"

      +              step="10"

      +              value={tempSidebarWidth}

      +              onChange={(e) =>
      handleSidebarWidthChange(Number(e.target.value))}

      +              className="w-full h-1.5 bg-muted rounded-lg appearance-none
      cursor-pointer slider"

      +            />

      +            <div className="flex justify-between text-xs
      text-muted-foreground">

      +              <span>200px</span>

      +              <span>350px</span>

      +              <span>500px</span>

      +            </div>

      +          </div>

      +        </div>

      +      </SettingsSection>

      +

      +      {/* Accessibility */}

      +      <SettingsSection icon={<Accessibility />} title="Accessibility">

      +        {/* Reduced Motion */}

      +        <SettingsToggle

      +          icon={<Zap className="w-4 h-4" />}

      +          title="Reduced Motion"

      +          description="Minimize animations"

      +          checked={shell.reducedMotion}

      +          onCheckedChange={(payload) => dispatch({ type:
      'SET_REDUCED_MOTION', payload })}

      +        />

      +      </SettingsSection>

      +

      +      {/* Presets */}

      +      <div className="space-y-4">

      +        <h3 className="text-sm font-semibold text-muted-foreground
      uppercase tracking-wider">

      +          Quick Presets

      +        </h3>

      +        

      +        <div className="grid grid-cols-2 gap-3">

      +          <button 

      +            onClick={() => {

      +              setCompactMode(false)

      +              setReducedMotion(false)

      +              setSidebarWidth(320)

      +            }}

      +            className="p-4 bg-accent/30 hover:bg-accent/50 rounded-xl
      transition-colors text-left"

      +          >

      +            <Monitor className="w-4 h-4 mb-2" />

      +            <p className="font-medium text-sm">Desktop</p>

      +            <p className="text-xs text-muted-foreground">Spacious
      layout</p>

      +          </button>

      +          

      +          <button 

      +            onClick={() => {

      +              setCompactMode(true)

      +              setReducedMotion(true)

      +              setSidebarWidth(240)

      +            }}

      +            className="p-4 bg-accent/30 hover:bg-accent/50 rounded-xl
      transition-colors text-left"

      +          >

      +            <Smartphone className="w-4 h-4 mb-2" />

      +            <p className="font-medium text-sm">Mobile</p>

      +            <p className="text-xs text-muted-foreground">Compact
      layout</p>

      +          </button>

      +        </div>

      +      </div>

      +      <div className="pt-6 border-t border-border">

      +        <button

      +          onClick={handleReset}

      +          className="w-full flex items-center justify-center gap-2 px-4
      py-2.5 bg-destructive/10 text-destructive hover:bg-destructive/20
      rounded-lg transition-colors"

      +        >

      +          <RotateCcw className="w-4 h-4" />

      +          Reset to Defaults

      +        </button>

      +      </div>

      +    </div>

      +  )

      +}

      +

      +// Custom slider styles

      +const sliderStyles = `

      +.slider::-webkit-slider-thumb {

      +  appearance: none;

      +  height: 18px;

      +  width: 18px;

      +  border-radius: 50%;

      +  background: hsl(var(--primary));

      +  cursor: pointer;

      +  border: 3px solid hsl(var(--background));

      +  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);

      +  margin-top: -7px;

      +}

      +

      +.slider::-moz-range-thumb {

      +  height: 18px;

      +  width: 18px;

      +  border-radius: 50%;

      +  background: hsl(var(--primary));

      +  cursor: pointer;

      +  border: 3px solid hsl(var(--background));

      +  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);

      +}

      +`

      +

      +// Inject styles

      +if (typeof document !== 'undefined') {

      +  const styleSheet = document.createElement('style')

      +  styleSheet.textContent = sliderStyles

      +  document.head.appendChild(styleSheet)

      +}
    patchStrategy: standard-diff
  - type: write
    path: src/components/global/CommandPalette.tsx
    content: >+
      --- src/components/global/CommandPalette.tsx

      +++ src/components/global/CommandPalette.tsx

      @@ -7,22 +7,20 @@
         CommandShortcut,
       } from '@/components/ui/command'
       import { useAppStore, type ActivePage } from '@/store/appStore'
      +import { useAppShell } from '@/context/AppShellContext'

      +import { BODY_STATES } from '@/lib/utils'
       import { useCommandPaletteToggle } from '@/hooks/useCommandPaletteToggle.hook'
       import { Home, Settings, Moon, Sun, Monitor, Smartphone, PanelRight, Maximize, Component, Bell } from 'lucide-react'
       
       export function CommandPalette() {
      +  const { isDarkMode, dispatch, toggleFullscreen } = useAppShell();
         const {
           isCommandPaletteOpen,
           setCommandPaletteOpen,
           setActivePage,
      -    toggleDarkMode,

      -    isDarkMode,

      -    setCompactMode,

      -    toggleFullscreen,

      -    openSidePane,

      +    setSidePaneContent,
         } = useAppStore()
         useCommandPaletteToggle()
         
         const runCommand = (command: () => void) => {
      @@ -53,7 +51,7 @@
               </CommandGroup>
               <CommandSeparator />
               <CommandGroup heading="Actions">
      -          <CommandItem onSelect={() => runCommand(toggleDarkMode)}>

      +          <CommandItem onSelect={() => runCommand(() => dispatch({ type:
      'TOGGLE_DARK_MODE' }))}>
                   {isDarkMode ? <Sun className="mr-2 h-4 w-4" /> : <Moon className="mr-2 h-4 w-4" />}
                   <span>Toggle Theme</span>
                   <CommandShortcut>⌘T</CommandShortcut>
      @@ -62,20 +60,23 @@
                   <Maximize className="mr-2 h-4 w-4" />
                   <span>Toggle Fullscreen</span>
                   <CommandShortcut>⌘F</CommandShortcut>
                 </CommandItem>
      -          <CommandItem onSelect={() => runCommand(() =>
      openSidePane('settings'))}>

      +          <CommandItem onSelect={() => runCommand(() => {

      +            setSidePaneContent('settings');

      +            dispatch({ type: 'SET_BODY_STATE', payload:
      BODY_STATES.SIDE_PANE });

      +          })}>
                   <PanelRight className="mr-2 h-4 w-4" />
                   <span>Open Settings in Side Pane</span>
                   <CommandShortcut>⌥S</CommandShortcut>
                 </CommandItem>
               </CommandGroup>
               <CommandSeparator />
               <CommandGroup heading="Preferences">
      -          <CommandItem onSelect={() => runCommand(() =>
      setCompactMode(true))}>

      +          <CommandItem onSelect={() => runCommand(() => dispatch({ type:
      'SET_COMPACT_MODE', payload: true }))}>
                   <Smartphone className="mr-2 h-4 w-4" />
                   <span>Enable Compact Mode</span>
                   <CommandShortcut>⌘C</CommandShortcut>
                 </CommandItem>
      -          <CommandItem onSelect={() => runCommand(() =>
      setCompactMode(false))}>

      +          <CommandItem onSelect={() => runCommand(() => dispatch({ type:
      'SET_COMPACT_MODE', payload: false }))}>
                   <Monitor className="mr-2 h-4 w-4" />
                   <span>Disable Compact Mode</span>
                   <CommandShortcut>⇧⌘C</CommandShortcut>

    patchStrategy: standard-diff
snapshot:
  src/context/AppShellContext.tsx: null
  src/hooks/usePrimaryColor.hook.ts: |-
    import { useEffect } from 'react';
    import { useAppStore } from '@/store/appStore';

    export function usePrimaryColor() {
      const primaryColor = useAppStore((state) => state.primaryColor);

      useEffect(() => {
        document.documentElement.style.setProperty('--primary-hsl', primaryColor);
      }, [primaryColor]);
    }
  src/store/appStore.ts: >-
    import { create } from 'zustand'

    import { persist } from 'zustand/middleware'

    import { SIDEBAR_STATES, BODY_STATES, type SidebarState, type BodyState }
    from '@/lib/utils'


    export type ActivePage = 'dashboard' | 'settings' | 'toaster' |
    'notifications';


    interface AppState {
      // UI States
      sidebarState: SidebarState
      bodyState: BodyState
      isDarkMode: boolean
      sidePaneContent: 'details' | 'settings' | 'main' | 'toaster' | 'notifications'
      activePage: ActivePage
      sidebarWidth: number
      rightPaneWidth: number
      isResizing: boolean
      isResizingRightPane: boolean
      isTopBarVisible: boolean
      isCommandPaletteOpen: boolean
      searchTerm: string
      
      // User Preferences
      autoExpandSidebar: boolean
      reducedMotion: boolean
      compactMode: boolean
      primaryColor: string
      
      // Actions
      setSidebarState: (state: SidebarState) => void
      setBodyState: (state: BodyState) => void
      toggleDarkMode: () => void
      setActivePage: (page: ActivePage) => void
      setSidebarWidth: (width: number) => void
      setRightPaneWidth: (width: number) => void
      setIsResizing: (resizing: boolean) => void
      setIsResizingRightPane: (resizing: boolean) => void
      setTopBarVisible: (visible: boolean) => void
      setAutoExpandSidebar: (auto: boolean) => void
      setReducedMotion: (reduced: boolean) => void
      setCompactMode: (compact: boolean) => void
      setPrimaryColor: (color: string) => void
      setCommandPaletteOpen: (open: boolean) => void
      setSearchTerm: (term: string) => void
      
      // Composite Actions
      toggleSidebar: () => void
      hideSidebar: () => void
      showSidebar: () => void
      peekSidebar: () => void
      toggleFullscreen: () => void
      openSidePane: (content: 'details' | 'settings' | 'main' | 'toaster' | 'notifications') => void
      closeSidePane: () => void
      resetToDefaults: () => void
      handleNavigation: (page: ActivePage) => void
      isPageActive: (page: ActivePage) => boolean
    }


    const defaultState = {
      sidebarState: SIDEBAR_STATES.EXPANDED as SidebarState,
      bodyState: BODY_STATES.NORMAL as BodyState,
      sidePaneContent: 'details' as const,
      activePage: 'dashboard' as ActivePage,
      isDarkMode: false,
      sidebarWidth: 280,
      rightPaneWidth: typeof window !== 'undefined' ? Math.max(300, Math.round(window.innerWidth * 0.6)) : 400,
      isResizing: false,
      isResizingRightPane: false,
      isTopBarVisible: true,
      isCommandPaletteOpen: false,
      autoExpandSidebar: true,
      reducedMotion: false,
      compactMode: false,
      primaryColor: '220 84% 60%',
      searchTerm: '',
    }


    export const useAppStore = create<AppState>()(
      persist(
        (set, get) => ({
          ...defaultState,
          
          // Basic setters
          sidePaneContent: 'details',
          setSidebarState: (state) => set({ sidebarState: state }),
          setBodyState: (state) => set({ bodyState: state }),
          setActivePage: (page) => set({ activePage: page }),
          toggleDarkMode: () => {
            const newMode = !get().isDarkMode
            set({ isDarkMode: newMode })
            document.documentElement.classList.toggle('dark', newMode)
          },
          setSidebarWidth: (width) => set({ sidebarWidth: Math.max(200, Math.min(500, width)) }),
          setRightPaneWidth: (width) => set({ rightPaneWidth: Math.max(300, Math.min(window.innerWidth * 0.8, width)) }),
          setIsResizing: (resizing) => set({ isResizing: resizing }),
          setIsResizingRightPane: (resizing) => set({ isResizingRightPane: resizing }),
          setTopBarVisible: (visible) => set({ isTopBarVisible: visible }),
          setAutoExpandSidebar: (auto) => set({ autoExpandSidebar: auto }),
          setReducedMotion: (reduced) => set({ reducedMotion: reduced }),
          setCompactMode: (compact) => set({ compactMode: compact }),
          setPrimaryColor: (color) => set({ primaryColor: color }),
          setCommandPaletteOpen: (open) => set({ isCommandPaletteOpen: open }),
          setSearchTerm: (term) => set({ searchTerm: term }),
          
          // Composite actions
          toggleSidebar: () => {
            const current = get().sidebarState
            if (current === SIDEBAR_STATES.HIDDEN) {
              set({ sidebarState: SIDEBAR_STATES.COLLAPSED })
            } else if (current === SIDEBAR_STATES.COLLAPSED) {
              set({ sidebarState: SIDEBAR_STATES.EXPANDED })
            } else if (current === SIDEBAR_STATES.EXPANDED) {
              set({ sidebarState: SIDEBAR_STATES.COLLAPSED })
            }
          },
          
          hideSidebar: () => set({ sidebarState: SIDEBAR_STATES.HIDDEN }),
          showSidebar: () => set({ sidebarState: SIDEBAR_STATES.EXPANDED }),
          peekSidebar: () => set({ sidebarState: SIDEBAR_STATES.PEEK }),
          
          toggleFullscreen: () => {
            const current = get().bodyState
            set({ 
              bodyState: current === BODY_STATES.FULLSCREEN ? BODY_STATES.NORMAL : BODY_STATES.FULLSCREEN 
            })
          },
          
          openSidePane: (content) => {
            const { bodyState, sidePaneContent } = get()
            if (bodyState === BODY_STATES.SIDE_PANE && sidePaneContent === content) {
              // If it's open with same content, close it.
              set({ bodyState: BODY_STATES.NORMAL });
            } else {
              // If closed, or different content, open with new content.
              set({ bodyState: BODY_STATES.SIDE_PANE, sidePaneContent: content });
            }
          },
          closeSidePane: () => {
            set({ bodyState: BODY_STATES.NORMAL })
          },
          
          resetToDefaults: () => {
            set(defaultState)
            // Also reset dark mode class on html element
            if (defaultState.isDarkMode) {
              document.documentElement.classList.add('dark')
            } else {
              document.documentElement.classList.remove('dark')
            }
          },
          handleNavigation: (page) => {
            set({ activePage: page });
          },
          isPageActive: (page) => {
            const { activePage, bodyState, sidePaneContent } = get();
            const pageToSidePaneContent = {
              dashboard: 'main',
              settings: 'settings',
              toaster: 'toaster',
              notifications: 'notifications',
            };
            return activePage === page || (bodyState === BODY_STATES.SIDE_PANE && sidePaneContent === pageToSidePaneContent[page]);
          },
        }),
        {
          name: 'app-preferences',
          partialize: (state) => ({
            sidebarState: state.sidebarState,
            bodyState: state.bodyState,
            activePage: state.activePage,
            sidePaneContent: state.sidePaneContent,
            isDarkMode: state.isDarkMode,
            sidebarWidth: state.sidebarWidth,
            rightPaneWidth: state.rightPaneWidth,
            autoExpandSidebar: state.autoExpandSidebar,
            reducedMotion: state.reducedMotion,
            compactMode: state.compactMode,
            primaryColor: state.primaryColor,
            // searchTerm is not persisted
          }),
        }
      )
    )


    // Initialize dark mode on load

    if (typeof window !== 'undefined') {
      const stored = localStorage.getItem('app-preferences')
      if (stored) {
        const parsed = JSON.parse(stored)
        if (parsed.state?.isDarkMode) {
          document.documentElement.classList.add('dark')
        }
      }
    }
  src/App.tsx: |-
    import { AppShell } from './components/layout/AppShell'
    import './index.css'

    function App() {
      return (
        <div className="h-screen w-screen overflow-hidden bg-background">
          <AppShell />
        </div>
      )
    }

    export default App
  src/hooks/useResizablePanes.hook.ts: |-
    import { useEffect } from 'react';
    import { gsap } from 'gsap';
    import { useAppStore } from '@/store/appStore';

    export function useResizableSidebar(
      sidebarRef: React.RefObject<HTMLDivElement>,
      resizeHandleRef: React.RefObject<HTMLDivElement>
    ) {
      const { isResizing, setIsResizing, setSidebarWidth } = useAppStore(
        (state) => ({
          isResizing: state.isResizing,
          setIsResizing: state.setIsResizing,
          setSidebarWidth: state.setSidebarWidth,
        })
      );

      useEffect(() => {
        const handleMouseMove = (e: MouseEvent) => {
          if (!isResizing) return;

          const newWidth = Math.max(200, Math.min(500, e.clientX));
          setSidebarWidth(newWidth);

          if (sidebarRef.current) {
            gsap.set(sidebarRef.current, { width: newWidth });
          }
          if (resizeHandleRef.current) {
            gsap.set(resizeHandleRef.current, { left: newWidth });
          }
        };

        const handleMouseUp = () => {
          setIsResizing(false);
          document.body.style.cursor = '';
          document.body.style.userSelect = '';
        };

        if (isResizing) {
          document.body.style.cursor = 'col-resize';
          document.body.style.userSelect = 'none';
          document.addEventListener('mousemove', handleMouseMove);
          document.addEventListener('mouseup', handleMouseUp);
        }

        return () => {
          document.removeEventListener('mousemove', handleMouseMove);
          document.removeEventListener('mouseup', handleMouseUp);
        };
      }, [isResizing, setIsResizing, setSidebarWidth, sidebarRef, resizeHandleRef]);
    }

    export function useResizableRightPane() {
      const {
        isResizingRightPane,
        setIsResizingRightPane,
        setRightPaneWidth,
      } = useAppStore((state) => ({
        isResizingRightPane: state.isResizingRightPane,
        setIsResizingRightPane: state.setIsResizingRightPane,
        setRightPaneWidth: state.setRightPaneWidth,
      }));

      useEffect(() => {
        const handleMouseMove = (e: MouseEvent) => {
          if (!isResizingRightPane) return;

          const newWidth = window.innerWidth - e.clientX;
          setRightPaneWidth(newWidth);
        };

        const handleMouseUp = () => {
          setIsResizingRightPane(false);
          document.body.style.cursor = '';
          document.body.style.userSelect = '';
        };

        if (isResizingRightPane) {
          document.body.style.cursor = 'col-resize';
          document.body.style.userSelect = 'none';
          document.addEventListener('mousemove', handleMouseMove);
          document.addEventListener('mouseup', handleMouseUp);
        }

        return () => {
          document.removeEventListener('mousemove', handleMouseMove);
          document.removeEventListener('mouseup', handleMouseUp);
          document.body.style.cursor = '';
        };
      }, [isResizingRightPane, setIsResizingRightPane, setRightPaneWidth]);
    }
  src/hooks/useAppShellAnimations.hook.ts: |-
    import { useEffect } from 'react';
    import { gsap } from 'gsap';
    import { useAppStore } from '@/store/appStore';
    import { SIDEBAR_STATES, BODY_STATES } from '@/lib/utils';

    export function useSidebarAnimations(
      sidebarRef: React.RefObject<HTMLDivElement>,
      resizeHandleRef: React.RefObject<HTMLDivElement>
    ) {
      const { sidebarState, sidebarWidth, bodyState, reducedMotion } = useAppStore(
        (state) => ({
          sidebarState: state.sidebarState,
          sidebarWidth: state.sidebarWidth,
          bodyState: state.bodyState,
          reducedMotion: state.reducedMotion,
        })
      );
      const animationDuration = reducedMotion ? 0.1 : 0.4;

      useEffect(() => {
        if (!sidebarRef.current || !resizeHandleRef.current) return;

        const sidebar = sidebarRef.current;
        const handle = resizeHandleRef.current;
        
        let targetWidth = 0;
        let targetOpacity = 1;

        if (bodyState === BODY_STATES.FULLSCREEN) {
          targetWidth = 0;
          targetOpacity = 0;
        } else {
          switch (sidebarState) {
            case SIDEBAR_STATES.HIDDEN:
              targetWidth = 0;
              targetOpacity = 0;
              break;
            case SIDEBAR_STATES.COLLAPSED:
              targetWidth = 64;
              targetOpacity = 1;
              break;
            case SIDEBAR_STATES.EXPANDED:
              targetWidth = sidebarWidth;
              targetOpacity = 1;
              break;
            case SIDEBAR_STATES.PEEK:
              targetWidth = sidebarWidth * 0.8;
              targetOpacity = 0.95;
              break;
          }
        }

        const tl = gsap.timeline({ ease: "power3.out" });
        
        tl.to(sidebar, {
          width: targetWidth,
          opacity: targetOpacity,
          duration: animationDuration,
        });
        tl.to(handle, {
          left: targetWidth,
          duration: animationDuration,
        }, 0);

      }, [sidebarState, sidebarWidth, bodyState, animationDuration, sidebarRef, resizeHandleRef]);
    }

    export function useBodyStateAnimations(
      appRef: React.RefObject<HTMLDivElement>,
      mainContentRef: React.RefObject<HTMLDivElement>,
      rightPaneRef: React.RefObject<HTMLDivElement>,
      topBarContainerRef: React.RefObject<HTMLDivElement>
    ) {
      const {
        bodyState,
        reducedMotion,
        rightPaneWidth,
        closeSidePane,
        isTopBarVisible,
      } = useAppStore((state) => ({
        bodyState: state.bodyState,
        reducedMotion: state.reducedMotion,
        rightPaneWidth: state.rightPaneWidth,
        closeSidePane: state.closeSidePane,
        isTopBarVisible: state.isTopBarVisible,
      }));
      const animationDuration = reducedMotion ? 0.1 : 0.4;

      useEffect(() => {
        if (!mainContentRef.current || !rightPaneRef.current || !topBarContainerRef.current) return;

        const ease = "power3.out";
        const isFullscreen = bodyState === BODY_STATES.FULLSCREEN;
        const isSidePane = bodyState === BODY_STATES.SIDE_PANE;

        // Right pane animation
        gsap.to(rightPaneRef.current, {
          width: rightPaneWidth,
          x: isSidePane ? 0 : rightPaneWidth + 5, // +5 to hide border
          duration: animationDuration,
          ease,
        });

        gsap.to(mainContentRef.current, {
          paddingTop: isFullscreen ? '0rem' : isTopBarVisible ? '5rem' : '0rem', // h-20 is 5rem
          duration: animationDuration,
          ease,
        });

        gsap.to(topBarContainerRef.current, {
          y: (isFullscreen || !isTopBarVisible) ? '-100%' : '0%',
          duration: animationDuration,
          ease,
        });
        
        // Add backdrop for side pane
        const backdrop = document.querySelector('.app-backdrop');
        if (isSidePane) {
          if (!backdrop) {
            const el = document.createElement('div');
            el.className = 'app-backdrop fixed inset-0 bg-black/30 z-[55]';
            appRef.current?.appendChild(el);
            gsap.fromTo(el, { opacity: 0 }, { opacity: 1, duration: animationDuration });
            el.onclick = () => closeSidePane();
          }
        } else {
          if (backdrop) {
            gsap.to(backdrop, { opacity: 0, duration: animationDuration, onComplete: () => backdrop.remove() });
          }
        }
      }, [bodyState, animationDuration, rightPaneWidth, closeSidePane, isTopBarVisible, appRef, mainContentRef, rightPaneRef, topBarContainerRef]);
    }
  src/hooks/useAutoAnimateTopBar.ts: |-
    import { useRef, useCallback, useEffect } from 'react';
    import { useAppStore } from '@/store/appStore';

    export function useAutoAnimateTopBar(isPane = false) {
      const setTopBarVisible = useAppStore((state) => state.setTopBarVisible);
      const lastScrollTop = useRef(0);
      const scrollTimeout = useRef<ReturnType<typeof setTimeout> | null>(null);

      const onScroll = useCallback((event: React.UIEvent<HTMLDivElement>) => {
        if (isPane) return;

        // Clear previous timeout
        if (scrollTimeout.current) {
          clearTimeout(scrollTimeout.current);
        }

        const { scrollTop } = event.currentTarget;
        
        if (scrollTop > lastScrollTop.current && scrollTop > 200) {
          setTopBarVisible(false);
        } else if (scrollTop < lastScrollTop.current || scrollTop <= 0) {
          setTopBarVisible(true);
        }
        
        lastScrollTop.current = scrollTop <= 0 ? 0 : scrollTop;

        // Set new timeout to show top bar when scrolling stops
        scrollTimeout.current = setTimeout(() => {
          // Don't hide, just ensure it's visible after scrolling stops
          // and we are not at the top of the page.
          if (scrollTop > 0) {
            setTopBarVisible(true);
          }
        }, 250); // Adjust timeout as needed
      }, [isPane, setTopBarVisible]);

      // Cleanup on unmount
      useEffect(() => {
        return () => {
          if (scrollTimeout.current) {
            clearTimeout(scrollTimeout.current);
          }
        };
      }, []);

      return { onScroll };
    }
  src/components/layout/AppShell.tsx: >-
    import { useRef } from 'react'

    import { cn } from '@/lib/utils'

    import { EnhancedSidebar } from './EnhancedSidebar'

    import { MainContent } from './MainContent'

    import { RightPane } from './RightPane'

    import { TopBar } from './TopBar'

    import { CommandPalette } from '@/components/global/CommandPalette'

    import { useAppStore } from '@/store/appStore'

    import { SIDEBAR_STATES } from '@/lib/utils'

    import { usePrimaryColor } from '@/hooks/usePrimaryColor.hook'

    import { useResizableSidebar, useResizableRightPane } from
    '@/hooks/useResizablePanes.hook'

    import { useSidebarAnimations, useBodyStateAnimations } from
    '@/hooks/useAppShellAnimations.hook'


    export function AppShell() {
      const {
        sidebarState,
        isDarkMode,
        setSidebarState,
        setIsResizing,
        toggleSidebar,
        peekSidebar,
        toggleFullscreen,
        toggleDarkMode,
        autoExpandSidebar,
      } = useAppStore()
      
      const appRef = useRef<HTMLDivElement>(null)
      const sidebarRef = useRef<HTMLDivElement>(null)
      const mainContentRef = useRef<HTMLDivElement>(null)
      const rightPaneRef = useRef<HTMLDivElement>(null)
      const resizeHandleRef = useRef<HTMLDivElement>(null)
      const topBarContainerRef = useRef<HTMLDivElement>(null)

      // Custom hooks for logic
      usePrimaryColor();
      useResizableSidebar(sidebarRef, resizeHandleRef);
      useResizableRightPane();
      useSidebarAnimations(sidebarRef, resizeHandleRef);
      useBodyStateAnimations(appRef, mainContentRef, rightPaneRef, topBarContainerRef);

      return (
        <div 
          ref={appRef}
          className={cn(
            "relative h-screen w-screen overflow-hidden bg-background transition-colors duration-300",
            isDarkMode && "dark"
          )}
        >
          <div className="flex h-screen overflow-hidden">
            {/* Enhanced Sidebar */}
            <EnhancedSidebar
              ref={sidebarRef}
              onMouseEnter={() => {
                if (autoExpandSidebar && sidebarState === SIDEBAR_STATES.COLLAPSED) {
                  peekSidebar()
                }
              }}
              onMouseLeave={() => {
                if (autoExpandSidebar && sidebarState === SIDEBAR_STATES.PEEK) {
                  setSidebarState(SIDEBAR_STATES.COLLAPSED)
                }
              }}
            />

            {/* Resize Handle */}
            {sidebarState !== SIDEBAR_STATES.HIDDEN && (
              <div
                ref={resizeHandleRef}
                className={cn(
                  "absolute top-0 w-2 h-full bg-transparent hover:bg-primary/20 cursor-col-resize z-50 transition-colors duration-200 group -translate-x-1/2"
                )}
                onMouseDown={(e) => {
                  e.preventDefault()
                  setIsResizing(true)
                }}
              >
                <div className="w-0.5 h-full bg-border group-hover:bg-primary transition-colors duration-200 mx-auto" />
              </div>
            )}

            {/* Main Content Area */}
            <div className="relative flex-1 overflow-hidden bg-background">
              <div ref={topBarContainerRef} className="absolute inset-x-0 top-0 z-30">
                <TopBar
                  onToggleSidebar={toggleSidebar}
                  onToggleFullscreen={toggleFullscreen}
                  onToggleDarkMode={toggleDarkMode}
                />
              </div>
              
              {/* Main Content */}
              <MainContent
                ref={mainContentRef}
                onToggleFullscreen={toggleFullscreen}
              />
            </div>
          </div>
          <RightPane ref={rightPaneRef} />
          <CommandPalette />
        </div>
      )
    }
  src/components/layout/RightPane.tsx: >-
    import { forwardRef } from 'react'

    import { SlidersHorizontal, Settings, ChevronRight, LayoutDashboard,
    ChevronsLeftRight, Component, Bell } from 'lucide-react'

    import { useAppStore } from '@/store/appStore'

    import { cn } from '@/lib/utils'

    import { SettingsContent } from '@/features/settings/SettingsContent'

    import { DashboardContent } from '@/pages/Dashboard'

    import { ToasterDemo } from '@/pages/ToasterDemo'

    import { NotificationsPage } from '@/pages/Notifications'


    export const RightPane = forwardRef<HTMLDivElement>((_props, ref) => {
      const { closeSidePane, setIsResizingRightPane, sidePaneContent, setActivePage } = useAppStore();

      const contentMap = {
        main: { title: 'Dashboard', icon: LayoutDashboard, page: 'dashboard', content: <DashboardContent isInSidePane /> },
        settings: { title: 'Settings', icon: Settings, page: 'settings', content: <SettingsContent /> },
        toaster: { title: 'Toaster Demo', icon: Component, page: 'toaster', content: <ToasterDemo isInSidePane /> },
        notifications: { title: 'Notifications', icon: Bell, page: 'notifications', content: <NotificationsPage isInSidePane /> },
        details: { title: 'Details Panel', icon: SlidersHorizontal, content: <p className="text-muted-foreground">This is the side pane. It can be used to display contextual information, forms, or actions related to the main content.</p> }
      } as const;

      const currentContent = contentMap[sidePaneContent as keyof typeof contentMap] || contentMap.details;
      const CurrentIcon = currentContent.icon;

      const handleMaximize = () => {
        if ('page' in currentContent && currentContent.page) {
          setActivePage(currentContent.page);
        }
        closeSidePane()
      }

      return (
        <aside ref={ref} className="bg-card border-l border-border flex flex-col h-full overflow-hidden fixed top-0 right-0 z-[60]">
          <button
            onClick={closeSidePane}
            className="absolute top-1/2 -left-px -translate-y-1/2 -translate-x-full w-8 h-16 bg-card border border-r-0 border-border rounded-l-lg flex items-center justify-center hover:bg-accent transition-colors group z-10"
            title="Close pane"
          >
            <ChevronRight className="w-5 h-5 text-muted-foreground group-hover:text-foreground transition-colors" />
          </button>
          <div 
            className={cn(
              "absolute top-0 left-0 w-2 h-full bg-transparent hover:bg-primary/20 cursor-col-resize z-50 transition-colors duration-200 group -translate-x-1/2"
            )}
            onMouseDown={(e) => {
              e.preventDefault()
              setIsResizingRightPane(true)
            }}
          >
            <div className="w-0.5 h-full bg-border group-hover:bg-primary transition-colors duration-200 mx-auto" />
          </div>
          <div className="flex items-center justify-between p-4 border-b border-border h-20 flex-shrink-0 pl-6">
            <div className="flex items-center gap-2">
              <CurrentIcon className="w-5 h-5" />
              <h2 className="text-lg font-semibold whitespace-nowrap">
                {currentContent.title}
              </h2>
            </div>
            
            {'page' in currentContent && currentContent.page && (
              <button
                onClick={handleMaximize}
                className="h-10 w-10 flex items-center justify-center hover:bg-accent rounded-full transition-colors mr-2"
                title="Move to Main View"
              >
                <ChevronsLeftRight className="w-5 h-5" />
              </button>
            )}
          </div>
          <div className="flex-1 overflow-y-auto px-8 py-6">
            {currentContent.content}
          </div>
        </aside>
      )
    })


    RightPane.displayName = "RightPane"
  src/components/layout/EnhancedSidebar.tsx: >-
    import React from 'react';

    import {
      Home,
      Settings,
      HelpCircle,
      Component,
      Rocket,
      MoreHorizontal,
      Bell,
      Search,
      FileText,
      Star,
      Trash2,
      FolderOpen,
      Mail,
      Bookmark,
      Download,
      User,
      Plus
    } from 'lucide-react';

    import { useAppStore, type ActivePage } from '@/store/appStore';

    import {
      Workspaces,
      WorkspaceTrigger,
      WorkspaceContent,
      type Workspace,
    } from './WorkspaceSwitcher';

    import {
      DropdownMenu,
      DropdownMenuContent,
      DropdownMenuItem,
      DropdownMenuTrigger,
    } from '@/components/ui/dropdown-menu';

    import {
      Sidebar,
      SidebarContent,
      SidebarHeader,
      SidebarTitle,
      SidebarBody,
      SidebarFooter,
      SidebarSection,
      SidebarMenuItem,
      SidebarMenuButton,
      SidebarMenuAction,
      SidebarLabel,
      SidebarBadge,
      SidebarTooltip,
      SidebarIcon,
      useSidebar,
    } from './Sidebar';

    import { cn } from '@/lib/utils';


    interface MyWorkspace extends Workspace {
      logo: string;
      plan: string;
    }


    const mockWorkspaces: MyWorkspace[] = [
      { id: 'ws1', name: 'Acme Inc.', logo: 'https://avatar.vercel.sh/acme.png', plan: 'Pro' },
      { id: 'ws2', name: 'Monsters Inc.', logo: 'https://avatar.vercel.sh/monsters.png', plan: 'Free' },
      { id: 'ws3', name: 'Stark Industries', logo: 'https://avatar.vercel.sh/stark.png', plan: 'Enterprise' },
    ];


    const SidebarWorkspaceTrigger = () => {
      const { isCollapsed, compactMode } = useSidebar();

      return (
        <WorkspaceTrigger
          collapsed={isCollapsed}
          className={cn(
            'rounded-xl transition-colors hover:bg-accent/50 w-full',
            isCollapsed ? 'p-2' : 'p-3 bg-accent/50',
          )}
          avatarClassName={cn(compactMode ? 'h-8 w-8' : 'h-10 w-10')}
        />
      );
    };


    interface SidebarProps {
      onMouseEnter?: () => void;
      onMouseLeave?: () => void;
    }


    export const EnhancedSidebar = React.forwardRef<HTMLDivElement,
    SidebarProps>(
      ({ onMouseEnter, onMouseLeave }, ref) => {
        const { sidebarWidth, compactMode } = useAppStore();
        const [selectedWorkspace, setSelectedWorkspace] = React.useState(mockWorkspaces[0]);

        return (
          <Sidebar
            ref={ref}
            style={{ width: sidebarWidth }}
            onMouseEnter={onMouseEnter}
            onMouseLeave={onMouseLeave}
          >
            <SidebarContent>
              <SidebarHeader>
                <div className="p-2 bg-primary/20 rounded-lg">
                  <Rocket className="w-5 h-5 text-primary" />
                </div>
                <SidebarTitle>Amazing App</SidebarTitle>
              </SidebarHeader>

              <SidebarBody>
                <SidebarSection title="Main">
                  <AppMenuItem icon={Home} label="Dashboard" page="dashboard" />
                  <AppMenuItem icon={Search} label="Search" />
                  <AppMenuItem icon={Bell} label="Notifications" badge={3} page="notifications" opensInSidePane />
                </SidebarSection>
                
                <SidebarSection title="Workspace" collapsible defaultExpanded>
                  <AppMenuItem icon={FileText} label="Documents" hasActions>
                    <AppMenuItem icon={FileText} label="Recent" isSubItem />
                    <AppMenuItem icon={Star} label="Starred" isSubItem />
                    <AppMenuItem icon={Trash2} label="Trash" isSubItem />
                  </AppMenuItem>
                  <AppMenuItem icon={FolderOpen} label="Projects" hasActions />
                  <AppMenuItem icon={Mail} label="Messages" badge={12} />
                </SidebarSection>
                
                <SidebarSection title="Personal" collapsible>
                  <AppMenuItem icon={Bookmark} label="Bookmarks" />
                  <AppMenuItem icon={Star} label="Favorites" />
                  <AppMenuItem icon={Download} label="Downloads" />
                </SidebarSection>

                <SidebarSection title="Components" collapsible defaultExpanded>
                  <AppMenuItem icon={Component} label="Toaster" page="toaster" />
                </SidebarSection>
              </SidebarBody>

              <SidebarFooter>
                <SidebarSection>
                  <AppMenuItem icon={User} label="Profile" />
                  <AppMenuItem icon={Settings} label="Settings" page="settings" />
                  <AppMenuItem icon={HelpCircle} label="Help" />
                </SidebarSection>

                <div className={cn(compactMode ? 'mt-4' : 'mt-6')}>
                  <Workspaces
                    workspaces={mockWorkspaces}
                    selectedWorkspaceId={selectedWorkspace.id}
                    onWorkspaceChange={setSelectedWorkspace}
                  >
                    <SidebarWorkspaceTrigger />
                    <WorkspaceContent>
                      <button className="flex w-full items-center gap-2 rounded-sm px-2 py-2 text-left text-sm hover:bg-accent hover:text-accent-foreground focus:outline-none">
                        <Plus className="h-4 w-4" />
                        <span>Create Workspace</span>
                      </button>
                    </WorkspaceContent>
                  </Workspaces>
                </div>
              </SidebarFooter>
            </SidebarContent>
          </Sidebar>
        );
      },
    );

    EnhancedSidebar.displayName = 'EnhancedSidebar';



    // Example of a reusable menu item component built with the new Sidebar
    primitives

    interface AppMenuItemProps {
      icon: React.ElementType;
      label: string;
      badge?: number;
      hasActions?: boolean;
      children?: React.ReactNode;
      isSubItem?: boolean;
      page?: ActivePage;
      opensInSidePane?: boolean;
    }


    const AppMenuItem: React.FC<AppMenuItemProps> = ({ icon: Icon, label, badge,
    hasActions, children, isSubItem = false, page, opensInSidePane = false }) =>
    {
      const { handleNavigation, isPageActive, openSidePane } = useAppStore();
      const isActive = page ? isPageActive(page) : false;
      const { compactMode } = useAppStore();
      const { isCollapsed } = useSidebar();

      const handleClick = () => {
        if (page) {
          if (opensInSidePane) {
            const pageToPaneMap: { [key in ActivePage]?: 'main' | 'settings' | 'toaster' | 'notifications' } = {
              dashboard: 'main',
              settings: 'settings',
              toaster: 'toaster',
              notifications: 'notifications',
            };
            if (pageToPaneMap[page]) openSidePane(pageToPaneMap[page]!);
          } else {
            handleNavigation(page);
          }
        }
      };

      return (
        <div className={isSubItem ? (compactMode ? 'ml-4' : 'ml-6') : ''}>
          <SidebarMenuItem>
            <SidebarMenuButton onClick={handleClick} isActive={isActive}>
              <SidebarIcon>
                <Icon className={isSubItem ? "w-3 h-3" : "w-4 h-4"}/>
              </SidebarIcon>
              <SidebarLabel>{label}</SidebarLabel>
              {badge && <SidebarBadge>{badge}</SidebarBadge>}
              <SidebarTooltip label={label} badge={badge} />
            </SidebarMenuButton>

            {hasActions && (
              <DropdownMenu>
                <DropdownMenuTrigger asChild>
                  <SidebarMenuAction>
                    <MoreHorizontal className="h-4 w-4" />
                  </SidebarMenuAction>
                </DropdownMenuTrigger>
                <DropdownMenuContent side="right" align="start">
                  <DropdownMenuItem>
                    <span>Edit {label}</span>
                  </DropdownMenuItem>
                  <DropdownMenuItem>
                    <span>Delete {label}</span>
                  </DropdownMenuItem>
                </DropdownMenuContent>
              </DropdownMenu>
            )}
          </SidebarMenuItem>
          {!isCollapsed && children && (
            <div className="space-y-1 mt-1">{children}</div>
          )}
        </div>
      );
    };
  src/components/layout/Sidebar.tsx: >-
    import * as React from 'react';

    import { ChevronDown } from 'lucide-react';

    import { Slot } from '@radix-ui/react-slot';

    import { useAppStore } from '@/store/appStore';

    import { SIDEBAR_STATES } from '@/lib/utils';

    import { cn } from '@/lib/utils';

    import { Button } from '@/components/ui/button';


    // --- Context ---

    interface SidebarContextValue {
      isCollapsed: boolean;
      isPeek: boolean;
      compactMode: boolean;
    }


    const SidebarContext = React.createContext<SidebarContextValue |
    null>(null);


    export const useSidebar = () => {
      const context = React.useContext(SidebarContext);
      if (!context) {
        throw new Error('useSidebar must be used within a Sidebar component');
      }
      return context;
    };


    // --- Main Sidebar Component ---

    interface SidebarProps extends React.HTMLAttributes<HTMLDivElement> {
      children: React.ReactNode;
    }


    const Sidebar = React.forwardRef<HTMLDivElement, SidebarProps>(
      ({ children, className, ...props }, ref) => {
        const { sidebarState, compactMode } = useAppStore();
        const isCollapsed = sidebarState === SIDEBAR_STATES.COLLAPSED;
        const isPeek = sidebarState === SIDEBAR_STATES.PEEK;

        return (
          <SidebarContext.Provider value={{ isCollapsed, isPeek, compactMode }}>
            <div
              ref={ref}
              className={cn(
                'relative bg-card flex-shrink-0',
                'h-full',
                isPeek && 'shadow-xl z-40',
                compactMode && 'text-sm',
                className,
              )}
              {...props}
            >
              {isPeek && <div className="absolute inset-0 bg-background/80 backdrop-blur-sm" />}
              {children}
            </div>
          </SidebarContext.Provider>
        );
      },
    );

    Sidebar.displayName = 'Sidebar';


    // --- Sidebar Content Wrapper ---

    const SidebarContent = React.forwardRef<
      HTMLDivElement,
      React.HTMLAttributes<HTMLDivElement>
    >(({ className, ...props }, ref) => {
      const { compactMode } = useSidebar();
      return (
        <div
          ref={ref}
          className={cn(
            'relative z-10 h-full flex flex-col',
            compactMode ? 'p-3' : 'p-4',
            className,
          )}
          {...props}
        />
      );
    });

    SidebarContent.displayName = 'SidebarContent';


    // --- Sidebar Header ---

    const SidebarHeader = React.forwardRef<
      HTMLDivElement,
      React.HTMLAttributes<HTMLDivElement>
    >(({ className, ...props }, ref) => {
      const { isCollapsed } = useSidebar();
      return (
        <div
          ref={ref}
          className={cn(
            'flex items-center gap-3',
            isCollapsed ? 'justify-center' : 'px-3',
            'h-16',
            className,
          )}
          {...props}
        />
      );
    });

    SidebarHeader.displayName = 'SidebarHeader';


    const SidebarTitle = React.forwardRef<
      HTMLParagraphElement,
      React.HTMLAttributes<HTMLParagraphElement>
    >(({ className, ...props }, ref) => {
      const { isCollapsed } = useSidebar();
      if (isCollapsed) return null;
      return (
        <h1
          ref={ref}
          className={cn('text-lg font-bold nav-label', className)}
          {...props}
        />
      );
    });

    SidebarTitle.displayName = 'SidebarTitle';


    // --- Sidebar Body ---

    const SidebarBody = React.forwardRef<
      HTMLDivElement,
      React.HTMLAttributes<HTMLDivElement>
    >(({ className, ...props }, ref) => (
      <div
        ref={ref}
        className={cn(
          'flex-1 overflow-y-auto space-y-6 pt-4',
          className,
        )}
        {...props}
      />
    ));

    SidebarBody.displayName = 'SidebarBody';


    // --- Sidebar Footer ---

    const SidebarFooter = React.forwardRef<
      HTMLDivElement,
      React.HTMLAttributes<HTMLDivElement>
    >(({ className, ...props }, ref) => {
      const { compactMode } = useSidebar();
      return (
        <div
          ref={ref}
          className={cn('pt-4 border-t border-border', compactMode && 'pt-3', className)}
          {...props}
        />
      );
    });

    SidebarFooter.displayName = 'SidebarFooter';


    // --- Sidebar Section ---

    const SidebarSection = React.forwardRef<
      HTMLDivElement,
      React.HTMLAttributes<HTMLDivElement> & {
        title?: string;
        collapsible?: boolean;
        defaultExpanded?: boolean;
      }
    >(({ title, collapsible = false, defaultExpanded = true, children, ...props
    }, ref) => {
      const { isCollapsed } = useSidebar();
      const [isExpanded, setIsExpanded] = React.useState(defaultExpanded);

      const handleToggle = () => {
        if (collapsible) {
          setIsExpanded(!isExpanded);
        }
      };

      return (
        <div ref={ref} className="space-y-1" {...props}>
          {!isCollapsed && title && (
            <div
              className={cn(
                'flex items-center justify-between px-3 text-xs font-medium text-muted-foreground uppercase tracking-wider',
                collapsible && 'cursor-pointer hover:text-foreground transition-colors',
              )}
              onClick={handleToggle}
            >
              <span className="section-title">{title}</span>
              {collapsible && (
                <ChevronDown
                  className={cn(
                    'section-chevron w-3 h-3 transition-transform',
                    isExpanded ? 'rotate-0' : '-rotate-90',
                  )}
                />
              )}
            </div>
          )}
          {(!collapsible || isExpanded || isCollapsed) && (
            <nav className="space-y-1">{children}</nav>
          )}
        </div>
      );
    });

    SidebarSection.displayName = 'SidebarSection';


    // --- Sidebar Menu Item ---

    const SidebarMenuItem = React.forwardRef<
      HTMLDivElement,
      React.HTMLAttributes<HTMLDivElement>
    >(({ className, ...props }, ref) => {
      return <div ref={ref} className={cn('group/item relative flex items-stretch', className)} {...props} />;
    });

    SidebarMenuItem.displayName = 'SidebarMenuItem';



    // --- Sidebar Menu Button ---

    interface SidebarMenuButtonProps extends
    React.ButtonHTMLAttributes<HTMLButtonElement> {
      asChild?: boolean;
      isActive?: boolean;
    }

    const SidebarMenuButton = React.forwardRef<HTMLButtonElement,
    SidebarMenuButtonProps>(
      ({ className, asChild = false, isActive, ...props }, ref) => {
        const { isCollapsed, compactMode } = useSidebar();
        const Comp = asChild ? Slot : 'button';

        return (
          <Comp
            ref={ref}
            className={cn(
              'group flex items-center gap-3 rounded-lg cursor-pointer transition-all duration-200 w-full text-left flex-1',
              compactMode ? 'px-2 py-1.5' : 'px-4 py-2.5',
              'hover:bg-accent',
              isActive && 'bg-primary text-primary-foreground hover:bg-primary/90',
              isCollapsed && 'justify-center',
              className
            )}
            {...props}
          />
        );
      }
    );

    SidebarMenuButton.displayName = 'SidebarMenuButton';


    // --- Sidebar Menu Action ---

    const SidebarMenuAction = React.forwardRef<
      HTMLButtonElement,
      React.ButtonHTMLAttributes<HTMLButtonElement>
    >(({ className, ...props }, ref) => {
      const { isCollapsed } = useSidebar();
      if (isCollapsed) return null;
      return (
        <Button
          ref={ref}
          variant="ghost"
          size="icon"
          className={cn(
            'h-full w-8 rounded-l-none opacity-0 group-hover/item:opacity-100 transition-opacity',
            'focus:opacity-100', // show on focus for accessibility
            className
          )}
          {...props}
        />
      );
    });

    SidebarMenuAction.displayName = 'SidebarMenuAction';


    // --- Sidebar Menu Label ---

    const SidebarLabel = React.forwardRef<
      HTMLSpanElement,
      React.HTMLAttributes<HTMLSpanElement>
    >(({ className, ...props }, ref) => {
      const { isCollapsed } = useSidebar();
      if (isCollapsed) return null;
      return (
        <span
          ref={ref}
          className={cn('nav-label flex-1 font-medium truncate', className)}
          {...props}
        />
      );
    });

    SidebarLabel.displayName = 'SidebarLabel';



    // --- Sidebar Menu Badge ---

    const SidebarBadge = React.forwardRef<
      HTMLSpanElement,
      React.HTMLAttributes<HTMLSpanElement>
    >(({ className, children, ...props }, ref) => {
      const { isCollapsed } = useSidebar();
      if (isCollapsed) return null;
      const badgeContent = typeof children === 'number' && children > 99 ? '99+' : children;
      return (
        <span
          ref={ref}
          className={cn(
            'nav-badge bg-destructive text-destructive-foreground text-xs px-1.5 py-0.5 rounded-full min-w-[1.25rem] text-center',
            className
          )}
          {...props}
        >
          {badgeContent}
        </span>
      );
    });

    SidebarBadge.displayName = 'SidebarBadge';



    // --- Sidebar Tooltip ---

    interface SidebarTooltipProps extends React.HTMLAttributes<HTMLDivElement> {
      label: string;
      badge?: number | string;
    }

    const SidebarTooltip = ({ label, badge, className, ...props }:
    SidebarTooltipProps) => {
      const { isCollapsed } = useSidebar();
      if (!isCollapsed) return null;
      return (
        <div
          className={cn(
            'absolute left-full ml-2 px-2 py-1 bg-popover text-popover-foreground text-sm rounded-md shadow-lg opacity-0 group-hover:opacity-100 transition-opacity pointer-events-none whitespace-nowrap z-50',
            className
          )}
          {...props}
        >
          {label}
          {badge && (
            <span className="ml-2 bg-destructive text-destructive-foreground text-xs px-1.5 py-0.5 rounded-full">
              {typeof badge === 'number' && badge > 99 ? '99+' : badge}
            </span>
          )}
        </div>
      );
    };

    SidebarTooltip.displayName = 'SidebarTooltip';



    // --- Icon Wrapper for consistent sizing ---

    const SidebarIcon = ({ children, className }: { children: React.ReactNode,
    className?: string }) => {
      return (
        <div className={cn("flex-shrink-0 w-4 h-4", className)}>
          {children}
        </div>
      )
    }


    export {
      Sidebar,
      SidebarContent,
      SidebarHeader,
      SidebarTitle,
      SidebarBody,
      SidebarFooter,
      SidebarSection,
      SidebarMenuItem,
      SidebarMenuButton,
      SidebarMenuAction,
      SidebarLabel,
      SidebarBadge,
      SidebarTooltip,
      SidebarIcon
    };
  src/components/layout/TopBar.tsx: |-
    import { useState } from 'react'
    import {
      Menu, 
      Maximize, 
      Minimize, 
      Moon, 
      Sun,
      Settings,
      Command,
      Zap,
      ChevronRight,
      Search,
      Filter,
      Plus,
      PanelRight,
    } from 'lucide-react'
    import { cn } from '@/lib/utils'
    import { BODY_STATES } from '@/lib/utils'
    import { useAppStore } from '@/store/appStore'
    import { UserDropdown } from './UserDropdown'

    interface TopBarProps {
      onToggleSidebar: () => void
      onToggleFullscreen: () => void
      onToggleDarkMode: () => void
    }

    export function TopBar({
      onToggleSidebar,
      onToggleFullscreen,
      onToggleDarkMode
    }: TopBarProps) {
      const { 
        bodyState, 
        isDarkMode, 
        openSidePane,
        sidePaneContent,
        activePage,
        setActivePage,
        searchTerm,
        setCommandPaletteOpen,
        setSearchTerm,
      } = useAppStore()

      const [isSearchFocused, setIsSearchFocused] = useState(false)

      const handleSettingsClick = () => {
        const isSettingsInSidePane = bodyState === BODY_STATES.SIDE_PANE && sidePaneContent === 'settings'

        // If we're on the settings page and it's not in the side pane, treat this as a "minimize" action.
        if (activePage === 'settings' && !isSettingsInSidePane) {
          openSidePane('settings');
          setActivePage('dashboard');
        } else {
          // In all other cases (on dashboard page, or settings already in pane),
          // just toggle the settings side pane.
          openSidePane('settings');
        }
      }

      const handleMoveToSidePane = () => {
        const mapping = { dashboard: 'main', settings: 'settings', toaster: 'toaster', notifications: 'notifications' } as const;
        openSidePane(mapping[activePage]);
        if (activePage !== 'dashboard') setActivePage('dashboard');
      };

      return (
        <div className={cn(
          "h-20 bg-background border-b border-border flex items-center justify-between px-6 z-50 gap-4",
          {
            'transition-all duration-300 ease-in-out': activePage === 'dashboard',
          }
        )}>
          {/* Left Section - Sidebar Controls & Breadcrumbs */}
          <div className="flex items-center gap-4">
            {/* Sidebar Controls */}
            <button
              onClick={onToggleSidebar}
              className={cn(
                "h-10 w-10 flex items-center justify-center rounded-full hover:bg-accent transition-colors"
              )}
              title="Toggle Sidebar"
            >
              <Menu className="w-5 h-5" />
            </button>

            {/* Breadcrumbs */}
            <div className={cn("hidden md:flex items-center gap-2 text-sm transition-opacity", {
              "opacity-0 pointer-events-none": isSearchFocused && activePage === 'dashboard'
            })}>
              <a href="#" className="text-muted-foreground hover:text-foreground transition-colors">Home</a>
              <ChevronRight className="w-4 h-4 text-muted-foreground" />
              <span className="font-medium text-foreground capitalize">{activePage}</span>
            </div>
          </div>

          {/* Right Section - Search, page controls, and global controls */}
          <div className={cn("flex items-center gap-3", isSearchFocused && activePage === 'dashboard' ? 'flex-1' : '')}>
            {/* Page-specific: Dashboard search and actions */}
            {activePage === 'dashboard' && (
              <div className="flex items-center gap-2 flex-1 justify-end">
                <div className={cn("relative transition-all duration-300 ease-in-out", isSearchFocused ? 'flex-1 max-w-lg' : 'w-auto')}>
                  <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4 pointer-events-none" />
                  <input
                    type="text"
                    placeholder="Search..."
                    value={searchTerm}
                    onFocus={() => setIsSearchFocused(true)}
                    onBlur={() => setIsSearchFocused(false)}
                    onChange={(e) => setSearchTerm(e.target.value)}
                    className={cn(
                      "pl-9 pr-4 py-2 h-10 border-none rounded-lg bg-card focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent transition-all duration-300 ease-in-out w-full",
                      isSearchFocused ? 'bg-background' : 'w-48'
                    )}
                  />
                </div>
                 <button className="h-10 w-10 flex-shrink-0 flex items-center justify-center hover:bg-accent rounded-full transition-colors">
                  <Filter className="w-5 h-5" />
                </button>
                 <button className="bg-primary text-primary-foreground px-4 py-2 rounded-full hover:bg-primary/90 transition-colors flex items-center gap-2 h-10 flex-shrink-0">
                  <Plus className="w-5 h-5" />
                  <span className={cn(isSearchFocused ? 'hidden sm:inline' : 'inline')}>New Project</span>
                </button>
              </div>
            )}
            
            {/* Page-specific: Move to side pane */}
            <div className={cn('flex items-center', isSearchFocused && activePage === 'dashboard' ? 'hidden md:flex' : '')}>
              {['dashboard', 'settings', 'toaster', 'notifications'].includes(activePage) && (
                <button onClick={handleMoveToSidePane} className="h-10 w-10 flex items-center justify-center hover:bg-accent rounded-full transition-colors" title="Move to Side Pane"><PanelRight className="w-5 h-5" /></button>
              )}
            </div>

            {/* Separator */}
            <div className={cn(
              'w-px h-6 bg-border mx-2', 
              !['dashboard', 'settings', 'toaster', 'notifications'].includes(activePage) || (isSearchFocused && activePage === 'dashboard') ? 'hidden' : ''
            )} />

            {/* Quick Actions */}
            <div className={cn('flex items-center gap-3', isSearchFocused && activePage === 'dashboard' ? 'hidden lg:flex' : '')}>

              <button
                onClick={() => setCommandPaletteOpen(true)}
                className="h-10 w-10 flex items-center justify-center rounded-full hover:bg-accent transition-colors group"
                title="Command Palette (Ctrl+K)"
              >
                <Command className="w-5 h-5 group-hover:scale-110 transition-transform" />
              </button>

            <button
              className="h-10 w-10 flex items-center justify-center rounded-full hover:bg-accent transition-colors group"
              title="Quick Actions"
            >
              <Zap className="w-5 h-5 group-hover:scale-110 transition-transform" />
            </button>

            {/* Body State Controls */}
            <button
              onClick={() => openSidePane('details')}
              className={cn(
                "h-10 w-10 flex items-center justify-center rounded-full hover:bg-accent transition-colors group",
                bodyState === BODY_STATES.SIDE_PANE && sidePaneContent === 'details' && "bg-accent"
              )}
              title="Toggle Side Pane"
            >
              <div className="w-5 h-5 flex group-hover:scale-110 transition-transform">
                <div className="w-1/2 h-full bg-current opacity-60 rounded-l-sm" />
                <div className="w-1/2 h-full bg-current rounded-r-sm" />
              </div>
            </button>

            <button
              onClick={onToggleFullscreen}
              className={cn(
                "h-10 w-10 flex items-center justify-center rounded-full hover:bg-accent transition-colors group",
                bodyState === BODY_STATES.FULLSCREEN && "bg-accent"
              )}
              title="Toggle Fullscreen"
            >
              {bodyState === BODY_STATES.FULLSCREEN ? (
                <Minimize className="w-5 h-5 group-hover:scale-110 transition-transform" />
              ) : (
                <Maximize className="w-5 h-5 group-hover:scale-110 transition-transform" />
              )}
            </button>

            <div className="w-px h-6 bg-border mx-2" />

            {/* Theme and Settings */}
            <button
              onClick={onToggleDarkMode}
              className="h-10 w-10 flex items-center justify-center rounded-full hover:bg-accent transition-colors group"
              title="Toggle Dark Mode"
            >
              {isDarkMode ? (
                <Sun className="w-5 h-5 group-hover:scale-110 transition-transform" />
              ) : (
                <Moon className="w-5 h-5 group-hover:scale-110 transition-transform" />
              )}
            </button>

            <button
              onClick={handleSettingsClick}
              className="h-10 w-10 flex items-center justify-center rounded-full hover:bg-accent transition-colors group"
              title="Settings"
            >
              <Settings className="w-5 h-5 group-hover:rotate-90 transition-transform duration-300" />
            </button>
            <UserDropdown />
            </div>
          </div>
        </div>
      )
    }
  src/components/global/CommandPalette.tsx: >-
    import {
      CommandDialog,
      CommandEmpty,
      CommandGroup,
      CommandInput,
      CommandItem,
      CommandList,
      CommandSeparator,
      CommandShortcut,
    } from '@/components/ui/command'

    import { useAppStore, type ActivePage } from '@/store/appStore'

    import { useCommandPaletteToggle } from
    '@/hooks/useCommandPaletteToggle.hook'

    import { Home, Settings, Moon, Sun, Monitor, Smartphone, PanelRight,
    Maximize, Component, Bell } from 'lucide-react'


    export function CommandPalette() {
      const {
        isCommandPaletteOpen,
        setCommandPaletteOpen,
        setActivePage,
        toggleDarkMode,
        isDarkMode,
        setCompactMode,
        toggleFullscreen,
        openSidePane,
      } = useAppStore()
      useCommandPaletteToggle()
      
      const runCommand = (command: () => void) => {
        setCommandPaletteOpen(false)
        command()
      }

      return (
        <CommandDialog open={isCommandPaletteOpen} onOpenChange={setCommandPaletteOpen}>
          <CommandInput placeholder="Type a command or search..." />
          <CommandList>
            <CommandEmpty>No results found.</CommandEmpty>
            <CommandGroup heading="Navigation">
              <CommandItem onSelect={() => runCommand(() => setActivePage('dashboard'))}>
                <Home className="mr-2 h-4 w-4" />
                <span>Go to Dashboard</span>
                <CommandShortcut>G D</CommandShortcut>
              </CommandItem>
              <CommandItem onSelect={() => runCommand(() => setActivePage('settings'))}>
                <Settings className="mr-2 h-4 w-4" />
                <span>Go to Settings</span>
                <CommandShortcut>G S</CommandShortcut>
              </CommandItem>
              <CommandItem onSelect={() => runCommand(() => setActivePage('toaster'))}>
                <Component className="mr-2 h-4 w-4" />
                <span>Go to Toaster Demo</span>
                <CommandShortcut>G T</CommandShortcut>
              </CommandItem>
              <CommandItem onSelect={() => runCommand(() => setActivePage('notifications' as ActivePage))}>
                <Bell className="mr-2 h-4 w-4" />
                <span>Go to Notifications</span>
                <CommandShortcut>G N</CommandShortcut>
              </CommandItem>
            </CommandGroup>
            <CommandSeparator />
            <CommandGroup heading="Actions">
              <CommandItem onSelect={() => runCommand(toggleDarkMode)}>
                {isDarkMode ? <Sun className="mr-2 h-4 w-4" /> : <Moon className="mr-2 h-4 w-4" />}
                <span>Toggle Theme</span>
                <CommandShortcut>⌘T</CommandShortcut>
              </CommandItem>
              <CommandItem onSelect={() => runCommand(toggleFullscreen)}>
                <Maximize className="mr-2 h-4 w-4" />
                <span>Toggle Fullscreen</span>
                <CommandShortcut>⌘F</CommandShortcut>
              </CommandItem>
              <CommandItem onSelect={() => runCommand(() => openSidePane('settings'))}>
                <PanelRight className="mr-2 h-4 w-4" />
                <span>Open Settings in Side Pane</span>
                <CommandShortcut>⌥S</CommandShortcut>
              </CommandItem>
            </CommandGroup>
            <CommandSeparator />
            <CommandGroup heading="Preferences">
              <CommandItem onSelect={() => runCommand(() => setCompactMode(true))}>
                <Smartphone className="mr-2 h-4 w-4" />
                <span>Enable Compact Mode</span>
                <CommandShortcut>⌘C</CommandShortcut>
              </CommandItem>
              <CommandItem onSelect={() => runCommand(() => setCompactMode(false))}>
                <Monitor className="mr-2 h-4 w-4" />
                <span>Disable Compact Mode</span>
                <CommandShortcut>⇧⌘C</CommandShortcut>
              </CommandItem>
            </CommandGroup>
          </CommandList>
        </CommandDialog>
      )
    }
  src/features/settings/SettingsContent.tsx: |-
    import { useState } from 'react'
    import { 
      Moon, 
      Sun, 
      Zap, 
      Eye, 
      Minimize2, 
      RotateCcw,
      Monitor,
      Smartphone,
      Palette,
      Accessibility,
      Check
    } from 'lucide-react'
    import { cn } from '@/lib/utils'
    import { useAppStore } from '@/store/appStore'
    import { SettingsToggle } from './SettingsToggle'
    import { SettingsSection } from './SettingsSection'

    const colorPresets = [
      { name: 'Default Blue', value: '220 84% 60%' },
      { name: 'Rose', value: '346.8 77.2% 49.8%' },
      { name: 'Green', value: '142.1 76.2% 36.3%' },
      { name: 'Orange', value: '24.6 95% 53.1%' },
      { name: 'Violet', value: '262.1 83.3% 57.8%' },
      { name: 'Slate', value: '215.3 20.3% 65.1%' }
    ]

    export function SettingsContent() {
      const {
        isDarkMode,
        reducedMotion,
        compactMode,
        autoExpandSidebar,
        sidebarWidth,
        primaryColor,
        toggleDarkMode,
        setReducedMotion,
        setCompactMode,
        setAutoExpandSidebar,
        setPrimaryColor,
        setSidebarWidth,
        resetToDefaults
      } = useAppStore()

      const [tempSidebarWidth, setTempSidebarWidth] = useState(sidebarWidth)

      const handleSidebarWidthChange = (width: number) => {
        setTempSidebarWidth(width)
        setSidebarWidth(width)
      }

      return (
        <div className="space-y-10">
          {/* Appearance */}
          <SettingsSection icon={<Palette />} title="Appearance">
            {/* Dark Mode */}
            <SettingsToggle
              icon={isDarkMode ? <Moon className="w-4 h-4" /> : <Sun className="w-4 h-4" />}
              title="Dark Mode"
              description="Toggle dark theme"
              checked={isDarkMode}
              onCheckedChange={toggleDarkMode}
            />

            {/* Compact Mode */}
            <SettingsToggle
              icon={<Minimize2 className="w-4 h-4" />}
              title="Compact Mode"
              description="Reduce spacing and sizes"
              checked={compactMode}
              onCheckedChange={setCompactMode}
            />

            {/* Accent Color */}
            <div className="space-y-3">
              <div className="flex items-center gap-3">
                <Palette className="w-4 h-4" />
                <div>
                  <p className="font-medium">Accent Color</p>
                  <p className="text-sm text-muted-foreground">Customize the main theme color</p>
                </div>
              </div>
              <div className="grid grid-cols-6 gap-2 pt-1">
                {colorPresets.map(color => {
                  const isActive = color.value === primaryColor
                  return (
                    <button
                      key={color.name}
                      title={color.name}
                      onClick={() => setPrimaryColor(color.value)}
                      className={cn(
                        "w-8 h-8 rounded-full border-2 transition-transform hover:scale-110 flex items-center justify-center",
                        isActive ? 'border-primary' : 'border-transparent'
                      )}
                      style={{ backgroundColor: `hsl(${color.value})` }}
                    >{isActive && <Check className="w-5 h-5 text-primary-foreground" />}</button>
                  )
                })}
              </div>
            </div>
          </SettingsSection>

          {/* Behavior */}
          <SettingsSection icon={<Zap />} title="Behavior">
            {/* Auto Expand Sidebar */}
            <SettingsToggle
              icon={<Eye className="w-4 h-4" />}
              title="Auto Expand Sidebar"
              description="Expand on hover when collapsed"
              checked={autoExpandSidebar}
              onCheckedChange={setAutoExpandSidebar}
            />

            {/* Sidebar Width */}
            <div className="space-y-3">
              <div className="flex items-center gap-3">
                <Monitor className="w-4 h-4" />
                <div>
                  <p className="font-medium">Sidebar Width</p>
                  <p className="text-sm text-muted-foreground">{tempSidebarWidth}px</p>
                </div>
              </div>
              <div className="space-y-2">
                <input
                  type="range"
                  min="200"
                  max="500"
                  step="10"
                  value={tempSidebarWidth}
                  onChange={(e) => handleSidebarWidthChange(Number(e.target.value))}
                  className="w-full h-1.5 bg-muted rounded-lg appearance-none cursor-pointer slider"
                />
                <div className="flex justify-between text-xs text-muted-foreground">
                  <span>200px</span>
                  <span>350px</span>
                  <span>500px</span>
                </div>
              </div>
            </div>
          </SettingsSection>

          {/* Accessibility */}
          <SettingsSection icon={<Accessibility />} title="Accessibility">
            {/* Reduced Motion */}
            <SettingsToggle
              icon={<Zap className="w-4 h-4" />}
              title="Reduced Motion"
              description="Minimize animations"
              checked={reducedMotion}
              onCheckedChange={setReducedMotion}
            />
          </SettingsSection>

          {/* Presets */}
          <div className="space-y-4">
            <h3 className="text-sm font-semibold text-muted-foreground uppercase tracking-wider">
              Quick Presets
            </h3>
            
            <div className="grid grid-cols-2 gap-3">
              <button 
                onClick={() => {
                  setCompactMode(false)
                  setReducedMotion(false)
                  setSidebarWidth(320)
                }}
                className="p-4 bg-accent/30 hover:bg-accent/50 rounded-xl transition-colors text-left"
              >
                <Monitor className="w-4 h-4 mb-2" />
                <p className="font-medium text-sm">Desktop</p>
                <p className="text-xs text-muted-foreground">Spacious layout</p>
              </button>
              
              <button 
                onClick={() => {
                  setCompactMode(true)
                  setReducedMotion(true)
                  setSidebarWidth(240)
                }}
                className="p-4 bg-accent/30 hover:bg-accent/50 rounded-xl transition-colors text-left"
              >
                <Smartphone className="w-4 h-4 mb-2" />
                <p className="font-medium text-sm">Mobile</p>
                <p className="text-xs text-muted-foreground">Compact layout</p>
              </button>
            </div>
          </div>
          <div className="pt-6 border-t border-border">
            <button
              onClick={resetToDefaults}
              className="w-full flex items-center justify-center gap-2 px-4 py-2.5 bg-destructive/10 text-destructive hover:bg-destructive/20 rounded-lg transition-colors"
            >
              <RotateCcw className="w-4 h-4" />
              Reset to Defaults
            </button>
          </div>
        </div>
      )
    }

    // Custom slider styles
    const sliderStyles = `
    .slider::-webkit-slider-thumb {
      appearance: none;
      height: 18px;
      width: 18px;
      border-radius: 50%;
      background: hsl(var(--primary));
      cursor: pointer;
      border: 3px solid hsl(var(--background));
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
      margin-top: -7px;
    }

    .slider::-moz-range-thumb {
      height: 18px;
      width: 18px;
      border-radius: 50%;
      background: hsl(var(--primary));
      cursor: pointer;
      border: 3px solid hsl(var(--background));
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }
    `

    // Inject styles
    if (typeof document !== 'undefined') {
      const styleSheet = document.createElement('style')
      styleSheet.textContent = sliderStyles
      document.head.appendChild(styleSheet)
    }
approved: true
linesAdded: null
linesRemoved: null
linesDifference: null
gitCommittedAt: null
status: committed
id: 93
