uuid: d6d57a41-e7a9-450f-a78c-023a1a361716
projectId: jeli-app-shell
createdAt: '2025-10-20T13:34:43.512Z'
gitCommitMsg: >-
  refactor(dynamic-view): generalize view components to be config-driven


  Refactors all core view components (List, Card, Table, Kanban, Calendar) and
  the ViewControls to be fully driven by the `ViewConfig` object provided
  through the `DynamicViewContext`.


  Key changes include:

  - Replacing direct property access (e.g., `item.title`) with the generic
  `FieldRenderer` component.

  - Dynamically generating layouts, table columns, and control options (sort,
  filter, group) from the configuration.

  - Decoupling all components from the hardcoded `DataItem` type, enabling them
  to render any `GenericItem`.

  - Updating the `FilterConfig` type to support arbitrary filter keys, making
  the filter component extensible.


  This completes the core architectural shift, turning static components into a
  flexible, reusable view engine.
promptSummary: >-
  Refactor view components to be config-driven to make them dynamic and
  reusable.
reasoning:
  - >-
    This is a significant step. We are now refactoring all the view components
    and their controls to be dynamically driven by the `ViewConfig`. This will
    eliminate hardcoded data access and prepare the system to handle any data
    structure.
  - '### Step 1: Refactor `ListView`'
  - >-
    I'm updating `ListView.tsx` to use the `useDynamicView` hook to get its
    configuration. Instead of accessing item properties directly (e.g.,
    `item.title`), it will now use the generic `FieldRenderer` component,
    specifying which field to render via an ID from the configuration
    (`config.listView.titleField`). This decouples the view from the data's
    shape. The old responsive logic is removed in favor of the declarative
    layout defined in the config.
  - '### Step 2: Refactor `CardView`'
  - >-
    Similarly, `CardView.tsx` is being refactored. I'm replacing the complex,
    hardcoded layout with dynamic rendering based on the `cardView` section of
    our `ViewConfig`. The content of the card's header, body, and footer are now
    generated by iterating through field IDs defined in the config and using the
    `FieldRenderer` for each one.
  - '### Step 3: Refactor `TableView`'
  - >-
    The `TableView` component gets a major overhaul. The table structure is no
    longer static. Headers (`<th>`) are now dynamically generated by mapping
    over `config.tableView.columns`. The `TableRow` sub-component is also made
    dynamic, iterating over the same column configuration to render each cell
    (`<td>`) with the appropriate data via `FieldRenderer`. This makes the
    entire table, including its sortable columns, fully configurable.
  - '### Step 4: Refactor `KanbanView`'
  - >-
    For the `KanbanView`, the main change is within the `KanbanCard` component.
    I've gutted its hardcoded structure and replaced it with `FieldRenderer`
    calls. The card's title, description, and footer content are now dictated by
    the `kanbanView.cardFields` section of the `ViewConfig`. This makes the
    Kanban cards adaptable to any data model.
  - '### Step 5: Refactor `CalendarView`'
  - >-
    The `CalendarView`'s `CalendarEvent` sub-component is now config-driven. It
    uses `FieldRenderer` to display the event's title and any additional
    metadata specified in `config.calendarView.displayFields`. This removes the
    hardcoded logic for displaying specific properties like priority or
    assignee, making the calendar events fully customizable.
  - '### Step 6: Refactor `ViewControls` and Update `FilterConfig` Type'
  - >-
    The `ViewControls` component is now fully dynamic. It no longer contains
    hardcoded lists of options for sorting, grouping, or filtering. Instead, it
    populates these controls from the `sortableFields`, `groupableFields`, and
    `filterableFields` provided in the `ViewConfig`. The `CombinedFilter`
    sub-component is now capable of generating multiple filter sections
    dynamically. To support this, I've also made a necessary update to
    `FilterConfig` to allow for arbitrary filter keys.
  - >-
    I have now completed the refactoring for all view components and controls as
    specified in Part 3 of the plan. Each component is now decoupled from the
    specific `DataItem` shape and is instead driven by the generic `ViewConfig`
    and `GenericItem` types. This sets the stage perfectly for the final part:
    re-implementing the `DataDemo` page as a consumer of this new, powerful view
    engine.
operations:
  - type: write
    path: src/features/dynamic-view/components/views/ListView.tsx
    content: >+
      --- src/features/dynamic-view/components/views/ListView.tsx

      +++ src/features/dynamic-view/components/views/ListView.tsx

      @@ -1,49 +1,33 @@
       import { useRef } from 'react'
       import { cn } from '@/lib/utils'
      -import type { DataItem } from '../types'

      +import type { GenericItem } from '../../types'
       import { useStaggeredAnimation } from '@/hooks/useStaggeredAnimation.motion.hook'
       import { EmptyState } from './EmptyState'
       import { useAppViewManager } from '@/hooks/useAppViewManager.hook'
      -import { useResizeObserver } from '@/hooks/useResizeObserver.hook'
       import { 
         useSelectedItem,
       } from '../store/dataDemo.store'
      -import {

      -  AssigneeInfo,

      -  ItemStatusBadge,

      -  ItemPriorityBadge,

      -  ItemDateInfo,

      -  ItemTags,

      -} from './shared/DataItemParts'
       import { AddDataItemCta } from './shared/AddDataItemCta'
      +import { useDynamicView } from '../../DynamicViewContext'

      +import { FieldRenderer } from '../shared/FieldRenderer'
       
      -export function DataListView({ data }: { data: DataItem[] }) {

      +export function DataListView({ data }: { data: GenericItem[] }) {
         const { onItemSelect, itemId } = useAppViewManager();
         const selectedItem = useSelectedItem(itemId);
      +  const { config } = useDynamicView();
       
         const listRef = useRef<HTMLDivElement>(null)
         useStaggeredAnimation(listRef, [data], { mode: 'incremental', scale: 1, y: 20, stagger: 0.05, duration: 0.4 });
      -  const { width } = useResizeObserver(listRef);

      -

      -  // Breakpoints for responsive metadata

      -  const showTags = width > 1050;

      -  const showDate = width > 850;

      -  const showStatus = width > 700;

      -  const compactAssignee = width < 600;

      -  const showPriority = width > 450;
       
         const items = Array.isArray(data) ? data : [];
         if (items.length === 0) {
           return <EmptyState />
         }
       
         return (
           <div ref={listRef}>
      -      {items.map((item: DataItem) => {

      +      {items.map((item: GenericItem) => {
               const isSelected = selectedItem?.id === item.id
               
               return (
      @@ -56,16 +40,20 @@
                   >
                     {/* Left side: Icon and Title */}
                     <div className="flex items-center gap-3 flex-1 min-w-0">
      -                <span className="text-xl flex-shrink-0 w-8
      text-center">{item.thumbnail}</span>

      -                <p className="font-medium truncate text-card-foreground
      group-hover:text-primary">{item.title}</p>

      +                <div className="flex-shrink-0 w-8 text-center">

      +                  <FieldRenderer item={item}
      fieldId={config.listView.iconField} className="text-xl" />

      +                </div>

      +                <div className="font-medium truncate text-card-foreground
      group-hover:text-primary">

      +                  <FieldRenderer item={item}
      fieldId={config.listView.titleField} />

      +                </div>
                     </div>
       
                     {/* Right side: Metadata */}
                     <div className="flex shrink-0 items-center gap-2 sm:gap-4 md:gap-6 ml-4 text-sm text-muted-foreground">
      -                {showStatus && <ItemStatusBadge status={item.status} />}

      -                {showTags && <ItemTags tags={item.tags} />}

      -                {showDate && <ItemDateInfo date={item.updatedAt} />}

      -                <AssigneeInfo assignee={item.assignee}
      avatarClassName="w-7 h-7" compact={compactAssignee} />

      -                {showPriority && <ItemPriorityBadge
      priority={item.priority} />}

      +                {config.listView.metaFields.map(fieldId => (

      +                  <FieldRenderer key={fieldId} item={item}
      fieldId={fieldId} options={{ compact: true, avatarClassName: 'w-7 h-7' }}
      />

      +                ))}
                     </div>
                   </div>
                 </div>

    patchStrategy: standard-diff
  - type: write
    path: src/features/dynamic-view/components/views/CardView.tsx
    content: >+
      --- src/features/dynamic-view/components/views/CardView.tsx

      +++ src/features/dynamic-view/components/views/CardView.tsx

      @@ -1,30 +1,19 @@
       import { useRef } from 'react'
       import { cn } from '@/lib/utils'
      -import { Badge } from '@/components/ui/badge'
       import { ArrowUpRight } from 'lucide-react'
      -import type { DataItem } from '../types'

      +import type { GenericItem } from '../../types'
       import { useStaggeredAnimation } from '@/hooks/useStaggeredAnimation.motion.hook'
       import { EmptyState } from './EmptyState'
       import { useAppViewManager } from '@/hooks/useAppViewManager.hook'
       import {
         useSelectedItem,
       } from '../store/dataDemo.store'
      -import {

      -  AssigneeInfo,

      -  ItemMetrics,

      -  ItemProgressBar,

      -  ItemStatusBadge,

      -  ItemTags,

      -  ItemDateInfo,

      -} from './shared/DataItemParts'
       import { AddDataItemCta } from './shared/AddDataItemCta'
      +import { useDynamicView } from '../../DynamicViewContext'

      +import { FieldRenderer } from '../shared/FieldRenderer'
       
      -export function DataCardView({ data, isGrid = false }: { data:
      DataItem[]; isGrid?: boolean }) {

      +export function DataCardView({ data, isGrid = false }: { data:
      GenericItem[]; isGrid?: boolean }) {
         const { onItemSelect, itemId } = useAppViewManager();
         const selectedItem = useSelectedItem(itemId);
      +  const { config } = useDynamicView();

      +  const { cardView: viewConfig } = config;
       
         const containerRef = useRef<HTMLDivElement>(null)
         useStaggeredAnimation(containerRef, [data], { mode: 'incremental', y: 40 });
      @@ -42,7 +31,7 @@
               "pb-4"
             )}
           >
      -      {items.map((item: DataItem) => {

      +      {items.map((item: GenericItem) => {
               const isSelected = selectedItem?.id === item.id
               
               return (
      @@ -58,39 +47,32 @@
                   <div className="relative p-6 pb-4">
                     <div className="flex items-start justify-between mb-4">
                       <div className="w-16 h-16 bg-gradient-to-br from-primary/20 to-primary/10 rounded-2xl flex items-center justify-center text-3xl group-hover:scale-110 transition-transform duration-300">
      -                  {item.thumbnail}

      +                  <FieldRenderer item={item}
      fieldId={viewConfig.thumbnailField} />
                       </div>
                       <ArrowUpRight className="w-5 h-5 text-muted-foreground group-hover:text-primary group-hover:translate-x-1 group-hover:-translate-y-1 transition-all duration-300" />
                     </div>
       
      -              {/* Priority indicator */}

      -              <div className="absolute top-4 right-4">

      -                <div className={cn(

      -                  "w-3 h-3 rounded-full",

      -                  item.priority === 'critical' && "bg-red-500",

      -                  item.priority === 'high' && "bg-orange-500",

      -                  item.priority === 'medium' && "bg-blue-500",

      -                  item.priority === 'low' && "bg-green-500"

      -                )} />

      +              {/* Header Fields (e.g., priority indicator) */}

      +              <div className="absolute top-4 right-4 flex items-center
      gap-2">

      +                {viewConfig.headerFields.map(fieldId => (

      +                  <FieldRenderer key={fieldId} item={item}
      fieldId={fieldId} />

      +                ))}
                     </div>
                   </div>
       
                   {/* Card Content */}
      -            <div className="px-6 pb-6">

      -              {/* Title and Description */}

      -              <h3 className="font-semibold text-lg mb-2
      group-hover:text-primary transition-colors line-clamp-2">

      -                {item.title}

      -              </h3>

      -              <p className="text-muted-foreground text-sm mb-4
      line-clamp-3">

      -                {item.description}

      -              </p>

      -

      -              {/* Status and Category */}

      -              <div className="flex items-center gap-2 mb-4">

      -                <ItemStatusBadge status={item.status} />

      -                <Badge variant="outline" className="bg-accent/50
      text-xs">

      -                  {item.category}

      -                </Badge>

      -              </div>

      -

      -              {/* Tags */}

      -              <div className="mb-4"><ItemTags tags={item.tags} /></div>

      -

      -              {/* Progress */}

      -              <div className="mb-4"><ItemProgressBar
      completion={item.metrics.completion} /></div>

      -

      -              {/* Assignee */}

      -              <div className="mb-4"><AssigneeInfo
      assignee={item.assignee} /></div>

      -

      -              {/* Metrics */}

      -              <div className="flex items-center justify-between text-xs
      text-muted-foreground">

      -                <ItemMetrics metrics={item.metrics} />

      -                <ItemDateInfo date={item.updatedAt} />

      +            <div className="px-6 pb-6 space-y-4">

      +              <div className="font-semibold text-lg
      group-hover:text-primary transition-colors line-clamp-2">

      +                <FieldRenderer item={item}
      fieldId={viewConfig.titleField} />

      +              </div>

      +              <div className="text-muted-foreground text-sm
      line-clamp-3">

      +                <FieldRenderer item={item}
      fieldId={viewConfig.descriptionField} />

      +              </div>

      +              

      +              {viewConfig.contentFields.map(fieldId => (

      +                <FieldRenderer key={fieldId} item={item}
      fieldId={fieldId} options={{ showPercentage: true }} />

      +              ))}

      +              

      +              <div className="flex items-center justify-between text-xs
      text-muted-foreground">

      +                {viewConfig.footerFields.map(fieldId => (

      +                  <FieldRenderer key={fieldId} item={item}
      fieldId={fieldId} />

      +                ))}
                     </div>
                   </div>
       

    patchStrategy: standard-diff
  - type: write
    path: src/features/dynamic-view/components/views/TableView.tsx
    content: >+
      --- src/features/dynamic-view/components/views/TableView.tsx

      +++ src/features/dynamic-view/components/views/TableView.tsx

      @@ -5,28 +5,19 @@
         ArrowDown,
         ExternalLink
       } from 'lucide-react'
      -import type { DataItem, SortableField } from '../types'

      +import type { GenericItem } from '../../types'

      +import type { SortableField } from '../../pages/DataDemo/types'
       import { EmptyState } from './EmptyState'
       import { useAppViewManager } from '@/hooks/useAppViewManager.hook'
       import {
         useSelectedItem,
       } from '../store/dataDemo.store'
       import { capitalize } from '@/lib/utils'
      -import {

      -  AssigneeInfo,

      -  ItemMetrics,

      -  ItemStatusBadge,

      -  ItemPriorityBadge,

      -  ItemDateInfo,

      -  ItemProgressBar,

      -} from './shared/DataItemParts'
       import { AddDataItemCta } from './shared/AddDataItemCta'
      +import { useDynamicView } from '../../DynamicViewContext'

      +import { FieldRenderer } from '../shared/FieldRenderer'
       
      -export function DataTableView({ data }: { data: DataItem[] }) {

      +export function DataTableView({ data }: { data: GenericItem[] }) {
         const {
           sortConfig,
           setTableSort,
      @@ -34,6 +25,8 @@
           onItemSelect,
           itemId,
         } = useAppViewManager();
      +  const { config } = useDynamicView();

      +  const { tableView: viewConfig } = config;
         const selectedItem = useSelectedItem(itemId);
       
         const tableRef = useRef<HTMLTableElement>(null)
      @@ -58,7 +51,7 @@
           }
         }, [data]);
       
      -  const SortIcon = ({ field }: { field: SortableField }) => {

      +  const SortIcon = ({ field }: { field: string }) => {
           if (sortConfig?.key !== field) {
             return <ArrowUpDown className="w-4 h-4 opacity-50" />
           }
      @@ -71,20 +64,20 @@
           return <ArrowUpDown className="w-4 h-4 opacity-50" />
         }
       
      -  const handleSortClick = (field: SortableField) => {

      -    setTableSort(field)

      +  const handleSortClick = (field: string) => {

      +    setTableSort(field as SortableField) // Cast for now
         }
       
         const groupedData = useMemo(() => {
           if (groupBy === 'none') return null;
      -    return (data as DataItem[]).reduce((acc, item) => {

      +    return (data as GenericItem[]).reduce((acc, item) => {
             const groupKey = item[groupBy as 'status' | 'priority' | 'category'] || 'N/A';
             if (!acc[groupKey]) {
               acc[groupKey] = [];
             }
             acc[groupKey].push(item);
             return acc;
      -    }, {} as Record<string, DataItem[]>);

      +    }, {} as Record<string, GenericItem[]>);
         }, [data, groupBy]);
       
         if (data.length === 0) {
      @@ -97,73 +90,25 @@
               <table ref={tableRef} className="w-full">
                 <thead>
                   <tr className="border-b border-border/50 bg-muted/20">
      -              <th className="text-left p-4 font-semibold text-sm">

      -                <button

      -                  onClick={() => handleSortClick('title')}

      -                  className="flex items-center gap-2 hover:text-primary
      transition-colors"

      -                >

      -                  Project

      -                  <SortIcon field="title" />

      -                </button>

      -              </th>

      -              <th className="text-left p-4 font-semibold text-sm">

      -                <button

      -                  onClick={() => handleSortClick('status')}

      -                  className="flex items-center gap-2 hover:text-primary
      transition-colors"

      -                >

      -                  Status

      -                  <SortIcon field="status" />

      -                </button>

      -              </th>

      -              <th className="text-left p-4 font-semibold text-sm">

      -                <button

      -                  onClick={() => handleSortClick('priority')}

      -                  className="flex items-center gap-2 hover:text-primary
      transition-colors"

      -                >

      -                  Priority

      -                  <SortIcon field="priority" />

      -                </button>

      -              </th>

      -              <th className="text-left p-4 font-semibold text-sm">

      -                <button

      -                  onClick={() => handleSortClick('assignee.name')}

      -                  className="flex items-center gap-2 hover:text-primary
      transition-colors"

      -                >

      -                  Assignee

      -                  <SortIcon field="assignee.name" />

      -                </button>

      -              </th>

      -              <th className="text-left p-4 font-semibold text-sm">

      -                <button

      -                  onClick={() => handleSortClick('metrics.completion')}

      -                  className="flex items-center gap-2 hover:text-primary
      transition-colors"

      -                >

      -                  Progress

      -                  <SortIcon field="metrics.completion" />

      -                </button>

      -              </th>

      -              <th className="text-left p-4 font-semibold text-sm">

      -                <button

      -                  onClick={() => handleSortClick('metrics.views')}

      -                  className="flex items-center gap-2 hover:text-primary
      transition-colors"

      -                >

      -                  Engagement

      -                  <SortIcon field="metrics.views" />

      -                </button>

      -              </th>

      -              <th className="text-left p-4 font-semibold text-sm">Last
      Updated</th>

      +              {viewConfig.columns.map(col => (

      +                <th key={col.fieldId} className="text-left p-4
      font-semibold text-sm">

      +                  {col.isSortable ? (

      +                    <button

      +                      onClick={() => handleSortClick(col.fieldId)}

      +                      className="flex items-center gap-2
      hover:text-primary transition-colors"

      +                    >

      +                      {col.label}

      +                      <SortIcon field={col.fieldId} />

      +                    </button>

      +                  ) : (

      +                    <span>{col.label}</span>

      +                  )}

      +                </th>

      +              ))}
                     <th className="text-center p-4 font-semibold text-sm w-16">Actions</th>
                   </tr>
                 </thead>
                 <tbody>
                   {groupedData
                     ? Object.entries(groupedData).flatMap(([groupName, items]) => [
                         <tr key={groupName} data-group-header="true" className="sticky top-0 z-10">
      -                    <td colSpan={8} className="p-2 bg-muted/50
      backdrop-blur-sm">

      +                    <td colSpan={viewConfig.columns.length + 1}
      className="p-2 bg-muted/50 backdrop-blur-sm">
                             <div className="flex items-center gap-2">
                               <h3 className="font-semibold text-sm">{capitalize(groupName)}</h3>
                               <span className="text-xs px-2 py-0.5 bg-background rounded-full font-medium">{items.length}</span>
      @@ -173,16 +118,17 @@
                         ...items.map(item => <TableRow key={item.id} item={item} isSelected={selectedItem?.id === item.id} onItemSelect={onItemSelect} />)
                       ])
                     : data.map(item => <TableRow key={item.id} item={item} isSelected={selectedItem?.id === item.id} onItemSelect={onItemSelect} />)
                   }
      -            <AddDataItemCta viewMode='table' colSpan={8} />

      +            <AddDataItemCta viewMode='table'
      colSpan={viewConfig.columns.length + 1} />
                 </tbody>
               </table>
             </div>
           </div>
         )
       }
       
      -function TableRow({ item, isSelected, onItemSelect }: { item: DataItem;
      isSelected: boolean; onItemSelect: (item: DataItem) => void }) {

      +function TableRow({ item, isSelected, onItemSelect }: { item:
      GenericItem; isSelected: boolean; onItemSelect: (item: GenericItem) =>
      void }) {

      +  const { config } = useDynamicView();
         return (
           <tr
             onClick={() => onItemSelect(item)}
      @@ -192,51 +138,10 @@
               isSelected && "bg-primary/5 border-primary/30"
             )}
           >
      -      {/* Project Column */}

      -      <td className="p-4">

      -        <div className="flex items-center gap-3">

      -          <div className="w-10 h-10 bg-gradient-to-br from-primary/20
      to-primary/10 rounded-lg flex items-center justify-center text-lg
      flex-shrink-0">

      -            {item.thumbnail}

      -          </div>

      -          <div className="min-w-0 flex-1">

      -            <h4 className="font-medium group-hover:text-primary
      transition-colors truncate">

      -              {item.title}

      -            </h4>

      -            <p className="text-sm text-muted-foreground truncate">

      -              {item.category}

      -            </p>

      -          </div>

      -        </div>

      -      </td>

      -

      -      {/* Status Column */}

      -      <td className="p-4">

      -        <ItemStatusBadge status={item.status} />

      -      </td>

      -

      -      {/* Priority Column */}

      -      <td className="p-4">

      -        <ItemPriorityBadge priority={item.priority} />

      -      </td>

      -

      -      {/* Assignee Column */}

      -      <td className="p-4">

      -        <AssigneeInfo assignee={item.assignee} />

      -      </td>

      -

      -      {/* Progress Column */}

      -      {/* Note: This progress bar is custom for the table, so we don't
      use the shared component here. */}

      -      <td className="p-4">

      -        <ItemProgressBar completion={item.metrics.completion}
      showPercentage />

      -      </td>

      -

      -      {/* Engagement Column */}

      -      <td className="p-4">

      -        <ItemMetrics metrics={item.metrics} />

      -      </td>

      -

      -      {/* Date Column */}

      -      <td className="p-4">

      -        <ItemDateInfo date={item.updatedAt} />

      -      </td>

      -

      +      {config.tableView.columns.map(col => (

      +        <td key={col.fieldId} className="p-4">

      +          <FieldRenderer item={item} fieldId={col.fieldId} options={{
      showPercentage: true }} />

      +        </td>

      +      ))}
             {/* Actions Column */}
             <td className="p-4">
               <button 

    patchStrategy: standard-diff
  - type: write
    path: src/features/dynamic-view/components/views/KanbanView.tsx
    content: >+
      --- src/features/dynamic-view/components/views/KanbanView.tsx

      +++ src/features/dynamic-view/components/views/KanbanView.tsx

      @@ -1,30 +1,21 @@
       import { useState, useEffect, Fragment } from "react";
       import {
         GripVertical,
         Plus,
      -  Calendar,

      -  MessageSquare,

      -  Paperclip,
       } from "lucide-react";
      -import type { DataItem } from "../types";

      +import type { GenericItem } from '../../types'
       import { Card, CardContent } from "@/components/ui/card";
      -import { Badge } from "@/components/ui/badge";

      -import { Avatar, AvatarFallback, AvatarImage } from
      "@/components/ui/avatar";

      -import { cn, getPriorityColor } from "@/lib/utils";

      +import { cn } from "@/lib/utils";
       import { EmptyState } from "./EmptyState";
       import { useAppViewManager } from "@/hooks/useAppViewManager.hook";
       import { useDataDemoStore } from "../store/dataDemo.store";
      +import { useDynamicView } from '../../DynamicViewContext'

      +import { FieldRenderer } from '../shared/FieldRenderer'
       
       interface KanbanCardProps {
      -  item: DataItem;

      +  item: GenericItem;
         isDragging: boolean;
       }
       
       function KanbanCard({ item, isDragging, ...props }: KanbanCardProps & React.HTMLAttributes<HTMLDivElement>) {
         const { onItemSelect } = useAppViewManager();
      -

      -  // Mock comment and attachment counts for UI purposes

      -  const comments = Math.floor(item.metrics.views / 10);

      -  const attachments = Math.floor(item.metrics.shares / 5);

      +  const { config } = useDynamicView();

      +  const { kanbanView: viewConfig } = config;
       
         return (
           <Card
      @@ -37,49 +28,31 @@
           >
             <CardContent className="p-5">
               <div className="space-y-4">
                 <div className="flex items-start justify-between">
      -            <h4 className="font-semibold text-card-foreground
      dark:text-neutral-100 leading-tight">

      -              {item.title}

      -            </h4>

      +            <div className="font-semibold text-card-foreground
      dark:text-neutral-100 leading-tight flex-1 min-w-0">

      +              <FieldRenderer item={item}
      fieldId={viewConfig.cardFields.titleField} />

      +            </div>
                   <GripVertical className="w-5 h-5 text-muted-foreground/60 dark:text-neutral-400 cursor-grab flex-shrink-0" />
                 </div>
       
      -          <p className="text-sm text-muted-foreground
      dark:text-neutral-300 leading-relaxed line-clamp-2">

      -            {item.description}

      -          </p>

      -

      -          <div className="flex flex-wrap gap-2">

      -            <Badge className={cn("text-xs border",
      getPriorityColor(item.priority))}>

      -              {item.priority}

      -            </Badge>

      -            {item.tags.slice(0, 2).map((tag) => (

      -              <Badge key={tag} variant="secondary" className="text-xs
      backdrop-blur-sm">

      -                {tag}

      -              </Badge>

      -            ))}

      -          </div>

      +          <div className="text-sm text-muted-foreground
      dark:text-neutral-300 leading-relaxed line-clamp-2">

      +            <FieldRenderer item={item}
      fieldId={viewConfig.cardFields.descriptionField} />

      +          </div>
       
                 <div className="flex items-center justify-between pt-2 border-t border-border/30 dark:border-neutral-700/30">
      -            <div className="flex items-center gap-4
      text-muted-foreground/80 dark:text-neutral-400">

      -              {item.dueDate && (

      -                <div className="flex items-center gap-1">

      -                  <Calendar className="w-4 h-4" />

      -                  <span className="text-xs font-medium">

      -                    {new Date(item.dueDate).toLocaleDateString("en-US", {
      month: "short", day: "numeric" })}

      -                  </span>

      -                </div>

      -              )}

      -              <div className="flex items-center gap-1">

      -                <MessageSquare className="w-4 h-4" />

      -                <span className="text-xs font-medium">{comments}</span>

      -              </div>

      -              <div className="flex items-center gap-1">

      -                <Paperclip className="w-4 h-4" />

      -                <span className="text-xs
      font-medium">{attachments}</span>

      -              </div>

      -            </div>

      -

      -            <Avatar className="w-8 h-8 ring-2 ring-white/50
      dark:ring-neutral-700/50">

      -              <AvatarImage src={item.assignee.avatar} />

      -              <AvatarFallback className="bg-muted dark:bg-neutral-700
      text-foreground dark:text-neutral-200 font-medium">

      -                {item.assignee.name.split(" ").map((n) => n[0]).join("")}

      -              </AvatarFallback>

      -            </Avatar>

      +            {/* 

      +              The footer is a bit tricky. The original has a left and
      right side.

      +              For a generic component, let's just render them in a row.

      +              A more advanced config could specify 'left' and 'right'
      arrays.

      +              For now, this is a good simplification.

      +            */}

      +            <div className="flex items-center justify-between w-full
      text-muted-foreground/80 dark:text-neutral-400">

      +              {viewConfig.cardFields.footerFields.map(fieldId => (

      +                <FieldRenderer key={fieldId} item={item}
      fieldId={fieldId} options={{ compact: true, avatarClassName: 'w-8 h-8' }}
      />

      +              ))}

      +            </div>
                 </div>
               </div>
             </CardContent>
           </Card>
         );
       }
       
       interface DataKanbanViewProps {
      -  data: Record<string, DataItem[]>;

      +  data: Record<string, GenericItem[]>;
       }
       
       export function DataKanbanView({ data }: DataKanbanViewProps) {
      @@ -93,7 +75,7 @@
           setColumns(data);
         }, [data]);
       
      -  const handleDragStart = (e: React.DragEvent<HTMLDivElement>, item:
      DataItem, sourceColumnId: string) => {

      +  const handleDragStart = (e: React.DragEvent<HTMLDivElement>, item:
      GenericItem, sourceColumnId: string) => {
           e.dataTransfer.effectAllowed = 'move';
           e.dataTransfer.setData('text/plain', JSON.stringify({ itemId: item.id, sourceColumnId }));
           setDraggedItemId(item.id);
      @@ -148,7 +130,7 @@
             
             // Persist change to global store. The groupBy value tells us which property to update.
             if (groupBy !== 'none' && sourceColumnId !== targetColumnId) {
      -        updateItem(itemId, { [groupBy]: targetColumnId } as
      Partial<DataItem>);

      +        updateItem(itemId, { [groupBy]: targetColumnId } as
      Partial<GenericItem>);
             }
       
           } catch (err) {
      @@ -176,7 +158,7 @@
                 )}
               >
                 <div className="flex items-center justify-between mb-6">
      -            <div className="flex items-center gap-3">

      +            <div className="flex items-center gap-3 min-w-0">
                     <div className={cn("w-3.5 h-3.5 rounded-full", statusColors[columnId] || "bg-muted-foreground")} />
      -              <h3 className="font-semibold text-card-foreground
      dark:text-neutral-100 capitalize">{columnId}</h3>

      -              <Badge variant="secondary"
      className="backdrop-blur-sm">{items.length}</Badge>

      +              <h3 className="font-semibold text-card-foreground
      dark:text-neutral-100 capitalize truncate">{columnId}</h3>

      +              <span className="text-sm font-medium text-muted-foreground
      bg-background/50 rounded-full px-2 py-0.5">{items.length}</span>
                   </div>
                   <button className="p-1 rounded-full bg-card/30 dark:bg-neutral-800/30 hover:bg-card/50 dark:hover:bg-neutral-700/50 transition-colors">
                     <Plus className="w-4 h-4 text-muted-foreground dark:text-neutral-300" />

    patchStrategy: standard-diff
  - type: write
    path: src/features/dynamic-view/components/views/CalendarView.tsx
    content: >+
      --- src/features/dynamic-view/components/views/CalendarView.tsx

      +++ src/features/dynamic-view/components/views/CalendarView.tsx

      @@ -2,20 +2,18 @@
       import { format, addMonths, subMonths, startOfMonth, endOfMonth, startOfWeek, endOfWeek, eachDayOfInterval, isSameMonth, isToday, isSameDay, } from "date-fns";
       import { ChevronLeft, ChevronRight } from "lucide-react";
       import { gsap } from "gsap";
       
       import { Button } from "@/components/ui/button";
      -import { Badge } from "@/components/ui/badge";

      -import { Avatar, AvatarFallback, AvatarImage } from
      "@/components/ui/avatar";

      -import { cn, getPriorityColor } from "@/lib/utils";

      -import type { DataItem, CalendarDisplayProp, CalendarDateProp,
      CalendarColorProp, Status, Priority } from "../types";

      +import { cn } from "@/lib/utils";

      +import type { GenericItem } from '../../types';

      +import type { CalendarDisplayProp, CalendarDateProp, CalendarColorProp,
      Status, Priority } from '../../pages/DataDemo/types';
       import { useAppViewManager } from "@/hooks/useAppViewManager.hook";
       import { useResizeObserver } from "@/hooks/useResizeObserver.hook";
       import { useSelectedItem, useDataDemoStore } from "../store/dataDemo.store";
       import { CalendarViewControls } from "./DataCalendarViewControls";
      -import { ItemTags } from "./shared/DataItemParts";

      +import { useDynamicView } from '../../DynamicViewContext'

      +import { FieldRenderer } from '../shared/FieldRenderer'
       
       interface CalendarViewProps {
      -  data: DataItem[];

      +  data: GenericItem[];
       }
       
       const PRIORITY_BG_COLORS: Record<Priority, string> = {
      @@ -69,25 +67,26 @@
         );
       }
       
       function CalendarEvent({ item, isSelected, isDragging, onDragStart, displayProps, colorProp }: { 
      -    item: DataItem; 

      +    item: GenericItem; 
           isSelected: boolean;
           isDragging: boolean;
           onDragStart: (e: React.DragEvent<HTMLDivElement>, itemId: string) => void;
           displayProps: CalendarDisplayProp[];
           colorProp: CalendarColorProp;
       }) {
         const { onItemSelect } = useAppViewManager();
      -    const hasFooter = displayProps.includes('priority') ||
      displayProps.includes('assignee');

      +  const { config } = useDynamicView();

      +  const { calendarView: viewConfig } = config;
       
           const colorClass = useMemo(() => {
             switch (colorProp) {
      -        case 'priority': return PRIORITY_BG_COLORS[item.priority];

      -        case 'status': return STATUS_BG_COLORS[item.status];

      -        case 'category': return getCategoryBgColor(item.category);

      +        case 'priority': return PRIORITY_BG_COLORS[item.priority as
      Priority];

      +        case 'status': return STATUS_BG_COLORS[item.status as Status];

      +        case 'category': return getCategoryBgColor(item.category as
      string);
               default: return null;
             }
      -    }, [colorProp, item.priority, item.status, item.category]);

      +    }, [colorProp, item]);
       
           return (
               <div
      @@ -102,38 +101,25 @@
                         : "bg-card/60 dark:bg-neutral-800/60 backdrop-blur-sm hover:bg-card/80 dark:hover:bg-neutral-700/70"
                   )}
               >
      -            <h4 className={cn(

      +            <div className={cn(
                     "font-semibold text-sm leading-tight line-clamp-2",
                     colorClass ? "text-inherit" : "text-card-foreground/90"
                   )}>
      -                {item.title}

      -            </h4>

      +              <FieldRenderer item={item} fieldId={viewConfig.titleField}
      />

      +            </div>
       
      -            {displayProps.includes('tags') && item.tags.length > 0 && (

      -                <ItemTags tags={item.tags} />

      -            )}

      -

      -            {hasFooter && (

      +            {viewConfig.displayFields.length > 0 && (
                       <div className={cn(
      -                    "flex items-center justify-between pt-1 border-t",

      +                    "flex items-center justify-between pt-1 border-t
      flex-wrap gap-2",
                           colorClass ? "border-black/10 dark:border-white/10" : "border-border/30 dark:border-neutral-700/50"
                       )}>
      -                    {displayProps.includes('priority') ? (

      -                        <Badge className={cn("text-xs border capitalize",
      getPriorityColor(item.priority))}>

      -                            {item.priority}

      -                        </Badge>

      -                    ) : <div />}

      -                    {displayProps.includes('assignee') && (

      -                        <Avatar className="w-5 h-5">

      -                            <AvatarImage src={item.assignee.avatar} />

      -                            <AvatarFallback className="text-[10px]
      bg-muted dark:bg-neutral-700 text-foreground dark:text-neutral-200
      font-medium">

      -                                {item.assignee.name.split(" ").map((n) =>
      n[0]).join("")}

      -                            </AvatarFallback>

      -                        </Avatar>

      -                    )}

      +                  {viewConfig.displayFields.map(fieldId => (

      +                    <FieldRenderer key={fieldId} item={item}
      fieldId={fieldId} options={{ compact: true, avatarClassName: 'w-5 h-5'
      }}/>

      +                  ))}
                       </div>
                   )}
               </div>
           );
       }
      @@ -176,7 +162,7 @@
         const itemsByDateProp = useMemo(() => data.filter(item => !!item[calendarDateProp]), [data, calendarDateProp]);
       
         const eventsByDate = useMemo(() => {
      -    const eventsMap = new Map<string, DataItem[]>();

      +    const eventsMap = new Map<string, GenericItem[]>();
           itemsByDateProp.forEach(item => {
             const dateValue = item[calendarDateProp];
             if (!dateValue) return;

    patchStrategy: standard-diff
  - type: write
    path: src/features/dynamic-view/components/controls/ViewControls.tsx
    content: >
      --- src/features/dynamic-view/components/controls/ViewControls.tsx

      +++ src/features/dynamic-view/components/controls/ViewControls.tsx

      @@ -1,6 +1,6 @@
       import * as React from 'react'
       import { Check, ListFilter, Search, SortAsc, ChevronsUpDown } from 'lucide-react'
       
       import { cn } from '@/lib/utils'
       import { Button } from '@/components/ui/button'
      @@ -24,40 +24,19 @@
         CommandSeparator,
       } from '@/components/ui/command'
       
      -import type { SortableField, Status, Priority, FilterConfig,
      GroupableField } from '../types'

      +import type { FilterConfig } from '../../types'

      +import type { SortableField } from '../../pages/DataDemo/types'
       import { useAppViewManager } from '@/hooks/useAppViewManager.hook'
      +import { useDynamicView } from '../../DynamicViewContext'
       
      -const statusOptions: { value: Status; label: string }[] = [

      -  { value: 'active', label: 'Active' },

      -  { value: 'pending', label: 'Pending' },

      -  { value: 'completed', label: 'Completed' },

      -  { value: 'archived', label: 'Archived' },

      -]

      -

      -const priorityOptions: { value: Priority; label: string }[] = [

      -  { value: 'critical', label: 'Critical' },

      -  { value: 'high', label: 'High' },

      -  { value: 'medium', label: 'Medium' },

      -  { value: 'low', label: 'Low' },

      -]

      -

      -const sortOptions: { value: SortableField, label: string }[] = [

      -  { value: 'updatedAt', label: 'Last Updated' },

      -  { value: 'title', label: 'Title' },

      -  { value: 'status', label: 'Status' },

      -  { value: 'priority', label: 'Priority' },

      -  { value: 'metrics.completion', label: 'Progress' },

      -]

      -
       export interface DataViewControlsProps {
      -  groupOptions: { id: GroupableField | 'none'; label: string }[];

      +  // groupOptions will now come from config
       }
       
      -export function DataViewControls({ groupOptions }: DataViewControlsProps)
      {

      +export function DataViewControls() {
         const {
           filters,
           setFilters,
      @@ -67,11 +46,15 @@
           groupBy,
           setGroupBy,
           viewMode,
         } = useAppViewManager();
      +  const { config } = useDynamicView();

      +  const sortOptions = config.sortableFields;

      +  const groupOptions = config.groupableFields;

      +  const filterableFields = config.filterableFields;
       
         const handleSearchChange = (event: React.ChangeEvent<HTMLInputElement>) => {
           setFilters({ ...filters, searchTerm: event.target.value })
         }
         
      -  const activeFilterCount = filters.status.length +
      filters.priority.length

      +  const activeFilterCount = filterableFields.reduce((acc, field) => acc +
      (filters[field.id]?.length || 0), 0)
       
         return (
           <div className="flex flex-col sm:flex-row items-center gap-2 w-full">
      @@ -103,7 +86,7 @@
                 </Button>
               </PopoverTrigger>
               <PopoverContent className="w-[240px] p-0" align="start">
      -          <CombinedFilter filters={filters} onFiltersChange={setFilters}
      />

      +          <CombinedFilter filters={filters} onFiltersChange={setFilters}
      filterableFields={filterableFields} />
               </PopoverContent>
             </Popover>
       
      @@ -118,7 +101,7 @@
               <DropdownMenuTrigger asChild>
                 <Button variant="outline" size="sm" className="h-9 w-full sm:w-auto justify-start">
                   <SortAsc className="mr-2 h-4 w-4" />
      -            Sort by: {sortOptions.find(o => o.value ===
      sortConfig?.key)?.label || 'Default'}

      +            Sort by: {sortOptions.find(o => o.id ===
      sortConfig?.key)?.label || 'Default'}
                 </Button>
               </DropdownMenuTrigger>
               <DropdownMenuContent align="end" className="w-[200px]">
      @@ -136,9 +119,9 @@
                   <DropdownMenuRadioItem value="default-">Default</DropdownMenuRadioItem>
                   <DropdownMenuSeparator />
                   {sortOptions.map(option => (
      -              <React.Fragment key={option.value}>

      -                <DropdownMenuRadioItem
      value={`${option.value}-desc`}>{option.label}
      (Desc)</DropdownMenuRadioItem>

      -                <DropdownMenuRadioItem
      value={`${option.value}-asc`}>{option.label} (Asc)</DropdownMenuRadioItem>

      +              <React.Fragment key={option.id}>

      +                <DropdownMenuRadioItem
      value={`${option.id}-desc`}>{option.label} (Desc)</DropdownMenuRadioItem>

      +                <DropdownMenuRadioItem
      value={`${option.id}-asc`}>{option.label} (Asc)</DropdownMenuRadioItem>
                     </React.Fragment>
                   ))}
                 </DropdownMenuRadioGroup>
      @@ -171,62 +154,58 @@
       function CombinedFilter({
         filters,
         onFiltersChange,
      +  filterableFields,
       }: {
         filters: FilterConfig;
         onFiltersChange: (filters: FilterConfig) => void;
      +  filterableFields: { id: string; label: string; options: { id: string;
      label: string }[] }[];
       }) {
      -  const selectedStatus = new Set(filters.status);

      -  const selectedPriority = new Set(filters.priority);

      -

      -  const handleStatusSelect = (status: Status) => {

      -    selectedStatus.has(status) ? selectedStatus.delete(status) :
      selectedStatus.add(status);

      -    onFiltersChange({ ...filters, status: Array.from(selectedStatus) });

      +  const handleSelect = (fieldId: string, value: string) => {

      +    const currentValues = new Set(filters[fieldId] || []);

      +    currentValues.has(value) ? currentValues.delete(value) :
      currentValues.add(value);

      +    

      +    onFiltersChange({ ...filters, [fieldId]: Array.from(currentValues)
      });
         };
       
      -  const handlePrioritySelect = (priority: Priority) => {

      -    selectedPriority.has(priority) ? selectedPriority.delete(priority) :
      selectedPriority.add(priority);

      -    onFiltersChange({ ...filters, priority: Array.from(selectedPriority)
      });

      -  };

      +  const hasActiveFilters = filterableFields.some(field =>
      (filters[field.id] || []).length > 0);
       
      -  const hasActiveFilters = filters.status.length > 0 ||
      filters.priority.length > 0;

      +  const clearFilters = () => {

      +    const clearedFilters: Partial<FilterConfig> = {};

      +    filterableFields.forEach(field => {

      +      clearedFilters[field.id as keyof Omit<FilterConfig, 'searchTerm'>]
      = [];

      +    });

      +    onFiltersChange({ searchTerm: filters.searchTerm, ...clearedFilters
      });

      +  }
       
         return (
           <Command>
             <CommandInput placeholder="Filter by..." />
             <CommandList>
               <CommandEmpty>No results found.</CommandEmpty>
      -

      -        <CommandGroup heading="Status">

      -          {statusOptions.map((option) => {

      -            const isSelected = selectedStatus.has(option.value);

      -            return (

      -              <CommandItem

      -                key={option.value}

      -                onSelect={() => handleStatusSelect(option.value)}

      -              >

      -                <div

      -                  className={cn(

      -                    'mr-2 flex h-4 w-4 items-center justify-center
      rounded-sm border border-primary',

      -                    isSelected ? 'bg-primary text-primary-foreground' :
      'opacity-50 [&_svg]:invisible'

      -                  )}

      +        

      +        {filterableFields.map((field, index) => (

      +          <React.Fragment key={field.id}>

      +            <CommandGroup heading={field.label}>

      +              {field.options.map((option) => {

      +            const isSelected = (filters[field.id] ||
      []).includes(option.id);

      +            return (

      +              <CommandItem

      +                key={option.id}

      +                onSelect={() => handleSelect(field.id, option.id)}

      +              >

      +                <div

      +                  className={cn(

      +                    'mr-2 flex h-4 w-4 items-center justify-center
      rounded-sm border border-primary',

      +                    isSelected ? 'bg-primary text-primary-foreground' :
      'opacity-50 [&_svg]:invisible'

      +                  )}
                       >
                         <Check className={cn('h-4 w-4')} />
                       </div>
                       <span>{option.label}</span>
                     </CommandItem>
                   );
                 })}
      -        </CommandGroup>

      -

      -        <CommandSeparator />

      -

      -        <CommandGroup heading="Priority">

      -          {priorityOptions.map((option) => {

      -            const isSelected = selectedPriority.has(option.value);

      -            return (

      -              <CommandItem

      -                key={option.value}

      -                onSelect={() => handlePrioritySelect(option.value)}

      -              >

      -                <div

      -                  className={cn(

      -                    'mr-2 flex h-4 w-4 items-center justify-center
      rounded-sm border border-primary',

      -                    isSelected ? 'bg-primary text-primary-foreground' :
      'opacity-50 [&_svg]:invisible'

      -                  )}

      -                >

      -                  <Check className={cn('h-4 w-4')} />

      -                </div>

      -                <span>{option.label}</span>

      -              </CommandItem>

      -            );

      -          })}

      -        </CommandGroup>

      +            </CommandGroup>

      +            {index < filterableFields.length - 1 && <CommandSeparator />}

      +          </React.Fragment>

      +        ))}
       
               {hasActiveFilters && (
                 <>
                   <CommandSeparator />
                   <CommandGroup>
                     <CommandItem
      -                onSelect={() => onFiltersChange({ ...filters, status: [],
      priority: [] })}

      +                onSelect={clearFilters}
                       className="justify-center text-center text-sm"
                     >
                       Clear filters
    patchStrategy: standard-diff
  - type: write
    path: src/pages/DataDemo/types.ts
    content: |+
      --- src/pages/DataDemo/types.ts
      +++ src/pages/DataDemo/types.ts
      @@ -16,4 +16,5 @@
         searchTerm: string
         status: Status[]
         priority: Priority[]
      +  [key: string]: any;
       }

    patchStrategy: standard-diff
snapshot:
  src/features/dynamic-view/components/views/ListView.tsx: >-
    import { useRef } from 'react'

    import { cn } from '@/lib/utils'

    import type { DataItem } from '../types'

    import { useStaggeredAnimation } from
    '@/hooks/useStaggeredAnimation.motion.hook'

    import { EmptyState } from './EmptyState'

    import { useAppViewManager } from '@/hooks/useAppViewManager.hook'

    import { useResizeObserver } from '@/hooks/useResizeObserver.hook'

    import { 
      useSelectedItem,
    } from '../store/dataDemo.store'

    import {
      AssigneeInfo,
      ItemStatusBadge,
      ItemPriorityBadge,
      ItemDateInfo,
      ItemTags,
    } from './shared/DataItemParts'

    import { AddDataItemCta } from './shared/AddDataItemCta'


    export function DataListView({ data }: { data: DataItem[] }) {
      const { onItemSelect, itemId } = useAppViewManager();
      const selectedItem = useSelectedItem(itemId);

      const listRef = useRef<HTMLDivElement>(null)
      useStaggeredAnimation(listRef, [data], { mode: 'incremental', scale: 1, y: 20, stagger: 0.05, duration: 0.4 });
      const { width } = useResizeObserver(listRef);

      // Breakpoints for responsive metadata
      const showTags = width > 1050;
      const showDate = width > 850;
      const showStatus = width > 700;
      const compactAssignee = width < 600;
      const showPriority = width > 450;

      const items = Array.isArray(data) ? data : [];
      if (items.length === 0) {
        return <EmptyState />
      }

      return (
        <div ref={listRef}>
          {items.map((item: DataItem) => {
            const isSelected = selectedItem?.id === item.id
            
            return (
              <div key={item.id} className="px-2">
                <div
                  onClick={() => onItemSelect(item)}
                  className={cn(
                    "group flex items-center px-2 py-2 rounded-md transition-colors duration-200 cursor-pointer",
                    "hover:bg-accent/80",
                    isSelected ? "bg-accent" : "bg-transparent"
                  )}
                >
                  {/* Left side: Icon and Title */}
                  <div className="flex items-center gap-3 flex-1 min-w-0">
                    <span className="text-xl flex-shrink-0 w-8 text-center">{item.thumbnail}</span>
                    <p className="font-medium truncate text-card-foreground group-hover:text-primary">{item.title}</p>
                  </div>

                  {/* Right side: Metadata */}
                  <div className="flex shrink-0 items-center gap-2 sm:gap-4 md:gap-6 ml-4 text-sm text-muted-foreground">
                    {showStatus && <ItemStatusBadge status={item.status} />}
                    {showTags && <ItemTags tags={item.tags} />}
                    {showDate && <ItemDateInfo date={item.updatedAt} />}
                    <AssigneeInfo assignee={item.assignee} avatarClassName="w-7 h-7" compact={compactAssignee} />
                    {showPriority && <ItemPriorityBadge priority={item.priority} />}
                  </div>
                </div>
              </div>
            )
          })}
          <AddDataItemCta viewMode='list' />
        </div>
      )
    }
  src/features/dynamic-view/components/views/CalendarView.tsx: >-
    import { useState, useMemo, useRef, useLayoutEffect } from "react";

    import { format, addMonths, subMonths, startOfMonth, endOfMonth,
    startOfWeek, endOfWeek, eachDayOfInterval, isSameMonth, isToday, isSameDay,
    } from "date-fns";

    import { ChevronLeft, ChevronRight } from "lucide-react";

    import { gsap } from "gsap";


    import { Button } from "@/components/ui/button";

    import { Badge } from "@/components/ui/badge";

    import { Avatar, AvatarFallback, AvatarImage } from
    "@/components/ui/avatar";

    import { cn, getPriorityColor } from "@/lib/utils";

    import type { DataItem, CalendarDisplayProp, CalendarDateProp,
    CalendarColorProp, Status, Priority } from "../types";

    import { useAppViewManager } from "@/hooks/useAppViewManager.hook";

    import { useResizeObserver } from "@/hooks/useResizeObserver.hook";

    import { useSelectedItem, useDataDemoStore } from "../store/dataDemo.store";

    import { CalendarViewControls } from "./DataCalendarViewControls";

    import { ItemTags } from "./shared/DataItemParts";


    interface CalendarViewProps {
      data: DataItem[];
    }


    const PRIORITY_BG_COLORS: Record<Priority, string> = {
      low: 'bg-blue-500/80 border-blue-600/80 text-white',
      medium: 'bg-yellow-500/80 border-yellow-600/80 text-yellow-950',
      high: 'bg-orange-500/80 border-orange-600/80 text-white',
      critical: 'bg-red-600/80 border-red-700/80 text-white',
    };


    const STATUS_BG_COLORS: Record<Status, string> = {
      active: 'bg-sky-500/80 border-sky-600/80 text-white',
      pending: 'bg-amber-500/80 border-amber-600/80 text-amber-950',
      completed: 'bg-emerald-600/80 border-emerald-700/80 text-white',
      archived: 'bg-zinc-500/80 border-zinc-600/80 text-white',
    };


    const CATEGORY_BG_COLORS = [
      'bg-rose-500/80 border-rose-600/80 text-white',
      'bg-fuchsia-500/80 border-fuchsia-600/80 text-white',
      'bg-indigo-500/80 border-indigo-600/80 text-white',
      'bg-teal-500/80 border-teal-600/80 text-white',
      'bg-lime-500/80 border-lime-600/80 text-lime-950',
    ];


    const getCategoryBgColor = (category: string) => {
      let hash = 0;
      for (let i = 0; i < category.length; i++) {
        hash = category.charCodeAt(i) + ((hash << 5) - hash);
      }
      const index = Math.abs(hash % CATEGORY_BG_COLORS.length);
      return CATEGORY_BG_COLORS[index];
    };


    function CalendarHeader({ currentDate, onPrevMonth, onNextMonth, onToday }:
    {
      currentDate: Date;
      onPrevMonth: () => void;
      onNextMonth: () => void;
      onToday: () => void;
    }) {
      return (
        <div className="flex items-center justify-between gap-4 mb-6">
          <h2 className="text-xl font-bold md:text-2xl tracking-tight">
            {format(currentDate, "MMMM yyyy")}
          </h2>
          <div className="flex items-center gap-2">
            <Button variant="outline" size="sm" onClick={onToday}>Today</Button>
            <CalendarViewControls />
            <div className="flex items-center">
              <Button variant="outline" size="icon" className="h-9 w-9" onClick={onPrevMonth}>
                <ChevronLeft className="h-4 w-4" />
              </Button>
              <Button variant="outline" size="icon" className="h-9 w-9" onClick={onNextMonth}>
                <ChevronRight className="h-4 w-4" />
              </Button>
            </div>
          </div>
        </div>
      );
    }


    function CalendarEvent({ item, isSelected, isDragging, onDragStart,
    displayProps, colorProp }: { 
        item: DataItem; 
        isSelected: boolean;
        isDragging: boolean;
        onDragStart: (e: React.DragEvent<HTMLDivElement>, itemId: string) => void;
        displayProps: CalendarDisplayProp[];
        colorProp: CalendarColorProp;
    }) {
      const { onItemSelect } = useAppViewManager();
        const hasFooter = displayProps.includes('priority') || displayProps.includes('assignee');

        const colorClass = useMemo(() => {
          switch (colorProp) {
            case 'priority': return PRIORITY_BG_COLORS[item.priority];
            case 'status': return STATUS_BG_COLORS[item.status];
            case 'category': return getCategoryBgColor(item.category);
            default: return null;
          }
        }, [colorProp, item.priority, item.status, item.category]);

        return (
            <div
                draggable
                onDragStart={(e) => onDragStart(e, item.id)}
                onClick={() => onItemSelect(item)}
                className={cn(
                    "p-2 rounded-lg cursor-grab transition-all duration-200 border space-y-1",
                    isSelected && "ring-2 ring-primary ring-offset-background ring-offset-2",
                    isDragging && "opacity-50 ring-2 ring-primary cursor-grabbing",
                    colorClass 
                      ? `${colorClass} hover:brightness-95 dark:hover:brightness-110`
                      : "bg-card/60 dark:bg-neutral-800/60 backdrop-blur-sm hover:bg-card/80 dark:hover:bg-neutral-700/70"
                )}
            >
                <h4 className={cn(
                  "font-semibold text-sm leading-tight line-clamp-2",
                  colorClass ? "text-inherit" : "text-card-foreground/90"
                )}>
                    {item.title}
                </h4>

                {displayProps.includes('tags') && item.tags.length > 0 && (
                    <ItemTags tags={item.tags} />
                )}

                {hasFooter && (
                    <div className={cn(
                        "flex items-center justify-between pt-1 border-t",
                        colorClass ? "border-black/10 dark:border-white/10" : "border-border/30 dark:border-neutral-700/50"
                    )}>
                        {displayProps.includes('priority') ? (
                            <Badge className={cn("text-xs border capitalize", getPriorityColor(item.priority))}>
                                {item.priority}
                            </Badge>
                        ) : <div />}
                        {displayProps.includes('assignee') && (
                            <Avatar className="w-5 h-5">
                                <AvatarImage src={item.assignee.avatar} />
                                <AvatarFallback className="text-[10px] bg-muted dark:bg-neutral-700 text-foreground dark:text-neutral-200 font-medium">
                                    {item.assignee.name.split(" ").map((n) => n[0]).join("")}
                                </AvatarFallback>
                            </Avatar>
                        )}
                    </div>
                )}
            </div>
        );
    }


    const datePropLabels: Record<CalendarDateProp, string> = {
      dueDate: 'due dates',
      createdAt: 'creation dates',
      updatedAt: 'update dates',
    };


    export function DataCalendarView({ data }: CalendarViewProps) {
      const [currentDate, setCurrentDate] = useState(new Date());
      const { 
        itemId,
        calendarDateProp, 
        calendarDisplayProps, 
        calendarItemLimit,
        calendarColorProp,
      } = useAppViewManager();
      const selectedItem = useSelectedItem(itemId);
      const updateItem = useDataDemoStore(s => s.updateItem);
      
      // Drag & Drop State
      const [draggedItemId, setDraggedItemId] = useState<string | null>(null);
      const [dropTargetDate, setDropTargetDate] = useState<Date | null>(null);

      // GSAP animation state
      const [direction, setDirection] = useState(0); // 0: initial, 1: next, -1: prev

      // Responsive Calendar State
      const calendarContainerRef = useRef<HTMLDivElement>(null);
      const { width } = useResizeObserver(calendarContainerRef);
      const MIN_DAY_WIDTH = 160; // px
      const numColumns = useMemo(() => {
        if (width === 0) return 7;
        const cols = Math.floor(width / MIN_DAY_WIDTH);
        return Math.max(3, Math.min(7, cols));
      }, [width]);

      const gridRef = useRef<HTMLDivElement>(null);
      const itemsByDateProp = useMemo(() => data.filter(item => !!item[calendarDateProp]), [data, calendarDateProp]);

      const eventsByDate = useMemo(() => {
        const eventsMap = new Map<string, DataItem[]>();
        itemsByDateProp.forEach(item => {
          const dateValue = item[calendarDateProp];
          if (!dateValue) return;
          const date = new Date(dateValue as string);
          const dateKey = format(date, "yyyy-MM-dd");
          if (!eventsMap.has(dateKey)) {
            eventsMap.set(dateKey, []);
          }
          eventsMap.get(dateKey)?.push(item);
        });
        return eventsMap;
      }, [itemsByDateProp, calendarDateProp]);

      const monthStart = startOfMonth(currentDate);
      const monthEnd = endOfMonth(monthStart);
      const startDate = startOfWeek(monthStart, { weekStartsOn: 0 }); // Sunday
      const endDate = endOfWeek(monthEnd, { weekStartsOn: 0 });

      const days = eachDayOfInterval({ start: startDate, end: endDate });
      const weekdays = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
      
      // D&D Handlers
      const handleDragStart = (e: React.DragEvent, itemId: string) => {
        e.dataTransfer.effectAllowed = 'move';
        e.dataTransfer.setData('text/plain', itemId);
        setDraggedItemId(itemId);
      };
      
      const handleDragEnd = () => {
        setDraggedItemId(null);
        setDropTargetDate(null);
      };

      const handleDragOver = (e: React.DragEvent, day: Date) => {
        e.preventDefault();
        if (dropTargetDate === null || !isSameDay(day, dropTargetDate)) {
            setDropTargetDate(day);
        }
      };

      const handleDragLeave = () => {
        setDropTargetDate(null);
      };

      const handleDrop = (e: React.DragEvent, day: Date) => {
        e.preventDefault();
        const itemIdToUpdate = e.dataTransfer.getData('text/plain');
        if (itemIdToUpdate) {
            const originalItem = itemsByDateProp.find(i => i.id === itemIdToUpdate);
            if (originalItem && originalItem[calendarDateProp]) {
                const originalDate = new Date(originalItem[calendarDateProp] as string);
                // Preserve the time, only change the date part
                const newDueDate = new Date(day);
                newDueDate.setHours(originalDate.getHours(), originalDate.getMinutes(), originalDate.getSeconds(), originalDate.getMilliseconds());
                updateItem(itemIdToUpdate, { [calendarDateProp]: newDueDate.toISOString() });
            }
        }
        handleDragEnd(); // Reset state
      };
      
      const handlePrevMonth = () => {
        setDirection(-1);
        setCurrentDate(subMonths(currentDate, 1));
      };
      const handleNextMonth = () => {
        setDirection(1);
        setCurrentDate(addMonths(currentDate, 1));
      };
      const handleToday = () => {
        setDirection(0); // No animation for 'Today'
        setCurrentDate(new Date());
      };

      useLayoutEffect(() => {
        if (direction === 0 || !gridRef.current) return;
        gsap.fromTo(gridRef.current, 
          { opacity: 0, x: 30 * direction }, 
          { opacity: 1, x: 0, duration: 0.3, ease: 'power2.out' }
        );
      }, [currentDate]);

      return (
        <div ref={calendarContainerRef} className="-mx-4 md:-mx-6">
          <div className="px-4 md:px-6 pb-2">
            <CalendarHeader currentDate={currentDate} onPrevMonth={handlePrevMonth} onNextMonth={handleNextMonth} onToday={handleToday} />
          </div>
          {itemsByDateProp.length === 0 ? (
            <div className="flex items-center justify-center h-96 text-muted-foreground rounded-lg border bg-card/30 mx-4 md:mx-6">
              No items with {datePropLabels[calendarDateProp]} to display on the calendar.
            </div>
          ) : (
            <div className="px-2" onDragEnd={handleDragEnd}>
              {numColumns === 7 && (
                <div className="grid grid-cols-7">
                  {weekdays.map(day => (
                    <div key={day} className="py-2 px-3 text-center text-xs font-semibold text-muted-foreground">
                      {day}
                    </div>
                  ))}
                </div>
              )}

                <div
                  ref={gridRef}
                  style={{
                    display: 'grid',
                    gridTemplateColumns: `repeat(${numColumns}, minmax(0, 1fr))`,
                    gap: '0.5rem',
                  }}
                >
                  {days.map(day => {
                    const dateKey = format(day, "yyyy-MM-dd");
                    const dayEvents = eventsByDate.get(dateKey) || [];
                    const visibleEvents = calendarItemLimit === 'all' 
                        ? dayEvents 
                        : dayEvents.slice(0, calendarItemLimit as number);
                    const hiddenEventsCount = dayEvents.length - visibleEvents.length;
                    const isCurrentMonthDay = isSameMonth(day, currentDate);
                    const isDropTarget = dropTargetDate && isSameDay(day, dropTargetDate);
                    return (
                      <div
                        key={day.toString()}
                        onDragOver={(e) => handleDragOver(e, day)}
                        onDragLeave={handleDragLeave}
                        onDrop={(e) => handleDrop(e, day)}
                        className={cn(
                          "relative min-h-[150px] rounded-2xl p-2 flex flex-col gap-2 transition-all duration-300 border",
                          isCurrentMonthDay ? "bg-card/40 dark:bg-neutral-900/40 border-transparent" : "bg-muted/30 dark:bg-neutral-800/20 border-transparent text-muted-foreground/60",
                          isDropTarget ? "border-primary/50 bg-primary/10" : "hover:border-primary/20 hover:bg-card/60"
                        )}
                      >
                        <div className="font-semibold text-sm">
                          {isToday(day) ? (
                            <div className="flex items-center justify-center w-7 h-7 rounded-full bg-primary text-primary-foreground">
                              {format(day, 'd')}
                            </div>
                          ) : (
                            <div className="flex items-baseline gap-1.5 px-1 py-0.5">
                              {numColumns < 7 && <span className="text-xs opacity-70">{format(day, 'eee')}</span>}
                              <span>{format(day, 'd')}</span>
                            </div>
                          )}
                        </div>
                        <div className="space-y-2 overflow-y-auto flex-grow custom-scrollbar">
                          {visibleEvents.map(item => (
                            <CalendarEvent
                              key={item.id} 
                              item={item} 
                              isSelected={selectedItem?.id === item.id}
                              isDragging={draggedItemId === item.id}
                              onDragStart={handleDragStart}
                              displayProps={calendarDisplayProps}
                              colorProp={calendarColorProp}
                            />
                          ))}
                        </div>
                        {hiddenEventsCount > 0 && (
                          <div className="absolute bottom-1 right-2 text-xs font-bold text-muted-foreground">
                            +{hiddenEventsCount} more
                          </div>
                        )}
                      </div>
                    );
                  })}
                </div>
            </div>
          )}
        </div>
      );
    }
  src/features/dynamic-view/components/controls/ViewControls.tsx: >-
    import * as React from 'react'

    import { Check, ListFilter, Search, SortAsc, ChevronsUpDown } from
    'lucide-react'


    import { cn } from '@/lib/utils'

    import { Button } from '@/components/ui/button'

    import { Input } from '@/components/ui/input'

    import { Badge } from '@/components/ui/badge'

    import { Popover, PopoverContent, PopoverTrigger } from
    '@/components/ui/popover'

    import {
      DropdownMenu,
      DropdownMenuContent,
      DropdownMenuRadioGroup,
      DropdownMenuRadioItem,
      DropdownMenuSeparator,
      DropdownMenuLabel,
      DropdownMenuTrigger,
    } from '@/components/ui/dropdown-menu'

    import {
      Command,
      CommandEmpty,
      CommandGroup,
      CommandInput,
      CommandItem,
      CommandList,
      CommandSeparator,
    } from '@/components/ui/command'


    import type { SortableField, Status, Priority, FilterConfig, GroupableField
    } from '../types'

    import { useAppViewManager } from '@/hooks/useAppViewManager.hook'


    const statusOptions: { value: Status; label: string }[] = [
      { value: 'active', label: 'Active' },
      { value: 'pending', label: 'Pending' },
      { value: 'completed', label: 'Completed' },
      { value: 'archived', label: 'Archived' },
    ]


    const priorityOptions: { value: Priority; label: string }[] = [
      { value: 'critical', label: 'Critical' },
      { value: 'high', label: 'High' },
      { value: 'medium', label: 'Medium' },
      { value: 'low', label: 'Low' },
    ]


    const sortOptions: { value: SortableField, label: string }[] = [
      { value: 'updatedAt', label: 'Last Updated' },
      { value: 'title', label: 'Title' },
      { value: 'status', label: 'Status' },
      { value: 'priority', label: 'Priority' },
      { value: 'metrics.completion', label: 'Progress' },
    ]


    export interface DataViewControlsProps {
      groupOptions: { id: GroupableField | 'none'; label: string }[];
    }


    export function DataViewControls({ groupOptions }: DataViewControlsProps) {
      const {
        filters,
        setFilters,
        sortConfig,
        setSort,
        groupBy,
        setGroupBy,
        viewMode,
      } = useAppViewManager();

      const handleSearchChange = (event: React.ChangeEvent<HTMLInputElement>) => {
        setFilters({ ...filters, searchTerm: event.target.value })
      }
      
      const activeFilterCount = filters.status.length + filters.priority.length

      return (
        <div className="flex flex-col sm:flex-row items-center gap-2 w-full">
          {/* Search */}
          <div className="relative w-full sm:w-auto">
            <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground" />
            <Input
              placeholder="Search projects..."
              className="pl-9 w-full sm:w-64"
              value={filters.searchTerm}
              onChange={handleSearchChange}
            />
          </div>

          {/* Filters */}
          <Popover>
            <PopoverTrigger asChild>
              <Button variant="outline" size="sm" className="h-9 w-full sm:w-auto justify-start border-dashed">
                <ListFilter className="mr-2 h-4 w-4" />
                Filters
                {activeFilterCount > 0 && (
                  <>
                    <div className="mx-2 h-4 w-px bg-muted-foreground/50" />
                    <Badge variant="secondary" className="rounded-sm px-1 font-normal">
                      {activeFilterCount}
                    </Badge>
                  </>
                )}
              </Button>
            </PopoverTrigger>
            <PopoverContent className="w-[240px] p-0" align="start">
              <CombinedFilter filters={filters} onFiltersChange={setFilters} />
            </PopoverContent>
          </Popover>

          {activeFilterCount > 0 && (
            <Button variant="ghost" size="sm" onClick={() => setFilters({ searchTerm: filters.searchTerm, status: [], priority: [] })}>Reset</Button>
          )}

          {/* Spacer */}
          <div className="hidden md:block flex-grow" />

          {/* Sorter */}
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button variant="outline" size="sm" className="h-9 w-full sm:w-auto justify-start">
                <SortAsc className="mr-2 h-4 w-4" />
                Sort by: {sortOptions.find(o => o.value === sortConfig?.key)?.label || 'Default'}
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end" className="w-[200px]">
              <DropdownMenuLabel>Sort by</DropdownMenuLabel>
              <DropdownMenuRadioGroup
                value={`${sortConfig?.key || 'default'}-${sortConfig?.direction || ''}`}
                onValueChange={(value) => {
                  if (value.startsWith('default')) {
                    setSort(null)
                  } else {
                    const [key, direction] = value.split('-')
                    setSort({ key: key as SortableField, direction: direction as 'asc' | 'desc' })
                  }
                }}
              >
                <DropdownMenuRadioItem value="default-">Default</DropdownMenuRadioItem>
                <DropdownMenuSeparator />
                {sortOptions.map(option => (
                  <React.Fragment key={option.value}>
                    <DropdownMenuRadioItem value={`${option.value}-desc`}>{option.label} (Desc)</DropdownMenuRadioItem>
                    <DropdownMenuRadioItem value={`${option.value}-asc`}>{option.label} (Asc)</DropdownMenuRadioItem>
                  </React.Fragment>
                ))}
              </DropdownMenuRadioGroup>
            </DropdownMenuContent>
          </DropdownMenu>

          {/* Group By Dropdown */}
          {viewMode !== 'calendar' && (
            <div className="flex items-center gap-2 shrink-0 w-full sm:w-auto">
              <DropdownMenu>
                <DropdownMenuTrigger asChild>
                  <Button variant="outline" size="sm" className="h-9 w-full justify-between">
                    Group by: {groupOptions.find(o => o.id === groupBy)?.label}
                    <ChevronsUpDown className="ml-2 h-4 w-4 shrink-0 opacity-50" />
                  </Button>
                </DropdownMenuTrigger>
                <DropdownMenuContent className="w-[180px]">
                  <DropdownMenuRadioGroup value={groupBy} onValueChange={setGroupBy}>
                    {groupOptions.map(option => (
                      <DropdownMenuRadioItem key={option.id} value={option.id}>
                        {option.label}
                      </DropdownMenuRadioItem>
                    ))}
                  </DropdownMenuRadioGroup>
                </DropdownMenuContent>
              </DropdownMenu>
            </div>
          )}
        </div>
      )
    }


    function CombinedFilter({
      filters,
      onFiltersChange,
    }: {
      filters: FilterConfig;
      onFiltersChange: (filters: FilterConfig) => void;
    }) {
      const selectedStatus = new Set(filters.status);
      const selectedPriority = new Set(filters.priority);

      const handleStatusSelect = (status: Status) => {
        selectedStatus.has(status) ? selectedStatus.delete(status) : selectedStatus.add(status);
        onFiltersChange({ ...filters, status: Array.from(selectedStatus) });
      };

      const handlePrioritySelect = (priority: Priority) => {
        selectedPriority.has(priority) ? selectedPriority.delete(priority) : selectedPriority.add(priority);
        onFiltersChange({ ...filters, priority: Array.from(selectedPriority) });
      };

      const hasActiveFilters = filters.status.length > 0 || filters.priority.length > 0;

      return (
        <Command>
          <CommandInput placeholder="Filter by..." />
          <CommandList>
            <CommandEmpty>No results found.</CommandEmpty>

            <CommandGroup heading="Status">
              {statusOptions.map((option) => {
                const isSelected = selectedStatus.has(option.value);
                return (
                  <CommandItem
                    key={option.value}
                    onSelect={() => handleStatusSelect(option.value)}
                  >
                    <div
                      className={cn(
                        'mr-2 flex h-4 w-4 items-center justify-center rounded-sm border border-primary',
                        isSelected ? 'bg-primary text-primary-foreground' : 'opacity-50 [&_svg]:invisible'
                      )}
                    >
                      <Check className={cn('h-4 w-4')} />
                    </div>
                    <span>{option.label}</span>
                  </CommandItem>
                );
              })}
            </CommandGroup>

            <CommandSeparator />

            <CommandGroup heading="Priority">
              {priorityOptions.map((option) => {
                const isSelected = selectedPriority.has(option.value);
                return (
                  <CommandItem
                    key={option.value}
                    onSelect={() => handlePrioritySelect(option.value)}
                  >
                    <div
                      className={cn(
                        'mr-2 flex h-4 w-4 items-center justify-center rounded-sm border border-primary',
                        isSelected ? 'bg-primary text-primary-foreground' : 'opacity-50 [&_svg]:invisible'
                      )}
                    >
                      <Check className={cn('h-4 w-4')} />
                    </div>
                    <span>{option.label}</span>
                  </CommandItem>
                );
              })}
            </CommandGroup>

            {hasActiveFilters && (
              <>
                <CommandSeparator />
                <CommandGroup>
                  <CommandItem
                    onSelect={() => onFiltersChange({ ...filters, status: [], priority: [] })}
                    className="justify-center text-center text-sm"
                  >
                    Clear filters
                  </CommandItem>
                </CommandGroup>
              </>
            )}
          </CommandList>
        </Command>
      )
    }
  src/features/dynamic-view/components/views/TableView.tsx: >-
    import { useRef, useLayoutEffect, useMemo } from 'react'

    import { gsap } from 'gsap'

    import { cn } from '@/lib/utils'

    import { 
      ArrowUpDown, 
      ArrowUp, 
      ArrowDown,
      ExternalLink
    } from 'lucide-react'

    import type { DataItem, SortableField } from '../types'

    import { EmptyState } from './EmptyState'

    import { useAppViewManager } from '@/hooks/useAppViewManager.hook'

    import {
      useSelectedItem,
    } from '../store/dataDemo.store'

    import { capitalize } from '@/lib/utils'

    import {
      AssigneeInfo,
      ItemMetrics,
      ItemStatusBadge,
      ItemPriorityBadge,
      ItemDateInfo,
      ItemProgressBar,
    } from './shared/DataItemParts'

    import { AddDataItemCta } from './shared/AddDataItemCta'


    export function DataTableView({ data }: { data: DataItem[] }) {
      const {
        sortConfig,
        setTableSort,
        groupBy,
        onItemSelect,
        itemId,
      } = useAppViewManager();
      const selectedItem = useSelectedItem(itemId);

      const tableRef = useRef<HTMLTableElement>(null)
      const animatedItemsCount = useRef(0)

      useLayoutEffect(() => {
        if (tableRef.current) {
          // Only select item rows for animation, not group headers
          const newItems = Array.from( 
            tableRef.current.querySelectorAll('tbody tr')
          ).filter(tr => !(tr as HTMLElement).dataset.groupHeader)
           .slice(animatedItemsCount.current);
          gsap.fromTo(newItems,
            { y: 20, opacity: 0 },
            {
              duration: 0.5,
              y: 0,
              opacity: 1,
              stagger: 0.05,
              ease: "power2.out",
            },
          );
          animatedItemsCount.current = data.length;
        }
      }, [data]);

      const SortIcon = ({ field }: { field: SortableField }) => {
        if (sortConfig?.key !== field) {
          return <ArrowUpDown className="w-4 h-4 opacity-50" />
        }
        if (sortConfig.direction === 'asc') {
          return <ArrowUp className="w-4 h-4 text-primary" />
        }
        if (sortConfig.direction === 'desc') {
          return <ArrowDown className="w-4 h-4 text-primary" />
        }
        return <ArrowUpDown className="w-4 h-4 opacity-50" />
      }

      const handleSortClick = (field: SortableField) => {
        setTableSort(field)
      }

      const groupedData = useMemo(() => {
        if (groupBy === 'none') return null;
        return (data as DataItem[]).reduce((acc, item) => {
          const groupKey = item[groupBy as 'status' | 'priority' | 'category'] || 'N/A';
          if (!acc[groupKey]) {
            acc[groupKey] = [];
          }
          acc[groupKey].push(item);
          return acc;
        }, {} as Record<string, DataItem[]>);
      }, [data, groupBy]);

      if (data.length === 0) {
        return <EmptyState />
      }

      return (
        <div className="relative overflow-hidden rounded-2xl border bg-card/50 backdrop-blur-sm">
          <div className="overflow-x-auto">
            <table ref={tableRef} className="w-full">
              <thead>
                <tr className="border-b border-border/50 bg-muted/20">
                  <th className="text-left p-4 font-semibold text-sm">
                    <button
                      onClick={() => handleSortClick('title')}
                      className="flex items-center gap-2 hover:text-primary transition-colors"
                    >
                      Project
                      <SortIcon field="title" />
                    </button>
                  </th>
                  <th className="text-left p-4 font-semibold text-sm">
                    <button
                      onClick={() => handleSortClick('status')}
                      className="flex items-center gap-2 hover:text-primary transition-colors"
                    >
                      Status
                      <SortIcon field="status" />
                    </button>
                  </th>
                  <th className="text-left p-4 font-semibold text-sm">
                    <button
                      onClick={() => handleSortClick('priority')}
                      className="flex items-center gap-2 hover:text-primary transition-colors"
                    >
                      Priority
                      <SortIcon field="priority" />
                    </button>
                  </th>
                  <th className="text-left p-4 font-semibold text-sm">
                    <button
                      onClick={() => handleSortClick('assignee.name')}
                      className="flex items-center gap-2 hover:text-primary transition-colors"
                    >
                      Assignee
                      <SortIcon field="assignee.name" />
                    </button>
                  </th>
                  <th className="text-left p-4 font-semibold text-sm">
                    <button
                      onClick={() => handleSortClick('metrics.completion')}
                      className="flex items-center gap-2 hover:text-primary transition-colors"
                    >
                      Progress
                      <SortIcon field="metrics.completion" />
                    </button>
                  </th>
                  <th className="text-left p-4 font-semibold text-sm">
                    <button
                      onClick={() => handleSortClick('metrics.views')}
                      className="flex items-center gap-2 hover:text-primary transition-colors"
                    >
                      Engagement
                      <SortIcon field="metrics.views" />
                    </button>
                  </th>
                  <th className="text-left p-4 font-semibold text-sm">Last Updated</th>
                  <th className="text-center p-4 font-semibold text-sm w-16">Actions</th>
                </tr>
              </thead>
              <tbody>
                {groupedData
                  ? Object.entries(groupedData).flatMap(([groupName, items]) => [
                      <tr key={groupName} data-group-header="true" className="sticky top-0 z-10">
                        <td colSpan={8} className="p-2 bg-muted/50 backdrop-blur-sm">
                          <div className="flex items-center gap-2">
                            <h3 className="font-semibold text-sm">{capitalize(groupName)}</h3>
                            <span className="text-xs px-2 py-0.5 bg-background rounded-full font-medium">{items.length}</span>
                          </div>
                        </td>
                      </tr>,
                      ...items.map(item => <TableRow key={item.id} item={item} isSelected={selectedItem?.id === item.id} onItemSelect={onItemSelect} />)
                    ])
                  : data.map(item => <TableRow key={item.id} item={item} isSelected={selectedItem?.id === item.id} onItemSelect={onItemSelect} />)
                }
                <AddDataItemCta viewMode='table' colSpan={8} />
              </tbody>
            </table>
          </div>
        </div>
      )
    }


    function TableRow({ item, isSelected, onItemSelect }: { item: DataItem;
    isSelected: boolean; onItemSelect: (item: DataItem) => void }) {
      return (
        <tr
          onClick={() => onItemSelect(item)}
          className={cn(
            "group border-b border-border/30 transition-all duration-200 cursor-pointer",
            "hover:bg-accent/20 hover:border-primary/20",
            isSelected && "bg-primary/5 border-primary/30"
          )}
        >
          {/* Project Column */}
          <td className="p-4">
            <div className="flex items-center gap-3">
              <div className="w-10 h-10 bg-gradient-to-br from-primary/20 to-primary/10 rounded-lg flex items-center justify-center text-lg flex-shrink-0">
                {item.thumbnail}
              </div>
              <div className="min-w-0 flex-1">
                <h4 className="font-medium group-hover:text-primary transition-colors truncate">
                  {item.title}
                </h4>
                <p className="text-sm text-muted-foreground truncate">
                  {item.category}
                </p>
              </div>
            </div>
          </td>

          {/* Status Column */}
          <td className="p-4">
            <ItemStatusBadge status={item.status} />
          </td>

          {/* Priority Column */}
          <td className="p-4">
            <ItemPriorityBadge priority={item.priority} />
          </td>

          {/* Assignee Column */}
          <td className="p-4">
            <AssigneeInfo assignee={item.assignee} />
          </td>

          {/* Progress Column */}
          {/* Note: This progress bar is custom for the table, so we don't use the shared component here. */}
          <td className="p-4">
            <ItemProgressBar completion={item.metrics.completion} showPercentage />
          </td>

          {/* Engagement Column */}
          <td className="p-4">
            <ItemMetrics metrics={item.metrics} />
          </td>

          {/* Date Column */}
          <td className="p-4">
            <ItemDateInfo date={item.updatedAt} />
          </td>

          {/* Actions Column */}
          <td className="p-4">
            <button 
              onClick={(e) => {
                e.stopPropagation()
                onItemSelect(item)
              }}
              className="flex items-center justify-center w-8 h-8 rounded-lg hover:bg-accent transition-colors"
              title="View details"
            >
              <ExternalLink className="w-4 h-4" />
            </button>
          </td>
        </tr>
      )
    }
  src/features/dynamic-view/components/views/KanbanView.tsx: >-
    import { useState, useEffect, Fragment } from "react";

    import {
      GripVertical,
      Plus,
      Calendar,
      MessageSquare,
      Paperclip,
    } from "lucide-react";

    import type { DataItem } from "../types";

    import { Card, CardContent } from "@/components/ui/card";

    import { Badge } from "@/components/ui/badge";

    import { Avatar, AvatarFallback, AvatarImage } from
    "@/components/ui/avatar";

    import { cn, getPriorityColor } from "@/lib/utils";

    import { EmptyState } from "./EmptyState";

    import { useAppViewManager } from "@/hooks/useAppViewManager.hook";

    import { useDataDemoStore } from "../store/dataDemo.store";


    interface KanbanCardProps {
      item: DataItem;
      isDragging: boolean;
    }


    function KanbanCard({ item, isDragging, ...props }: KanbanCardProps &
    React.HTMLAttributes<HTMLDivElement>) {
      const { onItemSelect } = useAppViewManager();

      // Mock comment and attachment counts for UI purposes
      const comments = Math.floor(item.metrics.views / 10);
      const attachments = Math.floor(item.metrics.shares / 5);

      return (
        <Card
          {...props}
          data-draggable-id={item.id}
          onClick={() => onItemSelect(item)}
          className={cn(
            "cursor-pointer transition-all duration-300 border bg-card/60 dark:bg-neutral-800/60 backdrop-blur-sm hover:bg-card/70 dark:hover:bg-neutral-700/70 active:cursor-grabbing",
            isDragging && "opacity-50 ring-2 ring-primary ring-offset-2 ring-offset-background"
          )}
        >
          <CardContent className="p-5">
            <div className="space-y-4">
              <div className="flex items-start justify-between">
                <h4 className="font-semibold text-card-foreground dark:text-neutral-100 leading-tight">
                  {item.title}
                </h4>
                <GripVertical className="w-5 h-5 text-muted-foreground/60 dark:text-neutral-400 cursor-grab flex-shrink-0" />
              </div>

              <p className="text-sm text-muted-foreground dark:text-neutral-300 leading-relaxed line-clamp-2">
                {item.description}
              </p>

              <div className="flex flex-wrap gap-2">
                <Badge className={cn("text-xs border", getPriorityColor(item.priority))}>
                  {item.priority}
                </Badge>
                {item.tags.slice(0, 2).map((tag) => (
                  <Badge key={tag} variant="secondary" className="text-xs backdrop-blur-sm">
                    {tag}
                  </Badge>
                ))}
              </div>

              <div className="flex items-center justify-between pt-2 border-t border-border/30 dark:border-neutral-700/30">
                <div className="flex items-center gap-4 text-muted-foreground/80 dark:text-neutral-400">
                  {item.dueDate && (
                    <div className="flex items-center gap-1">
                      <Calendar className="w-4 h-4" />
                      <span className="text-xs font-medium">
                        {new Date(item.dueDate).toLocaleDateString("en-US", { month: "short", day: "numeric" })}
                      </span>
                    </div>
                  )}
                  <div className="flex items-center gap-1">
                    <MessageSquare className="w-4 h-4" />
                    <span className="text-xs font-medium">{comments}</span>
                  </div>
                  <div className="flex items-center gap-1">
                    <Paperclip className="w-4 h-4" />
                    <span className="text-xs font-medium">{attachments}</span>
                  </div>
                </div>

                <Avatar className="w-8 h-8 ring-2 ring-white/50 dark:ring-neutral-700/50">
                  <AvatarImage src={item.assignee.avatar} />
                  <AvatarFallback className="bg-muted dark:bg-neutral-700 text-foreground dark:text-neutral-200 font-medium">
                    {item.assignee.name.split(" ").map((n) => n[0]).join("")}
                  </AvatarFallback>
                </Avatar>
              </div>
            </div>
          </CardContent>
        </Card>
      );
    }


    interface DataKanbanViewProps {
      data: Record<string, DataItem[]>;
    }


    export function DataKanbanView({ data }: DataKanbanViewProps) {
      const [columns, setColumns] = useState(data);
      const [draggedItemId, setDraggedItemId] = useState<string | null>(null);
      const [dropIndicator, setDropIndicator] = useState<{ columnId: string; index: number } | null>(null);
      const { groupBy } = useAppViewManager();
      const updateItem = useDataDemoStore(s => s.updateItem);

      useEffect(() => {
        setColumns(data);
      }, [data]);

      const handleDragStart = (e: React.DragEvent<HTMLDivElement>, item: DataItem, sourceColumnId: string) => {
        e.dataTransfer.effectAllowed = 'move';
        e.dataTransfer.setData('text/plain', JSON.stringify({ itemId: item.id, sourceColumnId }));
        setDraggedItemId(item.id);
      };

      const getDropIndicatorIndex = (e: React.DragEvent, elements: HTMLElement[]) => {
        const mouseY = e.clientY;
        let closestIndex = elements.length;

        elements.forEach((el, index) => {
          const { top, height } = el.getBoundingClientRect();
          const offset = mouseY - (top + height / 2);
          if (offset < 0 && index < closestIndex) {
            closestIndex = index;
          }
        });
        return closestIndex;
      };

      const handleDragOverCardsContainer = (e: React.DragEvent<HTMLDivElement>, columnId: string) => {
        e.preventDefault();
        const container = e.currentTarget;
        const draggableElements = Array.from(container.querySelectorAll('[data-draggable-id]')) as HTMLElement[];
        const index = getDropIndicatorIndex(e, draggableElements);

        if (dropIndicator?.columnId === columnId && dropIndicator.index === index) return;
        setDropIndicator({ columnId, index });
      };

      const handleDrop = (e: React.DragEvent<HTMLDivElement>, targetColumnId: string) => {
        e.preventDefault();
        setDropIndicator(null);
        try {
          const { itemId, sourceColumnId } = JSON.parse(e.dataTransfer.getData('text/plain'));

          const droppedItem = columns[sourceColumnId]?.find(i => i.id === itemId);
          if (!droppedItem) return;

          // Update local state for immediate feedback
          setColumns(prev => {
            const newColumns = { ...prev };
            const sourceCol = prev[sourceColumnId].filter(i => i.id !== itemId);

            if (sourceColumnId === targetColumnId) {
              const dropIndex = dropIndicator?.columnId === targetColumnId ? dropIndicator.index : sourceCol.length;
              sourceCol.splice(dropIndex, 0, droppedItem);
              newColumns[sourceColumnId] = sourceCol;
            } else {
              const targetCol = [...prev[targetColumnId]];
              const dropIndex = dropIndicator?.columnId === targetColumnId ? dropIndicator.index : targetCol.length;
              targetCol.splice(dropIndex, 0, droppedItem);
              
              newColumns[sourceColumnId] = sourceCol;
              newColumns[targetColumnId] = targetCol;
            }
            return newColumns;
          });
          
          // Persist change to global store. The groupBy value tells us which property to update.
          if (groupBy !== 'none' && sourceColumnId !== targetColumnId) {
            updateItem(itemId, { [groupBy]: targetColumnId } as Partial<DataItem>);
          }

        } catch (err) {
          console.error("Failed to parse drag data", err)
        } finally {
          setDraggedItemId(null);
        }
      };

      const handleDragEnd = () => {
        setDraggedItemId(null);
        setDropIndicator(null);
      };

      const initialColumns = Object.entries(data);

      if (!initialColumns || initialColumns.length === 0) {
        return <EmptyState />;
      }

      const statusColors: Record<string, string> = {
        active: "bg-blue-500", pending: "bg-yellow-500", completed: "bg-green-500", archived: "bg-gray-500",
        low: "bg-green-500", medium: "bg-blue-500", high: "bg-orange-500", critical: "bg-red-500",
      };

      const DropIndicator = () => <div className="h-1 my-2 rounded-full bg-primary/60" />;

      return (
        <div className="flex items-start gap-6 pb-4 overflow-x-auto -mx-6 px-6">
          {Object.entries(columns).map(([columnId, items]) => (
            <div
              key={columnId}
              className={cn(
                "w-80 flex-shrink-0 bg-card/20 dark:bg-neutral-900/20 backdrop-blur-xl rounded-3xl p-5 border border-border dark:border-neutral-700/50 transition-all duration-300",
                dropIndicator?.columnId === columnId && "bg-primary/10 border-primary/30"
              )}
            >
              <div className="flex items-center justify-between mb-6">
                <div className="flex items-center gap-3">
                  <div className={cn("w-3.5 h-3.5 rounded-full", statusColors[columnId] || "bg-muted-foreground")} />
                  <h3 className="font-semibold text-card-foreground dark:text-neutral-100 capitalize">{columnId}</h3>
                  <Badge variant="secondary" className="backdrop-blur-sm">{items.length}</Badge>
                </div>
                <button className="p-1 rounded-full bg-card/30 dark:bg-neutral-800/30 hover:bg-card/50 dark:hover:bg-neutral-700/50 transition-colors">
                  <Plus className="w-4 h-4 text-muted-foreground dark:text-neutral-300" />
                </button>
              </div>

              <div
                onDragOver={(e) => handleDragOverCardsContainer(e, columnId)}
                onDrop={(e) => handleDrop(e, columnId)}
                onDragLeave={() => setDropIndicator(null)}
                className="space-y-4 min-h-[100px]"
              >
                {items.map((item, index) => (
                  <Fragment key={item.id}>
                    {dropIndicator?.columnId === columnId && dropIndicator.index === index && (
                      <DropIndicator />
                    )}
                    <KanbanCard
                      item={item}
                      isDragging={draggedItemId === item.id}
                      draggable
                      onDragStart={(e) => handleDragStart(e, item, columnId)}
                      onDragEnd={handleDragEnd}
                    />
                  </Fragment>
                ))}
                {dropIndicator?.columnId === columnId && dropIndicator.index === items.length && (
                  <DropIndicator />
                )}
              </div>
            </div>
          ))}
        </div>
      );
    }
  src/pages/DataDemo/types.ts: >-
    // Re-exporting from the new centralized dynamic view types

    export type { ViewMode, GenericItem as DataItem } from
    '@/features/dynamic-view/types';


    // --- LEGACY TYPES (to be phased out) ---

    // These are kept temporarily to avoid breaking everything at once.

    // As components are refactored, they will stop using these.


    export type GroupableField = 'status' | 'priority' | 'category'


    export type CalendarDateProp = 'dueDate' | 'createdAt' | 'updatedAt';

    export type CalendarDisplayProp = 'priority' | 'assignee' | 'tags';

    export type CalendarColorProp = 'none' | 'priority' | 'status' | 'category';


    export type SortableField = 'title' | 'status' | 'priority' | 'updatedAt' |
    'assignee.name' | 'metrics.views' | 'metrics.completion' | 'createdAt'

    export type SortDirection = 'asc' | 'desc'

    export interface SortConfig {
      key: SortableField
      direction: SortDirection
    }


    export type Status = 'active' | 'pending' | 'completed' | 'archived';

    export type Priority = 'low' | 'medium' | 'high' | 'critical';


    export interface FilterConfig {
      searchTerm: string
      status: Status[]
      priority: Priority[]
    }
  src/features/dynamic-view/components/views/CardView.tsx: >-
    import { useRef } from 'react'

    import { cn } from '@/lib/utils'

    import { Badge } from '@/components/ui/badge'

    import { ArrowUpRight } from 'lucide-react'

    import type { DataItem } from '../types'

    import { useStaggeredAnimation } from
    '@/hooks/useStaggeredAnimation.motion.hook'

    import { EmptyState } from './EmptyState'

    import { useAppViewManager } from '@/hooks/useAppViewManager.hook'

    import {
      useSelectedItem,
    } from '../store/dataDemo.store'

    import {
      AssigneeInfo,
      ItemMetrics,
      ItemProgressBar,
      ItemStatusBadge,
      ItemTags,
      ItemDateInfo,
    } from './shared/DataItemParts'

    import { AddDataItemCta } from './shared/AddDataItemCta'


    export function DataCardView({ data, isGrid = false }: { data: DataItem[];
    isGrid?: boolean }) {
      const { onItemSelect, itemId } = useAppViewManager();
      const selectedItem = useSelectedItem(itemId);

      const containerRef = useRef<HTMLDivElement>(null)
      useStaggeredAnimation(containerRef, [data], { mode: 'incremental', y: 40 });

      const items = Array.isArray(data) ? data : [];
      if (items.length === 0) {
        return <EmptyState />
      }

      return (
        <div 
          ref={containerRef}
          className={cn(
            "gap-6",
            isGrid
              ? "grid grid-cols-[repeat(auto-fill,minmax(280px,1fr))]"
              : "grid grid-cols-[repeat(auto-fill,minmax(320px,1fr))]",
            "pb-4"
          )}
        >
          {items.map((item: DataItem) => {
            const isSelected = selectedItem?.id === item.id
            
            return (
              <div
                key={item.id}
                onClick={() => onItemSelect(item)}
                className={cn(
                  "group relative overflow-hidden rounded-3xl border bg-card/50 backdrop-blur-sm transition-all duration-500 cursor-pointer",
                  "hover:bg-card/80 hover:shadow-xl hover:shadow-primary/10 hover:border-primary/30 hover:-translate-y-2",
                  "active:scale-[0.98]",
                  isSelected && "ring-2 ring-primary/30 border-primary/40 bg-card/90 shadow-lg shadow-primary/20",
                )}
              >
                {/* Card Header with Thumbnail */}
                <div className="relative p-6 pb-4">
                  <div className="flex items-start justify-between mb-4">
                    <div className="w-16 h-16 bg-gradient-to-br from-primary/20 to-primary/10 rounded-2xl flex items-center justify-center text-3xl group-hover:scale-110 transition-transform duration-300">
                      {item.thumbnail}
                    </div>
                    <ArrowUpRight className="w-5 h-5 text-muted-foreground group-hover:text-primary group-hover:translate-x-1 group-hover:-translate-y-1 transition-all duration-300" />
                  </div>

                  {/* Priority indicator */}
                  <div className="absolute top-4 right-4">
                    <div className={cn(
                      "w-3 h-3 rounded-full",
                      item.priority === 'critical' && "bg-red-500",
                      item.priority === 'high' && "bg-orange-500",
                      item.priority === 'medium' && "bg-blue-500",
                      item.priority === 'low' && "bg-green-500"
                    )} />
                  </div>
                </div>

                {/* Card Content */}
                <div className="px-6 pb-6">
                  {/* Title and Description */}
                  <h3 className="font-semibold text-lg mb-2 group-hover:text-primary transition-colors line-clamp-2">
                    {item.title}
                  </h3>
                  <p className="text-muted-foreground text-sm mb-4 line-clamp-3">
                    {item.description}
                  </p>

                  {/* Status and Category */}
                  <div className="flex items-center gap-2 mb-4">
                    <ItemStatusBadge status={item.status} />
                    <Badge variant="outline" className="bg-accent/50 text-xs">
                      {item.category}
                    </Badge>
                  </div>

                  {/* Tags */}
                  <div className="mb-4"><ItemTags tags={item.tags} /></div>

                  {/* Progress */}
                  <div className="mb-4"><ItemProgressBar completion={item.metrics.completion} /></div>

                  {/* Assignee */}
                  <div className="mb-4"><AssigneeInfo assignee={item.assignee} /></div>

                  {/* Metrics */}
                  <div className="flex items-center justify-between text-xs text-muted-foreground">
                    <ItemMetrics metrics={item.metrics} />
                    <ItemDateInfo date={item.updatedAt} />
                  </div>
                </div>

                {/* Hover gradient overlay */}
                <div className="absolute inset-0 bg-gradient-to-br from-primary/5 via-transparent to-primary/5 opacity-0 group-hover:opacity-100 transition-opacity duration-500 pointer-events-none" />
                
                {/* Selection indicator */}
                {isSelected && (
                  <div className="absolute inset-0 bg-gradient-to-br from-primary/10 to-primary/5 pointer-events-none" />
                )}
              </div>
            )
          })}
          <AddDataItemCta viewMode={isGrid ? 'grid' : 'cards'} />
        </div>
      )
    }
approved: true
linesAdded: null
linesRemoved: null
linesDifference: null
gitCommittedAt: null
status: committed
id: 495
