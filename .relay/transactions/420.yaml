uuid: b0d48098-b805-4c07-b648-43d9692dd583
projectId: jeli-app-shell
createdAt: '2025-10-17T12:42:06.378Z'
gitCommitMsg: >-
  feat(messaging): replace activity list with timeline component

  Refactored the `ActivityPanel` to use a new, reusable `Timeline` component,
  enhancing the visual presentation of contact activity.

  - Added `@radix-ui/react-scroll-area` as a dependency. - Created new reusable
  `ScrollArea` and `Timeline` UI components. - Replaced the basic list in
  `ActivityPanel` with the `Timeline`. - Added data transformation logic to sort
  activities and map them to timeline items. - Included a user-friendly empty
  state for contacts with no activity.
promptSummary: >-
  I've upgraded the messaging page's activity panel to use a new, more visually
  appealing timeline component.
reasoning:
  - Here is the step-by-step implementation to upgrade the activity panel UI.
  - >-
    First, I'll add the necessary Radix UI dependency for the new scroll area
    component, which is a prerequisite for our horizontal timeline feature.
  - >-
    Next, I'll create the new `ScrollArea` component. This is a standard,
    reusable UI primitive that the `Timeline` component will use for its
    horizontal layout.
  - >-
    Now, I'll add the powerful new `Timeline` component. This file contains the
    complete implementation for rendering timelines with various styles,
    orientations, and custom content.
  - >-
    Finally, I'll refactor the `ActivityPanel` to use the new `Timeline`
    component. This involves transforming the activity data into the format
    required by the timeline, sorting it, and handling the empty state
    gracefully.
operations:
  - type: write
    path: package.json
    content: |
      <<<<<<< SEARCH
          "@radix-ui/react-popover": "^1.0.7",
          "@radix-ui/react-slot": "^1.0.2",
          "@radix-ui/react-tabs": "^1.0.4",
      =======
          "@radix-ui/react-popover": "^1.0.7",
          "@radix-ui/react-scroll-area": "^1.0.5",
          "@radix-ui/react-slot": "^1.0.2",
          "@radix-ui/react-tabs": "^1.0.4",
      >>>>>>> REPLACE
    patchStrategy: search-replace
  - type: write
    path: src/components/ui/scroll-area.tsx
    content: >-
      "use client"


      import * as React from "react"

      import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"


      import { cn } from "@/lib/utils"


      const ScrollArea = React.forwardRef<
        React.ElementRef<typeof ScrollAreaPrimitive.Root>,
        React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
      >(({ className, children, ...props }, ref) => (
        <ScrollAreaPrimitive.Root
          ref={ref}
          className={cn("relative overflow-hidden", className)}
          {...props}
        >
          <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
            {children}
          </ScrollAreaPrimitive.Viewport>
          <ScrollBar />
          <ScrollAreaPrimitive.Corner />
        </ScrollAreaPrimitive.Root>
      ))

      ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName


      const ScrollBar = React.forwardRef<
        React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
        React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
      >(({ className, orientation = "vertical", ...props }, ref) => (
        <ScrollAreaPrimitive.ScrollAreaScrollbar
          ref={ref}
          orientation={orientation}
          className={cn(
            "flex touch-none select-none transition-colors",
            orientation === "vertical" &&
              "h-full w-2.5 border-l border-l-transparent p-[1px]",
            orientation === "horizontal" &&
              "h-2.5 flex-col border-t border-t-transparent p-[1px]",
            className
          )}
          {...props}
        >
          <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
        </ScrollAreaPrimitive.ScrollAreaScrollbar>
      ))

      ScrollBar.displayName =
      ScrollAreaPrimitive.ScrollAreaScrollbar.displayName


      export { ScrollArea, ScrollBar }
    patchStrategy: replace
  - type: write
    path: src/components/ui/timeline.tsx
    content: >-
      "use client";


      import * as React from "react";

      import { cva, type VariantProps } from "class-variance-authority";

      import { cn } from "@/lib/utils";

      import { ScrollArea } from "@/components/ui/scroll-area";

      import {
        Check,
        Clock,
        AlertCircle,
        X,
        Calendar,
        User,
        MapPin,
        MessageSquare,
        Award,
        Briefcase,
        GraduationCap,
        Heart,
      } from "lucide-react";


      const timelineVariants = cva("relative flex flex-col", {
        variants: {
          variant: {
            default: "gap-4",
            compact: "gap-2",
            spacious: "gap-8",
          },
          orientation: {
            vertical: "flex-col",
            horizontal: "flex-row",
          },
        },
        defaultVariants: {
          variant: "default",
          orientation: "vertical",
        },
      });


      const timelineItemVariants = cva("relative flex gap-3 pb-2", {
        variants: {
          orientation: {
            vertical: "flex-row",
            horizontal: "flex-col min-w-64 shrink-0",
          },
        },
        defaultVariants: {
          orientation: "vertical",
        },
      });


      const timelineConnectorVariants = cva("bg-border", {
        variants: {
          orientation: {
            vertical: "absolute left-3 top-9 h-full w-px",
            horizontal: "absolute top-3 left-8 w-full h-px",
          },
          status: {
            default: "bg-border",
            completed: "bg-primary",
            active: "bg-primary",
            pending: "bg-muted-foreground/30",
            error: "bg-destructive",
          },
        },
        defaultVariants: {
          orientation: "vertical",
          status: "default",
        },
      });


      const timelineIconVariants = cva(
        "flex h-6 w-6 shrink-0 items-center justify-center rounded-full border-2 bg-background text-xs font-medium",
        {
          variants: {
            status: {
              default: "border-border text-muted-foreground",
              completed: "border-primary bg-primary text-primary-foreground",
              active: "border-primary bg-background text-primary animate-pulse",
              pending: "border-muted-foreground/30 text-muted-foreground",
              error: "border-destructive bg-destructive text-destructive-foreground",
            },
          },
          defaultVariants: {
            status: "default",
          },
        },
      );


      export interface TimelineItem {
        id: string;
        title: string;
        description?: string;
        timestamp?: string | Date;
        status?: "default" | "completed" | "active" | "pending" | "error";
        icon?: React.ReactNode;
        content?: React.ReactNode;
        metadata?: Record<string, any>;
      }


      export interface TimelineProps extends VariantProps<typeof
      timelineVariants> {
        items: TimelineItem[];
        className?: string;
        showConnectors?: boolean;
        showTimestamps?: boolean;
        timestampPosition?: "top" | "bottom" | "inline";
      }


      function getStatusIcon(status: TimelineItem["status"]) {
        switch (status) {
          case "completed":
            return <Check className="h-3 w-3" />;
          case "active":
            return <Clock className="h-3 w-3" />;
          case "pending":
            return <Clock className="h-3 w-3" />;
          case "error":
            return <X className="h-3 w-3" />;
          default:
            return <div className="h-2 w-2 rounded-full bg-current" />;
        }
      }


      function formatTimestamp(timestamp: string | Date): string {
        if (!timestamp) return "";
        const date = typeof timestamp === "string" ? new Date(timestamp) : timestamp;
        return date.toLocaleDateString("en-US", {
          month: "short",
          day: "numeric",
          year: "numeric",
          hour: "2-digit",
          minute: "2-digit",
        });
      }


      export function Timeline({
        items,
        className,
        variant,
        orientation = "vertical",
        showConnectors = true,
        showTimestamps = true,
        timestampPosition = "top",
        ...props
      }: TimelineProps) {
        const timelineContent = (
          <div
            className={cn(
              timelineVariants({ variant, orientation }),
              orientation === "horizontal" ? "pb-4" : "",
            )}
          >
            {items.map((item, index) => (
              <div
                key={item.id}
                className={cn(timelineItemVariants({ orientation }))}
              >
                {/* Connector Line */}
                {showConnectors && index < items.length - 1 && (
                  <div
                    className={cn(
                      timelineConnectorVariants({
                        orientation,
                        status: item.status,
                      }),
                    )}
                  />
                )}

                {/* Icon */}
                <div className="relative z-10 flex shrink-0">
                  <div className={cn(timelineIconVariants({ status: item.status }))}>
                    {item.icon || getStatusIcon(item.status)}
                  </div>
                </div>

                {/* Content */}
                <div className="flex min-w-0 flex-1 flex-col gap-2">
                  {/* Timestamp - Top */}
                  {showTimestamps &&
                    timestampPosition === "top" &&
                    item.timestamp && (
                      <time className="text-xs text-muted-foreground">
                        {formatTimestamp(item.timestamp)}
                      </time>
                    )}

                  {/* Title and Inline Timestamp */}
                  <div className="flex items-start justify-between gap-2">
                    <h3 className="font-medium leading-tight">{item.title}</h3>
                    {showTimestamps &&
                      timestampPosition === "inline" &&
                      item.timestamp && (
                        <time className="shrink-0 text-xs text-muted-foreground">
                          {formatTimestamp(item.timestamp)}
                        </time>
                      )}
                  </div>

                  {/* Description */}
                  {item.description && (
                    <p className="text-sm text-muted-foreground leading-relaxed">
                      {item.description}
                    </p>
                  )}

                  {/* Custom Content */}
                  {item.content && <div className="mt-3">{item.content}</div>}

                  {/* Timestamp - Bottom */}
                  {showTimestamps &&
                    timestampPosition === "bottom" &&
                    item.timestamp && (
                      <time className="text-xs text-muted-foreground">
                        {formatTimestamp(item.timestamp)}
                      </time>
                    )}
                </div>
              </div>
            ))}
          </div>
        );

        if (orientation === "horizontal") {
          return (
            <ScrollArea
              orientation="horizontal"
              className={cn("w-full", className)}
              {...props}
            >
              {timelineContent}
            </ScrollArea>
          );
        }

        return (
          <div className={className} {...props}>
            {timelineContent}
          </div>
        );
      }


      // Example Components for Documentation

      export function BasicTimelineExample() {
        const items: TimelineItem[] = [
          {
            id: "1",
            title: "Project Started",
            description: "Initial project setup and planning phase",
            timestamp: new Date("2024-01-15T09:00:00"),
            status: "completed",
          },
          {
            id: "2",
            title: "Development Phase",
            description: "Core features implementation in progress",
            timestamp: new Date("2024-02-01T10:30:00"),
            status: "active",
          },
          {
            id: "3",
            title: "Testing & QA",
            description: "Quality assurance and testing phase",
            timestamp: new Date("2024-02-15T14:00:00"),
            status: "pending",
          },
          {
            id: "4",
            title: "Launch",
            description: "Production deployment and launch",
            timestamp: new Date("2024-03-01T16:00:00"),
            status: "pending",
          },
        ];

        return <Timeline items={items} />;
      }


      export function TimelineVariantsExample() {
        const items: TimelineItem[] = [
          {
            id: "1",
            title: "Task Completed",
            description: "Successfully finished the assigned task",
            status: "completed",
          },
          {
            id: "2",
            title: "In Progress",
            description: "Currently working on this item",
            status: "active",
          },
          {
            id: "3",
            title: "Upcoming",
            description: "Scheduled for later",
            status: "pending",
          },
        ];

        return (
          <div className="space-y-8">
            <div>
              <h3 className="mb-4 text-sm font-medium">Default</h3>
              <Timeline items={items} variant="default" />
            </div>
            <div>
              <h3 className="mb-4 text-sm font-medium">Compact</h3>
              <Timeline items={items} variant="compact" />
            </div>
            <div>
              <h3 className="mb-4 text-sm font-medium">Spacious</h3>
              <Timeline items={items} variant="spacious" />
            </div>
          </div>
        );
      }


      export function HorizontalTimelineExample() {
        const items: TimelineItem[] = [
          {
            id: "1",
            title: "Planning",
            description: "Project planning and research",
            status: "completed",
          },
          {
            id: "2",
            title: "Design",
            description: "UI/UX design phase",
            status: "completed",
          },
          {
            id: "3",
            title: "Development",
            description: "Core development work",
            status: "active",
          },
          {
            id: "4",
            title: "Testing",
            description: "Quality assurance",
            status: "pending",
          },
          {
            id: "5",
            title: "Launch",
            description: "Production release",
            status: "pending",
          },
        ];

        return <Timeline items={items} orientation="horizontal" />;
      }


      export function TimelineWithCustomIconsExample() {
        const items: TimelineItem[] = [
          {
            id: "1",
            title: "Account Created",
            description: "Welcome to our platform!",
            timestamp: new Date("2024-01-01T08:00:00"),
            status: "completed",
            icon: <User className="h-3 w-3" />,
          },
          {
            id: "2",
            title: "Profile Updated",
            description: "Personal information has been updated",
            timestamp: new Date("2024-01-02T14:30:00"),
            status: "completed",
            icon: <User className="h-3 w-3" />,
          },
          {
            id: "3",
            title: "First Order Placed",
            description: "Order #12345 has been placed successfully",
            timestamp: new Date("2024-01-03T11:15:00"),
            status: "completed",
            icon: <Briefcase className="h-3 w-3" />,
          },
          {
            id: "4",
            title: "Delivery Scheduled",
            description: "Your order is out for delivery",
            timestamp: new Date("2024-01-04T09:45:00"),
            status: "active",
            icon: <MapPin className="h-3 w-3" />,
          },
        ];

        return <Timeline items={items} />;
      }


      export function TimelineWithContentExample() {
        const items: TimelineItem[] = [
          {
            id: "1",
            title: "Code Review Completed",
            description: "Pull request #123 has been reviewed",
            timestamp: new Date("2024-01-01T10:00:00"),
            status: "completed",
            content: (
              <div className="rounded-md bg-muted p-3 text-sm">
                <p className="font-medium">Changes approved by John Doe</p>
                <p className="text-muted-foreground">
                  3 files changed, +45 -12 lines
                </p>
              </div>
            ),
          },
          {
            id: "2",
            title: "Build Failed",
            description: "CI/CD pipeline encountered errors",
            timestamp: new Date("2024-01-01T11:30:00"),
            status: "error",
            content: (
              <div className="rounded-md bg-destructive/10 p-3 text-sm">
                <p className="font-medium text-destructive">Build #456 failed</p>
                <p className="text-muted-foreground">Syntax error in main.tsx:45</p>
              </div>
            ),
          },
          {
            id: "3",
            title: "Issue Assigned",
            description: "Bug report assigned to development team",
            timestamp: new Date("2024-01-01T15:20:00"),
            status: "active",
            content: (
              <div className="rounded-md bg-primary/10 p-3 text-sm">
                <p className="font-medium">Issue #789: Login form validation</p>
                <p className="text-muted-foreground">
                  Priority: High | Assigned to: Jane Smith
                </p>
              </div>
            ),
          },
        ];

        return <Timeline items={items} />;
      }


      export function ProjectTimelineExample() {
        const items: TimelineItem[] = [
          {
            id: "1",
            title: "Project Kickoff",
            description: "Initial meeting with stakeholders and team members",
            timestamp: new Date("2024-01-15T09:00:00"),
            status: "completed",
            icon: <Briefcase className="h-3 w-3" />,
            content: (
              <div className="space-y-2">
                <div className="flex gap-2 text-sm">
                  <span className="font-medium">Attendees:</span>
                  <span className="text-muted-foreground">5 team members</span>
                </div>
                <div className="flex gap-2 text-sm">
                  <span className="font-medium">Duration:</span>
                  <span className="text-muted-foreground">2 hours</span>
                </div>
              </div>
            ),
          },
          {
            id: "2",
            title: "Requirements Gathering",
            description:
              "Detailed analysis of project requirements and specifications",
            timestamp: new Date("2024-01-20T14:00:00"),
            status: "completed",
            icon: <MessageSquare className="h-3 w-3" />,
          },
          {
            id: "3",
            title: "Design Phase",
            description: "UI/UX design and wireframe creation",
            timestamp: new Date("2024-02-01T10:00:00"),
            status: "active",
            icon: <Award className="h-3 w-3" />,
            content: (
              <div className="rounded-md border border-primary/20 bg-primary/5 p-3 text-sm">
                <p className="font-medium">Current Progress: 60%</p>
                <p className="text-muted-foreground">
                  Expected completion: Feb 10, 2024
                </p>
              </div>
            ),
          },
          {
            id: "4",
            title: "Development Sprint 1",
            description: "Core functionality implementation",
            timestamp: new Date("2024-02-15T09:00:00"),
            status: "pending",
            icon: <GraduationCap className="h-3 w-3" />,
          },
          {
            id: "5",
            title: "Testing & QA",
            description: "Quality assurance and bug fixes",
            timestamp: new Date("2024-03-01T09:00:00"),
            status: "pending",
            icon: <AlertCircle className="h-3 w-3" />,
          },
        ];

        return <Timeline items={items} variant="spacious" />;
      }


      export function OrderTrackingTimelineExample() {
        const items: TimelineItem[] = [
          {
            id: "1",
            title: "Order Placed",
            description: "Your order has been successfully placed",
            timestamp: new Date("2024-01-01T10:30:00"),
            status: "completed",
            icon: <Check className="h-3 w-3" />,
          },
          {
            id: "2",
            title: "Payment Confirmed",
            description: "Payment has been processed successfully",
            timestamp: new Date("2024-01-01T10:35:00"),
            status: "completed",
            icon: <Check className="h-3 w-3" />,
          },
          {
            id: "3",
            title: "Order Processing",
            description: "Your order is being prepared for shipment",
            timestamp: new Date("2024-01-01T14:20:00"),
            status: "active",
            icon: <Clock className="h-3 w-3" />,
          },
          {
            id: "4",
            title: "Shipped",
            description: "Your order has been shipped",
            status: "pending",
            icon: <MapPin className="h-3 w-3" />,
          },
          {
            id: "5",
            title: "Delivered",
            description: "Package delivered to your address",
            status: "pending",
            icon: <Heart className="h-3 w-3" />,
          },
        ];

        return <Timeline items={items} timestampPosition="inline" />;
      }


      export function CompactTimelineExample() {
        const items: TimelineItem[] = [
          {
            id: "1",
            title: "Login",
            timestamp: new Date("2024-01-01T08:30:00"),
            status: "completed",
          },
          {
            id: "2",
            title: "File uploaded",
            timestamp: new Date("2024-01-01T08:35:00"),
            status: "completed",
          },
          {
            id: "3",
            title: "Processing started",
            timestamp: new Date("2024-01-01T08:40:00"),
            status: "active",
          },
          {
            id: "4",
            title: "Processing complete",
            status: "pending",
          },
        ];

        return (
          <Timeline
            items={items}
            variant="compact"
            timestampPosition="inline"
            showTimestamps={true}
          />
        );
      }


      export function ExtendedHorizontalTimelineExample() {
        const items: TimelineItem[] = [
          {
            id: "1",
            title: "Research",
            description: "Market research and analysis",
            timestamp: new Date("2024-01-01T09:00:00"),
            status: "completed",
            icon: <MessageSquare className="h-3 w-3" />,
          },
          {
            id: "2",
            title: "Planning",
            description: "Project planning and roadmap",
            timestamp: new Date("2024-01-05T10:00:00"),
            status: "completed",
            icon: <Calendar className="h-3 w-3" />,
          },
          {
            id: "3",
            title: "Design",
            description: "UI/UX design and wireframes",
            timestamp: new Date("2024-01-10T11:00:00"),
            status: "completed",
            icon: <Award className="h-3 w-3" />,
          },
          {
            id: "4",
            title: "Prototype",
            description: "Interactive prototype development",
            timestamp: new Date("2024-01-15T14:00:00"),
            status: "completed",
            icon: <Briefcase className="h-3 w-3" />,
          },
          {
            id: "5",
            title: "Development",
            description: "Core feature implementation",
            timestamp: new Date("2024-01-20T09:00:00"),
            status: "active",
            icon: <GraduationCap className="h-3 w-3" />,
          },
          {
            id: "6",
            title: "Testing",
            description: "Quality assurance and testing",
            timestamp: new Date("2024-02-01T10:00:00"),
            status: "pending",
            icon: <AlertCircle className="h-3 w-3" />,
          },
          {
            id: "7",
            title: "Review",
            description: "Stakeholder review and feedback",
            timestamp: new Date("2024-02-05T15:00:00"),
            status: "pending",
            icon: <User className="h-3 w-3" />,
          },
          {
            id: "8",
            title: "Deploy",
            description: "Production deployment",
            timestamp: new Date("2024-02-10T16:00:00"),
            status: "pending",
            icon: <MapPin className="h-3 w-3" />,
          },
          {
            id: "9",
            title: "Launch",
            description: "Product launch and marketing",
            timestamp: new Date("2024-02-15T09:00:00"),
            status: "pending",
            icon: <Heart className="h-3 w-3" />,
          },
        ];

        return <Timeline items={items} orientation="horizontal" variant="spacious" />;
      }


      export {
        timelineVariants,
        timelineItemVariants,
        timelineConnectorVariants,
        timelineIconVariants,
      };
    patchStrategy: replace
  - type: write
    path: src/pages/Messaging/components/ActivityPanel.tsx
    content: >-
      import React, { useMemo } from 'react';

      import { Mail, StickyNote, PhoneCall, Calendar } from 'lucide-react';

      import type { Contact, ActivityEventType } from '../types';

      import { Timeline, type TimelineItem } from '@/components/ui/timeline';

      import { capitalize } from '@/lib/utils';


      const iconMap: Record<ActivityEventType, React.ReactNode> = {
        note: <StickyNote className="w-3 h-3" />,
        call: <PhoneCall className="w-3 h-3" />,
        email: <Mail className="w-3 h-3" />,
        meeting: <Calendar className="w-3 h-3" />,
      };


      interface ActivityPanelProps {
        contact: Contact;
      }


      export const ActivityPanel: React.FC<ActivityPanelProps> = ({ contact })
      => {
        const timelineItems = useMemo<TimelineItem[]>(() => {
          if (!contact.activity || contact.activity.length === 0) {
            return [];
          }

          return [...contact.activity]
            .sort((a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime())
            .map(item => ({
              id: item.id,
              title: capitalize(item.type),
              description: item.content,
              timestamp: item.timestamp,
              icon: iconMap[item.type],
              status: 'default',
            }));
        }, [contact.activity]);

        if (timelineItems.length === 0) {
          return (
              <div className="flex flex-col items-center justify-center h-full text-center">
                  <StickyNote className="w-10 h-10 text-muted-foreground/50" />
                  <h3 className="mt-4 text-sm font-medium">No Activity Yet</h3>
                  <p className="mt-1 text-xs text-muted-foreground">
                      Notes, calls, and emails will appear here.
                  </p>
              </div>
          )
        }

        return (
          <Timeline 
            items={timelineItems} 
            variant="compact"
            timestampPosition="inline"
          />
        )
      }
    patchStrategy: replace
snapshot:
  src/components/ui/scroll-area.tsx: null
  src/components/ui/timeline.tsx: null
  package.json: |
    {
      "name": "jeli-app-shell",
      "private": false,
      "version": "1.0.1",
      "type": "module",
      "files": [
        "dist"
      ],
      "main": "./dist/jeli-app-shell.umd.js",
      "module": "./dist/jeli-app-shell.es.js",
      "types": "./dist/index.d.ts",
      "exports": {
        ".": {
          "import": "./dist/jeli-app-shell.es.js",
          "require": "./dist/jeli-app-shell.umd.js"
        },
        "./dist/style.css": "./dist/style.css"
      },
      "sideEffects": [
        "**/*.css"
      ],
      "scripts": {
        "dev": "vite",
        "build": "tsc && vite build",
        "lint": "eslint . --ext ts,tsx --report-unused-disable-directives --max-warnings 0",
        "preview": "vite preview"
      },
      "peerDependencies": {
        "@iconify/react": "^4.1.1",
        "@radix-ui/react-avatar": "^1.0.4",
        "@radix-ui/react-dialog": "^1.0.5",
        "@radix-ui/react-dropdown-menu": "^2.0.6",
        "@radix-ui/react-label": "^2.1.7",
        "@radix-ui/react-popover": "^1.0.7",
        "@radix-ui/react-slot": "^1.0.2",
        "@radix-ui/react-tabs": "^1.0.4",
        "class-variance-authority": "^0.7.0",
        "clsx": "^2.0.0",
        "cmdk": "^0.2.0",
        "date-fns": "^3.6.0",
        "gsap": "^3.13.0",
        "lucide-react": "^0.294.0",
        "react": "^18.2.0",
        "react-dom": "^18.2.0",
        "react-router-dom": "^6.22.3",
        "sonner": "^1.2.4",
        "tailwind-merge": "^2.0.0",
        "tailwindcss": "^3.3.5",
        "zustand": "^4.5.7"
      },
      "devDependencies": {
        "@types/node": "^20.10.0",
        "@types/react": "^18.2.37",
        "@types/react-dom": "^18.2.15",
        "@typescript-eslint/eslint-plugin": "^6.10.0",
        "@typescript-eslint/parser": "^6.10.0",
        "@vitejs/plugin-react": "^4.1.1",
        "autoprefixer": "^10.4.16",
        "eslint": "^8.53.0",
        "eslint-plugin-react-hooks": "^4.6.0",
        "eslint-plugin-react-refresh": "^0.4.4",
        "postcss": "^8.4.31",
        "tailwindcss": "^3.3.5",
        "tailwindcss-animate": "^1.0.7",
        "typescript": "^5.2.2",
        "vite": "^4.5.0"
      },
      "dependencies": {
        "@faker-js/faker": "^10.1.0",
        "@radix-ui/react-checkbox": "^1.3.3",
        "@radix-ui/react-tooltip": "^1.2.8"
      }
    }
  src/pages/Messaging/components/ActivityPanel.tsx: >-
    import React from 'react';

    import { format } from 'date-fns';

    import { Mail, StickyNote, PhoneCall, Calendar } from 'lucide-react';

    import type { Contact, ActivityEvent, ActivityEventType } from '../types';


    const activityIcons: Record<ActivityEventType, React.ElementType> = {
        note: StickyNote,
        call: PhoneCall,
        email: Mail,
        meeting: Calendar,
    };


    const ActivityItem = ({ item }: { item: ActivityEvent }) => {
        const Icon = activityIcons[item.type];
        return (
          <div className="flex items-start gap-4">
            <div className="mt-1.5 h-8 flex items-center justify-center">
                <div className="h-full w-0.5 bg-border"></div>
                <div className="absolute p-1.5 bg-background border rounded-full">
                    <Icon className="w-3.5 h-3.5 text-muted-foreground" />
                </div>
            </div>
            <div className="flex-1 text-sm pt-1.5 pb-5"><p>{item.content}</p><p className="text-xs text-muted-foreground mt-1">{format(new Date(item.timestamp), "MMM d, yyyy 'at' h:mm a")}</p></div>
          </div>
        )
    };


    interface ActivityPanelProps {
      contact: Contact;
    }


    export const ActivityPanel: React.FC<ActivityPanelProps> = ({ contact }) =>
    {
        return (
            <div className="relative">
                {contact.activity.map(item => <ActivityItem key={item.id} item={item} />)}
            </div>
        )
    }
approved: true
linesAdded: null
linesRemoved: null
linesDifference: null
gitCommittedAt: '2025-10-17T12:43:07.814Z'
status: committed
id: 420
