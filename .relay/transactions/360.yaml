uuid: 13b784a0-e229-4505-8205-d85c490ef4a3
projectId: jeli-app-shell
createdAt: '2025-10-16T13:20:05.949Z'
gitCommitMsg: >-
  refactor(TopBar): Decouple TopBar from page-specific logic

  Refactored the TopBar component into a pure presentational component by
  removing all page-specific control logic. Introduced `breadcrumbs` and
  `pageControls` props to allow for explicit content injection.

  Centralized the logic for rendering page-specific top bar controls within
  `App.tsx` by creating a new `TopBarPageControls` component. This component now
  handles the conditional rendering of controls for the Dashboard and Data Demo
  pages. Renamed `AppTopBar` to `AppBreadcrumbs` for clarity.

  This change improves separation of concerns, making the `TopBar` component
  reusable and the application's view logic easier to manage and locate.
promptSummary: >-
  I'm refactoring the TopBar component to be a dumb presentational component and
  moving the page-specific control logic into App.tsx.
reasoning:
  - >-
    Here is the plan to refactor the `TopBar` component. I will make it a pure,
    presentational component by removing page-specific logic and introducing
    props for content injection. The control logic will be centralized in
    `App.tsx` for better separation of concerns.
  - '### Part 1: Make `TopBar` a Dumb Component'
  - >-
    First, I'll modify `TopBar.tsx` to accept `breadcrumbs` and `pageControls`
    as props instead of a generic `children`. This makes its API explicit and
    removes any decision-making logic from the component itself, turning it into
    a simple layout container.
  - '### Part 2: Centralize Control Logic in `App.tsx`'
  - >-
    Next, I'll move the responsibility for providing page-specific controls to
    `App.tsx`. I will rename the existing `AppTopBar` to `AppBreadcrumbs` and
    create a new component, `TopBarPageControls`, to house the conditional logic
    that determines which controls to show for the active page. This new
    component will provide functional controls for the "Data Demo" page and the
    "Dashboard". Finally, I'll wire everything together in the `ComposedApp`
    component, passing the breadcrumbs and page controls to the newly refactored
    `TopBar`.
  - '---'
operations:
  - type: write
    path: src/components/layout/TopBar.tsx
    content: |+
      --- src/components/layout/TopBar.tsx
      +++ src/components/layout/TopBar.tsx
      @@ -15,16 +15,16 @@
       import { useAppShellStore } from '@/store/appShell.store'
       
       interface TopBarProps {
      -  children?: React.ReactNode
      +  breadcrumbs?: React.ReactNode
      +  pageControls?: React.ReactNode
       }
       
       export const TopBar = React.memo(({
      -  children,
      +  breadcrumbs,
      +  pageControls,
       }: TopBarProps) => {
         const bodyState = useAppShellStore(s => s.bodyState)
         const isDarkMode = useAppShellStore(s => s.isDarkMode);
      @@ -40,11 +40,13 @@
           )}>
             {/* Left Section - Sidebar Controls & Breadcrumbs */}
             <div className="flex items-center gap-4">
      -        {children}
      +        {breadcrumbs}
             </div>
       
             {/* Right Section - page controls, and global controls */}
             <div className="flex items-center gap-3">
      +        {pageControls}
      +
               {/* Separator */}
               <div className="w-px h-6 bg-border mx-2" />
       

    patchStrategy: standard-diff
  - type: write
    path: src/App.tsx
    content: >+
      --- src/App.tsx

      +++ src/App.tsx

      @@ -16,6 +16,8 @@
       import { TopBar } from "./components/layout/TopBar";
       import { CommandPalette } from "./components/global/CommandPalette";
       import { ToasterProvider } from "./components/ui/toast";
      +import { Input } from "./components/ui/input";

      +import { Button } from "./components/ui/button";
       
       // --- Page/Content Components for Pages and Panes ---
       import { DashboardContent } from "./pages/Dashboard";
      @@ -87,69 +89,89 @@
         );
       }
       
      -// Content for the Top Bar (will be fully refactored in Part 2)

      -function AppTopBar() {

      -  const [searchTerm, setSearchTerm] = React.useState("");

      -  const [isSearchFocused, setIsSearchFocused] = React.useState(false);

      -  const location = useLocation();

      -  const activePage =
      location.pathname.split('/').filter(Boolean).pop()?.replace('-', ' ') ||
      'dashboard';

      +// Breadcrumbs for the Top Bar

      +function AppBreadcrumbs() {

      +  const { currentActivePage } = useAppViewManager();

      +  const activePageName = currentActivePage.replace('-', ' ');
       
         return (
      -    <div className="flex items-center gap-3">

      -      <div

      -        className={cn(

      -          "hidden md:flex items-center gap-2 text-sm transition-opacity",

      -          {

      -            "opacity-0 pointer-events-none":

      -              isSearchFocused && activePage === "dashboard",

      -          },

      -        )}

      +    <div className="hidden md:flex items-center gap-2 text-sm">

      +      <a

      +        href="#"

      +        className="text-muted-foreground hover:text-foreground
      transition-colors"
             >
      -        <a

      -          href="#"

      -          className="text-muted-foreground hover:text-foreground
      transition-colors"

      +        Home

      +      </a>

      +      <ChevronRight className="w-4 h-4 text-muted-foreground" />

      +      <span className="font-medium text-foreground capitalize">

      +        {activePageName}

      +      </span>

      +    </div>

      +  );

      +}

      +

      +// Page-specific controls for the Top Bar

      +function TopBarPageControls() {

      +  const { currentActivePage, filters, setFilters } = useAppViewManager();

      +  const [searchTerm, setSearchTerm] = React.useState('');

      +  const [isSearchFocused, setIsSearchFocused] = React.useState(false);

      +

      +  if (currentActivePage === 'dashboard') {

      +    return (

      +      <div className="flex items-center gap-2 flex-1 justify-end">

      +        <div

      +          className={cn(

      +            "relative transition-all duration-300 ease-in-out",

      +            isSearchFocused ? "flex-1 max-w-lg" : "w-auto",

      +          )}
               >
      -          Home

      -        </a>

      -        <ChevronRight className="w-4 h-4 text-muted-foreground" />

      -        <span className="font-medium text-foreground capitalize">

      -          {activePage}

      -        </span>

      +          <Search className="absolute left-3 top-1/2 transform
      -translate-y-1/2 text-muted-foreground w-4 h-4 pointer-events-none" />

      +          <input

      +            type="text"

      +            placeholder="Search dashboard..."

      +            value={searchTerm}

      +            onChange={(e) => setSearchTerm(e.target.value)}

      +            onFocus={() => setIsSearchFocused(true)}

      +            onBlur={() => setIsSearchFocused(false)}

      +            className="pl-9 pr-4 py-2 h-10 border-none rounded-lg bg-card
      focus:outline-none focus:ring-2 focus:ring-primary
      focus:border-transparent transition-all duration-300 ease-in-out w-full"

      +          />

      +        </div>

      +        <Button variant="ghost" size="icon" className="flex-shrink-0">

      +          <Filter className="w-5 h-5" />

      +        </Button>

      +        <Button className="flex-shrink-0">

      +          <Plus className="w-5 h-5 mr-0 sm:mr-2" />

      +          <span className={cn(isSearchFocused ? "hidden sm:inline" :
      "inline")}>

      +            New Project

      +          </span>

      +        </Button>
             </div>
      -

      -      {/* Page-specific: Dashboard search and actions */}

      -      {activePage === "dashboard" && (

      -        <div className="flex items-center gap-2 flex-1 justify-end">

      -          <div

      -            className={cn(

      -              "relative transition-all duration-300 ease-in-out",

      -              isSearchFocused ? "flex-1 max-w-lg" : "w-auto",

      -            )}

      -          >

      -            <Search className="absolute left-3 top-1/2 transform
      -translate-y-1/2 text-muted-foreground w-4 h-4 pointer-events-none" />

      -            <input

      -              type="text"

      -              placeholder="Search..."

      -              value={searchTerm}

      -              onChange={(e) => setSearchTerm(e.target.value)}

      -              onFocus={() => setIsSearchFocused(true)}

      -              onBlur={() => setIsSearchFocused(false)}

      -              className={cn(

      -                "pl-9 pr-4 py-2 h-10 border-none rounded-lg bg-card
      focus:outline-none focus:ring-2 focus:ring-primary
      focus:border-transparent transition-all duration-300 ease-in-out w-full",

      -                isSearchFocused ? "bg-background" : "w-48",

      -              )}

      -            />

      -          </div>

      -          <button className="h-10 w-10 flex-shrink-0 flex items-center
      justify-center hover:bg-accent rounded-full transition-colors">

      -            <Filter className="w-5 h-5" />

      -          </button>

      -          <button className="bg-primary text-primary-foreground px-4 py-2
      rounded-full hover:bg-primary/90 transition-colors flex items-center gap-2
      h-10 flex-shrink-0">

      -            <Plus className="w-5 h-5" />

      -            <span

      -              className={cn(isSearchFocused ? "hidden sm:inline" :
      "inline")}

      -            >

      -              New Project

      -            </span>

      -          </button>

      +    );

      +  }

      +

      +  if (currentActivePage === 'data-demo') {

      +    return (

      +      <div className="flex items-center gap-2">

      +        <div className="relative w-64">

      +          <Search className="absolute left-3 top-1/2 -translate-y-1/2
      text-muted-foreground h-4 w-4" />

      +          <Input

      +            placeholder="Search items..."

      +            className="pl-9 bg-card border-none"

      +            value={filters.searchTerm}

      +            onChange={(e) => setFilters({ ...filters, searchTerm:
      e.target.value })}

      +          />
               </div>
      -      )}

      -    </div>

      -  );

      +        <Button variant="outline">

      +          <Filter className="w-4 h-4 mr-2" />

      +          Filter

      +        </Button>

      +        <Button>

      +          <Plus className="w-4 h-4 mr-2" />

      +          New Item

      +        </Button>

      +      </div>

      +    );

      +  }

      +

      +  return null;
       }
       
       // The main App component that composes the shell
      @@ -168,9 +190,7 @@
             sidebar={<EnhancedSidebar />}
             onOverlayClick={viewManager.closeSidePane}
             topBar={
      -        <TopBar>

      -          <AppTopBar />

      -        </TopBar>

      +        <TopBar breadcrumbs={<AppBreadcrumbs />}
      pageControls={<TopBarPageControls />} />
             }
             mainContent={
               <MainContent>

    patchStrategy: standard-diff
snapshot:
  src/components/layout/TopBar.tsx: |-
    import React from 'react';
    import {
      Moon, 
      Sun,
      Settings,
      Command,
      Zap,
    } from 'lucide-react'
    import { cn } from '@/lib/utils'
    import { BODY_STATES } from '@/lib/utils'
    import { useAppViewManager } from '@/hooks/useAppViewManager.hook'
    import { UserDropdown } from './UserDropdown'
    import { ViewModeSwitcher } from './ViewModeSwitcher'
    import { useAppShellStore } from '@/store/appShell.store'

    interface TopBarProps {
      children?: React.ReactNode
    }

    export const TopBar = React.memo(({
      children,
    }: TopBarProps) => {
      const bodyState = useAppShellStore(s => s.bodyState)
      const isDarkMode = useAppShellStore(s => s.isDarkMode);
      const { 
        setCommandPaletteOpen,
        toggleDarkMode,
      } = useAppShellStore.getState();
      const viewManager = useAppViewManager();

      return (
        <div className={cn(
          "h-20 bg-background border-b border-border flex items-center justify-between px-6 z-50 gap-4"
        )}>
          {/* Left Section - Sidebar Controls & Breadcrumbs */}
          <div className="flex items-center gap-4">
            {children}
          </div>

          {/* Right Section - page controls, and global controls */}
          <div className="flex items-center gap-3">
            {/* Separator */}
            <div className="w-px h-6 bg-border mx-2" />

            {/* Quick Actions */}
            <div className="flex items-center gap-3">

              <button
                onClick={() => setCommandPaletteOpen(true)}
                className="h-10 w-10 flex items-center justify-center rounded-full hover:bg-accent transition-colors group"
                title="Command Palette (Ctrl+K)"
              >
                <Command className="w-5 h-5 group-hover:scale-110 transition-transform" />
              </button>

            <button
              className="h-10 w-10 flex items-center justify-center rounded-full hover:bg-accent transition-colors group"
              title="Quick Actions"
            >
              <Zap className="w-5 h-5 group-hover:scale-110 transition-transform" />
            </button>

            {bodyState !== BODY_STATES.SPLIT_VIEW && <ViewModeSwitcher />}

            <div className="w-px h-6 bg-border mx-2" />

            {/* Theme and Settings */}
            <button
              onClick={toggleDarkMode}
              className="h-10 w-10 flex items-center justify-center rounded-full hover:bg-accent transition-colors group"
              title="Toggle Dark Mode"
            >
              {isDarkMode ? (
                <Sun className="w-5 h-5 group-hover:scale-110 transition-transform" />
              ) : (
                <Moon className="w-5 h-5 group-hover:scale-110 transition-transform" />
              )}
            </button>

            <button
              onClick={() => viewManager.toggleSidePane('settings')}
              className="h-10 w-10 flex items-center justify-center rounded-full hover:bg-accent transition-colors group"
              title="Settings"
            >
              <Settings className="w-5 h-5 group-hover:rotate-90 transition-transform duration-300" />
            </button>
            <UserDropdown />
            </div>
          </div>
        </div>
      )
    });
  src/App.tsx: |-
    import React, { useEffect } from "react";
    import {
      createBrowserRouter,
      RouterProvider,
      Outlet,
      Navigate,
      useNavigate, // used in LoginPageWrapper
      useLocation,
    } from "react-router-dom";

    import { AppShell } from "./components/layout/AppShell";
    import { AppShellProvider } from "./providers/AppShellProvider";
    import { useAppShellStore } from "./store/appShell.store";
    import { useAuthStore } from "./store/authStore";
    import "./index.css";

    // Import library components
    import { EnhancedSidebar } from "./components/layout/EnhancedSidebar";
    import { MainContent } from "./components/layout/MainContent";
    import { RightPane } from "./components/layout/RightPane";
    import { TopBar } from "./components/layout/TopBar";
    import { CommandPalette } from "./components/global/CommandPalette";
    import { ToasterProvider } from "./components/ui/toast";

    // --- Page/Content Components for Pages and Panes ---
    import { DashboardContent } from "./pages/Dashboard";
    import { SettingsPage } from "./pages/Settings";
    import { ToasterDemo } from "./pages/ToasterDemo";
    import { NotificationsPage } from "./pages/Notifications";
    import DataDemoPage from "./pages/DataDemo";
    import MessagingPage from "./pages/Messaging";
    import { LoginPage } from "./components/auth/LoginPage";

    // --- Icons ---
    import {
      Search,
      Filter,
      Plus,
      ChevronRight,
      Rocket,
    } from "lucide-react";

    // --- Utils & Hooks ---
    import { cn } from "./lib/utils";
    import { useAppViewManager } from "./hooks/useAppViewManager.hook";
    import { useRightPaneContent } from "./hooks/useRightPaneContent.hook";
    import { BODY_STATES } from "./lib/utils";

    // Checks for authentication and redirects to login if needed
    function ProtectedRoute() {
      const { isAuthenticated } = useAuthStore();
      const location = useLocation();
      if (!isAuthenticated) {
        return <Navigate to="/login" state={{ from: location }} replace />;
      }
      return <Outlet />;
    }

    // A root component to apply global styles and effects
    function Root() {
      const isDarkMode = useAppShellStore((state) => state.isDarkMode);

      useEffect(() => {
        document.documentElement.classList.toggle("dark", isDarkMode);
      }, [isDarkMode]);

      return <Outlet />;
    }

    // The main layout for authenticated parts of the application
    function ProtectedLayout() {

      return (
        <div className="h-screen w-screen overflow-hidden bg-background">
          <AppShellProvider
            appName="Jeli App"
            appLogo={
              <div className="p-2 bg-primary/20 rounded-lg">
                <Rocket className="w-5 h-5 text-primary" />
              </div>
            }
          >
            <ComposedApp />
          </AppShellProvider>
        </div>
      );
    }

    // Content for the Top Bar (will be fully refactored in Part 2)
    function AppTopBar() {
      const [searchTerm, setSearchTerm] = React.useState("");
      const [isSearchFocused, setIsSearchFocused] = React.useState(false);
      const location = useLocation();
      const activePage = location.pathname.split('/').filter(Boolean).pop()?.replace('-', ' ') || 'dashboard';

      return (
        <div className="flex items-center gap-3">
          <div
            className={cn(
              "hidden md:flex items-center gap-2 text-sm transition-opacity",
              {
                "opacity-0 pointer-events-none":
                  isSearchFocused && activePage === "dashboard",
              },
            )}
          >
            <a
              href="#"
              className="text-muted-foreground hover:text-foreground transition-colors"
            >
              Home
            </a>
            <ChevronRight className="w-4 h-4 text-muted-foreground" />
            <span className="font-medium text-foreground capitalize">
              {activePage}
            </span>
          </div>

          {/* Page-specific: Dashboard search and actions */}
          {activePage === "dashboard" && (
            <div className="flex items-center gap-2 flex-1 justify-end">
              <div
                className={cn(
                  "relative transition-all duration-300 ease-in-out",
                  isSearchFocused ? "flex-1 max-w-lg" : "w-auto",
                )}
              >
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4 pointer-events-none" />
                <input
                  type="text"
                  placeholder="Search..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  onFocus={() => setIsSearchFocused(true)}
                  onBlur={() => setIsSearchFocused(false)}
                  className={cn(
                    "pl-9 pr-4 py-2 h-10 border-none rounded-lg bg-card focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent transition-all duration-300 ease-in-out w-full",
                    isSearchFocused ? "bg-background" : "w-48",
                  )}
                />
              </div>
              <button className="h-10 w-10 flex-shrink-0 flex items-center justify-center hover:bg-accent rounded-full transition-colors">
                <Filter className="w-5 h-5" />
              </button>
              <button className="bg-primary text-primary-foreground px-4 py-2 rounded-full hover:bg-primary/90 transition-colors flex items-center gap-2 h-10 flex-shrink-0">
                <Plus className="w-5 h-5" />
                <span
                  className={cn(isSearchFocused ? "hidden sm:inline" : "inline")}
                >
                  New Project
                </span>
              </button>
            </div>
          )}
        </div>
      );
    }

    // The main App component that composes the shell
    function ComposedApp() {
      const { setBodyState, setSidePaneContent } = useAppShellStore();
      const viewManager = useAppViewManager();

      // Sync URL state with AppShellStore
      useEffect(() => {
        setBodyState(viewManager.bodyState);
        setSidePaneContent(viewManager.sidePaneContent);
      }, [viewManager.bodyState, viewManager.sidePaneContent, setBodyState, setSidePaneContent]);

      return (
        <AppShell
          sidebar={<EnhancedSidebar />}
          onOverlayClick={viewManager.closeSidePane}
          topBar={
            <TopBar>
              <AppTopBar />
            </TopBar>
          }
          mainContent={
            <MainContent>
              <Outlet />
            </MainContent>
          }
          rightPane={<RightPane />}
          commandPalette={<CommandPalette />}
        />
      );
    }

    function App() {
      const router = createBrowserRouter([
        {
          element: <Root />,
          children: [
            {
              path: "/login",
              element: <LoginPage />,
            },
            {
              path: "/",
              element: <ProtectedRoute />,
              children: [
                {
                  path: "/",
                  element: <ProtectedLayout />,
                  children: [
                    { index: true, element: <Navigate to="/dashboard" replace /> },
                    { path: "dashboard", element: <DashboardContent /> },
                    { path: "settings", element: <SettingsPage /> },
                    { path: "toaster", element: <ToasterDemo /> },
                    { path: "notifications", element: <NotificationsPage /> },
                    { path: "data-demo", element: <DataDemoPage /> },
                    { path: "data-demo/:itemId", element: <DataDemoPage /> },
                    { path: "messaging", element: <MessagingPage /> },
                    { path: "messaging/:conversationId", element: <MessagingPage /> },
                  ],
                },
              ],
            },
          ],
        },
      ]);

      return (
        <ToasterProvider>
          <RouterProvider router={router} />
        </ToasterProvider>
      );
    }

    export default App;
approved: true
linesAdded: null
linesRemoved: null
linesDifference: null
gitCommittedAt: null
status: committed
id: 360
