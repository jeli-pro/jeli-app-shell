uuid: 4a25925b-be84-46c5-849a-e1e30932224b
projectId: jeli-app-shell
createdAt: '2025-10-16T23:05:14.050Z'
gitCommitMsg: >-
  fix(messaging): correct input animation and layout on lock state change

  This commit fixes two issues with the message input animation: 1.  The
  slide-up animation now triggers immediately after taking over a task. This is
  resolved by removing a `useMemo` that was caching stale task data, ensuring
  the component reacts to store updates. 2.  The input area container now
  properly collapses when locked, preventing a blank space at the bottom of the
  message list. The animation is updated to include `maxHeight`, `padding`, and
  `border` properties.
promptSummary: >-
  Fix the slide-up animation for the message input area and resolve the layout
  issue when it slides out.
reasoning:
  - >-
    You've pointed out two subtle but important issues with the animation. I've
    got the fixes.
  - >-
    1.  **Animation Not Triggering on "Take Over"**: The problem was that the
    component wasn't re-rendering correctly when the task's state changed in the
    background. The `useMemo` hook was holding onto a stale version of the task
    data. By removing `useMemo`, the component will now get the freshest data
    from the store on every render, ensuring the `isLocked` state is always
    up-to-date and the animation triggers instantly.
  - >-
    2.  **Blocking Container on Slide-Out**: The input area was becoming
    invisible but still occupying space in the layout, leaving a blank area.
    I've enhanced the animation to not only fade and slide the input area but
    also to collapse its height, padding, and border to zero. This makes it
    completely disappear from the layout, allowing the message feed above it to
    expand and fill the space for a much cleaner look.
  - 'Here are the changes to `TaskDetail.tsx`:'
operations:
  - type: write
    path: src/pages/Messaging/components/TaskDetail.tsx
    content: >+
      --- src/pages/Messaging/components/TaskDetail.tsx

      +++ src/pages/Messaging/components/TaskDetail.tsx

      @@ -1,4 +1,4 @@

      -import React, { useMemo, useRef, useEffect } from 'react';

      +import React, { useRef, useEffect } from 'react';
       import { useParams } from 'react-router-dom';
       import { useMessagingStore } from '../store/messaging.store';
       import { ActivityFeed } from './ActivityFeed';
      @@ -14,8 +14,8 @@
         const { show } = useToast();
         const { getTaskById, takeOverTask, requestAndSimulateTakeover } = useMessagingStore();
         const reducedMotion = useAppShellStore(s => s.reducedMotion);
      -

      -  const task = useMemo(() => taskId ? getTaskById(taskId) : undefined,
      [taskId, getTaskById]);

      +  

      +  const task = taskId ? getTaskById(taskId) : undefined;
       
         // In a real app, this would come from the auth store
         const currentUserId = 'user-1'; 
      @@ -25,27 +25,44 @@
         useEffect(() => {
           if (!inputAreaRef.current) return;
       
      -    const target = {

      -      y: isLocked ? 50 : 0,

      -      opacity: isLocked ? 0 : 1,

      -      pointerEvents: isLocked ? 'none' : 'auto' as const,

      -    };

      +    const initialBorderWidth = '1px'; // from 'border-t'

      +    const initialPadding = '1rem';    // from 'p-4'

      +

      +    const target = isLocked

      +      ? {

      +          y: 20,

      +          opacity: 0,

      +          maxHeight: 0,

      +          paddingTop: 0,

      +          paddingBottom: 0,

      +          borderTopWidth: 0,

      +          pointerEvents: 'none' as const,

      +        }

      +      : {

      +          y: 0,

      +          opacity: 1,

      +          maxHeight: 500, // Ample room for the input

      +          paddingTop: initialPadding,

      +          paddingBottom: initialPadding,

      +          borderTopWidth: initialBorderWidth,

      +          pointerEvents: 'auto' as const,

      +        };
       
           if (reducedMotion) {
             gsap.set(inputAreaRef.current, target);
             return;
           }
      -

      +    
           if (isFirstRender.current) {
             gsap.set(inputAreaRef.current, target);
             isFirstRender.current = false;
           } else {
             gsap.to(inputAreaRef.current, {
               ...target,
      -        duration: 0.3,

      +        duration: 0.35,
               ease: 'power2.inOut',
             });
           }
         }, [isLocked, reducedMotion]);
       
         if (!taskId || !task) {

    patchStrategy: standard-diff
snapshot:
  src/pages/Messaging/components/TaskDetail.tsx: >-
    import React, { useMemo, useRef, useEffect } from 'react';

    import { useParams } from 'react-router-dom';

    import { useMessagingStore } from '../store/messaging.store';

    import { ActivityFeed } from './ActivityFeed';

    import { Button } from '@/components/ui/button';

    import { Textarea } from '@/components/ui/textarea';

    import { Paperclip, SendHorizontal, Smile, StickyNote } from 'lucide-react';

    import { Tabs, TabsContent, TabsList, TabsTrigger } from
    "@/components/ui/tabs";

    import { TakeoverBanner } from './TakeoverBanner';

    import { useToast } from '@/components/ui/toast';

    import { gsap } from 'gsap';

    import { useAppShellStore } from '@/store/appShell.store';



    export const TaskDetail: React.FC = () => {
      const { conversationId: taskId } = useParams<{ conversationId: string }>();
      const { show } = useToast();
      const { getTaskById, takeOverTask, requestAndSimulateTakeover } = useMessagingStore();
      const reducedMotion = useAppShellStore(s => s.reducedMotion);

      const task = useMemo(() => taskId ? getTaskById(taskId) : undefined, [taskId, getTaskById]);

      // In a real app, this would come from the auth store
      const currentUserId = 'user-1'; 

      const isLocked = !!task?.activeHandlerId && task.activeHandlerId !== currentUserId;
      const inputAreaRef = useRef<HTMLDivElement>(null);
      const isFirstRender = useRef(true);

      useEffect(() => {
        if (!inputAreaRef.current) return;

        const target = {
          y: isLocked ? 50 : 0,
          opacity: isLocked ? 0 : 1,
          pointerEvents: isLocked ? 'none' : 'auto' as const,
        };

        if (reducedMotion) {
          gsap.set(inputAreaRef.current, target);
          return;
        }

        if (isFirstRender.current) {
          gsap.set(inputAreaRef.current, target);
          isFirstRender.current = false;
        } else {
          gsap.to(inputAreaRef.current, {
            ...target,
            duration: 0.3,
            ease: 'power2.inOut',
          });
        }
      }, [isLocked, reducedMotion]);

      if (!taskId || !task) {
        return (
            <div className="h-full flex flex-col items-center justify-center p-6 bg-background">
                <p className="text-muted-foreground">Select a task to see its details.</p>
            </div>
        );
      }

      const handleTakeOver = () => {
        takeOverTask(task.id, currentUserId);
        show({
            variant: 'success',
            title: 'Task Taken Over',
            message: `You are now handling the task from ${task.contact.name}.`
        });
      };

      const handleRequestTakeover = () => {
        requestAndSimulateTakeover(task.id, currentUserId);
        if (task.activeHandler) {
            show({
                variant: 'default',
                title: 'Request Sent',
                message: `A takeover request has been sent to ${task.activeHandler.name}.`
            });
        }
      };

      return (
        <div className="h-full flex flex-col bg-background overflow-hidden">
          {isLocked && task.activeHandler && (
            <TakeoverBanner
                activeHandler={task.activeHandler}
                isRequesting={!!task.takeoverRequested}
                onTakeOver={handleTakeOver}
                onRequestTakeover={handleRequestTakeover}
            />
          )}
          <ActivityFeed messages={task.messages} contact={task.contact} />

          {/* Input Form */}
          <div ref={inputAreaRef} className="p-4 border-t flex-shrink-0 bg-background/50">
            <Tabs defaultValue="comment" className="w-full" >
              <TabsList className="grid w-full grid-cols-2 mb-2">
                <TabsTrigger value="comment" disabled={isLocked}>Comment</TabsTrigger>
                <TabsTrigger value="note" disabled={isLocked}><StickyNote className="w-4 h-4 mr-2" />Internal Note</TabsTrigger>
              </TabsList>
              <TabsContent value="comment">
                 <div className="relative">
                    <Textarea placeholder={isLocked ? "Take over to reply..." : `Reply to ${task.contact.name}...`} className="pr-24 min-h-[52px]" disabled={isLocked} />
                    <div className="absolute right-2 top-2 flex items-center gap-1">
                        <Button variant="ghost" size="icon" className="rounded-full h-8 w-8" disabled={isLocked}><Smile className="w-4 h-4" /></Button>
                        <Button variant="ghost" size="icon" className="rounded-full h-8 w-8" disabled={isLocked}><Paperclip className="w-4 h-4" /></Button>
                        <Button size="icon" className="rounded-full h-8 w-8" disabled={isLocked}><SendHorizontal className="w-4 h-4" /></Button>
                    </div>
                </div>
              </TabsContent>
              <TabsContent value="note">
                <div className="relative">
                    <Textarea placeholder={isLocked ? "Take over to add a note..." : "Add an internal note..."} className="pr-24 min-h-[52px] bg-yellow-400/10 border-yellow-400/30 focus-visible:ring-yellow-500" disabled={isLocked} />
                    <div className="absolute right-2 top-2 flex items-center gap-1">
                        <Button size="icon" className="rounded-full h-8 w-8" disabled={isLocked}><SendHorizontal className="w-4 h-4" /></Button>
                    </div>
                </div>
              </TabsContent>
            </Tabs>
          </div>
        </div>
      );
    };
approved: true
linesAdded: null
linesRemoved: null
linesDifference: null
gitCommittedAt: null
status: committed
id: 374
