uuid: 4a65df27-142f-4886-9a25-e5f8b919d701
projectId: jeli-app-shell
createdAt: '2025-10-21T16:57:50.065Z'
gitCommitMsg: >-
  feat(calendar): add acceleration and visual cues to edge drag

  Improves the drag-to-change-month feature in the CalendarView by introducing
  acceleration and visual feedback.

  - Dragging and holding an item on an edge now progressively speeds up
    the month navigation, making it much faster to move items across
    multiple months.
  - A visual gradient overlay now appears on the edges of the calendar
    grid, providing a clear cue to the user that they are in a "hot zone"
    for month navigation.
  - Timings and hot zone sizes have been tweaked for a better user
    experience.
promptSummary: >-
  The user requested to refine the drag-to-change-month feature. They want
  acceleration for multi-month drags and a visual cue to indicate when the
  feature is active.
reasoning:
  - >-
    Of course. It's a great point that dragging over multiple months should feel
    fluid and not like a "hustle." We can definitely implement acceleration. The
    longer you hold the item at the edge, the faster the months will flip.
  - >-
    I'll also add a clear visual cue—a subtle glow on the sides of the
    calendar—so you know exactly when you've entered the "hot zone" for changing
    months.
  - 'Here are the changes:'
  - >-
    1.  **Acceleration Logic**: The first month change will have a brief delay.
    If you continue to hover, subsequent months will change at a progressively
    faster rate.
  - >-
    2.  **Visual Cues**: A gradient overlay will appear on the left or right
    edge of the calendar grid when you drag an item into the trigger area.
  - >-
    3.  **Refined Timings**: I'll adjust the trigger delay and zone size for a
    better feel.
  - >-
    This will make rescheduling items across long periods much faster and more
    intuitive.
  - '### Applying Acceleration and Visual Cues to Calendar View'
  - >-
    I'll update the `CalendarView.tsx` component with the new state for the
    visual cue, a ref for tracking acceleration, and updated drag-and-drop
    handler functions to orchestrate the new, more dynamic behavior.
  - '---'
operations:
  - type: write
    path: src/features/dynamic-view/components/views/CalendarView.tsx
    content: >+
      --- src/features/dynamic-view/components/views/CalendarView.tsx

      +++ src/features/dynamic-view/components/views/CalendarView.tsx

      @@ -190,8 +190,10 @@
         // Drag & Drop State
         const [draggedItemId, setDraggedItemId] = useState<string | null>(null);
         const [dropTargetDate, setDropTargetDate] = useState<Date | null>(null);
      +  const [activeEdge, setActiveEdge] = useState<'left' | 'right' |
      null>(null);
         const edgeHoverTimerRef = useRef<NodeJS.Timeout | null>(null);
         const currentEdgeRef = useRef<'left' | 'right' | null>(null);
      +  const consecutiveMonthChangesRef = useRef(0);
       
         // GSAP animation state
         const [direction, setDirection] = useState(0); // 0: initial, 1: next, -1: prev
      @@ -231,19 +233,63 @@
             clearTimeout(edgeHoverTimerRef.current);
             edgeHoverTimerRef.current = null;
           }
           currentEdgeRef.current = null;
      +    consecutiveMonthChangesRef.current = 0;

      +    setActiveEdge(null);
           setDraggedItemId(null);
           setDropTargetDate(null);
         };
       
      +  const handleMonthChange = (direction: 'prev' | 'next') => {

      +    // Safety check: ensure user is still hovering on the correct edge

      +    if ((direction === 'prev' && currentEdgeRef.current !== 'left') ||
      (direction === 'next' && currentEdgeRef.current !== 'right')) {

      +      return;

      +    }

      +

      +    if (direction === 'prev') {

      +      setDirection(-1);

      +      setCurrentDate(current => subMonths(current, 1));

      +    } else {

      +      setDirection(1);

      +      setCurrentDate(current => addMonths(current, 1));

      +    }

      +

      +    consecutiveMonthChangesRef.current += 1;

      +

      +    // Schedule next accelerated change

      +    const nextDelay = consecutiveMonthChangesRef.current >= 2 ? 150 :
      300;

      +    edgeHoverTimerRef.current = setTimeout(() =>
      handleMonthChange(direction), nextDelay);

      +  };

      +
         const handleDragOver = (e: React.DragEvent, day: Date) => {
           e.preventDefault();
           if (!gridRef.current) return;
       
           const rect = gridRef.current.getBoundingClientRect();
      -    const edgeZoneWidth = 60; // 60px hotzone on each side

      +    const edgeZoneWidth = 80; // 80px hotzone on each side
       
           const clearTimer = () => {
             if (edgeHoverTimerRef.current) {
               clearTimeout(edgeHoverTimerRef.current);
               edgeHoverTimerRef.current = null;
             }
           };
       
           // Check left edge
           if (e.clientX < rect.left + edgeZoneWidth) {
             if (currentEdgeRef.current !== 'left') {
               clearTimer();
               currentEdgeRef.current = 'left';
      +        consecutiveMonthChangesRef.current = 0;
               setDropTargetDate(null);
      -        edgeHoverTimerRef.current = setTimeout(handlePrevMonth, 700);

      +        edgeHoverTimerRef.current = setTimeout(() =>
      handleMonthChange('prev'), 600);
             }
      +      setActiveEdge('left');
             return;
           }
       
           // Check right edge
           if (e.clientX > rect.right - edgeZoneWidth) {
             if (currentEdgeRef.current !== 'right') {
               clearTimer();
               currentEdgeRef.current = 'right';
      +        consecutiveMonthChangesRef.current = 0;
               setDropTargetDate(null);
      -        edgeHoverTimerRef.current = setTimeout(handleNextMonth, 700);

      +        edgeHoverTimerRef.current = setTimeout(() =>
      handleMonthChange('next'), 600);
             }
      +      setActiveEdge('right');
             return;
           }
       
           // If not in an edge zone
           clearTimer();
      +    setActiveEdge(null);
           currentEdgeRef.current = null;
           
           if (dropTargetDate === null || !isSameDay(day, dropTargetDate)) {
      @@ -311,7 +357,20 @@
                 No items with {datePropLabels[calendarDateProp]} to display on the calendar.
               </div>
             ) : (
      -        <div className="px-2" onDragEnd={handleDragEnd}>

      +        <div className="px-2 relative" onDragEnd={handleDragEnd}>

      +          {/* Left edge cue */}

      +          <div className={cn(

      +              "absolute top-0 left-2 bottom-0 w-20 bg-gradient-to-r
      from-primary/20 to-transparent pointer-events-none transition-opacity
      duration-300 z-10",

      +              activeEdge === 'left' ? "opacity-100" : "opacity-0"

      +          )} />

      +          {/* Right edge cue */}

      +          <div className={cn(

      +              "absolute top-0 right-2 bottom-0 w-20 bg-gradient-to-l
      from-primary/20 to-transparent pointer-events-none transition-opacity
      duration-300 z-10",

      +              activeEdge === 'right' ? "opacity-100" : "opacity-0"

      +          )} />

      +
                 {numColumns === 7 && (
                   <div className="grid grid-cols-7">
                     {weekdays.map(day => (

    patchStrategy: standard-diff
snapshot:
  src/features/dynamic-view/components/views/CalendarView.tsx: >-
    import { useState, useMemo, useRef, useLayoutEffect } from "react";

    import { format, addMonths, subMonths, startOfMonth, endOfMonth,
    startOfWeek, endOfWeek, eachDayOfInterval, isSameMonth, isToday, isSameDay,
    } from "date-fns";

    import { ChevronLeft, ChevronRight } from "lucide-react";

    import { gsap } from "gsap";


    import { Button } from "@/components/ui/button";

    import { cn } from "@/lib/utils";

    import type { GenericItem } from '../../types';

    import type { CalendarDateProp, CalendarColorProp, Status, Priority } from
    '../../types';

    import { useResizeObserver } from "@/hooks/useResizeObserver.hook";

    import { useDynamicView } from '../../DynamicViewContext'

    import { FieldRenderer } from '../shared/FieldRenderer'


    interface CalendarViewProps {
      data: GenericItem[];
    }


    const PRIORITY_BG_COLORS: Record<Priority, string> = {
      low: 'bg-blue-500/80 border-blue-600/80 text-white',
      medium: 'bg-yellow-500/80 border-yellow-600/80 text-yellow-950',
      high: 'bg-orange-500/80 border-orange-600/80 text-white',
      critical: 'bg-red-600/80 border-red-700/80 text-white',
    };


    const STATUS_BG_COLORS: Record<Status, string> = {
      active: 'bg-sky-500/80 border-sky-600/80 text-white',
      pending: 'bg-amber-500/80 border-amber-600/80 text-amber-950',
      completed: 'bg-emerald-600/80 border-emerald-700/80 text-white',
      archived: 'bg-zinc-500/80 border-zinc-600/80 text-white',
    };


    const CATEGORY_BG_COLORS = [
      'bg-rose-500/80 border-rose-600/80 text-white',
      'bg-fuchsia-500/80 border-fuchsia-600/80 text-white',
      'bg-indigo-500/80 border-indigo-600/80 text-white',
      'bg-teal-500/80 border-teal-600/80 text-white',
      'bg-lime-500/80 border-lime-600/80 text-lime-950',
    ];


    const getCategoryBgColor = (category: string) => {
      let hash = 0;
      for (let i = 0; i < category.length; i++) {
        hash = category.charCodeAt(i) + ((hash << 5) - hash);
      }
      const index = Math.abs(hash % CATEGORY_BG_COLORS.length);
      return CATEGORY_BG_COLORS[index];
    };


    function CalendarHeader({ currentDate, onPrevMonth, onNextMonth, onToday }:
    {
      currentDate: Date;
      onPrevMonth: () => void;
      onNextMonth: () => void;
      onToday: () => void;
    }) {
      return (
        <div className="flex items-center justify-between gap-4 mb-6">
          <h2 className="text-xl font-bold md:text-2xl tracking-tight">
            {format(currentDate, "MMMM yyyy")}
          </h2>
          <div className="flex items-center gap-2">
            <Button variant="outline" size="sm" onClick={onToday}>Today</Button>
            <div className="flex items-center">
              <Button variant="outline" size="icon" className="h-9 w-9" onClick={onPrevMonth}>
                <ChevronLeft className="h-4 w-4" />
              </Button>
              <Button variant="outline" size="icon" className="h-9 w-9" onClick={onNextMonth}>
                <ChevronRight className="h-4 w-4" />
              </Button>
            </div>
          </div>
        </div>
      );
    }


    function CalendarEvent({ item, isSelected, isDragging, onDragStart,
    colorProp }: { 
        item: GenericItem; 
        isSelected: boolean;
        isDragging: boolean;
        onDragStart: (e: React.DragEvent<HTMLDivElement>, itemId: string) => void
        colorProp: CalendarColorProp<string>;
      }) {
      const { config, onItemSelect } = useDynamicView<string, GenericItem>();
      const { calendarView: viewConfig } = config;

        const colorClass = useMemo(() => {
          switch (colorProp) {
            case 'priority': return PRIORITY_BG_COLORS[item.priority as Priority];
            case 'status': return STATUS_BG_COLORS[item.status as Status];
            case 'category': return getCategoryBgColor(item.category as string);
            default: return null;
          }
        }, [colorProp, item]);

        return (
            <div
                draggable
                onDragStart={(e) => onDragStart(e, item.id)}
                onClick={() => onItemSelect(item)}
                className={cn(
                    "p-2 rounded-lg cursor-grab transition-all duration-200 border space-y-1",
                    isSelected && "ring-2 ring-primary ring-offset-background ring-offset-2",
                    isDragging && "opacity-50 ring-2 ring-primary cursor-grabbing",
                    colorClass 
                      ? `${colorClass} hover:brightness-95 dark:hover:brightness-110`
                      : "bg-card/60 dark:bg-neutral-800/60 backdrop-blur-sm hover:bg-card/80 dark:hover:bg-neutral-700/70"
                )}
            >
                <div className={cn(
                  "font-semibold text-sm leading-tight line-clamp-2",
                  colorClass ? "text-inherit" : "text-card-foreground/90"
                )}>
                  <FieldRenderer item={item} fieldId={viewConfig.titleField} />
                </div>

                {viewConfig.displayFields.includes('tags') && <FieldRenderer item={item} fieldId="tags" />}

                {(viewConfig.displayFields.includes('priority') || viewConfig.displayFields.includes('assignee')) && (
                    <div className={cn(
                        "flex items-center justify-between pt-1 border-t",
                        colorClass ? "border-black/10 dark:border-white/10" : "border-border/30 dark:border-neutral-700/50"
                    )}>
                        <div>
                          {viewConfig.displayFields.includes('priority') && <FieldRenderer item={item} fieldId="priority" />}
                        </div>
                        <div>
                          {viewConfig.displayFields.includes('assignee') && <FieldRenderer item={item} fieldId="assignee" options={{ compact: true, avatarClassName: 'w-5 h-5' }}/>}
                        </div>
                    </div>
                )}
            </div>
        );
    }


    const datePropLabels: Record<CalendarDateProp<string>, string> = {
      dueDate: 'due dates',
      createdAt: 'creation dates',
      updatedAt: 'update dates',
    };


    export function CalendarView({ data }: CalendarViewProps) {
      const [currentDate, setCurrentDate] = useState(new Date());
      const {
        onItemUpdate,
        calendarDateProp = 'dueDate', // Provide default
        calendarItemLimit = 3, // Provide default
        calendarColorProp = 'none', // Provide default
        selectedItemId,
      } = useDynamicView<string, GenericItem>();
      
      // Drag & Drop State
      const [draggedItemId, setDraggedItemId] = useState<string | null>(null);
      const [dropTargetDate, setDropTargetDate] = useState<Date | null>(null);
      const edgeHoverTimerRef = useRef<NodeJS.Timeout | null>(null);
      const currentEdgeRef = useRef<'left' | 'right' | null>(null);

      // GSAP animation state
      const [direction, setDirection] = useState(0); // 0: initial, 1: next, -1: prev

      // Responsive Calendar State
      const calendarContainerRef = useRef<HTMLDivElement>(null);
      const { width } = useResizeObserver(calendarContainerRef);
      const MIN_DAY_WIDTH = 160; // px
      const numColumns = useMemo(() => {
        if (width === 0) return 7;
        const cols = Math.floor(width / MIN_DAY_WIDTH);
        return Math.max(3, Math.min(7, cols));
      }, [width]);

      const gridRef = useRef<HTMLDivElement>(null);
      const itemsByDateProp = useMemo(() => data.filter(item => !!item[calendarDateProp]), [data, calendarDateProp]);

      const eventsByDate = useMemo(() => {
        const eventsMap = new Map<string, GenericItem[]>();
        itemsByDateProp.forEach(item => {
          const dateValue = item[calendarDateProp];
          if (!dateValue) return;
          const date = new Date(dateValue as string);
          const dateKey = format(date, "yyyy-MM-dd");
          if (!eventsMap.has(dateKey)) {
            eventsMap.set(dateKey, []);
          }
          eventsMap.get(dateKey)?.push(item);
        });
        return eventsMap;
      }, [itemsByDateProp, calendarDateProp]);

      const monthStart = startOfMonth(currentDate);
      const monthEnd = endOfMonth(monthStart);
      const startDate = startOfWeek(monthStart, { weekStartsOn: 0 }); // Sunday
      const endDate = endOfWeek(monthEnd, { weekStartsOn: 0 });

      const days = eachDayOfInterval({ start: startDate, end: endDate });
      const weekdays = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
      
      // D&D Handlers
      const handleDragStart = (e: React.DragEvent, itemId: string) => {
        e.dataTransfer.effectAllowed = 'move';
        e.dataTransfer.setData('text/plain', itemId);
        setDraggedItemId(itemId);
      };
      
      const handleDragEnd = () => {
        if (edgeHoverTimerRef.current) {
          clearTimeout(edgeHoverTimerRef.current);
          edgeHoverTimerRef.current = null;
        }
        currentEdgeRef.current = null;
        setDraggedItemId(null);
        setDropTargetDate(null);
      };

      const handleDragOver = (e: React.DragEvent, day: Date) => {
        e.preventDefault();
        if (!gridRef.current) return;

        const rect = gridRef.current.getBoundingClientRect();
        const edgeZoneWidth = 60; // 60px hotzone on each side

        const clearTimer = () => {
          if (edgeHoverTimerRef.current) {
            clearTimeout(edgeHoverTimerRef.current);
            edgeHoverTimerRef.current = null;
          }
        };

        // Check left edge
        if (e.clientX < rect.left + edgeZoneWidth) {
          if (currentEdgeRef.current !== 'left') {
            clearTimer();
            currentEdgeRef.current = 'left';
            setDropTargetDate(null);
            edgeHoverTimerRef.current = setTimeout(handlePrevMonth, 700);
          }
          return;
        }

        // Check right edge
        if (e.clientX > rect.right - edgeZoneWidth) {
          if (currentEdgeRef.current !== 'right') {
            clearTimer();
            currentEdgeRef.current = 'right';
            setDropTargetDate(null);
            edgeHoverTimerRef.current = setTimeout(handleNextMonth, 700);
          }
          return;
        }

        // If not in an edge zone
        clearTimer();
        currentEdgeRef.current = null;
        
        if (dropTargetDate === null || !isSameDay(day, dropTargetDate)) {
          setDropTargetDate(day);
        }
      };

      const handleDragLeave = () => {
        setDropTargetDate(null);
      };

      const handleDrop = (e: React.DragEvent, day: Date) => {
        e.preventDefault();
        const itemIdToUpdate = e.dataTransfer.getData('text/plain');
        if (itemIdToUpdate) {
            const originalItem = itemsByDateProp.find(i => i.id === itemIdToUpdate);
            if (originalItem && originalItem[calendarDateProp]) {
                const originalDate = new Date(originalItem[calendarDateProp] as string);
                // Preserve the time, only change the date part
                const newDueDate = new Date(day);
                newDueDate.setHours(originalDate.getHours(), originalDate.getMinutes(), originalDate.getSeconds(), originalDate.getMilliseconds());
                onItemUpdate?.(itemIdToUpdate, { [calendarDateProp]: newDueDate.toISOString() });
            }
        }
        handleDragEnd(); // Reset state
      };
      
      const handlePrevMonth = () => {
        setDirection(-1);
        setCurrentDate(subMonths(currentDate, 1));
      };
      const handleNextMonth = () => {
        setDirection(1);
        setCurrentDate(addMonths(currentDate, 1));
      };
      const handleToday = () => {
        setDirection(0); // No animation for 'Today'
        setCurrentDate(new Date());
      };

      useLayoutEffect(() => {
        if (direction === 0 || !gridRef.current) return;
        gsap.fromTo(gridRef.current, 
          { opacity: 0, x: 30 * direction }, 
          { opacity: 1, x: 0, duration: 0.3, ease: 'power2.out' }
        );
      }, [currentDate]);

      return (
        <div ref={calendarContainerRef} className="-mx-4 md:-mx-6">
          <div className="px-4 md:px-6 pb-2">
            <CalendarHeader currentDate={currentDate} onPrevMonth={handlePrevMonth} onNextMonth={handleNextMonth} onToday={handleToday} />
          </div>
          {itemsByDateProp.length === 0 ? (
            <div className="flex items-center justify-center h-96 text-muted-foreground rounded-lg border bg-card/30 mx-4 md:mx-6">
              No items with {datePropLabels[calendarDateProp]} to display on the calendar.
            </div>
          ) : (
            <div className="px-2" onDragEnd={handleDragEnd}>
              {numColumns === 7 && (
                <div className="grid grid-cols-7">
                  {weekdays.map(day => (
                    <div key={day} className="py-2 px-3 text-center text-xs font-semibold text-muted-foreground">
                      {day}
                    </div>
                  ))}
                </div>
              )}

                <div
                  ref={gridRef}
                  style={{
                    display: 'grid',
                    gridTemplateColumns: `repeat(${numColumns}, minmax(0, 1fr))`,
                    gap: '0.5rem',
                  }}
                >
                  {days.map(day => {
                    const dateKey = format(day, "yyyy-MM-dd");
                    const dayEvents = eventsByDate.get(dateKey) || [];
                    const visibleEvents = calendarItemLimit === 'all' 
                        ? dayEvents 
                        : dayEvents.slice(0, calendarItemLimit as number);
                    const hiddenEventsCount = dayEvents.length - visibleEvents.length;
                    const isCurrentMonthDay = isSameMonth(day, currentDate);
                    const isDropTarget = dropTargetDate && isSameDay(day, dropTargetDate);
                    return (
                      <div
                        key={day.toString()}
                        onDragOver={(e) => handleDragOver(e, day)}
                        onDragLeave={handleDragLeave}
                        onDrop={(e) => handleDrop(e, day)}
                        className={cn(
                          "relative min-h-[150px] rounded-2xl p-2 flex flex-col gap-2 transition-all duration-300 border",
                          isCurrentMonthDay ? "bg-card/40 dark:bg-neutral-900/40 border-transparent" : "bg-muted/30 dark:bg-neutral-800/20 border-transparent text-muted-foreground/60",
                          isDropTarget ? "border-primary/50 bg-primary/10" : "hover:border-primary/20 hover:bg-card/60"
                        )}
                      >
                        <div className="font-semibold text-sm">
                          {isToday(day) ? (
                            <div className="flex items-center justify-center w-7 h-7 rounded-full bg-primary text-primary-foreground">
                              {format(day, 'd')}
                            </div>
                          ) : (
                            <div className="flex items-baseline gap-1.5 px-1 py-0.5">
                              {numColumns < 7 && <span className="text-xs opacity-70">{format(day, 'eee')}</span>}
                              <span>{format(day, 'd')}</span>
                            </div>
                          )}
                        </div>
                        <div className="space-y-2 overflow-y-auto flex-grow custom-scrollbar">
                          {visibleEvents.map(item => (
                            <CalendarEvent
                              key={item.id} 
                              item={item} 
                              isSelected={!!selectedItemId && selectedItemId === item.id}
                              isDragging={!!draggedItemId && draggedItemId === item.id}
                              onDragStart={handleDragStart}
                              colorProp={calendarColorProp}
                            />
                          ))}
                        </div>
                        {hiddenEventsCount > 0 && (
                          <div className="absolute bottom-1 right-2 text-xs font-bold text-muted-foreground">
                            +{hiddenEventsCount} more
                          </div>
                        )}
                      </div>
                    );
                  })}
                </div>
            </div>
          )}
        </div>
      );
    }
approved: true
linesAdded: null
linesRemoved: null
linesDifference: null
gitCommittedAt: null
status: committed
id: 568
