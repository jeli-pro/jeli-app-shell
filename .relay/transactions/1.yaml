uuid: c403c61b-99f6-41c3-8321-72f121d5c2e1
projectId: amazing-app-shell
createdAt: '2025-10-10T09:19:09.849Z'
gitCommitMsg: >-
  fix: Resolve all TypeScript errors

  This commit addresses all TypeScript errors by: - Adding `@types/node` to fix
  Vite config type issues. - Removing unused `React` imports now redundant with
  the new JSX transform. - Deleting unused and incompatible files (`demo.tsx`,
  `sidebar.tsx`, `Sidebar.tsx`) that appeared to be from a Next.js project. -
  Cleaning up unused variables and imports across multiple components.
promptSummary: I need to fix a large number of TypeScript errors in my project.
reasoning:
  - >-
    I will fix the TypeScript errors in your project by addressing several
    issues: missing type declarations for Node.js built-ins in your Vite config,
    unused imports and variables due to the modern React JSX transform, and the
    presence of unused files from a different framework (Next.js) that are
    causing dependency errors.
  - '### 1. Fix Node.js Type Errors in Vite Configuration'
  - >-
    The errors in `vite.config.ts` (`Cannot find module 'path'` and `Cannot find
    name '__dirname'`) are because the Node.js type definitions are missing.
    I'll add `@types/node` to your development dependencies and update
    `tsconfig.node.json` to include these types.
  - '### 2. Remove Unused and Incompatible Files'
  - >-
    The files `src/demo.tsx` and `src/sidebar.tsx` are causing numerous errors
    because they are written for a Next.js environment (using `next/link`,
    `next/image`) and depend on uninstalled packages like `framer-motion`.
    Similarly, `src/components/Sidebar.tsx` appears to be an older, unused
    version of `EnhancedSidebar.tsx`. I will delete these three files and update
    the component index.
  - '### 3. Clean Up Unused Imports and Variables'
  - >-
    The remaining errors are related to unused imports (like `React` which is no
    longer needed with the new JSX transform) and unused variables. I will clean
    these up across the relevant components.
  - First, I'll remove the unused `React` import from `App.tsx`.
  - >-
    In `AppShell.tsx`, I'll remove the unused `React` import, two unused
    `mainContent` variable declarations, and the unused `sidebarState` prop
    being passed to `MainContent`.
  - >-
    In `DemoContent.tsx`, I'll remove the `React` import and the unused `index`
    variable from a `.map()` call.
  - In `EnhancedSidebar.tsx`, the `MessageSquare` icon is imported but not used.
  - '`MainContent.tsx` has several unused variables. I''ll remove them.'
  - The `SettingsPanel.tsx` component also has an unused `React` import.
  - >-
    Finally, `TopBar.tsx` has an unused `React` import and an unused `X` icon
    import.
  - >-
    These changes should resolve all the TypeScript errors and clean up the
    project structure.
operations:
  - type: write
    path: package.json
    content: |+
      --- package.json
      +++ package.json
      @@ -21,6 +21,7 @@
           "class-variance-authority": "^0.7.0"
         },
         "devDependencies": {
      +    "@types/node": "^20.10.0",
           "@types/react": "^18.2.37",
           "@types/react-dom": "^18.2.15",
           "@typescript-eslint/eslint-plugin": "^6.10.0",

    patchStrategy: standard-diff
  - type: write
    path: tsconfig.node.json
    content: |+
      --- tsconfig.node.json
      +++ tsconfig.node.json
      @@ -4,7 +4,8 @@
           "skipLibCheck": true,
           "module": "ESNext",
           "moduleResolution": "bundler",
      -    "allowSyntheticDefaultImports": true
      +    "allowSyntheticDefaultImports": true,
      +    "types": ["node"]
         },
         "include": ["vite.config.ts"]
       }

    patchStrategy: standard-diff
  - type: delete
    path: src/demo.tsx
  - type: delete
    path: src/sidebar.tsx
  - type: delete
    path: src/components/Sidebar.tsx
  - type: write
    path: src/components/index.ts
    content: |+
      --- src/components/index.ts
      +++ src/components/index.ts
      @@ -1,4 +1,3 @@
       export { AppShell } from './AppShell'
      -export { Sidebar } from './Sidebar'
       export { TopBar } from './TopBar'
       export { MainContent } from './MainContent'

    patchStrategy: standard-diff
  - type: write
    path: src/App.tsx
    content: |+
      --- src/App.tsx
      +++ src/App.tsx
      @@ -1,4 +1,3 @@
      -import React from 'react'
       import { AppShell } from './components/AppShell'
       import './index.css'
       

    patchStrategy: standard-diff
  - type: write
    path: src/components/AppShell.tsx
    content: |+
      --- src/components/AppShell.tsx
      +++ src/components/AppShell.tsx
      @@ -1,4 +1,4 @@
      -import React, { useRef, useEffect } from 'react'
      +import { useRef, useEffect } from 'react'
       import { gsap } from 'gsap'
       import { cn } from '@/lib/utils'
       import { EnhancedSidebar } from './EnhancedSidebar'
      @@ -74,7 +74,6 @@
           if (!sidebarRef.current || !mainContentRef.current) return
       
           const sidebar = sidebarRef.current
      -    const mainContent = mainContentRef.current
           
           let targetWidth = 0
           let targetOpacity = 1
      @@ -115,8 +114,6 @@
         useEffect(() => {
           if (!mainContentRef.current) return
       
      -    const mainContent = mainContentRef.current
      -    
           switch (bodyState) {
             case BODY_STATES.FULLSCREEN:
               // In fullscreen, hide sidebar completely
      @@ -194,7 +191,6 @@
                 <MainContent
                   ref={mainContentRef}
                   bodyState={bodyState}
      -            sidebarState={sidebarState}
                 />
               </div>
             </div>

    patchStrategy: standard-diff
  - type: write
    path: src/components/DemoContent.tsx
    content: |+
      --- src/components/DemoContent.tsx
      +++ src/components/DemoContent.tsx
      @@ -1,4 +1,4 @@
      -import React, { useRef, useEffect } from 'react'
      +import { useRef, useEffect } from 'react'
       import { gsap } from 'gsap'
       import { 
         Sparkles, 
      @@ -102,7 +102,7 @@
               
               {/* Quick Stats */}
               <div className="flex items-center justify-center gap-8 mt-8">
      -          {stats.map((stat, index) => (
      +          {stats.map((stat) => (
                   <div key={stat.label} className="text-center">
                     <div className={cn("text-2xl font-bold", stat.color)}>{stat.value}</div>
                     <div className="text-sm text-muted-foreground">{stat.label}</div>

    patchStrategy: standard-diff
  - type: write
    path: src/components/EnhancedSidebar.tsx
    content: |+
      --- src/components/EnhancedSidebar.tsx
      +++ src/components/EnhancedSidebar.tsx
      @@ -10,8 +10,7 @@
         HelpCircle, 
         FileText, 
         Calendar, 
      -  Mail, 
      -  MessageSquare,
      +  Mail,
         FolderOpen,
         Bookmark,
         Download,

    patchStrategy: standard-diff
  - type: write
    path: src/components/MainContent.tsx
    content: >+
      --- src/components/MainContent.tsx

      +++ src/components/MainContent.tsx

      @@ -18,12 +18,11 @@
         MoreVertical
       } from 'lucide-react'
       import { cn } from '@/lib/utils'
      -import { BODY_STATES, SIDEBAR_STATES, type BodyState, type SidebarState }
      from '@/lib/utils'

      +import { BODY_STATES, type BodyState, type SidebarState } from
      '@/lib/utils'
       import { DemoContent } from './DemoContent'
       
       interface MainContentProps {
         bodyState: BodyState
      -  sidebarState: SidebarState
       }
       
       interface StatsCard {
      @@ -111,7 +110,7 @@
       ]
       
       export const MainContent = forwardRef<HTMLDivElement, MainContentProps>(
      -  ({ bodyState, sidebarState }, ref) => {

      +  ({ bodyState }, ref) => {
           const contentRef = useRef<HTMLDivElement>(null)
           const cardsRef = useRef<(HTMLDivElement | null)[]>([])
           const [searchTerm, setSearchTerm] = useState("")
      @@ -282,7 +281,7 @@
                           { name: "E-commerce Platform", progress: 75, team: 5, deadline: "Dec 15" },
                           { name: "Mobile App Redesign", progress: 45, team: 3, deadline: "Jan 20" },
                           { name: "Marketing Website", progress: 90, team: 4, deadline: "Dec 5" }
      -                  ].map((project, index) => (

      +                  ].map((project) => (
                           <div key={project.name} className="p-4 bg-accent/30 rounded-lg hover:bg-accent/50 transition-colors cursor-pointer">
                             <div className="flex items-center justify-between mb-2">
                               <h4 className="font-medium">{project.name}</h4>

    patchStrategy: standard-diff
  - type: write
    path: src/components/SettingsPanel.tsx
    content: |+
      --- src/components/SettingsPanel.tsx
      +++ src/components/SettingsPanel.tsx
      @@ -1,4 +1,4 @@
      -import React, { useState } from 'react'
      +import { useState } from 'react'
       import { 
         Settings, 
         X, 

    patchStrategy: standard-diff
  - type: write
    path: src/components/TopBar.tsx
    content: |+
      --- src/components/TopBar.tsx
      +++ src/components/TopBar.tsx
      @@ -1,9 +1,8 @@
      -import React, { useState } from 'react'
      +import { useState } from 'react'
       import { 
         Menu, 
      -  X, 
         Maximize, 
         Minimize, 
         Moon, 

    patchStrategy: standard-diff
snapshot:
  package.json: |-
    {
      "name": "amazing-app-shell",
      "private": true,
      "version": "0.0.0",
      "type": "module",
      "scripts": {
        "dev": "vite",
        "build": "tsc && vite build",
        "lint": "eslint . --ext ts,tsx --report-unused-disable-directives --max-warnings 0",
        "preview": "vite preview"
      },
      "dependencies": {
        "react": "^18.2.0",
        "react-dom": "^18.2.0",
        "gsap": "^3.12.2",
        "zustand": "^4.4.7",
        "lucide-react": "^0.294.0",
        "clsx": "^2.0.0",
        "tailwind-merge": "^2.0.0",
        "class-variance-authority": "^0.7.0"
      },
      "devDependencies": {
        "@types/react": "^18.2.37",
        "@types/react-dom": "^18.2.15",
        "@typescript-eslint/eslint-plugin": "^6.10.0",
        "@typescript-eslint/parser": "^6.10.0",
        "@vitejs/plugin-react": "^4.1.1",
        "autoprefixer": "^10.4.16",
        "eslint": "^8.53.0",
        "eslint-plugin-react-hooks": "^4.6.0",
        "eslint-plugin-react-refresh": "^0.4.4",
        "postcss": "^8.4.31",
        "tailwindcss": "^3.3.5",
        "typescript": "^5.2.2",
        "vite": "^4.5.0"
      }
    }
  tsconfig.node.json: |-
    {
      "compilerOptions": {
        "composite": true,
        "skipLibCheck": true,
        "module": "ESNext",
        "moduleResolution": "bundler",
        "allowSyntheticDefaultImports": true
      },
      "include": ["vite.config.ts"]
    }
  src/demo.tsx: |
    "use client";
    import React, { useState } from "react";
    import { Sidebar, SidebarBody, SidebarLink } from "@/components/ui/sidebar";
    import { LayoutDashboard, UserCog, Settings, LogOut } from "lucide-react";
    import Link from "next/link";
    import { motion } from "framer-motion";
    import Image from "next/image";
    import { cn } from "@/lib/utils";

    export function SidebarDemo() {
      const links = [
        {
          label: "Dashboard",
          href: "#",
          icon: (
            <LayoutDashboard className="text-neutral-700 dark:text-neutral-200 h-5 w-5 flex-shrink-0" />
          ),
        },
        {
          label: "Profile",
          href: "#",
          icon: (
            <UserCog className="text-neutral-700 dark:text-neutral-200 h-5 w-5 flex-shrink-0" />
          ),
        },
        {
          label: "Settings",
          href: "#",
          icon: (
            <Settings className="text-neutral-700 dark:text-neutral-200 h-5 w-5 flex-shrink-0" />
          ),
        },
        {
          label: "Logout",
          href: "#",
          icon: (
            <LogOut className="text-neutral-700 dark:text-neutral-200 h-5 w-5 flex-shrink-0" />
          ),
        },
      ];
      const [open, setOpen] = useState(false);
      return (
        <div
          className={cn(
            "rounded-md flex flex-col md:flex-row bg-gray-100 dark:bg-neutral-800 w-full flex-1 max-w-7xl mx-auto border border-neutral-200 dark:border-neutral-700 overflow-hidden",
            "h-[60vh]" // for your use case, use `h-screen` instead of `h-[60vh]`
          )}
        >
          <Sidebar open={open} setOpen={setOpen}>
            <SidebarBody className="justify-between gap-10">
              <div className="flex flex-col flex-1 overflow-y-auto overflow-x-hidden">
                {open ? <Logo /> : <LogoIcon />}
                <div className="mt-8 flex flex-col gap-2">
                  {links.map((link, idx) => (
                    <SidebarLink key={idx} link={link} />
                  ))}
                </div>
              </div>
              <div>
                <SidebarLink
                  link={{
                    label: "Manu Arora",
                    href: "#",
                    icon: (
                      <Image
                        src="https://assets.aceternity.com/manu.png"
                        className="h-7 w-7 flex-shrink-0 rounded-full"
                        width={50}
                        height={50}
                        alt="Avatar"
                      />
                    ),
                  }}
                />
              </div>
            </SidebarBody>
          </Sidebar>
          <Dashboard />
        </div>
      );
    }

    export const Logo = () => {
      return (
        <Link
          href="#"
          className="font-normal flex space-x-2 items-center text-sm text-black py-1 relative z-20"
        >
          <div className="h-5 w-6 bg-black dark:bg-white rounded-br-lg rounded-tr-sm rounded-tl-lg rounded-bl-sm flex-shrink-0" />
          <motion.span
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            className="font-medium text-black dark:text-white whitespace-pre"
          >
            Acet Labs
          </motion.span>
        </Link>
      );
    };

    export const LogoIcon = () => {
      return (
        <Link
          href="#"
          className="font-normal flex space-x-2 items-center text-sm text-black py-1 relative z-20"
        >
          <div className="h-5 w-6 bg-black dark:bg-white rounded-br-lg rounded-tr-sm rounded-tl-lg rounded-bl-sm flex-shrink-0" />
        </Link>
      );
    };

    // Dummy dashboard component with content
    const Dashboard = () => {
      return (
        <div className="flex flex-1">
          <div className="p-2 md:p-10 rounded-tl-2xl border border-neutral-200 dark:border-neutral-700 bg-white dark:bg-neutral-900 flex flex-col gap-2 flex-1 w-full h-full">
            <div className="flex gap-2">
              {[...new Array(4)].map((i) => (
                <div
                  key={"first-array" + i}
                  className="h-20 w-full rounded-lg  bg-gray-100 dark:bg-neutral-800 animate-pulse"
                ></div>
              ))}
            </div>
            <div className="flex gap-2 flex-1">
              {[...new Array(2)].map((i) => (
                <div
                  key={"second-array" + i}
                  className="h-full w-full rounded-lg  bg-gray-100 dark:bg-neutral-800 animate-pulse"
                ></div>
              ))}
            </div>
          </div>
        </div>
      );
    };
  src/sidebar.tsx: >
    "use client";


    import { cn } from "@/lib/utils";

    import Link, { LinkProps } from "next/link";

    import React, { useState, createContext, useContext } from "react";

    import { AnimatePresence, motion } from "framer-motion";

    import { Menu, X } from "lucide-react";


    interface Links {
      label: string;
      href: string;
      icon: React.JSX.Element | React.ReactNode;
    }


    interface SidebarContextProps {
      open: boolean;
      setOpen: React.Dispatch<React.SetStateAction<boolean>>;
      animate: boolean;
    }


    const SidebarContext = createContext<SidebarContextProps | undefined>(
      undefined,
    );


    export const useSidebar = () => {
      const context = useContext(SidebarContext);
      if (!context) {
        throw new Error("useSidebar must be used within a SidebarProvider");
      }
      return context;
    };


    export const SidebarProvider = ({
      children,
      open: openProp,
      setOpen: setOpenProp,
      animate = true,
    }: {
      children: React.ReactNode;
      open?: boolean;
      setOpen?: React.Dispatch<React.SetStateAction<boolean>>;
      animate?: boolean;
    }) => {
      const [openState, setOpenState] = useState(false);

      const open = openProp !== undefined ? openProp : openState;
      const setOpen = setOpenProp !== undefined ? setOpenProp : setOpenState;

      return (
        <SidebarContext.Provider value={{ open, setOpen, animate }}>
          {children}
        </SidebarContext.Provider>
      );
    };


    export const Sidebar = ({
      children,
      open,
      setOpen,
      animate,
    }: {
      children: React.ReactNode;
      open?: boolean;
      setOpen?: React.Dispatch<React.SetStateAction<boolean>>;
      animate?: boolean;
    }) => {
      return (
        <SidebarProvider open={open} setOpen={setOpen} animate={animate}>
          {children}
        </SidebarProvider>
      );
    };


    export const SidebarBody = (props: React.ComponentProps<typeof motion.div>)
    => {
      return (
        <>
          <DesktopSidebar {...props} />
          <MobileSidebar {...(props as React.ComponentProps<"div">)} />
        </>
      );
    };


    export const DesktopSidebar = ({
      className,
      children,
      ...props
    }: React.ComponentProps<typeof motion.div>) => {
      const { open, setOpen, animate } = useSidebar();
      return (
        <motion.div
          className={cn(
            "h-full px-4 py-4 hidden md:flex md:flex-col bg-neutral-100 dark:bg-neutral-800 w-[300px] flex-shrink-0",
            className,
          )}
          animate={{
            width: animate ? (open ? "300px" : "60px") : "300px",
          }}
          onMouseEnter={() => setOpen(true)}
          onMouseLeave={() => setOpen(false)}
          {...props}
        >
          {children}
        </motion.div>
      );
    };


    export const MobileSidebar = ({
      className,
      children,
      ...props
    }: React.ComponentProps<"div">) => {
      const { open, setOpen } = useSidebar();
      return (
        <>
          <div
            className={cn(
              "h-10 px-4 py-4 flex flex-row md:hidden items-center justify-between bg-neutral-100 dark:bg-neutral-800 w-full",
            )}
            {...props}
          >
            <div className="flex justify-end z-20 w-full">
              <Menu
                className="text-neutral-800 dark:text-neutral-200 cursor-pointer"
                onClick={() => setOpen(!open)}
              />
            </div>
            <AnimatePresence>
              {open && (
                <motion.div
                  initial={{ x: "-100%", opacity: 0 }}
                  animate={{ x: 0, opacity: 1 }}
                  exit={{ x: "-100%", opacity: 0 }}
                  transition={{
                    duration: 0.3,
                    ease: "easeInOut",
                  }}
                  className={cn(
                    "fixed h-full w-full inset-0 bg-white dark:bg-neutral-900 p-10 z-[100] flex flex-col justify-between",
                    className,
                  )}
                >
                  <div
                    className="absolute right-10 top-10 z-50 text-neutral-800 dark:text-neutral-200 cursor-pointer"
                    onClick={() => setOpen(!open)}
                  >
                    <X />
                  </div>
                  {children}
                </motion.div>
              )}
            </AnimatePresence>
          </div>
        </>
      );
    };


    export const SidebarLink = ({
      link,
      className,
      ...props
    }: {
      link: Links;
      className?: string;
      props?: LinkProps;
    }) => {
      const { open, animate } = useSidebar();
      return (
        <Link
          href={link.href}
          className={cn(
            "flex items-center justify-start gap-2 group/sidebar py-2",
            className,
          )}
          {...props}
        >
          {link.icon}
          <motion.span
            animate={{
              display: animate ? (open ? "inline-block" : "none") : "inline-block",
              opacity: animate ? (open ? 1 : 0) : 1,
            }}
            className="text-neutral-700 dark:text-neutral-200 text-sm group-hover/sidebar:translate-x-1 transition duration-150 whitespace-pre inline-block !p-0 !m-0"
          >
            {link.label}
          </motion.span>
        </Link>
      );
    };
  src/components/Sidebar.tsx: |-
    import React, { forwardRef, useRef, useEffect } from 'react'
    import { gsap } from 'gsap'
    import { 
      Home, 
      Search, 
      Bell, 
      User, 
      Settings, 
      HelpCircle, 
      FileText, 
      Calendar, 
      Mail, 
      MessageSquare,
      FolderOpen,
      Bookmark,
      Download,
      Star,
      Trash2
    } from 'lucide-react'
    import { cn } from '@/lib/utils'
    import { SIDEBAR_STATES, type SidebarState } from '@/lib/utils'

    interface SidebarProps {
      state: SidebarState
      width: number
      onMouseEnter?: () => void
      onMouseLeave?: () => void
    }

    interface NavItem {
      icon: React.ReactNode
      label: string
      href: string
      badge?: number
      isActive?: boolean
    }

    interface NavSection {
      title: string
      items: NavItem[]
    }

    const navigationSections: NavSection[] = [
      {
        title: "Main",
        items: [
          { icon: <Home className="w-4 h-4" />, label: "Dashboard", href: "/", isActive: true },
          { icon: <Search className="w-4 h-4" />, label: "Search", href: "/search" },
          { icon: <Bell className="w-4 h-4" />, label: "Notifications", href: "/notifications", badge: 3 },
        ]
      },
      {
        title: "Workspace",
        items: [
          { icon: <FileText className="w-4 h-4" />, label: "Documents", href: "/documents" },
          { icon: <FolderOpen className="w-4 h-4" />, label: "Projects", href: "/projects" },
          { icon: <Calendar className="w-4 h-4" />, label: "Calendar", href: "/calendar" },
          { icon: <Mail className="w-4 h-4" />, label: "Messages", href: "/messages", badge: 12 },
        ]
      },
      {
        title: "Personal",
        items: [
          { icon: <Bookmark className="w-4 h-4" />, label: "Bookmarks", href: "/bookmarks" },
          { icon: <Star className="w-4 h-4" />, label: "Favorites", href: "/favorites" },
          { icon: <Download className="w-4 h-4" />, label: "Downloads", href: "/downloads" },
          { icon: <Trash2 className="w-4 h-4" />, label: "Trash", href: "/trash" },
        ]
      }
    ]

    const bottomNavItems: NavItem[] = [
      { icon: <User className="w-4 h-4" />, label: "Profile", href: "/profile" },
      { icon: <Settings className="w-4 h-4" />, label: "Settings", href: "/settings" },
      { icon: <HelpCircle className="w-4 h-4" />, label: "Help", href: "/help" },
    ]

    export const Sidebar = forwardRef<HTMLDivElement, SidebarProps>(
      ({ state, width, onMouseEnter, onMouseLeave }, ref) => {
        const contentRef = useRef<HTMLDivElement>(null)
        const sectionsRef = useRef<(HTMLDivElement | null)[]>([])
        const itemsRef = useRef<(HTMLDivElement | null)[]>([])

        const isCollapsed = state === SIDEBAR_STATES.COLLAPSED
        const isHidden = state === SIDEBAR_STATES.HIDDEN
        const isPeek = state === SIDEBAR_STATES.PEEK

        // Animate content visibility
        useEffect(() => {
          if (!contentRef.current) return

          const labels = contentRef.current.querySelectorAll('.nav-label')
          const badges = contentRef.current.querySelectorAll('.nav-badge')
          const sectionTitles = contentRef.current.querySelectorAll('.section-title')

          if (isCollapsed) {
            gsap.to([labels, badges, sectionTitles], {
              opacity: 0,
              scale: 0.8,
              duration: 0.2,
              ease: "power2.out"
            })
          } else {
            gsap.to([labels, badges, sectionTitles], {
              opacity: 1,
              scale: 1,
              duration: 0.3,
              delay: 0.1,
              ease: "power2.out"
            })
          }
        }, [isCollapsed])

        // Hover animations for nav items
        const handleItemHover = (index: number, isHovering: boolean) => {
          const item = itemsRef.current[index]
          if (!item) return

          gsap.to(item, {
            scale: isHovering ? 1.02 : 1,
            x: isHovering ? 4 : 0,
            duration: 0.2,
            ease: "power2.out"
          })
        }

        if (isHidden) {
          return null
        }

        return (
          <div
            ref={ref}
            className={cn(
              "relative bg-card border-r border-border flex-shrink-0 transition-all duration-300",
              "h-full overflow-hidden",
              isPeek && "shadow-xl z-40"
            )}
            style={{ width }}
            onMouseEnter={onMouseEnter}
            onMouseLeave={onMouseLeave}
          >
            {/* Background blur effect for peek mode */}
            {isPeek && (
              <div className="absolute inset-0 bg-background/80 backdrop-blur-sm" />
            )}

            <div 
              ref={contentRef}
              className="relative z-10 h-full flex flex-col py-6"
            >
              {/* Navigation Sections */}
              <div className="flex-1 overflow-y-auto overflow-x-hidden px-3 space-y-6">
                {navigationSections.map((section, sectionIndex) => (
                  <div 
                    key={section.title}
                    ref={el => sectionsRef.current[sectionIndex] = el}
                    className="space-y-1"
                  >
                    {!isCollapsed && (
                      <h3 className="section-title px-3 text-xs font-semibold text-muted-foreground uppercase tracking-wider">
                        {section.title}
                      </h3>
                    )}
                    
                    <nav className="space-y-1">
                      {section.items.map((item, itemIndex) => {
                        const globalIndex = sectionIndex * 10 + itemIndex
                        return (
                          <div
                            key={item.label}
                            ref={el => itemsRef.current[globalIndex] = el}
                            className={cn(
                              "group relative flex items-center gap-3 px-3 py-2 rounded-lg cursor-pointer transition-all duration-200",
                              "hover:bg-accent/50",
                              item.isActive && "bg-primary text-primary-foreground hover:bg-primary/90"
                            )}
                            onMouseEnter={() => handleItemHover(globalIndex, true)}
                            onMouseLeave={() => handleItemHover(globalIndex, false)}
                          >
                            <div className="flex-shrink-0">
                              {item.icon}
                            </div>
                            
                            {!isCollapsed && (
                              <>
                                <span className="nav-label flex-1 text-sm font-medium truncate">
                                  {item.label}
                                </span>
                                
                                {item.badge && (
                                  <span className="nav-badge bg-destructive text-destructive-foreground text-xs px-1.5 py-0.5 rounded-full min-w-[1.25rem] text-center">
                                    {item.badge > 99 ? '99+' : item.badge}
                                  </span>
                                )}
                              </>
                            )}

                            {/* Tooltip for collapsed state */}
                            {isCollapsed && (
                              <div className="absolute left-full ml-2 px-2 py-1 bg-popover text-popover-foreground text-sm rounded-md shadow-lg opacity-0 group-hover:opacity-100 transition-opacity pointer-events-none whitespace-nowrap z-50">
                                {item.label}
                                {item.badge && (
                                  <span className="ml-2 bg-destructive text-destructive-foreground text-xs px-1.5 py-0.5 rounded-full">
                                    {item.badge > 99 ? '99+' : item.badge}
                                  </span>
                                )}
                              </div>
                            )}
                          </div>
                        )
                      })}
                    </nav>
                  </div>
                ))}
              </div>

              {/* Bottom Navigation */}
              <div className="px-3 pt-6 border-t border-border">
                <nav className="space-y-1">
                  {bottomNavItems.map((item, index) => (
                    <div
                      key={item.label}
                      className={cn(
                        "group relative flex items-center gap-3 px-3 py-2 rounded-lg cursor-pointer transition-all duration-200",
                        "hover:bg-accent/50"
                      )}
                      onMouseEnter={() => handleItemHover(100 + index, true)}
                      onMouseLeave={() => handleItemHover(100 + index, false)}
                    >
                      <div className="flex-shrink-0">
                        {item.icon}
                      </div>
                      
                      {!isCollapsed && (
                        <span className="nav-label flex-1 text-sm font-medium truncate">
                          {item.label}
                        </span>
                      )}

                      {/* Tooltip for collapsed state */}
                      {isCollapsed && (
                        <div className="absolute left-full ml-2 px-2 py-1 bg-popover text-popover-foreground text-sm rounded-md shadow-lg opacity-0 group-hover:opacity-100 transition-opacity pointer-events-none whitespace-nowrap z-50">
                          {item.label}
                        </div>
                      )}
                    </div>
                  ))}
                </nav>

                {/* User Profile */}
                {!isCollapsed && (
                  <div className="mt-6 p-3 bg-accent/30 rounded-lg">
                    <div className="flex items-center gap-3">
                      <div className="w-8 h-8 bg-primary rounded-full flex items-center justify-center">
                        <User className="w-4 h-4 text-primary-foreground" />
                      </div>
                      <div className="flex-1 min-w-0">
                        <p className="text-sm font-medium truncate">John Doe</p>
                        <p className="text-xs text-muted-foreground truncate">john@example.com</p>
                      </div>
                    </div>
                  </div>
                )}
              </div>
            </div>
          </div>
        )
      }
    )
  src/components/index.ts: |-
    export { AppShell } from './AppShell'
    export { Sidebar } from './Sidebar'
    export { TopBar } from './TopBar'
    export { MainContent } from './MainContent'
  src/App.tsx: |-
    import React from 'react'
    import { AppShell } from './components/AppShell'
    import './index.css'

    function App() {
      return (
        <div className="h-screen w-screen overflow-hidden bg-background">
          <AppShell />
        </div>
      )
    }

    export default App
  src/components/AppShell.tsx: |-
    import React, { useRef, useEffect } from 'react'
    import { gsap } from 'gsap'
    import { cn } from '@/lib/utils'
    import { EnhancedSidebar } from './EnhancedSidebar'
    import { MainContent } from './MainContent'
    import { TopBar } from './TopBar'
    import { useAppStore } from '@/store/appStore'
    import { SIDEBAR_STATES, BODY_STATES } from '@/lib/utils'

    export function AppShell() {
      const {
        sidebarState,
        bodyState,
        sidebarWidth,
        isDarkMode,
        isResizing,
        setSidebarState,
        setIsResizing,
        setSidebarWidth,
        toggleSidebar,
        hideSidebar,
        showSidebar,
        peekSidebar,
        toggleFullscreen,
        toggleSidePane,
        toggleDarkMode,
        reducedMotion
      } = useAppStore()
      
      const appRef = useRef<HTMLDivElement>(null)
      const sidebarRef = useRef<HTMLDivElement>(null)
      const mainContentRef = useRef<HTMLDivElement>(null)
      const resizeHandleRef = useRef<HTMLDivElement>(null)

      // Animation duration based on reduced motion preference
      const animationDuration = reducedMotion ? 0.1 : 0.4

      // Resize functionality
      useEffect(() => {
        const handleMouseMove = (e: MouseEvent) => {
          if (!isResizing) return
          
          const newWidth = Math.max(200, Math.min(500, e.clientX))
          setSidebarWidth(newWidth)
          
          if (sidebarRef.current) {
            gsap.set(sidebarRef.current, { width: newWidth })
          }
        }

        const handleMouseUp = () => {
          setIsResizing(false)
          document.body.style.cursor = ''
          document.body.style.userSelect = ''
        }

        if (isResizing) {
          document.body.style.cursor = 'col-resize'
          document.body.style.userSelect = 'none'
          document.addEventListener('mousemove', handleMouseMove)
          document.addEventListener('mouseup', handleMouseUp)
        }

        return () => {
          document.removeEventListener('mousemove', handleMouseMove)
          document.removeEventListener('mouseup', handleMouseUp)
        }
      }, [isResizing])

      // GSAP animations for sidebar transitions
      useEffect(() => {
        if (!sidebarRef.current || !mainContentRef.current) return

        const sidebar = sidebarRef.current
        const mainContent = mainContentRef.current
        
        let targetWidth = 0
        let targetOpacity = 1
        let targetX = 0

        switch (sidebarState) {
          case SIDEBAR_STATES.HIDDEN:
            targetWidth = 0
            targetOpacity = 0
            targetX = -100
            break
          case SIDEBAR_STATES.COLLAPSED:
            targetWidth = 64
            targetOpacity = 1
            targetX = 0
            break
          case SIDEBAR_STATES.EXPANDED:
            targetWidth = sidebarWidth
            targetOpacity = 1
            targetX = 0
            break
          case SIDEBAR_STATES.PEEK:
            targetWidth = sidebarWidth * 0.8
            targetOpacity = 0.95
            targetX = 0
            break
        }

        const tl = gsap.timeline({ ease: "power3.out" })
        
        tl.to(sidebar, {
          width: targetWidth,
          opacity: targetOpacity,
          x: `${targetX}%`,
          duration: animationDuration,
        })
        // Don't animate margin in the new layout structure

      }, [sidebarState, sidebarWidth, bodyState])

      // GSAP animations for body state transitions
      useEffect(() => {
        if (!mainContentRef.current) return

        const mainContent = mainContentRef.current
        
        switch (bodyState) {
          case BODY_STATES.FULLSCREEN:
            // In fullscreen, hide sidebar completely
            if (sidebarRef.current) {
              gsap.to(sidebarRef.current, {
                x: '-100%',
                duration: animationDuration,
                ease: "power3.out"
              })
            }
            break
          case BODY_STATES.SIDE_PANE:
            // In side pane, make sidebar narrower and content takes remaining space
            if (sidebarRef.current) {
              const narrowWidth = Math.min(sidebarWidth * 0.7, 200)
              gsap.to(sidebarRef.current, {
                width: narrowWidth,
                x: 0,
                duration: animationDuration,
                ease: "power3.out"
              })
            }
            break
          default:
            // Normal state - restore sidebar
            if (sidebarRef.current) {
              gsap.to(sidebarRef.current, {
                x: 0,
                duration: animationDuration,
                ease: "power3.out"
              })
            }
            break
        }
      }, [bodyState, sidebarState, sidebarWidth, animationDuration])

      return (
        <div 
          ref={appRef}
          className={cn(
            "relative h-screen w-screen overflow-hidden bg-background transition-colors duration-300",
            isDarkMode && "dark"
          )}
        >
          <div className="flex h-screen overflow-hidden">
            {/* Enhanced Sidebar */}
            <EnhancedSidebar
              ref={sidebarRef}
              onMouseEnter={() => {
                if (sidebarState === SIDEBAR_STATES.COLLAPSED) {
                  peekSidebar()
                }
              }}
              onMouseLeave={() => {
                if (sidebarState === SIDEBAR_STATES.PEEK) {
                  setSidebarState(SIDEBAR_STATES.COLLAPSED)
                }
              }}
            />

            {/* Resize Handle */}
            {sidebarState !== SIDEBAR_STATES.HIDDEN && (
              <div
                ref={resizeHandleRef}
                className={cn(
                  "absolute top-0 w-1 h-full bg-transparent hover:bg-emerald-500/20 cursor-col-resize z-50 transition-colors",
                  "group"
                )}
                style={{ 
                  left: sidebarState === SIDEBAR_STATES.COLLAPSED ? 64 : sidebarWidth 
                }}
                onMouseDown={() => setIsResizing(true)}
              >
                <div className="w-full h-full bg-transparent group-hover:bg-emerald-500/40 transition-colors" />
              </div>
            )}

            {/* Main Content Area */}
            <div className="flex-1 flex flex-col overflow-hidden">
              {/* Top Bar */}
              <TopBar
                sidebarState={sidebarState}
                bodyState={bodyState}
                isDarkMode={isDarkMode}
                onToggleSidebar={toggleSidebar}
                onToggleFullscreen={toggleFullscreen}
                onToggleSidePane={toggleSidePane}
                onToggleDarkMode={toggleDarkMode}
                onHideSidebar={hideSidebar}
                onShowSidebar={showSidebar}
                onPeekSidebar={peekSidebar}
              />
              
              {/* Main Content */}
              <MainContent
                ref={mainContentRef}
                bodyState={bodyState}
                sidebarState={sidebarState}
              />
            </div>
          </div>
        </div>
      )
    }
  src/components/DemoContent.tsx: |-
    import React, { useRef, useEffect } from 'react'
    import { gsap } from 'gsap'
    import { 
      Sparkles, 
      Zap, 
      Rocket, 
      Star, 
      Heart,
      Layers,
      Code,
      Palette,
      Smartphone,
      Monitor,
      Settings
    } from 'lucide-react'
    import { cn } from '@/lib/utils'
    import { useAppStore } from '@/store/appStore'

    export function DemoContent() {
      const { bodyState, sidebarState, isDarkMode, compactMode } = useAppStore()
      const contentRef = useRef<HTMLDivElement>(null)
      const cardsRef = useRef<(HTMLDivElement | null)[]>([])

      useEffect(() => {
        if (!contentRef.current) return

        const cards = cardsRef.current.filter(Boolean)
        
        // Animate cards on mount
        gsap.fromTo(cards, 
          { y: 30, opacity: 0, scale: 0.95 },
          { 
            y: 0, 
            opacity: 1, 
            scale: 1,
            duration: 0.6,
            stagger: 0.1,
            ease: "power3.out"
          }
        )
      }, [])

      const features = [
        {
          icon: <Sparkles className="w-6 h-6" />,
          title: "Amazing Animations",
          description: "Powered by GSAP for smooth, buttery animations",
          color: "from-emerald-500 to-teal-500"
        },
        {
          icon: <Zap className="w-6 h-6" />,
          title: "Lightning Fast",
          description: "Built with Vite and optimized for performance",
          color: "from-amber-500 to-orange-500"
        },
        {
          icon: <Layers className="w-6 h-6" />,
          title: "Multiple States",
          description: "Fullscreen, side pane, and normal viewing modes",
          color: "from-emerald-500 to-green-500"
        },
        {
          icon: <Code className="w-6 h-6" />,
          title: "TypeScript",
          description: "Fully typed with excellent developer experience",
          color: "from-green-500 to-emerald-500"
        },
        {
          icon: <Palette className="w-6 h-6" />,
          title: "Beautiful Design",
          description: "Shadcn/ui components with Tailwind CSS",
          color: "from-teal-500 to-emerald-500"
        },
        {
          icon: <Settings className="w-6 h-6" />,
          title: "Customizable",
          description: "Extensive settings and preferences panel",
          color: "from-slate-500 to-gray-500"
        }
      ]

      const stats = [
        { label: "Components", value: "12+", color: "text-emerald-600" },
        { label: "Animations", value: "25+", color: "text-teal-600" },
        { label: "States", value: "7", color: "text-green-600" },
        { label: "Settings", value: "10+", color: "text-amber-600" }
      ]

      return (
        <div ref={contentRef} className="p-8 space-y-8">
          {/* Hero Section */}
          <div className="text-center space-y-4">
            <div className="flex items-center justify-center gap-2 mb-4">
              <Rocket className="w-8 h-8 text-primary" />
              <h1 className="text-4xl font-bold bg-gradient-to-r from-emerald-600 to-emerald-400 bg-clip-text text-transparent">
                Amazing App Shell
              </h1>
            </div>
            <p className="text-xl text-muted-foreground max-w-2xl mx-auto">
              A super amazing application shell with resizable sidebar, multiple body states, 
              beautiful animations, and comprehensive settings - all built with modern web technologies.
            </p>
            
            {/* Quick Stats */}
            <div className="flex items-center justify-center gap-8 mt-8">
              {stats.map((stat, index) => (
                <div key={stat.label} className="text-center">
                  <div className={cn("text-2xl font-bold", stat.color)}>{stat.value}</div>
                  <div className="text-sm text-muted-foreground">{stat.label}</div>
                </div>
              ))}
            </div>
          </div>

          {/* Feature Cards */}
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {features.map((feature, index) => (
              <div
                key={feature.title}
                ref={el => cardsRef.current[index] = el}
                className="group relative overflow-hidden rounded-xl bg-card border border-border p-6 hover:shadow-xl transition-all duration-300 cursor-pointer"
              >
                <div className={cn(
                  "absolute inset-0 bg-gradient-to-br opacity-0 group-hover:opacity-10 transition-opacity",
                  feature.color
                )} />
                
                <div className="relative z-10">
                  <div className={cn(
                    "w-12 h-12 rounded-lg bg-gradient-to-br flex items-center justify-center text-white mb-4 group-hover:scale-110 transition-transform",
                    feature.color
                  )}>
                    {feature.icon}
                  </div>
                  
                  <h3 className="text-lg font-semibold mb-2">{feature.title}</h3>
                  <p className="text-muted-foreground text-sm">{feature.description}</p>
                </div>
              </div>
            ))}
          </div>

          {/* Technology Stack */}
          <div className="bg-accent/30 rounded-xl p-6">
            <h2 className="text-2xl font-bold mb-6 flex items-center gap-2">
              <Star className="w-6 h-6 text-yellow-500" />
              Technology Stack
            </h2>
            
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
              {[
                { name: "React 18", desc: "Latest React with hooks" },
                { name: "TypeScript", desc: "Type-safe development" },
                { name: "Vite", desc: "Lightning fast build tool" },
                { name: "Tailwind CSS", desc: "Utility-first styling" },
                { name: "GSAP", desc: "Professional animations" },
                { name: "Zustand", desc: "Lightweight state management" },
                { name: "Shadcn/ui", desc: "Beautiful components" },
                { name: "Lucide Icons", desc: "Consistent iconography" }
              ].map((tech) => (
                <div key={tech.name} className="bg-background rounded-lg p-4 border border-border">
                  <h4 className="font-medium">{tech.name}</h4>
                  <p className="text-sm text-muted-foreground">{tech.desc}</p>
                </div>
              ))}
            </div>
          </div>

          {/* Current State Display */}
          <div className="bg-primary/5 rounded-xl p-6 border border-primary/20">
            <h2 className="text-xl font-bold mb-4 flex items-center gap-2">
              <Monitor className="w-5 h-5" />
              Current App State
            </h2>
            
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
              <div className="text-center p-3 bg-background rounded-lg">
                <div className="text-sm text-muted-foreground">Sidebar</div>
                <div className="font-medium capitalize">{sidebarState}</div>
              </div>
              <div className="text-center p-3 bg-background rounded-lg">
                <div className="text-sm text-muted-foreground">Body State</div>
                <div className="font-medium capitalize">{bodyState.replace('_', ' ')}</div>
              </div>
              <div className="text-center p-3 bg-background rounded-lg">
                <div className="text-sm text-muted-foreground">Theme</div>
                <div className="font-medium">{isDarkMode ? 'Dark' : 'Light'}</div>
              </div>
              <div className="text-center p-3 bg-background rounded-lg">
                <div className="text-sm text-muted-foreground">Mode</div>
                <div className="font-medium">{compactMode ? 'Compact' : 'Normal'}</div>
              </div>
            </div>
          </div>

          {/* Interactive Demo */}
          <div className="text-center space-y-4">
            <h2 className="text-2xl font-bold flex items-center justify-center gap-2">
              <Heart className="w-6 h-6 text-red-500" />
              Try It Out!
            </h2>
            <p className="text-muted-foreground">
              Use the controls in the top bar to explore different states, toggle the sidebar, 
              or open settings to customize the experience. The sidebar is resizable by dragging the edge!
            </p>
            
            <div className="flex items-center justify-center gap-4 pt-4">
              <div className="flex items-center gap-2 text-sm text-muted-foreground">
                <Smartphone className="w-4 h-4" />
                <span>Responsive</span>
              </div>
              <div className="flex items-center gap-2 text-sm text-muted-foreground">
                <Zap className="w-4 h-4" />
                <span>Fast</span>
              </div>
              <div className="flex items-center gap-2 text-sm text-muted-foreground">
                <Star className="w-4 h-4" />
                <span>Beautiful</span>
              </div>
            </div>
          </div>
        </div>
      )
    }
  src/components/EnhancedSidebar.tsx: |-
    import React, { forwardRef, useRef, useEffect } from 'react'
    import { gsap } from 'gsap'
    import { 
      Home, 
      Search, 
      Bell, 
      User, 
      Settings, 
      HelpCircle, 
      FileText, 
      Calendar, 
      Mail, 
      MessageSquare,
      FolderOpen,
      Bookmark,
      Download,
      Star,
      Trash2,
      ChevronDown,
      Plus,
      Command
    } from 'lucide-react'
    import { cn } from '@/lib/utils'
    import { useAppStore } from '@/store/appStore'
    import { SIDEBAR_STATES } from '@/lib/utils'

    interface NavItem {
      icon: React.ReactNode
      label: string
      href: string
      badge?: number
      isActive?: boolean
      children?: NavItem[]
    }

    interface NavSection {
      title: string
      items: NavItem[]
      collapsible?: boolean
      defaultExpanded?: boolean
    }

    const navigationSections: NavSection[] = [
      {
        title: "Main",
        items: [
          { icon: <Home className="w-4 h-4" />, label: "Dashboard", href: "/", isActive: true },
          { icon: <Search className="w-4 h-4" />, label: "Search", href: "/search" },
          { icon: <Bell className="w-4 h-4" />, label: "Notifications", href: "/notifications", badge: 3 },
        ]
      },
      {
        title: "Workspace",
        collapsible: true,
        defaultExpanded: true,
        items: [
          { 
            icon: <FileText className="w-4 h-4" />, 
            label: "Documents", 
            href: "/documents",
            children: [
              { icon: <FileText className="w-3 h-3" />, label: "Recent", href: "/documents/recent" },
              { icon: <Star className="w-3 h-3" />, label: "Starred", href: "/documents/starred" },
              { icon: <Trash2 className="w-3 h-3" />, label: "Trash", href: "/documents/trash" },
            ]
          },
          { icon: <FolderOpen className="w-4 h-4" />, label: "Projects", href: "/projects" },
          { icon: <Calendar className="w-4 h-4" />, label: "Calendar", href: "/calendar" },
          { icon: <Mail className="w-4 h-4" />, label: "Messages", href: "/messages", badge: 12 },
        ]
      },
      {
        title: "Personal",
        collapsible: true,
        defaultExpanded: false,
        items: [
          { icon: <Bookmark className="w-4 h-4" />, label: "Bookmarks", href: "/bookmarks" },
          { icon: <Star className="w-4 h-4" />, label: "Favorites", href: "/favorites" },
          { icon: <Download className="w-4 h-4" />, label: "Downloads", href: "/downloads" },
        ]
      }
    ]

    const bottomNavItems: NavItem[] = [
      { icon: <User className="w-4 h-4" />, label: "Profile", href: "/profile" },
      { icon: <Settings className="w-4 h-4" />, label: "Settings", href: "/settings" },
      { icon: <HelpCircle className="w-4 h-4" />, label: "Help", href: "/help" },
    ]

    interface SidebarProps {
      onMouseEnter?: () => void
      onMouseLeave?: () => void
    }

    export const EnhancedSidebar = forwardRef<HTMLDivElement, SidebarProps>(
      ({ onMouseEnter, onMouseLeave }, ref) => {
        const { sidebarState, sidebarWidth, reducedMotion, compactMode } = useAppStore()
        const contentRef = useRef<HTMLDivElement>(null)
        const sectionsRef = useRef<(HTMLDivElement | null)[]>([])
        const [expandedSections, setExpandedSections] = React.useState<Set<string>>(
          new Set(navigationSections.filter(s => s.defaultExpanded).map(s => s.title))
        )

        const isCollapsed = sidebarState === SIDEBAR_STATES.COLLAPSED
        const isHidden = sidebarState === SIDEBAR_STATES.HIDDEN
        const isPeek = sidebarState === SIDEBAR_STATES.PEEK
        const animationDuration = reducedMotion ? 0.1 : 0.3

        // Toggle section expansion
        const toggleSection = (sectionTitle: string) => {
          setExpandedSections(prev => {
            const newSet = new Set(prev)
            if (newSet.has(sectionTitle)) {
              newSet.delete(sectionTitle)
            } else {
              newSet.add(sectionTitle)
            }
            return newSet
          })
        }

        // Animate content visibility
        useEffect(() => {
          if (!contentRef.current) return

          const labels = contentRef.current.querySelectorAll('.nav-label')
          const badges = contentRef.current.querySelectorAll('.nav-badge')
          const sectionTitles = contentRef.current.querySelectorAll('.section-title')
          const chevrons = contentRef.current.querySelectorAll('.section-chevron')

          if (isCollapsed) {
            gsap.to([labels, badges, sectionTitles, chevrons], {
              opacity: 0,
              scale: 0.8,
              duration: animationDuration,
              ease: "power2.out"
            })
          } else {
            gsap.to([labels, badges, sectionTitles, chevrons], {
              opacity: 1,
              scale: 1,
              duration: animationDuration,
              delay: 0.1,
              ease: "power2.out"
            })
          }
        }, [isCollapsed, animationDuration])

        // Hover animations for nav items
        const handleItemHover = (element: HTMLElement, isHovering: boolean) => {
          if (!element) return

          gsap.to(element, {
            scale: isHovering ? 1.02 : 1,
            x: isHovering ? 4 : 0,
            duration: animationDuration,
            ease: "power2.out"
          })
        }

        if (isHidden) {
          return null
        }

        const renderNavItem = (item: NavItem, depth = 0) => (
          <div key={item.label} className={cn("space-y-1", depth > 0 && "ml-6")}>
            <div
              className={cn(
                "group relative flex items-center gap-3 rounded-lg cursor-pointer transition-all duration-200",
                compactMode ? "px-2 py-1" : "px-3 py-2",
                "hover:bg-accent/50",
                item.isActive && "bg-primary text-primary-foreground hover:bg-primary/90",
                depth > 0 && "text-sm"
              )}
              onMouseEnter={(e) => handleItemHover(e.currentTarget, true)}
              onMouseLeave={(e) => handleItemHover(e.currentTarget, false)}
            >
              <div className="flex-shrink-0">
                {item.icon}
              </div>
              
              {!isCollapsed && (
                <>
                  <span className="nav-label flex-1 font-medium truncate">
                    {item.label}
                  </span>
                  
                  {item.badge && (
                    <span className="nav-badge bg-destructive text-destructive-foreground text-xs px-1.5 py-0.5 rounded-full min-w-[1.25rem] text-center">
                      {item.badge > 99 ? '99+' : item.badge}
                    </span>
                  )}

                  {item.children && (
                    <ChevronDown className="w-3 h-3 transition-transform" />
                  )}
                </>
              )}

              {/* Tooltip for collapsed state */}
              {isCollapsed && (
                <div className="absolute left-full ml-2 px-2 py-1 bg-popover text-popover-foreground text-sm rounded-md shadow-lg opacity-0 group-hover:opacity-100 transition-opacity pointer-events-none whitespace-nowrap z-50">
                  {item.label}
                  {item.badge && (
                    <span className="ml-2 bg-destructive text-destructive-foreground text-xs px-1.5 py-0.5 rounded-full">
                      {item.badge > 99 ? '99+' : item.badge}
                    </span>
                  )}
                </div>
              )}
            </div>

            {/* Children items */}
            {item.children && !isCollapsed && (
              <div className="space-y-1">
                {item.children.map(child => renderNavItem(child, depth + 1))}
              </div>
            )}
          </div>
        )

        return (
          <div
            ref={ref}
            className={cn(
              "relative bg-card border-r border-border flex-shrink-0 transition-all duration-300",
              "h-full overflow-hidden",
              isPeek && "shadow-xl z-40",
              compactMode && "text-sm"
            )}
            style={{ width: sidebarWidth }}
            onMouseEnter={onMouseEnter}
            onMouseLeave={onMouseLeave}
          >
            {/* Background blur effect for peek mode */}
            {isPeek && (
              <div className="absolute inset-0 bg-background/80 backdrop-blur-sm" />
            )}

            <div 
              ref={contentRef}
              className={cn(
                "relative z-10 h-full flex flex-col",
                compactMode ? "py-4" : "py-6"
              )}
            >
              {/* Quick Actions Bar */}
              {!isCollapsed && (
                <div className="px-3 pb-4 border-b border-border">
                  <div className="flex gap-2">
                    <button className="flex-1 flex items-center justify-center gap-2 px-2 py-1.5 bg-emerald-600 text-white rounded-lg hover:bg-emerald-700 transition-colors text-sm">
                      <Plus className="w-3 h-3" />
                      New
                    </button>
                    <button className="p-1.5 hover:bg-accent rounded-lg transition-colors">
                      <Command className="w-3 h-3" />
                    </button>
                  </div>
                </div>
              )}

              {/* Navigation Sections */}
              <div className="flex-1 overflow-y-auto overflow-x-hidden px-3 space-y-6">
                {navigationSections.map((section, sectionIndex) => {
                  const isExpanded = expandedSections.has(section.title)
                  
                  return (
                    <div 
                      key={section.title}
                      ref={el => sectionsRef.current[sectionIndex] = el}
                      className="space-y-1"
                    >
                      {!isCollapsed && (
                        <div 
                          className={cn(
                            "flex items-center justify-between px-3 text-xs font-semibold text-muted-foreground uppercase tracking-wider",
                            section.collapsible && "cursor-pointer hover:text-foreground transition-colors"
                          )}
                          onClick={() => section.collapsible && toggleSection(section.title)}
                        >
                          <span className="section-title">{section.title}</span>
                          {section.collapsible && (
                            <ChevronDown 
                              className={cn(
                                "section-chevron w-3 h-3 transition-transform",
                                isExpanded ? "rotate-0" : "-rotate-90"
                              )} 
                            />
                          )}
                        </div>
                      )}
                      
                      {(!section.collapsible || isExpanded || isCollapsed) && (
                        <nav className="space-y-1">
                          {section.items.map(item => renderNavItem(item))}
                        </nav>
                      )}
                    </div>
                  )
                })}
              </div>

              {/* Bottom Navigation */}
              <div className={cn("px-3 pt-6 border-t border-border", compactMode && "pt-4")}>
                <nav className="space-y-1">
                  {bottomNavItems.map((item) => renderNavItem(item))}
                </nav>

                {/* User Profile */}
                {!isCollapsed && (
                  <div className={cn("mt-6 p-3 bg-accent/30 rounded-lg", compactMode && "mt-4 p-2")}>
                    <div className="flex items-center gap-3">
                      <div className={cn("bg-primary rounded-full flex items-center justify-center", compactMode ? "w-6 h-6" : "w-8 h-8")}>
                        <User className={cn("text-primary-foreground", compactMode ? "w-3 h-3" : "w-4 h-4")} />
                      </div>
                      <div className="flex-1 min-w-0">
                        <p className={cn("font-medium truncate", compactMode ? "text-xs" : "text-sm")}>John Doe</p>
                        <p className={cn("text-muted-foreground truncate", compactMode ? "text-xs" : "text-xs")}>john@example.com</p>
                      </div>
                    </div>
                  </div>
                )}
              </div>
            </div>
          </div>
        )
      }
    )

    EnhancedSidebar.displayName = "EnhancedSidebar"
  src/components/MainContent.tsx: >-
    import React, { forwardRef, useRef, useEffect, useState } from 'react'

    import { gsap } from 'gsap'

    import { 
      BarChart3, 
      TrendingUp, 
      Users, 
      DollarSign, 
      Activity,
      Calendar,
      Clock,
      MessageSquare,
      FileText,
      Star,
      ChevronRight,
      Plus,
      Filter,
      Search,
      MoreVertical
    } from 'lucide-react'

    import { cn } from '@/lib/utils'

    import { BODY_STATES, SIDEBAR_STATES, type BodyState, type SidebarState }
    from '@/lib/utils'

    import { DemoContent } from './DemoContent'


    interface MainContentProps {
      bodyState: BodyState
      sidebarState: SidebarState
    }


    interface StatsCard {
      title: string
      value: string
      change: string
      trend: 'up' | 'down'
      icon: React.ReactNode
    }


    interface ActivityItem {
      id: string
      type: 'comment' | 'file' | 'meeting' | 'task'
      title: string
      description: string
      time: string
      user: string
    }


    const statsCards: StatsCard[] = [
      {
        title: "Total Revenue",
        value: "$45,231.89",
        change: "+20.1%",
        trend: "up",
        icon: <DollarSign className="w-4 h-4" />
      },
      {
        title: "Active Users",
        value: "2,350",
        change: "+180.1%",
        trend: "up",
        icon: <Users className="w-4 h-4" />
      },
      {
        title: "Conversion Rate",
        value: "12.5%",
        change: "+19%",
        trend: "up",
        icon: <TrendingUp className="w-4 h-4" />
      },
      {
        title: "Performance",
        value: "573ms",
        change: "-5.3%",
        trend: "down",
        icon: <Activity className="w-4 h-4" />
      }
    ]


    const recentActivity: ActivityItem[] = [
      {
        id: "1",
        type: "comment",
        title: "New comment on Project Alpha",
        description: "Sarah Johnson added a comment to the design review",
        time: "2 minutes ago",
        user: "SJ"
      },
      {
        id: "2",
        type: "file",
        title: "Document uploaded",
        description: "quarterly-report.pdf was uploaded to Documents",
        time: "15 minutes ago",
        user: "MD"
      },
      {
        id: "3",
        type: "meeting",
        title: "Meeting scheduled",
        description: "Weekly standup meeting scheduled for tomorrow 9 AM",
        time: "1 hour ago",
        user: "RW"
      },
      {
        id: "4",
        type: "task",
        title: "Task completed",
        description: "UI wireframes for mobile app completed",
        time: "2 hours ago",
        user: "AL"
      }
    ]


    export const MainContent = forwardRef<HTMLDivElement, MainContentProps>(
      ({ bodyState, sidebarState }, ref) => {
        const contentRef = useRef<HTMLDivElement>(null)
        const cardsRef = useRef<(HTMLDivElement | null)[]>([])
        const [searchTerm, setSearchTerm] = useState("")

        // Animate content based on body state
        useEffect(() => {
          if (!contentRef.current) return

          const content = contentRef.current
          const cards = cardsRef.current.filter(Boolean)

          switch (bodyState) {
            case BODY_STATES.FULLSCREEN:
              gsap.to(content, {
                scale: 1.02,
                duration: 0.4,
                ease: "power3.out"
              })
              break
            case BODY_STATES.SIDE_PANE:
              gsap.to(content, {
                scale: 0.98,
                duration: 0.4,
                ease: "power3.out"
              })
              break
            default:
              gsap.to(content, {
                scale: 1,
                duration: 0.4,
                ease: "power3.out"
              })
              break
          }

          // Stagger animation for cards
          gsap.fromTo(cards, 
            { y: 20, opacity: 0 },
            { 
              y: 0, 
              opacity: 1, 
              duration: 0.6,
              stagger: 0.1,
              ease: "power3.out"
            }
          )

        }, [bodyState])

        const getTypeIcon = (type: ActivityItem['type']) => {
          switch (type) {
            case 'comment':
              return <MessageSquare className="w-4 h-4" />
            case 'file':
              return <FileText className="w-4 h-4" />
            case 'meeting':
              return <Calendar className="w-4 h-4" />
            case 'task':
              return <Star className="w-4 h-4" />
            default:
              return <Activity className="w-4 h-4" />
          }
        }

        return (
          <div
            ref={ref}
            className={cn(
              "flex-1 h-[calc(100vh-64px)] overflow-hidden transition-all duration-300",
              bodyState === BODY_STATES.FULLSCREEN && "bg-background",
              bodyState === BODY_STATES.SIDE_PANE && "bg-muted/30"
            )}
          >
            <div 
              ref={contentRef}
              className="h-full overflow-y-auto p-6 space-y-6"
            >
              {/* Header */}
              <div className="flex items-center justify-between">
                <div>
                  <h1 className="text-3xl font-bold tracking-tight">Dashboard</h1>
                  <p className="text-muted-foreground">
                    Welcome to the amazing app shell demo! Explore all the features and customization options.
                  </p>
                </div>
                
                <div className="flex items-center gap-2">
                  <div className="relative">
                    <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4" />
                    <input
                      type="text"
                      placeholder="Search..."
                      value={searchTerm}
                      onChange={(e) => setSearchTerm(e.target.value)}
                      className="pl-9 pr-4 py-2 border border-border rounded-lg bg-background focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent"
                    />
                  </div>
                  <button className="p-2 hover:bg-accent rounded-lg transition-colors">
                    <Filter className="w-4 h-4" />
                  </button>
                  <button className="bg-primary text-primary-foreground px-4 py-2 rounded-lg hover:bg-primary/90 transition-colors flex items-center gap-2">
                    <Plus className="w-4 h-4" />
                    New Project
                  </button>
                </div>
              </div>

              {/* Stats Cards */}
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
                {statsCards.map((stat, index) => (
                  <div
                    key={stat.title}
                    ref={el => cardsRef.current[index] = el}
                    className="bg-card p-6 rounded-xl border border-border hover:shadow-lg transition-all duration-300 group cursor-pointer"
                  >
                    <div className="flex items-center justify-between">
                      <div className="p-2 bg-primary/10 rounded-lg group-hover:bg-primary/20 transition-colors">
                        {stat.icon}
                      </div>
                      <div className={cn(
                        "text-sm font-medium",
                        stat.trend === 'up' ? "text-green-600" : "text-red-600"
                      )}>
                        {stat.change}
                      </div>
                    </div>
                    <div className="mt-4">
                      <h3 className="text-2xl font-bold">{stat.value}</h3>
                      <p className="text-sm text-muted-foreground mt-1">{stat.title}</p>
                    </div>
                  </div>
                ))}
              </div>

              {/* Demo Content */}
              <DemoContent />

              {/* Main Content Grid */}
              <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
                {/* Chart Area */}
                <div className="lg:col-span-2 space-y-6">
                  {/* Analytics Chart */}
                  <div className="bg-card p-6 rounded-xl border border-border">
                    <div className="flex items-center justify-between mb-6">
                      <h3 className="text-lg font-semibold">Analytics Overview</h3>
                      <button className="p-2 hover:bg-accent rounded-lg transition-colors">
                        <MoreVertical className="w-4 h-4" />
                      </button>
                    </div>
                    
                    {/* Mock Chart */}
                    <div className="h-64 bg-gradient-to-br from-primary/5 to-primary/20 rounded-lg flex items-center justify-center border border-primary/20">
                      <div className="text-center">
                        <BarChart3 className="w-12 h-12 text-primary mx-auto mb-2" />
                        <p className="text-muted-foreground">Chart visualization would go here</p>
                      </div>
                    </div>
                  </div>

                  {/* Recent Projects */}
                  <div className="bg-card p-6 rounded-xl border border-border">
                    <div className="flex items-center justify-between mb-6">
                      <h3 className="text-lg font-semibold">Recent Projects</h3>
                      <button className="text-primary hover:text-primary/80 text-sm font-medium flex items-center gap-1">
                        View All
                        <ChevronRight className="w-4 h-4" />
                      </button>
                    </div>
                    
                    <div className="space-y-4">
                      {[
                        { name: "E-commerce Platform", progress: 75, team: 5, deadline: "Dec 15" },
                        { name: "Mobile App Redesign", progress: 45, team: 3, deadline: "Jan 20" },
                        { name: "Marketing Website", progress: 90, team: 4, deadline: "Dec 5" }
                      ].map((project, index) => (
                        <div key={project.name} className="p-4 bg-accent/30 rounded-lg hover:bg-accent/50 transition-colors cursor-pointer">
                          <div className="flex items-center justify-between mb-2">
                            <h4 className="font-medium">{project.name}</h4>
                            <span className="text-sm text-muted-foreground">{project.progress}%</span>
                          </div>
                          <div className="w-full bg-muted rounded-full h-2 mb-3">
                            <div 
                              className="bg-primary h-2 rounded-full transition-all duration-500"
                              style={{ width: `${project.progress}%` }}
                            />
                          </div>
                          <div className="flex items-center justify-between text-sm text-muted-foreground">
                            <span>{project.team} team members</span>
                            <span>Due {project.deadline}</span>
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                </div>

                {/* Sidebar Content */}
                <div className="space-y-6">
                  {/* Quick Actions */}
                  <div className="bg-card p-6 rounded-xl border border-border">
                    <h3 className="text-lg font-semibold mb-4">Quick Actions</h3>
                    <div className="space-y-3">
                      {[
                        { icon: <FileText className="w-4 h-4" />, label: "Create Document", color: "bg-blue-500/10 text-blue-600" },
                        { icon: <Calendar className="w-4 h-4" />, label: "Schedule Meeting", color: "bg-green-500/10 text-green-600" },
                        { icon: <Users className="w-4 h-4" />, label: "Invite Team", color: "bg-purple-500/10 text-purple-600" },
                        { icon: <BarChart3 className="w-4 h-4" />, label: "View Reports", color: "bg-orange-500/10 text-orange-600" }
                      ].map((action) => (
                        <button
                          key={action.label}
                          className="w-full flex items-center gap-3 p-3 hover:bg-accent rounded-lg transition-colors text-left"
                        >
                          <div className={cn("p-2 rounded-lg", action.color)}>
                            {action.icon}
                          </div>
                          <span className="font-medium">{action.label}</span>
                        </button>
                      ))}
                    </div>
                  </div>

                  {/* Recent Activity */}
                  <div className="bg-card p-6 rounded-xl border border-border">
                    <h3 className="text-lg font-semibold mb-4">Recent Activity</h3>
                    <div className="space-y-4">
                      {recentActivity.map((activity) => (
                        <div key={activity.id} className="flex items-start gap-3 p-3 hover:bg-accent/30 rounded-lg transition-colors cursor-pointer">
                          <div className="p-2 bg-primary/10 rounded-lg flex-shrink-0">
                            {getTypeIcon(activity.type)}
                          </div>
                          <div className="flex-1 min-w-0">
                            <h4 className="font-medium text-sm mb-1">{activity.title}</h4>
                            <p className="text-xs text-muted-foreground mb-2">{activity.description}</p>
                            <div className="flex items-center gap-2 text-xs text-muted-foreground">
                              <Clock className="w-3 h-3" />
                              <span>{activity.time}</span>
                              <div className="w-5 h-5 bg-primary rounded-full flex items-center justify-center text-primary-foreground text-xs font-medium">
                                {activity.user}
                              </div>
                            </div>
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        )
      }
    )
  src/components/SettingsPanel.tsx: |-
    import React, { useState } from 'react'
    import { 
      Settings, 
      X, 
      Moon, 
      Sun, 
      Zap, 
      Eye, 
      Minimize2, 
      RotateCcw,
      Monitor,
      Smartphone,
      Palette,
      Accessibility
    } from 'lucide-react'
    import { cn } from '@/lib/utils'
    import { useAppStore } from '@/store/appStore'

    interface SettingsPanelProps {
      isOpen: boolean
      onClose: () => void
    }

    export function SettingsPanel({ isOpen, onClose }: SettingsPanelProps) {
      const {
        isDarkMode,
        reducedMotion,
        compactMode,
        autoExpandSidebar,
        sidebarWidth,
        toggleDarkMode,
        setReducedMotion,
        setCompactMode,
        setAutoExpandSidebar,
        setSidebarWidth,
        resetToDefaults
      } = useAppStore()

      const [tempSidebarWidth, setTempSidebarWidth] = useState(sidebarWidth)

      const handleSidebarWidthChange = (width: number) => {
        setTempSidebarWidth(width)
        setSidebarWidth(width)
      }

      if (!isOpen) return null

      return (
        <div className="fixed inset-0 bg-background/80 backdrop-blur-sm z-[100] animate-fade-in">
          <div className="fixed right-0 top-0 h-full w-96 bg-card border-l border-border shadow-2xl animate-slide-in">
            <div className="flex flex-col h-full">
              {/* Header */}
              <div className="flex items-center justify-between p-6 border-b border-border">
                <div className="flex items-center gap-2">
                  <Settings className="w-5 h-5" />
                  <h2 className="text-lg font-semibold">Settings</h2>
                </div>
                <button
                  onClick={onClose}
                  className="p-2 hover:bg-accent rounded-lg transition-colors"
                >
                  <X className="w-4 h-4" />
                </button>
              </div>

              {/* Content */}
              <div className="flex-1 overflow-y-auto p-6 space-y-8">
                {/* Appearance */}
                <div className="space-y-4">
                  <h3 className="text-sm font-semibold text-muted-foreground uppercase tracking-wider flex items-center gap-2">
                    <Palette className="w-4 h-4" />
                    Appearance
                  </h3>
                  
                  {/* Dark Mode */}
                  <div className="flex items-center justify-between">
                    <div className="flex items-center gap-3">
                      {isDarkMode ? <Moon className="w-4 h-4" /> : <Sun className="w-4 h-4" />}
                      <div>
                        <p className="font-medium">Dark Mode</p>
                        <p className="text-sm text-muted-foreground">Toggle dark theme</p>
                      </div>
                    </div>
                    <button
                      onClick={toggleDarkMode}
                      className={cn(
                        "relative inline-flex h-6 w-11 items-center rounded-full transition-colors",
                        isDarkMode ? "bg-primary" : "bg-muted"
                      )}
                    >
                      <span
                        className={cn(
                          "inline-block h-4 w-4 transform rounded-full bg-background transition-transform",
                          isDarkMode ? "translate-x-6" : "translate-x-1"
                        )}
                      />
                    </button>
                  </div>

                  {/* Compact Mode */}
                  <div className="flex items-center justify-between">
                    <div className="flex items-center gap-3">
                      <Minimize2 className="w-4 h-4" />
                      <div>
                        <p className="font-medium">Compact Mode</p>
                        <p className="text-sm text-muted-foreground">Reduce spacing and sizes</p>
                      </div>
                    </div>
                    <button
                      onClick={() => setCompactMode(!compactMode)}
                      className={cn(
                        "relative inline-flex h-6 w-11 items-center rounded-full transition-colors",
                        compactMode ? "bg-primary" : "bg-muted"
                      )}
                    >
                      <span
                        className={cn(
                          "inline-block h-4 w-4 transform rounded-full bg-background transition-transform",
                          compactMode ? "translate-x-6" : "translate-x-1"
                        )}
                      />
                    </button>
                  </div>
                </div>

                {/* Behavior */}
                <div className="space-y-4">
                  <h3 className="text-sm font-semibold text-muted-foreground uppercase tracking-wider flex items-center gap-2">
                    <Zap className="w-4 h-4" />
                    Behavior
                  </h3>

                  {/* Auto Expand Sidebar */}
                  <div className="flex items-center justify-between">
                    <div className="flex items-center gap-3">
                      <Eye className="w-4 h-4" />
                      <div>
                        <p className="font-medium">Auto Expand Sidebar</p>
                        <p className="text-sm text-muted-foreground">Expand on hover when collapsed</p>
                      </div>
                    </div>
                    <button
                      onClick={() => setAutoExpandSidebar(!autoExpandSidebar)}
                      className={cn(
                        "relative inline-flex h-6 w-11 items-center rounded-full transition-colors",
                        autoExpandSidebar ? "bg-primary" : "bg-muted"
                      )}
                    >
                      <span
                        className={cn(
                          "inline-block h-4 w-4 transform rounded-full bg-background transition-transform",
                          autoExpandSidebar ? "translate-x-6" : "translate-x-1"
                        )}
                      />
                    </button>
                  </div>

                  {/* Sidebar Width */}
                  <div className="space-y-3">
                    <div className="flex items-center gap-3">
                      <Monitor className="w-4 h-4" />
                      <div>
                        <p className="font-medium">Sidebar Width</p>
                        <p className="text-sm text-muted-foreground">{tempSidebarWidth}px</p>
                      </div>
                    </div>
                    <div className="space-y-2">
                      <input
                        type="range"
                        min="200"
                        max="500"
                        step="10"
                        value={tempSidebarWidth}
                        onChange={(e) => handleSidebarWidthChange(Number(e.target.value))}
                        className="w-full h-2 bg-muted rounded-lg appearance-none cursor-pointer slider"
                      />
                      <div className="flex justify-between text-xs text-muted-foreground">
                        <span>200px</span>
                        <span>350px</span>
                        <span>500px</span>
                      </div>
                    </div>
                  </div>
                </div>

                {/* Accessibility */}
                <div className="space-y-4">
                  <h3 className="text-sm font-semibold text-muted-foreground uppercase tracking-wider flex items-center gap-2">
                    <Accessibility className="w-4 h-4" />
                    Accessibility
                  </h3>

                  {/* Reduced Motion */}
                  <div className="flex items-center justify-between">
                    <div className="flex items-center gap-3">
                      <Zap className="w-4 h-4" />
                      <div>
                        <p className="font-medium">Reduced Motion</p>
                        <p className="text-sm text-muted-foreground">Minimize animations</p>
                      </div>
                    </div>
                    <button
                      onClick={() => setReducedMotion(!reducedMotion)}
                      className={cn(
                        "relative inline-flex h-6 w-11 items-center rounded-full transition-colors",
                        reducedMotion ? "bg-primary" : "bg-muted"
                      )}
                    >
                      <span
                        className={cn(
                          "inline-block h-4 w-4 transform rounded-full bg-background transition-transform",
                          reducedMotion ? "translate-x-6" : "translate-x-1"
                        )}
                      />
                    </button>
                  </div>
                </div>

                {/* Presets */}
                <div className="space-y-4">
                  <h3 className="text-sm font-semibold text-muted-foreground uppercase tracking-wider">
                    Quick Presets
                  </h3>
                  
                  <div className="grid grid-cols-2 gap-3">
                    <button 
                      onClick={() => {
                        setCompactMode(false)
                        setReducedMotion(false)
                        setSidebarWidth(320)
                      }}
                      className="p-3 bg-accent/30 hover:bg-accent/50 rounded-lg transition-colors text-left"
                    >
                      <Monitor className="w-4 h-4 mb-2" />
                      <p className="font-medium text-sm">Desktop</p>
                      <p className="text-xs text-muted-foreground">Spacious layout</p>
                    </button>
                    
                    <button 
                      onClick={() => {
                        setCompactMode(true)
                        setReducedMotion(true)
                        setSidebarWidth(240)
                      }}
                      className="p-3 bg-accent/30 hover:bg-accent/50 rounded-lg transition-colors text-left"
                    >
                      <Smartphone className="w-4 h-4 mb-2" />
                      <p className="font-medium text-sm">Mobile</p>
                      <p className="text-xs text-muted-foreground">Compact layout</p>
                    </button>
                  </div>
                </div>
              </div>

              {/* Footer */}
              <div className="p-6 border-t border-border">
                <button
                  onClick={resetToDefaults}
                  className="w-full flex items-center justify-center gap-2 px-4 py-2 bg-destructive/10 text-destructive hover:bg-destructive/20 rounded-lg transition-colors"
                >
                  <RotateCcw className="w-4 h-4" />
                  Reset to Defaults
                </button>
              </div>
            </div>
          </div>
        </div>
      )
    }

    // Custom slider styles
    const sliderStyles = `
    .slider::-webkit-slider-thumb {
      appearance: none;
      height: 20px;
      width: 20px;
      border-radius: 50%;
      background: hsl(var(--primary));
      cursor: pointer;
      border: 2px solid hsl(var(--background));
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .slider::-moz-range-thumb {
      height: 20px;
      width: 20px;
      border-radius: 50%;
      background: hsl(var(--primary));
      cursor: pointer;
      border: 2px solid hsl(var(--background));
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }
    `

    // Inject styles
    if (typeof document !== 'undefined') {
      const styleSheet = document.createElement('style')
      styleSheet.textContent = sliderStyles
      document.head.appendChild(styleSheet)
    }
  src/components/TopBar.tsx: >-
    import React, { useState } from 'react'

    import { 
      Menu, 
      X, 
      Maximize, 
      Minimize, 
      Moon, 
      Sun, 
      PanelLeft, 
      PanelLeftClose,
      Sidebar,
      Eye,
      Layout,
      Settings,
      Command,
      Zap
    } from 'lucide-react'

    import { SettingsPanel } from './SettingsPanel'

    import { cn } from '@/lib/utils'

    import { SIDEBAR_STATES, BODY_STATES, type SidebarState, type BodyState }
    from '@/lib/utils'


    interface TopBarProps {
      sidebarState: SidebarState
      bodyState: BodyState
      isDarkMode: boolean
      onToggleSidebar: () => void
      onToggleFullscreen: () => void
      onToggleSidePane: () => void
      onToggleDarkMode: () => void
      onHideSidebar: () => void
      onShowSidebar: () => void
      onPeekSidebar: () => void
    }


    export function TopBar({
      sidebarState,
      bodyState,
      isDarkMode,
      onToggleSidebar,
      onToggleFullscreen,
      onToggleSidePane,
      onToggleDarkMode,
      onHideSidebar,
      onShowSidebar,
      onPeekSidebar
    }: TopBarProps) {
      const [isSettingsOpen, setIsSettingsOpen] = useState(false)
      return (
        <div className="h-16 bg-card border-b border-border flex items-center justify-between px-4 z-50">
          {/* Left Section - Logo and Sidebar Controls */}
          <div className="flex items-center gap-4">
            {/* Logo */}
            <div className="flex items-center gap-2">
              <div className="w-8 h-8 bg-gradient-to-br from-primary to-primary/60 rounded-lg flex items-center justify-center">
                <Layout className="w-4 h-4 text-primary-foreground" />
              </div>
              <span className="font-semibold text-lg text-foreground">Jeli</span>
            </div>

            {/* Sidebar Controls */}
            <div className="flex items-center gap-1">
              <button
                onClick={onToggleSidebar}
                className={cn(
                  "p-2 rounded-md hover:bg-accent transition-colors",
                  "tooltip-trigger"
                )}
                title="Toggle Sidebar"
              >
                <Menu className="w-4 h-4" />
              </button>

              <button
                onClick={onHideSidebar}
                className={cn(
                  "p-2 rounded-md hover:bg-accent transition-colors",
                  sidebarState === SIDEBAR_STATES.HIDDEN && "bg-accent"
                )}
                title="Hide Sidebar"
              >
                <PanelLeftClose className="w-4 h-4" />
              </button>

              <button
                onClick={onShowSidebar}
                className={cn(
                  "p-2 rounded-md hover:bg-accent transition-colors",
                  sidebarState === SIDEBAR_STATES.EXPANDED && "bg-accent"
                )}
                title="Show Sidebar"
              >
                <PanelLeft className="w-4 h-4" />
              </button>

              <button
                onClick={onPeekSidebar}
                className={cn(
                  "p-2 rounded-md hover:bg-accent transition-colors",
                  sidebarState === SIDEBAR_STATES.PEEK && "bg-accent"
                )}
                title="Peek Sidebar"
              >
                <Eye className="w-4 h-4" />
              </button>
            </div>
          </div>

          {/* Center Section - Status Indicators */}
          <div className="flex items-center gap-2">
            <div className="flex items-center gap-2 text-sm text-muted-foreground bg-muted px-3 py-1 rounded-full">
              <Sidebar className="w-3 h-3" />
              <span className="capitalize">{sidebarState}</span>
            </div>
            
            <div className="flex items-center gap-2 text-sm text-muted-foreground bg-muted px-3 py-1 rounded-full">
              <Layout className="w-3 h-3" />
              <span className="capitalize">{bodyState.replace('_', ' ')}</span>
            </div>
          </div>

          {/* Right Section - View Controls */}
          <div className="flex items-center gap-1">
            {/* Quick Actions */}
            <button
              className="p-2 rounded-md hover:bg-accent transition-colors group"
              title="Command Palette (Ctrl+K)"
            >
              <Command className="w-4 h-4 group-hover:scale-110 transition-transform" />
            </button>

            <button
              className="p-2 rounded-md hover:bg-accent transition-colors group"
              title="Quick Actions"
            >
              <Zap className="w-4 h-4 group-hover:scale-110 transition-transform" />
            </button>

            <div className="w-px h-6 bg-border mx-1" />

            {/* Body State Controls */}
            <button
              onClick={onToggleSidePane}
              className={cn(
                "p-2 rounded-md hover:bg-accent transition-colors group",
                bodyState === BODY_STATES.SIDE_PANE && "bg-accent"
              )}
              title="Toggle Side Pane"
            >
              <div className="w-4 h-4 flex group-hover:scale-110 transition-transform">
                <div className="w-2 h-4 bg-current opacity-60" />
                <div className="w-2 h-4 bg-current" />
              </div>
            </button>

            <button
              onClick={onToggleFullscreen}
              className={cn(
                "p-2 rounded-md hover:bg-accent transition-colors group",
                bodyState === BODY_STATES.FULLSCREEN && "bg-accent"
              )}
              title="Toggle Fullscreen"
            >
              {bodyState === BODY_STATES.FULLSCREEN ? (
                <Minimize className="w-4 h-4 group-hover:scale-110 transition-transform" />
              ) : (
                <Maximize className="w-4 h-4 group-hover:scale-110 transition-transform" />
              )}
            </button>

            <div className="w-px h-6 bg-border mx-1" />

            {/* Theme and Settings */}
            <button
              onClick={onToggleDarkMode}
              className="p-2 rounded-md hover:bg-accent transition-colors group"
              title="Toggle Dark Mode"
            >
              {isDarkMode ? (
                <Sun className="w-4 h-4 group-hover:scale-110 transition-transform" />
              ) : (
                <Moon className="w-4 h-4 group-hover:scale-110 transition-transform" />
              )}
            </button>

            <button
              onClick={() => setIsSettingsOpen(true)}
              className="p-2 rounded-md hover:bg-accent transition-colors group"
              title="Settings"
            >
              <Settings className="w-4 h-4 group-hover:rotate-90 transition-transform duration-300" />
            </button>
          </div>

          {/* Settings Panel */}
          <SettingsPanel 
            isOpen={isSettingsOpen} 
            onClose={() => setIsSettingsOpen(false)} 
          />
        </div>
      )
    }
approved: true
linesAdded: null
linesRemoved: null
linesDifference: null
gitCommittedAt: '2025-10-10T09:27:04.719Z'
status: committed
id: 1
