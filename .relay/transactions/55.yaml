uuid: c29ef741-f7e9-4670-9833-289b5c3ff2e4
projectId: amazing-app-shell
createdAt: '2025-10-10T14:03:56.105Z'
gitCommitMsg: >-
  refactor(toast): replace framer-motion with gsap for animations

  - Removes the `framer-motion` dependency from `package.json`. - Refactors the
  `Toaster` component in `src/components/ui/toast.tsx` to use GSAP for both
  enter and exit animations. - This change ensures animation consistency across
  the application by standardizing on GSAP.
promptSummary: Replace framer-motion with GSAP for animations in the Toaster component.
reasoning:
  - >-
    You got it. Using GSAP for all animations creates a more consistent feel and
    avoids extra dependencies. I'll remove `framer-motion` and refactor the
    `Toaster` component to use GSAP for its enter and exit animations.
  - '### 1. Remove `framer-motion` Dependency'
  - >-
    First, I'll remove the `framer-motion` package from your project's
    dependencies.
  - '### 2. Refactor Toaster to use GSAP'
  - >-
    Next, I'll rewrite `src/components/ui/toast.tsx`. I'll replace `motion.div`
    with a standard `div` and use a `ref` with GSAP to handle the animations. To
    manage the exit animation correctly, I'll create an inner `CustomToast`
    component that controls its own lifecycle, including timed dismissals.
operations:
  - type: write
    path: package.json
    content: |+
      --- package.json
      +++ package.json
      @@ -16,7 +16,6 @@
           "tailwind-merge": "^2.0.0",
           "class-variance-authority": "^0.7.0",
           "@radix-ui/react-slot": "^1.0.2",
      -    "framer-motion": "^10.16.16",
           "sonner": "^1.2.4"
         },
         "devDependencies": {

    patchStrategy: standard-diff
  - type: write
    path: src/components/ui/toast.tsx
    content: >-
      import { forwardRef, useImperativeHandle, useRef, useEffect } from
      'react';

      import { gsap } from 'gsap';

      import {
        Toaster as SonnerToaster,
        toast as sonnerToast,
      } from 'sonner';

      import {
        CheckCircle,
        AlertCircle,
        Info,
        AlertTriangle,
        X,
      } from 'lucide-react';


      import { Button } from '@/components/ui/button';

      import { cn } from '@/lib/utils';


      type Variant = 'default' | 'success' | 'error' | 'warning';

      type Position =
        | 'top-left'
        | 'top-center'
        | 'top-right'
        | 'bottom-left'
        | 'bottom-center'
        | 'bottom-right';

      interface ActionButton {
        label: string;
        onClick: () => void;
        variant?: 'default' | 'outline' | 'ghost';
      }


      interface ToasterProps {
        title?: string;
        message: string;
        variant?: Variant;
        duration?: number;
        position?: Position;
        actions?: ActionButton;
        onDismiss?: () => void;
        highlightTitle?: boolean;
      }


      export interface ToasterRef {
        show: (props: ToasterProps) => void;
      }


      const variantStyles: Record<Variant, string> = {
        default: 'bg-card border-border text-foreground',
        success: 'bg-card border-green-600/50',
        error: 'bg-card border-destructive/50',
        warning: 'bg-card border-amber-600/50',
      };


      const titleColor: Record<Variant, string> = {
        default: 'text-foreground',
        success: 'text-green-600 dark:text-green-400',
        error: 'text-destructive',
        warning: 'text-amber-600 dark:text-amber-400',
      };


      const iconColor: Record<Variant, string> = {
        default: 'text-muted-foreground',
        success: 'text-green-600 dark:text-green-400',
        error: 'text-destructive',
        warning: 'text-amber-600 dark:text-amber-400',
      };


      const variantIcons: Record<Variant, React.ComponentType<{ className?:
      string }>> = {
        default: Info,
        success: CheckCircle,
        error: AlertCircle,
        warning: AlertTriangle,
      };


      const CustomToast = ({
        toastId,
        title,
        message,
        variant = 'default',
        duration = 4000,
        actions,
        onDismiss,
        highlightTitle,
      }: ToasterProps & { toastId: number | string }) => {
        const toastRef = useRef<HTMLDivElement>(null);
        const Icon = variantIcons[variant];

        const handleDismiss = () => {
          if (toastRef.current) {
            gsap.to(toastRef.current, {
              opacity: 0,
              y: 50,
              scale: 0.95,
              duration: 0.3,
              ease: 'easeOut',
              onComplete: () => {
                sonnerToast.dismiss(toastId);
                onDismiss?.();
              },
            });
          } else {
            sonnerToast.dismiss(toastId);
            onDismiss?.();
          }
        };

        useEffect(() => {
          if (toastRef.current) {
            gsap.from(toastRef.current, {
              opacity: 0,
              y: 50,
              scale: 0.95,
              duration: 0.3,
              ease: 'easeOut',
            });
          }

          if (duration !== Infinity) {
            const timer = setTimeout(handleDismiss, duration);
            return () => clearTimeout(timer);
          }
        }, [duration]);

        return (
          <div
            ref={toastRef}
            className={cn(
              'flex items-center justify-between w-full max-w-xs p-3 rounded-xl border shadow-md',
              variantStyles[variant]
            )}
          >
            <div className="flex items-start gap-2">
              <Icon className={cn('h-4 w-4 mt-0.5 flex-shrink-0', iconColor[variant])} />
              <div className="space-y-0.5">
                {title && (
                  <h3
                    className={cn(
                      'text-xs font-medium leading-none',
                      titleColor[variant],
                      highlightTitle && titleColor['success']
                    )}
                  >
                    {title}
                  </h3>
                )}
                <p className="text-xs text-muted-foreground">{message}</p>
              </div>
            </div>

            <div className="flex items-center gap-2">
              {actions?.label && (
                <Button
                  variant={actions.variant || 'outline'}
                  size="sm"
                  onClick={() => {
                    actions.onClick();
                    handleDismiss();
                  }}
                  className={cn(
                    'cursor-pointer',
                    variant === 'success' ? 'text-green-600 border-green-600 hover:bg-green-600/10 dark:hover:bg-green-400/20'
                    : variant === 'error' ? 'text-destructive border-destructive hover:bg-destructive/10 dark:hover:bg-destructive/20'
                    : variant === 'warning' ? 'text-amber-600 border-amber-600 hover:bg-amber-600/10 dark:hover:bg-amber-400/20'
                    : 'text-foreground border-border hover:bg-muted/10 dark:hover:bg-muted/20'
                  )}
                >
                  {actions.label}
                </Button>
              )}
              <button
                onClick={handleDismiss}
                className="rounded-full p-1 hover:bg-muted/50 dark:hover:bg-muted/30 transition-colors focus:outline-none focus:ring-2 focus:ring-ring"
                aria-label="Dismiss notification"
              >
                <X className="h-3 w-3 text-muted-foreground" />
              </button>
            </div>
          </div>
        );
      };


      const Toaster = forwardRef<ToasterRef, { defaultPosition?: Position }>(
        ({ defaultPosition = 'bottom-right' }, ref) => {
          useImperativeHandle(ref, () => ({
            show({
              title,
              message,
              variant = 'default',
              duration = 4000,
              position = defaultPosition,
              actions,
              onDismiss,
              highlightTitle,
            }) {
              sonnerToast.custom(
                (toastId) => (
                  <CustomToast
                    toastId={toastId}
                    title={title}
                    message={message}
                    variant={variant}
                    duration={duration}
                    actions={actions}
                    onDismiss={onDismiss}
                    highlightTitle={highlightTitle}
                  />
                ),
                {
                  duration: Infinity, // Component handles its own lifecycle for animations
                  position,
                }
              );
            },
          }));

          return (
            <SonnerToaster
              position={defaultPosition}
              toastOptions={{ unstyled: true, className: 'flex justify-end' }}
            />
          );
        }
      );

      Toaster.displayName = "Toaster";


      export default Toaster;
    patchStrategy: replace
snapshot:
  package.json: |-
    {
      "name": "amazing-app-shell",
      "private": true,
      "version": "0.0.0",
      "type": "module",
      "scripts": {
        "dev": "vite",
        "build": "tsc && vite build",
        "lint": "eslint . --ext ts,tsx --report-unused-disable-directives --max-warnings 0",
        "preview": "vite preview"
      },
      "dependencies": {
        "react": "^18.2.0",
        "react-dom": "^18.2.0",
        "gsap": "^3.12.2",
        "zustand": "^4.4.7",
        "lucide-react": "^0.294.0",
        "clsx": "^2.0.0",
        "tailwind-merge": "^2.0.0",
        "class-variance-authority": "^0.7.0",
        "@radix-ui/react-slot": "^1.0.2",
        "framer-motion": "^10.16.16",
        "sonner": "^1.2.4"
      },
      "devDependencies": {
        "@types/node": "^20.10.0",
        "@types/react": "^18.2.37",
        "@types/react-dom": "^18.2.15",
        "@typescript-eslint/eslint-plugin": "^6.10.0",
        "@typescript-eslint/parser": "^6.10.0",
        "@vitejs/plugin-react": "^4.1.1",
        "autoprefixer": "^10.4.16",
        "eslint": "^8.53.0",
        "eslint-plugin-react-hooks": "^4.6.0",
        "eslint-plugin-react-refresh": "^0.4.4",
        "postcss": "^8.4.31",
        "tailwindcss": "^3.3.5",
        "typescript": "^5.2.2",
        "vite": "^4.5.0",
        "tailwindcss-animate": "^1.0.7"
      }
    }
  src/components/ui/toast.tsx: >-
    import { forwardRef, useImperativeHandle, useRef } from 'react';

    import { motion } from 'framer-motion';

    import {
      Toaster as SonnerToaster,
      toast as sonnerToast,
    } from 'sonner';

    import {
      CheckCircle,
      AlertCircle,
      Info,
      AlertTriangle,
      X,
    } from 'lucide-react';


    import { Button } from '@/components/ui/button';

    import { cn } from '@/lib/utils';


    type Variant = 'default' | 'success' | 'error' | 'warning';

    type Position =
      | 'top-left'
      | 'top-center'
      | 'top-right'
      | 'bottom-left'
      | 'bottom-center'
      | 'bottom-right';

    interface ActionButton {
      label: string;
      onClick: () => void;
      variant?: 'default' | 'outline' | 'ghost';
    }


    interface ToasterProps {
      title?: string;
      message: string;
      variant?: Variant;
      duration?: number;
      position?: Position;
      actions?: ActionButton;
      onDismiss?: () => void;
      highlightTitle?: boolean;
    }


    export interface ToasterRef {
      show: (props: ToasterProps) => void;
    }


    const variantStyles: Record<Variant, string> = {
      default: 'bg-card border-border text-foreground',
      success: 'bg-card border-green-600/50',
      error: 'bg-card border-destructive/50',
      warning: 'bg-card border-amber-600/50',
    };


    const titleColor: Record<Variant, string> = {
      default: 'text-foreground',
      success: 'text-green-600 dark:text-green-400',
      error: 'text-destructive',
      warning: 'text-amber-600 dark:text-amber-400',
    };


    const iconColor: Record<Variant, string> = {
      default: 'text-muted-foreground',
      success: 'text-green-600 dark:text-green-400',
      error: 'text-destructive',
      warning: 'text-amber-600 dark:text-amber-400',
    };


    const variantIcons: Record<Variant, React.ComponentType<{ className?: string
    }>> = {
      default: Info,
      success: CheckCircle,
      error: AlertCircle,
      warning: AlertTriangle,
    };


    const toastAnimation = {
      initial: { opacity: 0, y: 50, scale: 0.95 },
      animate: { opacity: 1, y: 0, scale: 1 },
      exit: { opacity: 0, y: 50, scale: 0.95 },
    };


    const Toaster = forwardRef<ToasterRef, { defaultPosition?: Position }>(
      ({ defaultPosition = 'bottom-right' }, ref) => {
        const toastReference = useRef<ReturnType<typeof sonnerToast.custom> | null>(null);

        useImperativeHandle(ref, () => ({
          show({
            title,
            message,
            variant = 'default',
            duration = 4000,
            position = defaultPosition,
            actions,
            onDismiss,
            highlightTitle,
          }) {
            const Icon = variantIcons[variant];

            toastReference.current = sonnerToast.custom(
              (toastId) => (
                <motion.div
                  variants={toastAnimation}
                  initial="initial"
                  animate="animate"
                  exit="exit"
                  transition={{ duration: 0.3, ease: 'easeOut' }}
                  className={cn(
                    'flex items-center justify-between w-full max-w-xs p-3 rounded-xl border shadow-md',
                    variantStyles[variant]
                  )}
                >
                  <div className="flex items-start gap-2">
                    <Icon className={cn('h-4 w-4 mt-0.5 flex-shrink-0', iconColor[variant])} />
                    <div className="space-y-0.5">
                      {title && (
                        <h3
                          className={cn(
                            'text-xs font-medium leading-none',
                            titleColor[variant],
                            highlightTitle && titleColor['success'] // override for meeting case
                          )}
                        >
                          {title}
                        </h3>
                      )}
                      <p className="text-xs text-muted-foreground">{message}</p>
                    </div>
                  </div>

                  <div className="flex items-center gap-2">
                    {actions?.label && (
                      <Button
                        variant={actions.variant || 'outline'}
                        size="sm"
                        onClick={() => {
                          actions.onClick();
                          sonnerToast.dismiss(toastId);
                        }}
                        className={cn(
                          'cursor-pointer',
                          variant === 'success'
                            ? 'text-green-600 border-green-600 hover:bg-green-600/10 dark:hover:bg-green-400/20'
                            : variant === 'error'
                            ? 'text-destructive border-destructive hover:bg-destructive/10 dark:hover:bg-destructive/20'
                            : variant === 'warning'
                            ? 'text-amber-600 border-amber-600 hover:bg-amber-600/10 dark:hover:bg-amber-400/20'
                            : 'text-foreground border-border hover:bg-muted/10 dark:hover:bg-muted/20'
                        )}
                      >
                        {actions.label}
                      </Button>
                    )}

                    <button
                      onClick={() => {
                        sonnerToast.dismiss(toastId);
                        onDismiss?.();
                      }}
                      className="rounded-full p-1 hover:bg-muted/50 dark:hover:bg-muted/30 transition-colors focus:outline-none focus:ring-2 focus:ring-ring"
                      aria-label="Dismiss notification"
                    >
                      <X className="h-3 w-3 text-muted-foreground" />
                    </button>
                  </div>
                </motion.div>
              ),
              { duration, position }
            );
          },
        }));

        return (
          <SonnerToaster
            position={defaultPosition}
            toastOptions={{ unstyled: true, className: 'flex justify-end' }}
          />
        );
      }
    );

    Toaster.displayName = "Toaster";


    export default Toaster;
approved: true
linesAdded: null
linesRemoved: null
linesDifference: null
gitCommittedAt: null
status: committed
id: 55
