uuid: 48943729-28c0-43be-8c83-ff67f2f18392
projectId: jeli-app-shell
createdAt: '2025-10-14T01:01:27.290Z'
gitCommitMsg: >-
  refactor(auth): deconstruct LoginPage into reusable effect components

  Extracted multiple reusable UI/animation components from the monolithic
  `LoginPage.tsx` into a new `src/components/effects` directory. This includes:
  - BoxReveal - Ripple - OrbitingCircles & TechOrbitDisplay - AnimatedInput -
  BottomGradient

  This change significantly slims down the `LoginPage` component, making it
  easier to maintain and focusing it on authentication logic. The new components
  are now part of the library's public API, promoting code reuse and DRY
  principles.
promptSummary: >-
  Executed Part 1 of the refactoring plan to deconstruct the monolithic
  `LoginPage` component.
reasoning:
  - 'Executing Part 1: Deconstructing the Monolithic LoginPage Component.'
  - '### Step 1: Create Component Directory'
  - >-
    First, I'll create a new directory `src/components/effects` to house the
    extracted, reusable animation and UI components from the login page.
  - '### Step 2: Extract `BoxReveal` Component'
  - >-
    I'm creating a new file for the `BoxReveal` component and moving its code
    from `LoginPage.tsx`. This component is responsible for the "reveal"
    animation on text and other elements.
  - '### Step 3: Extract `Ripple` Component'
  - >-
    The background ripple effect is being extracted into its own self-contained
    component.
  - '### Step 4: Extract `OrbitingCircles` and `TechOrbitDisplay` Components'
  - >-
    I'm moving the orbiting icons effect and its specific implementation for the
    login page into a new file.
  - '### Step 5: Extract `AnimatedInput` and Form Primitives'
  - >-
    The unique, animated input field and the button gradient effect are being
    moved to their own files.
  - '### Step 6: Refactor `LoginPage` to Use New Components'
  - >-
    Now, I will refactor the original `LoginPage.tsx` to remove all the
    component definitions and instead import them from their new locations. I
    will also replace the locally defined `Label` with the one from the UI
    library to remove duplication.
  - '### Step 7: Update `index.ts` to Export New Components'
  - >-
    Finally, I'll update the main `index.ts` file to export all the new
    components, making them part of the public API of this library.
  - >-
    This concludes Part 1. The `LoginPage` is now significantly cleaner and we
    have a new set of reusable, animated components in `src/components/effects`.
operations:
  - type: write
    path: src/components/effects/BoxReveal.tsx
    content: "import { ReactNode, useEffect, useRef, memo } from 'react';\nimport { gsap } from 'gsap';\nimport { cn } from '@/lib/utils';\n\ntype BoxRevealProps = {\n\tchildren: ReactNode;\n\twidth?: string;\n\tboxColor?: string;\n\tduration?: number;\n\tclassName?: string;\n};\n\nexport const BoxReveal = memo(function BoxReveal({\n\tchildren,\n\twidth = 'fit-content',\n\tboxColor,\n\tduration,\n\tclassName,\n}: BoxRevealProps) {\n\tconst sectionRef = useRef<HTMLDivElement>(null);\n\tconst boxRef = useRef<HTMLDivElement>(null);\n\tconst childRef = useRef<HTMLDivElement>(null);\n\n\tuseEffect(() => {\n\t\tconst section = sectionRef.current;\n\t\tif (!section) return;\n\n\t\tconst observer = new IntersectionObserver(\n\t\t\t(entries) => {\n\t\t\t\tentries.forEach((entry) => {\n\t\t\t\t\tif (entry.isIntersecting) {\n\t\t\t\t\t\tgsap.timeline()\n\t\t\t\t\t\t\t.set(childRef.current, { opacity: 0, y: 50 })\n\t\t\t\t\t\t\t.set(boxRef.current, { transformOrigin: 'right' })\n\t\t\t\t\t\t\t.to(boxRef.current, {\n\t\t\t\t\t\t\t\tscaleX: 0,\n\t\t\t\t\t\t\t\tduration: duration ?? 0.5,\n\t\t\t\t\t\t\t\tease: 'power3.inOut',\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t.to(\n\t\t\t\t\t\t\t\tchildRef.current,\n\t\t\t\t\t\t\t\t{ y: 0, opacity: 1, duration: duration ?? 0.5, ease: 'power3.out' },\n\t\t\t\t\t\t\t\t'-=0.3',\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\tobserver.unobserve(section);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t},\n\t\t\t{ threshold: 0.1 },\n\t\t);\n\n\t\tobserver.observe(section);\n\n\t\treturn () => {\n\t\t\tif (section) {\n\t\t\t\tobserver.unobserve(section);\n\t\t\t}\n\t\t};\n\t}, [duration]);\n\n\treturn (\n\t\t<div ref={sectionRef} style={{ width }} className={cn('relative overflow-hidden', className)}>\n\t\t\t<div ref={childRef}>{children}</div>\n\t\t\t<div\n\t\t\t\tref={boxRef}\n\t\t\t\tstyle={{\n\t\t\t\t\tbackground: boxColor ?? 'hsl(var(--skeleton))',\n\t\t\t\t}}\n\t\t\t\tclassName=\"absolute top-1 bottom-1 left-0 right-0 z-20 rounded-sm\"\n\t\t\t/>\n\t\t</div>\n\t);\n});"
    patchStrategy: replace
  - type: write
    path: src/components/effects/Ripple.tsx
    content: "import React, { memo } from 'react';\n\ninterface RippleProps {\n\tmainCircleSize?: number;\n\tmainCircleOpacity?: number;\n\tnumCircles?: number;\n}\n\nexport const Ripple = memo(function Ripple({\n\tmainCircleSize = 210,\n\tmainCircleOpacity = 0.24,\n\tnumCircles = 11,\n}: RippleProps) {\n\treturn (\n\t\t<div className=\"absolute inset-0 flex items-center justify-center [mask-image:linear-gradient(to_bottom,white,transparent)]\">\n\t\t\t{Array.from({ length: numCircles }, (_, i) => {\n\t\t\t\tconst size = mainCircleSize + i * 70;\n\t\t\t\tconst opacity = mainCircleOpacity - i * 0.03;\n\t\t\t\tconst animationDelay = `${i * 0.06}s`;\n\t\t\t\tconst borderStyle = i === numCircles - 1 ? 'dashed' : 'solid';\n\t\t\t\tconst borderOpacity = 5 + i * 5;\n\n\t\t\t\treturn (\n\t\t\t\t\t<div\n\t\t\t\t\t\tkey={i}\n\t\t\t\t\t\tclassName=\"absolute animate-ripple rounded-full border\"\n\t\t\t\t\t\tstyle={\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\twidth: `${size}px`,\n\t\t\t\t\t\t\t\theight: `${size}px`,\n\t\t\t\t\t\t\t\topacity: opacity,\n\t\t\t\t\t\t\t\tanimationDelay: animationDelay,\n\t\t\t\t\t\t\t\tborderStyle: borderStyle,\n\t\t\t\t\t\t\t\tborderWidth: '1px',\n\t\t\t\t\t\t\t\tborderColor: `hsl(var(--foreground) / ${borderOpacity / 100})`,\n\t\t\t\t\t\t\t\ttop: '50%',\n\t\t\t\t\t\t\t\tleft: '50%',\n\t\t\t\t\t\t\t\ttransform: 'translate(-50%, -50%)',\n\t\t\t\t\t\t\t} as React.CSSProperties\n\t\t\t\t\t\t}\n\t\t\t\t\t/>\n\t\t\t\t);\n\t\t\t})}\n\t\t</div>\n\t);\n});"
    patchStrategy: replace
  - type: write
    path: src/components/effects/OrbitingCircles.tsx
    content: "import React, { ReactNode, memo } from 'react';\nimport { cn } from '@/lib/utils';\n\nexport const OrbitingCircles = memo(function OrbitingCircles({\n\tclassName,\n\tchildren,\n\treverse = false,\n\tduration = 20,\n\tdelay = 10,\n\tradius = 50,\n\tpath = true,\n}: {\n\tclassName?: string;\n\tchildren?: React.ReactNode;\n\treverse?: boolean;\n\tduration?: number;\n\tdelay?: number;\n\tradius?: number;\n\tpath?: boolean;\n}) {\n\treturn (\n\t\t<>\n\t\t\t{path && (\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\t\t\tversion=\"1.1\"\n\t\t\t\t\tclassName=\"pointer-events-none absolute inset-0 size-full\"\n\t\t\t\t>\n\t\t\t\t\t<circle\n\t\t\t\t\t\tclassName=\"stroke-black/10 stroke-1 dark:stroke-white/10\"\n\t\t\t\t\t\tcx=\"50%\"\n\t\t\t\t\t\tcy=\"50%\"\n\t\t\t\t\t\tr={radius}\n\t\t\t\t\t\tfill=\"none\"\n\t\t\t\t\t/>\n\t\t\t\t</svg>\n\t\t\t)}\n\t\t\t<div\n\t\t\t\tstyle={\n\t\t\t\t\t{\n\t\t\t\t\t\t'--duration': duration,\n\t\t\t\t\t\t'--radius': radius,\n\t\t\t\t\t\t'--delay': -delay,\n\t\t\t\t\t} as React.CSSProperties\n\t\t\t\t}\n\t\t\t\tclassName={cn(\n\t\t\t\t\t'absolute flex size-full transform-gpu animate-orbit items-center justify-center rounded-full border bg-black/10 [animation-delay:calc(var(--delay)*1s)] dark:bg-white/10',\n\t\t\t\t\t{ '[animation-direction:reverse]': reverse },\n\t\t\t\t\tclassName,\n\t\t\t\t)}\n\t\t\t>\n\t\t\t\t{children}\n\t\t\t</div>\n\t\t</>\n\t);\n});\n\n\ninterface OrbitIcon {\n\tcomponent: () => ReactNode;\n\tclassName: string;\n\tduration?: number;\n\tdelay?: number;\n\tradius?: number;\n\tpath?: boolean;\n\treverse?: boolean;\n}\n\nconst iconsArray: OrbitIcon[] = [\n\t{ component: () => <img width={30} height={30} src='https://cdn.jsdelivr.net/gh/devicons/devicon@latest/icons/html5/html5-original.svg' alt='HTML5' />, className: 'size-[30px] border-none bg-transparent', duration: 20, delay: 20, radius: 100, path: false, reverse: false },\n\t{ component: () => <img width={30} height={30} src='https://cdn.jsdelivr.net/gh/devicons/devicon@latest/icons/css3/css3-original.svg' alt='CSS3' />, className: 'size-[30px] border-none bg-transparent', duration: 20, delay: 10, radius: 100, path: false, reverse: false },\n\t{ component: () => <img width={50} height={50} src='https://cdn.jsdelivr.net/gh/devicons/devicon@latest/icons/typescript/typescript-original.svg' alt='TypeScript' />, className: 'size-[50px] border-none bg-transparent', radius: 210, duration: 20, path: false, reverse: false },\n\t{ component: () => <img width={50} height={50} src='https://cdn.jsdelivr.net/gh/devicons/devicon@latest/icons/javascript/javascript-original.svg' alt='JavaScript' />, className: 'size-[50px] border-none bg-transparent', radius: 210, duration: 20, delay: 20, path: false, reverse: false },\n\t{ component: () => <img width={30} height={30} src='https://cdn.jsdelivr.net/gh/devicons/devicon@latest/icons/tailwindcss/tailwindcss-original.svg' alt='TailwindCSS' />, className: 'size-[30px] border-none bg-transparent', duration: 20, delay: 20, radius: 150, path: false, reverse: true },\n\t{ component: () => <img width={30} height={30} src='https://cdn.jsdelivr.net/gh/devicons/devicon@latest/icons/nextjs/nextjs-original.svg' alt='Nextjs' />, className: 'size-[30px] border-none bg-transparent', duration: 20, delay: 10, radius: 150, path: false, reverse: true },\n\t{ component: () => <img width={50} height={50} src='https://cdn.jsdelivr.net/gh/devicons/devicon@latest/icons/react/react-original.svg' alt='React' />, className: 'size-[50px] border-none bg-transparent', radius: 270, duration: 20, path: false, reverse: true },\n\t{ component: () => <img width={50} height={50} src='https://cdn.jsdelivr.net/gh/devicons/devicon@latest/icons/figma/figma-original.svg' alt='Figma' />, className: 'size-[50px] border-none bg-transparent', radius: 270, duration: 20, delay: 60, path: false, reverse: true },\n\t{ component: () => <img width={50} height={50} src='https://cdn.jsdelivr.net/gh/devicons/devicon@latest/icons/git/git-original.svg' alt='Git' />, className: 'size-[50px] border-none bg-transparent', radius: 320, duration: 20, delay: 20, path: false, reverse: false },\n];\n\nexport const TechOrbitDisplay = memo(function TechOrbitDisplay({ text = 'Jeli App Shell' }: { text?: string }) {\n\treturn (\n\t\t<div className=\"relative flex size-full flex-col items-center justify-center overflow-hidden rounded-lg\">\n\t\t\t<span className=\"pointer-events-none whitespace-pre-wrap bg-gradient-to-b from-black to-gray-300/80 bg-clip-text text-center text-7xl font-semibold leading-none text-transparent dark:from-white dark:to-slate-900/10\">\n\t\t\t\t{text}\n\t\t\t</span>\n\t\t\t{iconsArray.map((icon, index) => (\n\t\t\t\t<OrbitingCircles key={index} {...icon}>\n\t\t\t\t\t{icon.component()}\n\t\t\t\t</OrbitingCircles>\n\t\t\t))}\n\t\t</div>\n\t);\n});"
    patchStrategy: replace
  - type: write
    path: src/components/effects/AnimatedInput.tsx
    content: "import React, { memo, forwardRef, useRef, useEffect } from 'react';\nimport { cn } from '@/lib/utils';\n\nexport const AnimatedInput = memo(\n\tforwardRef(function Input(\n\t\t{ className, type, ...props }: React.InputHTMLAttributes<HTMLInputElement>,\n\t\tref: React.ForwardedRef<HTMLInputElement>,\n\t) {\n\t\tconst radius = 100;\n\t\tconst wrapperRef = useRef<HTMLDivElement>(null);\n\n\t\tuseEffect(() => {\n\t\t\tconst wrapper = wrapperRef.current;\n\t\t\tif (!wrapper) return;\n\n\t\t\tlet animationFrameId: number | null = null;\n\n\t\t\tconst handleMouseMove = (e: MouseEvent) => {\n\t\t\t\tif (animationFrameId) {\n\t\t\t\t\tcancelAnimationFrame(animationFrameId);\n\t\t\t\t}\n\n\t\t\t\tanimationFrameId = requestAnimationFrame(() => {\n\t\t\t\t\tif (!wrapper) return;\n\t\t\t\t\tconst { left, top } = wrapper.getBoundingClientRect();\n\t\t\t\t\tconst x = e.clientX - left;\n\t\t\t\t\tconst y = e.clientY - top;\n\t\t\t\t\twrapper.style.setProperty('--mouse-x', `${x}px`);\n\t\t\t\t\twrapper.style.setProperty('--mouse-y', `${y}px`);\n\t\t\t\t});\n\t\t\t};\n\n\t\t\tconst handleMouseEnter = () => {\n\t\t\t\tif (!wrapper) return;\n\t\t\t\twrapper.style.setProperty('--radius', `${radius}px`);\n\t\t\t};\n\n\t\t\tconst handleMouseLeave = () => {\n\t\t\t\tif (!wrapper) return;\n\t\t\t\twrapper.style.setProperty('--radius', '0px');\n\t\t\t\tif (animationFrameId) {\n\t\t\t\t\tcancelAnimationFrame(animationFrameId);\n\t\t\t\t\tanimationFrameId = null;\n\t\t\t\t}\n\t\t\t};\n\n\t\t\twrapper.addEventListener('mousemove', handleMouseMove);\n\t\t\twrapper.addEventListener('mouseenter', handleMouseEnter);\n\t\t\twrapper.addEventListener('mouseleave', handleMouseLeave);\n\n\t\t\treturn () => {\n\t\t\t\twrapper.removeEventListener('mousemove', handleMouseMove);\n\t\t\t\twrapper.removeEventListener('mouseenter', handleMouseEnter);\n\t\t\t\twrapper.removeEventListener('mouseleave', handleMouseLeave);\n\t\t\t\tif (animationFrameId) {\n\t\t\t\t\tcancelAnimationFrame(animationFrameId);\n\t\t\t\t}\n\t\t\t};\n\t\t}, [radius]);\n\n\t\treturn (\n\t\t\t<div\n\t\t\t\tref={wrapperRef}\n\t\t\t\tstyle={\n\t\t\t\t\t{\n\t\t\t\t\t\t'--radius': '0px',\n\t\t\t\t\t\t'--mouse-x': '0px',\n\t\t\t\t\t\t'--mouse-y': '0px',\n\t\t\t\t\t\tbackground: `radial-gradient(var(--radius) circle at var(--mouse-x) var(--mouse-y), #3b82f6, transparent 80%)`,\n\t\t\t\t\t} as React.CSSProperties\n\t\t\t\t}\n\t\t\t\tclassName=\"group/input rounded-lg p-[2px] transition duration-300\"\n\t\t\t>\n\t\t\t\t<input\n\t\t\t\t\ttype={type}\n\t\t\t\t\tclassName={cn(\n\t\t\t\t\t\t`shadow-input dark:placeholder-text-neutral-600 flex h-10 w-full rounded-md border-none bg-gray-50 px-3 py-2 text-sm text-black transition duration-400 group-hover/input:shadow-none file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-neutral-400 focus-visible:ring-[2px] focus-visible:ring-neutral-400 focus-visible:outline-none disabled:cursor-not-allowed disabled:opacity-50 dark:bg-zinc-800 dark:text-white dark:shadow-[0px_0px_1px_1px_#404040] dark:focus-visible:ring-neutral-600`,\n\t\t\t\t\t\tclassName,\n\t\t\t\t\t)}\n\t\t\t\t\tref={ref}\n\t\t\t\t\t{...props}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t);\n\t}),\n);"
    patchStrategy: replace
  - type: write
    path: src/components/effects/BottomGradient.tsx
    content: "export const BottomGradient = () => (\n\t<>\n\t\t<span className=\"group-hover/btn:opacity-100 block transition duration-500 opacity-0 absolute h-px w-full -bottom-px inset-x-0 bg-gradient-to-r from-transparent via-cyan-500 to-transparent\" />\n\t\t<span className=\"group-hover/btn:opacity-100 blur-sm block transition duration-500 opacity-0 absolute h-px w-1/2 mx-auto -bottom-px inset-x-10 bg-gradient-to-r from-transparent via-indigo-500 to-transparent\" />\n\t</>\n);"
    patchStrategy: replace
  - type: write
    path: src/components/auth/LoginPage.tsx
    content: "--- src/components/auth/LoginPage.tsx\n+++ src/components/auth/LoginPage.tsx\n@@ -1,299 +1,21 @@\n-import React, {\n-\tuseState,\n-\tChangeEvent,\n-\tFormEvent,\n-\tReactNode,\n-\tuseEffect,\n-\tuseRef,\n-\tforwardRef,\n-\tmemo,\n-} from 'react';\n+import React, { useState, ChangeEvent, FormEvent } from 'react';\n import { Eye, EyeOff, Mail, ArrowLeft } from 'lucide-react';\n-import { gsap } from 'gsap';\n import { cn } from '@/lib/utils';\n+import { Label } from '@/components/ui/label';\n+import { AnimatedInput } from '../effects/AnimatedInput';\n+import { BoxReveal } from '../effects/BoxReveal';\n+import { Ripple } from '../effects/Ripple';\n+import { TechOrbitDisplay } from '../effects/OrbitingCircles';\n+import { BottomGradient } from '../effects/BottomGradient';\n \n-// ==================== Input Component ====================\n-const Input = memo(\n-\tforwardRef(function Input(\n-\t\t{ className, type, ...props }: React.InputHTMLAttributes<HTMLInputElement>,\n-\t\tref: React.ForwardedRef<HTMLInputElement>,\n-\t) {\n-\t\tconst radius = 100;\n-\t\tconst wrapperRef = useRef<HTMLDivElement>(null);\n-\n-\t\tuseEffect(() => {\n-\t\t\tconst wrapper = wrapperRef.current;\n-\t\t\tif (!wrapper) return;\n-\n-\t\t\tlet animationFrameId: number | null = null;\n-\n-\t\t\tconst handleMouseMove = (e: MouseEvent) => {\n-\t\t\t\tif (animationFrameId) {\n-\t\t\t\t\tcancelAnimationFrame(animationFrameId);\n-\t\t\t\t}\n-\n-\t\t\t\tanimationFrameId = requestAnimationFrame(() => {\n-\t\t\t\t\tif (!wrapper) return;\n-\t\t\t\t\tconst { left, top } = wrapper.getBoundingClientRect();\n-\t\t\t\t\tconst x = e.clientX - left;\n-\t\t\t\t\tconst y = e.clientY - top;\n-\t\t\t\t\twrapper.style.setProperty('--mouse-x', `${x}px`);\n-\t\t\t\t\twrapper.style.setProperty('--mouse-y', `${y}px`);\n-\t\t\t\t});\n-\t\t\t};\n-\n-\t\t\tconst handleMouseEnter = () => {\n-\t\t\t\tif (!wrapper) return;\n-\t\t\t\twrapper.style.setProperty('--radius', `${radius}px`);\n-\t\t\t};\n-\n-\t\t\tconst handleMouseLeave = () => {\n-\t\t\t\tif (!wrapper) return;\n-\t\t\t\twrapper.style.setProperty('--radius', '0px');\n-\t\t\t\tif (animationFrameId) {\n-\t\t\t\t\tcancelAnimationFrame(animationFrameId);\n-\t\t\t\t\tanimationFrameId = null;\n-\t\t\t\t}\n-\t\t\t};\n-\n-\t\t\twrapper.addEventListener('mousemove', handleMouseMove);\n-\t\t\twrapper.addEventListener('mouseenter', handleMouseEnter);\n-\t\t\twrapper.addEventListener('mouseleave', handleMouseLeave);\n-\n-\t\t\treturn () => {\n-\t\t\t\twrapper.removeEventListener('mousemove', handleMouseMove);\n-\t\t\t\twrapper.removeEventListener('mouseenter', handleMouseEnter);\n-\t\t\t\twrapper.removeEventListener('mouseleave', handleMouseLeave);\n-\t\t\t\tif (animationFrameId) {\n-\t\t\t\t\tcancelAnimationFrame(animationFrameId);\n-\t\t\t\t}\n-\t\t\t};\n-\t\t}, [radius]);\n-\n-\t\treturn (\n-\t\t\t<div\n-\t\t\t\tref={wrapperRef}\n-\t\t\t\tstyle={\n-\t\t\t\t\t{\n-\t\t\t\t\t\t'--radius': '0px',\n-\t\t\t\t\t\t'--mouse-x': '0px',\n-\t\t\t\t\t\t'--mouse-y': '0px',\n-\t\t\t\t\t\tbackground: `radial-gradient(var(--radius) circle at var(--mouse-x) var(--mouse-y), #3b82f6, transparent 80%)`,\n-\t\t\t\t\t} as React.CSSProperties\n-\t\t\t\t}\n-\t\t\t\tclassName=\"group/input rounded-lg p-[2px] transition duration-300\"\n-\t\t\t>\n-\t\t\t\t<input\n-\t\t\t\t\ttype={type}\n-\t\t\t\t\tclassName={cn(\n-\t\t\t\t\t\t`shadow-input dark:placeholder-text-neutral-600 flex h-10 w-full rounded-md border-none bg-gray-50 px-3 py-2 text-sm text-black transition duration-400 group-hover/input:shadow-none file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-neutral-400 focus-visible:ring-[2px] focus-visible:ring-neutral-400 focus-visible:outline-none disabled:cursor-not-allowed disabled:opacity-50 dark:bg-zinc-800 dark:text-white dark:shadow-[0px_0px_1px_1px_#404040] dark:focus-visible:ring-neutral-600`,\n-\t\t\t\t\t\tclassName,\n-\t\t\t\t\t)}\n-\t\t\t\t\tref={ref}\n-\t\t\t\t\t{...props}\n-\t\t\t\t/>\n-\t\t\t</div>\n-\t\t);\n-\t}),\n-);\n-\n-// ==================== BoxReveal Component ====================\n-type BoxRevealProps = {\n-\tchildren: ReactNode;\n-\twidth?: string;\n-\tboxColor?: string;\n-\tduration?: number;\n-\tclassName?: string;\n-};\n-\n-const BoxReveal = memo(function BoxReveal({\n-\tchildren,\n-\twidth = 'fit-content',\n-\tboxColor,\n-\tduration,\n-\tclassName,\n-}: BoxRevealProps) {\n-\tconst sectionRef = useRef<HTMLDivElement>(null);\n-\tconst boxRef = useRef<HTMLDivElement>(null);\n-\tconst childRef = useRef<HTMLDivElement>(null);\n-\n-\tuseEffect(() => {\n-\t\tconst section = sectionRef.current;\n-\t\tif (!section) return;\n-\n-\t\tconst observer = new IntersectionObserver(\n-\t\t\t(entries) => {\n-\t\t\t\tentries.forEach((entry) => {\n-\t\t\t\t\tif (entry.isIntersecting) {\n-\t\t\t\t\t\tgsap.timeline()\n-\t\t\t\t\t\t\t.set(childRef.current, { opacity: 0, y: 50 })\n-\t\t\t\t\t\t\t.set(boxRef.current, { transformOrigin: 'right' })\n-\t\t\t\t\t\t\t.to(boxRef.current, {\n-\t\t\t\t\t\t\t\tscaleX: 0,\n-\t\t\t\t\t\t\t\tduration: duration ?? 0.5,\n-\t\t\t\t\t\t\t\tease: 'power3.inOut',\n-\t\t\t\t\t\t\t})\n-\t\t\t\t\t\t\t.to(\n-\t\t\t\t\t\t\t\tchildRef.current,\n-\t\t\t\t\t\t\t\t{ y: 0, opacity: 1, duration: duration ?? 0.5, ease: 'power3.out' },\n-\t\t\t\t\t\t\t\t'-=0.3',\n-\t\t\t\t\t\t\t);\n-\t\t\t\t\t\tobserver.unobserve(section);\n-\t\t\t\t\t}\n-\t\t\t\t});\n-\t\t\t},\n-\t\t\t{ threshold: 0.1 },\n-\t\t);\n-\n-\t\tobserver.observe(section);\n-\n-\t\treturn () => {\n-\t\t\tif (section) {\n-\t\t\t\tobserver.unobserve(section);\n-\t\t\t}\n-\t\t};\n-\t}, [duration]);\n-\n-\treturn (\n-\t\t<div ref={sectionRef} style={{ width }} className={cn('relative overflow-hidden', className)}>\n-\t\t\t<div ref={childRef}>{children}</div>\n-\t\t\t<div\n-\t\t\t\tref={boxRef}\n-\t\t\t\tstyle={{\n-\t\t\t\t\tbackground: boxColor ?? 'hsl(var(--skeleton))',\n-\t\t\t\t}}\n-\t\t\t\tclassName=\"absolute top-1 bottom-1 left-0 right-0 z-20 rounded-sm\"\n-\t\t\t/>\n-\t\t</div>\n-\t);\n-});\n-\n-// ==================== Ripple Component ====================\n-interface RippleProps {\n-\tmainCircleSize?: number;\n-\tmainCircleOpacity?: number;\n-\tnumCircles?: number;\n-}\n-const Ripple = memo(function Ripple({\n-\tmainCircleSize = 210,\n-\tmainCircleOpacity = 0.24,\n-\tnumCircles = 11,\n-}: RippleProps) {\n-\treturn (\n-\t\t<div className=\"absolute inset-0 flex items-center justify-center [mask-image:linear-gradient(to_bottom,white,transparent)]\">\n-\t\t\t{Array.from({ length: numCircles }, (_, i) => {\n-\t\t\t\tconst size = mainCircleSize + i * 70;\n-\t\t\t\tconst opacity = mainCircleOpacity - i * 0.03;\n-\t\t\t\tconst animationDelay = `${i * 0.06}s`;\n-\t\t\t\tconst borderStyle = i === numCircles - 1 ? 'dashed' : 'solid';\n-\t\t\t\tconst borderOpacity = 5 + i * 5;\n-\n-\t\t\t\treturn (\n-\t\t\t\t\t<div\n-\t\t\t\t\t\tkey={i}\n-\t\t\t\t\t\tclassName=\"absolute animate-ripple rounded-full border\"\n-\t\t\t\t\t\tstyle={\n-\t\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\twidth: `${size}px`,\n-\t\t\t\t\t\t\t\theight: `${size}px`,\n-\t\t\t\t\t\t\t\topacity: opacity,\n-\t\t\t\t\t\t\t\tanimationDelay: animationDelay,\n-\t\t\t\t\t\t\t\tborderStyle: borderStyle,\n-\t\t\t\t\t\t\t\tborderWidth: '1px',\n-\t\t\t\t\t\t\t\tborderColor: `hsl(var(--foreground) / ${borderOpacity / 100})`,\n-\t\t\t\t\t\t\t\ttop: '50%',\n-\t\t\t\t\t\t\t\tleft: '50%',\n-\t\t\t\t\t\t\t\ttransform: 'translate(-50%, -50%)',\n-\t\t\t\t\t\t\t} as React.CSSProperties\n-\t\t\t\t\t\t}\n-\t\t\t\t\t/>\n-\t\t\t\t);\n-\t\t\t})}\n-\t\t</div>\n-\t);\n-});\n-\n-// ==================== OrbitingCircles Component ====================\n-const OrbitingCircles = memo(function OrbitingCircles({\n-\tclassName,\n-\tchildren,\n-\treverse = false,\n-\tduration = 20,\n-\tdelay = 10,\n-\tradius = 50,\n-\tpath = true,\n-}: {\n-\tclassName?: string;\n-\tchildren?: React.ReactNode;\n-\treverse?: boolean;\n-\tduration?: number;\n-\tdelay?: number;\n-\tradius?: number;\n-\tpath?: boolean;\n-}) {\n-\treturn (\n-\t\t<>\n-\t\t\t{path && (\n-\t\t\t\t<svg\n-\t\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n-\t\t\t\t\tversion=\"1.1\"\n-\t\t\t\t\tclassName=\"pointer-events-none absolute inset-0 size-full\"\n-\t\t\t\t>\n-\t\t\t\t\t<circle\n-\t\t\t\t\t\tclassName=\"stroke-black/10 stroke-1 dark:stroke-white/10\"\n-\t\t\t\t\t\tcx=\"50%\"\n-\t\t\t\t\t\tcy=\"50%\"\n-\t\t\t\t\t\tr={radius}\n-\t\t\t\t\t\tfill=\"none\"\n-\t\t\t\t\t/>\n-\t\t\t\t</svg>\n-\t\t\t)}\n-\t\t\t<div\n-\t\t\t\tstyle={\n-\t\t\t\t\t{\n-\t\t\t\t\t\t'--duration': duration,\n-\t\t\t\t\t\t'--radius': radius,\n-\t\t\t\t\t\t'--delay': -delay,\n-\t\t\t\t\t} as React.CSSProperties\n-\t\t\t\t}\n-\t\t\t\tclassName={cn(\n-\t\t\t\t\t'absolute flex size-full transform-gpu animate-orbit items-center justify-center rounded-full border bg-black/10 [animation-delay:calc(var(--delay)*1s)] dark:bg-white/10',\n-\t\t\t\t\t{ '[animation-direction:reverse]': reverse },\n-\t\t\t\t\tclassName,\n-\t\t\t\t)}\n-\t\t\t>\n-\t\t\t\t{children}\n-\t\t\t</div>\n-\t\t</>\n-\t);\n-});\n-\n-// ==================== TechOrbitDisplay Component ====================\n-interface OrbitIcon {\n-\tcomponent: () => ReactNode;\n-\tclassName: string;\n-\tduration?: number;\n-\tdelay?: number;\n-\tradius?: number;\n-\tpath?: boolean;\n-\treverse?: boolean;\n-}\n-\n-const iconsArray: OrbitIcon[] = [\n-\t{ component: () => <img width={30} height={30} src='https://cdn.jsdelivr.net/gh/devicons/devicon@latest/icons/html5/html5-original.svg' alt='HTML5' />, className: 'size-[30px] border-none bg-transparent', duration: 20, delay: 20, radius: 100, path: false, reverse: false },\n-\t{ component: () => <img width={30} height={30} src='https://cdn.jsdelivr.net/gh/devicons/devicon@latest/icons/css3/css3-original.svg' alt='CSS3' />, className: 'size-[30px] border-none bg-transparent', duration: 20, delay: 10, radius: 100, path: false, reverse: false },\n-\t{ component: () => <img width={50} height={50} src='https://cdn.jsdelivr.net/gh/devicons/devicon@latest/icons/typescript/typescript-original.svg' alt='TypeScript' />, className: 'size-[50px] border-none bg-transparent', radius: 210, duration: 20, path: false, reverse: false },\n-\t{ component: () => <img width={50} height={50} src='https://cdn.jsdelivr.net/gh/devicons/devicon@latest/icons/javascript/javascript-original.svg' alt='JavaScript' />, className: 'size-[50px] border-none bg-transparent', radius: 210, duration: 20, delay: 20, path: false, reverse: false },\n-\t{ component: () => <img width={30} height={30} src='https://cdn.jsdelivr.net/gh/devicons/devicon@latest/icons/tailwindcss/tailwindcss-original.svg' alt='TailwindCSS' />, className: 'size-[30px] border-none bg-transparent', duration: 20, delay: 20, radius: 150, path: false, reverse: true },\n-\t{ component: () => <img width={30} height={30} src='https://cdn.jsdelivr.net/gh/devicons/devicon@latest/icons/nextjs/nextjs-original.svg' alt='Nextjs' />, className: 'size-[30px] border-none bg-transparent', duration: 20, delay: 10, radius: 150, path: false, reverse: true },\n-\t{ component: () => <img width={50} height={50} src='https://cdn.jsdelivr.net/gh/devicons/devicon@latest/icons/react/react-original.svg' alt='React' />, className: 'size-[50px] border-none bg-transparent', radius: 270, duration: 20, path: false, reverse: true },\n-\t{ component: () => <img width={50} height={50} src='https://cdn.jsdelivr.net/gh/devicons/devicon@latest/icons/figma/figma-original.svg' alt='Figma' />, className: 'size-[50px] border-none bg-transparent', radius: 270, duration: 20, delay: 60, path: false, reverse: true },\n-\t{ component: () => <img width={50} height={50} src='https://cdn.jsdelivr.net/gh/devicons/devicon@latest/icons/git/git-original.svg' alt='Git' />, className: 'size-[50px] border-none bg-transparent', radius: 320, duration: 20, delay: 20, path: false, reverse: false },\n-];\n-\n-const TechOrbitDisplay = memo(function TechOrbitDisplay({ text = 'Jeli App Shell' }: { text?: string }) {\n-\treturn (\n-\t\t<div className=\"relative flex size-full flex-col items-center justify-center overflow-hidden rounded-lg\">\n-\t\t\t<span className=\"pointer-events-none whitespace-pre-wrap bg-gradient-to-b from-black to-gray-300/80 bg-clip-text text-center text-7xl font-semibold leading-none text-transparent dark:from-white dark:to-slate-900/10\">\n-\t\t\t\t{text}\n-\t\t\t</span>\n-\t\t\t{iconsArray.map((icon, index) => (\n-\t\t\t\t<OrbitingCircles key={index} {...icon}>\n-\t\t\t\t\t{icon.component()}\n-\t\t\t\t</OrbitingCircles>\n-\t\t\t))}\n-\t\t</div>\n-\t);\n-});\n-\n // ==================== AnimatedForm Components ====================\n-const BottomGradient = () => (\n-\t<>\n-\t\t<span className=\"group-hover/btn:opacity-100 block transition duration-500 opacity-0 absolute h-px w-full -bottom-px inset-x-0 bg-gradient-to-r from-transparent via-cyan-500 to-transparent\" />\n-\t\t<span className=\"group-hover/btn:opacity-100 blur-sm block transition duration-500 opacity-0 absolute h-px w-1/2 mx-auto -bottom-px inset-x-10 bg-gradient-to-r from-transparent via-indigo-500 to-transparent\" />\n-\t</>\n-);\n-\n-const Label = memo(function Label({ className, ...props }: React.LabelHTMLAttributes<HTMLLabelElement>) {\n-\treturn <label className={cn('text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70', className)} {...props} />;\n-});\n \n // ==================== Main LoginPage Component ====================\n interface LoginPageProps {\n@@ -370,7 +92,7 @@\n \t\t\t\t\t\t\t</BoxReveal>\n \t\t\t\t\t\t\t<BoxReveal width=\"100%\" boxColor=\"hsl(var(--skeleton))\" duration={0.3} className=\"flex flex-col space-y-2 w-full\">\n \t\t\t\t\t\t\t\t<div className=\"relative\">\n-\t\t\t\t\t\t\t\t\t<Input type={field.type === 'password' ? (showPassword ? 'text' : 'password') : field.type} id={field.label} placeholder={field.placeholder} onChange={field.onChange} />\n+\t\t\t\t\t\t\t\t\t<AnimatedInput type={field.type === 'password' ? (showPassword ? 'text' : 'password') : field.type} id={field.label} placeholder={field.placeholder} onChange={field.onChange} />\n \t\t\t\t\t\t\t\t\t{field.type === 'password' && (\n \t\t\t\t\t\t\t\t\t\t<button type=\"button\" onClick={() => setShowPassword(!showPassword)} className=\"absolute inset-y-0 right-0 pr-3 flex items-center text-sm leading-5\">\n \t\t\t\t\t\t\t\t\t\t\t{showPassword ? <EyeOff className=\"h-5 w-5 text-gray-500\" /> : <Eye className=\"h-5 w-5 text-gray-500\" />}\n\n"
    patchStrategy: standard-diff
  - type: write
    path: src/index.ts
    content: >+
      --- src/index.ts

      +++ src/index.ts

      @@ -48,6 +48,14 @@
       export * from './components/ui/tabs';
       export * from './components/ui/toast';
       export { AnimatedTabs } from './components/ui/animated-tabs';
      +

      +// Effects Components

      +export { AnimatedInput } from './components/effects/AnimatedInput';

      +export { BottomGradient } from './components/effects/BottomGradient';

      +export { BoxReveal } from './components/effects/BoxReveal';

      +export { OrbitingCircles, TechOrbitDisplay } from
      './components/effects/OrbitingCircles';

      +export { Ripple } from './components/effects/Ripple';

      +
       
       // Global Components
       export { CommandPalette } from './components/global/CommandPalette';

    patchStrategy: standard-diff
snapshot:
  src/components/effects/BoxReveal.tsx: null
  src/components/effects/Ripple.tsx: null
  src/components/effects/OrbitingCircles.tsx: null
  src/components/effects/AnimatedInput.tsx: null
  src/components/effects/BottomGradient.tsx: null
  src/components/auth/LoginPage.tsx: "import React, {\n\tuseState,\n\tChangeEvent,\n\tFormEvent,\n\tReactNode,\n\tuseEffect,\n\tuseRef,\n\tforwardRef,\n\tmemo,\n} from 'react';\nimport { Eye, EyeOff, Mail, ArrowLeft } from 'lucide-react';\nimport { gsap } from 'gsap';\nimport { cn } from '@/lib/utils';\n\n// ==================== Input Component ====================\nconst Input = memo(\n\tforwardRef(function Input(\n\t\t{ className, type, ...props }: React.InputHTMLAttributes<HTMLInputElement>,\n\t\tref: React.ForwardedRef<HTMLInputElement>,\n\t) {\n\t\tconst radius = 100;\n\t\tconst wrapperRef = useRef<HTMLDivElement>(null);\n\n\t\tuseEffect(() => {\n\t\t\tconst wrapper = wrapperRef.current;\n\t\t\tif (!wrapper) return;\n\n\t\t\tlet animationFrameId: number | null = null;\n\n\t\t\tconst handleMouseMove = (e: MouseEvent) => {\n\t\t\t\tif (animationFrameId) {\n\t\t\t\t\tcancelAnimationFrame(animationFrameId);\n\t\t\t\t}\n\n\t\t\t\tanimationFrameId = requestAnimationFrame(() => {\n\t\t\t\t\tif (!wrapper) return;\n\t\t\t\t\tconst { left, top } = wrapper.getBoundingClientRect();\n\t\t\t\t\tconst x = e.clientX - left;\n\t\t\t\t\tconst y = e.clientY - top;\n\t\t\t\t\twrapper.style.setProperty('--mouse-x', `${x}px`);\n\t\t\t\t\twrapper.style.setProperty('--mouse-y', `${y}px`);\n\t\t\t\t});\n\t\t\t};\n\n\t\t\tconst handleMouseEnter = () => {\n\t\t\t\tif (!wrapper) return;\n\t\t\t\twrapper.style.setProperty('--radius', `${radius}px`);\n\t\t\t};\n\n\t\t\tconst handleMouseLeave = () => {\n\t\t\t\tif (!wrapper) return;\n\t\t\t\twrapper.style.setProperty('--radius', '0px');\n\t\t\t\tif (animationFrameId) {\n\t\t\t\t\tcancelAnimationFrame(animationFrameId);\n\t\t\t\t\tanimationFrameId = null;\n\t\t\t\t}\n\t\t\t};\n\n\t\t\twrapper.addEventListener('mousemove', handleMouseMove);\n\t\t\twrapper.addEventListener('mouseenter', handleMouseEnter);\n\t\t\twrapper.addEventListener('mouseleave', handleMouseLeave);\n\n\t\t\treturn () => {\n\t\t\t\twrapper.removeEventListener('mousemove', handleMouseMove);\n\t\t\t\twrapper.removeEventListener('mouseenter', handleMouseEnter);\n\t\t\t\twrapper.removeEventListener('mouseleave', handleMouseLeave);\n\t\t\t\tif (animationFrameId) {\n\t\t\t\t\tcancelAnimationFrame(animationFrameId);\n\t\t\t\t}\n\t\t\t};\n\t\t}, [radius]);\n\n\t\treturn (\n\t\t\t<div\n\t\t\t\tref={wrapperRef}\n\t\t\t\tstyle={\n\t\t\t\t\t{\n\t\t\t\t\t\t'--radius': '0px',\n\t\t\t\t\t\t'--mouse-x': '0px',\n\t\t\t\t\t\t'--mouse-y': '0px',\n\t\t\t\t\t\tbackground: `radial-gradient(var(--radius) circle at var(--mouse-x) var(--mouse-y), #3b82f6, transparent 80%)`,\n\t\t\t\t\t} as React.CSSProperties\n\t\t\t\t}\n\t\t\t\tclassName=\"group/input rounded-lg p-[2px] transition duration-300\"\n\t\t\t>\n\t\t\t\t<input\n\t\t\t\t\ttype={type}\n\t\t\t\t\tclassName={cn(\n\t\t\t\t\t\t`shadow-input dark:placeholder-text-neutral-600 flex h-10 w-full rounded-md border-none bg-gray-50 px-3 py-2 text-sm text-black transition duration-400 group-hover/input:shadow-none file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-neutral-400 focus-visible:ring-[2px] focus-visible:ring-neutral-400 focus-visible:outline-none disabled:cursor-not-allowed disabled:opacity-50 dark:bg-zinc-800 dark:text-white dark:shadow-[0px_0px_1px_1px_#404040] dark:focus-visible:ring-neutral-600`,\n\t\t\t\t\t\tclassName,\n\t\t\t\t\t)}\n\t\t\t\t\tref={ref}\n\t\t\t\t\t{...props}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t);\n\t}),\n);\n\n// ==================== BoxReveal Component ====================\ntype BoxRevealProps = {\n\tchildren: ReactNode;\n\twidth?: string;\n\tboxColor?: string;\n\tduration?: number;\n\tclassName?: string;\n};\n\nconst BoxReveal = memo(function BoxReveal({\n\tchildren,\n\twidth = 'fit-content',\n\tboxColor,\n\tduration,\n\tclassName,\n}: BoxRevealProps) {\n\tconst sectionRef = useRef<HTMLDivElement>(null);\n\tconst boxRef = useRef<HTMLDivElement>(null);\n\tconst childRef = useRef<HTMLDivElement>(null);\n\n\tuseEffect(() => {\n\t\tconst section = sectionRef.current;\n\t\tif (!section) return;\n\n\t\tconst observer = new IntersectionObserver(\n\t\t\t(entries) => {\n\t\t\t\tentries.forEach((entry) => {\n\t\t\t\t\tif (entry.isIntersecting) {\n\t\t\t\t\t\tgsap.timeline()\n\t\t\t\t\t\t\t.set(childRef.current, { opacity: 0, y: 50 })\n\t\t\t\t\t\t\t.set(boxRef.current, { transformOrigin: 'right' })\n\t\t\t\t\t\t\t.to(boxRef.current, {\n\t\t\t\t\t\t\t\tscaleX: 0,\n\t\t\t\t\t\t\t\tduration: duration ?? 0.5,\n\t\t\t\t\t\t\t\tease: 'power3.inOut',\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t.to(\n\t\t\t\t\t\t\t\tchildRef.current,\n\t\t\t\t\t\t\t\t{ y: 0, opacity: 1, duration: duration ?? 0.5, ease: 'power3.out' },\n\t\t\t\t\t\t\t\t'-=0.3',\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\tobserver.unobserve(section);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t},\n\t\t\t{ threshold: 0.1 },\n\t\t);\n\n\t\tobserver.observe(section);\n\n\t\treturn () => {\n\t\t\tif (section) {\n\t\t\t\tobserver.unobserve(section);\n\t\t\t}\n\t\t};\n\t}, [duration]);\n\n\treturn (\n\t\t<div ref={sectionRef} style={{ width }} className={cn('relative overflow-hidden', className)}>\n\t\t\t<div ref={childRef}>{children}</div>\n\t\t\t<div\n\t\t\t\tref={boxRef}\n\t\t\t\tstyle={{\n\t\t\t\t\tbackground: boxColor ?? 'hsl(var(--skeleton))',\n\t\t\t\t}}\n\t\t\t\tclassName=\"absolute top-1 bottom-1 left-0 right-0 z-20 rounded-sm\"\n\t\t\t/>\n\t\t</div>\n\t);\n});\n\n// ==================== Ripple Component ====================\ninterface RippleProps {\n\tmainCircleSize?: number;\n\tmainCircleOpacity?: number;\n\tnumCircles?: number;\n}\nconst Ripple = memo(function Ripple({\n\tmainCircleSize = 210,\n\tmainCircleOpacity = 0.24,\n\tnumCircles = 11,\n}: RippleProps) {\n\treturn (\n\t\t<div className=\"absolute inset-0 flex items-center justify-center [mask-image:linear-gradient(to_bottom,white,transparent)]\">\n\t\t\t{Array.from({ length: numCircles }, (_, i) => {\n\t\t\t\tconst size = mainCircleSize + i * 70;\n\t\t\t\tconst opacity = mainCircleOpacity - i * 0.03;\n\t\t\t\tconst animationDelay = `${i * 0.06}s`;\n\t\t\t\tconst borderStyle = i === numCircles - 1 ? 'dashed' : 'solid';\n\t\t\t\tconst borderOpacity = 5 + i * 5;\n\n\t\t\t\treturn (\n\t\t\t\t\t<div\n\t\t\t\t\t\tkey={i}\n\t\t\t\t\t\tclassName=\"absolute animate-ripple rounded-full border\"\n\t\t\t\t\t\tstyle={\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\twidth: `${size}px`,\n\t\t\t\t\t\t\t\theight: `${size}px`,\n\t\t\t\t\t\t\t\topacity: opacity,\n\t\t\t\t\t\t\t\tanimationDelay: animationDelay,\n\t\t\t\t\t\t\t\tborderStyle: borderStyle,\n\t\t\t\t\t\t\t\tborderWidth: '1px',\n\t\t\t\t\t\t\t\tborderColor: `hsl(var(--foreground) / ${borderOpacity / 100})`,\n\t\t\t\t\t\t\t\ttop: '50%',\n\t\t\t\t\t\t\t\tleft: '50%',\n\t\t\t\t\t\t\t\ttransform: 'translate(-50%, -50%)',\n\t\t\t\t\t\t\t} as React.CSSProperties\n\t\t\t\t\t\t}\n\t\t\t\t\t/>\n\t\t\t\t);\n\t\t\t})}\n\t\t</div>\n\t);\n});\n\n// ==================== OrbitingCircles Component ====================\nconst OrbitingCircles = memo(function OrbitingCircles({\n\tclassName,\n\tchildren,\n\treverse = false,\n\tduration = 20,\n\tdelay = 10,\n\tradius = 50,\n\tpath = true,\n}: {\n\tclassName?: string;\n\tchildren?: React.ReactNode;\n\treverse?: boolean;\n\tduration?: number;\n\tdelay?: number;\n\tradius?: number;\n\tpath?: boolean;\n}) {\n\treturn (\n\t\t<>\n\t\t\t{path && (\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\t\t\tversion=\"1.1\"\n\t\t\t\t\tclassName=\"pointer-events-none absolute inset-0 size-full\"\n\t\t\t\t>\n\t\t\t\t\t<circle\n\t\t\t\t\t\tclassName=\"stroke-black/10 stroke-1 dark:stroke-white/10\"\n\t\t\t\t\t\tcx=\"50%\"\n\t\t\t\t\t\tcy=\"50%\"\n\t\t\t\t\t\tr={radius}\n\t\t\t\t\t\tfill=\"none\"\n\t\t\t\t\t/>\n\t\t\t\t</svg>\n\t\t\t)}\n\t\t\t<div\n\t\t\t\tstyle={\n\t\t\t\t\t{\n\t\t\t\t\t\t'--duration': duration,\n\t\t\t\t\t\t'--radius': radius,\n\t\t\t\t\t\t'--delay': -delay,\n\t\t\t\t\t} as React.CSSProperties\n\t\t\t\t}\n\t\t\t\tclassName={cn(\n\t\t\t\t\t'absolute flex size-full transform-gpu animate-orbit items-center justify-center rounded-full border bg-black/10 [animation-delay:calc(var(--delay)*1s)] dark:bg-white/10',\n\t\t\t\t\t{ '[animation-direction:reverse]': reverse },\n\t\t\t\t\tclassName,\n\t\t\t\t)}\n\t\t\t>\n\t\t\t\t{children}\n\t\t\t</div>\n\t\t</>\n\t);\n});\n\n// ==================== TechOrbitDisplay Component ====================\ninterface OrbitIcon {\n\tcomponent: () => ReactNode;\n\tclassName: string;\n\tduration?: number;\n\tdelay?: number;\n\tradius?: number;\n\tpath?: boolean;\n\treverse?: boolean;\n}\n\nconst iconsArray: OrbitIcon[] = [\n\t{ component: () => <img width={30} height={30} src='https://cdn.jsdelivr.net/gh/devicons/devicon@latest/icons/html5/html5-original.svg' alt='HTML5' />, className: 'size-[30px] border-none bg-transparent', duration: 20, delay: 20, radius: 100, path: false, reverse: false },\n\t{ component: () => <img width={30} height={30} src='https://cdn.jsdelivr.net/gh/devicons/devicon@latest/icons/css3/css3-original.svg' alt='CSS3' />, className: 'size-[30px] border-none bg-transparent', duration: 20, delay: 10, radius: 100, path: false, reverse: false },\n\t{ component: () => <img width={50} height={50} src='https://cdn.jsdelivr.net/gh/devicons/devicon@latest/icons/typescript/typescript-original.svg' alt='TypeScript' />, className: 'size-[50px] border-none bg-transparent', radius: 210, duration: 20, path: false, reverse: false },\n\t{ component: () => <img width={50} height={50} src='https://cdn.jsdelivr.net/gh/devicons/devicon@latest/icons/javascript/javascript-original.svg' alt='JavaScript' />, className: 'size-[50px] border-none bg-transparent', radius: 210, duration: 20, delay: 20, path: false, reverse: false },\n\t{ component: () => <img width={30} height={30} src='https://cdn.jsdelivr.net/gh/devicons/devicon@latest/icons/tailwindcss/tailwindcss-original.svg' alt='TailwindCSS' />, className: 'size-[30px] border-none bg-transparent', duration: 20, delay: 20, radius: 150, path: false, reverse: true },\n\t{ component: () => <img width={30} height={30} src='https://cdn.jsdelivr.net/gh/devicons/devicon@latest/icons/nextjs/nextjs-original.svg' alt='Nextjs' />, className: 'size-[30px] border-none bg-transparent', duration: 20, delay: 10, radius: 150, path: false, reverse: true },\n\t{ component: () => <img width={50} height={50} src='https://cdn.jsdelivr.net/gh/devicons/devicon@latest/icons/react/react-original.svg' alt='React' />, className: 'size-[50px] border-none bg-transparent', radius: 270, duration: 20, path: false, reverse: true },\n\t{ component: () => <img width={50} height={50} src='https://cdn.jsdelivr.net/gh/devicons/devicon@latest/icons/figma/figma-original.svg' alt='Figma' />, className: 'size-[50px] border-none bg-transparent', radius: 270, duration: 20, delay: 60, path: false, reverse: true },\n\t{ component: () => <img width={50} height={50} src='https://cdn.jsdelivr.net/gh/devicons/devicon@latest/icons/git/git-original.svg' alt='Git' />, className: 'size-[50px] border-none bg-transparent', radius: 320, duration: 20, delay: 20, path: false, reverse: false },\n];\n\nconst TechOrbitDisplay = memo(function TechOrbitDisplay({ text = 'Jeli App Shell' }: { text?: string }) {\n\treturn (\n\t\t<div className=\"relative flex size-full flex-col items-center justify-center overflow-hidden rounded-lg\">\n\t\t\t<span className=\"pointer-events-none whitespace-pre-wrap bg-gradient-to-b from-black to-gray-300/80 bg-clip-text text-center text-7xl font-semibold leading-none text-transparent dark:from-white dark:to-slate-900/10\">\n\t\t\t\t{text}\n\t\t\t</span>\n\t\t\t{iconsArray.map((icon, index) => (\n\t\t\t\t<OrbitingCircles key={index} {...icon}>\n\t\t\t\t\t{icon.component()}\n\t\t\t\t</OrbitingCircles>\n\t\t\t))}\n\t\t</div>\n\t);\n});\n\n// ==================== AnimatedForm Components ====================\nconst BottomGradient = () => (\n\t<>\n\t\t<span className=\"group-hover/btn:opacity-100 block transition duration-500 opacity-0 absolute h-px w-full -bottom-px inset-x-0 bg-gradient-to-r from-transparent via-cyan-500 to-transparent\" />\n\t\t<span className=\"group-hover/btn:opacity-100 blur-sm block transition duration-500 opacity-0 absolute h-px w-1/2 mx-auto -bottom-px inset-x-10 bg-gradient-to-r from-transparent via-indigo-500 to-transparent\" />\n\t</>\n);\n\nconst Label = memo(function Label({ className, ...props }: React.LabelHTMLAttributes<HTMLLabelElement>) {\n\treturn <label className={cn('text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70', className)} {...props} />;\n});\n\n// ==================== Main LoginPage Component ====================\ninterface LoginPageProps {\n\tonLogin?: (email: string, password: string) => void;\n\tonForgotPassword?: (email: string) => void;\n\tonSignUp?: () => void;\n}\n\ntype LoginState = 'login' | 'forgot-password' | 'reset-sent';\n\nexport function LoginPage({ onLogin, onForgotPassword }: LoginPageProps) {\n\tconst [state, setState] = useState<LoginState>('login');\n\tconst [email, setEmail] = useState('');\n\tconst [password, setPassword] = useState('');\n\tconst [isLoading, setIsLoading] = useState(false);\n\tconst [errors, setErrors] = useState<{ email?: string; password?: string }>({});\n\tconst [showPassword, setShowPassword] = useState(false);\n\n\tconst handleLoginSubmit = async (e: FormEvent) => {\n\t\te.preventDefault();\n\t\tsetErrors({});\n\t\tconst newErrors: typeof errors = {};\n\t\tif (!email) newErrors.email = 'Email is required';\n\t\tif (!password) newErrors.password = 'Password is required';\n\t\tif (Object.keys(newErrors).length > 0) {\n\t\t\tsetErrors(newErrors);\n\t\t\treturn;\n\t\t}\n\t\tsetIsLoading(true);\n\t\tawait onLogin?.(email, password);\n\t\tsetIsLoading(false);\n\t};\n\n\tconst handleForgotSubmit = async (e: FormEvent) => {\n\t\te.preventDefault();\n\t\tsetErrors({});\n\t\tif (!email) {\n\t\t\tsetErrors({ email: 'Email is required' });\n\t\t\treturn;\n\t\t}\n\t\tsetIsLoading(true);\n\t\tawait onForgotPassword?.(email);\n\t\tsetIsLoading(false);\n\t\tsetState('reset-sent');\n\t};\n\n\tconst renderContent = () => {\n\t\tif (state === 'reset-sent') {\n\t\t\treturn (\n\t\t\t\t<div className=\"w-full max-w-md mx-auto text-center flex flex-col gap-4\">\n\t\t\t\t\t<BoxReveal boxColor=\"hsl(var(--skeleton))\" duration={0.5}>\n\t\t\t\t\t\t<div className=\"w-16 h-16 bg-green-100 dark:bg-green-900/20 rounded-full flex items-center justify-center mx-auto\">\n\t\t\t\t\t\t\t<Mail className=\"w-8 h-8 text-green-600 dark:text-green-400\" />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</BoxReveal>\n\t\t\t\t\t<BoxReveal boxColor=\"hsl(var(--skeleton))\" duration={0.5}>\n\t\t\t\t\t\t<h1 className=\"text-3xl font-bold tracking-tight\">Check your email</h1>\n\t\t\t\t\t</BoxReveal>\n\t\t\t\t\t<BoxReveal boxColor=\"hsl(var(--skeleton))\" duration={0.5}>\n\t\t\t\t\t\t<p className=\"text-muted-foreground\">We've sent a password reset link to <strong>{email}</strong></p>\n\t\t\t\t\t</BoxReveal>\n\t\t\t\t\t<BoxReveal width=\"100%\" boxColor=\"hsl(var(--skeleton))\" duration={0.5}>\n\t\t\t\t\t\t<button onClick={() => setState('login')} className=\"text-sm text-blue-500 hover:underline\">\n\t\t\t\t\t\t\t<div className=\"flex items-center justify-center gap-2\">\n\t\t\t\t\t\t\t\t<ArrowLeft className=\"w-4 h-4\" /> Back to login\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</BoxReveal>\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\n\t\tconst isLogin = state === 'login';\n\t\tconst formFields = isLogin\n\t\t\t? [\n\t\t\t\t{ label: 'Email', required: true, type: 'email', placeholder: 'Enter your email address', onChange: (e: ChangeEvent<HTMLInputElement>) => setEmail(e.target.value) },\n\t\t\t\t{ label: 'Password', required: true, type: 'password', placeholder: 'Enter your password', onChange: (e: ChangeEvent<HTMLInputElement>) => setPassword(e.target.value) },\n\t\t\t]\n\t\t\t: [{ label: 'Email', required: true, type: 'email', placeholder: 'Enter your email address', onChange: (e: ChangeEvent<HTMLInputElement>) => setEmail(e.target.value) }];\n\n\t\treturn (\n\t\t\t<div className=\"w-full max-w-md mx-auto flex flex-col gap-4\">\n\t\t\t\t<BoxReveal boxColor=\"hsl(var(--skeleton))\" duration={0.3}>\n\t\t\t\t\t<h2 className=\"font-bold text-3xl text-neutral-800 dark:text-neutral-200\">{isLogin ? 'Welcome back' : 'Reset Password'}</h2>\n\t\t\t\t</BoxReveal>\n\t\t\t\t<BoxReveal boxColor=\"hsl(var(--skeleton))\" duration={0.3} className=\"pb-2\">\n\t\t\t\t\t<p className=\"text-neutral-600 text-sm max-w-sm dark:text-neutral-300\">{isLogin ? 'Sign in to your account to continue' : 'Enter your email to receive a reset link'}</p>\n\t\t\t\t</BoxReveal>\n\t\t\t\t{isLogin && (\n\t\t\t\t\t<BoxReveal boxColor=\"hsl(var(--skeleton))\" duration={0.3} width=\"100%\" className=\"overflow-visible\">\n\t\t\t\t\t\t<button className=\"g-button group/btn bg-transparent w-full rounded-md border h-10 font-medium outline-hidden hover:cursor-pointer\" type=\"button\">\n\t\t\t\t\t\t\t<span className=\"flex items-center justify-center w-full h-full gap-3\">\n\t\t\t\t\t\t\t\t<img src=\"https://cdn1.iconfinder.com/data/icons/google-s-logo/150/Google_Icons-09-512.png\" width={26} height={26} alt=\"Google Icon\" />\n\t\t\t\t\t\t\t\tSign in with Google\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t<BottomGradient />\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</BoxReveal>\n\t\t\t\t)}\n\t\t\t\t{isLogin && (\n\t\t\t\t\t<BoxReveal boxColor=\"hsl(var(--skeleton))\" duration={0.3} width=\"100%\">\n\t\t\t\t\t\t<div className=\"flex items-center gap-4\">\n\t\t\t\t\t\t\t<hr className=\"flex-1 border-1 border-dashed border-neutral-300 dark:border-neutral-700\" />\n\t\t\t\t\t\t\t<p className=\"text-neutral-700 text-sm dark:text-neutral-300\">or</p>\n\t\t\t\t\t\t\t<hr className=\"flex-1 border-1 border-dashed border-neutral-300 dark:border-neutral-700\" />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</BoxReveal>\n\t\t\t\t)}\n\t\t\t\t<form onSubmit={isLogin ? handleLoginSubmit : handleForgotSubmit}>\n\t\t\t\t\t{formFields.map((field) => (\n\t\t\t\t\t\t<div key={field.label} className=\"flex flex-col gap-2 mb-4\">\n\t\t\t\t\t\t\t<BoxReveal boxColor=\"hsl(var(--skeleton))\" duration={0.3}>\n\t\t\t\t\t\t\t\t<Label htmlFor={field.label}>{field.label} <span className=\"text-red-500\">*</span></Label>\n\t\t\t\t\t\t\t</BoxReveal>\n\t\t\t\t\t\t\t<BoxReveal width=\"100%\" boxColor=\"hsl(var(--skeleton))\" duration={0.3} className=\"flex flex-col space-y-2 w-full\">\n\t\t\t\t\t\t\t\t<div className=\"relative\">\n\t\t\t\t\t\t\t\t\t<Input type={field.type === 'password' ? (showPassword ? 'text' : 'password') : field.type} id={field.label} placeholder={field.placeholder} onChange={field.onChange} />\n\t\t\t\t\t\t\t\t\t{field.type === 'password' && (\n\t\t\t\t\t\t\t\t\t\t<button type=\"button\" onClick={() => setShowPassword(!showPassword)} className=\"absolute inset-y-0 right-0 pr-3 flex items-center text-sm leading-5\">\n\t\t\t\t\t\t\t\t\t\t\t{showPassword ? <EyeOff className=\"h-5 w-5 text-gray-500\" /> : <Eye className=\"h-5 w-5 text-gray-500\" />}\n\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div className=\"h-4\">{errors[field.label as keyof typeof errors] && <p className=\"text-red-500 text-xs\">{errors[field.label as keyof typeof errors]}</p>}</div>\n\t\t\t\t\t\t\t</BoxReveal>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t))}\n\n\t\t\t\t\t<BoxReveal width=\"100%\" boxColor=\"hsl(var(--skeleton))\" duration={0.3} className=\"overflow-visible\">\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tclassName=\"bg-gradient-to-br relative group/btn from-zinc-200 dark:from-zinc-900 dark:to-zinc-900 to-zinc-200 block dark:bg-zinc-800 w-full text-black dark:text-white rounded-md h-10 font-medium shadow-[0px_1px_0px_0px_#ffffff40_inset,0px_-1px_0px_0px_#ffffff40_inset] dark:shadow-[0px_1px_0px_0px_var(--zinc-800)_inset,0px_-1px_0px_0px_var(--zinc-800)_inset] outline-hidden hover:cursor-pointer disabled:opacity-50\"\n\t\t\t\t\t\t\ttype=\"submit\" disabled={isLoading}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{isLoading ? (\n\t\t\t\t\t\t\t\t<div className=\"flex items-center justify-center gap-2\">\n\t\t\t\t\t\t\t\t\t<div className=\"w-4 h-4 border-2 border-current border-t-transparent rounded-full animate-spin\" />\n\t\t\t\t\t\t\t\t\t<span>Processing...</span>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t<>{isLogin ? 'Sign in' : 'Send reset link'} &rarr;</>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t<BottomGradient />\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</BoxReveal>\n\t\t\t\t\t<BoxReveal boxColor=\"hsl(var(--skeleton))\" duration={0.3}>\n\t\t\t\t\t\t<div className=\"mt-4 text-center\">\n\t\t\t\t\t\t\t<button type=\"button\" className=\"text-sm text-blue-500 hover:underline\" onClick={() => setState(isLogin ? 'forgot-password' : 'login')}>\n\t\t\t\t\t\t\t\t{isLogin ? 'Forgot password?' : 'Back to login'}\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</BoxReveal>\n\t\t\t\t</form>\n\t\t\t</div>\n\t\t);\n\t};\n\n\treturn (\n\t\t<section className=\"flex max-lg:justify-center min-h-screen w-full login-page-theme bg-background text-foreground\">\n\t\t\t{/* Left Side */}\n\t\t\t<div className=\"flex flex-col justify-center w-1/2 max-lg:hidden relative\">\n\t\t\t\t<Ripple />\n\t\t\t\t<TechOrbitDisplay />\n\t\t\t</div>\n\n\t\t\t{/* Right Side */}\n\t\t\t<div className=\"w-1/2 h-screen flex flex-col justify-center items-center max-lg:w-full max-lg:px-[10%]\">\n\t\t\t\t{renderContent()}\n\t\t\t</div>\n\t\t</section>\n\t);\n}"
  src/index.ts: >-
    // Context

    export { AppShellProvider, useAppShell } from './context/AppShellContext';


    // Layout Components

    export { AppShell } from './components/layout/AppShell';

    export { MainContent } from './components/layout/MainContent';

    export { ViewModeSwitcher } from './components/layout/ViewModeSwitcher';

    export { RightPane } from './components/layout/RightPane';

    export { TopBar } from './components/layout/TopBar';

    export { UserDropdown } from './components/layout/UserDropdown';

    export { Workspaces as WorkspaceProvider, WorkspaceTrigger, WorkspaceContent
    } from './components/layout/WorkspaceSwitcher';


    // Sidebar Primitives

    export {
      Sidebar,
      SidebarBody,
      SidebarContent,
      SidebarFooter,
      SidebarHeader,
      SidebarSection,
      SidebarTitle,
      SidebarMenuItem,
      SidebarMenuButton,
      SidebarMenuAction,
      SidebarLabel,
      SidebarBadge,
      SidebarTooltip,
      SidebarIcon,
      useSidebar,
    } from './components/layout/Sidebar';


    // Shared Components

    export { ContentInSidePanePlaceholder } from
    './components/shared/ContentInSidePanePlaceholder';

    export { PageHeader } from './components/shared/PageHeader';

    export { PageLayout } from './components/shared/PageLayout';


    // Feature Components

    export { SettingsContent } from './features/settings/SettingsContent';

    export { SettingsSection } from './features/settings/SettingsSection';

    export { SettingsToggle } from './features/settings/SettingsToggle';

    export { LoginPage } from './components/auth/LoginPage';


    // UI Components

    export * from './components/ui/avatar';

    export * from './components/ui/badge';

    export * from './components/ui/button';

    export * from './components/ui/card';

    export * from './components/ui/command';

    export * from './components/ui/dialog';

    export * from './components/ui/dropdown-menu';

    export * from './components/ui/input';

    export * from './components/ui/label';

    export * from './components/ui/popover';

    export * from './components/ui/tabs';

    export * from './components/ui/toast';

    export { AnimatedTabs } from './components/ui/animated-tabs';


    // Global Components

    export { CommandPalette } from './components/global/CommandPalette';


    // Hooks

    export { useAutoAnimateTopBar } from './hooks/useAutoAnimateTopBar';

    export { useCommandPaletteToggle } from
    './hooks/useCommandPaletteToggle.hook';


    // Lib

    export * from './lib/utils';


    // Store

    export { useAppStore, type ActivePage } from './store/appStore';

    export { useAuthStore } from './store/authStore';
approved: true
linesAdded: null
linesRemoved: null
linesDifference: null
gitCommittedAt: '2025-10-14T01:32:06.666Z'
status: committed
id: 254
