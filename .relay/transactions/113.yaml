uuid: 4f4f7871-3642-4f30-8091-a1286c75c82a
projectId: amazing-app-shell
createdAt: '2025-10-11T07:34:32.800Z'
gitCommitMsg: >-
  docs: Update README for library consumption

  Updates the README.md with accurate installation instructions, peer
  dependencies, and usage examples for the newly added AppShellProvider
  configuration props (`appName` and `appLogo`).
promptSummary: Update the README.md file to reflect library configuration changes.
reasoning:
  - >-
    Of course. Here are the documentation updates for `README.md` to reflect the
    changes for library consumption and configuration.
  - 'I''m updating the README to:'
  - >-
    1.  Include `tailwindcss` and `tailwindcss-animate` in the peer dependency
    installation instructions.
  - >-
    2.  Correct the `tailwind.config.js` example to use `module.exports` and
    include the `tailwindcss-animate` plugin.
  - >-
    3.  Update the `App.tsx` usage example to demonstrate how to pass the new
    `appName` and `appLogo` props to the `AppShellProvider`.
  - bash
  - >-
    -npm install amazing-app-shell react react-dom gsap lucide-react
    tailwind-merge class-variance-authority clsx
  - >-
    +npm install amazing-app-shell react react-dom tailwindcss gsap lucide-react
    tailwind-merge class-variance-authority clsx tailwindcss-animate
  - bash
  - >-
    -yarn add amazing-app-shell react react-dom gsap lucide-react tailwind-merge
    class-variance-authority clsx
  - >-
    +yarn add amazing-app-shell react react-dom tailwindcss gsap lucide-react
    tailwind-merge class-variance-authority clsx tailwindcss-animate
  - javascript
  - /** @type {import('tailwindcss').Config} */
  - '-module.tole = {'
  - +module.exports = {
  - // ... your other config
  - 'content: ['
  - '''./src/**/*.{js,ts,jsx,tsx}'','
  - // Add the path to the library's components
  - '''./node_modules/amazing-app-shell/dist/**/*.{js,ts,jsx,tsx}'','
  - '],'
  - '-  // ...'
  - '+  theme: {'
  - +    // ...
  - +  },
  - '+  plugins: [require(''tailwindcss-animate'')],'
  - '};'
  - tsx
  - import React from 'react';
  - import { AppShellProvider } from 'amazing-app-shell';
  - >-
    import { ToasterProvider } from 'amazing-app-shell'; // Re-exported for
    convenience
  - +import { Rocket } from 'lucide-react';
  - import { YourAppComponent } from './YourAppComponent';
  - function App() {
  - +  const myLogo = (
  - +    <div className="p-2 bg-primary/20 rounded-lg">
  - +      <Rocket className="w-5 h-5 text-primary" />
  - +    </div>
  - +  );
  - +
  - return (
  - '-    <AppShellProvider>'
  - +    <AppShellProvider appName="My Awesome App" appLogo={myLogo}>
  - <ToasterProvider>
  - <YourAppComponent />
  - </ToasterProvider>
  - '```'
operations:
  - type: write
    path: README.md
    content: |-
      --- README.md
      +++ README.md
      @@ -29,11 +29,11 @@
       ## Installation
       
       Install the package and its peer dependencies using your preferred package manager.
      -
       
    patchStrategy: standard-diff
  - type: write
    path: or
    content: |2-
       
       
    patchStrategy: replace
  - type: write
    path: '## Getting Started'
    content: |-
      @@ -43,15 +43,20 @@
       
       ### 1. Configure Tailwind CSS
       
       You need to configure Tailwind CSS to correctly process the styles from the library.
       
       **`tailwind.config.js`**
       
       
    patchStrategy: replace
  - type: write
    path: '@@ -71,13 +76,21 @@'
    content: |2-
       
       **`App.tsx`**
       
       
    patchStrategy: replace
snapshot:
  or: null
  '## Getting Started': null
  '@@ -71,13 +76,21 @@': null
  README.md: >
    # Amazing App Shell


    [![npm
    version](https://img.shields.io/npm/v/amazing-app-shell.svg?style=flat)](https://www.npmjs.com/package/amazing-app-shell)

    [![License:
    MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)

    [![Build
    Status](https://img.shields.io/travis/com/your-username/amazing-app-shell.svg)](https://travis-ci.com/your-username/amazing-app-shell)


    A fully-featured, animated, and customizable application shell for React,
    built with TypeScript, Tailwind CSS, and powered by GSAP for smooth
    animations. Provide a modern, desktop-grade user experience out of the box.


    This library provides all the necessary components and hooks to build a
    complex application layout with a resizable sidebar, a dynamic main content
    area, a contextual side pane, and more.


    [**Live Demo (Storybook) â†’**](https://your-demo-link.com)

     <!-- TODO: Add a real preview image -->

    ---


    ## Key Features


    -   **Component-Based Architecture**: Build your shell by composing flexible
    and powerful React components.

    -   **Resizable Sidebar**: Draggable resizing with multiple states:
    `Expanded`, `Collapsed`, `Hidden`, and `Peek` (on hover).

    -   **Dynamic Body States**: Seamlessly switch between `Normal`,
    `Fullscreen`, and `Side Pane` views.

    -   **Smooth Animations**: Fluid transitions powered by GSAP for a premium
    feel.

    -   **Dark Mode Support**: First-class dark mode support, easily toggled.

    -   **Customizable Theming**: Easily theme your application using CSS
    variables, just like shadcn/ui.

    -   **State Management Included**: Simple and powerful state management via
    React Context and Zustand.

    -   **Command Palette**: Built-in command palette for quick navigation and
    actions.

    -   **TypeScript & Modern Tools**: Built with TypeScript, React, Vite, and
    Tailwind CSS for a great developer experience.


    ## Installation


    Install the package and its peer dependencies using your preferred package
    manager.


    ```bash

    npm install amazing-app-shell react react-dom gsap lucide-react
    tailwind-merge class-variance-authority clsx

    ```


    or


    ```bash

    yarn add amazing-app-shell react react-dom gsap lucide-react tailwind-merge
    class-variance-authority clsx

    ```


    ## Getting Started


    Follow these steps to integrate Amazing App Shell into your project.


    ### 1. Configure Tailwind CSS


    You need to configure Tailwind CSS to correctly process the styles from the
    library.


    **`tailwind.config.js`**


    ```javascript

    /** @type {import('tailwindcss').Config} */

    module.tole = {
      // ... your other config
      content: [
        './src/**/*.{js,ts,jsx,tsx}',
        // Add the path to the library's components
        './node_modules/amazing-app-shell/dist/**/*.{js,ts,jsx,tsx}',
      ],
      // ...
    };

    ```


    **`index.css` (or your main CSS file)**


    You need to import the library's stylesheet. It contains all the necessary
    base styles and CSS variables for theming.


    ```css

    /* Import Tailwind's base, components, and utilities */

    @import 'tailwindcss/base';

    @import 'tailwindcss/components';

    @import 'tailwindcss/utilities';


    /* Import the App Shell's stylesheet */

    @import 'amazing-app-shell/dist/style.css';

    ```


    ### 2. Set Up Providers


    Wrap your application's root component with `AppShellProvider` and
    `ToasterProvider`.


    **`App.tsx`**


    ```tsx

    import React from 'react';

    import { AppShellProvider } from 'amazing-app-shell';

    import { ToasterProvider } from 'amazing-app-shell'; // Re-exported for
    convenience

    import { YourAppComponent } from './YourAppComponent';


    function App() {
      return (
        <AppShellProvider>
          <ToasterProvider>
            <YourAppComponent />
          </ToasterProvider>
        </AppShellProvider>
      );
    }


    export default App;

    ```


    ### 3. Compose Your Shell


    The `<AppShell>` component is the heart of the library. You compose your
    layout by passing the `sidebar`, `topBar`, `mainContent`, and `rightPane`
    components as props.


    Here's a complete example:


    **`YourAppComponent.tsx`**


    ```tsx

    import {
      // Main Layout
      AppShell,
      MainContent,
      RightPane,
      TopBar,

      // Sidebar Primitives
      Sidebar,
      SidebarBody,
      SidebarContent,
      SidebarHeader,
      SidebarTitle,
      SidebarMenuItem,
      SidebarMenuButton,
      SidebarIcon,
      SidebarLabel,

      // Hooks & Context
      useAppShell,
    } from 'amazing-app-shell';

    import { Home, Settings, PanelRight } from 'lucide-react';


    // 1. Build your custom sidebar

    const MySidebar = () => {
      return (
        <Sidebar>
          <SidebarContent>
            <SidebarHeader>
              <SidebarTitle>My App</SidebarTitle>
            </SidebarHeader>
            <SidebarBody>
              <SidebarMenuItem>
                <SidebarMenuButton>
                  <SidebarIcon><Home /></SidebarIcon>
                  <SidebarLabel>Dashboard</SidebarLabel>
                </SidebarMenuButton>
              </SidebarMenuItem>
              <SidebarMenuItem>
                <SidebarMenuButton>
                  <SidebarIcon><Settings /></SidebarIcon>
                  <SidebarLabel>Settings</SidebarLabel>
                </SidebarMenuButton>
              </SidebarMenuItem>
            </SidebarBody>
          </SidebarContent>
        </Sidebar>
      );
    };


    // 2. Build your custom top bar content

    const MyTopBarContent = () => {
      const { openSidePane } = useAppShell();
      return (
        <button onClick={() => openSidePane('details')} title="Open Details">
          <PanelRight />
        </button>
      );
    };


    // 3. Build your main content

    const MyMainContent = () => {
      return (
        <div>
          <h1>Welcome to your Dashboard!</h1>
          <p>This is the main content area.</p>
        </div>
      );
    };


    // 4. Build your right pane

    const MyRightPane = () => {
      return (
        <div>
          <h3>Details Panel</h3>
          <p>Contextual information goes here.</p>
        </div>
      );
    };


    // 5. Assemble the App Shell

    export function YourAppComponent() {
      return (
        <AppShell
          sidebar={<MySidebar />}
          topBar={<TopBar><MyTopBarContent /></TopBar>}
          mainContent={<MainContent><MyMainContent /></MainContent>}
          rightPane={<RightPane>{<MyRightPane />}</RightPane>}
        />
      );
    }

    ```


    ## Component API


    ### Layout Components


    -   `<AppShellProvider>`: Wraps your app and provides the context for all
    hooks and components.

    -   `<AppShell>`: The main container that orchestrates the layout. Requires
    `sidebar`, `topBar`, `mainContent`, and `rightPane` props.

    -   `<TopBar>`: The header component. It's a container for your own controls
    and branding.

    -   `<MainContent>`: The primary content area of your application.

    -   `<RightPane>`: A panel that slides in from the right, perfect for
    details, forms, or secondary information.


    ### Sidebar Primitives


    The sidebar is built using a set of highly composable components.


    -   `<Sidebar>`: The root sidebar component.

    -   `<SidebarContent>`: Wrapper for all sidebar content.

    -   `<SidebarHeader>`, `<SidebarBody>`, `<SidebarFooter>`: Structural
    components to organize sidebar content.

    -   `<SidebarTitle>`: The title of your app, automatically hidden when the
    sidebar is collapsed.

    -   `<SidebarSection>`: A component to group menu items with an optional
    title.

    -   `<SidebarMenuItem>`: A wrapper for a single menu item, including the
    button and potential actions.

    -   `<SidebarMenuButton>`: The main clickable button for a menu item.

    -   `<SidebarIcon>`, `<SidebarLabel>`, `<SidebarBadge>`, `<SidebarTooltip>`:
    Atomic parts of a menu item.


    ### Ready-to-use Components


    -   `<UserDropdown>`: A pre-styled user profile dropdown menu.

    -   `<WorkspaceSwitcher>`: A complete workspace/tenant switcher component.

    -   `<PageHeader>`: A standardized header for your main content pages.

    -   `<CommandPalette>`: A powerful command palette for your application.


    ### UI Primitives


    The library also exports a set of UI components (Button, Card, Badge, etc.)
    based on shadcn/ui. You can import them directly from `amazing-app-shell`.


    ## Hooks


    -   `useAppShell()`: The primary hook to control the shell's state.
        -   `sidebarState`: Current state of the sidebar (`expanded`, `collapsed`, etc.).
        -   `bodyState`: Current body state (`normal`, `fullscreen`, `side_pane`).
        -   `toggleSidebar()`: Toggles the sidebar between expanded and collapsed.
        -   `openSidePane(content: string)`: Opens the right-hand pane.
        -   `closeSidePane()`: Closes the right-hand pane.
        -   `toggleFullscreen()`: Toggles fullscreen mode.
        -   `dispatch`: For more granular state control.
    -   `useToast()`: A hook to display toast notifications.
        -   `show({ title, message, variant, ... })`

    ## Theming


    Customizing the look and feel is straightforward. The library uses CSS
    variables for colors, border radius, etc., which you can override in your
    global CSS file.


    **`index.css`**


    ```css

    @layer base {
      :root {
        --background: 0 0% 100%;
        --foreground: 222.2 84% 4.9%;
        --primary: 262.1 83.3% 57.8%; /* New primary color: Violet */
        --primary-foreground: 210 40% 98%;
        --radius: 0.75rem; /* New border radius */
      }

      .dark {
        --background: 222.2 84% 4.9%;
        --foreground: 210 40% 98%;
        --primary: 262.1 83.3% 57.8%;
        --primary-foreground: 210 40% 98%;
      }
    }

    ```


    ## Contributing


    Contributions are welcome! Please read our [contributing
    guidelines](./CONTRIBUTING.md) to get started.


    ## License


    This project is licensed under the **MIT License**. See the
    [LICENSE](./LICENSE) file for details.
approved: false
linesAdded: null
linesRemoved: null
linesDifference: null
gitCommittedAt: null
status: undone
id: 113
