uuid: c255b083-d3d6-44ec-b4c4-7548a3d6d061
projectId: jeli-app-shell
createdAt: '2025-10-12T03:04:00.333Z'
gitCommitMsg: >-
  fix(dnd): Improve drag-and-drop logic for split view

  This commit resolves several edge cases in the drag-and-drop functionality for
  creating split views, making the feature more robust and intuitive.

  - When a page is dragged from a side/split pane to the main content area, the
  side pane now correctly closes, preventing a placeholder from being displayed.
  - When the active main page is dragged to the right to create a split view,
  the main content area now defaults to the dashboard, avoiding duplicate
  content across panes. - Updated state dependencies in `useCallback` hooks to
  ensure correct behavior.
promptSummary: >-
  The user wants to fix issues with the drag-and-drop split view feature to make
  it production-ready.
reasoning:
  - >-
    I've analyzed the issue with the drag-and-drop split view feature. The core
    problem lies in how the application state is managed when a page is moved
    between the main content area and the side/split pane. My changes will make
    this behavior more robust and intuitive.
  - 'Here''s the plan:'
  - >-
    1.  **Update `handleDropLeft`:** When a page is dragged from the side pane
    to the main content area (dropped on the left), the side pane will now
    correctly close, and the page will become the main view. This fixes a bug
    where a placeholder would appear instead of the page content.
  - >-
    2.  **Update `handleDropRight`:** When the current main page is dragged to
    the side/split pane (dropped on the right), the main content area will now
    default to showing the "Dashboard". This prevents having the same content in
    both the main view and the side pane simultaneously.
  - >-
    These changes will ensure the drag-and-drop feature for creating split views
    is production-ready and provides a seamless user experience.
  - >-
    I will now apply the necessary code modification to
    `src/components/layout/AppShell.tsx`.
operations:
  - type: write
    path: src/components/layout/AppShell.tsx
    content: >+
      --- src/components/layout/AppShell.tsx

      +++ src/components/layout/AppShell.tsx

      @@ -28,12 +28,14 @@
           toggleSplitView,
           openSidePane,
           bodyState,
           rightPaneWidth,
      +    sidePaneContent,

      +    closeSidePane,
         } = useAppShell();
         
      -  const { isDarkMode, toggleDarkMode, handleNavigation } = useAppStore();

      +  const { isDarkMode, toggleDarkMode, handleNavigation, activePage } =
      useAppStore();
         const appRef = useRef<HTMLDivElement>(null)
         const sidebarRef = useRef<HTMLDivElement>(null)
         const mainContentRef = useRef<HTMLDivElement>(null)
      @@ -69,11 +71,17 @@
       
         const handleDropLeft = useCallback(() => {
           if (!draggedPage) return;
      +    

      +    const paneContent = pageToPaneMap[draggedPage];

      +    // If the dropped page is currently in the side pane, close it.

      +    if (paneContent === sidePaneContent && (bodyState ===
      BODY_STATES.SIDE_PANE || bodyState === BODY_STATES.SPLIT_VIEW)) {

      +      closeSidePane();

      +    }

      +    
           handleNavigation(draggedPage);
           dispatch({ type: 'SET_DRAGGED_PAGE', payload: null });
           dispatch({ type: 'SET_DRAG_HOVER_TARGET', payload: null });
      -  }, [draggedPage, handleNavigation, dispatch]);

      +  }, [draggedPage, handleNavigation, dispatch, sidePaneContent,
      bodyState, closeSidePane]);
       
         const handleDragOverRight = useCallback((e: React.DragEvent) => {
           if (!draggedPage) return;
      @@ -87,6 +95,12 @@
           if (!draggedPage) return;
           const pane = pageToPaneMap[draggedPage as keyof typeof pageToPaneMap];
           if (pane) {
      +      // If dropping the currently active page to the right,

      +      // set a default page (e.g., dashboard) as the new active page.

      +      if (draggedPage === activePage) {

      +        handleNavigation('dashboard');

      +      }

      +
             // Set the right pane content and ensure split view
             dispatch({ type: 'SET_SIDE_PANE_CONTENT', payload: pane });
             if (bodyState === BODY_STATES.NORMAL) {
      @@ -97,7 +111,7 @@
           }
           dispatch({ type: 'SET_DRAGGED_PAGE', payload: null });
           dispatch({ type: 'SET_DRAG_HOVER_TARGET', payload: null });
      -  }, [draggedPage, toggleSplitView, dispatch, bodyState]);

      +  }, [draggedPage, toggleSplitView, dispatch, bodyState, activePage,
      handleNavigation]);
       
         return (
           <div 

    patchStrategy: standard-diff
snapshot:
  src/components/layout/AppShell.tsx: >-
    import React, { useRef, type ReactElement, useCallback } from 'react'

    import { cn } from '@/lib/utils'

    import { CommandPalette } from '@/components/global/CommandPalette';

    import { useAppStore } from '@/store/appStore';

    import { useAppShell } from '@/context/AppShellContext';

    import { SIDEBAR_STATES, BODY_STATES } from '@/lib/utils'

    import { useResizableSidebar, useResizableRightPane } from
    '@/hooks/useResizablePanes.hook'

    import { useSidebarAnimations, useBodyStateAnimations } from
    '@/hooks/useAppShellAnimations.hook'


    interface AppShellProps {
      sidebar: ReactElement;
      topBar: ReactElement;
      mainContent: ReactElement;
      rightPane: ReactElement;
      commandPalette?: ReactElement;
    }


    const pageToPaneMap: Record<string, 'main' | 'settings' | 'toaster' |
    'notifications'> = {
      dashboard: 'main',
      settings: 'settings',
      toaster: 'toaster',
      notifications: 'notifications',
    };



    export function AppShell({ sidebar, topBar, mainContent, rightPane,
    commandPalette }: AppShellProps) {
      const {
        sidebarState,
        dispatch,
        autoExpandSidebar,
        toggleSidebar,
        peekSidebar,
        draggedPage,
        dragHoverTarget,
        toggleSplitView,
        openSidePane,
        bodyState,
        rightPaneWidth,
      } = useAppShell();
      
      const { isDarkMode, toggleDarkMode, handleNavigation } = useAppStore();
      const appRef = useRef<HTMLDivElement>(null)
      const sidebarRef = useRef<HTMLDivElement>(null)
      const mainContentRef = useRef<HTMLDivElement>(null)
      const rightPaneRef = useRef<HTMLDivElement>(null)
      const resizeHandleRef = useRef<HTMLDivElement>(null)
      const topBarContainerRef = useRef<HTMLDivElement>(null)
      const mainAreaRef = useRef<HTMLDivElement>(null)

      // Custom hooks for logic
      useResizableSidebar(sidebarRef, resizeHandleRef);
      useResizableRightPane();
      useSidebarAnimations(sidebarRef, resizeHandleRef);
      useBodyStateAnimations(appRef, mainContentRef, rightPaneRef, topBarContainerRef, mainAreaRef);
      
      const sidebarWithProps = React.cloneElement(sidebar, { 
        ref: sidebarRef,
        onMouseEnter: () => {
          if (autoExpandSidebar && sidebarState === SIDEBAR_STATES.COLLAPSED) {
            peekSidebar()
          }
        },
        onMouseLeave: () => {
          if (autoExpandSidebar && sidebarState === SIDEBAR_STATES.PEEK) {
            dispatch({ type: 'SET_SIDEBAR_STATE', payload: SIDEBAR_STATES.COLLAPSED });
          }
        }
      });

      const topBarWithProps = React.cloneElement(topBar, {
        onToggleSidebar: toggleSidebar,
        onToggleDarkMode: toggleDarkMode,
      });

      const mainContentWithProps = React.cloneElement(mainContent, {
        ref: mainContentRef,
      });

      const rightPaneWithProps = React.cloneElement(rightPane, { ref: rightPaneRef });

      // Drag and drop handlers for docking
      const handleDragOverLeft = useCallback((e: React.DragEvent) => {
        if (!draggedPage) return;
        e.preventDefault();
        if (dragHoverTarget !== 'left') {
          dispatch({ type: 'SET_DRAG_HOVER_TARGET', payload: 'left' });
        }
      }, [draggedPage, dragHoverTarget, dispatch]);

      const handleDropLeft = useCallback(() => {
        if (!draggedPage) return;
        handleNavigation(draggedPage);
        dispatch({ type: 'SET_DRAGGED_PAGE', payload: null });
        dispatch({ type: 'SET_DRAG_HOVER_TARGET', payload: null });
      }, [draggedPage, handleNavigation, dispatch]);

      const handleDragOverRight = useCallback((e: React.DragEvent) => {
        if (!draggedPage) return;
        e.preventDefault();
        if (dragHoverTarget !== 'right') {
          dispatch({ type: 'SET_DRAG_HOVER_TARGET', payload: 'right' });
        }
      }, [draggedPage, dragHoverTarget, dispatch]);

      const handleDropRight = useCallback(() => {
        if (!draggedPage) return;
        const pane = pageToPaneMap[draggedPage as keyof typeof pageToPaneMap];
        if (pane) {
          // Set the right pane content and ensure split view
          dispatch({ type: 'SET_SIDE_PANE_CONTENT', payload: pane });
          if (bodyState === BODY_STATES.NORMAL) {
            toggleSplitView(pane);
          } else if (bodyState === BODY_STATES.SIDE_PANE) {
            toggleSplitView();
          }
        }
        dispatch({ type: 'SET_DRAGGED_PAGE', payload: null });
        dispatch({ type: 'SET_DRAG_HOVER_TARGET', payload: null });
      }, [draggedPage, toggleSplitView, dispatch, bodyState]);

      return (
        <div 
          ref={appRef}
          className={cn(
            "relative h-screen w-screen overflow-hidden bg-background transition-colors duration-300",
            isDarkMode && "dark"
          )}
        >
          <div className="flex h-screen overflow-hidden">
            {/* Enhanced Sidebar */}
            {sidebarWithProps}

            {/* Resize Handle */}
            {sidebarState !== SIDEBAR_STATES.HIDDEN && (
              <div
                ref={resizeHandleRef}
                className={cn(
                  "absolute top-0 w-2 h-full bg-transparent hover:bg-primary/20 cursor-col-resize z-50 transition-colors duration-200 group -translate-x-1/2"
                )}
                onMouseDown={(e) => {
                  e.preventDefault()
                  dispatch({ type: 'SET_IS_RESIZING', payload: true });
                }}
              >
                <div className="w-0.5 h-full bg-border group-hover:bg-primary transition-colors duration-200 mx-auto" />
              </div>
            )}

            {/* Main area wrapper */}
            <div className="flex-1 flex flex-col overflow-hidden">
              <div ref={topBarContainerRef} className="relative z-30">
                {topBarWithProps}
              </div>

              <div className="flex flex-1 min-h-0">
                <div ref={mainAreaRef} className="relative flex-1 overflow-hidden bg-background">
                  {/* Left drop overlay */}
                  <div
                    className={cn(
                      "absolute inset-y-0 left-0 z-40 border-2 border-transparent",
                      draggedPage ? "pointer-events-auto w-1/2" : "pointer-events-none w-0",
                      dragHoverTarget === 'left' && "bg-primary/10 border-primary"
                    )}
                    onDragOver={handleDragOverLeft}
                    onDrop={handleDropLeft}
                    onDragLeave={() => {
                      if (dragHoverTarget === 'left') dispatch({ type: 'SET_DRAG_HOVER_TARGET', payload: null });
                    }}
                  >
                    {draggedPage && (
                      <div className="absolute inset-0 flex items-center justify-center text-sm font-medium text-primary-foreground/80">
                        <span className="px-3 py-1 rounded-md bg-primary/70">Drop to Left</span>
                      </div>
                    )}
                  </div>
                  {mainContentWithProps}
                  {/* Right drop overlay (over main area to allow docking even if pane hidden) */}
                  <div
                    className={cn(
                      "absolute inset-y-0 right-0 z-40 border-2 border-transparent",
                      draggedPage ? "pointer-events-auto w-1/2" : "pointer-events-none",
                      dragHoverTarget === 'right' && "bg-primary/10 border-primary"
                    )}
                    onDragOver={handleDragOverRight}
                    onDrop={handleDropRight}
                    onDragLeave={() => {
                      if (dragHoverTarget === 'right') dispatch({ type: 'SET_DRAG_HOVER_TARGET', payload: null });
                    }}
                  >
                    {draggedPage && (
                      <div className="absolute inset-0 flex items-center justify-center">
                        <span className="px-3 py-1 rounded-md bg-primary/70 text-sm font-medium text-primary-foreground/80">Drop to Right</span>
                      </div>
                    )}
                  </div>
                </div>
                {rightPaneWithProps}
              </div>
            </div>
          </div>
          {commandPalette || <CommandPalette />}
        </div>
      )
    }
approved: true
linesAdded: null
linesRemoved: null
linesDifference: null
gitCommittedAt: '2025-10-12T03:10:27.627Z'
status: committed
id: 135
