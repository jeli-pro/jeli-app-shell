uuid: c2927244-a957-418f-a3ac-0b2f90a886f6
projectId: amazing-app-shell
createdAt: '2025-10-10T10:13:19.656Z'
gitCommitMsg: >-
  feat(ui): overhaul right pane and fix aesthetic issues

  - Reworked the right side pane to be a resizable overlay, improving UX. -
  Added state management for the right pane's width and resize state. - Made the
  settings panel opaque for better readability. - Removed content scaling when
  the side pane is open to match overlay behavior. - Implemented a backdrop for
  the right pane that closes it on click. - Improved resize handle interactions
  to prevent text selection. - Minor visual improvements to the sidebar profile
  section.
promptSummary: >-
  The user wanted to fix several aesthetic issues including an improper side
  pane behavior, a transparent settings panel, and other margin/padding
  problems.
reasoning:
  - >-
    Hello! As an expert AI programmer, I've reviewed your request and made the
    necessary modifications to address the aesthetic issues and improve the side
    pane functionality. Here are the step-by-step changes I've implemented:
  - '### 1. Improved Right Side Pane'
  - >-
    I've completely overhauled the right side pane to function as a resizable
    overlay, as you requested.
  - >-
    -   **Overlay Behavior**: The pane is now positioned with `fixed` and
    animated with `transform` so it slides over the main content without
    affecting its layout. A backdrop is now displayed when the pane is open, and
    clicking it will close the pane.
  - >-
    -   **Resizable**: I've added a resize handle to the left edge of the pane.
    You can now click and drag to resize it. The width is persisted in the
    application state.
  - >-
    -   **State Management**: I updated the Zustand store (`appStore.ts`) to
    manage the width and resizing state of the right pane.
  - '### 2. Opaque Settings Panel'
  - >-
    The settings panel was slightly transparent. I've updated its background
    from `bg-card/95` to `bg-card` to make it fully opaque, improving its
    readability.
  - '### 3. Removed Content Scaling'
  - >-
    I noticed that the main content area would scale down when the right pane
    was opened. I've removed this effect to align with the new overlay behavior,
    so the main content remains static.
  - '### 4. General Aesthetic Fixes'
  - >-
    -   **Sidebar Profile**: I've made a minor adjustment to the user profile
    section in the main sidebar. The email address now uses a slightly smaller
    font in compact mode for better visual hierarchy. I also ensured its text
    fades out smoothly when the sidebar is collapsed.
  - >-
    -   **Resize Handle Interaction**: I added `e.preventDefault()` to the
    resize handles to prevent text selection while dragging, which improves the
    user experience.
  - 'Here are the code changes:'
  - >-
    First, I'll update the application store to handle the state for the new
    resizable right pane.
  - >-
    Next, I'll modify the `RightPane` component to include the resize handle and
    update its styling to support overlay behavior.
  - >-
    The main application shell (`AppShell.tsx`) needs to be updated to
    orchestrate the new resizing logic and animations for the right pane.
  - >-
    To accommodate the new overlay behavior, I'll remove the scaling and
    background effects from the `MainContent`.
  - Here's the fix to make the `SettingsPanel` opaque.
  - Finally, a small aesthetic improvement in the `EnhancedSidebar`.
  - >-
    These changes should resolve all the issues you mentioned and provide a more
    polished and functional user experience. Let me know if you have any other
    questions!
operations:
  - type: write
    path: src/store/appStore.ts
    content: >+
      --- src/store/appStore.ts

      +++ src/store/appStore.ts

      @@ -6,8 +6,10 @@
         sidebarState: SidebarState
         bodyState: BodyState
         isDarkMode: boolean
         sidebarWidth: number
      +  rightPaneWidth: number
         isResizing: boolean
      +  isResizingRightPane: boolean
         
         // User Preferences
         autoExpandSidebar: boolean
      @@ -19,7 +21,9 @@
         setBodyState: (state: BodyState) => void
         toggleDarkMode: () => void
         setSidebarWidth: (width: number) => void
      +  setRightPaneWidth: (width: number) => void
         setIsResizing: (resizing: boolean) => void
      +  setIsResizingRightPane: (resizing: boolean) => void
         setAutoExpandSidebar: (auto: boolean) => void
         setReducedMotion: (reduced: boolean) => void
         setCompactMode: (compact: boolean) => void
      @@ -37,8 +41,10 @@
         sidebarState: SIDEBAR_STATES.EXPANDED as SidebarState,
         bodyState: BODY_STATES.NORMAL as BodyState,
         isDarkMode: false,
      -  sidebarWidth: 300,

      +  sidebarWidth: 280,

      +  rightPaneWidth: 400,
         isResizing: false,
      +  isResizingRightPane: false,
         autoExpandSidebar: true,
         reducedMotion: false,
         compactMode: false,
      @@ -56,7 +62,9 @@
               set({ isDarkMode: newMode })
               document.documentElement.classList.toggle('dark', newMode)
             },
             setSidebarWidth: (width) => set({ sidebarWidth: Math.max(200, Math.min(500, width)) }),
      +      setRightPaneWidth: (width) => set({ rightPaneWidth: Math.max(300,
      Math.min(window.innerWidth * 0.8, width)) }),
             setIsResizing: (resizing) => set({ isResizing: resizing }),
      +      setIsResizingRightPane: (resizing) => set({ isResizingRightPane:
      resizing }),
             setAutoExpandSidebar: (auto) => set({ autoExpandSidebar: auto }),
             setReducedMotion: (reduced) => set({ reducedMotion: reduced }),
             setCompactMode: (compact) => set({ compactMode: compact }),
      @@ -103,6 +111,7 @@
               bodyState: state.bodyState,
               isDarkMode: state.isDarkMode,
               sidebarWidth: state.sidebarWidth,
      +        rightPaneWidth: state.rightPaneWidth,
               autoExpandSidebar: state.autoExpandSidebar,
               reducedMotion: state.reducedMotion,
               compactMode: state.compactMode,

    patchStrategy: standard-diff
  - type: write
    path: src/components/RightPane.tsx
    content: >+
      --- src/components/RightPane.tsx

      +++ src/components/RightPane.tsx

      @@ -1,13 +1,24 @@
       import { forwardRef } from 'react'
       import { X, SlidersHorizontal } from 'lucide-react'
       import { useAppStore } from '@/store/appStore'
      +import { cn } from '@/lib/utils'
       
       export const RightPane = forwardRef<HTMLDivElement>((_props, ref) => {
      -  const { toggleSidePane } = useAppStore()

      +  const { toggleSidePane, setIsResizingRightPane } = useAppStore()
       
         return (
      -    <aside ref={ref} className="bg-card border-l border-border flex
      flex-col h-full overflow-hidden w-0">

      -      <div className="flex items-center justify-between p-4 border-b
      border-border h-20 flex-shrink-0">

      +    <aside ref={ref} className="bg-card border-l border-border flex
      flex-col h-full overflow-hidden fixed top-0 right-0 z-40">

      +      <div 

      +        className={cn(

      +          "absolute top-0 left-0 w-2 h-full bg-transparent
      hover:bg-primary/20 cursor-col-resize z-50 transition-colors duration-200
      group -translate-x-1/2"

      +        )}

      +        onMouseDown={(e) => {

      +          e.preventDefault()

      +          setIsResizingRightPane(true)

      +        }}

      +      >

      +        <div className="w-0.5 h-full bg-border group-hover:bg-primary
      transition-colors duration-200 mx-auto" />

      +      </div>

      +      <div className="flex items-center justify-between p-4 border-b
      border-border h-20 flex-shrink-0 pl-6">
               <div className="flex items-center gap-2">
                 <SlidersHorizontal className="w-5 h-5" />
                 <h2 className="text-lg font-semibold whitespace-nowrap">Details Panel</h2>

    patchStrategy: standard-diff
  - type: write
    path: src/components/AppShell.tsx
    content: >+
      --- src/components/AppShell.tsx

      +++ src/components/AppShell.tsx

      @@ -12,6 +12,9 @@
           sidebarWidth,
           isDarkMode,
           isResizing,
      +    rightPaneWidth,

      +    isResizingRightPane,

      +    setRightPaneWidth,
           setSidebarState,
           setIsResizing,
           setSidebarWidth,
      @@ -19,6 +22,7 @@
           peekSidebar,
           toggleFullscreen,
           toggleSidePane,
      +    setIsResizingRightPane,
           toggleDarkMode,
           reducedMotion,
           autoExpandSidebar
      @@ -62,6 +66,35 @@
           return () => {
             document.removeEventListener('mousemove', handleMouseMove)
             document.removeEventListener('mouseup', handleMouseUp)
      +    }

      +  }, [isResizing, setIsResizing, setSidebarWidth])

      +

      +  // Resize functionality for Right Pane

      +  useEffect(() => {

      +    const handleMouseMove = (e: MouseEvent) => {

      +      if (!isResizingRightPane) return

      +      

      +      const newWidth = window.innerWidth - e.clientX

      +      setRightPaneWidth(newWidth)

      +    }

      +

      +    const handleMouseUp = () => {

      +      setIsResizingRightPane(false)

      +      document.body.style.cursor = ''

      +      document.body.style.userSelect = ''

      +    }

      +

      +    if (isResizingRightPane) {

      +      document.body.style.cursor = 'col-resize'

      +      document.body.style.userSelect = 'none'

      +      document.addEventListener('mousemove', handleMouseMove)

      +      document.addEventListener('mouseup', handleMouseUp)

      +    }

      +

      +    return () => {

      +      document.removeEventListener('mousemove', handleMouseMove)

      +      document.removeEventListener('mouseup', handleMouseUp)

      +      document.body.style.cursor = ''
           }
      -  }, [isResizing, setIsResizing, setSidebarWidth])

      +  }, [isResizingRightPane, setIsResizingRightPane, setRightPaneWidth])
       
         // GSAP animations for sidebar transitions
         useEffect(() => {
      @@ -131,12 +164,30 @@
       
           // Right pane animation
           gsap.to(rightPaneRef.current, {
      -      width: isSidePane ? 320 : 0,

      +      width: rightPaneWidth,

      +      x: isSidePane ? 0 : rightPaneWidth + 5, // +5 to hide border
             duration: animationDuration,
             ease,
           })
      -  }, [bodyState, animationDuration])

      +    

      +    // Add backdrop for side pane

      +    const backdrop = document.querySelector('.app-backdrop')

      +    if (isSidePane) {

      +      if (!backdrop) {

      +        const el = document.createElement('div')

      +        el.className = 'app-backdrop fixed inset-0 bg-black/30 z-30'

      +        appRef.current?.appendChild(el)

      +        gsap.fromTo(el, { opacity: 0 }, { opacity: 1, duration:
      animationDuration })

      +        el.onclick = () => toggleSidePane()

      +      }

      +    } else {

      +      if (backdrop) {

      +        gsap.to(backdrop, { opacity: 0, duration: animationDuration,
      onComplete: () => backdrop.remove() })

      +      }

      +    }

      +  }, [bodyState, animationDuration, rightPaneWidth, toggleSidePane])
       
         return (
           <div 
      @@ -171,7 +222,11 @@
                   className={cn(
                     "absolute top-0 w-2 h-full bg-transparent hover:bg-primary/20 cursor-col-resize z-50 transition-colors duration-200 group -translate-x-1/2"
                   )}
      -            onMouseDown={() => setIsResizing(true)}

      +            onMouseDown={(e) => {

      +              e.preventDefault()

      +              setIsResizing(true)

      +            }}
                 >
                   <div className="w-0.5 h-full bg-border group-hover:bg-primary transition-colors duration-200 mx-auto" />
                 </div>
      @@ -194,9 +249,8 @@
                   bodyState={bodyState}
                 />
               </div>
      -        

      -        <RightPane ref={rightPaneRef} />
             </div>
      +      <RightPane ref={rightPaneRef} />
           </div>
         )
       }

    patchStrategy: standard-diff
  - type: write
    path: src/components/MainContent.tsx
    content: |+
      --- src/components/MainContent.tsx
      +++ src/components/MainContent.tsx
      @@ -124,18 +124,6 @@
                   duration: 0.4,
                   ease: "power3.out"
                 })
      -          break
      -        case BODY_STATES.SIDE_PANE:
      -          gsap.to(content, {
      -            scale: 0.98,
      -            duration: 0.4,
      -            ease: "power3.out"
      -          })
                 break
               default:
                 gsap.to(content, {
      @@ -159,8 +147,7 @@
               ref={ref}
               className={cn(
                 "flex-1 h-[calc(100vh-80px)] overflow-hidden transition-all duration-300",
      -          bodyState === BODY_STATES.FULLSCREEN && "bg-background",
      -          bodyState === BODY_STATES.SIDE_PANE && "bg-muted/30"
      +          bodyState === BODY_STATES.FULLSCREEN && "bg-background"
               )}
             >
               <div 

    patchStrategy: standard-diff
  - type: write
    path: src/components/SettingsPanel.tsx
    content: >+
      --- src/components/SettingsPanel.tsx

      +++ src/components/SettingsPanel.tsx

      @@ -35,7 +35,7 @@
       
         return (
           <div className="fixed inset-0 bg-background/80 backdrop-blur-sm z-[100] animate-in fade-in-0 duration-300">
      -      <div className="fixed right-4 top-4 bottom-4 w-full max-w-sm
      bg-card/95 backdrop-blur-lg border border-border shadow-2xl rounded-2xl
      animate-in slide-in-from-right-8 duration-300">

      +      <div className="fixed right-4 top-4 bottom-4 w-full max-w-sm
      bg-card border border-border shadow-2xl rounded-2xl animate-in
      slide-in-from-right-8 duration-300">
               <div className="flex flex-col h-full">
                 {/* Header */}
                 <div className="flex items-center justify-between p-6 border-b border-border">

    patchStrategy: standard-diff
  - type: write
    path: src/components/EnhancedSidebar.tsx
    content: >+
      --- src/components/EnhancedSidebar.tsx

      +++ src/components/EnhancedSidebar.tsx

      @@ -357,8 +357,8 @@
                           <User className={cn("text-primary-foreground", compactMode ? "w-4 h-4" : "w-5 h-5")} />
                         </div>
                         <div className="flex-1 min-w-0">
      -                    <p className={cn("font-medium truncate", compactMode
      ? "text-xs" : "text-sm")}>John Doe</p>

      -                    <p className={cn("text-muted-foreground truncate",
      compactMode ? "text-xs" : "text-xs")}>john@example.com</p>

      +                    <p className={cn("font-medium truncate nav-label",
      compactMode ? "text-xs" : "text-sm")}>John Doe</p>

      +                    <p className={cn("text-muted-foreground truncate
      nav-label", compactMode ? "text-[11px]" : "text-xs")}>john@example.com</p>
                         </div>
                       </div>
                     </div>

    patchStrategy: standard-diff
snapshot:
  src/components/RightPane.tsx: |-
    import { forwardRef } from 'react'
    import { X, SlidersHorizontal } from 'lucide-react'
    import { useAppStore } from '@/store/appStore'

    export const RightPane = forwardRef<HTMLDivElement>((_props, ref) => {
      const { toggleSidePane } = useAppStore()

      return (
        <aside ref={ref} className="bg-card border-l border-border flex flex-col h-full overflow-hidden w-0">
          <div className="flex items-center justify-between p-4 border-b border-border h-20 flex-shrink-0">
            <div className="flex items-center gap-2">
              <SlidersHorizontal className="w-5 h-5" />
              <h2 className="text-lg font-semibold whitespace-nowrap">Details Panel</h2>
            </div>
            <button
              onClick={toggleSidePane}
              className="p-2 hover:bg-accent rounded-lg transition-colors"
            >
              <X className="w-4 h-4" />
            </button>
          </div>
          <div className="flex-1 overflow-y-auto p-6">
            <p className="text-muted-foreground">
              This is the side pane. It can be used to display contextual information, forms, or actions related to the main content.
            </p>
          </div>
        </aside>
      )
    })

    RightPane.displayName = "RightPane"
  src/components/AppShell.tsx: |-
    import { useRef, useEffect } from 'react'
    import { gsap } from 'gsap'
    import { cn } from '@/lib/utils'
    import { EnhancedSidebar } from './EnhancedSidebar'
    import { MainContent } from './MainContent'
    import { RightPane } from './RightPane'
    import { TopBar } from './TopBar'
    import { useAppStore } from '@/store/appStore'
    import { SIDEBAR_STATES, BODY_STATES } from '@/lib/utils'

    export function AppShell() {
      const {
        sidebarState,
        bodyState,
        sidebarWidth,
        isDarkMode,
        isResizing,
        setSidebarState,
        setIsResizing,
        setSidebarWidth,
        toggleSidebar,
        peekSidebar,
        toggleFullscreen,
        toggleSidePane,
        toggleDarkMode,
        reducedMotion,
        autoExpandSidebar
      } = useAppStore()
      
      const appRef = useRef<HTMLDivElement>(null)
      const sidebarRef = useRef<HTMLDivElement>(null)
      const mainContentRef = useRef<HTMLDivElement>(null)
      const rightPaneRef = useRef<HTMLDivElement>(null)
      const resizeHandleRef = useRef<HTMLDivElement>(null)

      // Animation duration based on reduced motion preference
      const animationDuration = reducedMotion ? 0.1 : 0.4

      // Resize functionality
      useEffect(() => {
        const handleMouseMove = (e: MouseEvent) => {
          if (!isResizing) return
          
          const newWidth = Math.max(200, Math.min(500, e.clientX))
          setSidebarWidth(newWidth)
          
          if (sidebarRef.current) {
            gsap.set(sidebarRef.current, { width: newWidth })
          }
          if (resizeHandleRef.current) {
            gsap.set(resizeHandleRef.current, { left: newWidth })
          }
        }

        const handleMouseUp = () => {
          setIsResizing(false)
          document.body.style.cursor = ''
          document.body.style.userSelect = ''
        }

        if (isResizing) {
          document.body.style.cursor = 'col-resize'
          document.body.style.userSelect = 'none'
          document.addEventListener('mousemove', handleMouseMove)
          document.addEventListener('mouseup', handleMouseUp)
        }

        return () => {
          document.removeEventListener('mousemove', handleMouseMove)
          document.removeEventListener('mouseup', handleMouseUp)
        }
      }, [isResizing, setIsResizing, setSidebarWidth])

      // GSAP animations for sidebar transitions
      useEffect(() => {
        if (!sidebarRef.current || !mainContentRef.current || !resizeHandleRef.current) return

        const sidebar = sidebarRef.current
        const handle = resizeHandleRef.current
        
        let targetWidth = 0
        let targetOpacity = 1
        let targetX = 0

        switch (sidebarState) {
          case SIDEBAR_STATES.HIDDEN:
            targetWidth = 0
            targetOpacity = 0
            targetX = -100
            break
          case SIDEBAR_STATES.COLLAPSED:
            targetWidth = 64
            targetOpacity = 1
            targetX = 0
            break
          case SIDEBAR_STATES.EXPANDED:
            targetWidth = sidebarWidth
            targetOpacity = 1
            targetX = 0
            break
          case SIDEBAR_STATES.PEEK:
            targetWidth = sidebarWidth * 0.8
            targetOpacity = 0.95
            targetX = 0
            break
        }

        const tl = gsap.timeline({ ease: "power3.out" })
        
        tl.to(sidebar, {
          width: targetWidth,
          opacity: targetOpacity,
          x: `${targetX}%`,
          duration: animationDuration,
        })
        tl.to(handle, {
          left: targetWidth,
          duration: animationDuration,
        }, 0)

      }, [sidebarState, sidebarWidth, bodyState, animationDuration])

      // GSAP animations for body state transitions
      useEffect(() => {
        if (!mainContentRef.current || !sidebarRef.current || !rightPaneRef.current) return

        const ease = "power3.out"
        const isFullscreen = bodyState === BODY_STATES.FULLSCREEN
        const isSidePane = bodyState === BODY_STATES.SIDE_PANE

        // Sidebar animation for body state changes
        gsap.to(sidebarRef.current, {
          x: isFullscreen ? '-100%' : '0%',
          duration: animationDuration,
          ease,
        })

        // Right pane animation
        gsap.to(rightPaneRef.current, {
          width: isSidePane ? 320 : 0,
          duration: animationDuration,
          ease,
        })
      }, [bodyState, animationDuration])

      return (
        <div 
          ref={appRef}
          className={cn(
            "relative h-screen w-screen overflow-hidden bg-background transition-colors duration-300",
            isDarkMode && "dark"
          )}
        >
          <div className="flex h-screen overflow-hidden">
            {/* Enhanced Sidebar */}
            <EnhancedSidebar
              ref={sidebarRef}
              onMouseEnter={() => {
                if (autoExpandSidebar && sidebarState === SIDEBAR_STATES.COLLAPSED) {
                  peekSidebar()
                }
              }}
              onMouseLeave={() => {
                if (autoExpandSidebar && sidebarState === SIDEBAR_STATES.PEEK) {
                  setSidebarState(SIDEBAR_STATES.COLLAPSED)
                }
              }}
            />

            {/* Resize Handle */}
            {sidebarState !== SIDEBAR_STATES.HIDDEN && (
              <div
                ref={resizeHandleRef}
                className={cn(
                  "absolute top-0 w-2 h-full bg-transparent hover:bg-primary/20 cursor-col-resize z-50 transition-colors duration-200 group -translate-x-1/2"
                )}
                onMouseDown={() => setIsResizing(true)}
              >
                <div className="w-0.5 h-full bg-border group-hover:bg-primary transition-colors duration-200 mx-auto" />
              </div>
            )}

            {/* Main Content Area */}
            <div className="flex-1 flex flex-col overflow-hidden bg-background">
              {/* Top Bar */}
              <TopBar
                bodyState={bodyState}
                isDarkMode={isDarkMode}
                onToggleSidebar={toggleSidebar}
                onToggleFullscreen={toggleFullscreen}
                onToggleSidePane={toggleSidePane}
                onToggleDarkMode={toggleDarkMode}
              />
              
              {/* Main Content */}
              <MainContent
                ref={mainContentRef}
                bodyState={bodyState}
              />
            </div>
            
            <RightPane ref={rightPaneRef} />
          </div>
        </div>
      )
    }
  src/components/SettingsPanel.tsx: |-
    import { useState } from 'react'
    import { 
      Settings, 
      X, 
      Moon, 
      Sun, 
      Zap, 
      Eye, 
      Minimize2, 
      RotateCcw,
      Monitor,
      Smartphone,
      Palette,
      Accessibility
    } from 'lucide-react'
    import { cn } from '@/lib/utils'
    import { useAppStore } from '@/store/appStore'

    interface SettingsPanelProps {
      isOpen: boolean
      onClose: () => void
    }

    export function SettingsPanel({ isOpen, onClose }: SettingsPanelProps) {
      const {
        isDarkMode,
        reducedMotion,
        compactMode,
        autoExpandSidebar,
        sidebarWidth,
        toggleDarkMode,
        setReducedMotion,
        setCompactMode,
        setAutoExpandSidebar,
        setSidebarWidth,
        resetToDefaults
      } = useAppStore()

      const [tempSidebarWidth, setTempSidebarWidth] = useState(sidebarWidth)

      const handleSidebarWidthChange = (width: number) => {
        setTempSidebarWidth(width)
        setSidebarWidth(width)
      }

      if (!isOpen) return null

      return (
        <div className="fixed inset-0 bg-background/80 backdrop-blur-sm z-[100] animate-in fade-in-0 duration-300">
          <div className="fixed right-4 top-4 bottom-4 w-full max-w-sm bg-card/95 backdrop-blur-lg border border-border shadow-2xl rounded-2xl animate-in slide-in-from-right-8 duration-300">
            <div className="flex flex-col h-full">
              {/* Header */}
              <div className="flex items-center justify-between p-6 border-b border-border">
                <div className="flex items-center gap-2">
                  <Settings className="w-5 h-5" />
                  <h2 className="text-lg font-semibold">Settings</h2>
                </div>
                <button
                  onClick={onClose}
                  className="p-2 hover:bg-accent rounded-lg transition-colors"
                >
                  <X className="w-4 h-4" />
                </button>
              </div>

              {/* Content */}
              <div className="flex-1 overflow-y-auto p-6 space-y-10">
                {/* Appearance */}
                <div className="space-y-4">
                  <h3 className="text-sm font-semibold text-muted-foreground uppercase tracking-wider flex items-center gap-2">
                    <Palette className="w-4 h-4" />
                    Appearance
                  </h3>
                  
                  {/* Dark Mode */}
                  <div className="flex items-center justify-between">
                    <div className="flex items-center gap-3">
                      {isDarkMode ? <Moon className="w-4 h-4" /> : <Sun className="w-4 h-4" />}
                      <div>
                        <p className="font-medium">Dark Mode</p>
                        <p className="text-sm text-muted-foreground">Toggle dark theme</p>
                      </div>
                    </div>
                    <button
                      onClick={toggleDarkMode}
                      className={cn(
                        "relative inline-flex h-7 w-12 items-center rounded-full transition-colors",
                        isDarkMode ? "bg-primary" : "bg-muted"
                      )}
                    >
                      <span
                        className={cn(
                          "inline-block h-5 w-5 transform rounded-full bg-background transition-transform",
                          isDarkMode ? "translate-x-6" : "translate-x-1"
                        )}
                      />
                    </button>
                  </div>

                  {/* Compact Mode */}
                  <div className="flex items-center justify-between">
                    <div className="flex items-center gap-3">
                      <Minimize2 className="w-4 h-4" />
                      <div>
                        <p className="font-medium">Compact Mode</p>
                        <p className="text-sm text-muted-foreground">Reduce spacing and sizes</p>
                      </div>
                    </div>
                    <button
                      onClick={() => setCompactMode(!compactMode)}
                      className={cn(
                        "relative inline-flex h-7 w-12 items-center rounded-full transition-colors",
                        compactMode ? "bg-primary" : "bg-muted"
                      )}
                    >
                      <span
                        className={cn(
                          "inline-block h-5 w-5 transform rounded-full bg-background transition-transform",
                          compactMode ? "translate-x-6" : "translate-x-1"
                        )}
                      />
                    </button>
                  </div>
                </div>

                {/* Behavior */}
                <div className="space-y-4">
                  <h3 className="text-sm font-semibold text-muted-foreground uppercase tracking-wider flex items-center gap-2">
                    <Zap className="w-4 h-4" />
                    Behavior
                  </h3>

                  {/* Auto Expand Sidebar */}
                  <div className="flex items-center justify-between">
                    <div className="flex items-center gap-3">
                      <Eye className="w-4 h-4" />
                      <div>
                        <p className="font-medium">Auto Expand Sidebar</p>
                        <p className="text-sm text-muted-foreground">Expand on hover when collapsed</p>
                      </div>
                    </div>
                    <button
                      onClick={() => setAutoExpandSidebar(!autoExpandSidebar)}
                      className={cn(
                        "relative inline-flex h-7 w-12 items-center rounded-full transition-colors",
                        autoExpandSidebar ? "bg-primary" : "bg-muted"
                      )}
                    >
                      <span
                        className={cn(
                          "inline-block h-5 w-5 transform rounded-full bg-background transition-transform",
                          autoExpandSidebar ? "translate-x-6" : "translate-x-1"
                        )}
                      />
                    </button>
                  </div>

                  {/* Sidebar Width */}
                  <div className="space-y-3">
                    <div className="flex items-center gap-3">
                      <Monitor className="w-4 h-4" />
                      <div>
                        <p className="font-medium">Sidebar Width</p>
                        <p className="text-sm text-muted-foreground">{tempSidebarWidth}px</p>
                      </div>
                    </div>
                    <div className="space-y-2">
                      <input
                        type="range"
                        min="200"
                        max="500"
                        step="10"
                        value={tempSidebarWidth}
                        onChange={(e) => handleSidebarWidthChange(Number(e.target.value))}
                        className="w-full h-1.5 bg-muted rounded-lg appearance-none cursor-pointer slider"
                      />
                      <div className="flex justify-between text-xs text-muted-foreground">
                        <span>200px</span>
                        <span>350px</span>
                        <span>500px</span>
                      </div>
                    </div>
                  </div>
                </div>

                {/* Accessibility */}
                <div className="space-y-4">
                  <h3 className="text-sm font-semibold text-muted-foreground uppercase tracking-wider flex items-center gap-2">
                    <Accessibility className="w-4 h-4" />
                    Accessibility
                  </h3>

                  {/* Reduced Motion */}
                  <div className="flex items-center justify-between">
                    <div className="flex items-center gap-3">
                      <Zap className="w-4 h-4" />
                      <div>
                        <p className="font-medium">Reduced Motion</p>
                        <p className="text-sm text-muted-foreground">Minimize animations</p>
                      </div>
                    </div>
                    <button
                      onClick={() => setReducedMotion(!reducedMotion)}
                      className={cn(
                        "relative inline-flex h-7 w-12 items-center rounded-full transition-colors",
                        reducedMotion ? "bg-primary" : "bg-muted"
                      )}
                    >
                      <span
                        className={cn(
                          "inline-block h-5 w-5 transform rounded-full bg-background transition-transform",
                          reducedMotion ? "translate-x-6" : "translate-x-1"
                        )}
                      />
                    </button>
                  </div>
                </div>

                {/* Presets */}
                <div className="space-y-4">
                  <h3 className="text-sm font-semibold text-muted-foreground uppercase tracking-wider">
                    Quick Presets
                  </h3>
                  
                  <div className="grid grid-cols-2 gap-3">
                    <button 
                      onClick={() => {
                        setCompactMode(false)
                        setReducedMotion(false)
                        setSidebarWidth(320)
                      }}
                      className="p-4 bg-accent/30 hover:bg-accent/50 rounded-xl transition-colors text-left"
                    >
                      <Monitor className="w-4 h-4 mb-2" />
                      <p className="font-medium text-sm">Desktop</p>
                      <p className="text-xs text-muted-foreground">Spacious layout</p>
                    </button>
                    
                    <button 
                      onClick={() => {
                        setCompactMode(true)
                        setReducedMotion(true)
                        setSidebarWidth(240)
                      }}
                      className="p-4 bg-accent/30 hover:bg-accent/50 rounded-xl transition-colors text-left"
                    >
                      <Smartphone className="w-4 h-4 mb-2" />
                      <p className="font-medium text-sm">Mobile</p>
                      <p className="text-xs text-muted-foreground">Compact layout</p>
                    </button>
                  </div>
                </div>
              </div>

              {/* Footer */}
              <div className="p-6 border-t border-border">
                <button
                  onClick={resetToDefaults}
                  className="w-full flex items-center justify-center gap-2 px-4 py-2.5 bg-destructive/10 text-destructive hover:bg-destructive/20 rounded-lg transition-colors"
                >
                  <RotateCcw className="w-4 h-4" />
                  Reset to Defaults
                </button>
              </div>
            </div>
          </div>
        </div>
      )
    }

    // Custom slider styles
    const sliderStyles = `
    .slider::-webkit-slider-thumb {
      appearance: none;
      height: 18px;
      width: 18px;
      border-radius: 50%;
      background: hsl(var(--primary));
      cursor: pointer;
      border: 3px solid hsl(var(--background));
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
      margin-top: -7px;
    }

    .slider::-moz-range-thumb {
      height: 18px;
      width: 18px;
      border-radius: 50%;
      background: hsl(var(--primary));
      cursor: pointer;
      border: 3px solid hsl(var(--background));
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }
    `

    // Inject styles
    if (typeof document !== 'undefined') {
      const styleSheet = document.createElement('style')
      styleSheet.textContent = sliderStyles
      document.head.appendChild(styleSheet)
    }
  src/components/EnhancedSidebar.tsx: |-
    import React, { forwardRef, useRef, useEffect } from 'react'
    import { gsap } from 'gsap'
    import { 
      Home, 
      Search, 
      Bell, 
      User, 
      Settings, 
      HelpCircle, 
      FileText, 
      Calendar, 
      Mail,
      FolderOpen,
      Bookmark,
      Download,
      Star,
      Trash2,
      ChevronDown
    } from 'lucide-react'
    import { cn } from '@/lib/utils'
    import { useAppStore } from '@/store/appStore'
    import { SIDEBAR_STATES } from '@/lib/utils'

    interface NavItem {
      icon: React.ReactNode
      label: string
      href: string
      badge?: number
      isActive?: boolean
      children?: NavItem[]
    }

    interface NavSection {
      title: string
      items: NavItem[]
      collapsible?: boolean
      defaultExpanded?: boolean
    }

    const navigationSections: NavSection[] = [
      {
        title: "Main",
        items: [
          { icon: <Home className="w-4 h-4" />, label: "Dashboard", href: "/", isActive: true },
          { icon: <Search className="w-4 h-4" />, label: "Search", href: "/search" },
          { icon: <Bell className="w-4 h-4" />, label: "Notifications", href: "/notifications", badge: 3 },
        ]
      },
      {
        title: "Workspace",
        collapsible: true,
        defaultExpanded: true,
        items: [
          { 
            icon: <FileText className="w-4 h-4" />, 
            label: "Documents", 
            href: "/documents",
            children: [
              { icon: <FileText className="w-3 h-3" />, label: "Recent", href: "/documents/recent" },
              { icon: <Star className="w-3 h-3" />, label: "Starred", href: "/documents/starred" },
              { icon: <Trash2 className="w-3 h-3" />, label: "Trash", href: "/documents/trash" },
            ]
          },
          { icon: <FolderOpen className="w-4 h-4" />, label: "Projects", href: "/projects" },
          { icon: <Calendar className="w-4 h-4" />, label: "Calendar", href: "/calendar" },
          { icon: <Mail className="w-4 h-4" />, label: "Messages", href: "/messages", badge: 12 },
        ]
      },
      {
        title: "Personal",
        collapsible: true,
        defaultExpanded: false,
        items: [
          { icon: <Bookmark className="w-4 h-4" />, label: "Bookmarks", href: "/bookmarks" },
          { icon: <Star className="w-4 h-4" />, label: "Favorites", href: "/favorites" },
          { icon: <Download className="w-4 h-4" />, label: "Downloads", href: "/downloads" },
        ]
      }
    ]

    const bottomNavItems: NavItem[] = [
      { icon: <User className="w-4 h-4" />, label: "Profile", href: "/profile" },
      { icon: <Settings className="w-4 h-4" />, label: "Settings", href: "/settings" },
      { icon: <HelpCircle className="w-4 h-4" />, label: "Help", href: "/help" },
    ]

    interface SidebarProps {
      onMouseEnter?: () => void
      onMouseLeave?: () => void
    }

    export const EnhancedSidebar = forwardRef<HTMLDivElement, SidebarProps>(
      ({ onMouseEnter, onMouseLeave }, ref) => {
        const { sidebarState, sidebarWidth, reducedMotion, compactMode } = useAppStore()
        const contentRef = useRef<HTMLDivElement>(null)
        const sectionsRef = useRef<(HTMLDivElement | null)[]>([])
        const [expandedSections, setExpandedSections] = React.useState<Set<string>>(
          new Set(navigationSections.filter(s => s.defaultExpanded).map(s => s.title))
        )

        const isCollapsed = sidebarState === SIDEBAR_STATES.COLLAPSED
        const isHidden = sidebarState === SIDEBAR_STATES.HIDDEN
        const isPeek = sidebarState === SIDEBAR_STATES.PEEK
        const animationDuration = reducedMotion ? 0.1 : 0.3

        // Toggle section expansion
        const toggleSection = (sectionTitle: string) => {
          setExpandedSections(prev => {
            const newSet = new Set(prev)
            if (newSet.has(sectionTitle)) {
              newSet.delete(sectionTitle)
            } else {
              newSet.add(sectionTitle)
            }
            return newSet
          })
        }

        // Animate content visibility
        useEffect(() => {
          if (!contentRef.current) return

          const labels = contentRef.current.querySelectorAll('.nav-label')
          const badges = contentRef.current.querySelectorAll('.nav-badge')
          const sectionTitles = contentRef.current.querySelectorAll('.section-title')
          const chevrons = contentRef.current.querySelectorAll('.section-chevron')

          if (isCollapsed) {
            gsap.to([labels, badges, sectionTitles, chevrons], {
              opacity: 0,
              scale: 0.8,
              duration: animationDuration,
              ease: "power2.out"
            })
          } else {
            gsap.to([labels, badges, sectionTitles, chevrons], {
              opacity: 1,
              scale: 1,
              duration: animationDuration,
              delay: 0.1,
              ease: "power2.out"
            })
          }
        }, [isCollapsed, animationDuration])

        // Hover animations for nav items
        const handleItemHover = (element: HTMLElement, isHovering: boolean) => {
          if (!element) return

          gsap.to(element, {
            scale: isHovering ? 1.02 : 1,
            x: isHovering ? 4 : 0,
            duration: animationDuration,
            ease: "power2.out"
          })
        }

        if (isHidden) {
          return null
        }

        const renderNavItem = (item: NavItem, depth = 0) => (
          <div key={item.label} className={cn("space-y-1", depth > 0 && "ml-6")}>
            <div
              className={cn(
                "group relative flex items-center gap-3 rounded-lg cursor-pointer transition-all duration-200",
                compactMode ? "px-2 py-1.5" : "px-4 py-2.5",
                "hover:bg-accent",
                item.isActive && "bg-primary text-primary-foreground hover:bg-primary/90",
                depth > 0 && "text-sm"
              )}
              onMouseEnter={(e) => handleItemHover(e.currentTarget, true)}
              onMouseLeave={(e) => handleItemHover(e.currentTarget, false)}
            >
              <div className="flex-shrink-0">
                {item.icon}
              </div>
              
              {!isCollapsed && (
                <>
                  <span className="nav-label flex-1 font-medium truncate">
                    {item.label}
                  </span>
                  
                  {item.badge && (
                    <span className="nav-badge bg-destructive text-destructive-foreground text-xs px-1.5 py-0.5 rounded-full min-w-[1.25rem] text-center">
                      {item.badge > 99 ? '99+' : item.badge}
                    </span>
                  )}

                  {item.children && (
                    <ChevronDown className="w-3 h-3 transition-transform" />
                  )}
                </>
              )}

              {/* Tooltip for collapsed state */}
              {isCollapsed && (
                <div className="absolute left-full ml-2 px-2 py-1 bg-popover text-popover-foreground text-sm rounded-md shadow-lg opacity-0 group-hover:opacity-100 transition-opacity pointer-events-none whitespace-nowrap z-50">
                  {item.label}
                  {item.badge && (
                    <span className="ml-2 bg-destructive text-destructive-foreground text-xs px-1.5 py-0.5 rounded-full">
                      {item.badge > 99 ? '99+' : item.badge}
                    </span>
                  )}
                </div>
              )}
            </div>

            {/* Children items */}
            {item.children && !isCollapsed && (
              <div className="space-y-1">
                {item.children.map(child => renderNavItem(child, depth + 1))}
              </div>
            )}
          </div>
        )

        return (
          <div
            ref={ref}
            className={cn(
              "relative bg-card flex-shrink-0",
              "h-full overflow-hidden",
              isPeek && "shadow-xl z-40",
              compactMode && "text-sm"
            )}
            style={{ width: sidebarWidth }}
            onMouseEnter={onMouseEnter}
            onMouseLeave={onMouseLeave}
          >
            {/* Background blur effect for peek mode */}
            {isPeek && (
              <div className="absolute inset-0 bg-background/80 backdrop-blur-sm" />
            )}

            <div 
              ref={contentRef}
              className={cn(
                "relative z-10 h-full flex flex-col",
                compactMode ? "p-3" : "p-4"
              )}
            >
              {/* Navigation Sections */}
              <div className="flex-1 overflow-y-auto overflow-x-hidden space-y-6 pt-4">
                {navigationSections.map((section, sectionIndex) => {
                  const isExpanded = expandedSections.has(section.title)
                  
                  return (
                    <div 
                      key={section.title}
                      ref={el => sectionsRef.current[sectionIndex] = el}
                      className="space-y-1"
                    >
                      {!isCollapsed && (
                        <div 
                          className={cn(
                            "flex items-center justify-between px-3 text-xs font-medium text-muted-foreground uppercase tracking-wider",
                            section.collapsible && "cursor-pointer hover:text-foreground transition-colors"
                          )}
                          onClick={() => section.collapsible && toggleSection(section.title)}
                        >
                          <span className="section-title">{section.title}</span>
                          {section.collapsible && (
                            <ChevronDown 
                              className={cn(
                                "section-chevron w-3 h-3 transition-transform",
                                isExpanded ? "rotate-0" : "-rotate-90"
                              )} 
                            />
                          )}
                        </div>
                      )}
                      
                      {(!section.collapsible || isExpanded || isCollapsed) && (
                        <nav className="space-y-1">
                          {section.items.map(item => renderNavItem(item))}
                        </nav>
                      )}
                    </div>
                  )
                })}
              </div>

              {/* Bottom Navigation */}
              <div className={cn("pt-4 border-t border-border", compactMode && "pt-3")}>
                <nav className="space-y-1">
                  {bottomNavItems.map((item) => renderNavItem(item))}
                </nav>

                {/* User Profile */}
                {!isCollapsed && (
                  <div className={cn("mt-6 p-3 bg-accent/50 rounded-xl", compactMode && "mt-4 p-2")}>
                    <div className="flex items-center gap-3">
                      <div className={cn("bg-primary rounded-full flex items-center justify-center", compactMode ? "w-8 h-8" : "w-10 h-10")}>
                        <User className={cn("text-primary-foreground", compactMode ? "w-4 h-4" : "w-5 h-5")} />
                      </div>
                      <div className="flex-1 min-w-0">
                        <p className={cn("font-medium truncate", compactMode ? "text-xs" : "text-sm")}>John Doe</p>
                        <p className={cn("text-muted-foreground truncate", compactMode ? "text-xs" : "text-xs")}>john@example.com</p>
                      </div>
                    </div>
                  </div>
                )}
              </div>
            </div>
          </div>
        )
      }
    )

    EnhancedSidebar.displayName = "EnhancedSidebar"
  src/components/MainContent.tsx: |-
    import React, { forwardRef, useRef, useEffect, useState } from 'react'
    import { gsap } from 'gsap'
    import { 
      BarChart3, 
      TrendingUp, 
      Users, 
      DollarSign, 
      Activity,
      Calendar,
      Clock,
      MessageSquare,
      FileText,
      Star,
      ChevronRight,
      Plus,
      Filter,
      Search,
      MoreVertical
    } from 'lucide-react'
    import { cn } from '@/lib/utils'
    import { BODY_STATES, type BodyState } from '@/lib/utils'
    import { DemoContent } from './DemoContent'

    interface MainContentProps {
      bodyState: BodyState
    }

    interface StatsCard {
      title: string
      value: string
      change: string
      trend: 'up' | 'down'
      icon: React.ReactNode
    }

    interface ActivityItem {
      id: string
      type: 'comment' | 'file' | 'meeting' | 'task'
      title: string
      description: string
      time: string
      user: string
    }

    const statsCards: StatsCard[] = [
      {
        title: "Total Revenue",
        value: "$45,231.89",
        change: "+20.1%",
        trend: "up",
        icon: <DollarSign className="w-5 h-5" />
      },
      {
        title: "Active Users",
        value: "2,350",
        change: "+180.1%",
        trend: "up",
        icon: <Users className="w-5 h-5" />
      },
      {
        title: "Conversion Rate",
        value: "12.5%",
        change: "+19%",
        trend: "up",
        icon: <TrendingUp className="w-5 h-5" />
      },
      {
        title: "Performance",
        value: "573ms",
        change: "-5.3%",
        trend: "down",
        icon: <Activity className="w-5 h-5" />
      }
    ]

    const recentActivity: ActivityItem[] = [
      {
        id: "1",
        type: "comment",
        title: "New comment on Project Alpha",
        description: "Sarah Johnson added a comment to the design review",
        time: "2 minutes ago",
        user: "SJ"
      },
      {
        id: "2",
        type: "file",
        title: "Document uploaded",
        description: "quarterly-report.pdf was uploaded to Documents",
        time: "15 minutes ago",
        user: "MD"
      },
      {
        id: "3",
        type: "meeting",
        title: "Meeting scheduled",
        description: "Weekly standup meeting scheduled for tomorrow 9 AM",
        time: "1 hour ago",
        user: "RW"
      },
      {
        id: "4",
        type: "task",
        title: "Task completed",
        description: "UI wireframes for mobile app completed",
        time: "2 hours ago",
        user: "AL"
      }
    ]

    export const MainContent = forwardRef<HTMLDivElement, MainContentProps>(
      ({ bodyState }, ref) => {
        const contentRef = useRef<HTMLDivElement>(null)
        const cardsRef = useRef<(HTMLDivElement | null)[]>([])
        const [searchTerm, setSearchTerm] = useState("")

        // Animate content based on body state
        useEffect(() => {
          if (!contentRef.current) return

          const content = contentRef.current
          const cards = cardsRef.current.filter(Boolean)

          switch (bodyState) {
            case BODY_STATES.FULLSCREEN:
              gsap.to(content, {
                scale: 1.02,
                duration: 0.4,
                ease: "power3.out"
              })
              break
            case BODY_STATES.SIDE_PANE:
              gsap.to(content, {
                scale: 0.98,
                duration: 0.4,
                ease: "power3.out"
              })
              break
            default:
              gsap.to(content, {
                scale: 1,
                duration: 0.4,
                ease: "power3.out"
              })
              break
          }

          // Stagger animation for cards
          gsap.fromTo(cards, 
            { y: 20, opacity: 0 },
            { 
              y: 0, 
              opacity: 1, 
              duration: 0.6,
              stagger: 0.1,
              ease: "power3.out"
            }
          )

        }, [bodyState])

        const getTypeIcon = (type: ActivityItem['type']) => {
          switch (type) {
            case 'comment':
              return <MessageSquare className="w-4 h-4" />
            case 'file':
              return <FileText className="w-4 h-4" />
            case 'meeting':
              return <Calendar className="w-4 h-4" />
            case 'task':
              return <Star className="w-4 h-4" />
            default:
              return <Activity className="w-4 h-4" />
          }
        }

        return (
          <div
            ref={ref}
            className={cn(
              "flex-1 h-[calc(100vh-80px)] overflow-hidden transition-all duration-300",
              bodyState === BODY_STATES.FULLSCREEN && "bg-background",
              bodyState === BODY_STATES.SIDE_PANE && "bg-muted/30"
            )}
          >
            <div 
              ref={contentRef}
              className="h-full overflow-y-auto p-6 space-y-8"
            >
              {/* Header */}
              <div className="flex items-center justify-between">
                <div>
                  <h1 className="text-3xl font-bold tracking-tight">Dashboard</h1>
                  <p className="text-muted-foreground">
                    Welcome to the amazing app shell demo! Explore all the features and customization options.
                  </p>
                </div>
                
                <div className="flex items-center gap-2">
                  <div className="relative">
                    <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4" />
                    <input
                      type="text"
                      placeholder="Search..."
                      value={searchTerm}
                      onChange={(e) => setSearchTerm(e.target.value)}
                      className="pl-9 pr-4 py-2 border-none rounded-lg bg-card focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent"
                    />
                  </div>
                  <button className="h-10 w-10 flex items-center justify-center hover:bg-accent rounded-full transition-colors">
                    <Filter className="w-5 h-5" />
                  </button>
                  <button className="bg-primary text-primary-foreground px-4 py-2 rounded-full hover:bg-primary/90 transition-colors flex items-center gap-2 h-10">
                    <Plus className="w-5 h-5" />
                    <span>New Project</span>
                  </button>
                </div>
              </div>

              {/* Stats Cards */}
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
                {statsCards.map((stat, index) => (
                  <div
                    key={stat.title}
                    ref={el => cardsRef.current[index] = el}
                    className="bg-card p-6 rounded-2xl border border-border/50 hover:border-primary/30 transition-all duration-300 group cursor-pointer"
                  >
                    <div className="flex items-center justify-between">
                      <div className="p-3 bg-primary/10 rounded-full group-hover:bg-primary/20 transition-colors">
                        {stat.icon}
                      </div>
                      <div className={cn(
                        "text-sm font-medium",
                        stat.trend === 'up' ? "text-green-600" : "text-red-600"
                      )}>
                        {stat.change}
                      </div>
                    </div>
                    <div className="mt-4">
                      <h3 className="text-2xl font-bold">{stat.value}</h3>
                      <p className="text-sm text-muted-foreground mt-1">{stat.title}</p>
                    </div>
                  </div>
                ))}
              </div>

              {/* Demo Content */}
              <DemoContent />

              {/* Main Content Grid */}
              <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
                {/* Chart Area */}
                <div className="lg:col-span-2 space-y-6">
                  {/* Analytics Chart */}
                  <div className="bg-card p-6 rounded-2xl border border-border/50">
                    <div className="flex items-center justify-between mb-6">
                      <h3 className="text-lg font-semibold">Analytics Overview</h3>
                      <button className="h-8 w-8 flex items-center justify-center hover:bg-accent rounded-full transition-colors">
                        <MoreVertical className="w-5 h-5" />
                      </button>
                    </div>
                    
                    {/* Mock Chart */}
                    <div className="h-64 bg-gradient-to-br from-primary/10 to-transparent rounded-xl flex items-center justify-center border border-border/50">
                      <div className="text-center">
                        <BarChart3 className="w-12 h-12 text-primary mx-auto mb-2" />
                        <p className="text-muted-foreground">Chart visualization would go here</p>
                      </div>
                    </div>
                  </div>

                  {/* Recent Projects */}
                  <div className="bg-card p-6 rounded-2xl border border-border/50">
                    <div className="flex items-center justify-between mb-6">
                      <h3 className="text-lg font-semibold">Recent Projects</h3>
                      <button className="text-primary hover:text-primary/80 text-sm font-medium flex items-center gap-1">
                        View All
                        <ChevronRight className="w-4 h-4" />
                      </button>
                    </div>
                    
                    <div className="space-y-4">
                      {[
                        { name: "E-commerce Platform", progress: 75, team: 5, deadline: "Dec 15" },
                        { name: "Mobile App Redesign", progress: 45, team: 3, deadline: "Jan 20" },
                        { name: "Marketing Website", progress: 90, team: 4, deadline: "Dec 5" }
                      ].map((project) => (
                        <div key={project.name} className="p-4 bg-accent/30 rounded-xl hover:bg-accent/50 transition-colors cursor-pointer">
                          <div className="flex items-center justify-between mb-2">
                            <h4 className="font-medium">{project.name}</h4>
                            <span className="text-sm text-muted-foreground">{project.progress}%</span>
                          </div>
                          <div className="w-full bg-muted rounded-full h-2 mb-3">
                            <div 
                              className="bg-primary h-2 rounded-full transition-all duration-500"
                              style={{ width: `${project.progress}%` }}
                            />
                          </div>
                          <div className="flex items-center justify-between text-sm text-muted-foreground">
                            <span>{project.team} team members</span>
                            <span>Due {project.deadline}</span>
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                </div>

                {/* Sidebar Content */}
                <div className="space-y-6">
                  {/* Quick Actions */}
                  <div className="bg-card p-6 rounded-2xl border border-border/50">
                    <h3 className="text-lg font-semibold mb-4">Quick Actions</h3>
                    <div className="space-y-3">
                      {[
                        { icon: <FileText className="w-4 h-4" />, label: "Create Document", color: "bg-blue-500/10 text-blue-600" },
                        { icon: <Calendar className="w-4 h-4" />, label: "Schedule Meeting", color: "bg-green-500/10 text-green-600" },
                        { icon: <Users className="w-4 h-4" />, label: "Invite Team", color: "bg-purple-500/10 text-purple-600" },
                        { icon: <BarChart3 className="w-4 h-4" />, label: "View Reports", color: "bg-orange-500/10 text-orange-600" }
                      ].map((action) => (
                        <button
                          key={action.label}
                          className="w-full flex items-center gap-3 p-3 hover:bg-accent rounded-lg transition-colors text-left"
                        >
                          <div className={cn("p-2 rounded-full", action.color)}>
                            {action.icon}
                          </div>
                          <span className="font-medium">{action.label}</span>
                        </button>
                      ))}
                    </div>
                  </div>

                  {/* Recent Activity */}
                  <div className="bg-card p-6 rounded-2xl border border-border/50">
                    <h3 className="text-lg font-semibold mb-4">Recent Activity</h3>
                    <div className="space-y-4">
                      {recentActivity.map((activity) => (
                        <div key={activity.id} className="flex items-start gap-3 p-3 hover:bg-accent/30 rounded-xl transition-colors cursor-pointer">
                          <div className="p-2 bg-primary/10 rounded-full flex-shrink-0">
                            {getTypeIcon(activity.type)}
                          </div>
                          <div className="flex-1 min-w-0">
                            <h4 className="font-medium text-sm mb-1">{activity.title}</h4>
                            <p className="text-xs text-muted-foreground mb-2">{activity.description}</p>
                            <div className="flex items-center gap-2 text-xs text-muted-foreground">
                              <Clock className="w-3 h-3" />
                              <span>{activity.time}</span>
                              <div className="w-5 h-5 bg-primary rounded-full flex items-center justify-center text-primary-foreground text-xs font-medium">
                                {activity.user}
                              </div>
                            </div>
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        )
      }
    )
  src/store/appStore.ts: >-
    import { create } from 'zustand'

    import { persist } from 'zustand/middleware'

    import { SIDEBAR_STATES, BODY_STATES, type SidebarState, type BodyState }
    from '@/lib/utils'


    interface AppState {
      // UI States
      sidebarState: SidebarState
      bodyState: BodyState
      isDarkMode: boolean
      sidebarWidth: number
      isResizing: boolean
      
      // User Preferences
      autoExpandSidebar: boolean
      reducedMotion: boolean
      compactMode: boolean
      
      // Actions
      setSidebarState: (state: SidebarState) => void
      setBodyState: (state: BodyState) => void
      toggleDarkMode: () => void
      setSidebarWidth: (width: number) => void
      setIsResizing: (resizing: boolean) => void
      setAutoExpandSidebar: (auto: boolean) => void
      setReducedMotion: (reduced: boolean) => void
      setCompactMode: (compact: boolean) => void
      
      // Composite Actions
      toggleSidebar: () => void
      hideSidebar: () => void
      showSidebar: () => void
      peekSidebar: () => void
      toggleFullscreen: () => void
      toggleSidePane: () => void
      resetToDefaults: () => void
    }


    const defaultState = {
      sidebarState: SIDEBAR_STATES.EXPANDED as SidebarState,
      bodyState: BODY_STATES.NORMAL as BodyState,
      isDarkMode: false,
      sidebarWidth: 300,
      isResizing: false,
      autoExpandSidebar: true,
      reducedMotion: false,
      compactMode: false,
    }


    export const useAppStore = create<AppState>()(
      persist(
        (set, get) => ({
          ...defaultState,
          
          // Basic setters
          setSidebarState: (state) => set({ sidebarState: state }),
          setBodyState: (state) => set({ bodyState: state }),
          toggleDarkMode: () => {
            const newMode = !get().isDarkMode
            set({ isDarkMode: newMode })
            document.documentElement.classList.toggle('dark', newMode)
          },
          setSidebarWidth: (width) => set({ sidebarWidth: Math.max(200, Math.min(500, width)) }),
          setIsResizing: (resizing) => set({ isResizing: resizing }),
          setAutoExpandSidebar: (auto) => set({ autoExpandSidebar: auto }),
          setReducedMotion: (reduced) => set({ reducedMotion: reduced }),
          setCompactMode: (compact) => set({ compactMode: compact }),
          
          // Composite actions
          toggleSidebar: () => {
            const current = get().sidebarState
            if (current === SIDEBAR_STATES.HIDDEN) {
              set({ sidebarState: SIDEBAR_STATES.COLLAPSED })
            } else if (current === SIDEBAR_STATES.COLLAPSED) {
              set({ sidebarState: SIDEBAR_STATES.EXPANDED })
            } else if (current === SIDEBAR_STATES.EXPANDED) {
              set({ sidebarState: SIDEBAR_STATES.COLLAPSED })
            }
          },
          
          hideSidebar: () => set({ sidebarState: SIDEBAR_STATES.HIDDEN }),
          showSidebar: () => set({ sidebarState: SIDEBAR_STATES.EXPANDED }),
          peekSidebar: () => set({ sidebarState: SIDEBAR_STATES.PEEK }),
          
          toggleFullscreen: () => {
            const current = get().bodyState
            set({ 
              bodyState: current === BODY_STATES.FULLSCREEN ? BODY_STATES.NORMAL : BODY_STATES.FULLSCREEN 
            })
          },
          
          toggleSidePane: () => {
            const current = get().bodyState
            set({ 
              bodyState: current === BODY_STATES.SIDE_PANE ? BODY_STATES.NORMAL : BODY_STATES.SIDE_PANE 
            })
          },
          
          resetToDefaults: () => set(defaultState),
        }),
        {
          name: 'app-preferences',
          partialize: (state) => ({
            sidebarState: state.sidebarState,
            bodyState: state.bodyState,
            isDarkMode: state.isDarkMode,
            sidebarWidth: state.sidebarWidth,
            autoExpandSidebar: state.autoExpandSidebar,
            reducedMotion: state.reducedMotion,
            compactMode: state.compactMode,
          }),
        }
      )
    )


    // Initialize dark mode on load

    if (typeof window !== 'undefined') {
      const stored = localStorage.getItem('app-preferences')
      if (stored) {
        const parsed = JSON.parse(stored)
        if (parsed.state?.isDarkMode) {
          document.documentElement.classList.add('dark')
        }
      }
    }
approved: true
linesAdded: null
linesRemoved: null
linesDifference: null
gitCommittedAt: '2025-10-10T10:16:16.778Z'
status: committed
id: 11
