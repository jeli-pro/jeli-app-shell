uuid: d6e04d7e-9273-455b-80a2-f982a2010839
projectId: jeli-app-shell
createdAt: '2025-10-21T03:58:01.473Z'
gitCommitMsg: >-
  refactor(dynamic-view): enhance FieldRenderer and clean up core types

  This commit executes Part 1 of the dynamic view refactoring plan, focusing on
  strengthening the core infrastructure.

  - The `FieldRenderer` is updated to handle more complex badge rendering. It
  can now display a full badge with colors derived from the `ViewConfig`'s
  `colorMap` or a compact indicator dot using the new `indicatorColorMap`. -
  Obsolete color helper functions (`getStatusColor`, `getPriorityColor`) are
  removed from `lib/utils.ts`. - The legacy `DataItemParts.tsx` component is
  deleted, as its functionality is now fully absorbed by the enhanced
  `FieldRenderer`. - The feature-specific `DataDemo/types.ts` is deleted,
  establishing `features/dynamic-view/types.ts` as the single source of truth
  for all view-related types.

  These changes create a more robust and flexible foundation for the subsequent
  UI component refactors, ensuring they can be driven entirely by a declarative
  configuration.
promptSummary: >-
  Execute Part 1 of the plan to refactor the dynamic view engine.

  This involves:

  1. Enhancing the `FieldRenderer` to handle more complex badge rendering logic
  (full badge with colors vs. compact indicator dot).

  2. Cleaning up obsolete code by removing the old `DataItemParts` component and
  its related helper functions in `utils.ts`.

  3. Deleting the old `DataDemo/types.ts` file to centralize all type
  definitions in `features/dynamic-view/types.ts`.
reasoning:
  - >-
    Executing Part 1 of our plan, we will upgrade the core infrastructure of the
    `dynamic-view` engine. This involves enhancing our type definitions to be
    more expressive and supercharging the `FieldRenderer` to handle more
    complex, config-driven UI logic. This lays the critical groundwork for
    restoring the original UI's fidelity in the subsequent steps.
  - '### 1. Evolve Configuration Schema'
  - >-
    The configuration schema in `src/features/dynamic-view/types.ts` is already
    in the target state from the previous refactor, containing the necessary
    properties like `indicatorColorMap` and granular `CardViewConfig` keys.
    Therefore, no changes are needed for this file.
  - '### 2. Supercharge the FieldRenderer'
  - >-
    To make the `FieldRenderer` the single source of truth for displaying data,
    I'll enhance it to handle all rendering variations, particularly for badges.
    This change allows the component to display either a full-text badge with
    colors derived from the view configuration (`colorMap`) or a compact,
    colored dot (`indicatorColorMap`) based on the options passed to it.
  - '### 3. Clean Up Obsolete Logic and Files'
  - >-
    With the rendering logic now centralized in `FieldRenderer` and driven by
    the view config, the old helper functions for badge colors and the dedicated
    `DataItemParts` component are redundant. I will remove them to complete this
    part of the refactor.
  - First, I'll remove the now-unused color helper functions from `utils.ts`.
  - Next, I'll delete the now-redundant `DataItemParts.tsx` component.
  - >-
    Finally, I'll remove the old, feature-specific type definitions, as
    `src/features/dynamic-view/types.ts` is now the single source of truth.
operations:
  - type: write
    path: src/features/dynamic-view/components/shared/FieldRenderer.tsx
    content: |
      <<<<<<< SEARCH
          case 'badge': {
            const { colorMap, indicatorColorMap } = fieldDef as BadgeFieldDefinition;
            return (
              <Badge variant="outline" className={cn("font-medium capitalize", colorMap?.[String(value)] || '', className)}>
                {String(value)}
              </Badge>
            );
          }
      =======
          case 'badge': {
            const { colorMap, indicatorColorMap } = fieldDef as BadgeFieldDefinition;
            
            if (options?.displayAs === 'indicator' && indicatorColorMap) {
              const indicatorColorClass = indicatorColorMap[String(value)] || 'bg-muted-foreground';
              return (
                <div className={cn("w-3 h-3 rounded-full", indicatorColorClass, className)} />
              );
            }

            const colorClass = colorMap?.[String(value)] || '';
            return (
              <Badge variant="outline" className={cn("font-medium capitalize", colorClass, className)}>
                {String(value)}
              </Badge>
            );
          }
      >>>>>>> REPLACE
    patchStrategy: search-replace
  - type: write
    path: src/lib/utils.ts
    content: >+
      --- src/lib/utils.ts

      +++ src/lib/utils.ts

      @@ -29,18 +29,6 @@
           .replace(' days', 'd')
       }
       
      -export const getStatusColor = (status: string) => {

      -  switch (status) {

      -    case 'active': return 'bg-green-500/20 text-green-700
      border-green-500/30'

      -    case 'pending': return 'bg-yellow-500/20 text-yellow-700
      border-yellow-500/30'

      -    case 'completed': return 'bg-blue-500/20 text-blue-700
      border-blue-500/30'

      -    case 'archived': return 'bg-gray-500/20 text-gray-700
      border-gray-500/30'

      -    default: return 'bg-gray-500/20 text-gray-700 border-gray-500/30'

      -  }

      -}

      -
       // A helper to get nested properties from an object, e.g., 'metrics.views'
       export function getNestedValue(obj: Record<string, any>, path: string): any {
         return path.split('.').reduce((o, k) => (o && o[k] !== undefined ? o[k] : undefined), obj);
      @@ -55,13 +43,3 @@
           default: return 'bg-gray-500'
         }
       }
      -

      -export const getPriorityColor = (priority: string) => {

      -  switch (priority) {

      -    case 'critical': return 'bg-red-500/20 text-red-700
      border-red-500/30'

      -    case 'high': return 'bg-orange-500/20 text-orange-700
      border-orange-500/30'

      -    case 'medium': return 'bg-blue-500/20 text-blue-700
      border-blue-500/30'

      -    case 'low': return 'bg-green-500/20 text-green-700
      border-green-500/30'

      -    default: return 'bg-gray-500/20 text-gray-700 border-gray-500/30'

      -  }

      -}

    patchStrategy: standard-diff
  - type: delete
    path: src/pages/DataDemo/components/shared/DataItemParts.tsx
  - type: delete
    path: src/pages/DataDemo/types.ts
snapshot:
  src/pages/DataDemo/components/shared/DataItemParts.tsx: null
  src/pages/DataDemo/types.ts: null
  src/features/dynamic-view/components/shared/FieldRenderer.tsx: >-
    import { useDynamicView } from '../../DynamicViewContext';

    import type { GenericItem, BadgeFieldDefinition } from '../../types';

    import { cn, getNestedValue } from '@/lib/utils';

    import { Avatar, AvatarFallback, AvatarImage } from
    '@/components/ui/avatar';

    import { Badge } from '@/components/ui/badge';

    import { Clock, Eye, Heart, Share } from 'lucide-react';


    interface FieldRendererProps {
      item: GenericItem;
      fieldId: string;
      className?: string;
      options?: Record<string, any>; // For extra props like 'compact' for avatar
    }


    export function FieldRenderer({ item, fieldId, className, options }:
    FieldRendererProps) {
      const { getFieldDef } = useDynamicView();
      const fieldDef = getFieldDef(fieldId);
      const value = getNestedValue(item, fieldId);

      // Custom render function takes precedence
      if (fieldDef?.render) {
        return <>{fieldDef.render(item, options)}</>;
      }

      if (!fieldDef) {
        console.warn(`[FieldRenderer] No field definition found for ID: ${fieldId}`);
        return <span className="text-red-500">?</span>;
      }

      if (value === null || typeof value === 'undefined') {
        return null; // Or some placeholder like 'N/A'
      }
      
      switch (fieldDef.type) {
        case 'string':
        case 'longtext':
          return <span className={cn("truncate", className)}>{String(value)}</span>;
        
        case 'thumbnail':
          return <span className={cn("text-xl", className)}>{String(value)}</span>;

        case 'badge': {
          const { colorMap, indicatorColorMap } = fieldDef as BadgeFieldDefinition;
          
          if (options?.displayAs === 'indicator' && indicatorColorMap) {
            const indicatorColorClass = indicatorColorMap[String(value)] || 'bg-muted-foreground';
            return (
              <div className={cn("w-3 h-3 rounded-full", indicatorColorClass, className)} />
            );
          }

          const colorClass = colorMap?.[String(value)] || '';
          return (
            <Badge variant="outline" className={cn("font-medium capitalize", colorClass, className)}>
              {String(value)}
            </Badge>
          );
        }
        
        case 'avatar': {
          const { compact = false, avatarClassName = "w-8 h-8" } = options || {};
          const avatarUrl = getNestedValue(value, 'avatar');
          const name = getNestedValue(value, 'name');
          const email = getNestedValue(value, 'email');
          const fallback = name?.split(' ').map((n: string) => n[0]).join('') || '?';

          const avatarEl = (
            <Avatar className={cn("border-2 border-transparent group-hover:border-primary/50 transition-colors", avatarClassName)}>
              <AvatarImage src={avatarUrl} alt={name} />
              <AvatarFallback>{fallback}</AvatarFallback>
            </Avatar>
          );
          if (compact) return avatarEl;

          return (
            <div className={cn("flex items-center gap-2 group", className)}>
              {avatarEl}
              <div className="min-w-0 hidden sm:block">
                <p className="font-medium text-sm truncate">{name}</p>
                <p className="text-xs text-muted-foreground truncate">{email}</p>
              </div>
            </div>
          );
        }
        
        case 'progress': {
          const { showPercentage = false } = options || {};
          const bar = (
            <div className="w-full bg-muted rounded-full h-2.5">
              <div
                className="bg-gradient-to-r from-primary to-primary/80 h-2.5 rounded-full transition-all duration-500"
                style={{ width: `${value}%` }}
              />
            </div>
          );
          if (!showPercentage) return bar;
          
          return (
            <div className="flex items-center gap-3">
              <div className="flex-1 min-w-0">{bar}</div>
              <span className="text-sm font-medium text-muted-foreground">{value}%</span>
            </div>
          );
        }

        case 'date':
          return (
            <div className={cn("flex items-center gap-1.5 text-sm", className)}>
              <Clock className="w-4 h-4" />
              <span>{new Date(value).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}</span>
            </div>
          );

        case 'tags': {
          const MAX_TAGS = 2;
          const tags = Array.isArray(value) ? value : [];
          const remainingTags = tags.length - MAX_TAGS;
          return (
            <div className={cn("flex items-center gap-1.5 flex-wrap", className)}>
              {tags.slice(0, MAX_TAGS).map(tag => (
                <Badge key={tag} variant="secondary" className="text-xs">{tag}</Badge>
              ))}
              {remainingTags > 0 && (
                <Badge variant="outline" className="text-xs">+{remainingTags}</Badge>
              )}
            </div>
          );
        }

        case 'metrics': {
          const views = getNestedValue(value, 'views') || 0;
          const likes = getNestedValue(value, 'likes') || 0;
          const shares = getNestedValue(value, 'shares') || 0;
          return (
            <div className={cn("flex items-center gap-3 text-sm", className)}>
              <div className="flex items-center gap-1"><Eye className="w-4 h-4" /> {views}</div>
              <div className="flex items-center gap-1"><Heart className="w-4 h-4" /> {likes}</div>
              <div className="flex items-center gap-1"><Share className="w-4 h-4" /> {shares}</div>
            </div>
          );
        }
          
        default:
          return <>{String(value)}</>;
      }
    }
  src/lib/utils.ts: >-
    import { type ClassValue, clsx } from "clsx"

    import { twMerge } from "tailwind-merge"

    import { formatDistanceToNow } from "date-fns"


    export function cn(...inputs: ClassValue[]) {
      return twMerge(clsx(inputs))
    }


    export const SIDEBAR_STATES = {
      HIDDEN: 'hidden',
      COLLAPSED: 'collapsed', 
      EXPANDED: 'expanded',
      PEEK: 'peek'
    } as const


    export const BODY_STATES = {
      NORMAL: 'normal',
      FULLSCREEN: 'fullscreen',
      SIDE_PANE: 'side_pane',
      SPLIT_VIEW: 'split_view'
    } as const


    export type SidebarState = typeof SIDEBAR_STATES[keyof typeof
    SIDEBAR_STATES]

    export type BodyState = typeof BODY_STATES[keyof typeof BODY_STATES]


    export function capitalize(str: string): string {
      if (!str) return str
      return str.charAt(0).toUpperCase() + str.slice(1)
    }


    export function formatDistanceToNowShort(date: Date | string): string {
      const dateObj = typeof date === 'string' ? new Date(date) : date;
      const result = formatDistanceToNow(dateObj, { addSuffix: true });

      if (result === 'less than a minute ago') return 'now';

      return result
        .replace('about ', '')
        .replace(' minutes', 'm')
        .replace(' minute', 'm')
        .replace(' hours', 'h')
        .replace(' hour', 'h')
        .replace(' days', 'd')
    }


    export const getStatusColor = (status: string) => {
      switch (status) {
        case 'active': return 'bg-green-500/20 text-green-700 border-green-500/30'
        case 'pending': return 'bg-yellow-500/20 text-yellow-700 border-yellow-500/30'
        case 'completed': return 'bg-blue-500/20 text-blue-700 border-blue-500/30'
        case 'archived': return 'bg-gray-500/20 text-gray-700 border-gray-500/30'
        default: return 'bg-gray-500/20 text-gray-700 border-gray-500/30'
      }
    }


    // A helper to get nested properties from an object, e.g., 'metrics.views'

    export function getNestedValue(obj: Record<string, any>, path: string): any
    {
      return path.split('.').reduce((o, k) => (o && o[k] !== undefined ? o[k] : undefined), obj);
    }


    export const getPrioritySolidColor = (priority: string) => {
      switch (priority) {
        case 'critical': return 'bg-red-500'
        case 'high': return 'bg-orange-500'
        case 'medium': return 'bg-blue-500'
        case 'low': return 'bg-green-500'
        default: return 'bg-gray-500'
      }
    }


    export const getPriorityColor = (priority: string) => {
      switch (priority) {
        case 'critical': return 'bg-red-500/20 text-red-700 border-red-500/30'
        case 'high': return 'bg-orange-500/20 text-orange-700 border-orange-500/30'
        case 'medium': return 'bg-blue-500/20 text-blue-700 border-blue-500/30'
        case 'low': return 'bg-green-500/20 text-green-700 border-green-500/30'
        default: return 'bg-gray-500/20 text-gray-700 border-gray-500/30'
      }
    }
approved: false
linesAdded: null
linesRemoved: null
linesDifference: null
gitCommittedAt: null
status: undone
id: 516
