uuid: b859664f-4d98-4674-a74c-473d09798e6c
projectId: amazing-app-shell
createdAt: '2025-10-10T13:49:30.312Z'
gitCommitMsg: >-
  feat(ui): move page controls to top bar with expanding search

  - Moves search, filter, new project, and move-to-pane controls from
  `DashboardContent` and `SettingsPage` to the `TopBar`. - Implements an
  expanding search bar in the `TopBar` that activates on focus. - When search is
  focused, breadcrumbs fade out and the search input smoothly expands. -
  Page-specific controls are now conditionally rendered in the `TopBar` based on
  the active page. - Search term state is now managed globally in `appStore`.
promptSummary: >-
  I want to move page controls like search, filter, and the new project button
  from the dashboard content to the top bar. When the search input in the top
  bar is focused, it should expand to take up more space, replacing the
  breadcrumbs.
reasoning:
  - 'Here is my plan to implement the requested changes:'
  - >-
    1.  **Centralize Search State:** I'll move the `searchTerm` state from
    `DashboardContent` into the global `appStore`. This allows the `TopBar` to
    control the search term while `DashboardContent` can react to it. The search
    term will not be persisted across sessions.
  - >-
    2.  **Relocate Page Controls:** The Search bar, Filter button, "New Project"
    button, and "Move to Side Pane" button will be removed from
    `DashboardContent` and `SettingsPage`.
  - 3.  **Enhance `TopBar`:**
  - >-
    *   I will add the relocated page controls to the `TopBar`. These controls
    will be displayed conditionally based on the active page (`dashboard` or
    `settings`).
  - >-
    *   A new state variable, `isSearchFocused`, will be introduced in `TopBar`
    to manage the search bar's appearance.
  - '*   When the search input is focused:'
  - '*   It will smoothly expand to take up more space.'
  - >-
    *   The breadcrumbs on the left will fade out to make room, fulfilling the
    requirement to "replace up to breadcrumbs". The sidebar toggle menu icon
    will remain visible.
  - >-
    *   To optimize space on smaller viewports, some global action icons on the
    right will be hidden, and the "New Project" button's text will collapse to
    just an icon.
  - >-
    This approach will create a more dynamic and context-aware header,
    centralizing page-level actions where they are most accessible, while
    providing an elegant expanding search experience.
  - First, I'll update the global store to handle the search term.
  - >-
    Next, I will remove the header controls from the `DashboardContent`
    component.
  - >-
    Similarly, I'll remove the "Move to Side Pane" button from the
    `SettingsPage`.
  - >-
    Finally, I'll implement the new, dynamic `TopBar` with the expanding search
    functionality and relocated controls.
operations:
  - type: write
    path: src/store/appStore.ts
    content: |+
      --- src/store/appStore.ts
      +++ src/store/appStore.ts
      @@ -14,6 +14,7 @@
         isResizing: boolean
         isResizingRightPane: boolean
         isTopBarVisible: boolean
      +  searchTerm: string
         
         // User Preferences
         autoExpandSidebar: boolean
      @@ -32,6 +33,7 @@
         setReducedMotion: (reduced: boolean) => void
         setCompactMode: (compact: boolean) => void
         setPrimaryColor: (color: string) => void
      +  setSearchTerm: (term: string) => void
         
         // Composite Actions
         toggleSidebar: () => void
      @@ -56,6 +58,7 @@
         reducedMotion: false,
         compactMode: false,
         primaryColor: '220 84% 60%',
      +  searchTerm: '',
       }
       
       export const useAppStore = create<AppState>()(
      @@ -82,6 +85,7 @@
             setReducedMotion: (reduced) => set({ reducedMotion: reduced }),
             setCompactMode: (compact) => set({ compactMode: compact }),
             setPrimaryColor: (color) => set({ primaryColor: color }),
      +      setSearchTerm: (term) => set({ searchTerm: term }),
             
             // Composite actions
             toggleSidebar: () => {
      @@ -142,6 +146,7 @@
               reducedMotion: state.reducedMotion,
               compactMode: state.compactMode,
               primaryColor: state.primaryColor,
      +        // searchTerm is not persisted
             }),
           }
         )

    patchStrategy: standard-diff
  - type: write
    path: src/components/DashboardContent.tsx
    content: >+
      --- src/components/DashboardContent.tsx

      +++ src/components/DashboardContent.tsx

      @@ -1,4 +1,4 @@

      -import { useRef, useEffect, useState } from 'react'

      +import { useRef, useEffect } from 'react'
       import { gsap } from 'gsap'
       import { 
         BarChart3, 
      @@ -11,12 +11,8 @@
         FileText,
         Star,
         ChevronRight,
      -  Plus,

      -  Filter,

      -  Search,
         MoreVertical,
      -  ArrowDown,

      -  PanelRight

      +  ArrowDown
       } from 'lucide-react'
       import { cn } from '@/lib/utils'
       import { DemoContent } from './DemoContent'
      @@ -111,9 +107,8 @@
       
       export function DashboardContent({ isInSidePane = false }: DashboardContentProps) {
           const contentRef = useRef<HTMLDivElement>(null)
           const cardsRef = useRef<(HTMLDivElement | null)[]>([])
      -    const [searchTerm, setSearchTerm] = useState("")
           const [showScrollToBottom, setShowScrollToBottom] = useState(false)
      -    const { bodyState, openSidePane, setTopBarVisible } = useAppStore()

      +    const { bodyState, setTopBarVisible, searchTerm } = useAppStore()
           const lastScrollTop = useRef(0);
       
           const handleScroll = () => {
      @@ -210,33 +205,6 @@
                       Welcome to the amazing app shell demo! Explore all the features and customization options.
                     </p>
                   </div>
      -            

      -            <div className="flex items-center gap-2">

      -              <div className="relative">

      -                <Search className="absolute left-3 top-1/2 transform
      -translate-y-1/2 text-muted-foreground w-4 h-4" />

      -                <input

      -                  type="text"

      -                  placeholder="Search..."

      -                  value={searchTerm}

      -                  onChange={(e) => setSearchTerm(e.target.value)}

      -                  className="pl-9 pr-4 py-2 border-none rounded-lg
      bg-card focus:outline-none focus:ring-2 focus:ring-primary
      focus:border-transparent"

      -                />

      -              </div>

      -              <button className="h-10 w-10 flex items-center
      justify-center hover:bg-accent rounded-full transition-colors">

      -                <Filter className="w-5 h-5" />

      -              </button>

      -              <button className="bg-primary text-primary-foreground px-4
      py-2 rounded-full hover:bg-primary/90 transition-colors flex items-center
      gap-2 h-10">

      -                <Plus className="w-5 h-5" />

      -                <span>New Project</span>

      -              </button>

      -              {!isInSidePane && (

      -                <button

      -                  onClick={() => openSidePane('main')}

      -                  className="h-10 w-10 flex items-center justify-center
      hover:bg-accent rounded-full transition-colors" title="Move to Side Pane">

      -                  <PanelRight className="w-5 h-5" />

      -                </button>

      -              )}

      -            </div>
                 </div>
                   {/* Stats Cards */}
                   <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">

    patchStrategy: standard-diff
  - type: write
    path: src/components/SettingsPage.tsx
    content: >+
      --- src/components/SettingsPage.tsx

      +++ src/components/SettingsPage.tsx

      @@ -1,5 +1,4 @@
       import { useRef } from 'react'
      -import { PanelRight } from 'lucide-react'
       import { SettingsContent } from './SettingsContent'
       import { useAppStore } from '@/store/appStore'
       
      @@ -7,11 +6,6 @@
         const { openSidePane, setActivePage, setTopBarVisible } = useAppStore()
         const scrollRef = useRef<HTMLDivElement>(null)
         const lastScrollTop = useRef(0)
      -

      -  const handleMoveToSidePane = () => {

      -    openSidePane('settings');

      -    setActivePage('dashboard');

      -  }
       
         return (
           <div
      @@ -37,13 +31,6 @@
                   Customize your experience. Changes are saved automatically.
                 </p>
               </div>
      -        

      -        <div className="flex items-center gap-2">

      -            <button

      -              onClick={handleMoveToSidePane}

      -              className="h-10 w-10 flex items-center justify-center
      hover:bg-accent rounded-full transition-colors" title="Move to Side Pane">

      -              <PanelRight className="w-5 h-5" />

      -            </button>

      -        </div>
             </div>
       
             <SettingsContent />

    patchStrategy: standard-diff
  - type: write
    path: src/components/TopBar.tsx
    content: >+
      --- src/components/TopBar.tsx

      +++ src/components/TopBar.tsx

      @@ -1,4 +1,5 @@

      -import { 

      +import { useState } from 'react'

      +import {
         Menu, 
         Maximize, 
         Minimize, 
      @@ -8,7 +9,12 @@
         Command,
         Zap,
         ChevronRight
      +  Search,

      +  Filter,

      +  Plus,

      +  PanelRight,
       } from 'lucide-react'
       import { cn } from '@/lib/utils'
       import { BODY_STATES } from '@/lib/utils'
      @@ -29,8 +35,12 @@
           sidePaneContent,
           activePage,
           setActivePage,
      +    searchTerm,

      +    setSearchTerm,
         } = useAppStore()
       
      +  const [isSearchFocused, setIsSearchFocused] = useState(false)

      +
         const handleSettingsClick = () => {
           const isSettingsInSidePane = bodyState === BODY_STATES.SIDE_PANE && sidePaneContent === 'settings'
       
      @@ -45,8 +55,23 @@
           }
         }
       
      +  const handleDashboardMoveToSidePane = () => {

      +    openSidePane('main');

      +  };

      +

      +  const handleSettingsMoveToSidePane = () => {

      +    openSidePane('settings');

      +    setActivePage('dashboard');

      +  }

      +
         return (
      -    <div className="h-20 bg-card/80 backdrop-blur-sm border-b
      border-border flex items-center justify-between px-6 z-50">

      +    <div className={cn(

      +      "h-20 bg-card/80 backdrop-blur-sm border-b border-border flex
      items-center justify-between px-6 z-50 gap-4",

      +      {

      +        'transition-all duration-300 ease-in-out': activePage ===
      'dashboard',

      +      }

      +    )}>
             {/* Left Section - Sidebar Controls & Breadcrumbs */}
             <div className="flex items-center gap-4">
               {/* Sidebar Controls */}
      @@ -59,20 +84,73 @@
               </button>
       
               {/* Breadcrumbs */}
      -        <div className="hidden md:flex items-center gap-2 text-sm">

      +        <div className={cn("hidden md:flex items-center gap-2 text-sm
      transition-opacity", {

      +          "opacity-0 pointer-events-none": isSearchFocused && activePage
      === 'dashboard'

      +        })}>
                 <a href="#" className="text-muted-foreground hover:text-foreground transition-colors">Home</a>
                 <ChevronRight className="w-4 h-4 text-muted-foreground" />
                 <span className="font-medium text-foreground capitalize">{activePage}</span>
               </div>
             </div>
       
      -      {/* Right Section - View Controls */}

      -      <div className="flex items-center gap-3">

      +      {/* Right Section - Search, page controls, and global controls */}

      +      <div className={cn("flex items-center gap-3", isSearchFocused &&
      activePage === 'dashboard' ? 'flex-1' : '')}>

      +        {/* Page-specific: Dashboard search and actions */}

      +        {activePage === 'dashboard' && (

      +          <div className="flex items-center gap-2 flex-1 justify-end">

      +            <div className={cn("relative transition-all duration-300
      ease-in-out", isSearchFocused ? 'flex-1 max-w-lg' : 'w-auto')}>

      +              <Search className="absolute left-3 top-1/2 transform
      -translate-y-1/2 text-muted-foreground w-4 h-4 pointer-events-none" />

      +              <input

      +                type="text"

      +                placeholder="Search..."

      +                value={searchTerm}

      +                onFocus={() => setIsSearchFocused(true)}

      +                onBlur={() => setIsSearchFocused(false)}

      +                onChange={(e) => setSearchTerm(e.target.value)}

      +                className={cn(

      +                  "pl-9 pr-4 py-2 h-10 border-none rounded-lg bg-card
      focus:outline-none focus:ring-2 focus:ring-primary
      focus:border-transparent transition-all duration-300 ease-in-out w-full",

      +                  isSearchFocused ? 'bg-background' : 'w-48'

      +                )}

      +              />

      +            </div>

      +             <button className="h-10 w-10 flex-shrink-0 flex items-center
      justify-center hover:bg-accent rounded-full transition-colors">

      +              <Filter className="w-5 h-5" />

      +            </button>

      +             <button className="bg-primary text-primary-foreground px-4
      py-2 rounded-full hover:bg-primary/90 transition-colors flex items-center
      gap-2 h-10 flex-shrink-0">

      +              <Plus className="w-5 h-5" />

      +              <span className={cn(isSearchFocused ? 'hidden sm:inline' :
      'inline')}>New Project</span>

      +            </button>

      +          </div>

      +        )}

      +        

      +        {/* Page-specific: Move to side pane */}

      +        <div className={cn('flex items-center', isSearchFocused &&
      activePage === 'dashboard' ? 'hidden md:flex' : '')}>

      +          {activePage === 'dashboard' && (

      +            <button onClick={handleDashboardMoveToSidePane}
      className="h-10 w-10 flex items-center justify-center hover:bg-accent
      rounded-full transition-colors" title="Move to Side Pane"><PanelRight
      className="w-5 h-5" /></button>

      +          )}

      +          {activePage === 'settings' && (

      +            <button onClick={handleSettingsMoveToSidePane}
      className="h-10 w-10 flex items-center justify-center hover:bg-accent
      rounded-full transition-colors" title="Move to Side Pane"><PanelRight
      className="w-5 h-5" /></button>

      +          )}

      +        </div>

      +

      +        {/* Separator */}

      +        <div className={cn(

      +          'w-px h-6 bg-border mx-2', 

      +          (activePage !== 'dashboard' && activePage !== 'settings') ||
      (isSearchFocused && activePage === 'dashboard') ? 'hidden' : ''

      +        )} />

      +
               {/* Quick Actions */}
      -        <button

      -          className="h-10 w-10 flex items-center justify-center
      rounded-full hover:bg-accent transition-colors group"

      -          title="Command Palette (Ctrl+K)"

      -        >

      -          <Command className="w-5 h-5 group-hover:scale-110
      transition-transform" />

      -        </button>

      +        <div className={cn('flex items-center gap-3', isSearchFocused &&
      activePage === 'dashboard' ? 'hidden lg:flex' : '')}>

      +

      +          <button

      +            className="h-10 w-10 flex items-center justify-center
      rounded-full hover:bg-accent transition-colors group"

      +            title="Command Palette (Ctrl+K)"

      +          >

      +            <Command className="w-5 h-5 group-hover:scale-110
      transition-transform" />

      +          </button>
       
               <button
                 className="h-10 w-10 flex items-center justify-center rounded-full hover:bg-accent transition-colors group"
      @@ -80,9 +152,6 @@
               >
                 <Zap className="w-5 h-5 group-hover:scale-110 transition-transform" />
               </button>
      -

      -        <div className="w-px h-6 bg-border mx-2" />
       
               {/* Body State Controls */}
               <button
      @@ -124,6 +193,8 @@
               >
                 <Settings className="w-5 h-5 group-hover:rotate-90 transition-transform duration-300" />
               </button>
      +        </div>
             </div>
           </div>
         )
       }

    patchStrategy: standard-diff
snapshot:
  src/store/appStore.ts: >-
    import { create } from 'zustand'

    import { persist } from 'zustand/middleware'

    import { SIDEBAR_STATES, BODY_STATES, type SidebarState, type BodyState }
    from '@/lib/utils'


    export type ActivePage = 'dashboard' | 'settings';


    interface AppState {
      // UI States
      sidebarState: SidebarState
      bodyState: BodyState
      isDarkMode: boolean
      sidePaneContent: 'details' | 'settings' | 'main'
      activePage: ActivePage
      sidebarWidth: number
      rightPaneWidth: number
      isResizing: boolean
      isResizingRightPane: boolean
      isTopBarVisible: boolean
      
      // User Preferences
      autoExpandSidebar: boolean
      reducedMotion: boolean
      compactMode: boolean
      primaryColor: string
      
      // Actions
      setSidebarState: (state: SidebarState) => void
      setBodyState: (state: BodyState) => void
      toggleDarkMode: () => void
      setActivePage: (page: ActivePage) => void
      setSidebarWidth: (width: number) => void
      setRightPaneWidth: (width: number) => void
      setIsResizing: (resizing: boolean) => void
      setIsResizingRightPane: (resizing: boolean) => void
      setTopBarVisible: (visible: boolean) => void
      setAutoExpandSidebar: (auto: boolean) => void
      setReducedMotion: (reduced: boolean) => void
      setCompactMode: (compact: boolean) => void
      setPrimaryColor: (color: string) => void
      
      // Composite Actions
      toggleSidebar: () => void
      hideSidebar: () => void
      showSidebar: () => void
      peekSidebar: () => void
      toggleFullscreen: () => void
      openSidePane: (content: 'details' | 'settings' | 'main') => void
      closeSidePane: () => void
      resetToDefaults: () => void
    }


    const defaultState = {
      sidebarState: SIDEBAR_STATES.EXPANDED as SidebarState,
      bodyState: BODY_STATES.NORMAL as BodyState,
      sidePaneContent: 'details' as const,
      activePage: 'dashboard' as ActivePage,
      isDarkMode: false,
      sidebarWidth: 280,
      rightPaneWidth: typeof window !== 'undefined' ? Math.max(300, Math.round(window.innerWidth * 0.6)) : 400,
      isResizing: false,
      isResizingRightPane: false,
      isTopBarVisible: true,
      autoExpandSidebar: true,
      reducedMotion: false,
      compactMode: false,
      primaryColor: '220 84% 60%',
    }


    export const useAppStore = create<AppState>()(
      persist(
        (set, get) => ({
          ...defaultState,
          
          // Basic setters
          sidePaneContent: 'details',
          setSidebarState: (state) => set({ sidebarState: state }),
          setBodyState: (state) => set({ bodyState: state }),
          setActivePage: (page) => set({ activePage: page }),
          toggleDarkMode: () => {
            const newMode = !get().isDarkMode
            set({ isDarkMode: newMode })
            document.documentElement.classList.toggle('dark', newMode)
          },
          setSidebarWidth: (width) => set({ sidebarWidth: Math.max(200, Math.min(500, width)) }),
          setRightPaneWidth: (width) => set({ rightPaneWidth: Math.max(300, Math.min(window.innerWidth * 0.8, width)) }),
          setIsResizing: (resizing) => set({ isResizing: resizing }),
          setIsResizingRightPane: (resizing) => set({ isResizingRightPane: resizing }),
          setTopBarVisible: (visible) => set({ isTopBarVisible: visible }),
          setAutoExpandSidebar: (auto) => set({ autoExpandSidebar: auto }),
          setReducedMotion: (reduced) => set({ reducedMotion: reduced }),
          setCompactMode: (compact) => set({ compactMode: compact }),
          setPrimaryColor: (color) => set({ primaryColor: color }),
          
          // Composite actions
          toggleSidebar: () => {
            const current = get().sidebarState
            if (current === SIDEBAR_STATES.HIDDEN) {
              set({ sidebarState: SIDEBAR_STATES.COLLAPSED })
            } else if (current === SIDEBAR_STATES.COLLAPSED) {
              set({ sidebarState: SIDEBAR_STATES.EXPANDED })
            } else if (current === SIDEBAR_STATES.EXPANDED) {
              set({ sidebarState: SIDEBAR_STATES.COLLAPSED })
            }
          },
          
          hideSidebar: () => set({ sidebarState: SIDEBAR_STATES.HIDDEN }),
          showSidebar: () => set({ sidebarState: SIDEBAR_STATES.EXPANDED }),
          peekSidebar: () => set({ sidebarState: SIDEBAR_STATES.PEEK }),
          
          toggleFullscreen: () => {
            const current = get().bodyState
            set({ 
              bodyState: current === BODY_STATES.FULLSCREEN ? BODY_STATES.NORMAL : BODY_STATES.FULLSCREEN 
            })
          },
          
          openSidePane: (content) => {
            const { bodyState, sidePaneContent } = get()
            if (bodyState === BODY_STATES.SIDE_PANE && sidePaneContent === content) {
              // If it's open with same content, close it.
              set({ bodyState: BODY_STATES.NORMAL });
            } else {
              // If closed, or different content, open with new content.
              set({ bodyState: BODY_STATES.SIDE_PANE, sidePaneContent: content });
            }
          },
          closeSidePane: () => {
            set({ bodyState: BODY_STATES.NORMAL })
          },
          
          resetToDefaults: () => {
            set(defaultState)
            // Also reset dark mode class on html element
            if (defaultState.isDarkMode) {
              document.documentElement.classList.add('dark')
            } else {
              document.documentElement.classList.remove('dark')
            }
          },
        }),
        {
          name: 'app-preferences',
          partialize: (state) => ({
            sidebarState: state.sidebarState,
            bodyState: state.bodyState,
            activePage: state.activePage,
            sidePaneContent: state.sidePaneContent,
            isDarkMode: state.isDarkMode,
            sidebarWidth: state.sidebarWidth,
            rightPaneWidth: state.rightPaneWidth,
            autoExpandSidebar: state.autoExpandSidebar,
            reducedMotion: state.reducedMotion,
            compactMode: state.compactMode,
            primaryColor: state.primaryColor,
          }),
        }
      )
    )


    // Initialize dark mode on load

    if (typeof window !== 'undefined') {
      const stored = localStorage.getItem('app-preferences')
      if (stored) {
        const parsed = JSON.parse(stored)
        if (parsed.state?.isDarkMode) {
          document.documentElement.classList.add('dark')
        }
      }
    }
  src/components/DashboardContent.tsx: >-
    import { useRef, useEffect, useState } from 'react'

    import { gsap } from 'gsap'

    import { 
      BarChart3, 
      TrendingUp, 
      Users, 
      DollarSign, 
      Activity,
      Calendar,
      Clock,
      MessageSquare,
      FileText,
      Star,
      ChevronRight,
      Plus,
      Filter,
      Search,
      MoreVertical,
      ArrowDown,
      PanelRight
    } from 'lucide-react'

    import { cn } from '@/lib/utils'

    import { DemoContent } from './DemoContent'

    import { useAppStore } from '@/store/appStore'

    import { BODY_STATES } from '@/lib/utils'


    interface StatsCard {
      title: string
      value: string
      change: string
      trend: 'up' | 'down'
      icon: React.ReactNode
    }


    interface ActivityItem {
      id: string
      type: 'comment' | 'file' | 'meeting' | 'task'
      title: string
      description: string
      time: string
      user: string
    }


    const statsCards: StatsCard[] = [
      {
        title: "Total Revenue",
        value: "$45,231.89",
        change: "+20.1%",
        trend: "up",
        icon: <DollarSign className="w-5 h-5" />
      },
      {
        title: "Active Users",
        value: "2,350",
        change: "+180.1%",
        trend: "up",
        icon: <Users className="w-5 h-5" />
      },
      {
        title: "Conversion Rate",
        value: "12.5%",
        change: "+19%",
        trend: "up",
        icon: <TrendingUp className="w-5 h-5" />
      },
      {
        title: "Performance",
        value: "573ms",
        change: "-5.3%",
        trend: "down",
        icon: <Activity className="w-5 h-5" />
      }
    ]


    const recentActivity: ActivityItem[] = [
      {
        id: "1",
        type: "comment",
        title: "New comment on Project Alpha",
        description: "Sarah Johnson added a comment to the design review",
        time: "2 minutes ago",
        user: "SJ"
      },
      {
        id: "2",
        type: "file",
        title: "Document uploaded",
        description: "quarterly-report.pdf was uploaded to Documents",
        time: "15 minutes ago",
        user: "MD"
      },
      {
        id: "3",
        type: "meeting",
        title: "Meeting scheduled",
        description: "Weekly standup meeting scheduled for tomorrow 9 AM",
        time: "1 hour ago",
        user: "RW"
      },
      {
        id: "4",
        type: "task",
        title: "Task completed",
        description: "UI wireframes for mobile app completed",
        time: "2 hours ago",
        user: "AL"
      }
    ]


    interface DashboardContentProps {
      isInSidePane?: boolean;
    }


    export function DashboardContent({ isInSidePane = false }:
    DashboardContentProps) {
        const contentRef = useRef<HTMLDivElement>(null)
        const cardsRef = useRef<(HTMLDivElement | null)[]>([])
        const [searchTerm, setSearchTerm] = useState("")
        const [showScrollToBottom, setShowScrollToBottom] = useState(false)
        const { bodyState, openSidePane, setTopBarVisible } = useAppStore()
        const lastScrollTop = useRef(0);

        const handleScroll = () => {
          if (!contentRef.current) return
          const { scrollTop, scrollHeight, clientHeight } = contentRef.current
          
          // Auto-hide top bar logic
          if (!isInSidePane) {
            if (scrollTop > lastScrollTop.current && scrollTop > 200) {
              setTopBarVisible(false);
            } else if (scrollTop < lastScrollTop.current || scrollTop <= 0) {
              setTopBarVisible(true);
            }
          }
          lastScrollTop.current = scrollTop <= 0 ? 0 : scrollTop;

          // Show if scrolled down and not at the bottom
          setShowScrollToBottom(scrollTop > 200 && scrollTop < scrollHeight - clientHeight - 200)
        }

        const scrollToBottom = () => {
          contentRef.current?.scrollTo({
            top: contentRef.current.scrollHeight,
            behavior: 'smooth'
          })
        }

        // Animate content based on body state
        useEffect(() => {
          if (!contentRef.current) return

          const content = contentRef.current
          const cards = cardsRef.current.filter(Boolean)

          switch (bodyState) {
            case BODY_STATES.FULLSCREEN:
              gsap.to(content, {
                scale: 1.02,
                duration: 0.4,
                ease: "power3.out"
              })
              break
            default:
              gsap.to(content, {
                scale: 1,
                duration: 0.4,
                ease: "power3.out"
              })
              break
          }

          // Stagger animation for cards
          gsap.fromTo(cards, 
            { y: 20, opacity: 0 },
            { 
              y: 0, 
              opacity: 1, 
              duration: 0.6,
              stagger: 0.1,
              ease: "power3.out"
            }
          )

        }, [bodyState])

        const getTypeIcon = (type: ActivityItem['type']) => {
          switch (type) {
            case 'comment':
              return <MessageSquare className="w-4 h-4" />
            case 'file':
              return <FileText className="w-4 h-4" />
            case 'meeting':
              return <Calendar className="w-4 h-4" />
            case 'task':
              return <Star className="w-4 h-4" />
            default:
              return <Activity className="w-4 h-4" />
          }
        }

        return (
            <div 
              ref={contentRef}
              className="h-full overflow-y-auto space-y-8 p-6 lg:px-12"
              onScroll={handleScroll}
            >
              {/* Header */}
              <div className="flex items-center justify-between">
                <div>
                  <h1 className="text-3xl font-bold tracking-tight">Dashboard</h1>
                  <p className="text-muted-foreground">
                    Welcome to the amazing app shell demo! Explore all the features and customization options.
                  </p>
                </div>
                
                <div className="flex items-center gap-2">
                  <div className="relative">
                    <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4" />
                    <input
                      type="text"
                      placeholder="Search..."
                      value={searchTerm}
                      onChange={(e) => setSearchTerm(e.target.value)}
                      className="pl-9 pr-4 py-2 border-none rounded-lg bg-card focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent"
                    />
                  </div>
                  <button className="h-10 w-10 flex items-center justify-center hover:bg-accent rounded-full transition-colors">
                    <Filter className="w-5 h-5" />
                  </button>
                  <button className="bg-primary text-primary-foreground px-4 py-2 rounded-full hover:bg-primary/90 transition-colors flex items-center gap-2 h-10">
                    <Plus className="w-5 h-5" />
                    <span>New Project</span>
                  </button>
                  {!isInSidePane && (
                    <button
                      onClick={() => openSidePane('main')}
                      className="h-10 w-10 flex items-center justify-center hover:bg-accent rounded-full transition-colors" title="Move to Side Pane">
                      <PanelRight className="w-5 h-5" />
                    </button>
                  )}
                </div>
              </div>
                {/* Stats Cards */}
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
                  {statsCards.map((stat, index) => (
                    <div
                    key={stat.title}
                    ref={el => cardsRef.current[index] = el}
                    className="bg-card p-6 rounded-2xl border border-border/50 hover:border-primary/30 transition-all duration-300 group cursor-pointer"
                  >
                    <div className="flex items-center justify-between">
                      <div className="p-3 bg-primary/10 rounded-full group-hover:bg-primary/20 transition-colors">
                        {stat.icon}
                      </div>
                      <div className={cn(
                        "text-sm font-medium",
                        stat.trend === 'up' ? "text-green-600" : "text-red-600"
                      )}>
                        {stat.change}
                      </div>
                    </div>
                    <div className="mt-4">
                      <h3 className="text-2xl font-bold">{stat.value}</h3>
                      <p className="text-sm text-muted-foreground mt-1">{stat.title}</p>
                    </div>
                  </div>
                  ))}
                </div>

                {/* Demo Content */}
                <DemoContent />

                {/* Main Content Grid */}
                <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
                {/* Chart Area */}
                <div className="lg:col-span-2 space-y-6">
                  {/* Analytics Chart */}
                  <div className="bg-card p-6 rounded-2xl border border-border/50">
                    <div className="flex items-center justify-between mb-6">
                      <h3 className="text-lg font-semibold">Analytics Overview</h3>
                      <button className="h-8 w-8 flex items-center justify-center hover:bg-accent rounded-full transition-colors">
                        <MoreVertical className="w-5 h-5" />
                      </button>
                    </div>
                    
                    {/* Mock Chart */}
                    <div className="h-64 bg-gradient-to-br from-primary/10 to-transparent rounded-xl flex items-center justify-center border border-border/50">
                      <div className="text-center">
                        <BarChart3 className="w-12 h-12 text-primary mx-auto mb-2" />
                        <p className="text-muted-foreground">Chart visualization would go here</p>
                      </div>
                    </div>
                  </div>

                  {/* Recent Projects */}
                  <div className="bg-card p-6 rounded-2xl border border-border/50">
                    <div className="flex items-center justify-between mb-6">
                      <h3 className="text-lg font-semibold">Recent Projects</h3>
                      <button className="text-primary hover:text-primary/80 text-sm font-medium flex items-center gap-1">
                        View All
                        <ChevronRight className="w-4 h-4" />
                      </button>
                    </div>
                    
                    <div className="space-y-4">
                      {[
                        { name: "E-commerce Platform", progress: 75, team: 5, deadline: "Dec 15" },
                        { name: "Mobile App Redesign", progress: 45, team: 3, deadline: "Jan 20" },
                        { name: "Marketing Website", progress: 90, team: 4, deadline: "Dec 5" }
                      ].map((project) => (
                        <div key={project.name} className="p-4 bg-accent/30 rounded-xl hover:bg-accent/50 transition-colors cursor-pointer">
                          <div className="flex items-center justify-between mb-2">
                            <h4 className="font-medium">{project.name}</h4>
                            <span className="text-sm text-muted-foreground">{project.progress}%</span>
                          </div>
                          <div className="w-full bg-muted rounded-full h-2 mb-3">
                            <div 
                              className="bg-primary h-2 rounded-full transition-all duration-500"
                              style={{ width: `${project.progress}%` }}
                            />
                          </div>
                          <div className="flex items-center justify-between text-sm text-muted-foreground">
                            <span>{project.team} team members</span>
                            <span>Due {project.deadline}</span>
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                </div>

                {/* Sidebar Content */}
                <div className="space-y-6">
                  {/* Quick Actions */}
                  <div className="bg-card p-6 rounded-2xl border border-border/50">
                    <h3 className="text-lg font-semibold mb-4">Quick Actions</h3>
                    <div className="space-y-3">
                      {[
                        { icon: <FileText className="w-4 h-4" />, label: "Create Document", color: "bg-blue-500/10 text-blue-600" },
                        { icon: <Calendar className="w-4 h-4" />, label: "Schedule Meeting", color: "bg-green-500/10 text-green-600" },
                        { icon: <Users className="w-4 h-4" />, label: "Invite Team", color: "bg-purple-500/10 text-purple-600" },
                        { icon: <BarChart3 className="w-4 h-4" />, label: "View Reports", color: "bg-orange-500/10 text-orange-600" }
                      ].map((action) => (
                        <button
                          key={action.label}
                          className="w-full flex items-center gap-3 p-3 hover:bg-accent rounded-lg transition-colors text-left"
                        >
                          <div className={cn("p-2 rounded-full", action.color)}>
                            {action.icon}
                          </div>
                          <span className="font-medium">{action.label}</span>
                        </button>
                      ))}
                    </div>
                  </div>

                  {/* Recent Activity */}
                  <div className="bg-card p-6 rounded-2xl border border-border/50">
                    <h3 className="text-lg font-semibold mb-4">Recent Activity</h3>
                    <div className="space-y-4">
                      {recentActivity.map((activity) => (
                        <div key={activity.id} className="flex items-start gap-3 p-3 hover:bg-accent/30 rounded-xl transition-colors cursor-pointer">
                          <div className="p-2 bg-primary/10 rounded-full flex-shrink-0">
                            {getTypeIcon(activity.type)}
                          </div>
                          <div className="flex-1 min-w-0">
                            <h4 className="font-medium text-sm mb-1">{activity.title}</h4>
                            <p className="text-xs text-muted-foreground mb-2">{activity.description}</p>
                            <div className="flex items-center gap-2 text-xs text-muted-foreground">
                              <Clock className="w-3 h-3" />
                              <span>{activity.time}</span>
                              <div className="w-5 h-5 bg-primary rounded-full flex items-center justify-center text-primary-foreground text-xs font-medium">
                                {activity.user}
                              </div>
                            </div>
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                </div>
              </div>
              {showScrollToBottom && (
                <button
                  onClick={scrollToBottom}
                  className="fixed bottom-8 right-8 w-12 h-12 bg-primary text-primary-foreground rounded-full flex items-center justify-center shadow-lg hover:bg-primary/90 transition-all animate-fade-in z-[51]"
                  style={{ animation: 'bounce 2s infinite' }}
                  title="Scroll to bottom"
                >
                  <ArrowDown className="w-6 h-6" />
                </button>
              )}
          </div>
        )
    }
  src/components/SettingsPage.tsx: |-
    import { useRef } from 'react'
    import { PanelRight } from 'lucide-react'
    import { SettingsContent } from './SettingsContent'
    import { useAppStore } from '@/store/appStore'

    export function SettingsPage() {
      const { openSidePane, setActivePage, setTopBarVisible } = useAppStore()
      const scrollRef = useRef<HTMLDivElement>(null)
      const lastScrollTop = useRef(0)

      const handleMoveToSidePane = () => {
        openSidePane('settings');
        setActivePage('dashboard');
      }

      return (
        <div
          ref={scrollRef}
          className="h-full overflow-y-auto p-6 lg:px-12 space-y-8"
          onScroll={() => {
            if (!scrollRef.current) return
            const { scrollTop } = scrollRef.current
            
            if (scrollTop > lastScrollTop.current && scrollTop > 200) {
              setTopBarVisible(false);
            } else if (scrollTop < lastScrollTop.current || scrollTop <= 0) {
              setTopBarVisible(true);
            }
            
            lastScrollTop.current = scrollTop <= 0 ? 0 : scrollTop;
          }}
        >
          {/* Header */}
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-3xl font-bold tracking-tight">Settings</h1>
              <p className="text-muted-foreground">
                Customize your experience. Changes are saved automatically.
              </p>
            </div>
            
            <div className="flex items-center gap-2">
                <button
                  onClick={handleMoveToSidePane}
                  className="h-10 w-10 flex items-center justify-center hover:bg-accent rounded-full transition-colors" title="Move to Side Pane">
                  <PanelRight className="w-5 h-5" />
                </button>
            </div>
          </div>

          <SettingsContent />
        </div>
      )
    }
  src/components/TopBar.tsx: |-
    import { 
      Menu, 
      Maximize, 
      Minimize, 
      Moon, 
      Sun,
      Settings,
      Command,
      Zap,
      ChevronRight
    } from 'lucide-react'
    import { cn } from '@/lib/utils'
    import { BODY_STATES } from '@/lib/utils'
    import { useAppStore } from '@/store/appStore'

    interface TopBarProps {
      onToggleSidebar: () => void
      onToggleFullscreen: () => void
      onToggleDarkMode: () => void
    }

    export function TopBar({
      onToggleSidebar,
      onToggleFullscreen,
      onToggleDarkMode
    }: TopBarProps) {
      const { 
        bodyState, 
        isDarkMode, 
        openSidePane,
        sidePaneContent,
        activePage,
        setActivePage,
      } = useAppStore()

      const handleSettingsClick = () => {
        const isSettingsInSidePane = bodyState === BODY_STATES.SIDE_PANE && sidePaneContent === 'settings'

        // If we're on the settings page and it's not in the side pane, treat this as a "minimize" action.
        if (activePage === 'settings' && !isSettingsInSidePane) {
          openSidePane('settings');
          setActivePage('dashboard');
        } else {
          // In all other cases (on dashboard page, or settings already in pane),
          // just toggle the settings side pane.
          openSidePane('settings');
        }
      }

      return (
        <div className="h-20 bg-card/80 backdrop-blur-sm border-b border-border flex items-center justify-between px-6 z-50">
          {/* Left Section - Sidebar Controls & Breadcrumbs */}
          <div className="flex items-center gap-4">
            {/* Sidebar Controls */}
            <button
              onClick={onToggleSidebar}
              className={cn(
                "h-10 w-10 flex items-center justify-center rounded-full hover:bg-accent transition-colors"
              )}
              title="Toggle Sidebar"
            >
              <Menu className="w-5 h-5" />
            </button>

            {/* Breadcrumbs */}
            <div className="hidden md:flex items-center gap-2 text-sm">
              <a href="#" className="text-muted-foreground hover:text-foreground transition-colors">Home</a>
              <ChevronRight className="w-4 h-4 text-muted-foreground" />
              <span className="font-medium text-foreground capitalize">{activePage}</span>
            </div>
          </div>

          {/* Right Section - View Controls */}
          <div className="flex items-center gap-3">
            {/* Quick Actions */}
            <button
              className="h-10 w-10 flex items-center justify-center rounded-full hover:bg-accent transition-colors group"
              title="Command Palette (Ctrl+K)"
            >
              <Command className="w-5 h-5 group-hover:scale-110 transition-transform" />
            </button>

            <button
              className="h-10 w-10 flex items-center justify-center rounded-full hover:bg-accent transition-colors group"
              title="Quick Actions"
            >
              <Zap className="w-5 h-5 group-hover:scale-110 transition-transform" />
            </button>

            <div className="w-px h-6 bg-border mx-2" />

            {/* Body State Controls */}
            <button
              onClick={() => openSidePane('details')}
              className={cn(
                "h-10 w-10 flex items-center justify-center rounded-full hover:bg-accent transition-colors group",
                bodyState === BODY_STATES.SIDE_PANE && sidePaneContent === 'details' && "bg-accent"
              )}
              title="Toggle Side Pane"
            >
              <div className="w-5 h-5 flex group-hover:scale-110 transition-transform">
                <div className="w-1/2 h-full bg-current opacity-60 rounded-l-sm" />
                <div className="w-1/2 h-full bg-current rounded-r-sm" />
              </div>
            </button>

            <button
              onClick={onToggleFullscreen}
              className={cn(
                "h-10 w-10 flex items-center justify-center rounded-full hover:bg-accent transition-colors group",
                bodyState === BODY_STATES.FULLSCREEN && "bg-accent"
              )}
              title="Toggle Fullscreen"
            >
              {bodyState === BODY_STATES.FULLSCREEN ? (
                <Minimize className="w-5 h-5 group-hover:scale-110 transition-transform" />
              ) : (
                <Maximize className="w-5 h-5 group-hover:scale-110 transition-transform" />
              )}
            </button>

            <div className="w-px h-6 bg-border mx-2" />

            {/* Theme and Settings */}
            <button
              onClick={onToggleDarkMode}
              className="h-10 w-10 flex items-center justify-center rounded-full hover:bg-accent transition-colors group"
              title="Toggle Dark Mode"
            >
              {isDarkMode ? (
                <Sun className="w-5 h-5 group-hover:scale-110 transition-transform" />
              ) : (
                <Moon className="w-5 h-5 group-hover:scale-110 transition-transform" />
              )}
            </button>

            <button
              onClick={handleSettingsClick}
              className="h-10 w-10 flex items-center justify-center rounded-full hover:bg-accent transition-colors group"
              title="Settings"
            >
              <Settings className="w-5 h-5 group-hover:rotate-90 transition-transform duration-300" />
            </button>
          </div>
        </div>
      )
    }
approved: true
linesAdded: null
linesRemoved: null
linesDifference: null
gitCommittedAt: null
status: committed
id: 49
