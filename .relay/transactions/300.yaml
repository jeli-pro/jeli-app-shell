uuid: d8e5e665-226e-44c3-b789-8d76901f1624
projectId: jeli-app-shell
createdAt: '2025-10-15T00:36:03.809Z'
gitCommitMsg: >-
  feat(messaging): make contact profile pane hideable

  Introduces functionality to toggle the visibility of the contact profile pane
  on the messaging page. When hidden, the message thread is displayed in its
  place.

  - Adds `isMessagingProfileVisible` state and a toggle action to
  `appShell.store`. - Adds a "Hide" button to the `ContactProfile` component. -
  Adds a "Show" button to the `MessageThread` component header. - Updates
  `MessagingPage` to conditionally render either the profile or the thread based
  on the new state.
promptSummary: >-
  Make the contact profile pane in the messaging page hideable, showing the
  message thread in its place.
reasoning:
  - >-
    Of course. I will execute the plan to make the contact profile pane
    hideable, revealing the message thread. This will be done in a single
    transaction by modifying the necessary files.
  - >-
    First, I'll update the `appShell` store to manage the visibility state of
    the messaging profile pane. This involves adding a new boolean state
    `isMessagingProfileVisible` and a `toggleMessagingProfileVisibility` action.
  - >-
    Next, I'll add a button to the `ContactProfile` component to allow users to
    hide it. This button will be positioned in the top-right corner.
  - >-
    To provide a way to re-open the profile, I will add a corresponding button
    to the `MessageThread` header. This ensures the user can toggle the view
    back and forth.
  - >-
    Finally, I'll update the `MessagingPage` layout to conditionally render
    either the `ContactProfile` or the `MessageThread` based on the new state
    from the `appShell` store.
operations:
  - type: write
    path: src/store/appShell.store.ts
    content: >+
      --- src/store/appShell.store.ts

      +++ src/store/appShell.store.ts

      @@ -19,6 +19,7 @@
         isResizingRightPane: boolean;
         isResizingMessagingList: boolean;
         isMessagingListCollapsed: boolean;
      +  isMessagingProfileVisible: boolean;
         isTopBarVisible: boolean;
         autoExpandSidebar: boolean;
         reducedMotion: boolean;
      @@ -47,6 +48,7 @@
           setIsResizingRightPane: (payload: boolean) => void;
           setIsResizingMessagingList: (payload: boolean) => void;
           toggleMessagingListCollapsed: () => void;
      +    toggleMessagingProfileVisibility: () => void;
           setTopBarVisible: (payload: boolean) => void;
           setAutoExpandSidebar: (payload: boolean) => void;
           setReducedMotion: (payload: boolean) => void;
      @@ -76,6 +78,7 @@
         isResizingRightPane: false,
         isResizingMessagingList: false,
         isMessagingListCollapsed: false,
      +  isMessagingProfileVisible: true,
         isTopBarVisible: true,
         autoExpandSidebar: true,
         reducedMotion: false,
      @@ -115,6 +118,7 @@
         setIsResizingRightPane: (payload) => set({ isResizingRightPane: payload }),
         setIsResizingMessagingList: (payload) => set({ isResizingMessagingList: payload }),
         toggleMessagingListCollapsed: () => set((state) => ({ isMessagingListCollapsed: !state.isMessagingListCollapsed })),
      +  toggleMessagingProfileVisibility: () => set((state) => ({
      isMessagingProfileVisible: !state.isMessagingProfileVisible })),
         setTopBarVisible: (payload) => set({ isTopBarVisible: payload }),
         setAutoExpandSidebar: (payload) => set({ autoExpandSidebar: payload }),
         setReducedMotion: (payload) => set({ reducedMotion: payload }),

    patchStrategy: standard-diff
  - type: write
    path: src/pages/Messaging/components/ContactProfile.tsx
    content: >+
      --- src/pages/Messaging/components/ContactProfile.tsx

      +++ src/pages/Messaging/components/ContactProfile.tsx

      @@ -1,13 +1,15 @@
       import React, { useState, useMemo } from 'react';
       import { format } from 'date-fns';
      -import { Mail, Phone, Sparkles, Reply, ThumbsUp, ThumbsDown, Copy,
      Briefcase, StickyNote, PhoneCall, CheckSquare, Calendar, Send } from
      'lucide-react';

      +import { Mail, Phone, Sparkles, Reply, ThumbsUp, ThumbsDown, Copy,
      Briefcase, StickyNote, PhoneCall, CheckSquare, Calendar, Send,
      PanelRightClose } from 'lucide-react';
       import { toast } from 'sonner';
       import { useMessagingStore } from '../store/messaging.store';
      +import { useAppShellStore } from '@/store/appShell.store';
       import type { ActivityEvent, ActivityEventType } from '../types';
       import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
       import { Badge } from '@/components/ui/badge';
       import { Card, CardContent } from '@/components/ui/card';
       import { Button } from '@/components/ui/button';
       import { Textarea } from '@/components/ui/textarea';
       import { AnimatedTabs } from '@/components/ui/animated-tabs';
       import { TechOrbitDisplay } from '@/components/effects/OrbitingCircles';
      @@ -23,6 +25,7 @@
         const conversation = useMessagingStore(state => 
           conversationId ? state.getConversationById(conversationId) : undefined
         );
      +  const { toggleMessagingProfileVisibility } =
      useAppShellStore.getState();
       
         const tabs = useMemo(() => [
           { id: 'insights', label: 'AI' },
      @@ -66,7 +69,14 @@
       
         return (
           <div className="h-full flex-1 flex flex-col bg-background overflow-y-auto">
      -      <div className="p-6 space-y-6">

      +      <div className="p-6 space-y-6 relative">

      +        <Button 

      +          variant="ghost" 

      +          size="icon" 

      +          className="absolute top-4 right-4 h-8 w-8" 

      +          onClick={toggleMessagingProfileVisibility}

      +          title="Hide contact details"

      +        ><PanelRightClose className="w-5 h-5" /></Button>
               {/* Contact Header */}
               <div className="flex flex-col items-center text-center">
                 <Avatar className="h-24 w-24 mb-4 border-4 border-background ring-2 ring-primary">

    patchStrategy: standard-diff
  - type: write
    path: src/pages/Messaging/components/MessageThread.tsx
    content: >+
      --- src/pages/Messaging/components/MessageThread.tsx

      +++ src/pages/Messaging/components/MessageThread.tsx

      @@ -1,9 +1,10 @@
       import React from 'react';
      -import { Paperclip, SendHorizontal, Smile } from 'lucide-react';

      +import { Paperclip, SendHorizontal, Smile, PanelLeftClose } from
      'lucide-react';
       
       import { useMessagingStore } from '../store/messaging.store';
       import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
       import { Input } from '@/components/ui/input';
      +import { useAppShellStore } from '@/store/appShell.store';
       import { Button } from '@/components/ui/button';
       import { ChannelIcon } from './ChannelIcons';
       import { cn } from '@/lib/utils';
      @@ -16,6 +17,7 @@
         const conversation = useMessagingStore(state =>
           conversationId ? state.getConversationById(conversationId) : undefined
         );
      +  const { toggleMessagingProfileVisibility } =
      useAppShellStore.getState();
         
         if (!conversationId || !conversation) {
           return (
      @@ -42,7 +44,13 @@
                   {contact.online ? 'Online' : 'Offline'}
                 </p>
               </div>
      -        <ChannelIcon channel={conversation.channel} className="w-5 h-5"
      />

      +        <div className="flex items-center gap-2">

      +          <ChannelIcon channel={conversation.channel} className="w-5 h-5"
      />

      +          <Button variant="ghost" size="icon" className="h-8 w-8"
      onClick={toggleMessagingProfileVisibility} title="Show contact details">

      +            <PanelLeftClose className="w-5 h-5" />

      +          </Button>

      +        </div>
             </div>
       
             {/* Messages */}

    patchStrategy: standard-diff
  - type: write
    path: src/pages/Messaging/index.tsx
    content: >+
      --- src/pages/Messaging/index.tsx

      +++ src/pages/Messaging/index.tsx

      @@ -2,6 +2,7 @@
       import { useParams } from "react-router-dom";
       import { ConversationList } from "./components/ConversationList";
       import { ContactProfile } from "./components/ContactProfile";
      +import { MessageThread } from "./components/MessageThread";
       import { cn } from "@/lib/utils";
       import { useAppShellStore } from "@/store/appShell.store";
       import { useResizableMessagingList } from "@/hooks/useResizablePanes.hook";
      @@ -11,10 +12,11 @@
         const containerRef = useRef<HTMLDivElement>(null);
         const COLLAPSED_WIDTH = 80;
       
      -  const { messagingListWidth, isResizingMessagingList,
      isMessagingListCollapsed } = useAppShellStore(s => ({

      +  const { messagingListWidth, isResizingMessagingList,
      isMessagingListCollapsed, isMessagingProfileVisible } = useAppShellStore(s
      => ({
           messagingListWidth: s.messagingListWidth,
           isResizingMessagingList: s.isResizingMessagingList,
           isMessagingListCollapsed: s.isMessagingListCollapsed,
      +    isMessagingProfileVisible: s.isMessagingProfileVisible,
         }));
         const { setIsResizingMessagingList } = useAppShellStore.getState();
       
      @@ -39,7 +41,11 @@
                   <div className="w-0.5 h-full bg-border group-hover:bg-primary transition-colors duration-200" />
                 </div>
               )}
      -        <ContactProfile conversationId={conversationId} />

      +        <div className="flex-1 overflow-hidden">

      +          {isMessagingProfileVisible 

      +            ? <ContactProfile conversationId={conversationId} />

      +            : <MessageThread conversationId={conversationId} />

      +          }

      +        </div>
           </div>
         );
       }

    patchStrategy: standard-diff
snapshot:
  src/pages/Messaging/index.tsx: |-
    import React, { useRef } from "react";
    import { useParams } from "react-router-dom";
    import { ConversationList } from "./components/ConversationList";
    import { ContactProfile } from "./components/ContactProfile";
    import { cn } from "@/lib/utils";
    import { useAppShellStore } from "@/store/appShell.store";
    import { useResizableMessagingList } from "@/hooks/useResizablePanes.hook";

    export default function MessagingPage() {
      const { conversationId } = useParams<{ conversationId: string }>();
      const containerRef = useRef<HTMLDivElement>(null);
      const COLLAPSED_WIDTH = 80;

      const { messagingListWidth, isResizingMessagingList, isMessagingListCollapsed } = useAppShellStore(s => ({
        messagingListWidth: s.messagingListWidth,
        isResizingMessagingList: s.isResizingMessagingList,
        isMessagingListCollapsed: s.isMessagingListCollapsed,
      }));
      const { setIsResizingMessagingList } = useAppShellStore.getState();

      useResizableMessagingList(containerRef);

      const handleMouseDown = (e: React.MouseEvent<HTMLDivElement>) => {
        if (isMessagingListCollapsed) return;
        e.preventDefault();
        setIsResizingMessagingList(true);
      };

      const listWidth = isMessagingListCollapsed ? COLLAPSED_WIDTH : messagingListWidth;

      return (
        <div ref={containerRef} className={cn(
          "h-full w-full flex bg-background", 
          isResizingMessagingList && !isMessagingListCollapsed && "cursor-col-resize select-none"
        )}>
            <div style={{ width: `${listWidth}px` }} className="flex-shrink-0 transition-[width] duration-300 ease-in-out">
              <ConversationList />
            </div>
            {!isMessagingListCollapsed && (
              <div onMouseDown={handleMouseDown} className="w-2 flex-shrink-0 cursor-col-resize group flex items-center justify-center">
                <div className="w-0.5 h-full bg-border group-hover:bg-primary transition-colors duration-200" />
              </div>
            )}
            <ContactProfile conversationId={conversationId} />
        </div>
      );
    }
  src/store/appShell.store.ts: >-
    import { create } from 'zustand';

    import { type ReactElement } from 'react';

    import { SIDEBAR_STATES, BODY_STATES, type SidebarState, type BodyState }
    from '@/lib/utils';


    export type ActivePage = 'dashboard' | 'settings' | 'toaster' |
    'notifications' | 'data-demo' | 'messaging';


    // --- State and Action Types ---


    export interface AppShellState {
      sidebarState: SidebarState;
      bodyState: BodyState;
      sidePaneContent: 'details' | 'settings' | 'main' | 'toaster' | 'notifications' | 'dataDemo' | 'dataItem' | 'messaging';
      sidebarWidth: number;
      sidePaneWidth: number;
      splitPaneWidth: number;
      messagingListWidth: number;
      previousBodyState: BodyState;
      fullscreenTarget: 'main' | 'right' | null;
      isResizing: boolean;
      isResizingRightPane: boolean;
      isResizingMessagingList: boolean;
      isMessagingListCollapsed: boolean;
      isTopBarVisible: boolean;
      autoExpandSidebar: boolean;
      reducedMotion: boolean;
      compactMode: boolean;
      primaryColor: string;
      isCommandPaletteOpen: boolean;
      isDarkMode: boolean;
      appName?: string;
      appLogo?: ReactElement;
      draggedPage: 'dashboard' | 'settings' | 'toaster' | 'notifications' | 'data-demo' | 'messaging' | null;
      dragHoverTarget: 'left' | 'right' | null;
      hoveredPane: 'left' | 'right' | null;
    }


    export interface AppShellActions {
        // Initialization
        init: (config: { appName?: string; appLogo?: ReactElement; defaultSplitPaneWidth?: number }) => void;
        
        // Direct state setters
        setSidebarState: (payload: SidebarState) => void;
        setBodyState: (payload: BodyState) => void;
        setSidePaneContent: (payload: AppShellState['sidePaneContent']) => void;
        setSidebarWidth: (payload: number) => void;
        setSidePaneWidth: (payload: number) => void;
        setSplitPaneWidth: (payload: number) => void;
        setMessagingListWidth: (payload: number) => void;
        setIsResizing: (payload: boolean) => void;
        setFullscreenTarget: (payload: 'main' | 'right' | null) => void;
        setIsResizingRightPane: (payload: boolean) => void;
        setIsResizingMessagingList: (payload: boolean) => void;
        toggleMessagingListCollapsed: () => void;
        setTopBarVisible: (payload: boolean) => void;
        setAutoExpandSidebar: (payload: boolean) => void;
        setReducedMotion: (payload: boolean) => void;
        setCompactMode: (payload: boolean) => void;
        setPrimaryColor: (payload: string) => void;
        setDraggedPage: (payload: AppShellState['draggedPage']) => void;
        setCommandPaletteOpen: (open: boolean) => void;
        toggleDarkMode: () => void;
        setDragHoverTarget: (payload: 'left' | 'right' | null) => void;
        setHoveredPane: (payload: 'left' | 'right' | null) => void;
        
        // Composite actions
        toggleSidebar: () => void;
        hideSidebar: () => void;
        showSidebar: () => void;
        peekSidebar: () => void;
        toggleFullscreen: (target?: 'main' | 'right' | null) => void;
        resetToDefaults: () => void;
    }


    const defaultState: AppShellState = {
      sidebarState: SIDEBAR_STATES.EXPANDED,
      bodyState: BODY_STATES.NORMAL,
      sidePaneContent: 'details',
      sidebarWidth: 280,
      sidePaneWidth: typeof window !== 'undefined' ? Math.max(300, Math.round(window.innerWidth * 0.6)) : 400,
      splitPaneWidth: typeof window !== 'undefined' ? Math.max(300, Math.round(window.innerWidth * 0.35)) : 400,
      messagingListWidth: 384,
      previousBodyState: BODY_STATES.NORMAL,
      fullscreenTarget: null,
      isResizing: false,
      isResizingRightPane: false,
      isResizingMessagingList: false,
      isMessagingListCollapsed: false,
      isTopBarVisible: true,
      autoExpandSidebar: true,
      reducedMotion: false,
      compactMode: false,
      primaryColor: '220 84% 60%',
      isCommandPaletteOpen: false,
      isDarkMode: false,
      appName: 'Jeli App',
      appLogo: undefined,
      draggedPage: null,
      dragHoverTarget: null,
      hoveredPane: null,
    };



    export const useAppShellStore = create<AppShellState &
    AppShellActions>((set, get) => ({
      ...defaultState,

      init: ({ appName, appLogo, defaultSplitPaneWidth }) => set(state => ({
        ...state,
        ...(appName && { appName }),
        ...(appLogo && { appLogo }),
        ...(defaultSplitPaneWidth && { splitPaneWidth: defaultSplitPaneWidth }),
      })),
      
      setSidebarState: (payload) => set({ sidebarState: payload }),
      setBodyState: (payload) => {
        // If we're leaving fullscreen, reset the target and previous state
        if (get().bodyState === BODY_STATES.FULLSCREEN && payload !== BODY_STATES.FULLSCREEN) {
          set({ bodyState: payload, fullscreenTarget: null, previousBodyState: BODY_STATES.NORMAL });
        } else {
          set({ bodyState: payload });
        }
      },
      setSidePaneContent: (payload) => set({ sidePaneContent: payload }),
      setSidebarWidth: (payload) => set({ sidebarWidth: Math.max(200, Math.min(500, payload)) }),
      setSidePaneWidth: (payload) => set({ sidePaneWidth: Math.max(300, Math.min(window.innerWidth * 0.8, payload)) }),
      setSplitPaneWidth: (payload) => set({ splitPaneWidth: Math.max(300, Math.min(window.innerWidth * 0.8, payload)) }),
      setMessagingListWidth: (payload) => set({ messagingListWidth: Math.max(320, Math.min(payload, window.innerWidth - 400)) }),
      setIsResizing: (payload) => set({ isResizing: payload }),
      setFullscreenTarget: (payload) => set({ fullscreenTarget: payload }),
      setIsResizingRightPane: (payload) => set({ isResizingRightPane: payload }),
      setIsResizingMessagingList: (payload) => set({ isResizingMessagingList: payload }),
      toggleMessagingListCollapsed: () => set((state) => ({ isMessagingListCollapsed: !state.isMessagingListCollapsed })),
      setTopBarVisible: (payload) => set({ isTopBarVisible: payload }),
      setAutoExpandSidebar: (payload) => set({ autoExpandSidebar: payload }),
      setReducedMotion: (payload) => set({ reducedMotion: payload }),
      setCompactMode: (payload) => set({ compactMode: payload }),
      setPrimaryColor: (payload) => {
        if (typeof document !== 'undefined') {
            document.documentElement.style.setProperty('--primary-hsl', payload);
        }
        set({ primaryColor: payload });
      },
      setDraggedPage: (payload) => set({ draggedPage: payload }),
      setCommandPaletteOpen: (open) => set({ isCommandPaletteOpen: open }),
      toggleDarkMode: () => set((state) => ({ isDarkMode: !state.isDarkMode })),
      setDragHoverTarget: (payload) => set({ dragHoverTarget: payload }),
      setHoveredPane: (payload) => set({ hoveredPane: payload }),
      
      toggleSidebar: () => {
        const current = get().sidebarState;
        if (current === SIDEBAR_STATES.HIDDEN) set({ sidebarState: SIDEBAR_STATES.COLLAPSED });
        else if (current === SIDEBAR_STATES.COLLAPSED) set({ sidebarState: SIDEBAR_STATES.EXPANDED });
        else if (current === SIDEBAR_STATES.EXPANDED) set({ sidebarState: SIDEBAR_STATES.COLLAPSED });
      },
      hideSidebar: () => set({ sidebarState: SIDEBAR_STATES.HIDDEN }),
      showSidebar: () => set({ sidebarState: SIDEBAR_STATES.EXPANDED }),
      peekSidebar: () => set({ sidebarState: SIDEBAR_STATES.PEEK }),
      
      toggleFullscreen: (target = null) => {
        const { bodyState, previousBodyState } = get();
        if (bodyState === BODY_STATES.FULLSCREEN) {
          set({ 
            bodyState: previousBodyState || BODY_STATES.NORMAL,
            fullscreenTarget: null,
            previousBodyState: BODY_STATES.NORMAL,
          });
        } else {
          set({ 
            previousBodyState: bodyState, 
            bodyState: BODY_STATES.FULLSCREEN, 
            fullscreenTarget: target 
          });
        }
      },
      
      resetToDefaults: () => {
        // Preserve props passed to provider
        const { appName, appLogo } = get();
        const currentPrimaryColor = defaultState.primaryColor;
        if (typeof document !== 'undefined') {
          document.documentElement.style.setProperty('--primary-hsl', currentPrimaryColor);
        }
        set({ ...defaultState, primaryColor: currentPrimaryColor, appName, appLogo });
      },
    }));


    // Add a selector for the derived rightPaneWidth

    export const useRightPaneWidth = () => useAppShellStore(state => 
        state.bodyState === BODY_STATES.SPLIT_VIEW ? state.splitPaneWidth : state.sidePaneWidth
    );
  src/pages/Messaging/components/MessageThread.tsx: >-
    import React from 'react';

    import { Paperclip, SendHorizontal, Smile } from 'lucide-react';


    import { useMessagingStore } from '../store/messaging.store';

    import { Avatar, AvatarFallback, AvatarImage } from
    '@/components/ui/avatar';

    import { Input } from '@/components/ui/input';

    import { Button } from '@/components/ui/button';

    import { ChannelIcon } from './ChannelIcons';

    import { cn } from '@/lib/utils';


    interface MessageThreadProps {
      conversationId?: string;
    }


    export const MessageThread: React.FC<MessageThreadProps> = ({ conversationId
    }) => {
      const conversation = useMessagingStore(state =>
        conversationId ? state.getConversationById(conversationId) : undefined
      );
      
      if (!conversationId || !conversation) {
        return (
            <div className="h-full flex flex-col items-center justify-center p-6 bg-background">
                <p className="text-muted-foreground">Select a conversation to see the messages.</p>
            </div>
        );
      }

      const { contact, messages } = conversation;

      return (
        <div className="h-full flex flex-col bg-background">
          {/* Header */}
          <div className="flex items-center gap-3 p-4 border-b h-20 flex-shrink-0">
            <Avatar className="h-10 w-10">
              <AvatarImage src={contact.avatar} alt={contact.name} />
              <AvatarFallback>{contact.name.charAt(0)}</AvatarFallback>
            </Avatar>
            <div className="flex-1">
              <p className="font-semibold">{contact.name}</p>
              <p className="text-xs text-muted-foreground flex items-center gap-1.5">
                <span className={cn("w-2 h-2 rounded-full", contact.online ? 'bg-green-500' : 'bg-gray-400')} />
                {contact.online ? 'Online' : 'Offline'}
              </p>
            </div>
            <ChannelIcon channel={conversation.channel} className="w-5 h-5" />
          </div>

          {/* Messages */}
          <div className="flex-1 overflow-y-auto p-6 space-y-6">
            {messages.map((message) => (
              <div key={message.id} className={cn(
                "flex items-end gap-3",
                message.sender === 'user' ? 'justify-end' : 'justify-start'
              )}>
                {message.sender === 'contact' && (
                  <Avatar className="h-8 w-8">
                    <AvatarImage src={contact.avatar} />
                    <AvatarFallback>{contact.name.charAt(0)}</AvatarFallback>
                  </Avatar>
                )}
                <div className={cn(
                  "max-w-xs md:max-w-md lg:max-w-lg p-3 rounded-2xl",
                  message.sender === 'user' 
                    ? 'bg-primary text-primary-foreground rounded-br-none' 
                    : 'bg-card border rounded-bl-none'
                )}>
                  <p className="text-sm">{message.text}</p>
                </div>
              </div>
            ))}
          </div>

          {/* Input Form */}
          <div className="p-4 border-t flex-shrink-0 bg-card/30">
            <div className="relative">
              <Input placeholder="Type a message..." className="pr-32 h-12 rounded-full bg-background" />
              <div className="absolute right-2 top-1/2 -translate-y-1/2 flex items-center gap-1">
                <Button variant="ghost" size="icon" className="rounded-full">
                    <Smile className="w-5 h-5" />
                </Button>
                <Button variant="ghost" size="icon" className="rounded-full">
                    <Paperclip className="w-5 h-5" />
                </Button>
                <Button size="icon" className="rounded-full">
                    <SendHorizontal className="w-5 h-5" />
                </Button>
              </div>
            </div>
          </div>
        </div>
      );
    };
  src/pages/Messaging/components/ContactProfile.tsx: >-
    import React, { useState, useMemo } from 'react';

    import { format } from 'date-fns';

    import { Mail, Phone, Sparkles, Reply, ThumbsUp, ThumbsDown, Copy,
    Briefcase, StickyNote, PhoneCall, CheckSquare, Calendar, Send } from
    'lucide-react';

    import { toast } from 'sonner';

    import { useMessagingStore } from '../store/messaging.store';

    import type { ActivityEvent, ActivityEventType } from '../types';

    import { Avatar, AvatarFallback, AvatarImage } from
    '@/components/ui/avatar';

    import { Badge } from '@/components/ui/badge';

    import { Card, CardContent } from '@/components/ui/card';

    import { Button } from '@/components/ui/button';

    import { Textarea } from '@/components/ui/textarea';

    import { AnimatedTabs } from '@/components/ui/animated-tabs';

    import { TechOrbitDisplay } from '@/components/effects/OrbitingCircles';

    import { cn } from '@/lib/utils';


    interface ContactProfileProps {
      conversationId?: string;
    }


    export const ContactProfile: React.FC<ContactProfileProps> = ({
    conversationId }) => {
      const [activeTab, setActiveTab] = useState('insights');

      const conversation = useMessagingStore(state => 
        conversationId ? state.getConversationById(conversationId) : undefined
      );

      const tabs = useMemo(() => [
        { id: 'insights', label: 'AI' },
        { id: 'details', label: 'Details' },
        { id: 'activity', label: 'Activity' },
        { id: 'notes', label: 'Notes' },
      ], []);

      const handleCopy = (text: string) => {
        navigator.clipboard.writeText(text);
        toast.success('Copied to clipboard!');
      };

      const activityIcons: Record<ActivityEventType, React.ElementType> = {
        note: StickyNote,
        call: PhoneCall,
        email: Mail,
        meeting: Calendar,
      };
      
      const ActivityItem = ({ item }: { item: ActivityEvent }) => {
        const Icon = activityIcons[item.type];
        return (
          <div className="flex items-start gap-3">
            <div className="mt-1"><Icon className="w-4 h-4 text-muted-foreground" /></div>
            <div className="flex-1 text-sm"><p>{item.content}</p><p className="text-xs text-muted-foreground mt-1">{format(new Date(item.timestamp), "MMM d, yyyy 'at' h:mm a")}</p></div>
          </div>
        )
      }
      if (!conversation) {
        return (
          <div className="h-full flex-1 flex flex-col items-center justify-center bg-background p-6 relative overflow-hidden">
            <TechOrbitDisplay text="Contact Intel" />
            <div className="text-center z-10 bg-background/50 backdrop-blur-sm p-6 rounded-lg">
                <h3 className="mt-4 text-lg font-medium">Select a Conversation</h3>
                <p className="mt-1 text-sm text-muted-foreground">
                    AI-powered insights and contact details will appear here.
                </p>
            </div>
          </div>
        );
      }

      const { contact, aiSummary } = conversation;

      return (
        <div className="h-full flex-1 flex flex-col bg-background overflow-y-auto">
          <div className="p-6 space-y-6">
            {/* Contact Header */}
            <div className="flex flex-col items-center text-center">
              <Avatar className="h-24 w-24 mb-4 border-4 border-background ring-2 ring-primary">
                <AvatarImage src={contact.avatar} alt={contact.name} />
                <AvatarFallback className="text-3xl">{contact.name.charAt(0)}</AvatarFallback>
              </Avatar>
              <h2 className="text-xl font-bold">{contact.name}</h2>
              <p className="text-sm text-muted-foreground mt-0.5">
                {contact.online ? 'Online' : `Last seen ${contact.lastSeen}`}
              </p>
              <div className="flex flex-wrap gap-2 mt-4 justify-center">
                {contact.tags.map(tag => (
                  <Badge key={tag} variant="secondary" className="text-xs">{tag}</Badge>
                ))}
              </div>
            </div>

            {/* Action Buttons */}
            <div className="grid grid-cols-2 sm:grid-cols-4 gap-2">
                <Button variant="outline" size="sm" className="gap-2"><StickyNote className="w-4 h-4" /> Note</Button>
                <Button variant="outline" size="sm" className="gap-2"><PhoneCall className="w-4 h-4" /> Call</Button>
                <Button variant="outline" size="sm" className="gap-2"><Mail className="w-4 h-4" /> Email</Button>
                <Button variant="outline" size="sm" className="gap-2"><CheckSquare className="w-4 h-4" /> Task</Button>
            </div>

            {/* Tabs for Details and AI Insights */}
            <Card className="overflow-hidden">
              <AnimatedTabs tabs={tabs} activeTab={activeTab} onTabChange={setActiveTab} className="px-6 border-b" />
              
              {activeTab === 'details' && (
                <CardContent className="space-y-4 text-sm pt-6 leading-relaxed">
                   <div className="flex items-start gap-3">
                    <Mail className="w-4 h-4 text-muted-foreground flex-shrink-0" />
                    <span className="text-foreground break-all">{contact.email}</span>
                  </div>
                  <div className="flex items-start gap-3">
                    <Phone className="w-4 h-4 text-muted-foreground flex-shrink-0" />
                    <span className="text-foreground">{contact.phone}</span>
                  </div>
                  <div className="flex items-start gap-3">
                    <Briefcase className="w-4 h-4 text-muted-foreground flex-shrink-0" />
                    <span className="text-foreground">{contact.role} at <strong>{contact.company}</strong></span>
                  </div>
                </CardContent>
              )}

              {activeTab === 'insights' && (
                <CardContent className="space-y-6 pt-6">
                  <div className="flex items-center gap-2">
                    <span className="font-semibold text-sm">Sentiment:</span>
                    <Badge variant={
                      aiSummary.sentiment === 'positive' ? 'default' : aiSummary.sentiment === 'negative' ? 'destructive' : 'secondary'
                    } className="capitalize">
                      {aiSummary.sentiment === 'positive' && <ThumbsUp className="w-3 h-3 mr-1.5" />}
                      {aiSummary.sentiment === 'negative' && <ThumbsDown className="w-3 h-3 mr-1.5" />}
                      {aiSummary.sentiment}
                    </Badge>
                  </div>
                  <div>
                    <h4 className="font-semibold mb-2 flex items-center gap-2 text-sm"><Sparkles className="w-4 h-4 text-yellow-500" /> Key Points</h4>
                    <ul className="list-disc list-inside space-y-1.5 text-sm text-muted-foreground pl-2">
                      {aiSummary.summaryPoints.map((point, i) => <li key={i}>{point}</li>)}
                    </ul>
                  </div>
                  <div>
                    <h4 className="font-semibold mb-2 flex items-center gap-2 text-sm"><Reply className="w-4 h-4 text-blue-500" /> Suggested Replies</h4>
                    <div className="flex flex-col gap-2">
                      {aiSummary.suggestedReplies.map((reply, i) => (
                        <Button 
                          key={i} 
                          variant="ghost" 
                          size="sm" 
                          className="w-full justify-between text-left h-auto py-2 px-3 group"
                          onClick={() => handleCopy(reply)}
                        >
                          <span className="pr-4">{reply}</span>
                          <Copy className="w-4 h-4 text-muted-foreground group-hover:text-foreground transition-colors" />
                        </Button>
                      ))}
                    </div>
                  </div>
                </CardContent>
              )}

              {activeTab === 'activity' && (
                <CardContent className="pt-6">
                  <div className="space-y-5 relative before:absolute before:left-[7px] before:top-2 before:bottom-2 before:w-0.5 before:bg-border">
                    {contact.activity.map(item => <ActivityItem key={item.id} item={item} />)}
                  </div>
                </CardContent>
              )}

              {activeTab === 'notes' && (
                <CardContent className="pt-6 space-y-4">
                  <div className="space-y-4">
                    {contact.notes.map(note => (
                      <div key={note.id} className="text-sm bg-accent/50 p-3 rounded-lg"><p className="mb-1.5">{note.content}</p><p className="text-xs text-muted-foreground">{format(new Date(note.createdAt), "MMM d, yyyy")}</p></div>
                    ))}
                  </div>
                  <Textarea placeholder="Add a new note..." className="min-h-[60px]" />
                  <Button size="sm" className="w-full gap-2"><Send className="w-4 h-4" /> Save Note</Button>
                </CardContent>
              )}
            </Card>
          </div>
        </div>
      );
    };
approved: false
linesAdded: null
linesRemoved: null
linesDifference: null
gitCommittedAt: null
status: undone
id: 300
