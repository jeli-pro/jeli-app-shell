uuid: 4402a11b-10ed-4d40-84a8-f73a38b556c4
projectId: jeli-app-shell
createdAt: '2025-10-17T12:32:10.045Z'
gitCommitMsg: >-
  feat(messaging): refactor activity feed to modern timeline UI

  Replaced the basic list-style activity feed in the messaging detail view with
  a new, reusable Timeline component. This provides a much-improved, scannable,
  and modern user experience for viewing conversation history.

  - Added a new, highly configurable `Timeline` component with vertical and
  horizontal layouts, custom icons, and multiple style variants. - Added a
  `ScrollArea` component, a dependency for the horizontal timeline. - Refactored
  `ActivityFeed.tsx` to map message data to timeline items, including custom
  icons for different message types and journey points. - Preserved the
  scroll-to-message functionality by enhancing the timeline to accept data
  attributes.
promptSummary: >-
  The user wants to upgrade the messaging activity feed UI to a modern timeline
  view. This involves creating a new reusable Timeline component and integrating
  it into the existing ActivityFeed.
reasoning:
  - >-
    This is a significant UI overhaul. I'll first add the new, reusable
    `Timeline` component and its `ScrollArea` dependency. Then, I'll refactor
    the `ActivityFeed` to use this new component, transforming the raw message
    data into a structured, visually appealing timeline. This requires adding a
    mapping layer to assign appropriate icons and styles for different message
    types, such as comments, internal notes, and customer journey milestones.
  - '### Part 1: Introduce New UI Components'
  - >-
    First, I'll create the new `scroll-area.tsx` component, as it's a dependency
    for the horizontal timeline layout.
  - >-
    Next, I'll add the necessary Radix UI dependency for the `ScrollArea`
    component to `package.json`.
  - >-
    Now I'll create the powerful, reusable `Timeline` component. I'm also adding
    a small but crucial modification to pass `metadata` props, which will
    preserve the "scroll to message" functionality from `TaskDetail`.
  - >-
    To make these new components available, I'll export them from the main
    `index.ts` file.
  - '### Part 2: Integrate Timeline into Activity Feed'
  - >-
    With the new `Timeline` component ready, I will refactor `ActivityFeed.tsx`
    to use it, replacing the old, cluttered layout with a clean, modern timeline
    view.
operations:
  - type: write
    path: src/components/ui/scroll-area.tsx
    content: >-
      "use client"


      import * as React from "react"

      import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"


      import { cn } from "@/lib/utils"


      const ScrollArea = React.forwardRef<
        React.ElementRef<typeof ScrollAreaPrimitive.Root>,
        React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
      >(({ className, children, ...props }, ref) => (
        <ScrollAreaPrimitive.Root
          ref={ref}
          className={cn("relative overflow-hidden", className)}
          {...props}
        >
          <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
            {children}
          </ScrollAreaPrimitive.Viewport>
          <ScrollBar />
          <ScrollAreaPrimitive.Corner />
        </ScrollAreaPrimitive.Root>
      ))

      ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName


      const ScrollBar = React.forwardRef<
        React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
        React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
      >(({ className, orientation = "vertical", ...props }, ref) => (
        <ScrollAreaPrimitive.ScrollAreaScrollbar
          ref={ref}
          orientation={orientation}
          className={cn(
            "flex touch-none select-none transition-colors",
            orientation === "vertical" &&
              "h-full w-2.5 border-l border-l-transparent p-[1px]",
            orientation === "horizontal" &&
              "h-2.5 flex-col border-t border-t-transparent p-[1px]",
            className
          )}
          {...props}
        >
          <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
        </ScrollAreaPrimitive.ScrollAreaScrollbar>
      ))

      ScrollBar.displayName =
      ScrollAreaPrimitive.ScrollAreaScrollbar.displayName


      export { ScrollArea, ScrollBar }
    patchStrategy: replace
  - type: write
    path: package.json
    content: |+
      --- package.json
      +++ package.json
      @@ -58,6 +58,7 @@
         "dependencies": {
           "@faker-js/faker": "^10.1.0",
           "@radix-ui/react-checkbox": "^1.3.3",
      +    "@radix-ui/react-scroll-area": "^1.0.5",
           "@radix-ui/react-tooltip": "^1.2.8"
         }
       }

    patchStrategy: standard-diff
  - type: write
    path: src/components/ui/timeline.tsx
    content: >-
      "use client";


      import * as React from "react";

      import { cva, type VariantProps } from "class-variance-authority";

      import { cn } from "@/lib/utils";

      import { ScrollArea } from "@/components/ui/scroll-area";

      import {
        Check,
        Clock,
        AlertCircle,
        X,
        Calendar,
        User,
        MapPin,
        MessageSquare,
        Award,
        Briefcase,
        GraduationCap,
        Heart,
      } from "lucide-react";


      const timelineVariants = cva("relative flex flex-col", {
        variants: {
          variant: {
            default: "gap-4",
            compact: "gap-2",
            spacious: "gap-8",
          },
          orientation: {
            vertical: "flex-col",
            horizontal: "flex-row",
          },
        },
        defaultVariants: {
          variant: "default",
          orientation: "vertical",
        },
      });


      const timelineItemVariants = cva("relative flex gap-3 pb-2", {
        variants: {
          orientation: {
            vertical: "flex-row",
            horizontal: "flex-col min-w-64 shrink-0",
          },
        },
        defaultVariants: {
          orientation: "vertical",
        },
      });


      const timelineConnectorVariants = cva("bg-border", {
        variants: {
          orientation: {
            vertical: "absolute left-3 top-9 h-full w-px",
            horizontal: "absolute top-3 left-8 w-full h-px",
          },
          status: {
            default: "bg-border",
            completed: "bg-primary",
            active: "bg-primary",
            pending: "bg-muted-foreground/30",
            error: "bg-destructive",
          },
        },
        defaultVariants: {
          orientation: "vertical",
          status: "default",
        },
      });


      const timelineIconVariants = cva(
        "flex h-6 w-6 shrink-0 items-center justify-center rounded-full border-2 bg-background text-xs font-medium",
        {
          variants: {
            status: {
              default: "border-border text-muted-foreground",
              completed: "border-primary bg-primary text-primary-foreground",
              active: "border-primary bg-background text-primary animate-pulse",
              pending: "border-muted-foreground/30 text-muted-foreground",
              error: "border-destructive bg-destructive text-destructive-foreground",
            },
          },
          defaultVariants: {
            status: "default",
          },
        },
      );


      export interface TimelineItem {
        id: string;
        title: string;
        description?: string;
        timestamp?: string | Date;
        status?: "default" | "completed" | "active" | "pending" | "error";
        icon?: React.ReactNode;
        content?: React.ReactNode;
        metadata?: Record<string, any>;
      }


      export interface TimelineProps extends VariantProps<typeof
      timelineVariants> {
        items: TimelineItem[];
        className?: string;
        showConnectors?: boolean;
        showTimestamps?: boolean;
        timestampPosition?: "top" | "bottom" | "inline";
      }


      function getStatusIcon(status: TimelineItem["status"]) {
        switch (status) {
          case "completed":
            return <Check className="h-3 w-3" />;
          case "active":
            return <Clock className="h-3 w-3" />;
          case "pending":
            return <Clock className="h-3 w-3" />;
          case "error":
            return <X className="h-3 w-3" />;
          default:
            return <div className="h-2 w-2 rounded-full bg-current" />;
        }
      }


      function formatTimestamp(timestamp: string | Date): string {
        if (!timestamp) return "";
        const date = typeof timestamp === "string" ? new Date(timestamp) : timestamp;
        return date.toLocaleDateString("en-US", {
          month: "short",
          day: "numeric",
          year: "numeric",
          hour: "2-digit",
          minute: "2-digit",
        });
      }


      export function Timeline({
        items,
        className,
        variant,
        orientation = "vertical",
        showConnectors = true,
        showTimestamps = true,
        timestampPosition = "top",
        ...props
      }: TimelineProps) {
        const timelineContent = (
          <div
            className={cn(
              timelineVariants({ variant, orientation }),
              orientation === "horizontal" ? "pb-4" : "",
            )}
          >
            {items.map((item, index) => (
              <div
                key={item.id}
                className={cn(timelineItemVariants({ orientation }))}
                {...item.metadata}
              >
                {/* Connector Line */}
                {showConnectors && index < items.length - 1 && (
                  <div
                    className={cn(
                      timelineConnectorVariants({
                        orientation,
                        status: item.status,
                      }),
                    )}
                  />
                )}

                {/* Icon */}
                <div className="relative z-10 flex shrink-0">
                  <div className={cn(timelineIconVariants({ status: item.status }))}>
                    {item.icon || getStatusIcon(item.status)}
                  </div>
                </div>

                {/* Content */}
                <div className="flex min-w-0 flex-1 flex-col gap-2">
                  {/* Timestamp - Top */}
                  {showTimestamps &&
                    timestampPosition === "top" &&
                    item.timestamp && (
                      <time className="text-xs text-muted-foreground">
                        {formatTimestamp(item.timestamp)}
                      </time>
                    )}

                  {/* Title and Inline Timestamp */}
                  <div className="flex items-start justify-between gap-2">
                    <h3 className="font-medium leading-tight">{item.title}</h3>
                    {showTimestamps &&
                      timestampPosition === "inline" &&
                      item.timestamp && (
                        <time className="shrink-0 text-xs text-muted-foreground">
                          {formatTimestamp(item.timestamp)}
                        </time>
                      )}
                  </div>

                  {/* Description */}
                  {item.description && (
                    <p className="text-sm text-muted-foreground leading-relaxed">
                      {item.description}
                    </p>
                  )}

                  {/* Custom Content */}
                  {item.content && <div className="mt-3">{item.content}</div>}

                  {/* Timestamp - Bottom */}
                  {showTimestamps &&
                    timestampPosition === "bottom" &&
                    item.timestamp && (
                      <time className="text-xs text-muted-foreground">
                        {formatTimestamp(item.timestamp)}
                      </time>
                    )}
                </div>
              </div>
            ))}
          </div>
        );

        if (orientation === "horizontal") {
          return (
            <ScrollArea
              orientation="horizontal"
              className={cn("w-full", className)}
              {...props}
            >
              {timelineContent}
            </ScrollArea>
          );
        }

        return (
          <div className={className} {...props}>
            {timelineContent}
          </div>
        );
      }


      // Example Components for Documentation

      export function BasicTimelineExample() {
        const items: TimelineItem[] = [
          {
            id: "1",
            title: "Project Started",
            description: "Initial project setup and planning phase",
            timestamp: new Date("2024-01-15T09:00:00"),
            status: "completed",
          },
          {
            id: "2",
            title: "Development Phase",
            description: "Core features implementation in progress",
            timestamp: new Date("2024-02-01T10:30:00"),
            status: "active",
          },
          {
            id: "3",
            title: "Testing & QA",
            description: "Quality assurance and testing phase",
            timestamp: new Date("2024-02-15T14:00:00"),
            status: "pending",
          },
          {
            id: "4",
            title: "Launch",
            description: "Production deployment and launch",
            timestamp: new Date("2024-03-01T16:00:00"),
            status: "pending",
          },
        ];

        return <Timeline items={items} />;
      }


      export function TimelineVariantsExample() {
        const items: TimelineItem[] = [
          {
            id: "1",
            title: "Task Completed",
            description: "Successfully finished the assigned task",
            status: "completed",
          },
          {
            id: "2",
            title: "In Progress",
            description: "Currently working on this item",
            status: "active",
          },
          {
            id: "3",
            title: "Upcoming",
            description: "Scheduled for later",
            status: "pending",
          },
        ];

        return (
          <div className="space-y-8">
            <div>
              <h3 className="mb-4 text-sm font-medium">Default</h3>
              <Timeline items={items} variant="default" />
            </div>
            <div>
              <h3 className="mb-4 text-sm font-medium">Compact</h3>
              <Timeline items={items} variant="compact" />
            </div>
            <div>
              <h3 className="mb-4 text-sm font-medium">Spacious</h3>
              <Timeline items={items} variant="spacious" />
            </div>
          </div>
        );
      }


      export function HorizontalTimelineExample() {
        const items: TimelineItem[] = [
          {
            id: "1",
            title: "Planning",
            description: "Project planning and research",
            status: "completed",
          },
          {
            id: "2",
            title: "Design",
            description: "UI/UX design phase",
            status: "completed",
          },
          {
            id: "3",
            title: "Development",
            description: "Core development work",
            status: "active",
          },
          {
            id: "4",
            title: "Testing",
            description: "Quality assurance",
            status: "pending",
          },
          {
            id: "5",
            title: "Launch",
            description: "Production release",
            status: "pending",
          },
        ];

        return <Timeline items={items} orientation="horizontal" />;
      }


      export function TimelineWithCustomIconsExample() {
        const items: TimelineItem[] = [
          {
            id: "1",
            title: "Account Created",
            description: "Welcome to our platform!",
            timestamp: new Date("2024-01-01T08:00:00"),
            status: "completed",
            icon: <User className="h-3 w-3" />,
          },
          {
            id: "2",
            title: "Profile Updated",
            description: "Personal information has been updated",
            timestamp: new Date("2024-01-02T14:30:00"),
            status: "completed",
            icon: <User className="h-3 w-3" />,
          },
          {
            id: "3",
            title: "First Order Placed",
            description: "Order #12345 has been placed successfully",
            timestamp: new Date("2024-01-03T11:15:00"),
            status: "completed",
            icon: <Briefcase className="h-3 w-3" />,
          },
          {
            id: "4",
            title: "Delivery Scheduled",
            description: "Your order is out for delivery",
            timestamp: new Date("2024-01-04T09:45:00"),
            status: "active",
            icon: <MapPin className="h-3 w-3" />,
          },
        ];

        return <Timeline items={items} />;
      }


      export function TimelineWithContentExample() {
        const items: TimelineItem[] = [
          {
            id: "1",
            title: "Code Review Completed",
            description: "Pull request #123 has been reviewed",
            timestamp: new Date("2024-01-01T10:00:00"),
            status: "completed",
            content: (
              <div className="rounded-md bg-muted p-3 text-sm">
                <p className="font-medium">Changes approved by John Doe</p>
                <p className="text-muted-foreground">
                  3 files changed, +45 -12 lines
                </p>
              </div>
            ),
          },
          {
            id: "2",
            title: "Build Failed",
            description: "CI/CD pipeline encountered errors",
            timestamp: new Date("2024-01-01T11:30:00"),
            status: "error",
            content: (
              <div className="rounded-md bg-destructive/10 p-3 text-sm">
                <p className="font-medium text-destructive">Build #456 failed</p>
                <p className="text-muted-foreground">Syntax error in main.tsx:45</p>
              </div>
            ),
          },
          {
            id: "3",
            title: "Issue Assigned",
            description: "Bug report assigned to development team",
            timestamp: new Date("2024-01-01T15:20:00"),
            status: "active",
            content: (
              <div className="rounded-md bg-primary/10 p-3 text-sm">
                <p className="font-medium">Issue #789: Login form validation</p>
                <p className="text-muted-foreground">
                  Priority: High | Assigned to: Jane Smith
                </p>
              </div>
            ),
          },
        ];

        return <Timeline items={items} />;
      }


      export function ProjectTimelineExample() {
        const items: TimelineItem[] = [
          {
            id: "1",
            title: "Project Kickoff",
            description: "Initial meeting with stakeholders and team members",
            timestamp: new Date("2024-01-15T09:00:00"),
            status: "completed",
            icon: <Briefcase className="h-3 w-3" />,
            content: (
              <div className="space-y-2">
                <div className="flex gap-2 text-sm">
                  <span className="font-medium">Attendees:</span>
                  <span className="text-muted-foreground">5 team members</span>
                </div>
                <div className="flex gap-2 text-sm">
                  <span className="font-medium">Duration:</span>
                  <span className="text-muted-foreground">2 hours</span>
                </div>
              </div>
            ),
          },
          {
            id: "2",
            title: "Requirements Gathering",
            description:
              "Detailed analysis of project requirements and specifications",
            timestamp: new Date("2024-01-20T14:00:00"),
            status: "completed",
            icon: <MessageSquare className="h-3 w-3" />,
          },
          {
            id: "3",
            title: "Design Phase",
            description: "UI/UX design and wireframe creation",
            timestamp: new Date("2024-02-01T10:00:00"),
            status: "active",
            icon: <Award className="h-3 w-3" />,
            content: (
              <div className="rounded-md border border-primary/20 bg-primary/5 p-3 text-sm">
                <p className="font-medium">Current Progress: 60%</p>
                <p className="text-muted-foreground">
                  Expected completion: Feb 10, 2024
                </p>
              </div>
            ),
          },
          {
            id: "4",
            title: "Development Sprint 1",
            description: "Core functionality implementation",
            timestamp: new Date("2024-02-15T09:00:00"),
            status: "pending",
            icon: <GraduationCap className="h-3 w-3" />,
          },
          {
            id: "5",
            title: "Testing & QA",
            description: "Quality assurance and bug fixes",
            timestamp: new Date("2024-03-01T09:00:00"),
            status: "pending",
            icon: <AlertCircle className="h-3 w-3" />,
          },
        ];

        return <Timeline items={items} variant="spacious" />;
      }


      export function OrderTrackingTimelineExample() {
        const items: TimelineItem[] = [
          {
            id: "1",
            title: "Order Placed",
            description: "Your order has been successfully placed",
            timestamp: new Date("2024-01-01T10:30:00"),
            status: "completed",
            icon: <Check className="h-3 w-3" />,
          },
          {
            id: "2",
            title: "Payment Confirmed",
            description: "Payment has been processed successfully",
            timestamp: new Date("2024-01-01T10:35:00"),
            status: "completed",
            icon: <Check className="h-3 w-3" />,
          },
          {
            id: "3",
            title: "Order Processing",
            description: "Your order is being prepared for shipment",
            timestamp: new Date("2024-01-01T14:20:00"),
            status: "active",
            icon: <Clock className="h-3 w-3" />,
          },
          {
            id: "4",
            title: "Shipped",
            description: "Your order has been shipped",
            status: "pending",
            icon: <MapPin className="h-3 w-3" />,
          },
          {
            id: "5",
            title: "Delivered",
            description: "Package delivered to your address",
            status: "pending",
            icon: <Heart className="h-3 w-3" />,
          },
        ];

        return <Timeline items={items} timestampPosition="inline" />;
      }


      export function CompactTimelineExample() {
        const items: TimelineItem[] = [
          {
            id: "1",
            title: "Login",
            timestamp: new Date("2024-01-01T08:30:00"),
            status: "completed",
          },
          {
            id: "2",
            title: "File uploaded",
            timestamp: new Date("2024-01-01T08:35:00"),
            status: "completed",
          },
          {
            id: "3",
            title: "Processing started",
            timestamp: new Date("2024-01-01T08:40:00"),
            status: "active",
          },
          {
            id: "4",
            title: "Processing complete",
            status: "pending",
          },
        ];

        return (
          <Timeline
            items={items}
            variant="compact"
            timestampPosition="inline"
            showTimestamps={true}
          />
        );
      }


      export function ExtendedHorizontalTimelineExample() {
        const items: TimelineItem[] = [
          {
            id: "1",
            title: "Research",
            description: "Market research and analysis",
            timestamp: new Date("2024-01-01T09:00:00"),
            status: "completed",
            icon: <MessageSquare className="h-3 w-3" />,
          },
          {
            id: "2",
            title: "Planning",
            description: "Project planning and roadmap",
            timestamp: new Date("2024-01-05T10:00:00"),
            status: "completed",
            icon: <Calendar className="h-3 w-3" />,
          },
          {
            id: "3",
            title: "Design",
            description: "UI/UX design and wireframes",
            timestamp: new Date("2024-01-10T11:00:00"),
            status: "completed",
            icon: <Award className="h-3 w-3" />,
          },
          {
            id: "4",
            title: "Prototype",
            description: "Interactive prototype development",
            timestamp: new Date("2024-01-15T14:00:00"),
            status: "completed",
            icon: <Briefcase className="h-3 w-3" />,
          },
          {
            id: "5",
            title: "Development",
            description: "Core feature implementation",
            timestamp: new Date("2024-01-20T09:00:00"),
            status: "active",
            icon: <GraduationCap className="h-3 w-3" />,
          },
          {
            id: "6",
            title: "Testing",
            description: "Quality assurance and testing",
            timestamp: new Date("2024-02-01T10:00:00"),
            status: "pending",
            icon: <AlertCircle className="h-3 w-3" />,
          },
          {
            id: "7",
            title: "Review",
            description: "Stakeholder review and feedback",
            timestamp: new Date("2024-02-05T15:00:00"),
            status: "pending",
            icon: <User className="h-3 w-3" />,
          },
          {
            id: "8",
            title: "Deploy",
            description: "Production deployment",
            timestamp: new Date("2024-02-10T16:00:00"),
            status: "pending",
            icon: <MapPin className="h-3 w-3" />,
          },
          {
            id: "9",
            title: "Launch",
            description: "Product launch and marketing",
            timestamp: new Date("2024-02-15T09:00:00"),
            status: "pending",
            icon: <Heart className="h-3 w-3" />,
          },
        ];

        return <Timeline items={items} orientation="horizontal" variant="spacious" />;
      }


      export {
        timelineVariants,
        timelineItemVariants,
        timelineConnectorVariants,
        timelineIconVariants,
      };
    patchStrategy: replace
  - type: write
    path: src/index.ts
    content: |+
      --- src/index.ts
      +++ src/index.ts
      @@ -48,9 +48,11 @@
       export * from './components/ui/input';
       export * from './components/ui/label';
       export * from './components/ui/popover';
      +export * from './components/ui/scroll-area';
       export * from './components/ui/tabs';
       export * from './components/ui/toast';
       export * from './components/ui/tooltip';
      +export * from './components/ui/timeline';
       export { AnimatedTabs } from './components/ui/animated-tabs';
       
       // Effects Components

    patchStrategy: standard-diff
  - type: write
    path: src/pages/Messaging/components/ActivityFeed.tsx
    content: >-
      import React, { forwardRef, useMemo } from 'react';

      import { useMessagingStore } from '../store/messaging.store';

      import type { Message, Contact, Assignee, JourneyPointType } from
      '../types';

      import { cn } from '@/lib/utils';

      import { Avatar, AvatarFallback, AvatarImage } from
      '@/components/ui/avatar';

      import { Timeline, type TimelineItem } from '@/components/ui/timeline';

      import { 
        StickyNote, Info, MessageSquare, ShoppingCart, PackageCheck, AlertCircle, 
        RefreshCw, MailQuestion, FileText, CreditCard, Truck, XCircle, Undo2, Star, User, Bot, type LucideIcon 
      } from 'lucide-react';


      const iconMap: Record<JourneyPointType | 'note' | 'system', LucideIcon> =
      {
        // Journey Points
        Inquiry: Info,
        Consult: MessageSquare,
        Quote: FileText,
        Order: ShoppingCart,
        Payment: CreditCard,
        Shipped: Truck,
        Delivered: PackageCheck,
        Canceled: XCircle,
        Refund: Undo2,
        Complain: AlertCircle,
        Reorder: RefreshCw,
        'Follow-up': MailQuestion,
        Review: Star,
        // Message Types
        note: StickyNote,
        system: Info,
      };


      interface ActivityFeedProps {
        messages: Message[];
        contact: Contact;
      }


      export const ActivityFeed = forwardRef<HTMLDivElement,
      ActivityFeedProps>(({ messages, contact }, ref) => {
        const getAssigneeById = useMessagingStore(state => state.getAssigneeById);

        const timelineItems = useMemo<TimelineItem[]>(() => {
          return messages.map((message) => {
            const assignee = message.userId ? getAssigneeById(message.userId) : null;
            
            const commonProps: Partial<TimelineItem> = {
              id: message.id,
              timestamp: new Date(message.timestamp),
              metadata: { 'data-message-id': message.id },
            };

            if (message.journeyPoint) {
              const Icon = iconMap[message.journeyPoint] ?? Info;
              return {
                ...commonProps,
                title: message.journeyPoint,
                status: 'completed',
                icon: <Icon className="h-3 w-3" />,
              } as TimelineItem;
            }
            
            if (message.type === 'system') {
              return {
                ...commonProps,
                title: 'System Event',
                description: message.text,
                status: 'default',
                icon: <Info className="h-3 w-3" />,
              } as TimelineItem;
            }

            if (message.type === 'note') {
              const name = assignee?.name || 'User';
              return {
                ...commonProps,
                title: `Note by ${name}`,
                status: 'default',
                icon: assignee?.type === 'ai' ? <Bot className="h-3 w-3" /> : <StickyNote className="h-3 w-3" />,
                content: (
                  <div className="rounded-md bg-yellow-400/10 p-3 text-sm border border-yellow-500/20 text-yellow-800 dark:text-yellow-300">
                    <p>{message.text}</p>
                  </div>
                )
              } as TimelineItem;
            }

            // Default: 'comment' type
            const isUserSender = message.sender === 'user';
            const senderName = isUserSender ? (assignee?.name || 'You') : contact.name;
            const senderIcon = isUserSender 
              ? (assignee?.type === 'ai' ? <Bot className="h-3 w-3" /> : <User className="h-3 w-3" />) 
              : (
                <Avatar className="h-full w-full">
                  <AvatarImage src={contact.avatar} />
                  <AvatarFallback>{contact.name.charAt(0)}</AvatarFallback>
                </Avatar>
              );
              
            return {
              ...commonProps,
              title: senderName,
              status: 'default',
              icon: senderIcon,
              content: (
                <div className={cn(
                  "p-3 rounded-xl text-sm leading-relaxed",
                  isUserSender
                    ? 'bg-primary text-primary-foreground rounded-bl-none' 
                    : 'bg-card border rounded-bl-none'
                )}>
                  <p>{message.text}</p>
                </div>
              )
            } as TimelineItem;
          });
        }, [messages, contact, getAssigneeById]);


        return (
          <div ref={ref} className="flex-1 overflow-y-auto p-6 no-scrollbar">
            <Timeline items={timelineItems} variant="default" showTimestamps={true} timestampPosition="inline" />
          </div>
        );
      });


      ActivityFeed.displayName = 'ActivityFeed';
    patchStrategy: replace
snapshot:
  src/components/ui/scroll-area.tsx: null
  src/components/ui/timeline.tsx: null
  package.json: |
    {
      "name": "jeli-app-shell",
      "private": false,
      "version": "1.0.1",
      "type": "module",
      "files": [
        "dist"
      ],
      "main": "./dist/jeli-app-shell.umd.js",
      "module": "./dist/jeli-app-shell.es.js",
      "types": "./dist/index.d.ts",
      "exports": {
        ".": {
          "import": "./dist/jeli-app-shell.es.js",
          "require": "./dist/jeli-app-shell.umd.js"
        },
        "./dist/style.css": "./dist/style.css"
      },
      "sideEffects": [
        "**/*.css"
      ],
      "scripts": {
        "dev": "vite",
        "build": "tsc && vite build",
        "lint": "eslint . --ext ts,tsx --report-unused-disable-directives --max-warnings 0",
        "preview": "vite preview"
      },
      "peerDependencies": {
        "@iconify/react": "^4.1.1",
        "@radix-ui/react-avatar": "^1.0.4",
        "@radix-ui/react-dialog": "^1.0.5",
        "@radix-ui/react-dropdown-menu": "^2.0.6",
        "@radix-ui/react-label": "^2.1.7",
        "@radix-ui/react-popover": "^1.0.7",
        "@radix-ui/react-slot": "^1.0.2",
        "@radix-ui/react-tabs": "^1.0.4",
        "class-variance-authority": "^0.7.0",
        "clsx": "^2.0.0",
        "cmdk": "^0.2.0",
        "date-fns": "^3.6.0",
        "gsap": "^3.13.0",
        "lucide-react": "^0.294.0",
        "react": "^18.2.0",
        "react-dom": "^18.2.0",
        "react-router-dom": "^6.22.3",
        "sonner": "^1.2.4",
        "tailwind-merge": "^2.0.0",
        "tailwindcss": "^3.3.5",
        "zustand": "^4.5.7"
      },
      "devDependencies": {
        "@types/node": "^20.10.0",
        "@types/react": "^18.2.37",
        "@types/react-dom": "^18.2.15",
        "@typescript-eslint/eslint-plugin": "^6.10.0",
        "@typescript-eslint/parser": "^6.10.0",
        "@vitejs/plugin-react": "^4.1.1",
        "autoprefixer": "^10.4.16",
        "eslint": "^8.53.0",
        "eslint-plugin-react-hooks": "^4.6.0",
        "eslint-plugin-react-refresh": "^0.4.4",
        "postcss": "^8.4.31",
        "tailwindcss": "^3.3.5",
        "tailwindcss-animate": "^1.0.7",
        "typescript": "^5.2.2",
        "vite": "^4.5.0"
      },
      "dependencies": {
        "@faker-js/faker": "^10.1.0",
        "@radix-ui/react-checkbox": "^1.3.3",
        "@radix-ui/react-tooltip": "^1.2.8"
      }
    }
  src/index.ts: >-
    // Context

    export { AppShellProvider } from './providers/AppShellProvider';

    export { useAppShellStore } from './store/appShell.store';


    // Layout Components

    export { AppShell } from './components/layout/AppShell';

    export { MainContent } from './components/layout/MainContent';

    export { ViewModeSwitcher } from './components/layout/ViewModeSwitcher';

    export { RightPane } from './components/layout/RightPane';

    export { TopBar } from './components/layout/TopBar';

    export { UserDropdown } from './components/layout/UserDropdown';

    export { Workspaces as WorkspaceProvider, WorkspaceTrigger, WorkspaceContent
    } from './components/layout/WorkspaceSwitcher';


    // Sidebar Primitives

    export {
      Sidebar,
      SidebarBody,
      SidebarContent,
      SidebarFooter,
      SidebarHeader,
      SidebarSection,
      SidebarTitle,
      SidebarMenuItem,
      SidebarMenuButton,
      SidebarMenuAction,
      SidebarLabel,
      SidebarBadge,
      SidebarTooltip,
      SidebarIcon,
      useSidebar,
    } from './components/layout/Sidebar';


    // Shared Components

    export { ContentInSidePanePlaceholder } from
    './components/shared/ContentInSidePanePlaceholder';

    export { PageHeader } from './components/shared/PageHeader';

    export { PageLayout } from './components/shared/PageLayout';


    // Feature Components

    export { SettingsContent } from './features/settings/SettingsContent';

    export { SettingsSection } from './features/settings/SettingsSection';

    export { SettingsToggle } from './features/settings/SettingsToggle';

    export { LoginPage } from './components/auth/LoginPage';


    // UI Components

    export * from './components/ui/avatar';

    export * from './components/ui/badge';

    export * from './components/ui/button';

    export * from './components/ui/card';

    export * from './components/ui/command';

    export * from './components/ui/dialog';

    export * from './components/ui/dropdown-menu';

    export * from './components/ui/input';

    export * from './components/ui/label';

    export * from './components/ui/popover';

    export * from './components/ui/tabs';

    export * from './components/ui/toast';

    export * from './components/ui/tooltip';

    export { AnimatedTabs } from './components/ui/animated-tabs';


    // Effects Components

    export { AnimatedInput } from './components/effects/AnimatedInput';

    export { BottomGradient } from './components/effects/BottomGradient';

    export { BoxReveal } from './components/effects/BoxReveal';

    export { OrbitingCircles, TechOrbitDisplay } from
    './components/effects/OrbitingCircles';

    export { Ripple } from './components/effects/Ripple';



    // Global Components

    export { CommandPalette } from './components/global/CommandPalette';


    // Hooks

    export { useAutoAnimateTopBar } from './hooks/useAutoAnimateTopBar';

    export { useCommandPaletteToggle } from
    './hooks/useCommandPaletteToggle.hook';


    // Lib

    export * from './lib/utils';


    // Store

    export type { ActivePage } from './store/appShell.store';

    export { useAuthStore } from './store/authStore';
  src/pages/Messaging/components/ActivityFeed.tsx: >
    import React, { forwardRef } from 'react';

    import { useMessagingStore } from '../store/messaging.store';

    import type { Message, Contact, Assignee, JourneyPointType } from
    '../types';

    import { cn } from '@/lib/utils';

    import { Avatar, AvatarFallback, AvatarImage } from
    '@/components/ui/avatar';

    import { formatDistanceToNow } from 'date-fns';

    import { StickyNote, Info, MessageSquare, ShoppingCart, PackageCheck,
    AlertCircle, RefreshCw, MailQuestion, FileText, CreditCard, Truck, XCircle,
    Undo2, Star, type LucideIcon } from 'lucide-react';


    const journeyInfoMap: Record<JourneyPointType, { Icon: LucideIcon;
    textColor: string; bgColor: string; }> = {
      Inquiry: { Icon: Info, textColor: 'text-cyan-500', bgColor: 'bg-cyan-500' },
      Consult: { Icon: MessageSquare, textColor: 'text-blue-500', bgColor: 'bg-blue-500' },
      Quote: { Icon: FileText, textColor: 'text-orange-500', bgColor: 'bg-orange-500' },
      Order: { Icon: ShoppingCart, textColor: 'text-green-500', bgColor: 'bg-green-500' },
      Payment: { Icon: CreditCard, textColor: 'text-lime-500', bgColor: 'bg-lime-500' },
      Shipped: { Icon: Truck, textColor: 'text-sky-500', bgColor: 'bg-sky-500' },
      Delivered: { Icon: PackageCheck, textColor: 'text-emerald-500', bgColor: 'bg-emerald-500' },
      Canceled: { Icon: XCircle, textColor: 'text-slate-500', bgColor: 'bg-slate-500' },
      Refund: { Icon: Undo2, textColor: 'text-rose-500', bgColor: 'bg-rose-500' },
      Complain: { Icon: AlertCircle, textColor: 'text-red-500', bgColor: 'bg-red-500' },
      Reorder: { Icon: RefreshCw, textColor: 'text-indigo-500', bgColor: 'bg-indigo-500' },
      'Follow-up': { Icon: MailQuestion, textColor: 'text-yellow-500', bgColor: 'bg-yellow-500' },
      Review: { Icon: Star, textColor: 'text-amber-500', bgColor: 'bg-amber-500' },
    };


    interface ActivityFeedProps {
      messages: Message[];
      contact: Contact;
    }


    export const ActivityFeed = forwardRef<HTMLDivElement, ActivityFeedProps>(({
    messages, contact }, ref) => {
      const getAssigneeById = useMessagingStore(state => state.getAssigneeById);

      return (
        <div ref={ref} className="flex-1 overflow-y-auto p-6 space-y-6 no-scrollbar">
          {messages.map((message) => {
            const assignee = message.userId ? getAssigneeById(message.userId) : null;
            
            if (message.journeyPoint) {
              const journeyInfo = journeyInfoMap[message.journeyPoint];
              const { Icon } = journeyInfo;
              return (
                <div key={message.id} data-message-id={message.id} className="relative py-3">
                  <div className="absolute inset-0 flex items-center" aria-hidden="true">
                    <div className="w-full border-t border-dashed" />
                  </div>
                  <div className="relative flex justify-center">
                    <div className="bg-background px-3 flex items-center gap-2 text-sm font-medium">
                      <Icon className={cn("w-4 h-4", journeyInfo.textColor)} />
                      <span className={cn("font-semibold", journeyInfo.textColor)}>{message.journeyPoint}</span>
                      <span className="text-xs text-muted-foreground font-normal whitespace-nowrap">{formatDistanceToNow(new Date(message.timestamp), { addSuffix: true })}</span>
                    </div>
                  </div>
                </div>
              );
            }
            
            if (message.type === 'system') {
              return (
                <div key={message.id} data-message-id={message.id} className="flex items-center justify-center gap-2 text-xs text-muted-foreground">
                  <Info className="w-3.5 h-3.5" />
                  <p>{message.text}</p>
                  <p className="whitespace-nowrap">{formatDistanceToNow(new Date(message.timestamp), { addSuffix: true })}</p>
                </div>
              );
            }

            if (message.type === 'note') {
              return (
                <div key={message.id} data-message-id={message.id} className="flex items-start gap-3">
                  <div className="p-1.5 bg-yellow-400/20 text-yellow-600 rounded-full mt-1.5">
                    <StickyNote className="w-4 h-4" />
                  </div>
                  <div className="flex-1">
                    <div className="flex items-center gap-2 mb-1">
                      <p className="font-semibold text-sm">{assignee?.name || 'User'}</p>
                      <p className="text-xs text-muted-foreground">{formatDistanceToNow(new Date(message.timestamp), { addSuffix: true })}</p>
                    </div>
                    <div className="bg-card border rounded-lg p-3 text-sm">
                      <p>{message.text}</p>
                    </div>
                  </div>
                </div>
              );
            }

            // Default: 'comment' type
            return (
              <div key={message.id} data-message-id={message.id} className={cn(
                "flex items-end gap-3",
                message.sender === 'user' ? 'justify-end' : 'justify-start'
              )}>
                {message.sender === 'contact' && (
                  <Avatar className="h-8 w-8">
                    <AvatarImage src={contact.avatar} />
                    <AvatarFallback>{contact.name.charAt(0)}</AvatarFallback>
                  </Avatar>
                )}
                <div className={cn(
                  "max-w-xs md:max-w-md lg:max-w-lg p-3 rounded-2xl",
                  message.sender === 'user' 
                    ? 'bg-primary text-primary-foreground rounded-br-none' 
                    : 'bg-card border rounded-bl-none'
                )}>
                  <p className="text-sm">{message.text}</p>
                </div>
              </div>
            );
          })}
        </div>
      );
    });


    ActivityFeed.displayName = 'ActivityFeed';
approved: false
linesAdded: null
linesRemoved: null
linesDifference: null
gitCommittedAt: null
status: undone
id: 419
