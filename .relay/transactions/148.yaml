uuid: 4de2557c-f377-4591-ab51-692797e8412e
projectId: jeli-app-shell
createdAt: '2025-10-12T04:28:39.811Z'
gitCommitMsg: >-
  refactor(layout): create immersive full-height content views

  Refactored page layouts to provide a more immersive, full-height content
  experience.

  - Removed hardcoded padding from the `RightPane` component to allow content to
  span the full height in overlay mode. - Updated `Dashboard`, `Settings`,
  `Notifications`, and `ToasterDemo` pages to manage their own internal padding.
  - Restructured main page views to have an unpadded, scrollable root with a
  padded content wrapper, making the scrollbar align with the viewport edge and
  enabling potential full-width content sections. - Fixed a double-padding issue
  on the `NotificationsPage` card.
promptSummary: >-
  The user wants to remove the containers that block the main content view,
  specifically in the upper header area and in the overlay pane view, to achieve
  a more full-height, immersive experience.
reasoning:
  - >-
    Based on your request to make the content views more immersive, especially
    in the overlay side pane and the main content area, I'll make the following
    changes:
  - >-
    1.  **Right Pane (Overlay View)**: I'll remove the hardcoded padding from
    the `RightPane` component. This will make the content area span the full
    height of the pane, achieving the "immersive" feel you described.
  - >-
    2.  **Page Content Padding**: To compensate for removing the padding from
    `RightPane`, I'll adjust the individual page components (`Dashboard`,
    `Settings`, `Notifications`, `Toaster Demo`) to manage their own padding.
    This ensures they look correct in both the main view and the now un-padded
    side pane.
  - >-
    3.  **Main Content Immersiveness**: I'll apply the same structural change to
    all main page components. I'll make the root scrollable container full-width
    and wrap the actual content in a padded container. This makes the scrollbar
    sit at the very edge of the view and allows for potential full-width content
    sections in the future, while keeping the primary content neatly padded.
  - >-
    4.  **Consistency Fix**: I'll correct a minor double-padding issue in the
    `NotificationsPage` to ensure consistent layout.
  - >-
    These changes will result in a cleaner, more immersive layout that directly
    addresses the "blocking container" issue you pointed out.
  - '### Right Pane'
  - >-
    I'll start by removing the padding from the `RightPane` component when it's
    in the side pane (overlay) mode. This makes the content area full-height.
  - '### Update Page Components for New Layout'
  - >-
    Now, I'll update the main pages to adapt to the new immersive structure and
    to correctly apply padding when used within the updated `RightPane`.
  - 'First, for the Dashboard page:'
  - >-
    Next, the Notifications page. I'll also fix the double padding on the card
    here.
  - 'Then, the Settings page:'
  - 'And finally, the Toaster Demo page:'
  - '### Update App Composition'
  - >-
    To ensure `SettingsContent` has padding when rendered directly in the side
    pane, I'll wrap it in a padded `div` inside the main `App.tsx` component.
  - >-
    These changes should give you the more immersive, full-height content
    experience you're looking for.
operations:
  - type: write
    path: src/components/layout/RightPane.tsx
    content: >+
      --- src/components/layout/RightPane.tsx

      +++ src/components/layout/RightPane.tsx

      @@ -47,7 +47,7 @@
                 {header}
               </div>
             )}
      -      <div className={cn("flex-1 overflow-y-auto", bodyState ===
      BODY_STATES.SIDE_PANE && "px-8 py-6")}>

      +      <div className={cn("flex-1 overflow-y-auto")}>
               {children}
             </div>
           </aside>

    patchStrategy: standard-diff
  - type: write
    path: src/pages/Dashboard/index.tsx
    content: >+
      --- src/pages/Dashboard/index.tsx

      +++ src/pages/Dashboard/index.tsx

      @@ -103,17 +103,19 @@
           return (
               <div 
                 ref={contentRef}
      -          className={cn("h-full overflow-y-auto space-y-8", !isInSidePane
      && "p-6 lg:px-12")}

      +          className={cn("h-full overflow-y-auto")}
                 onScroll={handleScroll}
               >
      -          {/* Header */}

      -          {!isInSidePane && (

      -            <PageHeader

      -              title="Dashboard"

      -              description="Welcome to the Jeli App Shell demo! Explore
      all the features and customization options."

      -            />

      -          )}

      -            {/* Stats Cards */}

      +          <div className={cn("space-y-8", !isInSidePane ? "p-6 lg:px-12"
      : "p-6")}>

      +            {/* Header */}

      +            {!isInSidePane && (

      +              <PageHeader

      +                title="Dashboard"

      +                description="Welcome to the Jeli App Shell demo! Explore
      all the features and customization options."

      +              />

      +            )}

      +              {/* Stats Cards */}
                   <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
                     {statsCards.map((stat, index) => (
                       <Card
      @@ -254,6 +256,7 @@
                       </div>
                     </Card>
                   </div>
      +          </div>
                 </div>
                 {showScrollToBottom && (
                   <button

    patchStrategy: standard-diff
  - type: write
    path: src/pages/Notifications/index.tsx
    content: >+
      --- src/pages/Notifications/index.tsx

      +++ src/pages/Notifications/index.tsx

      @@ -257,7 +257,7 @@
         const filteredNotifications = getFilteredNotifications();
       
         const content = (
      -    <Card className={cn("flex w-full flex-col shadow-none", isInSidePane
      ? "border-none" : "p-6 lg:p-8")}>

      +    <Card className={cn("flex w-full flex-col shadow-none", isInSidePane
      ? "border-none" : "")}>
             <CardHeader className="p-0">
               <div className="flex items-center justify-between">
                 <h3 className="text-lg font-semibold">
      @@ -290,14 +290,16 @@
         );
       
         return (
      -    <div className={cn("overflow-y-auto", !isInSidePane ? "h-full p-6
      lg:px-12 space-y-8" : "h-full")}>

      -      {!isInSidePane && (

      -        <PageHeader

      -          title="Notifications"

      -          description="Manage your notifications and stay up-to-date."

      -        />

      -      )}

      -      {content}

      +    <div className={cn("overflow-y-auto h-full")}>

      +      <div className={cn("space-y-8", !isInSidePane ? "p-6 lg:px-12" :
      "p-6")}>

      +        {!isInSidePane && (

      +          <PageHeader

      +            title="Notifications"

      +            description="Manage your notifications and stay up-to-date."

      +          />

      +        )}

      +        {content}

      +      </div>
           </div>
         );
       };

    patchStrategy: standard-diff
  - type: write
    path: src/pages/Settings/index.tsx
    content: >+
      --- src/pages/Settings/index.tsx

      +++ src/pages/Settings/index.tsx

      @@ -5,14 +5,16 @@
       
         return (
           <div
      -      className="h-full overflow-y-auto p-6 lg:px-12 space-y-8"

      +      className="h-full overflow-y-auto"
             onScroll={onScroll}
           >
      -      {/* Header */}

      -      <PageHeader

      -        title="Settings"

      -        description="Customize your experience. Changes are saved
      automatically."

      -      />

      -      <SettingsContent />

      +      <div className="p-6 lg:px-12 space-y-8">

      +        {/* Header */}

      +        <PageHeader

      +          title="Settings"

      +          description="Customize your experience. Changes are saved
      automatically."

      +        />

      +        <SettingsContent />

      +      </div>
           </div>
         )
       }

    patchStrategy: standard-diff
  - type: write
    path: src/pages/ToasterDemo/index.tsx
    content: >+
      --- src/pages/ToasterDemo/index.tsx

      +++ src/pages/ToasterDemo/index.tsx

      @@ -95,17 +95,19 @@
         };
       
         return (
      -    <div className={cn("overflow-y-auto space-y-8", !isInSidePane ?
      "h-full p-6 lg:px-12" : "h-full")}>

      -      {/* Header */}

      -      {!isInSidePane && (

      -        <PageHeader

      -          title="Toaster"

      -          description="A customizable toast component for notifications."

      -        />

      -      )}

      -      <div className="space-y-6">

      +    <div className={cn("overflow-y-auto h-full")}>

      +      <div className={cn("space-y-8", !isInSidePane ? "p-6 lg:px-12" :
      "p-6")}>

      +        {/* Header */}

      +        {!isInSidePane && (

      +          <PageHeader

      +            title="Toaster"

      +            description="A customizable toast component for
      notifications."

      +          />

      +        )}
               <div className="space-y-6">
                 <DemoSection title="Toast Variants">
                   <div className="flex flex-wrap gap-4">
                     {(['default', 'success', 'error', 'warning'] as Variant[]).map((variantKey) => (
      @@ -148,7 +150,7 @@
                   </Button>
                 </DemoSection>
               </div>
      -      </div>

      +      </div>
           </div>
         );
       }

    patchStrategy: standard-diff
  - type: write
    path: src/App.tsx
    content: >+
      --- src/App.tsx

      +++ src/App.tsx

      @@ -124,7 +124,7 @@
       
         const contentMap = {
           main: { title: 'Dashboard', icon: LayoutDashboard, page: 'dashboard', content: <DashboardContent isInSidePane={isOverlaySidePane} /> },
      -    settings: { title: 'Settings', icon: Settings, page: 'settings',
      content: isOverlaySidePane ? <SettingsContent /> : <SettingsPage /> },

      +    settings: { title: 'Settings', icon: Settings, page: 'settings',
      content: isOverlaySidePane ? <div className="p-6"><SettingsContent
      /></div> : <SettingsPage /> },
           toaster: { title: 'Toaster Demo', icon: Component, page: 'toaster', content: <ToasterDemo isInSidePane={isOverlaySidePane} /> },
           notifications: { title: 'Notifications', icon: Bell, page: 'notifications', content: <NotificationsPage isInSidePane={isOverlaySidePane} /> },
           details: { title: 'Details Panel', icon: SlidersHorizontal, content: <div className="p-6"><p className="text-muted-foreground">This is the side pane. It can be used to display contextual information, forms, or actions related to the main content.</p></div> }

    patchStrategy: standard-diff
snapshot:
  src/components/layout/RightPane.tsx: >-
    import { forwardRef, type ReactNode } from 'react'

    import { ChevronRight, X } from 'lucide-react'

    import { cn, BODY_STATES } from '@/lib/utils'

    import { useAppShell } from '@/context/AppShellContext'


    interface RightPaneProps {
      children?: ReactNode
      header?: ReactNode
      className?: string
    }


    export const RightPane = forwardRef<HTMLDivElement, RightPaneProps>(({
    children, header, className }, ref) => {
      const { closeSidePane, dispatch, bodyState, fullscreenTarget, toggleFullscreen } = useAppShell();
      const isSplitView = bodyState === BODY_STATES.SPLIT_VIEW;
      const isFullscreen = bodyState === BODY_STATES.FULLSCREEN;

      if (isFullscreen && fullscreenTarget !== 'right') {
        return null;
      }

      return (
        <aside
          ref={ref}
          className={cn(
            "border-l border-border flex flex-col h-full overflow-hidden",
            isSplitView && "relative bg-background",
            !isSplitView && !isFullscreen && "fixed top-0 right-0 z-[60] bg-card", // side pane overlay
            isFullscreen && fullscreenTarget === 'right' && "fixed inset-0 z-[60] bg-card", // fullscreen
            className,
          )}
        >
          {isFullscreen && fullscreenTarget === 'right' && (
            <button
              onClick={() => toggleFullscreen()}
              className="fixed top-6 right-6 lg:right-12 z-[100] h-12 w-12 flex items-center justify-center rounded-full bg-card/50 backdrop-blur-sm hover:bg-card/75 transition-colors group"
              title="Exit Fullscreen"
            >
              <X className="w-6 h-6 group-hover:scale-110 group-hover:rotate-90 transition-all duration-300" />
            </button>
          )}
          {bodyState !== BODY_STATES.SPLIT_VIEW && !isFullscreen && (
            <button
              onClick={closeSidePane}
              className="absolute top-1/2 -left-px -translate-y-1/2 -translate-x-full w-8 h-16 bg-card border border-r-0 border-border rounded-l-lg flex items-center justify-center hover:bg-accent transition-colors group z-10"
              title="Close pane"
            >
              <ChevronRight className="w-5 h-5 text-muted-foreground group-hover:text-foreground transition-colors" />
            </button>
          )}
          <div 
            className={cn(
              "absolute top-0 left-0 w-2 h-full bg-transparent hover:bg-primary/20 cursor-col-resize z-50 transition-colors duration-200 group -translate-x-1/2"
            )}
            onMouseDown={(e) => {
              e.preventDefault()
              dispatch({ type: 'SET_IS_RESIZING_RIGHT_PANE', payload: true });
            }}
          >
            <div className="w-0.5 h-full bg-border group-hover:bg-primary transition-colors duration-200 mx-auto" />
          </div>
          {header && (
            <div className="flex items-center justify-between p-4 border-b border-border h-20 flex-shrink-0 pl-6">
              {header}
            </div>
          )}
          <div className={cn("flex-1 overflow-y-auto", bodyState === BODY_STATES.SIDE_PANE && "px-8 py-6")}>
            {children}
          </div>
        </aside>
      )
    })

    RightPane.displayName = "RightPane"
  src/pages/Dashboard/index.tsx: >-
    import { useRef } from 'react'

    import { 
      BarChart3, 
      TrendingUp, 
      Users, 
      DollarSign, 
      Activity,
      Calendar,
      Clock,
      MessageSquare,
      FileText,
      Star,
      ChevronRight,
      MoreVertical,
      ArrowDown
    } from 'lucide-react'

    import { cn } from '@/lib/utils'

    import { DemoContent } from './DemoContent'

    import { useDashboardAnimations } from './hooks/useDashboardAnimations.hook'

    import { useDashboardScroll } from './hooks/useDashboardScroll.hook'

    import { PageHeader } from '@/components/shared/PageHeader';

    import { Card } from '@/components/ui/card';


    interface StatsCard {
      title: string
      value: string
      change: string
      trend: 'up' | 'down'
      icon: React.ReactNode
    }


    interface ActivityItem {
      id: string
      type: 'comment' | 'file' | 'meeting' | 'task'
      title: string
      description: string
      time: string
      user: string
    }


    const statsCards: StatsCard[] = [
      {
        title: "Total Revenue",
        value: "$45,231.89",
        change: "+20.1%",
        trend: "up",
        icon: <DollarSign className="w-5 h-5" />
      },
      {
        title: "Active Users",
        value: "2,350",
        change: "+180.1%",
        trend: "up",
        icon: <Users className="w-5 h-5" />
      },
      {
        title: "Conversion Rate",
        value: "12.5%",
        change: "+19%",
        trend: "up",
        icon: <TrendingUp className="w-5 h-5" />
      },
      {
        title: "Performance",
        value: "573ms",
        change: "-5.3%",
        trend: "down",
        icon: <Activity className="w-5 h-5" />
      }
    ]


    const recentActivity: ActivityItem[] = [
      {
        id: "1",
        type: "comment",
        title: "New comment on Project Alpha",
        description: "Sarah Johnson added a comment to the design review",
        time: "2 minutes ago",
        user: "SJ"
      },
      {
        id: "2",
        type: "file",
        title: "Document uploaded",
        description: "quarterly-report.pdf was uploaded to Documents",
        time: "15 minutes ago",
        user: "MD"
      },
      {
        id: "3",
        type: "meeting",
        title: "Meeting scheduled",
        description: "Weekly standup meeting scheduled for tomorrow 9 AM",
        time: "1 hour ago",
        user: "RW"
      },
      {
        id: "4",
        type: "task",
        title: "Task completed",
        description: "UI wireframes for mobile app completed",
        time: "2 hours ago",
        user: "AL"
      }
    ]


    interface DashboardContentProps {
      isInSidePane?: boolean;
    }


    export function DashboardContent({ isInSidePane = false }:
    DashboardContentProps) {
        const contentRef = useRef<HTMLDivElement>(null)
        const cardsRef = useRef<(HTMLDivElement | null)[]>([])
        const { showScrollToBottom, handleScroll, scrollToBottom } = useDashboardScroll(contentRef, isInSidePane);

        useDashboardAnimations(contentRef, cardsRef);

        const getTypeIcon = (type: ActivityItem['type']) => {
          switch (type) {
            case 'comment':
              return <MessageSquare className="w-4 h-4" />
            case 'file':
              return <FileText className="w-4 h-4" />
            case 'meeting':
              return <Calendar className="w-4 h-4" />
            case 'task':
              return <Star className="w-4 h-4" />
            default:
              return <Activity className="w-4 h-4" />
          }
        }

        return (
            <div 
              ref={contentRef}
              className={cn("h-full overflow-y-auto space-y-8", !isInSidePane && "p-6 lg:px-12")}
              onScroll={handleScroll}
            >
              {/* Header */}
              {!isInSidePane && (
                <PageHeader
                  title="Dashboard"
                  description="Welcome to the Jeli App Shell demo! Explore all the features and customization options."
                />
              )}
                {/* Stats Cards */}
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
                  {statsCards.map((stat, index) => (
                    <Card
                    key={stat.title}
                    ref={el => cardsRef.current[index] = el}
                    className="p-6 border-border/50 hover:border-primary/30 transition-all duration-300 group cursor-pointer"
                  >
                    <div className="flex items-center justify-between">
                      <div className="p-3 bg-primary/10 rounded-full group-hover:bg-primary/20 transition-colors">
                        {stat.icon}
                      </div>
                      <div className={cn(
                        "text-sm font-medium",
                        stat.trend === 'up' ? "text-green-600" : "text-red-600"
                      )}>
                        {stat.change}
                      </div>
                    </div>
                    <div className="mt-4">
                      <h3 className="text-2xl font-bold">{stat.value}</h3>
                      <p className="text-sm text-muted-foreground mt-1">{stat.title}</p>
                    </div>
                  </Card>
                  ))}
                </div>

                {/* Demo Content */}
                <DemoContent />

                {/* Main Content Grid */}
                <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
                {/* Chart Area */}
                <div className="lg:col-span-2 space-y-6">
                  {/* Analytics Chart */}
                  <Card className="p-6 border-border/50">
                    <div className="flex items-center justify-between mb-6">
                      <h3 className="text-lg font-semibold">Analytics Overview</h3>
                      <button className="h-8 w-8 flex items-center justify-center hover:bg-accent rounded-full transition-colors">
                        <MoreVertical className="w-5 h-5" />
                      </button>
                    </div>
                    
                    {/* Mock Chart */}
                    <div className="h-64 bg-gradient-to-br from-primary/10 to-transparent rounded-xl flex items-center justify-center border border-border/50">
                      <div className="text-center">
                        <BarChart3 className="w-12 h-12 text-primary mx-auto mb-2" />
                        <p className="text-muted-foreground">Chart visualization would go here</p>
                      </div>
                    </div>
                  </Card>

                  {/* Recent Projects */}
                  <Card className="p-6 border-border/50">
                    <div className="flex items-center justify-between mb-6">
                      <h3 className="text-lg font-semibold">Recent Projects</h3>
                      <button className="text-primary hover:text-primary/80 text-sm font-medium flex items-center gap-1">
                        View All
                        <ChevronRight className="w-4 h-4" />
                      </button>
                    </div>
                    
                    <div className="space-y-4">
                      {[
                        { name: "E-commerce Platform", progress: 75, team: 5, deadline: "Dec 15" },
                        { name: "Mobile App Redesign", progress: 45, team: 3, deadline: "Jan 20" },
                        { name: "Marketing Website", progress: 90, team: 4, deadline: "Dec 5" }
                      ].map((project) => (
                        <div key={project.name} className="p-4 bg-accent/30 rounded-xl hover:bg-accent/50 transition-colors cursor-pointer">
                          <div className="flex items-center justify-between mb-2">
                            <h4 className="font-medium">{project.name}</h4>
                            <span className="text-sm text-muted-foreground">{project.progress}%</span>
                          </div>
                          <div className="w-full bg-muted rounded-full h-2 mb-3">
                            <div 
                              className="bg-primary h-2 rounded-full transition-all duration-500"
                              style={{ width: `${project.progress}%` }}
                            />
                          </div>
                          <div className="flex items-center justify-between text-sm text-muted-foreground">
                            <span>{project.team} team members</span>
                            <span>Due {project.deadline}</span>
                          </div>
                        </div>
                      ))}
                    </div>
                  </Card>
                </div>

                {/* Sidebar Content */}
                <div className="space-y-6">
                  {/* Quick Actions */}
                  <Card className="p-6 border-border/50">
                    <h3 className="text-lg font-semibold mb-4">Quick Actions</h3>
                    <div className="space-y-3">
                      {[
                        { icon: <FileText className="w-4 h-4" />, label: "Create Document", color: "bg-blue-500/10 text-blue-600" },
                        { icon: <Calendar className="w-4 h-4" />, label: "Schedule Meeting", color: "bg-green-500/10 text-green-600" },
                        { icon: <Users className="w-4 h-4" />, label: "Invite Team", color: "bg-purple-500/10 text-purple-600" },
                        { icon: <BarChart3 className="w-4 h-4" />, label: "View Reports", color: "bg-orange-500/10 text-orange-600" }
                      ].map((action) => (
                        <button
                          key={action.label}
                          className="w-full flex items-center gap-3 p-3 hover:bg-accent rounded-lg transition-colors text-left"
                        >
                          <div className={cn("p-2 rounded-full", action.color)}>
                            {action.icon}
                          </div>
                          <span className="font-medium">{action.label}</span>
                        </button>
                      ))}
                    </div>
                  </Card>

                  {/* Recent Activity */}
                  <Card className="p-6 border-border/50">
                    <h3 className="text-lg font-semibold mb-4">Recent Activity</h3>
                    <div className="space-y-4">
                      {recentActivity.map((activity) => (
                        <div key={activity.id} className="flex items-start gap-3 p-3 hover:bg-accent/30 rounded-xl transition-colors cursor-pointer">
                          <div className="p-2 bg-primary/10 rounded-full flex-shrink-0">
                            {getTypeIcon(activity.type)}
                          </div>
                          <div className="flex-1 min-w-0">
                            <h4 className="font-medium text-sm mb-1">{activity.title}</h4>
                            <p className="text-xs text-muted-foreground mb-2">{activity.description}</p>
                            <div className="flex items-center gap-2 text-xs text-muted-foreground">
                              <Clock className="w-3 h-3" />
                              <span>{activity.time}</span>
                              <div className="w-5 h-5 bg-primary rounded-full flex items-center justify-center text-primary-foreground text-xs font-medium">
                                {activity.user}
                              </div>
                            </div>
                          </div>
                        </div>
                      ))}
                    </div>
                  </Card>
                </div>
              </div>
              {showScrollToBottom && (
                <button
                  onClick={scrollToBottom}
                  className="fixed bottom-8 right-8 w-12 h-12 bg-primary text-primary-foreground rounded-full flex items-center justify-center shadow-lg hover:bg-primary/90 transition-all animate-fade-in z-[51]"
                  style={{ animation: 'bounce 2s infinite' }}
                  title="Scroll to bottom"
                >
                  <ArrowDown className="w-6 h-6" />
                </button>
              )}
          </div>
        )
    }
  src/pages/Notifications/index.tsx: >-
    import React from "react";

    import { Avatar, AvatarFallback, AvatarImage } from
    "@/components/ui/avatar";

    import { Badge } from "@/components/ui/badge";

    import { Button } from "@/components/ui/button";

    import { Card, CardContent, CardHeader } from "@/components/ui/card";

    import { Tabs, TabsList, TabsTrigger } from "@/components/ui/tabs";

    import { PageHeader } from "@/components/shared/PageHeader";

    import { useToast } from "@/components/ui/toast";

    import { cn } from "@/lib/utils";

    import { 
      CheckCheck, 
      Download, 
      Settings, 
      Bell,
      MessageSquare,
      UserPlus,
      Mail,
      File as FileIcon,
      Heart,
      AtSign,
      ClipboardCheck,
      ShieldCheck,
    } from "lucide-react";



    type Notification = {
      id: number;
      type: string;
      user: {
        name: string;
        avatar: string;
        fallback: string;
      };
      action: string;
      target?: string;
      content?: string;
      timestamp: string;
      timeAgo: string;
      isRead: boolean;
      hasActions?: boolean;
      file?: {
        name: string;
        size: string;
        type: string;
      };
    };


    const initialNotifications: Array<Notification> = [
      {
        id: 1,
        type: "comment",
        user: { name: "Amélie", avatar: "https://api.dicebear.com/7.x/notionists/svg?seed=Amélie", fallback: "A" },
        action: "commented in",
        target: "Dashboard 2.0",
        content: "Really love this approach. I think this is the best solution for the document sync UX issue.",
        timestamp: "Friday 3:12 PM",
        timeAgo: "2 hours ago",
        isRead: false,
      },
      {
        id: 2,
        type: "follow",
        user: { name: "Sienna", avatar: "https://api.dicebear.com/7.x/notionists/svg?seed=Sienna", fallback: "S" },
        action: "followed you",
        timestamp: "Friday 3:04 PM",
        timeAgo: "2 hours ago",
        isRead: false,
      },
      {
        id: 3,
        type: "invitation",
        user: { name: "Ammar", avatar: "https://api.dicebear.com/7.x/notionists/svg?seed=Ammar", fallback: "A" },
        action: "invited you to",
        target: "Blog design",
        timestamp: "Friday 2:22 PM",
        timeAgo: "3 hours ago",
        isRead: true,
        hasActions: true,
      },
      {
        id: 4,
        type: "file_share",
        user: { name: "Mathilde", avatar: "https://api.dicebear.com/7.x/notionists/svg?seed=Mathilde", fallback: "M" },
        action: "shared a file in",
        target: "Dashboard 2.0",
        file: { name: "Prototype recording 01.mp4", size: "14 MB", type: "MP4" },
        timestamp: "Friday 1:40 PM",
        timeAgo: "4 hours ago",
        isRead: true,
      },
      {
        id: 5,
        type: "mention",
        user: { name: "James", avatar: "https://api.dicebear.com/7.x/notionists/svg?seed=James", fallback: "J" },
        action: "mentioned you in",
        target: "Project Alpha",
        content: "Hey @you, can you review the latest designs when you get a chance?",
        timestamp: "Thursday 11:30 AM",
        timeAgo: "1 day ago",
        isRead: true,
      },
      {
        id: 6,
        type: "like",
        user: { name: "Sofia", avatar: "https://api.dicebear.com/7.x/notionists/svg?seed=Sofia", fallback: "S" },
        action: "liked your comment in",
        target: "Team Meeting Notes",
        timestamp: "Thursday 9:15 AM",
        timeAgo: "1 day ago",
        isRead: true,
      },
      {
        id: 7,
        type: "task_assignment",
        user: { name: "Admin", avatar: "https://api.dicebear.com/7.x/bottts/svg?seed=Admin", fallback: "AD" },
        action: "assigned you a new task in",
        target: "Q3 Marketing",
        content: "Finalize the social media campaign assets.",
        timestamp: "Wednesday 5:00 PM",
        timeAgo: "2 days ago",
        isRead: true,
      },
      {
        id: 8,
        type: "system_update",
        user: { name: "System", avatar: "https://api.dicebear.com/7.x/shapes/svg?seed=System", fallback: "SYS" },
        action: "pushed a new update",
        content: "Version 2.1.0 is now live with improved performance and new features. Check out the release notes for more details.",
        timestamp: "Wednesday 9:00 AM",
        timeAgo: "2 days ago",
        isRead: true,
      },
      {
        id: 9,
        type: 'comment',
        user: { name: 'Elena', avatar: 'https://api.dicebear.com/7.x/notionists/svg?seed=Elena', fallback: 'E' },
        action: 'replied to your comment in',
        target: 'Dashboard 2.0',
        content: 'Thanks for the feedback! I\'ve updated the prototype.',
        timestamp: 'Tuesday 4:30 PM',
        timeAgo: '3 days ago',
        isRead: false,
      },
      {
        id: 10,
        type: 'invitation',
        user: { name: 'Carlos', avatar: 'https://api.dicebear.com/7.x/notionists/svg?seed=Carlos', fallback: 'C' },
        action: 'invited you to',
        target: 'API Integration',
        timestamp: 'Tuesday 10:00 AM',
        timeAgo: '3 days ago',
        isRead: true,
        hasActions: true,
      },
    ];


    const iconMap: { [key: string]: React.ElementType } = {
      comment: MessageSquare,
      follow: UserPlus,
      invitation: Mail,
      file_share: FileIcon,
      mention: AtSign,
      like: Heart,
      task_assignment: ClipboardCheck,
      system_update: ShieldCheck,
    };


    function NotificationItem({ notification, onMarkAsRead, isInSidePane }: {
    notification: Notification; onMarkAsRead: (id: number) => void;
    isInSidePane?: boolean; }) {
      const Icon = iconMap[notification.type];

      return (
        <div className={cn(
          "group w-full py-4 rounded-xl hover:bg-accent/50 transition-colors duration-200",
          isInSidePane ? "" : "-mx-4 px-4"
        )}>
          <div className="flex gap-3">
            <div className="relative h-10 w-10 shrink-0">
              <Avatar className="h-10 w-10">
                <AvatarImage src={notification.user.avatar} alt={`${notification.user.name}'s profile picture`} />
                <AvatarFallback>{notification.user.fallback}</AvatarFallback>
              </Avatar>
              {Icon && (
                <div className="absolute -bottom-1 -right-1 flex h-5 w-5 items-center justify-center rounded-full border-2 border-card bg-background">
                  <Icon className={cn("h-3 w-3", notification.type === 'like' ? 'text-red-500 fill-current' : 'text-muted-foreground')} />
                </div>
              )}
            </div>

            <div className="flex flex-1 flex-col space-y-2">
              <div className="flex items-start justify-between">
                <div className="text-sm">
                  <span className="font-semibold">{notification.user.name}</span>
                  <span className="text-muted-foreground"> {notification.action} </span>
                  {notification.target && <span className="font-semibold">{notification.target}</span>}
                  <div className="mt-0.5 text-xs text-muted-foreground">{notification.timeAgo}</div>
                </div>
                <button
                  onClick={() => !notification.isRead && onMarkAsRead(notification.id)}
                  title={notification.isRead ? "Read" : "Mark as read"}
                  className={cn("size-2.5 rounded-full mt-1 shrink-0 transition-all duration-300",
                    notification.isRead ? 'bg-transparent' : 'bg-primary hover:scale-125 cursor-pointer'
                  )}
                ></button>
              </div>

              {notification.content && <div className="rounded-lg border bg-muted/50 p-3 text-sm">{notification.content}</div>}

              {notification.file && (
                <div className="flex items-center gap-2 rounded-lg bg-muted/50 p-2 border border-border">
                  <div className="shrink-0 w-10 h-10 flex items-center justify-center bg-background rounded-md border border-border">
                    <FileIcon className="w-5 h-5 text-muted-foreground" />
                  </div>
                  <div className="flex-1 min-w-0">
                    <div className="text-sm font-medium truncate">{notification.file.name}</div>
                    <div className="text-xs text-muted-foreground">{notification.file.type} • {notification.file.size}</div>
                  </div>
                  <Button variant="ghost" size="icon" className="size-8 shrink-0">
                    <Download className="w-4 h-4" />
                  </Button>
                </div>
              )}

              {notification.hasActions && (
                <div className="flex gap-2">
                  <Button variant="outline" size="sm">Decline</Button>
                  <Button size="sm">Accept</Button>
                </div>
              )}
            </div>
          </div>
        </div>
      );
    }


    export function NotificationsPage({ isInSidePane = false }: { isInSidePane?:
    boolean }) {
      const [notifications, setNotifications] = React.useState<Notification[]>(initialNotifications);
      const [activeTab, setActiveTab] = React.useState<string>("all");
      const { show: showToast } = useToast();

      const handleMarkAsRead = (id: number) => {
        setNotifications(prev =>
          prev.map(n => (n.id === id ? { ...n, isRead: true } : n))
        );
      };

      const handleMarkAllAsRead = () => {
        const unreadCount = notifications.filter(n => !n.isRead).length;
        if (unreadCount === 0) {
          showToast({
            title: "Already up to date!",
            message: "You have no unread notifications.",
            variant: "default",
          });
          return;
        }
        setNotifications(prev => prev.map(n => ({ ...n, isRead: true })));
        showToast({
            title: "All Caught Up!",
            message: "All notifications have been marked as read.",
            variant: "success",
        });
      };

      const unreadCount = notifications.filter(n => !n.isRead).length;

      const verifiedNotifications = notifications.filter((n) => n.type === "follow" || n.type === "like");
      const mentionNotifications = notifications.filter((n) => n.type === "mention");

      const verifiedCount = verifiedNotifications.filter(n => !n.isRead).length;
      const mentionCount = mentionNotifications.filter(n => !n.isRead).length;

      const getFilteredNotifications = () => {
        switch (activeTab) {
          case "verified": return verifiedNotifications;
          case "mentions": return mentionNotifications;
          default: return notifications;
        }
      };

      const filteredNotifications = getFilteredNotifications();

      const content = (
        <Card className={cn("flex w-full flex-col shadow-none", isInSidePane ? "border-none" : "p-6 lg:p-8")}>
          <CardHeader className="p-0">
            <div className="flex items-center justify-between">
              <h3 className="text-lg font-semibold">
                Your notifications
              </h3>
              <div className="flex items-center gap-1">
                <Button variant="ghost" size="icon" className="size-8" onClick={handleMarkAllAsRead} title="Mark all as read">
                  <CheckCheck className="size-4 text-muted-foreground" />
                </Button>
                <Button variant="ghost" size="icon" className="size-8">
                  <Settings className="size-4 text-muted-foreground" />
                </Button>
              </div>
            </div>

            <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full flex-col justify-start mt-4">
              <TabsList className="gap-1.5">
                <TabsTrigger value="all" className="gap-1.5">
                  View all {unreadCount > 0 && <Badge variant="secondary" className="rounded-full">{unreadCount}</Badge>}
                </TabsTrigger>
                <TabsTrigger value="verified" className="gap-1.5">
                  Verified {verifiedCount > 0 && <Badge variant="secondary" className="rounded-full">{verifiedCount}</Badge>}
                </TabsTrigger>
                <TabsTrigger value="mentions" className="gap-1.5">
                  Mentions {mentionCount > 0 && <Badge variant="secondary" className="rounded-full">{mentionCount}</Badge>}
                </TabsTrigger>
              </TabsList>
            </Tabs>
          </CardHeader>

          <CardContent className="h-full p-0 mt-6">
            <div className="space-y-0 divide-y divide-border">
              {filteredNotifications.length > 0 ? (
                filteredNotifications.map((notification) => (
                  <NotificationItem key={notification.id} notification={notification} onMarkAsRead={handleMarkAsRead} isInSidePane={isInSidePane} />
                ))
              ) : (
                <div className="flex flex-col items-center justify-center space-y-2.5 py-12 text-center">
                  <div className="rounded-full bg-muted p-4">
                    <Bell className="text-muted-foreground" />
                  </div>
                  <p className="text-sm font-medium text-muted-foreground">No notifications yet.</p>
                </div>
              )}
            </div>
          </CardContent>
        </Card>
      );

      return (
        <div className={cn("overflow-y-auto", !isInSidePane ? "h-full p-6 lg:px-12 space-y-8" : "h-full")}>
          {!isInSidePane && (
            <PageHeader
              title="Notifications"
              description="Manage your notifications and stay up-to-date."
            />
          )}
          {content}
        </div>
      );
    };
  src/pages/Settings/index.tsx: |-
    import { SettingsContent } from '@/features/settings/SettingsContent';
    import { useAutoAnimateTopBar } from '@/hooks/useAutoAnimateTopBar';
    import { PageHeader } from '@/components/shared/PageHeader';

    export function SettingsPage() {
      const { onScroll } = useAutoAnimateTopBar();

      return (
        <div
          className="h-full overflow-y-auto p-6 lg:px-12 space-y-8"
          onScroll={onScroll}
        >
          {/* Header */}
          <PageHeader
            title="Settings"
            description="Customize your experience. Changes are saved automatically."
          />
          <SettingsContent />
        </div>
      )
    }
  src/pages/ToasterDemo/index.tsx: >-
    import { Button } from '@/components/ui/button';

    import { useToast } from '@/components/ui/toast';

    import { PageHeader } from '@/components/shared/PageHeader';

    import { cn } from '@/lib/utils';


    type Variant = 'default' | 'success' | 'error' | 'warning';

    type Position =
      | 'top-left'
      | 'top-center'
      | 'top-right'
      | 'bottom-left'
      | 'bottom-center'
      | 'bottom-right';

    const variantColors = {
      default: 'border-border text-foreground hover:bg-muted/10 dark:hover:bg-muted/20',
      success: 'border-green-600 text-green-600 hover:bg-green-600/10 dark:hover:bg-green-400/20',
      error: 'border-destructive text-destructive hover:bg-destructive/10 dark:hover:bg-destructive/20',
      warning: 'border-amber-600 text-amber-600 hover:bg-amber-600/10 dark:hover:bg-amber-400/20',
    }


    const DemoSection: React.FC<{ title: string; children: React.ReactNode }> =
    ({
      title,
      children,
    }) => (
      <section>
        <h2 className="text-lg font-semibold mb-2">{title}</h2>
        {children}
      </section>
    );


    export function ToasterDemo({ isInSidePane = false }: { isInSidePane?:
    boolean }) {
      const toast = useToast();

      const showToast = (variant: Variant, position: Position = 'bottom-right') => {
        toast.show({
          title: `${variant.charAt(0).toUpperCase() + variant.slice(1)} Notification`,
          message: `This is a ${variant} toast notification.`,
          variant,
          position,
          duration: 3000,
          onDismiss: () =>
            console.log(`${variant} toast at ${position} dismissed`),
        });
      };

      const simulateApiCall = async () => {
        toast.show({
          title: 'Scheduling...',
          message: 'Please wait while we schedule your meeting.',
          variant: 'default',
          position: 'bottom-right',
        });

        try {
          await new Promise((resolve) => setTimeout(resolve, 2000));

          toast.show({
            title: 'Meeting Scheduled',
            message: 'Your meeting is scheduled for July 4, 2025, at 3:42 PM IST.',
            variant: 'success',
            position: 'bottom-right',
            highlightTitle: true,
            actions: {
              label: 'Undo',
              onClick: () => console.log('Undoing meeting schedule'),
              variant: 'outline',
            },
          });
        } catch (error) {
          toast.show({
            title: 'Error Scheduling Meeting',
            message: 'Failed to schedule the meeting. Please try again.',
            variant: 'error',
            position: 'bottom-right',
          });
        }
      };

      return (
        <div className={cn("overflow-y-auto space-y-8", !isInSidePane ? "h-full p-6 lg:px-12" : "h-full")}>
          {/* Header */}
          {!isInSidePane && (
            <PageHeader
              title="Toaster"
              description="A customizable toast component for notifications."
            />
          )}
          <div className="space-y-6">
            <div className="space-y-6">
              <DemoSection title="Toast Variants">
                <div className="flex flex-wrap gap-4">
                  {(['default', 'success', 'error', 'warning'] as Variant[]).map((variantKey) => (
                    <Button
                      key={variantKey}
                      variant="outline"
                      onClick={() => showToast(variantKey as Variant)}
                      className={cn(variantColors[variantKey])}
                    >
                      {variantKey.charAt(0).toUpperCase() + variantKey.slice(1)} Toast
                    </Button>
                  ))}
                </div>
              </DemoSection>

              <DemoSection title="Toast Positions">
                <div className="flex flex-wrap gap-4">
                  {[
                    'top-left',
                    'top-center',
                    'top-right',
                    'bottom-left',
                    'bottom-center',
                    'bottom-right',
                  ].map((positionKey) => (
                    <Button
                      key={positionKey}
                      variant="outline"
                      onClick={() =>
                        showToast('default', positionKey as Position)
                      }
                      className="border-border text-foreground hover:bg-muted/10 dark:hover:bg-muted/20"
                    >
                      {positionKey
                        .replace('-', ' ')
                        .replace(/\b\w/g, (char) => char.toUpperCase())}
                    </Button>
                  ))}
                </div>
              </DemoSection>

              <DemoSection title="Real-World Example">
                <Button
                  variant="outline"
                  onClick={simulateApiCall}
                  className="border-border text-foreground hover:bg-muted/10 dark:hover:bg-muted/20"
                >
                  Schedule Meeting
                </Button>
              </DemoSection>
            </div>
          </div>
        </div>
      );
    }
  src/App.tsx: >-
    import React, { useEffect } from 'react'

    import { AppShell } from './components/layout/AppShell'

    import { AppShellProvider, useAppShell } from './context/AppShellContext'

    import { useAppStore } from './store/appStore'

    import { useAuthStore } from './store/authStore'

    import './index.css'


    // Import library components

    import { EnhancedSidebar } from './components/layout/EnhancedSidebar'

    import { MainContent } from './components/layout/MainContent'

    import { RightPane } from './components/layout/RightPane'

    import { TopBar } from './components/layout/TopBar'

    import { CommandPalette } from './components/global/CommandPalette'


    // Import page/content components

    import { DashboardContent } from './pages/Dashboard'

    import { SettingsPage } from './pages/Settings'

    import { ToasterDemo } from './pages/ToasterDemo'

    import { NotificationsPage } from './pages/Notifications'

    import { ContentInSidePanePlaceholder } from
    './components/shared/ContentInSidePanePlaceholder'

    import { SettingsContent } from './features/settings/SettingsContent'

    import { LoginPage } from './components/auth/LoginPage'


    // Import icons

    import { LayoutDashboard, Settings, Component, Bell, SlidersHorizontal,
    ChevronsLeftRight, Search, Filter, Plus, PanelRight, ChevronRight, Rocket,
    Layers, SplitSquareHorizontal } from 'lucide-react'

    import { BODY_STATES } from './lib/utils'

    import { cn } from './lib/utils'



    // The content for the main area, with page routing logic

    function AppContent() {
      const { activePage, setActivePage } = useAppStore()
      const { bodyState, sidePaneContent, openSidePane } = useAppShell()

      const pageMap = {
        dashboard: {
          component: <DashboardContent />,
          sidePaneContent: 'main',
          icon: LayoutDashboard,
          name: 'dashboard',
        },
        settings: {
          component: <SettingsPage />,
          sidePaneContent: 'settings',
          icon: Settings,
          name: 'settings',
        },
        toaster: {
          component: <ToasterDemo />,
          sidePaneContent: 'toaster',
          icon: Component,
          name: 'toaster demo',
        },
        notifications: {
          component: <NotificationsPage />,
          sidePaneContent: 'notifications',
          icon: Bell,
          name: 'notifications',
        },
      } as const;

      const currentPage = pageMap[activePage];

      if (sidePaneContent === currentPage.sidePaneContent && (bodyState === BODY_STATES.SIDE_PANE || bodyState === BODY_STATES.SPLIT_VIEW)) {
        return (
          <ContentInSidePanePlaceholder 
            icon={currentPage.icon}
            title={`${currentPage.name.charAt(0).toUpperCase() + currentPage.name.slice(1)} is in Side Pane`}
            pageName={currentPage.name}
            onBringBack={() => {
              openSidePane(currentPage.sidePaneContent);
              setActivePage(activePage);
            }}
          />
        )
      }

      return currentPage.component;
    }


    // Content for the Top Bar

    function AppTopBar() {
      const { activePage, searchTerm, setSearchTerm } = useAppStore()
      const { openSidePane } = useAppShell()
      const [isSearchFocused, setIsSearchFocused] = React.useState(false);

      return (
        <div className="flex items-center gap-3 flex-1">
          <div className={cn("hidden md:flex items-center gap-2 text-sm transition-opacity", {
              "opacity-0 pointer-events-none": isSearchFocused && activePage === 'dashboard'
          })}>
            <a href="#" className="text-muted-foreground hover:text-foreground transition-colors">Home</a>
            <ChevronRight className="w-4 h-4 text-muted-foreground" />
            <span className="font-medium text-foreground capitalize">{activePage}</span>
          </div>
          
          <div className="flex-1" />

          {/* Page-specific: Dashboard search and actions */}
          {activePage === 'dashboard' && (
          <div className="flex items-center gap-2 flex-1 justify-end">
            <div className={cn("relative transition-all duration-300 ease-in-out", isSearchFocused ? 'flex-1 max-w-lg' : 'w-auto')}>
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4 pointer-events-none" />
              <input
                type="text"
                placeholder="Search..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                onFocus={() => setIsSearchFocused(true)}
                onBlur={() => setIsSearchFocused(false)}
                className={cn(
                  "pl-9 pr-4 py-2 h-10 border-none rounded-lg bg-card focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent transition-all duration-300 ease-in-out w-full",
                  isSearchFocused ? 'bg-background' : 'w-48'
                )}
              />
            </div>
             <button className="h-10 w-10 flex-shrink-0 flex items-center justify-center hover:bg-accent rounded-full transition-colors">
              <Filter className="w-5 h-5" />
            </button>
             <button className="bg-primary text-primary-foreground px-4 py-2 rounded-full hover:bg-primary/90 transition-colors flex items-center gap-2 h-10 flex-shrink-0">
              <Plus className="w-5 h-5" />
              <span className={cn(isSearchFocused ? 'hidden sm:inline' : 'inline')}>New Project</span>
            </button>
          </div>
          )}
        </div>
      )
    }


    // The main App component that composes the shell

    function ComposedApp() {
      const { sidePaneContent, closeSidePane, bodyState, toggleSplitView } = useAppShell()
      const { setActivePage } = useAppStore();

      const isOverlaySidePane = bodyState === BODY_STATES.SIDE_PANE;

      const contentMap = {
        main: { title: 'Dashboard', icon: LayoutDashboard, page: 'dashboard', content: <DashboardContent isInSidePane={isOverlaySidePane} /> },
        settings: { title: 'Settings', icon: Settings, page: 'settings', content: isOverlaySidePane ? <SettingsContent /> : <SettingsPage /> },
        toaster: { title: 'Toaster Demo', icon: Component, page: 'toaster', content: <ToasterDemo isInSidePane={isOverlaySidePane} /> },
        notifications: { title: 'Notifications', icon: Bell, page: 'notifications', content: <NotificationsPage isInSidePane={isOverlaySidePane} /> },
        details: { title: 'Details Panel', icon: SlidersHorizontal, content: <div className="p-6"><p className="text-muted-foreground">This is the side pane. It can be used to display contextual information, forms, or actions related to the main content.</p></div> }
      } as const;

      const currentContent = contentMap[sidePaneContent as keyof typeof contentMap] || contentMap.details;
      const CurrentIcon = currentContent.icon;

      const handleMaximize = () => {
        if ('page' in currentContent && currentContent.page) {
          setActivePage(currentContent.page as any);
        }
        closeSidePane()
      }

      const rightPaneHeader =
        bodyState !== BODY_STATES.SPLIT_VIEW ? (
          <>
            <div className="flex items-center gap-2">
              <CurrentIcon className="w-5 h-5" />
              <h2 className="text-lg font-semibold whitespace-nowrap">
                {currentContent.title}
              </h2>
            </div>
            <div className="flex items-center">
              {(bodyState === BODY_STATES.SIDE_PANE || bodyState === BODY_STATES.SPLIT_VIEW) && (
                <button
                  onClick={toggleSplitView}
                  className="h-10 w-10 flex items-center justify-center hover:bg-accent rounded-full transition-colors"
                  title={bodyState === BODY_STATES.SIDE_PANE ? 'Switch to Split View' : 'Switch to Overlay View'}
                >
                  {bodyState === BODY_STATES.SPLIT_VIEW ? (
                    <Layers className="w-5 h-5" />
                  ) : (
                    <SplitSquareHorizontal className="w-5 h-5" />
                  )}
                </button>
              )}
              {'page' in currentContent && currentContent.page && (
                <button
                  onClick={handleMaximize}
                  className="h-10 w-10 flex items-center justify-center hover:bg-accent rounded-full transition-colors mr-2"
                  title="Move to Main View"
                >
                  <ChevronsLeftRight className="w-5 h-5" />
                </button>
              )}
            </div>
          </>
        ) : undefined;

      return (
        <AppShell
          sidebar={<EnhancedSidebar />}
          topBar={<TopBar><AppTopBar /></TopBar>}
          mainContent={<MainContent><AppContent /></MainContent>}
          rightPane={(
            <RightPane header={rightPaneHeader}>{currentContent.content}</RightPane>
          )}
          commandPalette={<CommandPalette />}
        />
      );
    }


    function App() {
      const isDarkMode = useAppStore((state) => state.isDarkMode)
      const { isAuthenticated, login, forgotPassword } = useAuthStore()

      useEffect(() => {
        document.documentElement.classList.toggle('dark', isDarkMode);
      }, [isDarkMode]);

      const handleLogin = async (email: string, password: string) => {
        try {
          await login(email, password)
        } catch (error) {
          console.error('Login failed:', error)
          // In a real app, you'd show an error message to the user
        }
      }

      const handleForgotPassword = async (email: string) => {
        try {
          await forgotPassword(email)
        } catch (error) {
          console.error('Forgot password failed:', error)
        }
      }

      const handleSignUp = () => {
        // In a real app, navigate to sign up page
        console.log('Navigate to sign up page')
      }

      if (!isAuthenticated) {
        return (
          <LoginPage
            onLogin={handleLogin}
            onForgotPassword={handleForgotPassword}
            onSignUp={handleSignUp}
          />
        )
      }

      return (
        <div className="h-screen w-screen overflow-hidden bg-background">
          <AppShellProvider
            appName="Jeli App"
            appLogo={
              <div className="p-2 bg-primary/20 rounded-lg">
                <Rocket className="w-5 h-5 text-primary" />
              </div>
            }
          >
            <ComposedApp />
          </AppShellProvider>
        </div>
      )
    }


    export default App
approved: true
linesAdded: null
linesRemoved: null
linesDifference: null
gitCommittedAt: null
status: committed
id: 148
