uuid: c253a652-3a9d-4e92-a162-811c7515f922
projectId: amazing-app-shell
createdAt: '2025-10-10T12:45:39.823Z'
gitCommitMsg: >-
  feat: Implement fullscreen mode for side pane

  This commit introduces a new fullscreen mode for the side pane content, such
  as the Settings panel. This allows users to focus on the side pane's content
  by expanding it to fill the main content area.

  - Added a `SIDE_PANE_FULLSCREEN` body state. - Implemented a
  `toggleSidePaneFullscreen` action in the Zustand store. - Added a "Maximize"
  button to the `RightPane` header to trigger this mode. - Created a new
  `SidePaneFullscreenContent` component to render the fullscreen view. - Updated
  `AppShell` to manage animations and conditionally render the new fullscreen
  view, hiding the sidebar and top bar as appropriate.
promptSummary: Implement a fullscreen mode for the side pane.
reasoning:
  - >-
    This request involves implementing a fullscreen mode for the side pane
    (e.g., settings panel). This will allow the content of the side pane to
    expand and take over the main content area for a more focused view.
  - 'Here''s my plan to achieve this:'
  - >-
    1.  **Update State Definitions**: I'll introduce a new body state
    `SIDE_PANE_FULLSCREEN` in `src/lib/utils.ts` to represent this new layout.
  - >-
    2.  **Enhance State Management**: In `src/store/appStore.ts`, I'll add a
    `toggleSidePaneFullscreen` action to switch between the standard side pane
    view and the new fullscreen view.
  - >-
    3.  **Add Trigger UI**: A "maximize" button will be added to the header of
    the `RightPane` component in `src/components/RightPane.tsx` to initiate the
    fullscreen mode.
  - >-
    4.  **Create Fullscreen View**: I'll create a new component,
    `src/components/SidePaneFullscreenContent.tsx`, which will render the
    appropriate content (e.g., settings) in a full-page layout. This component
    will include its own "exit fullscreen" button.
  - >-
    5.  **Orchestrate Layout Changes**: Finally, I'll update the main `AppShell`
    component (`src/components/AppShell.tsx`) to handle the new
    `SIDE_PANE_FULLSCREEN` state. This involves conditionally rendering the new
    fullscreen component instead of the main dashboard, and ensuring that the
    sidebar, top bar, and right pane are correctly animated and hidden in this
    mode.
  - '### 1. Define New Body State'
  - >-
    First, I'll add the new `SIDE_PANE_FULLSCREEN` state to our `BODY_STATES`
    enum.
  - '### 2. Update State Management'
  - Next, I'll add the `toggleSidePaneFullscreen` action to the `appStore`.
  - '### 3. Add Fullscreen Button to Right Pane'
  - >-
    I'll add a button with a `Maximize` icon to the `RightPane` header to
    trigger the new fullscreen mode.
  - '### 4. Create Side Pane Fullscreen Component'
  - This new component will render the side pane's content in a fullscreen view.
  - '### 5. Update AppShell to Handle New State'
  - >-
    Finally, I'll update `AppShell.tsx` to orchestrate the layout changes for
    the new state.
operations:
  - type: write
    path: src/lib/utils.ts
    content: |+
      --- src/lib/utils.ts
      +++ src/lib/utils.ts
      @@ ... @@
       export const BODY_STATES = {
         NORMAL: 'normal',
         FULLSCREEN: 'fullscreen',
      -  SIDE_PANE: 'side_pane'
      +  SIDE_PANE: 'side_pane',
      +  SIDE_PANE_FULLSCREEN: 'side_pane_fullscreen'
       } as const
       
       export type SidebarState = typeof SIDEBAR_STATES[keyof typeof SIDEBAR_STATES]

    patchStrategy: standard-diff
  - type: write
    path: src/store/appStore.ts
    content: |+
      --- src/store/appStore.ts
      +++ src/store/appStore.ts
      @@ ... @@
         showSidebar: () => void
         peekSidebar: () => void
         toggleFullscreen: () => void
      +  toggleSidePaneFullscreen: () => void
         openSidePane: (content: 'details' | 'settings') => void
         closeSidePane: () => void
         resetToDefaults: () => void
      @@ ... @@
               const current = get().bodyState
               set({ 
                 bodyState: current === BODY_STATES.FULLSCREEN ? BODY_STATES.NORMAL : BODY_STATES.FULLSCREEN 
               })
             },
             
      +      toggleSidePaneFullscreen: () => {
      +        const current = get().bodyState
      +        if (current === BODY_STATES.SIDE_PANE_FULLSCREEN) {
      +          set({ bodyState: BODY_STATES.SIDE_PANE })
      +        } else if (current === BODY_STATES.SIDE_PANE) {
      +          set({ bodyState: BODY_STATES.SIDE_PANE_FULLSCREEN })
      +        }
      +      },
      +      
             openSidePane: (content: 'details' | 'settings') => {
               const { bodyState, sidePaneContent } = get()
               if (bodyState === BODY_STATES.SIDE_PANE && sidePaneContent === content) {

    patchStrategy: standard-diff
  - type: write
    path: src/components/RightPane.tsx
    content: >+
      --- src/components/RightPane.tsx

      +++ src/components/RightPane.tsx

      @@ ... @@
       import { forwardRef } from 'react'
      -import { X, SlidersHorizontal, Settings, ChevronRight } from
      'lucide-react'

      +import { X, SlidersHorizontal, Settings, ChevronRight, Maximize } from
      'lucide-react'
       import { useAppStore } from '@/store/appStore'
       import { cn } from '@/lib/utils'
       import { SettingsContent } from './SettingsContent'
       
       export const RightPane = forwardRef<HTMLDivElement>((_props, ref) => {
      -  const { closeSidePane, setIsResizingRightPane, sidePaneContent } =
      useAppStore()

      +  const { closeSidePane, setIsResizingRightPane, sidePaneContent,
      toggleSidePaneFullscreen } = useAppStore()
       
         const isSettings = sidePaneContent === 'settings'
       
      @@ ... @@
                 <h2 className="text-lg font-semibold whitespace-nowrap">
                   {isSettings ? 'Settings' : 'Details Panel'}
                 </h2>
               </div>
      +        <button

      +          onClick={toggleSidePaneFullscreen}

      +          className="h-10 w-10 flex items-center justify-center
      rounded-full hover:bg-accent transition-colors group"

      +          title="Go Fullscreen"

      +        >

      +          <Maximize className="w-5 h-5 group-hover:scale-110
      transition-transform" />

      +        </button>
             </div>
             <div className="flex-1 overflow-y-auto p-6">
               {isSettings ? <SettingsContent /> : (

    patchStrategy: standard-diff
  - type: write
    path: src/components/SidePaneFullscreenContent.tsx
    content: |-
      import { X, Settings, SlidersHorizontal } from 'lucide-react'
      import { useAppStore } from '@/store/appStore'
      import { SettingsContent } from './SettingsContent'

      export function SidePaneFullscreenContent() {
        const { sidePaneContent, toggleSidePaneFullscreen } = useAppStore()
        
        const isSettings = sidePaneContent === 'settings'

        return (
          <div className="absolute inset-0 z-40 bg-background p-6 flex flex-col animate-fade-in">
            <div className="flex items-center justify-between mb-6 flex-shrink-0 h-20">
              <div className="flex items-center gap-3">
                {isSettings ? <Settings className="w-6 h-6" /> : <SlidersHorizontal className="w-6 h-6" />}
                <h1 className="text-3xl font-bold tracking-tight">
                  {isSettings ? 'Settings' : 'Details Panel'}
                </h1>
              </div>
              <button
                onClick={toggleSidePaneFullscreen}
                className="h-12 w-12 flex items-center justify-center rounded-full bg-card/50 backdrop-blur-sm hover:bg-card/75 transition-colors group"
                title="Exit Fullscreen"
              >
                <X className="w-6 h-6 group-hover:scale-110 group-hover:rotate-90 transition-all duration-300" />
              </button>
            </div>

            <div className="flex-1 overflow-y-auto pr-2">
              {isSettings ? <SettingsContent /> : (
                <p className="text-muted-foreground p-6 bg-card rounded-xl">
                  This is the side pane content in fullscreen mode. It can be used to display contextual information, forms, or actions related to the main content.
                </p>
              )}
            </div>
          </div>
        )
      }
    patchStrategy: replace
  - type: write
    path: src/components/AppShell.tsx
    content: >+
      --- src/components/AppShell.tsx

      +++ src/components/AppShell.tsx

      @@ ... @@
       import { cn } from '@/lib/utils'
       import { EnhancedSidebar } from './EnhancedSidebar'
       import { MainContent } from './MainContent'
       import { RightPane } from './RightPane'
       import { TopBar } from './TopBar'
      +import { SidePaneFullscreenContent } from './SidePaneFullscreenContent'
       import { useAppStore } from '@/store/appStore'
       import { SIDEBAR_STATES, BODY_STATES } from '@/lib/utils'
       
      @@ ... @@
           let targetWidth = 0
           let targetOpacity = 1
       
      -    if (bodyState === BODY_STATES.FULLSCREEN) {

      +    if (bodyState === BODY_STATES.FULLSCREEN || bodyState ===
      BODY_STATES.SIDE_PANE_FULLSCREEN) {
             targetWidth = 0;
             targetOpacity = 0;
           } else {
      @@ ... @@
         useEffect(() => {
           if (!mainContentRef.current || !sidebarRef.current || !rightPaneRef.current) return
       
           const ease = "power3.out"
           const isFullscreen = bodyState === BODY_STATES.FULLSCREEN
      +    const isSidePaneFullscreen = bodyState ===
      BODY_STATES.SIDE_PANE_FULLSCREEN
           const isSidePane = bodyState === BODY_STATES.SIDE_PANE
       
           // Right pane animation
      @@ ... @@
           })
       
           gsap.to(topBarContainerRef.current, {
      -      y: isFullscreen ? '-100%' : '0%',

      +      y: isFullscreen || isSidePaneFullscreen ? '-100%' : '0%',
             duration: animationDuration,
             ease,
           })
      @@ ... @@
                 <div ref={topBarContainerRef} className="absolute inset-x-0 top-0 z-30">
                   <TopBar
                     onToggleSidebar={toggleSidebar}
                     onToggleFullscreen={toggleFullscreen}
                     onToggleDarkMode={toggleDarkMode}
                   />
                 </div>
                 
      -          {/* Main Content */}

      -          <MainContent

      -            ref={mainContentRef}

      -            bodyState={bodyState}

      -            onToggleFullscreen={toggleFullscreen}

      -          />

      +          {bodyState === BODY_STATES.SIDE_PANE_FULLSCREEN ? (

      +            <SidePaneFullscreenContent />

      +          ) : (

      +            /* Main Content */

      +            <MainContent

      +              ref={mainContentRef}

      +              bodyState={bodyState}

      +              onToggleFullscreen={toggleFullscreen}

      +            />

      +          )}
               </div>
             </div>
             <RightPane ref={rightPaneRef} />

    patchStrategy: standard-diff
snapshot:
  src/components/SidePaneFullscreenContent.tsx: null
  src/lib/utils.ts: >-
    import { type ClassValue, clsx } from "clsx"

    import { twMerge } from "tailwind-merge"


    export function cn(...inputs: ClassValue[]) {
      return twMerge(clsx(inputs))
    }


    export const SIDEBAR_STATES = {
      HIDDEN: 'hidden',
      COLLAPSED: 'collapsed', 
      EXPANDED: 'expanded',
      PEEK: 'peek'
    } as const


    export const BODY_STATES = {
      NORMAL: 'normal',
      FULLSCREEN: 'fullscreen',
      SIDE_PANE: 'side_pane'
    } as const


    export type SidebarState = typeof SIDEBAR_STATES[keyof typeof
    SIDEBAR_STATES]

    export type BodyState = typeof BODY_STATES[keyof typeof BODY_STATES]
  src/store/appStore.ts: >-
    import { create } from 'zustand'

    import { persist } from 'zustand/middleware'

    import { SIDEBAR_STATES, BODY_STATES, type SidebarState, type BodyState }
    from '@/lib/utils'


    interface AppState {
      // UI States
      sidebarState: SidebarState
      bodyState: BodyState
      isDarkMode: boolean
      sidePaneContent: 'details' | 'settings'
      sidebarWidth: number
      rightPaneWidth: number
      isResizing: boolean
      isResizingRightPane: boolean
      
      // User Preferences
      autoExpandSidebar: boolean
      reducedMotion: boolean
      compactMode: boolean
      
      // Actions
      setSidebarState: (state: SidebarState) => void
      setBodyState: (state: BodyState) => void
      toggleDarkMode: () => void
      setSidebarWidth: (width: number) => void
      setRightPaneWidth: (width: number) => void
      setIsResizing: (resizing: boolean) => void
      setIsResizingRightPane: (resizing: boolean) => void
      setAutoExpandSidebar: (auto: boolean) => void
      setReducedMotion: (reduced: boolean) => void
      setCompactMode: (compact: boolean) => void
      
      // Composite Actions
      toggleSidebar: () => void
      hideSidebar: () => void
      showSidebar: () => void
      peekSidebar: () => void
      toggleFullscreen: () => void
      openSidePane: (content: 'details' | 'settings') => void
      closeSidePane: () => void
      resetToDefaults: () => void
    }


    const defaultState = {
      sidebarState: SIDEBAR_STATES.EXPANDED as SidebarState,
      bodyState: BODY_STATES.NORMAL as BodyState,
      sidePaneContent: 'details' as const,
      isDarkMode: false,
      sidebarWidth: 280,
      rightPaneWidth: typeof window !== 'undefined' ? Math.max(300, Math.round(window.innerWidth * 0.6)) : 400,
      isResizing: false,
      isResizingRightPane: false,
      autoExpandSidebar: true,
      reducedMotion: false,
      compactMode: false,
    }


    export const useAppStore = create<AppState>()(
      persist(
        (set, get) => ({
          ...defaultState,
          
          // Basic setters
          sidePaneContent: 'details',
          setSidebarState: (state) => set({ sidebarState: state }),
          setBodyState: (state) => set({ bodyState: state }),
          toggleDarkMode: () => {
            const newMode = !get().isDarkMode
            set({ isDarkMode: newMode })
            document.documentElement.classList.toggle('dark', newMode)
          },
          setSidebarWidth: (width) => set({ sidebarWidth: Math.max(200, Math.min(500, width)) }),
          setRightPaneWidth: (width) => set({ rightPaneWidth: Math.max(300, Math.min(window.innerWidth * 0.8, width)) }),
          setIsResizing: (resizing) => set({ isResizing: resizing }),
          setIsResizingRightPane: (resizing) => set({ isResizingRightPane: resizing }),
          setAutoExpandSidebar: (auto) => set({ autoExpandSidebar: auto }),
          setReducedMotion: (reduced) => set({ reducedMotion: reduced }),
          setCompactMode: (compact) => set({ compactMode: compact }),
          
          // Composite actions
          toggleSidebar: () => {
            const current = get().sidebarState
            if (current === SIDEBAR_STATES.HIDDEN) {
              set({ sidebarState: SIDEBAR_STATES.COLLAPSED })
            } else if (current === SIDEBAR_STATES.COLLAPSED) {
              set({ sidebarState: SIDEBAR_STATES.EXPANDED })
            } else if (current === SIDEBAR_STATES.EXPANDED) {
              set({ sidebarState: SIDEBAR_STATES.COLLAPSED })
            }
          },
          
          hideSidebar: () => set({ sidebarState: SIDEBAR_STATES.HIDDEN }),
          showSidebar: () => set({ sidebarState: SIDEBAR_STATES.EXPANDED }),
          peekSidebar: () => set({ sidebarState: SIDEBAR_STATES.PEEK }),
          
          toggleFullscreen: () => {
            const current = get().bodyState
            set({ 
              bodyState: current === BODY_STATES.FULLSCREEN ? BODY_STATES.NORMAL : BODY_STATES.FULLSCREEN 
            })
          },
          
          openSidePane: (content: 'details' | 'settings') => {
            const { bodyState, sidePaneContent } = get()
            if (bodyState === BODY_STATES.SIDE_PANE && sidePaneContent === content) {
              // If it's open with same content, close it.
              set({ bodyState: BODY_STATES.NORMAL });
            } else {
              // If closed, or different content, open with new content.
              set({ bodyState: BODY_STATES.SIDE_PANE, sidePaneContent: content });
            }
          },
          closeSidePane: () => {
            set({ bodyState: BODY_STATES.NORMAL })
          },
          
          resetToDefaults: () => set(defaultState),
        }),
        {
          name: 'app-preferences',
          partialize: (state) => ({
            sidebarState: state.sidebarState,
            bodyState: state.bodyState,
            sidePaneContent: state.sidePaneContent,
            isDarkMode: state.isDarkMode,
            sidebarWidth: state.sidebarWidth,
            rightPaneWidth: state.rightPaneWidth,
            autoExpandSidebar: state.autoExpandSidebar,
            reducedMotion: state.reducedMotion,
            compactMode: state.compactMode,
          }),
        }
      )
    )


    // Initialize dark mode on load

    if (typeof window !== 'undefined') {
      const stored = localStorage.getItem('app-preferences')
      if (stored) {
        const parsed = JSON.parse(stored)
        if (parsed.state?.isDarkMode) {
          document.documentElement.classList.add('dark')
        }
      }
    }
  src/components/RightPane.tsx: |-
    import { forwardRef } from 'react'
    import { X, SlidersHorizontal, Settings, ChevronRight } from 'lucide-react'
    import { useAppStore } from '@/store/appStore'
    import { cn } from '@/lib/utils'
    import { SettingsContent } from './SettingsContent'

    export const RightPane = forwardRef<HTMLDivElement>((_props, ref) => {
      const { closeSidePane, setIsResizingRightPane, sidePaneContent } = useAppStore()

      const isSettings = sidePaneContent === 'settings'

      return (
        <aside ref={ref} className="bg-card border-l border-border flex flex-col h-full overflow-hidden fixed top-0 right-0 z-[60]">
          <button
            onClick={closeSidePane}
            className="absolute top-1/2 -left-px -translate-y-1/2 -translate-x-full w-8 h-16 bg-card border border-r-0 border-border rounded-l-lg flex items-center justify-center hover:bg-accent transition-colors group z-10"
            title="Close pane"
          >
            <ChevronRight className="w-5 h-5 text-muted-foreground group-hover:text-foreground transition-colors" />
          </button>
          <div 
            className={cn(
              "absolute top-0 left-0 w-2 h-full bg-transparent hover:bg-primary/20 cursor-col-resize z-50 transition-colors duration-200 group -translate-x-1/2"
            )}
            onMouseDown={(e) => {
              e.preventDefault()
              setIsResizingRightPane(true)
            }}
          >
            <div className="w-0.5 h-full bg-border group-hover:bg-primary transition-colors duration-200 mx-auto" />
          </div>
          <div className="flex items-center justify-between p-4 border-b border-border h-20 flex-shrink-0 pl-6">
            <div className="flex items-center gap-2">
              {isSettings ? <Settings className="w-5 h-5" /> : <SlidersHorizontal className="w-5 h-5" />}
              <h2 className="text-lg font-semibold whitespace-nowrap">
                {isSettings ? 'Settings' : 'Details Panel'}
              </h2>
            </div>
          </div>
          <div className="flex-1 overflow-y-auto p-6">
            {isSettings ? <SettingsContent /> : (
              <p className="text-muted-foreground">
                This is the side pane. It can be used to display contextual information, forms, or actions related to the main content.
              </p>
            )}
          </div>
        </aside>
      )
    })

    RightPane.displayName = "RightPane"
  src/components/AppShell.tsx: |-
    import { useRef, useEffect } from 'react'
    import { gsap } from 'gsap'
    import { cn } from '@/lib/utils'
    import { EnhancedSidebar } from './EnhancedSidebar'
    import { MainContent } from './MainContent'
    import { RightPane } from './RightPane'
    import { TopBar } from './TopBar'
    import { useAppStore } from '@/store/appStore'
    import { SIDEBAR_STATES, BODY_STATES } from '@/lib/utils'

    export function AppShell() {
      const {
        sidebarState,
        bodyState,
        sidebarWidth,
        isDarkMode,
        isResizing,
        rightPaneWidth,
        isResizingRightPane,
        setRightPaneWidth,
        setSidebarState,
        openSidePane,
        closeSidePane,
        setIsResizing,
        setSidebarWidth,
        toggleSidebar,
        peekSidebar,
        toggleFullscreen,
        setIsResizingRightPane,
        toggleDarkMode,
        reducedMotion,
        autoExpandSidebar
      } = useAppStore()
      
      const appRef = useRef<HTMLDivElement>(null)
      const sidebarRef = useRef<HTMLDivElement>(null)
      const mainContentRef = useRef<HTMLDivElement>(null)
      const rightPaneRef = useRef<HTMLDivElement>(null)
      const resizeHandleRef = useRef<HTMLDivElement>(null)
      const topBarContainerRef = useRef<HTMLDivElement>(null)

      // Animation duration based on reduced motion preference
      const animationDuration = reducedMotion ? 0.1 : 0.4

      // Resize functionality
      useEffect(() => {
        const handleMouseMove = (e: MouseEvent) => {
          if (!isResizing) return
          
          const newWidth = Math.max(200, Math.min(500, e.clientX))
          setSidebarWidth(newWidth)
          
          if (sidebarRef.current) {
            gsap.set(sidebarRef.current, { width: newWidth })
          }
          if (resizeHandleRef.current) {
            gsap.set(resizeHandleRef.current, { left: newWidth })
          }
        }

        const handleMouseUp = () => {
          setIsResizing(false)
          document.body.style.cursor = ''
          document.body.style.userSelect = ''
        }

        if (isResizing) {
          document.body.style.cursor = 'col-resize'
          document.body.style.userSelect = 'none'
          document.addEventListener('mousemove', handleMouseMove)
          document.addEventListener('mouseup', handleMouseUp)
        }

        return () => {
          document.removeEventListener('mousemove', handleMouseMove)
          document.removeEventListener('mouseup', handleMouseUp)
        }
      }, [isResizing, setIsResizing, setSidebarWidth])

      // Resize functionality for Right Pane
      useEffect(() => {
        const handleMouseMove = (e: MouseEvent) => {
          if (!isResizingRightPane) return
          
          const newWidth = window.innerWidth - e.clientX
          setRightPaneWidth(newWidth)
        }

        const handleMouseUp = () => {
          setIsResizingRightPane(false)
          document.body.style.cursor = ''
          document.body.style.userSelect = ''
        }

        if (isResizingRightPane) {
          document.body.style.cursor = 'col-resize'
          document.body.style.userSelect = 'none'
          document.addEventListener('mousemove', handleMouseMove)
          document.addEventListener('mouseup', handleMouseUp)
        }

        return () => {
          document.removeEventListener('mousemove', handleMouseMove)
          document.removeEventListener('mouseup', handleMouseUp)
          document.body.style.cursor = ''
        }
      }, [isResizingRightPane, setIsResizingRightPane, setRightPaneWidth])

      // GSAP animations for sidebar transitions
      useEffect(() => {
        if (!sidebarRef.current || !mainContentRef.current || !resizeHandleRef.current) return

        const sidebar = sidebarRef.current
        const handle = resizeHandleRef.current
        
        let targetWidth = 0
        let targetOpacity = 1

        if (bodyState === BODY_STATES.FULLSCREEN) {
          targetWidth = 0;
          targetOpacity = 0;
        } else {
          switch (sidebarState) {
            case SIDEBAR_STATES.HIDDEN:
              targetWidth = 0
              targetOpacity = 0
              break
            case SIDEBAR_STATES.COLLAPSED:
              targetWidth = 64
              targetOpacity = 1
              break
            case SIDEBAR_STATES.EXPANDED:
              targetWidth = sidebarWidth
              targetOpacity = 1
              break
            case SIDEBAR_STATES.PEEK:
              targetWidth = sidebarWidth * 0.8
              targetOpacity = 0.95
              break
          }
        }

        const tl = gsap.timeline({ ease: "power3.out" })
        
        tl.to(sidebar, {
          width: targetWidth,
          opacity: targetOpacity,
          duration: animationDuration,
        })
        tl.to(handle, {
          left: targetWidth,
          duration: animationDuration,
        }, 0)

      }, [sidebarState, sidebarWidth, bodyState, animationDuration])

      // GSAP animations for body state transitions
      useEffect(() => {
        if (!mainContentRef.current || !sidebarRef.current || !rightPaneRef.current) return

        const ease = "power3.out"
        const isFullscreen = bodyState === BODY_STATES.FULLSCREEN
        const isSidePane = bodyState === BODY_STATES.SIDE_PANE

        // Right pane animation
        gsap.to(rightPaneRef.current, {
          width: rightPaneWidth,
          x: isSidePane ? 0 : rightPaneWidth + 5, // +5 to hide border
          duration: animationDuration,
          ease,
        })

        gsap.to(topBarContainerRef.current, {
          y: isFullscreen ? '-100%' : '0%',
          duration: animationDuration,
          ease,
        })
        
        // Add backdrop for side pane
        const backdrop = document.querySelector('.app-backdrop')
        if (isSidePane) {
          if (!backdrop) {
            const el = document.createElement('div')
            el.className = 'app-backdrop fixed inset-0 bg-black/30 z-[55]'
            appRef.current?.appendChild(el)
            gsap.fromTo(el, { opacity: 0 }, { opacity: 1, duration: animationDuration })
            el.onclick = () => closeSidePane()
          }
        } else {
          if (backdrop) {
            gsap.to(backdrop, { opacity: 0, duration: animationDuration, onComplete: () => backdrop.remove() })
          }
        }
      }, [bodyState, animationDuration, rightPaneWidth, closeSidePane])

      return (
        <div 
          ref={appRef}
          className={cn(
            "relative h-screen w-screen overflow-hidden bg-background transition-colors duration-300",
            isDarkMode && "dark"
          )}
        >
          <div className="flex h-screen overflow-hidden">
            {/* Enhanced Sidebar */}
            <EnhancedSidebar
              ref={sidebarRef}
              onMouseEnter={() => {
                if (autoExpandSidebar && sidebarState === SIDEBAR_STATES.COLLAPSED) {
                  peekSidebar()
                }
              }}
              onMouseLeave={() => {
                if (autoExpandSidebar && sidebarState === SIDEBAR_STATES.PEEK) {
                  setSidebarState(SIDEBAR_STATES.COLLAPSED)
                }
              }}
            />

            {/* Resize Handle */}
            {sidebarState !== SIDEBAR_STATES.HIDDEN && (
              <div
                ref={resizeHandleRef}
                className={cn(
                  "absolute top-0 w-2 h-full bg-transparent hover:bg-primary/20 cursor-col-resize z-50 transition-colors duration-200 group -translate-x-1/2"
                )}
                onMouseDown={(e) => {
                  e.preventDefault()
                  setIsResizing(true)
                }}
              >
                <div className="w-0.5 h-full bg-border group-hover:bg-primary transition-colors duration-200 mx-auto" />
              </div>
            )}

            {/* Main Content Area */}
            <div className="relative flex-1 overflow-hidden bg-background">
              <div ref={topBarContainerRef} className="absolute inset-x-0 top-0 z-30">
                <TopBar
                  onToggleSidebar={toggleSidebar}
                  onToggleFullscreen={toggleFullscreen}
                  onToggleDarkMode={toggleDarkMode}
                />
              </div>
              
              {/* Main Content */}
              <MainContent
                ref={mainContentRef}
                bodyState={bodyState}
                onToggleFullscreen={toggleFullscreen}
              />
            </div>
          </div>
          <RightPane ref={rightPaneRef} />
        </div>
      )
    }
approved: false
linesAdded: null
linesRemoved: null
linesDifference: null
gitCommittedAt: null
status: undone
id: 33
