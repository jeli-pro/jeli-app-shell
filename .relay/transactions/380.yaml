uuid: c32c5f1c-d7ed-4375-9772-246e7f722c1e
projectId: jeli-app-shell
createdAt: '2025-10-17T05:50:21.908Z'
gitCommitMsg: >-
  feat(data-demo): implement animated tab content and prevent reloads

  Refactors the Data Demo page to provide a fluid user experience when viewing
  grouped data.

  - Decouples tab switching from data fetching, eliminating the loading skeleton
  when changing group tabs. - Implements the content animation feature of
  `AnimatedTabs`, creating a smooth sliding transition between group content
  panels. - Centralizes data-fetching logic in the main page component by
  passing data via props to view components (`DataListView`, `DataCardView`,
  `DataTableView`). - Adds a `useGroupedData` selector to the store for
  efficient data grouping. - Restructures the page layout to correctly integrate
  the `AnimatedTabs` component with its children for a seamless animated effect
  while maintaining the UI design.
promptSummary: >-
  The user wants to refactor the Data Demo page's grouping functionality. The
  goals are to prevent a loading state from appearing when switching between
  group tabs and to properly implement the `AnimatedTabs` component to create a
  smooth, sliding animation for the content.
reasoning:
  - >-
    This refactor will enhance the Data Demo page's grouping feature for a much
    smoother user experience. I'll decouple the data fetching from tab switching
    to prevent unnecessary reloads. Then, I'll leverage the `AnimatedTabs`
    component's full capabilities to create a fluid, sliding animation between
    content panels when a user switches between groups.
  - >-
    First, I'll modify the view components (`DataListView`, `DataCardView`,
    `DataTableView`) to be "dumber" by accepting their data via props instead of
    fetching it themselves. This centralizes data management in the main page
    component.
  - >-
    Next, I'll introduce a new `useGroupedData` selector in the Zustand store.
    This will efficiently provide all data, pre-grouped, to the main page.
  - >-
    Finally, in the `DataDemoPage` component, I'll restructure the rendering
    logic. When data is grouped, it will pass all group panels as children to
    the `AnimatedTabs` component. This unlocks the built-in GSAP animations for
    a seamless sliding effect. I'll use a bit of relative and absolute
    positioning to keep the "Group by" dropdown neatly aligned with the tabs,
    preserving the original layout.
  - >-
    The result will be a faster, more responsive, and visually polished
    interface.
  - '### Step 1: Update View Components to Accept Data via Props'
  - >-
    I'll start by refactoring the `DataCardView`, `DataListView`, and
    `DataTableView` to receive data through props, removing their internal
    data-fetching logic.
  - '### Step 2: Add `useGroupedData` Selector to Store'
  - >-
    I'll create a new selector in the Zustand store to provide data in a grouped
    format, which will be consumed by the main page component.
  - '### Step 3: Implement Animated Tabs and Restructure Page Layout'
  - >-
    This is the core of the change. I'll rework the `DataDemoPage` to use the
    new `useGroupedData` hook and pass content for each tab as children to
    `AnimatedTabs`, enabling the sliding animation.
operations:
  - type: write
    path: src/pages/DataDemo/components/DataCardView.tsx
    content: >+
      --- src/pages/DataDemo/components/DataCardView.tsx

      +++ src/pages/DataDemo/components/DataCardView.tsx

      @@ -7,16 +7,14 @@
       import { EmptyState } from './EmptyState'
       import { useAppViewManager } from '@/hooks/useAppViewManager.hook'
       import {
      -  useDataToRender,
         useSelectedItem,
       } from '../store/dataDemo.store'
       import {
         AssigneeInfo,
         ItemMetrics,
         ItemProgressBar,
         ItemStatusBadge,
         ItemTags,
         ItemDateInfo,
       } from './shared/DataItemParts'
       import { AddDataItemCta } from './shared/AddDataItemCta'
       
      -export function DataCardView({ isGrid = false }: { isGrid?: boolean }) {

      -  const { groupBy, activeGroupTab, onItemSelect, itemId } =
      useAppViewManager();

      -  const data = useDataToRender(groupBy, activeGroupTab);

      +export function DataCardView({ data, isGrid = false }: { data:
      DataItem[]; isGrid?: boolean }) {

      +  const { onItemSelect, itemId } = useAppViewManager();
         const selectedItem = useSelectedItem(itemId);
       
         const containerRef = useRef<HTMLDivElement>(null)

    patchStrategy: standard-diff
  - type: write
    path: src/pages/DataDemo/components/DataListView.tsx
    content: >+
      --- src/pages/DataDemo/components/DataListView.tsx

      +++ src/pages/DataDemo/components/DataListView.tsx

      @@ -6,7 +6,6 @@
       import { EmptyState } from './EmptyState'
       import { useAppViewManager } from '@/hooks/useAppViewManager.hook'
       import { 
      -  useDataToRender,
         useSelectedItem,
       } from '../store/dataDemo.store'
       import {
      @@ -19,9 +18,8 @@
       } from './shared/DataItemParts'
       import { AddDataItemCta } from './shared/AddDataItemCta'
       
      -export function DataListView() {

      -  const { groupBy, activeGroupTab, onItemSelect, itemId } =
      useAppViewManager();

      -  const data = useDataToRender(groupBy, activeGroupTab);

      +export function DataListView({ data }: { data: DataItem[] }) {

      +  const { onItemSelect, itemId } = useAppViewManager();
         const selectedItem = useSelectedItem(itemId);
       
         const listRef = useRef<HTMLDivElement>(null)

    patchStrategy: standard-diff
  - type: write
    path: src/pages/DataDemo/components/DataTableView.tsx
    content: |+
      --- src/pages/DataDemo/components/DataTableView.tsx
      +++ src/pages/DataDemo/components/DataTableView.tsx
      @@ -10,7 +10,6 @@
       import { EmptyState } from './EmptyState'
       import { useAppViewManager } from '@/hooks/useAppViewManager.hook'
       import {
      -  useDataToRender,
         useSelectedItem,
       } from '../store/dataDemo.store'
       import { capitalize } from '@/lib/utils'
      @@ -25,16 +24,13 @@
       } from './shared/DataItemParts'
       import { AddDataItemCta } from './shared/AddDataItemCta'
       
      -export function DataTableView() {
      +export function DataTableView({ data }: { data: DataItem[] }) {
         const {
           sortConfig,
           setTableSort,
           groupBy,
      -    activeGroupTab,
           onItemSelect,
           itemId,
         } = useAppViewManager();
      -  const data = useDataToRender(groupBy, activeGroupTab);
         const selectedItem = useSelectedItem(itemId);
       
         const tableRef = useRef<HTMLTableElement>(null)

    patchStrategy: standard-diff
  - type: write
    path: src/pages/DataDemo/store/dataDemo.store.tsx
    content: >+
      --- src/pages/DataDemo/store/dataDemo.store.tsx

      +++ src/pages/DataDemo/store/dataDemo.store.tsx

      @@ -142,6 +142,22 @@
           return items.filter((item) => String(item[groupBy as GroupableField]) === activeGroupTab);
       });
       
      +export const useGroupedData = (groupBy: GroupableField | 'none') =>
      useDataDemoStore(state => {

      +    if (groupBy === 'none') {

      +        return null;

      +    }

      +    const items = state.items;

      +    

      +    return items.reduce((acc, item) => {

      +        const groupKey = String(item[groupBy as GroupableField]);

      +        if (!acc[groupKey]) {

      +            acc[groupKey] = [];

      +        }

      +        acc[groupKey].push(item);

      +        return acc;

      +    }, {} as Record<string, DataItem[]>);

      +});

      +
       export const useSelectedItem = (itemId?: string) => {
           if (!itemId) return null;
           return mockDataItems.find(item => item.id === itemId) ?? null;

    patchStrategy: standard-diff
  - type: write
    path: src/pages/DataDemo/index.tsx
    content: >+
      --- src/pages/DataDemo/index.tsx

      +++ src/pages/DataDemo/index.tsx

      @@ -1,4 +1,4 @@

      -import { useRef, useEffect, useCallback } from 'react'

      +import { useRef, useEffect, useCallback, useMemo } from 'react'
       import {
         Layers, 
         AlertTriangle, 
      @@ -21,12 +21,13 @@
       import { AnimatedLoadingSkeleton } from './components/AnimatedLoadingSkeleton'
       import { DataToolbar } from './components/DataToolbar'
       import { mockDataItems } from './data/mockData'
      -import type { GroupableField } from './types'

      +import type { GroupableField, DataItem } from './types'
       import { useAppViewManager } from '@/hooks/useAppViewManager.hook'
       import { 
         useDataDemoStore,
         useGroupTabs,
         useDataToRender,
      +  useGroupedData,
       } from './store/dataDemo.store'
       
       type Stat = {
      @@ -66,13 +67,17 @@
       
         const groupTabs = useGroupTabs(groupBy, activeGroupTab);
         const dataToRender = useDataToRender(groupBy, activeGroupTab);
      -

      -  const groupOptions: { id: GroupableField | 'none'; label: string }[] =
      [

      -    { id: 'none', label: 'None' }, { id: 'status', label: 'Status' }, {
      id: 'priority', label: 'Priority' }, { id: 'category', label: 'Category' }

      -  ]

      +  const groupedData = useGroupedData(groupBy);

      +  const allItems = useDataDemoStore(s => s.items);

      +

      +  const groupOptions = useMemo(() => [

      +    { id: 'none' as const, label: 'None' }, { id: 'status' as const,
      label: 'Status' }, { id: 'priority' as const, label: 'Priority' }, { id:
      'category' as const, label: 'Category' }

      +  ], []);

      +
         const statsRef = useRef<HTMLDivElement>(null)
         const scrollRef = useRef<HTMLDivElement>(null);
       
         // Calculate stats from data
         const totalItems = mockDataItems.length
         const { showScrollToBottom, scrollToBottom, handleScroll } = useScrollToBottom(scrollRef);
      @@ -160,6 +165,47 @@
           [isLoading, hasMore, page, setPage],
         );
       
      +  const renderViewForData = useCallback((data: DataItem[]) => {

      +    switch (viewMode) {

      +        case 'table': return <DataTableView data={data} />;

      +        case 'cards': return <DataCardView data={data} />;

      +        case 'grid': return <DataCardView data={data} isGrid />;

      +        case 'list':

      +        default:

      +            return <DataListView data={data} />;

      +    }

      +  }, [viewMode]);

      +

      +  const GroupByDropdown = useCallback(() => (

      +    <div className="flex items-center gap-2 shrink-0">

      +      <span className="text-sm font-medium text-muted-foreground
      shrink-0">Group by:</span>

      +      <DropdownMenu>

      +        <DropdownMenuTrigger asChild>

      +          <Button variant="outline" className="w-[180px]
      justify-between">

      +            {groupOptions.find(o => o.id === groupBy)?.label}

      +            <ChevronsUpDown className="ml-2 h-4 w-4 shrink-0 opacity-50"
      />

      +          </Button>

      +        </DropdownMenuTrigger>

      +        <DropdownMenuContent className="w-[180px]">

      +          <DropdownMenuRadioGroup value={groupBy}
      onValueChange={setGroupBy}>

      +            {groupOptions.map(option => (

      +              <DropdownMenuRadioItem key={option.id} value={option.id}>

      +                {option.label}

      +              </DropdownMenuRadioItem>

      +            ))}

      +          </DropdownMenuRadioGroup>

      +        </DropdownMenuContent>

      +      </DropdownMenu>

      +    </div>

      +  ), [groupBy, setGroupBy, groupOptions]);

      +

      +  const isGroupedView = useMemo(() => 

      +    groupBy !== 'none' && groupTabs.length > 1 && groupedData,

      +  [groupBy, groupTabs.length, groupedData]);

      +

      +
         return (
           <PageLayout
             scrollRef={scrollRef}
      @@ -204,59 +250,43 @@
                 <DataToolbar />
               </div>
       
      -        {/* Group by and Tabs section */}

      -        <div className={cn(

      -          "flex items-center justify-between gap-4",

      -          groupBy !== 'none' && "border-b"

      -        )}>

      -          {/* Tabs on the left, takes up available space */}

      -          {groupBy !== 'none' && groupTabs.length > 1 ? (

      -            <AnimatedTabs

      -              tabs={groupTabs}

      -              activeTab={activeGroupTab}

      -              onTabChange={setActiveGroupTab}

      -              className="flex-grow"

      -            />

      -          ) : (

      -            <div className="h-[68px] flex-grow" /> // Placeholder for
      consistent height.

      -          )}

      -          

      -          {/* Group by dropdown on the right */}

      -          <div className="flex items-center gap-2 shrink-0">

      -            <span className="text-sm font-medium text-muted-foreground
      shrink-0">Group by:</span>

      -            <DropdownMenu>

      -              <DropdownMenuTrigger asChild>

      -                <Button variant="outline" className="w-[180px]
      justify-between">

      -                  {groupOptions.find(o => o.id === groupBy)?.label}

      -                  <ChevronsUpDown className="ml-2 h-4 w-4 shrink-0
      opacity-50" />

      -                </Button>

      -              </DropdownMenuTrigger>

      -              <DropdownMenuContent className="w-[180px]">

      -                <DropdownMenuRadioGroup value={groupBy}
      onValueChange={setGroupBy}>

      -                  {groupOptions.map(option => (

      -                    <DropdownMenuRadioItem key={option.id}
      value={option.id}>

      -                      {option.label}

      -                    </DropdownMenuRadioItem>

      -                  ))}

      -                </DropdownMenuRadioGroup>

      -              </DropdownMenuContent>

      -            </DropdownMenu>

      -          </div>

      -        </div>

      -
               <div className="min-h-[500px]">
      -          {isInitialLoading ? <AnimatedLoadingSkeleton
      viewMode={viewMode} /> : (

      -            <div>

      -              {viewMode === 'table' ? <DataTableView /> : (

      -                <>

      -                  {viewMode === 'list' && <DataListView />}

      -                  {viewMode === 'cards' && <DataCardView />}

      -                  {viewMode === 'grid' && <DataCardView isGrid />}

      -                </>

      -              )}

      -            </div>

      -          )}

      +          {isInitialLoading 

      +            ? <AnimatedLoadingSkeleton viewMode={viewMode} /> 

      +            : !isGroupedView ? (

      +              // Not grouped view

      +              <>

      +                <div className="flex items-center justify-between gap-4
      h-[68px]">

      +                  <div className="flex-grow border-b" /> {/* Mimic tab
      border */}

      +                  <GroupByDropdown />

      +                </div>

      +                {renderViewForData(allItems)}

      +              </>

      +            ) : (

      +              // Grouped view with AnimatedTabs

      +              <div className="relative">

      +                <AnimatedTabs

      +                  tabs={groupTabs}

      +                  activeTab={activeGroupTab}

      +                  onTabChange={setActiveGroupTab}

      +                  wrapperClassName="flex flex-col"

      +                  className="border-b"

      +                  contentClassName="pt-6 flex-grow"

      +                >

      +                  {groupTabs.map(tab => (

      +                    <div key={tab.id} className="min-h-[440px]">

      +                      {renderViewForData(

      +                        tab.id === 'all' ? allItems :
      groupedData?.[tab.id] || []

      +                      )}

      +                    </div>

      +                  ))}

      +                </AnimatedTabs>

      +                <div className="absolute top-[14px] right-0">

      +                    <GroupByDropdown />

      +                </div>

      +              </div>

      +            )

      +          }
               </div>
       
               {/* Loader for infinite scroll */}

    patchStrategy: standard-diff
snapshot:
  src/pages/DataDemo/components/DataListView.tsx: >-
    import { useRef } from 'react'

    import { cn } from '@/lib/utils'

    import { Badge } from '@/components/ui/badge'

    import { ArrowRight } from 'lucide-react'

    import type { DataItem } from '../types'

    import { useStaggeredAnimation } from
    '@/hooks/useStaggeredAnimation.motion.hook'

    import { EmptyState } from './EmptyState'

    import { useAppViewManager } from '@/hooks/useAppViewManager.hook'

    import { 
      useDataToRender,
      useSelectedItem,
    } from '../store/dataDemo.store'

    import {
      AssigneeInfo,
      ItemMetrics,
      ItemProgressBar,
      ItemStatusBadge,
      ItemPriorityBadge,
      ItemDateInfo,
    } from './shared/DataItemParts'

    import { AddDataItemCta } from './shared/AddDataItemCta'


    export function DataListView() {
      const { groupBy, activeGroupTab, onItemSelect, itemId } = useAppViewManager();
      const data = useDataToRender(groupBy, activeGroupTab);
      const selectedItem = useSelectedItem(itemId);

      const listRef = useRef<HTMLDivElement>(null)
      useStaggeredAnimation(listRef, [data], { mode: 'incremental', scale: 1, y: 30, stagger: 0.08, duration: 0.5 });

      const items = Array.isArray(data) ? data : [];
      if (items.length === 0) {
        return <EmptyState />
      }

      return (
        <div ref={listRef} className="space-y-4 pb-4">
          {items.map((item: DataItem) => {
            const isSelected = selectedItem?.id === item.id
            
            return (
              <div
                key={item.id}
                onClick={() => onItemSelect(item)}
                className={cn(
                  "group relative overflow-hidden rounded-2xl border bg-card/50 backdrop-blur-sm transition-all duration-300 cursor-pointer",
                  "hover:bg-card/80 hover:shadow-lg hover:shadow-primary/5 hover:border-primary/20",
                  "active:scale-[0.99]",
                  isSelected && "ring-2 ring-primary/20 border-primary/30 bg-card/90"
                )}
              >
                <div className="p-6">
                  <div className="flex items-start gap-4">
                    {/* Thumbnail */}
                    <div className="flex-shrink-0">
                      <div className="w-14 h-14 bg-gradient-to-br from-primary/20 to-primary/10 rounded-xl flex items-center justify-center text-2xl">
                        {item.thumbnail}
                      </div>
                    </div>

                    {/* Content */}
                    <div className="flex-1 min-w-0">
                      <div className="flex items-start justify-between mb-3">
                        <div className="flex-1 min-w-0">
                          <h3 className="font-semibold text-lg mb-1 group-hover:text-primary transition-colors">
                            {item.title}
                          </h3>
                          <p className="text-muted-foreground text-sm mb-3 line-clamp-2">
                            {item.description}
                          </p>
                        </div>
                        <ArrowRight className="w-5 h-5 text-muted-foreground group-hover:text-primary group-hover:translate-x-1 transition-all duration-300 ml-4 flex-shrink-0" />
                      </div>

                      {/* Badges */}
                      <div className="flex items-center gap-2 mb-4">
                        <ItemStatusBadge status={item.status} />
                        <ItemPriorityBadge priority={item.priority} />
                        <Badge variant="outline" className="bg-accent/50">
                          {item.category}
                        </Badge>
                      </div>

                      {/* Meta info */}
                      <div className="flex items-center justify-between text-muted-foreground">
                        <div className="flex items-center gap-4">
                          {/* Assignee */}
                          <AssigneeInfo assignee={item.assignee} avatarClassName="w-7 h-7" />
                          {/* Date */}
                          <ItemDateInfo date={item.updatedAt} />
                        </div>

                        {/* Metrics */}
                        <ItemMetrics metrics={item.metrics} />
                      </div>

                      {/* Progress bar */}
                      <div className="mt-4"><ItemProgressBar completion={item.metrics.completion} /></div>
                    </div>
                  </div>
                </div>

                {/* Hover gradient overlay */}
                <div className="absolute inset-0 bg-gradient-to-r from-primary/5 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300 pointer-events-none" />
              </div>
            )
          })}
          <AddDataItemCta viewMode='list' />
        </div>
      )
    }
  src/pages/DataDemo/components/DataCardView.tsx: >-
    import { useRef } from 'react'

    import { cn } from '@/lib/utils'

    import { Badge } from '@/components/ui/badge'

    import { ArrowUpRight } from 'lucide-react'

    import type { DataItem } from '../types'

    import { useStaggeredAnimation } from
    '@/hooks/useStaggeredAnimation.motion.hook'

    import { EmptyState } from './EmptyState'

    import { useAppViewManager } from '@/hooks/useAppViewManager.hook'

    import {
      useDataToRender,
      useSelectedItem,
    } from '../store/dataDemo.store'

    import {
      AssigneeInfo,
      ItemMetrics,
      ItemProgressBar,
      ItemStatusBadge,
      ItemTags,
      ItemDateInfo,
    } from './shared/DataItemParts'

    import { AddDataItemCta } from './shared/AddDataItemCta'


    export function DataCardView({ isGrid = false }: { isGrid?: boolean }) {
      const { groupBy, activeGroupTab, onItemSelect, itemId } = useAppViewManager();
      const data = useDataToRender(groupBy, activeGroupTab);
      const selectedItem = useSelectedItem(itemId);

      const containerRef = useRef<HTMLDivElement>(null)
      useStaggeredAnimation(containerRef, [data], { mode: 'incremental', y: 40 });

      const items = Array.isArray(data) ? data : [];
      if (items.length === 0) {
        return <EmptyState />
      }

      return (
        <div 
          ref={containerRef}
          className={cn(
            "gap-6",
            isGrid
              ? "grid grid-cols-[repeat(auto-fill,minmax(280px,1fr))]"
              : "grid grid-cols-[repeat(auto-fill,minmax(320px,1fr))]",
            "pb-4"
          )}
        >
          {items.map((item: DataItem) => {
            const isSelected = selectedItem?.id === item.id
            
            return (
              <div
                key={item.id}
                onClick={() => onItemSelect(item)}
                className={cn(
                  "group relative overflow-hidden rounded-3xl border bg-card/50 backdrop-blur-sm transition-all duration-500 cursor-pointer",
                  "hover:bg-card/80 hover:shadow-xl hover:shadow-primary/10 hover:border-primary/30 hover:-translate-y-2",
                  "active:scale-[0.98]",
                  isSelected && "ring-2 ring-primary/30 border-primary/40 bg-card/90 shadow-lg shadow-primary/20",
                )}
              >
                {/* Card Header with Thumbnail */}
                <div className="relative p-6 pb-4">
                  <div className="flex items-start justify-between mb-4">
                    <div className="w-16 h-16 bg-gradient-to-br from-primary/20 to-primary/10 rounded-2xl flex items-center justify-center text-3xl group-hover:scale-110 transition-transform duration-300">
                      {item.thumbnail}
                    </div>
                    <ArrowUpRight className="w-5 h-5 text-muted-foreground group-hover:text-primary group-hover:translate-x-1 group-hover:-translate-y-1 transition-all duration-300" />
                  </div>

                  {/* Priority indicator */}
                  <div className="absolute top-4 right-4">
                    <div className={cn(
                      "w-3 h-3 rounded-full",
                      item.priority === 'critical' && "bg-red-500",
                      item.priority === 'high' && "bg-orange-500",
                      item.priority === 'medium' && "bg-blue-500",
                      item.priority === 'low' && "bg-green-500"
                    )} />
                  </div>
                </div>

                {/* Card Content */}
                <div className="px-6 pb-6">
                  {/* Title and Description */}
                  <h3 className="font-semibold text-lg mb-2 group-hover:text-primary transition-colors line-clamp-2">
                    {item.title}
                  </h3>
                  <p className="text-muted-foreground text-sm mb-4 line-clamp-3">
                    {item.description}
                  </p>

                  {/* Status and Category */}
                  <div className="flex items-center gap-2 mb-4">
                    <ItemStatusBadge status={item.status} />
                    <Badge variant="outline" className="bg-accent/50 text-xs">
                      {item.category}
                    </Badge>
                  </div>

                  {/* Tags */}
                  <div className="mb-4"><ItemTags tags={item.tags} /></div>

                  {/* Progress */}
                  <div className="mb-4"><ItemProgressBar completion={item.metrics.completion} /></div>

                  {/* Assignee */}
                  <div className="mb-4"><AssigneeInfo assignee={item.assignee} /></div>

                  {/* Metrics */}
                  <div className="flex items-center justify-between text-xs text-muted-foreground">
                    <ItemMetrics metrics={item.metrics} />
                    <ItemDateInfo date={item.updatedAt} />
                  </div>
                </div>

                {/* Hover gradient overlay */}
                <div className="absolute inset-0 bg-gradient-to-br from-primary/5 via-transparent to-primary/5 opacity-0 group-hover:opacity-100 transition-opacity duration-500 pointer-events-none" />
                
                {/* Selection indicator */}
                {isSelected && (
                  <div className="absolute inset-0 bg-gradient-to-br from-primary/10 to-primary/5 pointer-events-none" />
                )}
              </div>
            )
          })}
          <AddDataItemCta viewMode={isGrid ? 'grid' : 'cards'} />
        </div>
      )
    }
  src/pages/DataDemo/store/dataDemo.store.tsx: >-
    import { create } from 'zustand';

    import { type ReactNode } from 'react';

    import { capitalize, cn } from '@/lib/utils';

    import { Badge } from '@/components/ui/badge';

    import { mockDataItems } from '../data/mockData';

    import type { DataItem, GroupableField, SortConfig } from '../types';

    import type { FilterConfig } from '../components/DataToolbar';


    // --- State and Actions ---

    interface DataDemoState {
        items: DataItem[];
        hasMore: boolean;
        isLoading: boolean;
        isInitialLoading: boolean;
        totalItemCount: number;
    }


    interface DataDemoActions {
        loadData: (params: {
            page: number;
            groupBy: GroupableField | 'none';
            filters: FilterConfig;
            sortConfig: SortConfig | null;
        }) => void;
    }


    const defaultState: DataDemoState = {
        items: [],
        hasMore: true,
        isLoading: true,
        isInitialLoading: true,
        totalItemCount: 0,
    };


    // --- Store Implementation ---

    export const useDataDemoStore = create<DataDemoState &
    DataDemoActions>((set) => ({
        ...defaultState,

        loadData: ({ page, groupBy, filters, sortConfig }) => {
            set({ isLoading: true, ...(page === 1 && { isInitialLoading: true }) });
            const isFirstPage = page === 1;

            const filteredAndSortedData = (() => {
                const filteredItems = mockDataItems.filter((item) => {
                    const searchTermMatch =
                        item.title.toLowerCase().includes(filters.searchTerm.toLowerCase()) ||
                        item.description.toLowerCase().includes(filters.searchTerm.toLowerCase());
                    const statusMatch = filters.status.length === 0 || filters.status.includes(item.status);
                    const priorityMatch = filters.priority.length === 0 || filters.priority.includes(item.priority);
                    return searchTermMatch && statusMatch && priorityMatch;
                });

                if (sortConfig) {
                    filteredItems.sort((a, b) => {
                        // eslint-disable-next-line @typescript-eslint/no-explicit-any
                        const getNestedValue = (obj: DataItem, path: string): any =>
                            path.split('.').reduce((o: any, k) => (o || {})[k], obj);

                        const aValue = getNestedValue(a, sortConfig.key);
                        const bValue = getNestedValue(b, sortConfig.key);

                        if (aValue === undefined || bValue === undefined) return 0;
                        if (typeof aValue === 'string' && typeof bValue === 'string') {
                            return sortConfig.direction === 'asc' ? aValue.localeCompare(bValue) : bValue.localeCompare(aValue);
                        }
                        if (typeof aValue === 'number' && typeof bValue === 'number') {
                            return sortConfig.direction === 'asc' ? aValue - bValue : bValue - aValue;
                        }
                        if (sortConfig.key === 'updatedAt' || sortConfig.key === 'createdAt') {
                            if (typeof aValue === 'string' && typeof bValue === 'string') {
                                return sortConfig.direction === 'asc'
                                    ? new Date(aValue).getTime() - new Date(bValue).getTime()
                                    : new Date(bValue).getTime() - new Date(aValue).getTime();
                            }
                        }
                        return 0;
                    });
                }
                return filteredItems;
            })();
            
            const totalItemCount = filteredAndSortedData.length;

            setTimeout(() => {
                if (groupBy !== 'none') {
                    set({
                        items: filteredAndSortedData,
                        hasMore: false,
                        isLoading: false,
                        isInitialLoading: false,
                        totalItemCount,
                    });
                    return;
                }

                const pageSize = 12;
                const newItems = filteredAndSortedData.slice((page - 1) * pageSize, page * pageSize);
                
                set(state => ({
                    items: isFirstPage ? newItems : [...state.items, ...newItems],
                    hasMore: totalItemCount > page * pageSize,
                    isLoading: false,
                    isInitialLoading: false,
                    totalItemCount,
                }));

            }, isFirstPage ? 1500 : 500);
        }
    }));


    // --- Selectors ---

    export const useGroupTabs = (
        groupBy: GroupableField | 'none',
        activeGroupTab: string,
    ) => useDataDemoStore(state => {
        const items = state.items;
        if (groupBy === 'none' || !items.length) return [];
        
        const groupCounts = items.reduce((acc, item) => {
            const groupKey = String(item[groupBy as GroupableField]);
            acc[groupKey] = (acc[groupKey] || 0) + 1;
            return acc;
        }, {} as Record<string, number>);

        const sortedGroups = Object.keys(groupCounts).sort((a, b) => a.localeCompare(b));

        const createLabel = (text: string, count: number, isActive: boolean): ReactNode => (
            <>
                {text}
                <Badge variant={isActive ? 'default' : 'secondary'} className={cn('transition-colors duration-300 text-xs font-semibold', !isActive && 'group-hover:bg-accent group-hover:text-accent-foreground')}>
                    {count}
                </Badge>
            </>
        );
        
        const totalCount = items.length;

        return [
            { id: 'all', label: createLabel('All', totalCount, activeGroupTab === 'all') },
            ...sortedGroups.map((g) => ({
                id: g,
                label: createLabel(capitalize(g), groupCounts[g], activeGroupTab === g),
            })),
        ];
    });


    export const useDataToRender = (
        groupBy: GroupableField | 'none',
        activeGroupTab: string,
    ) => useDataDemoStore(state => {
        const items = state.items;
        if (groupBy === 'none') {
            return items;
        }
        if (activeGroupTab === 'all') {
            return items;
        }
        return items.filter((item) => String(item[groupBy as GroupableField]) === activeGroupTab);
    });


    export const useSelectedItem = (itemId?: string) => {
        if (!itemId) return null;
        return mockDataItems.find(item => item.id === itemId) ?? null;
    };
  src/pages/DataDemo/components/DataTableView.tsx: >-
    import { useRef, useLayoutEffect, useMemo } from 'react'

    import { gsap } from 'gsap'

    import { cn } from '@/lib/utils'

    import { 
      ArrowUpDown, 
      ArrowUp, 
      ArrowDown,
      ExternalLink
    } from 'lucide-react'

    import type { DataItem, SortableField } from '../types'

    import { EmptyState } from './EmptyState'

    import { useAppViewManager } from '@/hooks/useAppViewManager.hook'

    import {
      useDataToRender,
      useSelectedItem,
    } from '../store/dataDemo.store'

    import { capitalize } from '@/lib/utils'

    import {
      AssigneeInfo,
      ItemMetrics,
      ItemStatusBadge,
      ItemPriorityBadge,
      ItemDateInfo,
      ItemProgressBar,
    } from './shared/DataItemParts'

    import { AddDataItemCta } from './shared/AddDataItemCta'


    export function DataTableView() {
      const {
        sortConfig,
        setTableSort,
        groupBy,
        activeGroupTab,
        onItemSelect,
        itemId,
      } = useAppViewManager();
      const data = useDataToRender(groupBy, activeGroupTab);
      const selectedItem = useSelectedItem(itemId);

      const tableRef = useRef<HTMLTableElement>(null)
      const animatedItemsCount = useRef(0)

      useLayoutEffect(() => {
        if (tableRef.current) {
          // Only select item rows for animation, not group headers
          const newItems = Array.from( 
            tableRef.current.querySelectorAll('tbody tr')
          ).filter(tr => !(tr as HTMLElement).dataset.groupHeader)
           .slice(animatedItemsCount.current);
          gsap.fromTo(newItems,
            { y: 20, opacity: 0 },
            {
              duration: 0.5,
              y: 0,
              opacity: 1,
              stagger: 0.05,
              ease: "power2.out",
            },
          );
          animatedItemsCount.current = data.length;
        }
      }, [data]);

      const SortIcon = ({ field }: { field: SortableField }) => {
        if (sortConfig?.key !== field) {
          return <ArrowUpDown className="w-4 h-4 opacity-50" />
        }
        if (sortConfig.direction === 'asc') {
          return <ArrowUp className="w-4 h-4 text-primary" />
        }
        if (sortConfig.direction === 'desc') {
          return <ArrowDown className="w-4 h-4 text-primary" />
        }
        return <ArrowUpDown className="w-4 h-4 opacity-50" />
      }

      const handleSortClick = (field: SortableField) => {
        setTableSort(field)
      }

      const groupedData = useMemo(() => {
        if (groupBy === 'none') return null;
        return (data as DataItem[]).reduce((acc, item) => {
          const groupKey = item[groupBy as 'status' | 'priority' | 'category'] || 'N/A';
          if (!acc[groupKey]) {
            acc[groupKey] = [];
          }
          acc[groupKey].push(item);
          return acc;
        }, {} as Record<string, DataItem[]>);
      }, [data, groupBy]);

      if (data.length === 0) {
        return <EmptyState />
      }

      return (
        <div className="relative overflow-hidden rounded-2xl border bg-card/50 backdrop-blur-sm">
          <div className="overflow-x-auto">
            <table ref={tableRef} className="w-full">
              <thead>
                <tr className="border-b border-border/50 bg-muted/20">
                  <th className="text-left p-4 font-semibold text-sm">
                    <button
                      onClick={() => handleSortClick('title')}
                      className="flex items-center gap-2 hover:text-primary transition-colors"
                    >
                      Project
                      <SortIcon field="title" />
                    </button>
                  </th>
                  <th className="text-left p-4 font-semibold text-sm">
                    <button
                      onClick={() => handleSortClick('status')}
                      className="flex items-center gap-2 hover:text-primary transition-colors"
                    >
                      Status
                      <SortIcon field="status" />
                    </button>
                  </th>
                  <th className="text-left p-4 font-semibold text-sm">
                    <button
                      onClick={() => handleSortClick('priority')}
                      className="flex items-center gap-2 hover:text-primary transition-colors"
                    >
                      Priority
                      <SortIcon field="priority" />
                    </button>
                  </th>
                  <th className="text-left p-4 font-semibold text-sm">
                    <button
                      onClick={() => handleSortClick('assignee.name')}
                      className="flex items-center gap-2 hover:text-primary transition-colors"
                    >
                      Assignee
                      <SortIcon field="assignee.name" />
                    </button>
                  </th>
                  <th className="text-left p-4 font-semibold text-sm">
                    <button
                      onClick={() => handleSortClick('metrics.completion')}
                      className="flex items-center gap-2 hover:text-primary transition-colors"
                    >
                      Progress
                      <SortIcon field="metrics.completion" />
                    </button>
                  </th>
                  <th className="text-left p-4 font-semibold text-sm">
                    <button
                      onClick={() => handleSortClick('metrics.views')}
                      className="flex items-center gap-2 hover:text-primary transition-colors"
                    >
                      Engagement
                      <SortIcon field="metrics.views" />
                    </button>
                  </th>
                  <th className="text-left p-4 font-semibold text-sm">Last Updated</th>
                  <th className="text-center p-4 font-semibold text-sm w-16">Actions</th>
                </tr>
              </thead>
              <tbody>
                {groupedData
                  ? Object.entries(groupedData).flatMap(([groupName, items]) => [
                      <tr key={groupName} data-group-header="true" className="sticky top-0 z-10">
                        <td colSpan={8} className="p-2 bg-muted/50 backdrop-blur-sm">
                          <div className="flex items-center gap-2">
                            <h3 className="font-semibold text-sm">{capitalize(groupName)}</h3>
                            <span className="text-xs px-2 py-0.5 bg-background rounded-full font-medium">{items.length}</span>
                          </div>
                        </td>
                      </tr>,
                      ...items.map(item => <TableRow key={item.id} item={item} isSelected={selectedItem?.id === item.id} onItemSelect={onItemSelect} />)
                    ])
                  : data.map(item => <TableRow key={item.id} item={item} isSelected={selectedItem?.id === item.id} onItemSelect={onItemSelect} />)
                }
                <AddDataItemCta viewMode='table' colSpan={8} />
              </tbody>
            </table>
          </div>
        </div>
      )
    }


    function TableRow({ item, isSelected, onItemSelect }: { item: DataItem;
    isSelected: boolean; onItemSelect: (item: DataItem) => void }) {
      return (
        <tr
          onClick={() => onItemSelect(item)}
          className={cn(
            "group border-b border-border/30 transition-all duration-200 cursor-pointer",
            "hover:bg-accent/20 hover:border-primary/20",
            isSelected && "bg-primary/5 border-primary/30"
          )}
        >
          {/* Project Column */}
          <td className="p-4">
            <div className="flex items-center gap-3">
              <div className="w-10 h-10 bg-gradient-to-br from-primary/20 to-primary/10 rounded-lg flex items-center justify-center text-lg flex-shrink-0">
                {item.thumbnail}
              </div>
              <div className="min-w-0 flex-1">
                <h4 className="font-medium group-hover:text-primary transition-colors truncate">
                  {item.title}
                </h4>
                <p className="text-sm text-muted-foreground truncate">
                  {item.category}
                </p>
              </div>
            </div>
          </td>

          {/* Status Column */}
          <td className="p-4">
            <ItemStatusBadge status={item.status} />
          </td>

          {/* Priority Column */}
          <td className="p-4">
            <ItemPriorityBadge priority={item.priority} />
          </td>

          {/* Assignee Column */}
          <td className="p-4">
            <AssigneeInfo assignee={item.assignee} />
          </td>

          {/* Progress Column */}
          {/* Note: This progress bar is custom for the table, so we don't use the shared component here. */}
          <td className="p-4">
            <ItemProgressBar completion={item.metrics.completion} showPercentage />
          </td>

          {/* Engagement Column */}
          <td className="p-4">
            <ItemMetrics metrics={item.metrics} />
          </td>

          {/* Date Column */}
          <td className="p-4">
            <ItemDateInfo date={item.updatedAt} />
          </td>

          {/* Actions Column */}
          <td className="p-4">
            <button 
              onClick={(e) => {
                e.stopPropagation()
                onItemSelect(item)
              }}
              className="flex items-center justify-center w-8 h-8 rounded-lg hover:bg-accent transition-colors"
              title="View details"
            >
              <ExternalLink className="w-4 h-4" />
            </button>
          </td>
        </tr>
      )
    }
  src/pages/DataDemo/index.tsx: >
    import { useRef, useEffect, useCallback } from 'react'

    import {
      Layers, 
      AlertTriangle, 
      PlayCircle, 
      TrendingUp,
      Loader2,
      ChevronsUpDown
    } from 'lucide-react'

    import { gsap } from 'gsap'

    import { cn } from '@/lib/utils'

    import { Button } from '@/components/ui/button'

    import { 
      DropdownMenu, 
      DropdownMenuContent, 
      DropdownMenuRadioGroup, 
      DropdownMenuRadioItem, 
      DropdownMenuTrigger 
    } from '@/components/ui/dropdown-menu'

    import { PageLayout } from '@/components/shared/PageLayout'

    import { useScrollToBottom } from '@/hooks/useScrollToBottom.hook';

    import { ScrollToBottomButton } from
    '@/components/shared/ScrollToBottomButton';

    import { DataListView } from './components/DataListView'

    import { DataCardView } from './components/DataCardView'

    import { DataTableView } from './components/DataTableView'

    import { DataViewModeSelector } from './components/DataViewModeSelector'

    import { AnimatedTabs } from '@/components/ui/animated-tabs'

    import { StatCard } from '@/components/shared/StatCard'

    import { AnimatedLoadingSkeleton } from
    './components/AnimatedLoadingSkeleton'

    import { DataToolbar } from './components/DataToolbar'

    import { mockDataItems } from './data/mockData'

    import type { GroupableField } from './types'

    import { useAppViewManager } from '@/hooks/useAppViewManager.hook'

    import { 
      useDataDemoStore,
      useGroupTabs,
      useDataToRender,
    } from './store/dataDemo.store'


    type Stat = {
      title: string;
      value: string;
      icon: React.ReactNode;
      change: string;
      trend: 'up' | 'down';
      type?: 'card';
    };


    type ChartStat = {
      title: string;
      value: string;
      icon: React.ReactNode;
      change: string;
      trend: 'up' | 'down';
      type: 'chart';
      chartData: number[];
    };


    type StatItem = Stat | ChartStat;


    function DataDemoContent() {
      const {
        viewMode,
        groupBy,
        activeGroupTab,
        setGroupBy,
        setActiveGroupTab,
        page,
        filters,
        sortConfig,
        setPage,
      } = useAppViewManager();

      const { hasMore, isLoading, isInitialLoading, totalItemCount, loadData } = useDataDemoStore(state => ({
        hasMore: state.hasMore,
        isLoading: state.isLoading,
        isInitialLoading: state.isInitialLoading,
        totalItemCount: state.totalItemCount,
        loadData: state.loadData,
      }));

      const groupTabs = useGroupTabs(groupBy, activeGroupTab);
      const dataToRender = useDataToRender(groupBy, activeGroupTab);

      const groupOptions: { id: GroupableField | 'none'; label: string }[] = [
        { id: 'none', label: 'None' }, { id: 'status', label: 'Status' }, { id: 'priority', label: 'Priority' }, { id: 'category', label: 'Category' }
      ]
      const statsRef = useRef<HTMLDivElement>(null)
      const scrollRef = useRef<HTMLDivElement>(null);

      // Calculate stats from data
      const totalItems = mockDataItems.length
      const { showScrollToBottom, scrollToBottom, handleScroll } = useScrollToBottom(scrollRef);

      const activeItems = mockDataItems.filter(item => item.status === 'active').length
      const highPriorityItems = mockDataItems.filter(item => item.priority === 'high' || item.priority === 'critical').length
      const avgCompletion = totalItems > 0 ? Math.round(
        mockDataItems.reduce((acc, item) => acc + item.metrics.completion, 0) / totalItems
      ) : 0

      const stats: StatItem[] = [
        {
          title: "Total Projects",
          value: totalItems.toString(),
          icon: <Layers className="w-5 h-5" />,
          change: "+5.2% this month",
          trend: "up" as const,
          type: 'chart',
          chartData: [120, 125, 122, 130, 135, 138, 142]
        },
        {
          title: "Active Projects",
          value: activeItems.toString(),
          icon: <PlayCircle className="w-5 h-5" />,
          change: "+2 this week", 
          trend: "up" as const,
          type: 'chart',
          chartData: [45, 50, 48, 55, 53, 60, 58]
        },
        {
          title: "High Priority",
          value: highPriorityItems.toString(),
          icon: <AlertTriangle className="w-5 h-5" />,
          change: "-1 from last week",
          trend: "down" as const,
          type: 'chart',
          chartData: [25, 26, 28, 27, 26, 24, 23]
        },
        {
          title: "Avg. Completion",
          value: `${avgCompletion}%`,
          icon: <TrendingUp className="w-5 h-5" />,
          change: "+3.2%",
          trend: "up" as const,
          type: 'chart',
          chartData: [65, 68, 70, 69, 72, 75, 78]
        }
      ]

      useEffect(() => {
        // Animate stats cards in
        if (!isInitialLoading && statsRef.current) {
          gsap.fromTo(statsRef.current.children,
            { y: 30, opacity: 0 },
            {
              duration: 0.6,
              y: 0,
              opacity: 1,
              stagger: 0.1,
              ease: "power2.out"
            }
          )
        }
      }, [isInitialLoading]);

      useEffect(() => {
        loadData({ page, groupBy, filters, sortConfig });
      }, [page, groupBy, filters, sortConfig, loadData]);

      const observer = useRef<IntersectionObserver>();
      const loaderRef = useCallback(
        (node: Element | null) => {
          if (isLoading) return;
          if (observer.current) observer.current.disconnect();

          observer.current = new IntersectionObserver((entries) => {
            if (entries[0].isIntersecting && hasMore) {
              setPage(page + 1);
            }
          });
          if (node) observer.current.observe(node);
        },
        [isLoading, hasMore, page, setPage],
      );

      return (
        <PageLayout
          scrollRef={scrollRef}
          onScroll={handleScroll}
          // Note: Search functionality is handled by a separate SearchBar in the TopBar
        >
          <div className="space-y-8">
            {/* Header */}
            <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-4">
              <div className="flex-1">
                <h1 className="text-2xl font-bold tracking-tight">Data Showcase</h1>
                <p className="text-muted-foreground">
                  {isInitialLoading 
                    ? "Loading projects..." 
                    : `Showing ${dataToRender.length} of ${totalItemCount} item(s)`}
                </p>
              </div>
              <DataViewModeSelector />
            </div>

            {/* Stats Section */}
            {!isInitialLoading && (
              <div ref={statsRef} className="grid grid-cols-[repeat(auto-fit,minmax(250px,1fr))] gap-6">
                {stats.map((stat) => (
                  <StatCard
                    key={stat.title}
                    title={stat.title}
                    value={stat.value}
                    change={stat.change}
                    trend={stat.trend}
                    icon={stat.icon}
                    chartData={stat.type === 'chart' ? stat.chartData : undefined}
                  />
                ))}
              </div>
            )}

            {/* Controls Area */}
            <div className="space-y-6">
              <DataToolbar />
            </div>

            {/* Group by and Tabs section */}
            <div className={cn(
              "flex items-center justify-between gap-4",
              groupBy !== 'none' && "border-b"
            )}>
              {/* Tabs on the left, takes up available space */}
              {groupBy !== 'none' && groupTabs.length > 1 ? (
                <AnimatedTabs
                  tabs={groupTabs}
                  activeTab={activeGroupTab}
                  onTabChange={setActiveGroupTab}
                  className="flex-grow"
                />
              ) : (
                <div className="h-[68px] flex-grow" /> // Placeholder for consistent height.
              )}
              
              {/* Group by dropdown on the right */}
              <div className="flex items-center gap-2 shrink-0">
                <span className="text-sm font-medium text-muted-foreground shrink-0">Group by:</span>
                <DropdownMenu>
                  <DropdownMenuTrigger asChild>
                    <Button variant="outline" className="w-[180px] justify-between">
                      {groupOptions.find(o => o.id === groupBy)?.label}
                      <ChevronsUpDown className="ml-2 h-4 w-4 shrink-0 opacity-50" />
                    </Button>
                  </DropdownMenuTrigger>
                  <DropdownMenuContent className="w-[180px]">
                    <DropdownMenuRadioGroup value={groupBy} onValueChange={setGroupBy}>
                      {groupOptions.map(option => (
                        <DropdownMenuRadioItem key={option.id} value={option.id}>
                          {option.label}
                        </DropdownMenuRadioItem>
                      ))}
                    </DropdownMenuRadioGroup>
                  </DropdownMenuContent>
                </DropdownMenu>
              </div>
            </div>

            <div className="min-h-[500px]">
              {isInitialLoading ? <AnimatedLoadingSkeleton viewMode={viewMode} /> : (
                <div>
                  {viewMode === 'table' ? <DataTableView /> : (
                    <>
                      {viewMode === 'list' && <DataListView />}
                      {viewMode === 'cards' && <DataCardView />}
                      {viewMode === 'grid' && <DataCardView isGrid />}
                    </>
                  )}
                </div>
              )}
            </div>

            {/* Loader for infinite scroll */}
            <div ref={loaderRef} className="flex justify-center items-center py-6">
              {isLoading && !isInitialLoading && groupBy === 'none' && (
                <div className="flex items-center gap-2 text-muted-foreground">
                  <Loader2 className="w-5 h-5 animate-spin" />
                  <span>Loading more...</span>
                </div>
              )}
              {!isLoading && !hasMore && dataToRender.length > 0 && !isInitialLoading && groupBy === 'none' && (
                <p className="text-muted-foreground">You've reached the end.</p>
              )}
            </div>
          </div>
          <ScrollToBottomButton isVisible={showScrollToBottom} onClick={scrollToBottom} />
        </PageLayout>
      )
    }


    export default function DataDemoPage() {
      return <DataDemoContent />;
    }
approved: true
linesAdded: null
linesRemoved: null
linesDifference: null
gitCommittedAt: null
status: committed
id: 380
