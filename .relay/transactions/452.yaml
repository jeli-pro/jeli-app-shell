uuid: c29a39f6-11f8-4e89-8d75-a0109772d539
projectId: jeli-app-shell
createdAt: '2025-10-18T07:00:39.246Z'
gitCommitMsg: >-
  feat(dashboard): implement auto-hiding stats cards on scroll

  Introduces a scroll-based animation for the dashboard's statistics cards. The
  cards now gracefully animate out of view when the user scrolls down and
  reappear when scrolling up, improving content focus.

  - Updated `useDashboardAnimations` hook to include scroll-triggered GSAP
  animations. - Made the stats card container sticky to allow content to scroll
  underneath. - Added a dynamic backdrop effect to the sticky container for
  better UI/UX.
promptSummary: >-
  The user wants to implement an auto-hiding animation for the stats cards on
  the dashboard. The cards should hide when scrolling down and reappear when
  scrolling up, using GSAP for the animation.
reasoning:
  - >-
    Of course. Here is the implementation to make the dashboard's stat cards
    auto-hide on scroll, enhancing focus on the content. I've centralized the
    animation logic and updated the component styling for a smooth, sticky
    effect.
  - >-
    First, I'll update the `useDashboardAnimations` hook to handle the
    scroll-triggered animations. This involves listening to scroll events on the
    page layout, determining the scroll direction, and using GSAP to animate the
    stats container in or out of view. It will also dynamically apply backdrop
    styling for a polished look when the container is sticky.
  - >-
    Next, I'll update the `DashboardContent` component to integrate this new
    animation logic. I'll pass the `scrollRef` to the hook and apply the
    necessary CSS classes to make the stats card container sticky, allowing the
    content to scroll smoothly underneath it.
  - >-
    These changes work together to create a dynamic and responsive dashboard
    where the stats cards gracefully hide and show based on the user's scroll
    behavior.
operations:
  - type: write
    path: src/pages/Dashboard/hooks/useDashboardAnimations.motion.hook.ts
    content: >+
      --- src/pages/Dashboard/hooks/useDashboardAnimations.motion.hook.ts

      +++ src/pages/Dashboard/hooks/useDashboardAnimations.motion.hook.ts

      @@ -1,4 +1,4 @@

      -import { useEffect } from 'react';

      +import { useEffect, useRef } from 'react';
       import { gsap } from 'gsap';
       import { useAppShellStore } from '@/store/appShell.store';
       import { BODY_STATES } from '@/lib/utils';
      @@ -8,11 +8,14 @@
         contentRef: React.RefObject<HTMLDivElement>,
         statsCardsContainerRef: React.RefObject<HTMLDivElement>,
         featureCardsContainerRef: React.RefObject<HTMLDivElement>,
      +  scrollRef: React.RefObject<HTMLDivElement>
       ) {
         const bodyState = useAppShellStore(s => s.bodyState);
         const reducedMotion = useAppShellStore(s => s.reducedMotion);
      +  const lastScrollY = useRef(0);

      +  const isStatsHidden = useRef(false);
       
         // Animate cards on mount
         useStaggeredAnimation(statsCardsContainerRef, [], { y: 20, scale: 0.95 });
      @@ -30,4 +33,52 @@
               break;
           }
         }, [bodyState, contentRef, reducedMotion]);
      +

      +  useEffect(() => {

      +    const scrollElement = scrollRef.current;

      +    const statsContainer = statsCardsContainerRef.current;

      +    if (!scrollElement || !statsContainer || reducedMotion) return;

      +

      +    const isInSidePane = bodyState === BODY_STATES.SIDE_PANE;

      +    const paddingXClasses = isInSidePane

      +      ? ['-mx-6', 'px-6']

      +      : ['-mx-6', 'lg:-mx-12', 'px-6', 'lg:px-12'];

      +    const backdropClasses = ['bg-background/80', 'backdrop-blur-sm',
      'py-4', ...paddingXClasses];

      +

      +    const handleScroll = () => {

      +      const scrollTop = scrollElement.scrollTop;

      +      const SCROLL_THRESHOLD = 80;

      +

      +      // Scrolling Down

      +      if (scrollTop > lastScrollY.current && scrollTop > SCROLL_THRESHOLD
      && !isStatsHidden.current) {

      +        isStatsHidden.current = true;

      +        gsap.to(statsContainer, {

      +          y: '-100%', opacity: 0, duration: 0.4, ease: 'power2.out',
      overwrite: true,

      +        });

      +      }

      +      // Scrolling Up or near top

      +      else if ((scrollTop < lastScrollY.current || scrollTop <=
      SCROLL_THRESHOLD) && isStatsHidden.current) {

      +        isStatsHidden.current = false;

      +        gsap.to(statsContainer, {

      +          y: '0%', opacity: 1, duration: 0.4, ease: 'power2.out',
      overwrite: true,

      +        });

      +      }

      +

      +      if (scrollTop > 10) {

      +        statsContainer.classList.add(...backdropClasses);

      +      } else {

      +        statsContainer.classList.remove(...backdropClasses);

      +      }

      +      lastScrollY.current = scrollTop < 0 ? 0 : scrollTop;

      +    };

      +

      +    scrollElement.addEventListener('scroll', handleScroll, { passive:
      true });

      +    return () => {

      +      scrollElement.removeEventListener('scroll', handleScroll);

      +      // Clean up styles on unmount

      +      gsap.set(statsContainer, { clearProps: 'all' });

      +      statsContainer.classList.remove(...backdropClasses);

      +    };

      +  }, [scrollRef, statsCardsContainerRef, reducedMotion, bodyState]);
       }

    patchStrategy: standard-diff
  - type: write
    path: src/pages/Dashboard/index.tsx
    content: >+
      --- src/pages/Dashboard/index.tsx

      +++ src/pages/Dashboard/index.tsx

      @@ -131,7 +131,7 @@
               handleScrollToBottom(e);
           }, [handleTopBarScroll, handleScrollToBottom]);
       
      -    useDashboardAnimations(contentRef, statsCardsContainerRef,
      featureCardsContainerRef);

      +    useDashboardAnimations(contentRef, statsCardsContainerRef,
      featureCardsContainerRef, scrollRef);
       
           const getTypeIcon = (type: ActivityItem['type']) => {
             switch (type) {
      @@ -155,7 +155,7 @@
                 />
               )}
                 {/* Stats Cards */}
      -        <div ref={statsCardsContainerRef} className="grid grid-cols-1
      sm:grid-cols-2 lg:grid-cols-4 gap-6">

      +        <div ref={statsCardsContainerRef} className="grid grid-cols-1
      sm:grid-cols-2 lg:grid-cols-4 gap-6 sticky top-0 z-30 transition-all
      duration-300">
                 {statsCards.map((stat) => (
                   <StatCard
                     key={stat.title}

    patchStrategy: standard-diff
snapshot:
  src/pages/Dashboard/hooks/useDashboardAnimations.motion.hook.ts: >-
    import { useEffect } from 'react';

    import { gsap } from 'gsap';

    import { useAppShellStore } from '@/store/appShell.store';

    import { BODY_STATES } from '@/lib/utils';

    import { useStaggeredAnimation } from
    '@/hooks/useStaggeredAnimation.motion.hook';


    export function useDashboardAnimations(
      contentRef: React.RefObject<HTMLDivElement>,
      statsCardsContainerRef: React.RefObject<HTMLDivElement>,
      featureCardsContainerRef: React.RefObject<HTMLDivElement>,
    ) {
      const bodyState = useAppShellStore(s => s.bodyState);
      const reducedMotion = useAppShellStore(s => s.reducedMotion);

      // Animate cards on mount
      useStaggeredAnimation(statsCardsContainerRef, [], { y: 20, scale: 0.95 });
      useStaggeredAnimation(featureCardsContainerRef, [], { y: 30, scale: 0.95, stagger: 0.05 });

      useEffect(() => {
        if (reducedMotion || !contentRef.current) return;

        const content = contentRef.current;

        switch (bodyState) {
          case BODY_STATES.FULLSCREEN:
            gsap.to(content, { scale: 1.02, duration: 0.4, ease: 'power3.out' });
            break;
          default:
            gsap.to(content, { scale: 1, duration: 0.4, ease: 'power3.out' });
            break;
        }
      }, [bodyState, contentRef, reducedMotion]);
    }
  src/pages/Dashboard/index.tsx: >-
    import { useRef, useCallback } from 'react'

    import {
      BarChart3, 
      TrendingUp, 
      Users, 
      DollarSign, 
      Activity,
      Calendar,
      Clock,
      MessageSquare,
      FileText,
      Star,
      ChevronRight,
      MoreVertical
    } from 'lucide-react'

    import { cn } from '@/lib/utils'

    import { DemoContent } from './DemoContent';

    import { useDashboardAnimations } from
    './hooks/useDashboardAnimations.motion.hook'

    import { useAutoAnimateTopBar } from '@/hooks/useAutoAnimateTopBar';

    import { useScrollToBottom } from '@/hooks/useScrollToBottom.hook';

    import { useAppShellStore } from '@/store/appShell.store'

    import { BODY_STATES } from '@/lib/utils'

    import { PageHeader } from '@/components/shared/PageHeader';

    import { ScrollToBottomButton } from
    '@/components/shared/ScrollToBottomButton';

    import { StatCard } from '@/components/shared/StatCard';

    import { Card } from '@/components/ui/card';

    import { PageLayout } from '@/components/shared/PageLayout';


    interface StatsCard {
      title: string
      value: string
      change: string
      trend: 'up' | 'down'
      icon: React.ReactNode
    }


    interface ActivityItem {
      id: string
      type: 'comment' | 'file' | 'meeting' | 'task'
      title: string
      description: string
      time: string
      user: string
    }


    const statsCards: StatsCard[] = [
      {
        title: "Total Revenue",
        value: "$45,231.89",
        change: "+20.1%",
        trend: "up",
        icon: <DollarSign className="w-5 h-5" />
      },
      {
        title: "Active Users",
        value: "2,350",
        change: "+180.1%",
        trend: "up",
        icon: <Users className="w-5 h-5" />
      },
      {
        title: "Conversion Rate",
        value: "12.5%",
        change: "+19%",
        trend: "up",
        icon: <TrendingUp className="w-5 h-5" />
      },
      {
        title: "Performance",
        value: "573ms",
        change: "-5.3%",
        trend: "down",
        icon: <Activity className="w-5 h-5" />
      }
    ]


    const recentActivity: ActivityItem[] = [
      {
        id: "1",
        type: "comment",
        title: "New comment on Project Alpha",
        description: "Sarah Johnson added a comment to the design review",
        time: "2 minutes ago",
        user: "SJ"
      },
      {
        id: "2",
        type: "file",
        title: "Document uploaded",
        description: "quarterly-report.pdf was uploaded to Documents",
        time: "15 minutes ago",
        user: "MD"
      },
      {
        id: "3",
        type: "meeting",
        title: "Meeting scheduled",
        description: "Weekly standup meeting scheduled for tomorrow 9 AM",
        time: "1 hour ago",
        user: "RW"
      },
      {
        id: "4",
        type: "task",
        title: "Task completed",
        description: "UI wireframes for mobile app completed",
        time: "2 hours ago",
        user: "AL"
      }
    ]


    export function DashboardContent() {
        const scrollRef = useRef<HTMLDivElement>(null)
        const contentRef = useRef<HTMLDivElement>(null);
        const statsCardsContainerRef = useRef<HTMLDivElement>(null);
        const featureCardsContainerRef = useRef<HTMLDivElement>(null);
        const bodyState = useAppShellStore(s => s.bodyState);
        const isInSidePane = bodyState === BODY_STATES.SIDE_PANE;
        
        const { onScroll: handleTopBarScroll } = useAutoAnimateTopBar(isInSidePane);
        const { showScrollToBottom, scrollToBottom, handleScroll: handleScrollToBottom } = useScrollToBottom(scrollRef);

        const handleScroll = useCallback((e: React.UIEvent<HTMLDivElement>) => {
            handleTopBarScroll(e);
            handleScrollToBottom(e);
        }, [handleTopBarScroll, handleScrollToBottom]);

        useDashboardAnimations(contentRef, statsCardsContainerRef, featureCardsContainerRef);

        const getTypeIcon = (type: ActivityItem['type']) => {
          switch (type) {
            case 'comment':
              return <MessageSquare className="w-4 h-4" />
            case 'file':
              return <FileText className="w-4 h-4" />
            case 'meeting':
              return <Calendar className="w-4 h-4" />
            case 'task':
              return <Star className="w-4 h-4" />
            default:
              return <Activity className="w-4 h-4" />
          }
        }

        return (
          <PageLayout scrollRef={scrollRef} onScroll={handleScroll} ref={contentRef}>
            {/* Header */}
            {!isInSidePane && (
              <PageHeader
                title="Dashboard"
                description="Welcome to the Jeli App Shell demo! Explore all the features and customization options."
              />
            )}
              {/* Stats Cards */}
            <div ref={statsCardsContainerRef} className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6">
              {statsCards.map((stat) => (
                <StatCard
                  key={stat.title}
                  title={stat.title}
                  value={stat.value}
                  change={stat.change}
                  trend={stat.trend}
                  icon={stat.icon}
                />
              ))}
            </div>

            {/* Demo Content */}
            <DemoContent ref={featureCardsContainerRef} />

            {/* Main Content Grid */}
            <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
            {/* Chart Area */}
            <div className="lg:col-span-2 space-y-6">
              {/* Analytics Chart */}
              <Card className="p-6 border-border/50">
                <div className="flex items-center justify-between mb-6">
                  <h3 className="text-lg font-semibold">Analytics Overview</h3>
                  <button className="h-8 w-8 flex items-center justify-center hover:bg-accent rounded-full transition-colors">
                    <MoreVertical className="w-5 h-5" />
                  </button>
                </div>
                
                {/* Mock Chart */}
                <div className="h-64 bg-gradient-to-br from-primary/10 to-transparent rounded-xl flex items-center justify-center border border-border/50">
                  <div className="text-center">
                    <BarChart3 className="w-12 h-12 text-primary mx-auto mb-2" />
                    <p className="text-muted-foreground">Chart visualization would go here</p>
                  </div>
                </div>
              </Card>

              {/* Recent Projects */}
              <Card className="p-6 border-border/50">
                <div className="flex items-center justify-between mb-6">
                  <h3 className="text-lg font-semibold">Recent Projects</h3>
                  <button className="text-primary hover:text-primary/80 text-sm font-medium flex items-center gap-1">
                    View All
                    <ChevronRight className="w-4 h-4" />
                  </button>
                </div>
                
                <div className="space-y-4">
                  {[
                    { name: "E-commerce Platform", progress: 75, team: 5, deadline: "Dec 15" },
                    { name: "Mobile App Redesign", progress: 45, team: 3, deadline: "Jan 20" },
                    { name: "Marketing Website", progress: 90, team: 4, deadline: "Dec 5" }
                  ].map((project) => (
                    <div key={project.name} className="p-4 bg-accent/30 rounded-xl hover:bg-accent/50 transition-colors cursor-pointer">
                      <div className="flex items-center justify-between mb-2">
                        <h4 className="font-medium">{project.name}</h4>
                        <span className="text-sm text-muted-foreground">{project.progress}%</span>
                      </div>
                      <div className="w-full bg-muted rounded-full h-2 mb-3">
                        <div 
                          className="bg-primary h-2 rounded-full transition-all duration-500"
                          style={{ width: `${project.progress}%` }}
                        />
                      </div>
                      <div className="flex items-center justify-between text-sm text-muted-foreground">
                        <span>{project.team} team members</span>
                        <span>Due {project.deadline}</span>
                        </div>
                    </div>
                  ))}
                </div>
              </Card>
            </div>

            {/* Sidebar Content */}
            <div className="space-y-6">
              {/* Quick Actions */}
              <Card className="p-6 border-border/50">
                <h3 className="text-lg font-semibold mb-4">Quick Actions</h3>
                <div className="space-y-3">
                  {[
                    { icon: <FileText className="w-4 h-4" />, label: "Create Document", color: "bg-blue-500/10 text-blue-600" },
                    { icon: <Calendar className="w-4 h-4" />, label: "Schedule Meeting", color: "bg-green-500/10 text-green-600" },
                    { icon: <Users className="w-4 h-4" />, label: "Invite Team", color: "bg-purple-500/10 text-purple-600" },
                    { icon: <BarChart3 className="w-4 h-4" />, label: "View Reports", color: "bg-orange-500/10 text-orange-600" }
                  ].map((action) => (
                    <button
                      key={action.label}
                      className="w-full flex items-center gap-3 p-3 hover:bg-accent rounded-lg transition-colors text-left"
                    >
                      <div className={cn("p-2 rounded-full", action.color)}>
                        {action.icon}
                      </div>
                      <span className="font-medium">{action.label}</span>
                    </button>
                  ))}
                </div>
              </Card>

              {/* Recent Activity */}
              <Card className="p-6 border-border/50">
                <h3 className="text-lg font-semibold mb-4">Recent Activity</h3>
                <div className="space-y-4">
                  {recentActivity.map((activity) => (
                    <div key={activity.id} className="flex items-start gap-3 p-3 hover:bg-accent/30 rounded-xl transition-colors cursor-pointer">
                      <div className="p-2 bg-primary/10 rounded-full flex-shrink-0">
                        {getTypeIcon(activity.type)}
                      </div>
                      <div className="flex-1 min-w-0">
                        <h4 className="font-medium text-sm mb-1">{activity.title}</h4>
                        <p className="text-xs text-muted-foreground mb-2">{activity.description}</p>
                        <div className="flex items-center gap-2 text-xs text-muted-foreground">
                          <Clock className="w-3 h-3" />
                          <span>{activity.time}</span>
                          <div className="w-5 h-5 bg-primary rounded-full flex items-center justify-center text-primary-foreground text-xs font-medium">
                            {activity.user}
                          </div>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </Card>
            </div>
          </div>
          <ScrollToBottomButton isVisible={showScrollToBottom} onClick={scrollToBottom} />
          </PageLayout>
        )
    }
approved: false
linesAdded: null
linesRemoved: null
linesDifference: null
gitCommittedAt: null
status: undone
id: 452
