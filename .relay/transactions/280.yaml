uuid: c257004f-9a4f-4d40-84c6-4876b6de1a41
projectId: jeli-app-shell
createdAt: '2025-10-14T03:29:52.949Z'
gitCommitMsg: >-
  perf: implement granular state selection and consolidate UI stores

  Refactored the application to address significant performance degradation and
  UI lag caused by excessive re-renders.

  - Consolidated all UI-related state from `appStore` into `appShellStore`,
  creating a single source of truth and reducing store management overhead. The
  `appStore.ts` file has been deleted.

  - Implemented granular state selection across all components and hooks
  connected to `useAppShellStore`. Components now subscribe only to the specific
  slices of state they need, drastically reducing the number of unnecessary
  re-renders. This is the primary fix for the animation jank and slow
  interactions.

  - Removed prop-drilling for state and actions (e.g., in `AppShell` ->
  `TopBar`), as components now source their dependencies directly from the
  global store.
promptSummary: >-
  I executed Part 1 of the performance tuning plan. This involved merging the
  `appStore` into the `appShellStore` to consolidate UI state, and then
  meticulously refactoring every component and hook that uses the store to
  subscribe to state with granular selectors. This change prevents components
  from re-rendering unnecessarily and is the primary fix for the reported UI lag
  and animation performance issues.
reasoning:
  - >-
    Here's the plan. We're going to surgically optimize the app to get our
    performance back.
  - >-
    First, we'll merge the `useAppStore` into `useAppShellStore`. Having two
    separate stores for UI state is redundant and creates extra overhead.
    Consolidating them into one place simplifies the architecture and reduces
    the number of state updates flying around.
  - >-
    Second, and this is the most critical fix, we'll refactor every single
    component that connects to our global store. Instead of subscribing to the
    entire state object—which forces a re-render on *any* state
    change—components will now use granular selectors to listen for only the
    *specific* pieces of state they actually need. A component that only cares
    about `sidebarState` will no longer re-render when the `bodyState` changes.
    This will drastically cut down on unnecessary renders, which is the root
    cause of the UI lag.
  - Let's get this thing running smoothly again.
  - '### Step 1: Consolidate `appStore` into `appShellStore`'
  - >-
    I'll start by merging the state and actions from `appStore.ts` into
    `appShell.store.ts` to create a single source of truth for all UI state.
  - >-
    Now that `appShell.store.ts` contains everything, `appStore.ts` is no longer
    needed.
  - >-
    I'll update the main library export file to remove references to the deleted
    store.
  - '### Step 2: Refactor Components to Use Granular Selectors'
  - >-
    This is the core of the performance fix. I will update every component and
    hook to subscribe only to the state it needs, preventing unnecessary
    re-renders.
  - >-
    First, I'll update `useAppViewManager.hook.ts` to import the `ActivePage`
    type from its new location.
  - >-
    Next, I'll refactor `AppShell.tsx` to use individual selectors and remove
    prop drilling.
  - >-
    The `CommandPalette` component is updated to fetch from the consolidated
    `appShellStore`.
  - >-
    The `TopBar` component now also sources all its state and actions from the
    shell store.
  - >-
    `SettingsContent` is a heavy user of the store; refactoring it to use
    granular selectors is a big win.
  - >-
    Here are the remaining components and hooks, all updated to the more
    performant granular selector pattern.
  - >-
    With these changes, the application's performance should be significantly
    improved, resulting in a much smoother user experience.
  - '---'
operations:
  - type: write
    path: src/store/appShell.store.ts
    content: >+
      --- src/store/appShell.store.ts

      +++ src/store/appShell.store.ts

      @@ -1,6 +1,8 @@
       import { create } from 'zustand';
       import { type ReactElement } from 'react';
       import { SIDEBAR_STATES, BODY_STATES, type SidebarState, type BodyState } from '@/lib/utils';
      +

      +export type ActivePage = 'dashboard' | 'settings' | 'toaster' |
      'notifications' | 'data-demo';
       
       // --- State and Action Types ---
       
      @@ -16,6 +18,8 @@
         reducedMotion: boolean;
         compactMode: boolean;
         primaryColor: string;
      +  isCommandPaletteOpen: boolean;

      +  isDarkMode: boolean;
         appName?: string;
         appLogo?: ReactElement;
         draggedPage: 'dashboard' | 'settings' | 'toaster' | 'notifications' | 'data-demo' | null;
      @@ -43,6 +47,8 @@
           setCompactMode: (payload: boolean) => void;
           setPrimaryColor: (payload: string) => void;
           setDraggedPage: (payload: 'dashboard' | 'settings' | 'toaster' | 'notifications' | 'data-demo' | null) => void;
      +    setCommandPaletteOpen: (open: boolean) => void;

      +    toggleDarkMode: () => void;
           setDragHoverTarget: (payload: 'left' | 'right' | null) => void;
           setHoveredPane: (payload: 'left' | 'right' | null) => void;
           
      @@ -69,6 +75,8 @@
         reducedMotion: false,
         compactMode: false,
         primaryColor: '220 84% 60%',
      +  isCommandPaletteOpen: false,

      +  isDarkMode: false,
         appName: 'Jeli App',
         appLogo: undefined,
         draggedPage: null,
      @@ -109,6 +117,8 @@
           set({ primaryColor: payload });
         },
         setDraggedPage: (payload) => set({ draggedPage: payload }),
      +  setCommandPaletteOpen: (open) => set({ isCommandPaletteOpen: open }),

      +  toggleDarkMode: () => set((state) => ({ isDarkMode: !state.isDarkMode
      })),
         setDragHoverTarget: (payload) => set({ dragHoverTarget: payload }),
         setHoveredPane: (payload) => set({ hoveredPane: payload }),
         

    patchStrategy: standard-diff
  - type: delete
    path: src/store/appStore.ts
  - type: write
    path: src/index.ts
    content: |
      --- src/index.ts
      +++ src/index.ts
      @@ -74,6 +74,6 @@
       export * from './lib/utils';
       
       // Store
      -export { useAppStore, type ActivePage } from './store/appStore';
      +export type { ActivePage } from './store/appShell.store';
       export { useAuthStore } from './store/authStore';
    patchStrategy: standard-diff
  - type: write
    path: src/hooks/useAppViewManager.hook.ts
    content: |+
      --- src/hooks/useAppViewManager.hook.ts
      +++ src/hooks/useAppViewManager.hook.ts
      @@ -1,7 +1,6 @@
       import { useMemo, useCallback } from 'react';
       import { useSearchParams, useNavigate, useLocation, useParams } from 'react-router-dom';
      -import type { AppShellState } from '@/store/appShell.store';
      -import type { ActivePage } from '@/store/appStore';
      +import type { AppShellState, ActivePage } from '@/store/appShell.store';
       import type { DataItem, ViewMode, SortConfig, SortableField, GroupableField, Status, Priority } from '@/pages/DataDemo/types';
       import type { FilterConfig } from '@/pages/DataDemo/components/DataToolbar';
       import { BODY_STATES } from '@/lib/utils';

    patchStrategy: standard-diff
  - type: write
    path: src/components/layout/AppShell.tsx
    content: >+
      --- src/components/layout/AppShell.tsx

      +++ src/components/layout/AppShell.tsx

      @@ -3,7 +3,6 @@
       import { cn } from '@/lib/utils'
       import { gsap } from 'gsap';
       import { CommandPalette } from '@/components/global/CommandPalette';
      -import { useAppStore } from '@/store/appStore'
       import { useAppShellStore } from '@/store/appShell.store';
       import { SIDEBAR_STATES, BODY_STATES } from '@/lib/utils'
       import { useResizableSidebar, useResizableRightPane } from '@/hooks/useResizablePanes.hook'
      @@ -31,23 +30,19 @@
       
       
       export function AppShell({ sidebar, topBar, mainContent, rightPane, commandPalette, onOverlayClick }: AppShellProps) {
      -  const {

      -    sidebarState, autoExpandSidebar, hoveredPane, draggedPage,

      -    dragHoverTarget, bodyState, sidePaneContent, reducedMotion,

      -    isTopBarVisible,

      -  } = useAppShellStore(state => ({

      -    sidebarState: state.sidebarState, autoExpandSidebar:
      state.autoExpandSidebar,

      -    hoveredPane: state.hoveredPane, draggedPage: state.draggedPage,

      -    dragHoverTarget: state.dragHoverTarget, bodyState: state.bodyState,

      -    sidePaneContent: state.sidePaneContent, reducedMotion:
      state.reducedMotion,

      -    isTopBarVisible: state.isTopBarVisible,

      -  }));

      -  const { setSidebarState, toggleSidebar, peekSidebar, setHoveredPane } =
      useAppShellStore.getState();

      +  const sidebarState = useAppShellStore(s => s.sidebarState);

      +  const autoExpandSidebar = useAppShellStore(s => s.autoExpandSidebar);

      +  const hoveredPane = useAppShellStore(s => s.hoveredPane);

      +  const draggedPage = useAppShellStore(s => s.draggedPage);

      +  const dragHoverTarget = useAppShellStore(s => s.dragHoverTarget);

      +  const bodyState = useAppShellStore(s => s.bodyState);

      +  const sidePaneContent = useAppShellStore(s => s.sidePaneContent);

      +  const reducedMotion = useAppShellStore(s => s.reducedMotion);

      +  const isTopBarVisible = useAppShellStore(s => s.isTopBarVisible);

      +  const isDarkMode = useAppShellStore(s => s.isDarkMode);

      +  const { setSidebarState, peekSidebar, setHoveredPane } =
      useAppShellStore.getState();
         
         const isFullscreen = bodyState === BODY_STATES.FULLSCREEN;
         const isSidePaneOpen = bodyState === BODY_STATES.SIDE_PANE;
      -

      -  const { isDarkMode, toggleDarkMode } = useAppStore();
         const location = useLocation();
         const activePage = location.pathname.split('/')[1] || 'dashboard';
         const appRef = useRef<HTMLDivElement>(null)
      @@ -109,12 +104,6 @@
           }
         });
       
      -  const topBarWithProps = React.cloneElement(topBar, {

      -    onToggleSidebar: toggleSidebar,

      -    onToggleDarkMode: toggleDarkMode,

      -  });

      -
         const mainContentWithProps = React.cloneElement(mainContent, {
           ref: mainContentRef,
         });
      @@ -147,7 +136,7 @@
                   )}
                   onMouseEnter={() => { if (isSplitView) setHoveredPane(null); }}
                 >
      -            {topBarWithProps}

      +            {topBar}
                 </div>
       
                 <div className="flex flex-1 min-h-0">

    patchStrategy: standard-diff
  - type: write
    path: src/components/global/CommandPalette.tsx
    content: >+
      --- src/components/global/CommandPalette.tsx

      +++ src/components/global/CommandPalette.tsx

      @@ -7,29 +7,24 @@
         CommandSeparator,
         CommandShortcut,
       } from '@/components/ui/command';
      -import { useAppStore } from '@/store/appStore'
       import { useCommandPaletteToggle } from '@/hooks/useCommandPaletteToggle.hook'
       import { useAppViewManager } from '@/hooks/useAppViewManager.hook';
       import { useAppShellStore } from '@/store/appShell.store';
       import { Home, Settings, Moon, Sun, Monitor, Smartphone, PanelRight, Maximize, Component, Bell } from 'lucide-react'
       
       export function CommandPalette() {
      -  const { setCompactMode, toggleFullscreen } = useAppShellStore();

      +  const { setCompactMode, toggleFullscreen, setCommandPaletteOpen,
      toggleDarkMode } = useAppShellStore.getState();

      +  const isCommandPaletteOpen = useAppShellStore(s =>
      s.isCommandPaletteOpen);

      +  const isDarkMode = useAppShellStore(s => s.isDarkMode);
         const viewManager = useAppViewManager();
      -  const {

      -    isCommandPaletteOpen,

      -    setCommandPaletteOpen,

      -    isDarkMode,

      -    toggleDarkMode,

      -  } = useAppStore()
         useCommandPaletteToggle()
         
         const runCommand = (command: () => void) => {
      -    setCommandPaletteOpen(false)

      +    setCommandPaletteOpen(false);
           command()
         }
       
         return (
           <CommandDialog open={isCommandPaletteOpen} onOpenChange={setCommandPaletteOpen}>
             <CommandInput placeholder="Type a command or search..." />
             <CommandList>

    patchStrategy: standard-diff
  - type: write
    path: src/components/layout/TopBar.tsx
    content: |+
      --- src/components/layout/TopBar.tsx
      +++ src/components/layout/TopBar.tsx
      @@ -8,7 +8,6 @@
       } from 'lucide-react'
       import { cn } from '@/lib/utils'
       import { BODY_STATES } from '@/lib/utils'
      -import { useAppStore } from '@/store/appStore'
       import { useAppViewManager } from '@/hooks/useAppViewManager.hook'
       import { UserDropdown } from './UserDropdown'
       import { ViewModeSwitcher } from './ViewModeSwitcher'
      @@ -21,17 +20,15 @@
       export function TopBar({
         children,
       }: TopBarProps) {
      -  const bodyState = useAppShellStore(s => s.bodyState);
      -  const toggleSidebar = useAppShellStore(s => s.toggleSidebar);
      +  const bodyState = useAppShellStore(s => s.bodyState)
      +  const isDarkMode = useAppShellStore(s => s.isDarkMode);
      +  const { 
      +    toggleSidebar, 
      +    setCommandPaletteOpen,
      +    toggleDarkMode,
      +  } = useAppShellStore.getState();
         const viewManager = useAppViewManager();
      -  const { 
      -    setCommandPaletteOpen,
      -    isDarkMode,
      -    toggleDarkMode,
      -  } = useAppStore()
       
         return (
           <div className={cn(

    patchStrategy: standard-diff
  - type: write
    path: src/features/settings/SettingsContent.tsx
    content: >+
      --- src/features/settings/SettingsContent.tsx

      +++ src/features/settings/SettingsContent.tsx

      @@ -12,7 +12,6 @@
       } from 'lucide-react'
       import { cn } from '@/lib/utils'
       import { useAppShellStore } from '@/store/appShell.store'
      -import { useAppStore } from '@/store/appStore'
       import { SettingsToggle } from './SettingsToggle'
       import { SettingsSection } from './SettingsSection'
       
      @@ -26,13 +25,18 @@
       ]
       
       export function SettingsContent() {
      -  const {

      -    sidebarWidth, compactMode, primaryColor, autoExpandSidebar,
      reducedMotion,

      +  const sidebarWidth = useAppShellStore(s => s.sidebarWidth);

      +  const compactMode = useAppShellStore(s => s.compactMode);

      +  const primaryColor = useAppShellStore(s => s.primaryColor);

      +  const autoExpandSidebar = useAppShellStore(s => s.autoExpandSidebar);

      +  const reducedMotion = useAppShellStore(s => s.reducedMotion);

      +  const isDarkMode = useAppShellStore(s => s.isDarkMode);

      +  

      +  const {
           setSidebarWidth, setCompactMode, setPrimaryColor, setAutoExpandSidebar,
      -    setReducedMotion, resetToDefaults

      -  } = useAppShellStore();

      -  const { isDarkMode, toggleDarkMode } = useAppStore()

      +    setReducedMotion, resetToDefaults, toggleDarkMode

      +  } = useAppShellStore.getState();
       
         const [tempSidebarWidth, setTempSidebarWidth] = useState(sidebarWidth)
       

    patchStrategy: standard-diff
  - type: write
    path: src/components/shared/PageLayout.tsx
    content: |+
      --- src/components/shared/PageLayout.tsx
      +++ src/components/shared/PageLayout.tsx
      @@ -9,7 +9,8 @@
       
       export const PageLayout = React.forwardRef<HTMLDivElement, PageLayoutProps>(
         ({ children, onScroll, scrollRef, className, ...props }, ref) => {
      -    const { isTopBarVisible, bodyState } = useAppShellStore();
      +    const isTopBarVisible = useAppShellStore(s => s.isTopBarVisible);
      +    const bodyState = useAppShellStore(s => s.bodyState);
           const isFullscreen = bodyState === 'fullscreen';
           const isInSidePane = bodyState === BODY_STATES.SIDE_PANE;
       

    patchStrategy: standard-diff
  - type: write
    path: src/components/layout/MainContent.tsx
    content: >+
      --- src/components/layout/MainContent.tsx

      +++ src/components/layout/MainContent.tsx

      @@ -8,7 +8,9 @@
       
       export const MainContent = forwardRef<HTMLDivElement, MainContentProps>(
         ({ children }, ref) => {
      -    const { bodyState, fullscreenTarget, toggleFullscreen } =
      useAppShellStore();

      +    const bodyState = useAppShellStore(s => s.bodyState);

      +    const fullscreenTarget = useAppShellStore(s => s.fullscreenTarget);

      +    const { toggleFullscreen } = useAppShellStore.getState();
           const isFullscreen = bodyState === BODY_STATES.FULLSCREEN;
       
           if (isFullscreen && fullscreenTarget === 'right') {

    patchStrategy: standard-diff
  - type: write
    path: src/components/layout/ViewModeSwitcher.tsx
    content: >+
      --- src/components/layout/ViewModeSwitcher.tsx

      +++ src/components/layout/ViewModeSwitcher.tsx

      @@ -1,8 +1,7 @@
       import { useState, useRef, useEffect } from 'react';
       import { gsap } from 'gsap';
       import { cn } from '@/lib/utils'
      -import { useAppShellStore } from '@/store/appShell.store'

      -import { type ActivePage } from '@/store/appStore'

      +import { useAppShellStore, type AppShellState, type ActivePage } from
      '@/store/appShell.store'
       import { BODY_STATES } from '@/lib/utils'
      -import { type AppShellState } from '@/store/appShell.store'
       import { useAppViewManager } from '@/hooks/useAppViewManager.hook'
       import {
         Columns,
      @@ -16,8 +15,9 @@
       } from 'lucide-react'
       
       export function ViewModeSwitcher({ pane, targetPage }: { pane?: 'main' | 'right', targetPage?: ActivePage }) {
      -  const { bodyState, fullscreenTarget } = useAppShellStore();

      -  const toggleFullscreen = useAppShellStore(s => s.toggleFullscreen);

      +  const bodyState = useAppShellStore(s => s.bodyState);

      +  const fullscreenTarget = useAppShellStore(s => s.fullscreenTarget);

      +  const { toggleFullscreen } = useAppShellStore.getState();
         const {
           currentActivePage,
           toggleSidePane,

    patchStrategy: standard-diff
  - type: write
    path: src/components/layout/Sidebar.tsx
    content: |+
      --- src/components/layout/Sidebar.tsx
      +++ src/components/layout/Sidebar.tsx
      @@ -29,7 +29,8 @@
       
       const Sidebar = React.forwardRef<HTMLDivElement, SidebarProps>(
         ({ children, className, ...props }, ref) => {
      -    const { sidebarState, compactMode } = useAppShellStore();
      +    const sidebarState = useAppShellStore(s => s.sidebarState);
      +    const compactMode = useAppShellStore(s => s.compactMode);
           const isCollapsed = sidebarState === SIDEBAR_STATES.COLLAPSED;
           const isPeek = sidebarState === SIDEBAR_STATES.PEEK;
       

    patchStrategy: standard-diff
  - type: write
    path: src/components/layout/RightPane.tsx
    content: >+
      --- src/components/layout/RightPane.tsx

      +++ src/components/layout/RightPane.tsx

      @@ -12,8 +12,9 @@
       import { useRightPaneContent } from '@/hooks/useRightPaneContent.hook'
       
       export const RightPane = forwardRef<HTMLDivElement, { className?: string }>(({ className }, ref) => {
      -  const fullscreenTarget = useAppShellStore(s => s.fullscreenTarget);

      -  const bodyState = useAppShellStore(s => s.bodyState);

      -  const { toggleFullscreen, setIsResizingRightPane } =
      useAppShellStore.getState();

      +  const fullscreenTarget = useAppShellStore(s => s.fullscreenTarget)

      +  const bodyState = useAppShellStore(s => s.bodyState)

      +  const { toggleFullscreen, setIsResizingRightPane } =

      +    useAppShellStore.getState()
       
         const viewManager = useAppViewManager()
         const { sidePaneContent, closeSidePane, toggleSplitView, navigateTo } = viewManager

    patchStrategy: standard-diff
  - type: write
    path: src/components/layout/EnhancedSidebar.tsx
    content: >+
      --- src/components/layout/EnhancedSidebar.tsx

      +++ src/components/layout/EnhancedSidebar.tsx

      @@ -21,10 +21,9 @@
         Download,
         User,
         Plus,
      -  Database

      +  Database,
       } from 'lucide-react';
      -import { type ActivePage } from '@/store/appStore';

      -import { useAppShellStore } from '@/store/appShell.store';

      +import { useAppShellStore, type ActivePage } from
      '@/store/appShell.store';
       import {
         Workspaces,
         WorkspaceTrigger,
      @@ -74,7 +73,10 @@
       
       export const EnhancedSidebar = React.forwardRef<HTMLDivElement, SidebarProps>(
         ({ onMouseEnter, onMouseLeave }, ref) => {
      -    const { sidebarWidth, compactMode, appName, appLogo } =
      useAppShellStore();

      +    const sidebarWidth = useAppShellStore(s => s.sidebarWidth);

      +    const compactMode = useAppShellStore(s => s.compactMode);

      +    const appName = useAppShellStore(s => s.appName);

      +    const appLogo = useAppShellStore(s => s.appLogo);
           const [selectedWorkspace, setSelectedWorkspace] = React.useState(mockWorkspaces[0]);
       
           return (
      @@ -154,8 +156,8 @@
       }
       
       const AppMenuItem: React.FC<AppMenuItemProps> = ({ icon: Icon, label, badge, hasActions, children, isSubItem = false, page, opensInSidePane = false }) => {
      -  const compactMode = useAppShellStore(s => s.compactMode);

      -  const { setDraggedPage, setDragHoverTarget } =
      useAppShellStore.getState();

      +  const compactMode = useAppShellStore(state => state.compactMode);

      +  const { setDraggedPage, setDragHoverTarget } =
      useAppShellStore.getState()
         const { isCollapsed } = useSidebar();
         const viewManager = useAppViewManager();
       

    patchStrategy: standard-diff
  - type: write
    path: src/hooks/useAppShellAnimations.hook.ts
    content: >+
      --- src/hooks/useAppShellAnimations.hook.ts

      +++ src/hooks/useAppShellAnimations.hook.ts

      @@ -15,7 +15,10 @@
         sidebarRef: React.RefObject<HTMLDivElement>,
         resizeHandleRef: React.RefObject<HTMLDivElement>
       ) {
      -  const { sidebarState, sidebarWidth, bodyState, reducedMotion } =
      useAppShellStore();

      +  const sidebarState = useAppShellStore(s => s.sidebarState);

      +  const sidebarWidth = useAppShellStore(s => s.sidebarWidth);

      +  const bodyState = useAppShellStore(s => s.bodyState);

      +  const reducedMotion = useAppShellStore(s => s.reducedMotion);
         const animationDuration = reducedMotion ? 0.1 : 0.4;
       
         useEffect(() => {
      @@ -69,7 +72,10 @@
         topBarContainerRef: React.RefObject<HTMLDivElement>,
         mainAreaRef: React.RefObject<HTMLDivElement>
       ) {
      -  const { bodyState, reducedMotion, isTopBarVisible, fullscreenTarget } =
      useAppShellStore();

      +  const bodyState = useAppShellStore(s => s.bodyState);

      +  const reducedMotion = useAppShellStore(s => s.reducedMotion);

      +  const isTopBarVisible = useAppShellStore(s => s.isTopBarVisible);

      +  const fullscreenTarget = useAppShellStore(s => s.fullscreenTarget);
         const rightPaneWidth = useRightPaneWidth();
         const animationDuration = reducedMotion ? 0.1 : 0.4;
         const prevBodyState = usePrevious(bodyState);

    patchStrategy: standard-diff
snapshot:
  src/hooks/useAppViewManager.hook.ts: "import { useMemo, useCallback } from 'react';\nimport { useSearchParams, useNavigate, useLocation, useParams } from 'react-router-dom';\nimport type { AppShellState } from '@/store/appShell.store';\nimport type { ActivePage } from '@/store/appStore';\nimport type { DataItem, ViewMode, SortConfig, SortableField, GroupableField, Status, Priority } from '@/pages/DataDemo/types';\nimport type { FilterConfig } from '@/pages/DataDemo/components/DataToolbar';\nimport { BODY_STATES } from '@/lib/utils';\n\nconst pageToPaneMap: Record<string, AppShellState['sidePaneContent']> = {\n  dashboard: 'main',\n  settings: 'settings',\n  toaster: 'toaster',\n  notifications: 'notifications',\n  'data-demo': 'dataDemo',\n};\n\n/**\n * A centralized hook to manage and synchronize all URL-based view states.\n * This is the single source of truth for view modes, side panes, split views,\n * and page-specific parameters.\n */\nexport function useAppViewManager() {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const navigate = useNavigate();\n  const location = useLocation();\n  const { itemId } = useParams<{ itemId: string }>();\n\n  // --- DERIVED STATE FROM URL ---\n\n  const view = searchParams.get('view');\n  const sidePane = searchParams.get('sidePane');\n  const right = searchParams.get('right');\n\n  const { bodyState, sidePaneContent } = useMemo(() => {\n    const validPanes: AppShellState['sidePaneContent'][] = ['details', 'settings', 'main', 'toaster', 'notifications', 'dataDemo'];\n    \n    if (itemId) {\n      if (view === 'split') {\n        return { bodyState: BODY_STATES.SPLIT_VIEW, sidePaneContent: 'dataItem' as const };\n      }\n      return { bodyState: BODY_STATES.SIDE_PANE, sidePaneContent: 'dataItem' as const };\n    }\n    \n    if (sidePane && validPanes.includes(sidePane as AppShellState['sidePaneContent'])) {\n      return { bodyState: BODY_STATES.SIDE_PANE, sidePaneContent: sidePane as AppShellState['sidePaneContent'] };\n    }\n    \n    if (view === 'split' && right && validPanes.includes(right as AppShellState['sidePaneContent'])) {\n      return { bodyState: BODY_STATES.SPLIT_VIEW, sidePaneContent: right as AppShellState['sidePaneContent'] };\n    }\n    \n    return { bodyState: BODY_STATES.NORMAL, sidePaneContent: 'details' as const };\n  }, [itemId, view, sidePane, right]);\n  \n  const currentActivePage = useMemo(() => (location.pathname.split('/')[1] || 'dashboard') as ActivePage, [location.pathname]);\n\n  // DataDemo specific state\n  const viewMode = useMemo(() => (searchParams.get('view') as ViewMode) || 'list', [searchParams]);\n\tconst page = useMemo(() => parseInt(searchParams.get('page') || '1', 10), [searchParams]);\n\tconst groupBy = useMemo(() => (searchParams.get('groupBy') as GroupableField | 'none') || 'none', [searchParams]);\n\tconst activeGroupTab = useMemo(() => searchParams.get('tab') || 'all', [searchParams]);\n\tconst filters = useMemo<FilterConfig>(\n\t\t() => ({\n\t\t\tsearchTerm: searchParams.get('q') || '',\n\t\t\tstatus: (searchParams.get('status')?.split(',') || []).filter(Boolean) as Status[],\n\t\t\tpriority: (searchParams.get('priority')?.split(',') || []).filter(Boolean) as Priority[],\n\t\t}),\n\t\t[searchParams],\n\t);\n\tconst sortConfig = useMemo<SortConfig | null>(() => {\n\t\tconst sortParam = searchParams.get('sort');\n\t\tif (!sortParam) return { key: 'updatedAt', direction: 'desc' }; // Default sort\n\t\tif (sortParam === 'default') return null;\n\n\t\tconst [key, direction] = sortParam.split('-');\n\t\treturn { key: key as SortableField, direction: direction as 'asc' | 'desc' };\n\t}, [searchParams]);\n\n  // --- MUTATOR ACTIONS ---\n\n  const handleParamsChange = useCallback(\n\t\t(newParams: Record<string, string | string[] | null | undefined>, resetPage = false) => {\n\t\t\tsetSearchParams(\n\t\t\t\t(prev) => {\n\t\t\t\t\tconst updated = new URLSearchParams(prev);\n\t\t\t\t\t\n\t\t\t\t\tfor (const [key, value] of Object.entries(newParams)) {\n\t\t\t\t\t\tif (value === null || value === undefined || (Array.isArray(value) && value.length === 0) || value === '') {\n\t\t\t\t\t\t\tupdated.delete(key);\n\t\t\t\t\t\t} else if (Array.isArray(value)) {\n\t\t\t\t\t\t\tupdated.set(key, value.join(','));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tupdated.set(key, String(value));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (resetPage) {\n\t\t\t\t\t\tupdated.delete('page');\n\t\t\t\t\t}\n\t\t\t\t\tif ('groupBy' in newParams) {\n\t\t\t\t\t\tupdated.delete('tab');\n\t\t\t\t\t}\n\n\t\t\t\t\treturn updated;\n\t\t\t\t},\n\t\t\t\t{ replace: true },\n\t\t\t);\n\t\t},\n\t\t[setSearchParams],\n\t);\n\n  const navigateTo = useCallback((page: string) => {\n    navigate(page.startsWith('/') ? page : `/${page}`);\n  }, [navigate]);\n\n  const openSidePane = useCallback((pane: AppShellState['sidePaneContent']) => {\n    if (location.pathname === `/${Object.keys(pageToPaneMap).find(key => pageToPaneMap[key] === pane)}`) {\n        navigate({ pathname: '/dashboard', search: `?sidePane=${pane}` }, { replace: true });\n    } else {\n        handleParamsChange({ sidePane: pane, view: null, right: null });\n    }\n  }, [handleParamsChange, navigate, location.pathname]);\n\n  const closeSidePane = useCallback(() => {\n    if (itemId) {\n      navigate('/data-demo');\n    } else {\n      handleParamsChange({ sidePane: null, view: null, right: null });\n    }\n  }, [itemId, navigate, handleParamsChange]);\n\n  const toggleSidePane = useCallback((pane: AppShellState['sidePaneContent']) => {\n    if (sidePane === pane) {\n      closeSidePane();\n    } else {\n      openSidePane(pane);\n    }\n  }, [sidePane, openSidePane, closeSidePane]);\n\n  const toggleSplitView = useCallback(() => {\n    if (bodyState === BODY_STATES.SIDE_PANE) {\n      handleParamsChange({ view: 'split', right: sidePane, sidePane: null });\n    } else if (bodyState === BODY_STATES.SPLIT_VIEW) {\n      handleParamsChange({ sidePane: right, view: null, right: null });\n    } else { // From normal\n      const paneContent = pageToPaneMap[currentActivePage] || 'details';\n      handleParamsChange({ view: 'split', right: paneContent, sidePane: null });\n    }\n  }, [bodyState, sidePane, right, currentActivePage, handleParamsChange]);\n  \n  const setNormalView = useCallback(() => {\n      handleParamsChange({ sidePane: null, view: null, right: null });\n  }, [handleParamsChange]);\n\n  const switchSplitPanes = useCallback(() => {\n    if (bodyState !== BODY_STATES.SPLIT_VIEW) return;\n    const newSidePaneContent = pageToPaneMap[currentActivePage];\n    const newActivePage = Object.entries(pageToPaneMap).find(\n      ([, value]) => value === sidePaneContent\n    )?.[0] as ActivePage | undefined;\n\n    if (newActivePage && newSidePaneContent) {\n      navigate(`/${newActivePage}?view=split&right=${newSidePaneContent}`, { replace: true });\n    }\n  }, [bodyState, currentActivePage, sidePaneContent, navigate]);\n  \n  const closeSplitPane = useCallback((paneToClose: 'main' | 'right') => {\n    if (bodyState !== BODY_STATES.SPLIT_VIEW) return;\n    if (paneToClose === 'right') {\n      navigate(`/${currentActivePage}`, { replace: true });\n    } else { // Closing main pane\n      const pageToBecomeActive = Object.entries(pageToPaneMap).find(\n        ([, value]) => value === sidePaneContent\n      )?.[0] as ActivePage | undefined;\n      \n      if (pageToBecomeActive) {\n        navigate(`/${pageToBecomeActive}`, { replace: true });\n      } else {\n        navigate(`/dashboard`, { replace: true });\n      }\n    }\n  }, [bodyState, currentActivePage, sidePaneContent, navigate]);\n  \n  // DataDemo actions\n  const setViewMode = (mode: ViewMode) => handleParamsChange({ view: mode });\n  const setGroupBy = (val: string) => handleParamsChange({ groupBy: val === 'none' ? null : val }, true);\n  const setActiveGroupTab = (tab: string) => handleParamsChange({ tab: tab === 'all' ? null : tab });\n  const setFilters = (newFilters: FilterConfig) => {\n    handleParamsChange({ q: newFilters.searchTerm, status: newFilters.status, priority: newFilters.priority }, true);\n  }\n  const setSort = (config: SortConfig | null) => {\n    if (!config) {\n      handleParamsChange({ sort: 'default' }, true);\n    } else {\n      handleParamsChange({ sort: `${config.key}-${config.direction}` }, true);\n    }\n  }\n  const setTableSort = (field: SortableField) => {\n    let newSort: string | null = `${field}-desc`;\n    if (sortConfig?.key === field) {\n      if (sortConfig.direction === 'desc') newSort = `${field}-asc`;\n      else if (sortConfig.direction === 'asc') newSort = 'default';\n    }\n    handleParamsChange({ sort: newSort }, true);\n  };\n  const setPage = (newPage: number) => handleParamsChange({ page: newPage.toString() });\n\n  const onItemSelect = useCallback((item: DataItem) => {\n\t\tnavigate(`/data-demo/${item.id}${location.search}`);\n\t}, [navigate, location.search]);\n\n\n  return useMemo(() => ({\n    // State\n    bodyState,\n    sidePaneContent,\n    currentActivePage,\n    itemId,\n    // DataDemo State\n    viewMode,\n    page,\n    groupBy,\n    activeGroupTab,\n    filters,\n    sortConfig,\n    // Actions\n    navigateTo,\n    openSidePane,\n    closeSidePane,\n    toggleSidePane,\n    toggleSplitView,\n    setNormalView,\n    switchSplitPanes,\n    closeSplitPane,\n    // DataDemo Actions\n    onItemSelect,\n    setViewMode,\n    setGroupBy,\n    setActiveGroupTab,\n    setFilters,\n    setSort,\n    setTableSort,\n    setPage,\n  }), [\n    bodyState, sidePaneContent, currentActivePage, itemId,\n    viewMode, page, groupBy, activeGroupTab, filters, sortConfig,\n    navigateTo, openSidePane, closeSidePane, toggleSidePane, toggleSplitView, setNormalView, \n    switchSplitPanes, closeSplitPane, onItemSelect, setViewMode, setGroupBy, setActiveGroupTab, setFilters,\n    setSort, setTableSort, setPage\n  ]);\n}"
  src/store/appStore.ts: >-
    import { create } from 'zustand'

    import { persist } from 'zustand/middleware'


    export type ActivePage = 'dashboard' | 'settings' | 'toaster' |
    'notifications' | 'data-demo';


    interface AppState {
      // UI States
      isCommandPaletteOpen: boolean
      searchTerm: string
      isDarkMode: boolean
      
      // Actions
      setCommandPaletteOpen: (open: boolean) => void
      setSearchTerm: (term: string) => void
      toggleDarkMode: () => void
    }


    const defaultState = {
      isCommandPaletteOpen: false,
      searchTerm: '',
      isDarkMode: false,
    }


    export const useAppStore = create<AppState>()(
      persist(
        (set) => ({
          ...defaultState,
          
          // Basic setters
          setCommandPaletteOpen: (open) => set({ isCommandPaletteOpen: open }),
          setSearchTerm: (term) => set({ searchTerm: term }),
          toggleDarkMode: () => set((state) => ({ isDarkMode: !state.isDarkMode })),
        }),
        {
          name: 'app-preferences',
          partialize: (state) => ({
            isDarkMode: state.isDarkMode,
            // searchTerm is not persisted
          }),
        }
      )
    )
  src/index.ts: >-
    // Context

    export { AppShellProvider } from './providers/AppShellProvider';

    export { useAppShellStore } from './store/appShell.store';


    // Layout Components

    export { AppShell } from './components/layout/AppShell';

    export { MainContent } from './components/layout/MainContent';

    export { ViewModeSwitcher } from './components/layout/ViewModeSwitcher';

    export { RightPane } from './components/layout/RightPane';

    export { TopBar } from './components/layout/TopBar';

    export { UserDropdown } from './components/layout/UserDropdown';

    export { Workspaces as WorkspaceProvider, WorkspaceTrigger, WorkspaceContent
    } from './components/layout/WorkspaceSwitcher';


    // Sidebar Primitives

    export {
      Sidebar,
      SidebarBody,
      SidebarContent,
      SidebarFooter,
      SidebarHeader,
      SidebarSection,
      SidebarTitle,
      SidebarMenuItem,
      SidebarMenuButton,
      SidebarMenuAction,
      SidebarLabel,
      SidebarBadge,
      SidebarTooltip,
      SidebarIcon,
      useSidebar,
    } from './components/layout/Sidebar';


    // Shared Components

    export { ContentInSidePanePlaceholder } from
    './components/shared/ContentInSidePanePlaceholder';

    export { PageHeader } from './components/shared/PageHeader';

    export { PageLayout } from './components/shared/PageLayout';


    // Feature Components

    export { SettingsContent } from './features/settings/SettingsContent';

    export { SettingsSection } from './features/settings/SettingsSection';

    export { SettingsToggle } from './features/settings/SettingsToggle';

    export { LoginPage } from './components/auth/LoginPage';


    // UI Components

    export * from './components/ui/avatar';

    export * from './components/ui/badge';

    export * from './components/ui/button';

    export * from './components/ui/card';

    export * from './components/ui/command';

    export * from './components/ui/dialog';

    export * from './components/ui/dropdown-menu';

    export * from './components/ui/input';

    export * from './components/ui/label';

    export * from './components/ui/popover';

    export * from './components/ui/tabs';

    export * from './components/ui/toast';

    export { AnimatedTabs } from './components/ui/animated-tabs';


    // Effects Components

    export { AnimatedInput } from './components/effects/AnimatedInput';

    export { BottomGradient } from './components/effects/BottomGradient';

    export { BoxReveal } from './components/effects/BoxReveal';

    export { OrbitingCircles, TechOrbitDisplay } from
    './components/effects/OrbitingCircles';

    export { Ripple } from './components/effects/Ripple';



    // Global Components

    export { CommandPalette } from './components/global/CommandPalette';


    // Hooks

    export { useAutoAnimateTopBar } from './hooks/useAutoAnimateTopBar';

    export { useCommandPaletteToggle } from
    './hooks/useCommandPaletteToggle.hook';


    // Lib

    export * from './lib/utils';


    // Store

    export { useAppStore, type ActivePage } from './store/appStore';

    export { useAuthStore } from './store/authStore';
  src/store/appShell.store.ts: >-
    import { create } from 'zustand';

    import { type ReactElement } from 'react';

    import { SIDEBAR_STATES, BODY_STATES, type SidebarState, type BodyState }
    from '@/lib/utils';


    // --- State and Action Types ---


    export interface AppShellState {
      sidebarState: SidebarState;
      bodyState: BodyState;
      sidePaneContent: 'details' | 'settings' | 'main' | 'toaster' | 'notifications' | 'dataDemo' | 'dataItem';
      sidebarWidth: number;
      sidePaneWidth: number;
      splitPaneWidth: number;
      previousBodyState: BodyState;
      fullscreenTarget: 'main' | 'right' | null;
      isResizing: boolean;
      isResizingRightPane: boolean;
      isTopBarVisible: boolean;
      autoExpandSidebar: boolean;
      reducedMotion: boolean;
      compactMode: boolean;
      primaryColor: string;
      appName?: string;
      appLogo?: ReactElement;
      draggedPage: 'dashboard' | 'settings' | 'toaster' | 'notifications' | 'data-demo' | null;
      dragHoverTarget: 'left' | 'right' | null;
      hoveredPane: 'left' | 'right' | null;
    }


    export interface AppShellActions {
        // Initialization
        init: (config: { appName?: string; appLogo?: ReactElement; defaultSplitPaneWidth?: number }) => void;
        
        // Direct state setters
        setSidebarState: (payload: SidebarState) => void;
        setBodyState: (payload: BodyState) => void;
        setSidePaneContent: (payload: AppShellState['sidePaneContent']) => void;
        setSidebarWidth: (payload: number) => void;
        setSidePaneWidth: (payload: number) => void;
        setSplitPaneWidth: (payload: number) => void;
        setIsResizing: (payload: boolean) => void;
        setFullscreenTarget: (payload: 'main' | 'right' | null) => void;
        setIsResizingRightPane: (payload: boolean) => void;
        setTopBarVisible: (payload: boolean) => void;
        setAutoExpandSidebar: (payload: boolean) => void;
        setReducedMotion: (payload: boolean) => void;
        setCompactMode: (payload: boolean) => void;
        setPrimaryColor: (payload: string) => void;
        setDraggedPage: (payload: 'dashboard' | 'settings' | 'toaster' | 'notifications' | 'data-demo' | null) => void;
        setDragHoverTarget: (payload: 'left' | 'right' | null) => void;
        setHoveredPane: (payload: 'left' | 'right' | null) => void;
        
        // Composite actions
        toggleSidebar: () => void;
        hideSidebar: () => void;
        showSidebar: () => void;
        peekSidebar: () => void;
        toggleFullscreen: (target?: 'main' | 'right' | null) => void;
        resetToDefaults: () => void;
    }


    const defaultState: AppShellState = {
      sidebarState: SIDEBAR_STATES.EXPANDED,
      bodyState: BODY_STATES.NORMAL,
      sidePaneContent: 'details',
      sidebarWidth: 280,
      sidePaneWidth: typeof window !== 'undefined' ? Math.max(300, Math.round(window.innerWidth * 0.6)) : 400,
      splitPaneWidth: typeof window !== 'undefined' ? Math.max(300, Math.round(window.innerWidth * 0.35)) : 400,
      previousBodyState: BODY_STATES.NORMAL,
      fullscreenTarget: null,
      isResizing: false,
      isResizingRightPane: false,
      isTopBarVisible: true,
      autoExpandSidebar: true,
      reducedMotion: false,
      compactMode: false,
      primaryColor: '220 84% 60%',
      appName: 'Jeli App',
      appLogo: undefined,
      draggedPage: null,
      dragHoverTarget: null,
      hoveredPane: null,
    };



    export const useAppShellStore = create<AppShellState &
    AppShellActions>((set, get) => ({
      ...defaultState,

      init: ({ appName, appLogo, defaultSplitPaneWidth }) => set(state => ({
        ...state,
        ...(appName && { appName }),
        ...(appLogo && { appLogo }),
        ...(defaultSplitPaneWidth && { splitPaneWidth: defaultSplitPaneWidth }),
      })),
      
      setSidebarState: (payload) => set({ sidebarState: payload }),
      setBodyState: (payload) => {
        // If we're leaving fullscreen, reset the target and previous state
        if (get().bodyState === BODY_STATES.FULLSCREEN && payload !== BODY_STATES.FULLSCREEN) {
          set({ bodyState: payload, fullscreenTarget: null, previousBodyState: BODY_STATES.NORMAL });
        } else {
          set({ bodyState: payload });
        }
      },
      setSidePaneContent: (payload) => set({ sidePaneContent: payload }),
      setSidebarWidth: (payload) => set({ sidebarWidth: Math.max(200, Math.min(500, payload)) }),
      setSidePaneWidth: (payload) => set({ sidePaneWidth: Math.max(300, Math.min(window.innerWidth * 0.8, payload)) }),
      setSplitPaneWidth: (payload) => set({ splitPaneWidth: Math.max(300, Math.min(window.innerWidth * 0.8, payload)) }),
      setIsResizing: (payload) => set({ isResizing: payload }),
      setFullscreenTarget: (payload) => set({ fullscreenTarget: payload }),
      setIsResizingRightPane: (payload) => set({ isResizingRightPane: payload }),
      setTopBarVisible: (payload) => set({ isTopBarVisible: payload }),
      setAutoExpandSidebar: (payload) => set({ autoExpandSidebar: payload }),
      setReducedMotion: (payload) => set({ reducedMotion: payload }),
      setCompactMode: (payload) => set({ compactMode: payload }),
      setPrimaryColor: (payload) => {
        if (typeof document !== 'undefined') {
            document.documentElement.style.setProperty('--primary-hsl', payload);
        }
        set({ primaryColor: payload });
      },
      setDraggedPage: (payload) => set({ draggedPage: payload }),
      setDragHoverTarget: (payload) => set({ dragHoverTarget: payload }),
      setHoveredPane: (payload) => set({ hoveredPane: payload }),
      
      toggleSidebar: () => {
        const current = get().sidebarState;
        if (current === SIDEBAR_STATES.HIDDEN) set({ sidebarState: SIDEBAR_STATES.COLLAPSED });
        else if (current === SIDEBAR_STATES.COLLAPSED) set({ sidebarState: SIDEBAR_STATES.EXPANDED });
        else if (current === SIDEBAR_STATES.EXPANDED) set({ sidebarState: SIDEBAR_STATES.COLLAPSED });
      },
      hideSidebar: () => set({ sidebarState: SIDEBAR_STATES.HIDDEN }),
      showSidebar: () => set({ sidebarState: SIDEBAR_STATES.EXPANDED }),
      peekSidebar: () => set({ sidebarState: SIDEBAR_STATES.PEEK }),
      
      toggleFullscreen: (target = null) => {
        const { bodyState, previousBodyState } = get();
        if (bodyState === BODY_STATES.FULLSCREEN) {
          set({ 
            bodyState: previousBodyState || BODY_STATES.NORMAL,
            fullscreenTarget: null,
            previousBodyState: BODY_STATES.NORMAL,
          });
        } else {
          set({ 
            previousBodyState: bodyState, 
            bodyState: BODY_STATES.FULLSCREEN, 
            fullscreenTarget: target 
          });
        }
      },
      
      resetToDefaults: () => {
        // Preserve props passed to provider
        const { appName, appLogo } = get();
        const currentPrimaryColor = defaultState.primaryColor;
        if (typeof document !== 'undefined') {
          document.documentElement.style.setProperty('--primary-hsl', currentPrimaryColor);
        }
        set({ ...defaultState, primaryColor: currentPrimaryColor, appName, appLogo });
      },
    }));


    // Add a selector for the derived rightPaneWidth

    export const useRightPaneWidth = () => useAppShellStore(state => 
        state.bodyState === BODY_STATES.SPLIT_VIEW ? state.splitPaneWidth : state.sidePaneWidth
    );
  src/components/layout/TopBar.tsx: |-
    import {
      Menu, 
      Moon, 
      Sun,
      Settings,
      Command,
      Zap,
    } from 'lucide-react'
    import { cn } from '@/lib/utils'
    import { BODY_STATES } from '@/lib/utils'
    import { useAppStore } from '@/store/appStore'
    import { useAppViewManager } from '@/hooks/useAppViewManager.hook'
    import { UserDropdown } from './UserDropdown'
    import { ViewModeSwitcher } from './ViewModeSwitcher'
    import { useAppShellStore } from '@/store/appShell.store'

    interface TopBarProps {
      children?: React.ReactNode
    }

    export function TopBar({
      children,
    }: TopBarProps) {
      const bodyState = useAppShellStore(s => s.bodyState);
      const toggleSidebar = useAppShellStore(s => s.toggleSidebar);
      const viewManager = useAppViewManager();
      const { 
        setCommandPaletteOpen,
        isDarkMode,
        toggleDarkMode,
      } = useAppStore()

      return (
        <div className={cn(
          "h-20 bg-background border-b border-border flex items-center justify-between px-6 z-50 gap-4"
        )}>
          {/* Left Section - Sidebar Controls & Breadcrumbs */}
          <div className="flex items-center gap-4">
            {/* Sidebar Controls */}
            <button
              onClick={toggleSidebar}
              className={cn(
                "h-10 w-10 flex items-center justify-center rounded-full hover:bg-accent transition-colors"
              )}
              title="Toggle Sidebar"
            >
              <Menu className="w-5 h-5" />
            </button>

          </div>

          {/* Right Section - page controls, and global controls */}
          <div className="flex items-center gap-3">
            {children}

            {/* Separator */}
            <div className="w-px h-6 bg-border mx-2" />

            {/* Quick Actions */}
            <div className="flex items-center gap-3">

              <button
                onClick={() => setCommandPaletteOpen(true)}
                className="h-10 w-10 flex items-center justify-center rounded-full hover:bg-accent transition-colors group"
                title="Command Palette (Ctrl+K)"
              >
                <Command className="w-5 h-5 group-hover:scale-110 transition-transform" />
              </button>

            <button
              className="h-10 w-10 flex items-center justify-center rounded-full hover:bg-accent transition-colors group"
              title="Quick Actions"
            >
              <Zap className="w-5 h-5 group-hover:scale-110 transition-transform" />
            </button>

            {bodyState !== BODY_STATES.SPLIT_VIEW && <ViewModeSwitcher />}

            <div className="w-px h-6 bg-border mx-2" />

            {/* Theme and Settings */}
            <button
              onClick={toggleDarkMode}
              className="h-10 w-10 flex items-center justify-center rounded-full hover:bg-accent transition-colors group"
              title="Toggle Dark Mode"
            >
              {isDarkMode ? (
                <Sun className="w-5 h-5 group-hover:scale-110 transition-transform" />
              ) : (
                <Moon className="w-5 h-5 group-hover:scale-110 transition-transform" />
              )}
            </button>

            <button
              onClick={() => viewManager.toggleSidePane('settings')}
              className="h-10 w-10 flex items-center justify-center rounded-full hover:bg-accent transition-colors group"
              title="Settings"
            >
              <Settings className="w-5 h-5 group-hover:rotate-90 transition-transform duration-300" />
            </button>
            <UserDropdown />
            </div>
          </div>
        </div>
      )
    }
  src/components/layout/AppShell.tsx: >-
    import React, { useRef, type ReactElement, useEffect, useLayoutEffect } from
    'react'

    import { useLocation } from 'react-router-dom';

    import { cn } from '@/lib/utils'

    import { gsap } from 'gsap';

    import { CommandPalette } from '@/components/global/CommandPalette';

    import { useAppStore } from '@/store/appStore'

    import { useAppShellStore } from '@/store/appShell.store';

    import { SIDEBAR_STATES, BODY_STATES } from '@/lib/utils'

    import { useResizableSidebar, useResizableRightPane } from
    '@/hooks/useResizablePanes.hook'

    import { useSidebarAnimations, useBodyStateAnimations } from
    '@/hooks/useAppShellAnimations.hook'

    import { ViewModeSwitcher } from './ViewModeSwitcher';

    import { usePaneDnd } from '@/hooks/usePaneDnd.hook';


    interface AppShellProps {
      sidebar: ReactElement;
      topBar: ReactElement;
      mainContent: ReactElement;
      rightPane: ReactElement;
      commandPalette?: ReactElement;
      onOverlayClick?: () => void;
    }


    const pageToPaneMap: Record<string, 'main' | 'settings' | 'toaster' |
    'notifications' | 'dataDemo'> = {
      dashboard: 'main',
      settings: 'settings',
      toaster: 'toaster',
      notifications: 'notifications',
      'data-demo': 'dataDemo',
    };


    // Helper hook to get the previous value of a prop or state

    function usePrevious<T>(value: T): T | undefined {
      const ref = useRef<T>();
      useEffect(() => {
        ref.current = value;
      }, [value]);
      return ref.current;
    }



    export function AppShell({ sidebar, topBar, mainContent, rightPane,
    commandPalette, onOverlayClick }: AppShellProps) {
      const {
        sidebarState, autoExpandSidebar, hoveredPane, draggedPage,
        dragHoverTarget, bodyState, sidePaneContent, reducedMotion,
        isTopBarVisible,
      } = useAppShellStore(state => ({
        sidebarState: state.sidebarState, autoExpandSidebar: state.autoExpandSidebar,
        hoveredPane: state.hoveredPane, draggedPage: state.draggedPage,
        dragHoverTarget: state.dragHoverTarget, bodyState: state.bodyState,
        sidePaneContent: state.sidePaneContent, reducedMotion: state.reducedMotion,
        isTopBarVisible: state.isTopBarVisible,
      }));
      const { setSidebarState, toggleSidebar, peekSidebar, setHoveredPane } = useAppShellStore.getState();
      
      const isFullscreen = bodyState === BODY_STATES.FULLSCREEN;
      const isSidePaneOpen = bodyState === BODY_STATES.SIDE_PANE;

      const { isDarkMode, toggleDarkMode } = useAppStore();
      const location = useLocation();
      const activePage = location.pathname.split('/')[1] || 'dashboard';
      const appRef = useRef<HTMLDivElement>(null)
      const sidebarRef = useRef<HTMLDivElement>(null)
      const mainContentRef = useRef<HTMLDivElement>(null)
      const rightPaneRef = useRef<HTMLDivElement>(null)
      const resizeHandleRef = useRef<HTMLDivElement>(null)
      const topBarContainerRef = useRef<HTMLDivElement>(null)
      const mainAreaRef = useRef<HTMLDivElement>(null)

      const prevActivePage = usePrevious(activePage);
      const prevSidePaneContent = usePrevious(sidePaneContent);

      const isSplitView = bodyState === BODY_STATES.SPLIT_VIEW;
      const dndHandlers = usePaneDnd();

      // Custom hooks for logic
      useResizableSidebar(sidebarRef, resizeHandleRef);
      useResizableRightPane();
      useSidebarAnimations(sidebarRef, resizeHandleRef);
      useBodyStateAnimations(appRef, mainContentRef, rightPaneRef, topBarContainerRef, mainAreaRef);
      
      // Animation for pane swapping
      useLayoutEffect(() => {
        if (reducedMotion || bodyState !== BODY_STATES.SPLIT_VIEW || !prevActivePage || !prevSidePaneContent) {
          return;
        }

        const pageForPrevSidePane = Object.keys(pageToPaneMap).find(
          key => pageToPaneMap[key as keyof typeof pageToPaneMap] === prevSidePaneContent
        );

        // Check if a swap occurred by comparing current state with previous state
        if (activePage === pageForPrevSidePane && sidePaneContent === pageToPaneMap[prevActivePage as keyof typeof pageToPaneMap]) {
          const mainEl = mainAreaRef.current;
          const rightEl = rightPaneRef.current;

          if (mainEl && rightEl) {
            const mainWidth = mainEl.offsetWidth;
            const rightWidth = rightEl.offsetWidth;

            const tl = gsap.timeline();
            
            // Animate main content FROM where right pane was TO its new place
            tl.from(mainEl, {
              x: rightWidth, duration: 0.4, ease: 'power3.inOut'
            });

            // Animate right pane FROM where main content was TO its new place
            tl.from(rightEl, {
              x: -mainWidth, duration: 0.4, ease: 'power3.inOut'
            }, 0); // Start at the same time
          }
        }
      }, [activePage, sidePaneContent, bodyState, prevActivePage, prevSidePaneContent, reducedMotion]);
      
      const sidebarWithProps = React.cloneElement(sidebar, { 
        ref: sidebarRef,
        onMouseEnter: () => {
          if (autoExpandSidebar && sidebarState === SIDEBAR_STATES.COLLAPSED) {
            peekSidebar()
          }
        },
        onMouseLeave: () => {
          if (autoExpandSidebar && sidebarState === SIDEBAR_STATES.PEEK) {
            setSidebarState(SIDEBAR_STATES.COLLAPSED);
          }
        }
      });

      const topBarWithProps = React.cloneElement(topBar, {
        onToggleSidebar: toggleSidebar,
        onToggleDarkMode: toggleDarkMode,
      });

      const mainContentWithProps = React.cloneElement(mainContent, {
        ref: mainContentRef,
      });

      const rightPaneWithProps = React.cloneElement(rightPane, { ref: rightPaneRef });

      return (
        <div 
          ref={appRef}
          className={cn(
            "relative h-screen w-screen overflow-hidden bg-background transition-colors duration-300",
            isDarkMode && "dark"
          )}
        >
          <div className="flex h-screen overflow-hidden">
            {/* Enhanced Sidebar */}
            {sidebarWithProps}

            {/* Resize Handle */}
            {sidebarState !== SIDEBAR_STATES.HIDDEN && (
              <div
                ref={resizeHandleRef}
                className={cn(
                  "absolute top-0 w-2 h-full bg-transparent hover:bg-primary/20 cursor-col-resize z-50 transition-colors duration-200 group -translate-x-1/2"
                )}
                onMouseDown={(e) => {
                  e.preventDefault()
                  useAppShellStore.getState().setIsResizing(true);
                }}
              >
                <div className="w-0.5 h-full bg-border group-hover:bg-primary transition-colors duration-200 mx-auto" />
              </div>
            )}

            {/* Main area wrapper */}
            <div className="flex-1 flex flex-col overflow-hidden relative">
              <div
                ref={topBarContainerRef}
                className={cn(
                  "absolute top-0 left-0 right-0 z-30",
                  isFullscreen && "z-0"
                )}
                onMouseEnter={() => { if (isSplitView) setHoveredPane(null); }}
              >
                {topBarWithProps}
              </div>

              <div className="flex flex-1 min-h-0">
                <div
                  ref={mainAreaRef}
                  className="relative flex-1 overflow-hidden bg-background"
                  onMouseEnter={() => { if (isSplitView && !draggedPage) setHoveredPane('left'); }}
                  onMouseLeave={() => { if (isSplitView && !draggedPage) setHoveredPane(null); }}
                >
                  {/* Side Pane Overlay */}
                  <div
                    role="button"
                    aria-label="Close side pane"
                    tabIndex={isSidePaneOpen ? 0 : -1}
                    className={cn(
                      "absolute inset-0 bg-black/40 z-40 transition-opacity duration-300",
                      isSidePaneOpen
                        ? "opacity-100 pointer-events-auto"
                        : "opacity-0 pointer-events-none"
                    )}
                    onClick={onOverlayClick}
                  />
                  {/* Left drop overlay */}
                  <div
                    className={cn(
                      "absolute inset-y-0 left-0 z-40 border-2 border-transparent transition-all",
                      draggedPage
                        ? cn("pointer-events-auto", isSplitView ? 'w-full' : 'w-1/2')
                        : "pointer-events-none w-0",
                      dragHoverTarget === 'left' && "bg-primary/10 border-primary"
                    )}
                    onDragOver={dndHandlers.handleDragOverLeft}
                    onDrop={dndHandlers.handleDropLeft}
                    onDragLeave={dndHandlers.handleDragLeave}
                  >
                    {draggedPage && dragHoverTarget === 'left' && (
                      <div className="absolute inset-0 flex items-center justify-center text-sm font-medium text-primary-foreground/80 pointer-events-none">
                        <span className="px-3 py-1 rounded-md bg-primary/70">{isSplitView ? 'Drop to Replace' : 'Drop to Left'}</span>
                      </div>
                    )}
                  </div>
                  {mainContentWithProps}
                  {isSplitView && hoveredPane === 'left' && !draggedPage && (
                    <div className={cn("absolute right-4 z-50 transition-all", isTopBarVisible ? 'top-24' : 'top-4')}>
                      <ViewModeSwitcher pane="main" />
                    </div>
                  )}
                  {/* Right drop overlay (over main area, ONLY when NOT in split view) */}
                  {!isSplitView && (
                    <div
                      className={cn(
                        "absolute inset-y-0 right-0 z-40 border-2 border-transparent",
                        draggedPage ? "pointer-events-auto w-1/2" : "pointer-events-none",
                        dragHoverTarget === 'right' && "bg-primary/10 border-primary"
                      )}
                      onDragOver={dndHandlers.handleDragOverRight}
                      onDrop={dndHandlers.handleDropRight}
                      onDragLeave={dndHandlers.handleDragLeave}
                    >
                      {draggedPage && dragHoverTarget === 'right' && (
                        <div className="absolute inset-0 flex items-center justify-center pointer-events-none">
                          <span className="px-3 py-1 rounded-md bg-primary/70 text-sm font-medium text-primary-foreground/80">Drop to Right</span>
                        </div>
                      )}
                    </div>
                  )}
                </div>
                {isSplitView ? (
                  <div
                    className="relative"
                    onMouseEnter={() => { if (isSplitView && !draggedPage) setHoveredPane('right'); }}
                    onMouseLeave={() => { if (isSplitView && !draggedPage) setHoveredPane(null); }}
                    onDragOver={dndHandlers.handleDragOverRight}
                  >
                    {rightPaneWithProps}
                    {draggedPage && (
                      <div
                        className={cn(
                          'absolute inset-0 z-50 transition-all',
                          dragHoverTarget === 'right'
                            ? 'bg-primary/10 border-2 border-primary'
                            : 'pointer-events-none'
                        )}
                        onDragLeave={dndHandlers.handleDragLeave}
                        onDrop={dndHandlers.handleDropRight}
                        onDragOver={(e) => e.preventDefault()}
                      >
                        {dragHoverTarget === 'right' && (
                          <div className="absolute inset-0 flex items-center justify-center pointer-events-none">
                            <span className="px-3 py-1 rounded-md bg-primary/70 text-sm font-medium text-primary-foreground/80">
                              Drop to Replace
                            </span>
                          </div>
                        )}
                      </div>
                    )}
                    {hoveredPane === 'right' && !draggedPage && (
                      <div className={cn("absolute right-4 z-[70] transition-all", isTopBarVisible ? 'top-24' : 'top-4')}>
                        <ViewModeSwitcher pane="right" />
                      </div>
                    )}
                  </div>
                ) : rightPaneWithProps}
              </div>
            </div>
          </div>
          {commandPalette || <CommandPalette />}
        </div>
      )
    }
  src/components/global/CommandPalette.tsx: >-
    import {
      CommandDialog,
      CommandEmpty,
      CommandGroup,
      CommandInput,
      CommandItem,
      CommandList,
      CommandSeparator,
      CommandShortcut,
    } from '@/components/ui/command';

    import { useAppStore } from '@/store/appStore'

    import { useCommandPaletteToggle } from
    '@/hooks/useCommandPaletteToggle.hook'

    import { useAppViewManager } from '@/hooks/useAppViewManager.hook';

    import { useAppShellStore } from '@/store/appShell.store';

    import { Home, Settings, Moon, Sun, Monitor, Smartphone, PanelRight,
    Maximize, Component, Bell } from 'lucide-react'


    export function CommandPalette() {
      const { setCompactMode, toggleFullscreen } = useAppShellStore();
      const viewManager = useAppViewManager();
      const {
        isCommandPaletteOpen,
        setCommandPaletteOpen,
        isDarkMode,
        toggleDarkMode,
      } = useAppStore()
      useCommandPaletteToggle()
      
      const runCommand = (command: () => void) => {
        setCommandPaletteOpen(false)
        command()
      }

      return (
        <CommandDialog open={isCommandPaletteOpen} onOpenChange={setCommandPaletteOpen}>
          <CommandInput placeholder="Type a command or search..." />
          <CommandList>
            <CommandEmpty>No results found.</CommandEmpty>
            <CommandGroup heading="Navigation">
              <CommandItem onSelect={() => runCommand(() => viewManager.navigateTo('dashboard'))}>
                <Home className="mr-2 h-4 w-4" />
                <span>Go to Dashboard</span>
                <CommandShortcut>G D</CommandShortcut>
              </CommandItem>
              <CommandItem onSelect={() => runCommand(() => viewManager.navigateTo('settings'))}>
                <Settings className="mr-2 h-4 w-4" />
                <span>Go to Settings</span>
                <CommandShortcut>G S</CommandShortcut>
              </CommandItem>
              <CommandItem onSelect={() => runCommand(() => viewManager.navigateTo('toaster'))}>
                <Component className="mr-2 h-4 w-4" />
                <span>Go to Toaster Demo</span>
                <CommandShortcut>G T</CommandShortcut>
              </CommandItem>
              <CommandItem onSelect={() => runCommand(() => viewManager.navigateTo('notifications'))}>
                <Bell className="mr-2 h-4 w-4" />
                <span>Go to Notifications</span>
                <CommandShortcut>G N</CommandShortcut>
              </CommandItem>
            </CommandGroup>
            <CommandSeparator />
            <CommandGroup heading="Actions">
              <CommandItem onSelect={() => runCommand(toggleDarkMode)}>
                {isDarkMode ? <Sun className="mr-2 h-4 w-4" /> : <Moon className="mr-2 h-4 w-4" />}
                <span>Toggle Theme</span>
                <CommandShortcut>⌘T</CommandShortcut>
              </CommandItem>
              <CommandItem onSelect={() => runCommand(toggleFullscreen)}>
                <Maximize className="mr-2 h-4 w-4" />
                <span>Toggle Fullscreen</span>
                <CommandShortcut>⌘F</CommandShortcut>
              </CommandItem>
              <CommandItem onSelect={() => runCommand(() => viewManager.openSidePane('settings'))}>
                <PanelRight className="mr-2 h-4 w-4" />
                <span>Open Settings in Side Pane</span>
                <CommandShortcut>⌥S</CommandShortcut>
              </CommandItem>
            </CommandGroup>
            <CommandSeparator />
            <CommandGroup heading="Preferences">
              <CommandItem onSelect={() => runCommand(() => setCompactMode(true))}>
                <Smartphone className="mr-2 h-4 w-4" />
                <span>Enable Compact Mode</span>
                <CommandShortcut>⌘C</CommandShortcut>
              </CommandItem>
              <CommandItem onSelect={() => runCommand(() => setCompactMode(false))}>
                <Monitor className="mr-2 h-4 w-4" />
                <span>Disable Compact Mode</span>
                <CommandShortcut>⇧⌘C</CommandShortcut>
              </CommandItem>
            </CommandGroup>
          </CommandList>
        </CommandDialog>
      )
    }
  src/features/settings/SettingsContent.tsx: |-
    import { useState } from 'react'
    import { 
      Moon, 
      Sun, 
      Zap, 
      Eye, 
      Minimize2, 
      RotateCcw,
      Monitor,
      Smartphone,
      Palette,
      Accessibility,
      Check
    } from 'lucide-react'
    import { cn } from '@/lib/utils'
    import { useAppShellStore } from '@/store/appShell.store'
    import { useAppStore } from '@/store/appStore'
    import { SettingsToggle } from './SettingsToggle'
    import { SettingsSection } from './SettingsSection'

    const colorPresets = [
      { name: 'Default Blue', value: '220 84% 60%' },
      { name: 'Rose', value: '346.8 77.2% 49.8%' },
      { name: 'Green', value: '142.1 76.2% 36.3%' },
      { name: 'Orange', value: '24.6 95% 53.1%' },
      { name: 'Violet', value: '262.1 83.3% 57.8%' },
      { name: 'Slate', value: '215.3 20.3% 65.1%' }
    ]

    export function SettingsContent() {
      const {
        sidebarWidth, compactMode, primaryColor, autoExpandSidebar, reducedMotion,
        setSidebarWidth, setCompactMode, setPrimaryColor, setAutoExpandSidebar,
        setReducedMotion, resetToDefaults
      } = useAppShellStore();
      const { isDarkMode, toggleDarkMode } = useAppStore()

      const [tempSidebarWidth, setTempSidebarWidth] = useState(sidebarWidth)

      const handleSidebarWidthChange = (width: number) => {
        setTempSidebarWidth(width)
        setSidebarWidth(width);
      }

      const handleReset = () => {
        resetToDefaults();
        setTempSidebarWidth(280); // Reset temp state as well
      }

      const handleSetSidebarWidth = (payload: number) => {
        setSidebarWidth(payload);
        setTempSidebarWidth(payload);
      };

      return (
        <div className="space-y-10">
          {/* Appearance */}
          <SettingsSection icon={<Palette />} title="Appearance">
            {/* Dark Mode */}
            <SettingsToggle
              icon={isDarkMode ? <Moon className="w-4 h-4" /> : <Sun className="w-4 h-4" />}
              title="Dark Mode"
              description="Toggle dark theme"
              checked={isDarkMode}
              onCheckedChange={toggleDarkMode}
            />

            {/* Compact Mode */}
            <SettingsToggle
              icon={<Minimize2 className="w-4 h-4" />}
              title="Compact Mode"
              description="Reduce spacing and sizes"
              checked={compactMode}
              onCheckedChange={setCompactMode}
            />

            {/* Accent Color */}
            <div className="space-y-3">
              <div className="flex items-center gap-3">
                <Palette className="w-4 h-4" />
                <div>
                  <p className="font-medium">Accent Color</p>
                  <p className="text-sm text-muted-foreground">Customize the main theme color</p>
                </div>
              </div>
              <div className="grid grid-cols-6 gap-2 pt-1">
                {colorPresets.map(color => {
                  const isActive = color.value === primaryColor
                  return (
                    <button
                      key={color.name}
                      title={color.name}
                      onClick={() => setPrimaryColor(color.value)}
                      className={cn(
                        "w-8 h-8 rounded-full border-2 transition-transform hover:scale-110 flex items-center justify-center",
                        isActive ? 'border-primary' : 'border-transparent'
                      )}
                      style={{ backgroundColor: `hsl(${color.value})` }}
                    >{isActive && <Check className="w-5 h-5 text-primary-foreground" />}</button>
                  )
                })}
              </div>
            </div>
          </SettingsSection>

          {/* Behavior */}
          <SettingsSection icon={<Zap />} title="Behavior">
            {/* Auto Expand Sidebar */}
            <SettingsToggle
              icon={<Eye className="w-4 h-4" />}
              title="Auto Expand Sidebar"
              description="Expand on hover when collapsed"
              checked={autoExpandSidebar}
              onCheckedChange={setAutoExpandSidebar}
            />

            {/* Sidebar Width */}
            <div className="space-y-3">
              <div className="flex items-center gap-3">
                <Monitor className="w-4 h-4" />
                <div>
                  <p className="font-medium">Sidebar Width</p>
                  <p className="text-sm text-muted-foreground">{tempSidebarWidth}px</p>
                </div>
              </div>
              <div className="space-y-2">
                <input
                  type="range"
                  min="200"
                  max="500"
                  step="10"
                  value={tempSidebarWidth}
                  onChange={(e) => handleSidebarWidthChange(Number(e.target.value))}
                  className="w-full h-1.5 bg-muted rounded-lg appearance-none cursor-pointer slider"
                />
                <div className="flex justify-between text-xs text-muted-foreground">
                  <span>200px</span>
                  <span>350px</span>
                  <span>500px</span>
                </div>
              </div>
            </div>
          </SettingsSection>

          {/* Accessibility */}
          <SettingsSection icon={<Accessibility />} title="Accessibility">
            {/* Reduced Motion */}
            <SettingsToggle
              icon={<Zap className="w-4 h-4" />}
              title="Reduced Motion"
              description="Minimize animations"
              checked={reducedMotion}
              onCheckedChange={setReducedMotion}
            />
          </SettingsSection>

          {/* Presets */}
          <div className="space-y-4">
            <h3 className="text-sm font-semibold text-muted-foreground uppercase tracking-wider">
              Quick Presets
            </h3>
            
            <div className="grid grid-cols-2 gap-3">
              <button 
                onClick={() => {
                  setCompactMode(false)
                  setReducedMotion(false)
                  handleSetSidebarWidth(320)
                }}
                className="p-4 bg-accent/30 hover:bg-accent/50 rounded-xl transition-colors text-left"
              >
                <Monitor className="w-4 h-4 mb-2" />
                <p className="font-medium text-sm">Desktop</p>
                <p className="text-xs text-muted-foreground">Spacious layout</p>
              </button>
              
              <button 
                onClick={() => {
                  setCompactMode(true)
                  setReducedMotion(true)
                  handleSetSidebarWidth(240)
                }}
                className="p-4 bg-accent/30 hover:bg-accent/50 rounded-xl transition-colors text-left"
              >
                <Smartphone className="w-4 h-4 mb-2" />
                <p className="font-medium text-sm">Mobile</p>
                <p className="text-xs text-muted-foreground">Compact layout</p>
              </button>
            </div>
          </div>
          <div className="pt-6 border-t border-border">
            <button
              onClick={handleReset}
              className="w-full flex items-center justify-center gap-2 px-4 py-2.5 bg-destructive/10 text-destructive hover:bg-destructive/20 rounded-lg transition-colors"
            >
              <RotateCcw className="w-4 h-4" />
              Reset to Defaults
            </button>
          </div>
        </div>
      )
    }

    // Custom slider styles
    const sliderStyles = `
    .slider::-webkit-slider-thumb {
      appearance: none;
      height: 18px;
      width: 18px;
      border-radius: 50%;
      background: hsl(var(--primary));
      cursor: pointer;
      border: 3px solid hsl(var(--background));
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
      margin-top: -7px;
    }

    .slider::-moz-range-thumb {
      height: 18px;
      width: 18px;
      border-radius: 50%;
      background: hsl(var(--primary));
      cursor: pointer;
      border: 3px solid hsl(var(--background));
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }
    `

    // Inject styles
    if (typeof document !== 'undefined') {
      const styleSheet = document.createElement('style')
      styleSheet.textContent = sliderStyles
      document.head.appendChild(styleSheet)
    }
  src/components/shared/PageLayout.tsx: |-
    import React from 'react';
    import { cn } from '@/lib/utils';
    import { useAppShellStore } from '@/store/appShell.store';
    import { BODY_STATES } from '@/lib/utils';

    interface PageLayoutProps extends React.HTMLAttributes<HTMLDivElement> {
      children: React.ReactNode;
      scrollRef?: React.RefObject<HTMLDivElement>;
    }

    export const PageLayout = React.forwardRef<HTMLDivElement, PageLayoutProps>(
      ({ children, onScroll, scrollRef, className, ...props }, ref) => {
        const { isTopBarVisible, bodyState } = useAppShellStore();
        const isFullscreen = bodyState === 'fullscreen';
        const isInSidePane = bodyState === BODY_STATES.SIDE_PANE;

        return (
          <div
            ref={scrollRef}
            className={cn("h-full overflow-y-auto", className)}
            onScroll={onScroll}
          >
            <div ref={ref} className={cn(
              "space-y-8 transition-all duration-300",
              !isInSidePane ? "px-6 lg:px-12 pb-6" : "px-6 pb-6",
              isTopBarVisible && !isFullscreen ? "pt-24" : "pt-6"
            )}
            {...props}
            >
              {children}
            </div>
          </div>
        );
      }
    );

    PageLayout.displayName = 'PageLayout';
  src/components/layout/ViewModeSwitcher.tsx: >-
    import { useState, useRef, useEffect } from 'react';

    import { gsap } from 'gsap';

    import { cn } from '@/lib/utils'

    import { useAppShellStore } from '@/store/appShell.store'

    import { type ActivePage } from '@/store/appStore'

    import { BODY_STATES } from '@/lib/utils'

    import { type AppShellState } from '@/store/appShell.store'

    import { useAppViewManager } from '@/hooks/useAppViewManager.hook'

    import {
      Columns,
      PanelRightOpen,
      SplitSquareHorizontal,
      Maximize,
      Minimize,
      Layers,
      X,
      ArrowLeftRight
    } from 'lucide-react'


    export function ViewModeSwitcher({ pane, targetPage }: { pane?: 'main' |
    'right', targetPage?: ActivePage }) {
      const { bodyState, fullscreenTarget } = useAppShellStore();
      const toggleFullscreen = useAppShellStore(s => s.toggleFullscreen);
      const {
        currentActivePage,
        toggleSidePane,
        toggleSplitView,
        setNormalView,
        navigateTo,
        switchSplitPanes,
        closeSplitPane,
      } = useAppViewManager();

      const activePage = targetPage || currentActivePage;
      const [isExpanded, setIsExpanded] = useState(false);
      const buttonRefs = useRef<(HTMLButtonElement | null)[]>([]);

      const isFullscreen = bodyState === BODY_STATES.FULLSCREEN;
      const isThisPaneFullscreen = isFullscreen && (
        (pane === 'main' && fullscreenTarget !== 'right') ||
        (pane === 'right' && fullscreenTarget === 'right') ||
        (!pane && !fullscreenTarget) // Global switcher, global fullscreen
      );

      useEffect(() => {
        const buttonsToAnimate = buttonRefs.current.filter(Boolean) as HTMLButtonElement[];
        if (buttonsToAnimate.length === 0) return;

        gsap.killTweensOf(buttonsToAnimate);

        if (isExpanded) {
            gsap.to(buttonsToAnimate, {
                width: 32, // h-8 w-8
                opacity: 1,
                pointerEvents: 'auto',
                marginLeft: 4, // from gap-1 in original
                duration: 0.2,
                stagger: {
                    each: 0.05,
                    from: 'start'
                },
                ease: 'power2.out'
            });
        } else {
            gsap.to(buttonsToAnimate, {
                width: 0,
                opacity: 0,
                pointerEvents: 'none',
                marginLeft: 0,
                duration: 0.2,
                stagger: {
                    each: 0.05,
                    from: 'end'
                },
                ease: 'power2.in'
            });
        }
      }, [isExpanded, bodyState]); // re-run if bodyState changes to recalc buttons

      const handlePaneClick = (type: 'side-pane' | 'split-view') => {
        const pageToPaneMap: Record<ActivePage, AppShellState['sidePaneContent']> = {
          dashboard: 'main', settings: 'settings', toaster: 'toaster', notifications: 'notifications', 'data-demo': 'dataDemo',
        };
        const paneContent = pageToPaneMap[activePage];
        if (type === 'side-pane') toggleSidePane(paneContent);
        else toggleSplitView();
      }

      const handleNormalViewClick = () => {
        if (isFullscreen) {
          toggleFullscreen();
        }
        if (targetPage && targetPage !== currentActivePage) {
          navigateTo(targetPage);
        } else {
          setNormalView();
        }
      }

      const buttons = [
        {
          id: 'normal',
          onClick: handleNormalViewClick,
          active: bodyState === BODY_STATES.NORMAL,
          title: "Normal View",
          icon: <Columns className="w-4 h-4" />
        },
        {
          id: 'side-pane',
          onClick: () => handlePaneClick('side-pane'),
          active: bodyState === BODY_STATES.SIDE_PANE,
          title: "Side Pane View",
          icon: <PanelRightOpen className="w-4 h-4" />
        },
        {
          id: 'split-view',
          onClick: () => handlePaneClick('split-view'),
          active: bodyState === BODY_STATES.SPLIT_VIEW,
          title: bodyState === BODY_STATES.SPLIT_VIEW ? 'Switch to Overlay View' : 'Switch to Split View',
          icon: bodyState === BODY_STATES.SPLIT_VIEW ? <Layers className="w-4 h-4" /> : <SplitSquareHorizontal className="w-4 h-4" />
        },
        {
          id: 'fullscreen',
          onClick: () => {
            if (targetPage && targetPage !== currentActivePage ) {
              navigateTo(targetPage);
              setTimeout(() => toggleFullscreen(pane), 50);
            } else {
              toggleFullscreen(pane);
            }
          },
          active: isThisPaneFullscreen,
          title: "Toggle Fullscreen",
          icon: isThisPaneFullscreen ? <Minimize className="w-4 h-4" /> : <Maximize className="w-4 h-4" />
        }
      ];

      if (bodyState === BODY_STATES.SPLIT_VIEW) {
        buttons.push({
          id: 'switch',
          onClick: switchSplitPanes,
          active: false,
          title: "Switch Panes",
          icon: <ArrowLeftRight className="w-4 h-4" />
        });
        buttons.push({
          id: 'close',
          onClick: () => closeSplitPane(pane || 'right'),
          active: false,
          title: "Close Pane",
          icon: <X className="w-4 h-4 text-muted-foreground group-hover:text-destructive" />
        });
      }

      return (
        <div
          onMouseEnter={() => setIsExpanded(true)}
          onMouseLeave={() => setIsExpanded(false)}
          className="flex items-center gap-0 p-1 bg-card rounded-full border border-border"
        >
            <button
                className='h-8 w-8 flex-shrink-0 flex items-center justify-center rounded-full hover:bg-accent transition-colors'
                title="View Modes"
                onClick={() => setIsExpanded(!isExpanded)}
            >
                <Layers className="w-4 h-4" />
            </button>
          
          {buttons.map((btn, index) => (
            <button
              key={btn.id}
              ref={el => buttonRefs.current[index] = el}
              onClick={btn.onClick}
              className={cn(
                'h-8 w-0 flex items-center justify-center rounded-full hover:bg-accent transition-colors group opacity-0',
                btn.active && 'bg-accent text-accent-foreground',
                btn.id === 'close' && 'hover:bg-destructive/20'
              )}
              style={{ pointerEvents: 'none', marginLeft: 0, overflow: 'hidden' }}
              title={btn.title}
            >
              {btn.icon}
            </button>
          ))}
        </div>
      )
    }
  src/components/layout/Sidebar.tsx: >-
    import * as React from 'react';

    import { ChevronDown } from 'lucide-react';

    import { Slot } from '@radix-ui/react-slot';

    import { useAppShellStore } from '@/store/appShell.store';

    import { SIDEBAR_STATES } from '@/lib/utils';

    import { cn } from '@/lib/utils';

    import { Button } from '@/components/ui/button';


    // --- Context ---

    interface SidebarContextValue {
      isCollapsed: boolean;
      isPeek: boolean;
      compactMode: boolean;
    }


    const SidebarContext = React.createContext<SidebarContextValue |
    null>(null);


    // eslint-disable-next-line react-refresh/only-export-components

    export const useSidebar = () => {
      const context = React.useContext(SidebarContext);
      if (!context) {
        throw new Error('useSidebar must be used within a Sidebar component');
      }
      return context;
    };


    // --- Main Sidebar Component ---

    interface SidebarProps extends React.HTMLAttributes<HTMLDivElement> {
      children: React.ReactNode;
    }


    const Sidebar = React.forwardRef<HTMLDivElement, SidebarProps>(
      ({ children, className, ...props }, ref) => {
        const { sidebarState, compactMode } = useAppShellStore();
        const isCollapsed = sidebarState === SIDEBAR_STATES.COLLAPSED;
        const isPeek = sidebarState === SIDEBAR_STATES.PEEK;

        return (
          <SidebarContext.Provider value={{ isCollapsed, isPeek, compactMode }}>
            <div
              ref={ref}
              className={cn(
                'relative bg-card flex-shrink-0',
                'h-full',
                isPeek && 'shadow-xl z-40',
                compactMode && 'text-sm',
                className,
              )}
              {...props}
            >
              {isPeek && <div className="absolute inset-0 bg-background/80 backdrop-blur-sm" />}
              {children}
            </div>
          </SidebarContext.Provider>
        );
      },
    );

    Sidebar.displayName = 'Sidebar';


    // --- Sidebar Content Wrapper ---

    const SidebarContent = React.forwardRef<
      HTMLDivElement,
      React.HTMLAttributes<HTMLDivElement>
    >(({ className, ...props }, ref) => {
      const { compactMode } = useSidebar();
      return (
        <div
          ref={ref}
          className={cn(
            'relative z-10 h-full flex flex-col',
            compactMode ? 'p-3' : 'p-4',
            className,
          )}
          {...props}
        />
      );
    });

    SidebarContent.displayName = 'SidebarContent';


    // --- Sidebar Header ---

    const SidebarHeader = React.forwardRef<
      HTMLDivElement,
      React.HTMLAttributes<HTMLDivElement>
    >(({ className, ...props }, ref) => {
      const { isCollapsed } = useSidebar();
      return (
        <div
          ref={ref}
          className={cn(
            'flex items-center gap-3',
            isCollapsed ? 'justify-center' : 'px-3',
            'h-16',
            className,
          )}
          {...props}
        />
      );
    });

    SidebarHeader.displayName = 'SidebarHeader';


    const SidebarTitle = React.forwardRef<
      HTMLParagraphElement,
      React.HTMLAttributes<HTMLParagraphElement>
    >(({ className, ...props }, ref) => {
      const { isCollapsed } = useSidebar();
      if (isCollapsed) return null;
      return (
        <h1
          ref={ref}
          className={cn('text-lg font-bold nav-label', className)}
          {...props}
        />
      );
    });

    SidebarTitle.displayName = 'SidebarTitle';


    // --- Sidebar Body ---

    const SidebarBody = React.forwardRef<
      HTMLDivElement,
      React.HTMLAttributes<HTMLDivElement>
    >(({ className, ...props }, ref) => (
      <div
        ref={ref}
        className={cn(
          'flex-1 overflow-y-auto space-y-6 pt-4',
          className,
        )}
        {...props}
      />
    ));

    SidebarBody.displayName = 'SidebarBody';


    // --- Sidebar Footer ---

    const SidebarFooter = React.forwardRef<
      HTMLDivElement,
      React.HTMLAttributes<HTMLDivElement>
    >(({ className, ...props }, ref) => {
      const { compactMode } = useSidebar();
      return (
        <div
          ref={ref}
          className={cn('pt-4 border-t border-border', compactMode && 'pt-3', className)}
          {...props}
        />
      );
    });

    SidebarFooter.displayName = 'SidebarFooter';


    // --- Sidebar Section ---

    const SidebarSection = React.forwardRef<
      HTMLDivElement,
      React.HTMLAttributes<HTMLDivElement> & {
        title?: string;
        collapsible?: boolean;
        defaultExpanded?: boolean;
      }
    >(({ title, collapsible = false, defaultExpanded = true, children, ...props
    }, ref) => {
      const { isCollapsed } = useSidebar();
      const [isExpanded, setIsExpanded] = React.useState(defaultExpanded);

      const handleToggle = () => {
        if (collapsible) {
          setIsExpanded(!isExpanded);
        }
      };

      return (
        <div ref={ref} className="space-y-1" {...props}>
          {!isCollapsed && title && (
            <div
              className={cn(
                'flex items-center justify-between px-3 text-xs font-medium text-muted-foreground uppercase tracking-wider',
                collapsible && 'cursor-pointer hover:text-foreground transition-colors',
              )}
              onClick={handleToggle}
            >
              <span className="section-title">{title}</span>
              {collapsible && (
                <ChevronDown
                  className={cn(
                    'section-chevron w-3 h-3 transition-transform',
                    isExpanded ? 'rotate-0' : '-rotate-90',
                  )}
                />
              )}
            </div>
          )}
          {(!collapsible || isExpanded || isCollapsed) && (
            <nav className="space-y-1">{children}</nav>
          )}
        </div>
      );
    });

    SidebarSection.displayName = 'SidebarSection';


    // --- Sidebar Menu Item ---

    const SidebarMenuItem = React.forwardRef<
      HTMLDivElement,
      React.HTMLAttributes<HTMLDivElement>
    >(({ className, ...props }, ref) => {
      return <div ref={ref} className={cn('group/item relative flex items-stretch', className)} {...props} />;
    });

    SidebarMenuItem.displayName = 'SidebarMenuItem';



    // --- Sidebar Menu Button ---

    interface SidebarMenuButtonProps extends
    React.ButtonHTMLAttributes<HTMLButtonElement> {
      asChild?: boolean;
      isActive?: boolean;
    }

    const SidebarMenuButton = React.forwardRef<HTMLButtonElement,
    SidebarMenuButtonProps>(
      ({ className, asChild = false, isActive, ...props }, ref) => {
        const { isCollapsed, compactMode } = useSidebar();
        const Comp = asChild ? Slot : 'button';

        return (
          <Comp
            ref={ref}
            className={cn(
              'group flex items-center gap-3 rounded-lg cursor-pointer transition-all duration-200 w-full text-left flex-1',
              compactMode ? 'px-2 py-1.5' : 'px-4 py-2.5',
              'hover:bg-accent',
              isActive && 'bg-primary text-primary-foreground hover:bg-primary/90',
              isCollapsed && 'justify-center',
              className
            )}
            {...props}
          />
        );
      }
    );

    SidebarMenuButton.displayName = 'SidebarMenuButton';


    // --- Sidebar Menu Action ---

    const SidebarMenuAction = React.forwardRef<
      HTMLButtonElement,
      React.ButtonHTMLAttributes<HTMLButtonElement>
    >(({ className, ...props }, ref) => {
      const { isCollapsed } = useSidebar();
      if (isCollapsed) return null;
      return (
        <Button
          ref={ref}
          variant="ghost"
          size="icon"
          className={cn(
            'absolute right-1 top-1/2 -translate-y-1/2 h-8 w-8 rounded-md opacity-0 group-hover/item:opacity-100 transition-opacity',
            'focus:opacity-100', // show on focus for accessibility
            className
          )}
          {...props}
        />
      );
    });

    SidebarMenuAction.displayName = 'SidebarMenuAction';


    // --- Sidebar Menu Label ---

    const SidebarLabel = React.forwardRef<
      HTMLSpanElement,
      React.HTMLAttributes<HTMLSpanElement>
    >(({ className, ...props }, ref) => {
      const { isCollapsed } = useSidebar();
      if (isCollapsed) return null;
      return (
        <span
          ref={ref}
          className={cn('nav-label flex-1 font-medium truncate', className)}
          {...props}
        />
      );
    });

    SidebarLabel.displayName = 'SidebarLabel';



    // --- Sidebar Menu Badge ---

    const SidebarBadge = React.forwardRef<
      HTMLSpanElement,
      React.HTMLAttributes<HTMLSpanElement>
    >(({ className, children, ...props }, ref) => {
      const { isCollapsed } = useSidebar();
      if (isCollapsed) return null;
      const badgeContent = typeof children === 'number' && children > 99 ? '99+' : children;
      return (
        <span
          ref={ref}
          className={cn(
            'nav-badge bg-destructive text-destructive-foreground text-xs px-1.5 py-0.5 rounded-full min-w-[1.25rem] text-center',
            className
          )}
          {...props}
        >
          {badgeContent}
        </span>
      );
    });

    SidebarBadge.displayName = 'SidebarBadge';



    // --- Sidebar Tooltip ---

    interface SidebarTooltipProps extends React.HTMLAttributes<HTMLDivElement> {
      label: string;
      badge?: number | string;
    }

    const SidebarTooltip = ({ label, badge, className, ...props }:
    SidebarTooltipProps) => {
      const { isCollapsed } = useSidebar();
      if (!isCollapsed) return null;
      return (
        <div
          className={cn(
            'absolute left-full ml-2 px-2 py-1 bg-popover text-popover-foreground text-sm rounded-md shadow-lg opacity-0 group-hover:opacity-100 transition-opacity pointer-events-none whitespace-nowrap z-50',
            className
          )}
          {...props}
        >
          {label}
          {badge && (
            <span className="ml-2 bg-destructive text-destructive-foreground text-xs px-1.5 py-0.5 rounded-full">
              {typeof badge === 'number' && badge > 99 ? '99+' : badge}
            </span>
          )}
        </div>
      );
    };

    SidebarTooltip.displayName = 'SidebarTooltip';



    // --- Icon Wrapper for consistent sizing ---

    const SidebarIcon = ({ children, className }: { children: React.ReactNode,
    className?: string }) => {
      return (
        <div className={cn("flex-shrink-0 w-4 h-4", className)}>
          {children}
        </div>
      )
    }


    export {
      Sidebar,
      SidebarContent,
      SidebarHeader,
      SidebarTitle,
      SidebarBody,
      SidebarFooter,
      SidebarSection,
      SidebarMenuItem,
      SidebarMenuButton,
      SidebarMenuAction,
      SidebarLabel,
      SidebarBadge,
      SidebarTooltip,
      SidebarIcon
    };
  src/components/layout/MainContent.tsx: |-
    import { forwardRef } from 'react'
    import { X } from 'lucide-react'
    import { cn } from '@/lib/utils';
    import { BODY_STATES } from '@/lib/utils'
    import { useAppShellStore } from '@/store/appShell.store'

    interface MainContentProps {
      children?: React.ReactNode;
    }

    export const MainContent = forwardRef<HTMLDivElement, MainContentProps>(
      ({ children }, ref) => {
        const { bodyState, fullscreenTarget, toggleFullscreen } = useAppShellStore();
        const isFullscreen = bodyState === BODY_STATES.FULLSCREEN;

        if (isFullscreen && fullscreenTarget === 'right') {
          return null;
        }

        return (
          <div
            ref={ref}
            className={cn(
            "flex flex-col h-full overflow-hidden bg-background",
            isFullscreen && "fixed inset-0 z-[60]"
            )}
          >
            {isFullscreen && (
              <button
                onClick={() => toggleFullscreen()}
                className="fixed top-6 right-6 lg:right-12 z-[100] h-12 w-12 flex items-center justify-center rounded-full bg-card/50 backdrop-blur-sm hover:bg-card/75 transition-colors group"
                title="Exit Fullscreen"
              >
                <X className="w-6 h-6 group-hover:scale-110 group-hover:rotate-90 transition-all duration-300" />
              </button>
            )}

            <div className="flex-1 min-h-0 flex flex-col">
              {children}
            </div>
          </div>
        )
      }
    )
    MainContent.displayName = 'MainContent'
  src/components/layout/RightPane.tsx: >-
    import { forwardRef, useMemo, useCallback, createElement } from 'react'

    import {
      ChevronRight,
      X,
      Layers,
      SplitSquareHorizontal,
      ChevronsLeftRight,
    } from 'lucide-react'

    import { cn, BODY_STATES } from '@/lib/utils';

    import { useAppShellStore } from '@/store/appShell.store';

    import { useAppViewManager } from '@/hooks/useAppViewManager.hook'

    import { useRightPaneContent } from '@/hooks/useRightPaneContent.hook'


    export const RightPane = forwardRef<HTMLDivElement, { className?: string
    }>(({ className }, ref) => {
      const fullscreenTarget = useAppShellStore(s => s.fullscreenTarget);
      const bodyState = useAppShellStore(s => s.bodyState);
      const { toggleFullscreen, setIsResizingRightPane } = useAppShellStore.getState();

      const viewManager = useAppViewManager()
      const { sidePaneContent, closeSidePane, toggleSplitView, navigateTo } = viewManager
      
      const { meta, content: children } = useRightPaneContent(sidePaneContent)
      
      const isSplitView = bodyState === BODY_STATES.SPLIT_VIEW;
      const isFullscreen = bodyState === BODY_STATES.FULLSCREEN;

      const handleMaximize = useCallback(() => {
        if ("page" in meta && meta.page) {
          navigateTo(meta.page);
        }
      }, [meta, navigateTo]);

      const header = useMemo(() => (
        <div className="flex items-center justify-between p-4 border-b border-border h-20 flex-shrink-0 pl-6">
          {bodyState !== BODY_STATES.SPLIT_VIEW && 'icon' in meta ? (
            <div className="flex items-center gap-2">
              {meta.icon && createElement(meta.icon, { className: "w-5 h-5" })}
              <h2 className="text-lg font-semibold whitespace-nowrap">{meta.title}</h2>
            </div>
          ) : <div />}
          <div className="flex items-center">
            {(bodyState === BODY_STATES.SIDE_PANE || bodyState === BODY_STATES.SPLIT_VIEW) && (
              <button onClick={toggleSplitView} className="h-10 w-10 flex items-center justify-center hover:bg-accent rounded-full transition-colors" title={bodyState === BODY_STATES.SIDE_PANE ? "Switch to Split View" : "Switch to Overlay View"}>
                {bodyState === BODY_STATES.SPLIT_VIEW ? <Layers className="w-5 h-5" /> : <SplitSquareHorizontal className="w-5 h-5" />}
              </button>
            )}
            {bodyState !== BODY_STATES.SPLIT_VIEW && "page" in meta && meta.page && (
              <button onClick={handleMaximize} className="h-10 w-10 flex items-center justify-center hover:bg-accent rounded-full transition-colors mr-2" title="Move to Main View">
                <ChevronsLeftRight className="w-5 h-5" />
              </button>
            )}
          </div>
        </div>
      ), [bodyState, meta, handleMaximize, toggleSplitView]);

      if (isFullscreen && fullscreenTarget !== 'right') {
        return null;
      }

      return (
        <aside
          ref={ref}
          className={cn(
            "border-l border-border flex flex-col h-full overflow-hidden",
            isSplitView && "relative bg-background",
            !isSplitView && !isFullscreen && "fixed top-0 right-0 z-[60] bg-card", // side pane overlay
            isFullscreen && fullscreenTarget === 'right' && "fixed inset-0 z-[60] bg-card", // fullscreen
            className,
          )}
        >
          {isFullscreen && fullscreenTarget === 'right' && (
            <button
              onClick={() => toggleFullscreen()}
              className="fixed top-6 right-6 lg:right-12 z-[100] h-12 w-12 flex items-center justify-center rounded-full bg-card/50 backdrop-blur-sm hover:bg-card/75 transition-colors group"
              title="Exit Fullscreen"
            >
              <X className="w-6 h-6 group-hover:scale-110 group-hover:rotate-90 transition-all duration-300" />
            </button>
          )}
          {bodyState !== BODY_STATES.SPLIT_VIEW && !isFullscreen && (
            <button
              onClick={closeSidePane}
              className="absolute top-1/2 -left-px -translate-y-1/2 -translate-x-full w-8 h-16 bg-card border border-r-0 border-border rounded-l-lg flex items-center justify-center hover:bg-accent transition-colors group z-10"
              title="Close pane"
            >
              <ChevronRight className="w-5 h-5 text-muted-foreground group-hover:text-foreground transition-colors" />
            </button>
          )}
          <div 
            className={cn(
              "absolute top-0 left-0 w-2 h-full bg-transparent hover:bg-primary/20 cursor-col-resize z-50 transition-colors duration-200 group -translate-x-1/2"
            )}
            onMouseDown={(e) => {
              e.preventDefault()
              setIsResizingRightPane(true);
            }}
          >
            <div className="w-0.5 h-full bg-border group-hover:bg-primary transition-colors duration-200 mx-auto" />
          </div>
          {header}
          <div className={cn("flex-1 overflow-y-auto")}>
            {children}
          </div>
        </aside>
      )
    })

    RightPane.displayName = "RightPane"
  src/components/layout/EnhancedSidebar.tsx: >-
    import React from 'react';

    import {
      Home,
      Settings,
      HelpCircle,
      Component,
      Rocket,
      MoreHorizontal,
      Bell,
      Search,
      FileText,
      Star,
      Trash2,
      FolderOpen,
      Mail,
      Bookmark,
      Download,
      User,
      Plus,
      Database
    } from 'lucide-react';

    import { type ActivePage } from '@/store/appStore';

    import { useAppShellStore } from '@/store/appShell.store';

    import {
      Workspaces,
      WorkspaceTrigger,
      WorkspaceContent,
      type Workspace,
    } from './WorkspaceSwitcher';

    import {
      DropdownMenu,
      DropdownMenuContent,
      DropdownMenuItem,
      DropdownMenuTrigger,
    } from '@/components/ui/dropdown-menu';

    import {
      Sidebar,
      SidebarContent,
      SidebarHeader,
      SidebarTitle,
      SidebarBody,
      SidebarFooter,
      SidebarSection,
      SidebarMenuItem,
      SidebarMenuButton,
      SidebarMenuAction,
      SidebarLabel,
      SidebarBadge,
      SidebarTooltip,
      SidebarIcon,
      useSidebar,
    } from './Sidebar';

    import { ViewModeSwitcher } from './ViewModeSwitcher';

    import { cn } from '@/lib/utils';

    import { useAppViewManager } from '@/hooks/useAppViewManager.hook';


    interface MyWorkspace extends Workspace {
      logo: string;
      plan: string;
    }


    const mockWorkspaces: MyWorkspace[] = [
      { id: 'ws1', name: 'Acme Inc.', logo: 'https://avatar.vercel.sh/acme.png', plan: 'Pro' },
      { id: 'ws2', name: 'Monsters Inc.', logo: 'https://avatar.vercel.sh/monsters.png', plan: 'Free' },
      { id: 'ws3', name: 'Stark Industries', logo: 'https://avatar.vercel.sh/stark.png', plan: 'Enterprise' },
    ];


    const SidebarWorkspaceTrigger = () => {
      const { isCollapsed, compactMode } = useSidebar();

      return (
        <WorkspaceTrigger
          collapsed={isCollapsed}
          className={cn(
            'rounded-xl transition-colors hover:bg-accent/50 w-full',
            isCollapsed ? 'p-2' : 'p-3 bg-accent/50',
          )}
          avatarClassName={cn(compactMode ? 'h-8 w-8' : 'h-10 w-10')}
        />
      );
    };


    interface SidebarProps {
      onMouseEnter?: () => void;
      onMouseLeave?: () => void;
    }


    export const EnhancedSidebar = React.forwardRef<HTMLDivElement,
    SidebarProps>(
      ({ onMouseEnter, onMouseLeave }, ref) => {
        const { sidebarWidth, compactMode, appName, appLogo } = useAppShellStore();
        const [selectedWorkspace, setSelectedWorkspace] = React.useState(mockWorkspaces[0]);

        return (
          <Sidebar
            ref={ref}
            style={{ width: sidebarWidth }}
            onMouseEnter={onMouseEnter}
            onMouseLeave={onMouseLeave}
          >
            <SidebarContent>
              <SidebarHeader>
                {appLogo || (
                  <div className="p-2 bg-primary/20 rounded-lg">
                    <Rocket className="w-5 h-5 text-primary" />
                  </div>
                )}
                <SidebarTitle>{appName}</SidebarTitle>
              </SidebarHeader>

              <SidebarBody>
                <SidebarSection title="Main">
                  <AppMenuItem icon={Home} label="Dashboard" page="dashboard" />
                  <AppMenuItem icon={Database} label="Data Demo" page="data-demo" />
                  <AppMenuItem icon={Search} label="Search" />
                  <AppMenuItem icon={Bell} label="Notifications" badge={3} page="notifications" opensInSidePane />
                </SidebarSection>
                
                <SidebarSection title="Workspace" collapsible defaultExpanded>
                  <AppMenuItem icon={FileText} label="Documents" hasActions>
                    <AppMenuItem icon={FileText} label="Recent" isSubItem />
                    <AppMenuItem icon={Star} label="Starred" isSubItem />
                    <AppMenuItem icon={Trash2} label="Trash" isSubItem />
                  </AppMenuItem>
                  <AppMenuItem icon={FolderOpen} label="Projects" hasActions />
                  <AppMenuItem icon={Mail} label="Messages" badge={12} />
                </SidebarSection>
                
                <SidebarSection title="Personal" collapsible>
                  <AppMenuItem icon={Bookmark} label="Bookmarks" />
                  <AppMenuItem icon={Star} label="Favorites" />
                  <AppMenuItem icon={Download} label="Downloads" />
                </SidebarSection>

                <SidebarSection title="Components" collapsible defaultExpanded>
                  <AppMenuItem icon={Component} label="Toaster" page="toaster" />
                </SidebarSection>
              </SidebarBody>

              <SidebarFooter>
                <SidebarSection>
                  <AppMenuItem icon={User} label="Profile" />
                  <AppMenuItem icon={Settings} label="Settings" page="settings" />
                  <AppMenuItem icon={HelpCircle} label="Help" />
                </SidebarSection>

                <div className={cn(compactMode ? 'mt-4' : 'mt-6')}>
                  <Workspaces
                    workspaces={mockWorkspaces}
                    selectedWorkspaceId={selectedWorkspace.id}
                    onWorkspaceChange={setSelectedWorkspace}
                  >
                    <SidebarWorkspaceTrigger />
                    <WorkspaceContent>
                      <button className="flex w-full items-center gap-2 rounded-sm px-2 py-2 text-left text-sm hover:bg-accent hover:text-accent-foreground focus:outline-none">
                        <Plus className="h-4 w-4" />
                        <span>Create Workspace</span>
                      </button>
                    </WorkspaceContent>
                  </Workspaces>
                </div>
              </SidebarFooter>
            </SidebarContent>
          </Sidebar>
        );
      },
    );

    EnhancedSidebar.displayName = 'EnhancedSidebar';



    // Example of a reusable menu item component built with the new Sidebar
    primitives

    interface AppMenuItemProps {
      icon: React.ElementType;
      label: string;
      badge?: number;
      hasActions?: boolean;
      children?: React.ReactNode;
      isSubItem?: boolean;
      page?: ActivePage;
      opensInSidePane?: boolean;
    }


    const AppMenuItem: React.FC<AppMenuItemProps> = ({ icon: Icon, label, badge,
    hasActions, children, isSubItem = false, page, opensInSidePane = false }) =>
    {
      const compactMode = useAppShellStore(s => s.compactMode);
      const { setDraggedPage, setDragHoverTarget } = useAppShellStore.getState();
      const { isCollapsed } = useSidebar();
      const viewManager = useAppViewManager();

      const isActive = (
        (!opensInSidePane && page && viewManager.currentActivePage === page)
      ) || (
        opensInSidePane && page === 'notifications' && viewManager.sidePaneContent === 'notifications'
      );

      const handleClick = () => {
        if (page) {
          if (opensInSidePane) {
            // The only item using this is Notifications
            viewManager.toggleSidePane('notifications');
          } else {
            viewManager.navigateTo(page);
          }
        }
      };

      return (
        <div className={isSubItem ? (compactMode ? 'ml-4' : 'ml-6') : ''}>
          <SidebarMenuItem>
            <SidebarMenuButton
              onClick={handleClick}
              isActive={isActive}
              draggable={!!page}
              onDragStart={(_e) => {
                if (page) {
                  // set dragged page in AppShell store
                  setDraggedPage(page);
                }
              }}
              onDragEnd={() => {
                setDraggedPage(null);
                setDragHoverTarget(null);
              }}
            >
              <SidebarIcon>
                <Icon className={isSubItem ? "w-3 h-3" : "w-4 h-4"}/>
              </SidebarIcon>
              <SidebarLabel>{label}</SidebarLabel>
              {badge && <SidebarBadge>{badge}</SidebarBadge>}
              <SidebarTooltip label={label} badge={badge} />
            </SidebarMenuButton>

            {page && !isCollapsed && ( // Always render switcher if there's a page
              <div className={cn(
                "absolute top-1/2 -translate-y-1/2 z-10",
                "opacity-0 group-hover/item:opacity-100 group-focus-within/item:opacity-100",
                "transition-opacity pointer-events-none group-hover/item:pointer-events-auto",
                // If there are actions, move left to make space for the action button
                hasActions ? "right-10" : "right-2"
              )}>
                <ViewModeSwitcher targetPage={page} />
              </div>
            )}

            {hasActions && (
              <DropdownMenu>
                <DropdownMenuTrigger asChild>
                  <SidebarMenuAction>
                    <MoreHorizontal className="h-4 w-4" />
                  </SidebarMenuAction>
                </DropdownMenuTrigger>
                <DropdownMenuContent side="right" align="start">
                  <DropdownMenuItem>
                    <span>Edit {label}</span>
                  </DropdownMenuItem>
                  <DropdownMenuItem>
                    <span>Delete {label}</span>
                  </DropdownMenuItem>
                </DropdownMenuContent>
              </DropdownMenu>
            )}
          </SidebarMenuItem>
          {!isCollapsed && children && (
            <div className="space-y-1 mt-1">{children}</div>
          )}
        </div>
      );
    };
  src/hooks/useAppShellAnimations.hook.ts: >-
    import { useEffect, useRef } from 'react';

    import { gsap } from 'gsap';

    import { useSearchParams } from 'react-router-dom';

    import { useAppShellStore, useRightPaneWidth } from
    '@/store/appShell.store';

    import { SIDEBAR_STATES, BODY_STATES } from '@/lib/utils';


    function usePrevious<T>(value: T): T | undefined {
      const ref = useRef<T>();
      useEffect(() => {
        ref.current = value;
      }, [value]);
      return ref.current;
    }


    export function useSidebarAnimations(
      sidebarRef: React.RefObject<HTMLDivElement>,
      resizeHandleRef: React.RefObject<HTMLDivElement>
    ) {
      const { sidebarState, sidebarWidth, bodyState, reducedMotion } = useAppShellStore();
      const animationDuration = reducedMotion ? 0.1 : 0.4;

      useEffect(() => {
        if (!sidebarRef.current || !resizeHandleRef.current) return;

        const sidebar = sidebarRef.current;
        const handle = resizeHandleRef.current;
        
        let targetWidth = 0;
        let targetOpacity = 1;

        if (bodyState === BODY_STATES.FULLSCREEN) {
          targetWidth = 0;
          targetOpacity = 0;
        } else {
          switch (sidebarState) {
            case SIDEBAR_STATES.HIDDEN:
              targetWidth = 0;
              targetOpacity = 0;
              break;
            case SIDEBAR_STATES.COLLAPSED:
              targetWidth = 64;
              targetOpacity = 1;
              break;
            case SIDEBAR_STATES.EXPANDED:
              targetWidth = sidebarWidth;
              targetOpacity = 1;
              break;
            case SIDEBAR_STATES.PEEK:
              targetWidth = sidebarWidth * 0.8;
              targetOpacity = 0.95;
              break;
          }
        }

        const tl = gsap.timeline({ ease: "power3.out" });
        
        tl.to(sidebar, {
          width: targetWidth,
          opacity: targetOpacity,
          duration: animationDuration,
        });
        tl.to(handle, {
          left: targetWidth,
          duration: animationDuration,
        }, 0);

      }, [sidebarState, sidebarWidth, bodyState, animationDuration, sidebarRef, resizeHandleRef]);
    }


    export function useBodyStateAnimations(
      appRef: React.RefObject<HTMLDivElement>,
      mainContentRef: React.RefObject<HTMLDivElement>,
      rightPaneRef: React.RefObject<HTMLDivElement>,
      topBarContainerRef: React.RefObject<HTMLDivElement>,
      mainAreaRef: React.RefObject<HTMLDivElement>
    ) {
      const { bodyState, reducedMotion, isTopBarVisible, fullscreenTarget } = useAppShellStore();
      const rightPaneWidth = useRightPaneWidth();
      const animationDuration = reducedMotion ? 0.1 : 0.4;
      const prevBodyState = usePrevious(bodyState);
      const [, setSearchParams] = useSearchParams();

      useEffect(() => {
        if (!mainContentRef.current || !rightPaneRef.current || !topBarContainerRef.current || !mainAreaRef.current) return;

        const ease = "power3.out";
        const isSidePane = bodyState === BODY_STATES.SIDE_PANE;
        const isSplitView = bodyState === BODY_STATES.SPLIT_VIEW;

        // Kill any existing animations on the right pane to prevent conflicts
        gsap.killTweensOf(rightPaneRef.current);

        // Right pane animation
        if (isSidePane) {
          // SHOW AS OVERLAY: Set width immediately, animate transform for performance.
          gsap.set(rightPaneRef.current, { width: rightPaneWidth, x: '0%' });
          gsap.fromTo(rightPaneRef.current, { x: '100%' }, {
              x: '0%',
              duration: animationDuration,
              ease,
          });
        } else if (isSplitView) {
            // SHOW AS SPLIT: Set transform immediately, animate width.
            gsap.set(rightPaneRef.current, { x: '0%' });
            gsap.to(rightPaneRef.current, {
                width: rightPaneWidth,
                duration: animationDuration,
                ease,
            });
        } else {
            // HIDE PANE: Determine how to hide based on the state we are coming FROM.
            if (prevBodyState === BODY_STATES.SIDE_PANE) {
                // It was an overlay, so slide it out.
                gsap.to(rightPaneRef.current, {
              x: '100%',
              duration: animationDuration,
              ease,
                });
            } else { // Covers coming from SPLIT_VIEW, FULLSCREEN, or NORMAL
                // It was docked or fullscreen, so shrink its width.
                gsap.to(rightPaneRef.current, { width: 0, duration: animationDuration, ease });
            }
        }

        // Determine top bar position based on state
        let topBarY = '0%';
        if (bodyState === BODY_STATES.FULLSCREEN) {
          topBarY = '-100%'; // Always hide in fullscreen
        } else if (bodyState === BODY_STATES.NORMAL && !isTopBarVisible) {
          topBarY = '-100%'; // Hide only in normal mode when scrolled
        }

        gsap.to(topBarContainerRef.current, {
          y: topBarY,
          duration: animationDuration,
          ease,
        });
        
        // Add backdrop for side pane
        const backdrop = document.querySelector('.app-backdrop');
        if (isSidePane) { // This is correct because isSidePane is false when bodyState is split_view
          if (!backdrop) {
            const el = document.createElement('div');
            el.className = 'app-backdrop fixed inset-0 bg-black/30 z-[55]';
            appRef.current?.appendChild(el);
            gsap.fromTo(el, { opacity: 0 }, { opacity: 1, duration: animationDuration });
            el.onclick = () => {
              setSearchParams(prev => {
                const newParams = new URLSearchParams(prev);
                newParams.delete('sidePane');
                return newParams;
              }, { replace: true });
            };
          }
        } else {
          if (backdrop) {
            gsap.to(backdrop, { opacity: 0, duration: animationDuration, onComplete: () => backdrop.remove() });
          }
        }
      }, [bodyState, prevBodyState, animationDuration, rightPaneWidth, isTopBarVisible, appRef, mainContentRef, rightPaneRef, topBarContainerRef, mainAreaRef, fullscreenTarget, setSearchParams]);
    }
approved: true
linesAdded: null
linesRemoved: null
linesDifference: null
gitCommittedAt: null
status: committed
id: 280
