uuid: c40869d8-9ac7-43ca-a0ad-60e50257e84f
projectId: amazing-app-shell
createdAt: '2025-10-10T22:06:34.612Z'
gitCommitMsg: >-
  feat: Implement command palette and improve component APIs

  This commit introduces a fully-featured command palette, a critical feature
  for a production-ready application shell. It also enhances component
  reusability and robustness.

  - Added `cmdk` and `@radix-ui/react-dialog` dependencies. - Created new
  reusable `Dialog` and `Command` UI components. - Implemented a
  `CommandPalette` with keyboard shortcuts (Ctrl+K) and various app-integrated
  commands. - Wired the command palette into the global state and top bar. -
  Refactored the `Popover` component to support `useTriggerWidth`, allowing its
  width to dynamically match its trigger. - Updated the `WorkspaceSwitcher` to
  use `useTriggerWidth` for a more polished and responsive layout.
promptSummary: >-
  Make the project production-ready as a UI library, focusing on pluggable
  architecture and final touches.
reasoning:
  - >-
    As an expert AI programmer, I will now modify your project to make it more
    production-ready. My changes will focus on implementing a pluggable
    architecture and adding final touches, such as a command palette and more
    flexible UI components.
  - '### Step 1: Add Dependencies for Command Palette'
  - >-
    I'll start by adding `cmdk` and `@radix-ui/react-dialog` to your
    `package.json`. These are essential for building a powerful and accessible
    command palette, a hallmark of a production-grade application shell.
  - '### Step 2: Create a Reusable Dialog Component'
  - >-
    The command palette will be presented in a dialog. I'll create a new,
    reusable `Dialog` component in `src/components/ui/`, based on Radix UI for
    accessibility and robustness.
  - '### Step 3: Create a Base Command Component'
  - >-
    Next, I'll create the base `Command` component, which provides the building
    blocks for our command palette. This component uses `cmdk` and our new
    `Dialog` component.
  - '### Step 4: Update State Management for Command Palette'
  - >-
    I will now update the Zustand store to include state for managing the
    command palette's visibility.
  - '### Step 5: Implement the Command Palette'
  - >-
    With the base components and state management in place, I will create the
    `CommandPalette` component. It will include keyboard shortcuts (`Ctrl+K`)
    and several useful commands that interact with the application's state,
    demonstrating the power of a fully integrated app shell.
  - '### Step 6: Integrate Command Palette into App Shell'
  - >-
    I'll now render the `CommandPalette` within the main `AppShell` component,
    making it available globally.
  - '### Step 7: Wire Up Command Palette Trigger in Top Bar'
  - >-
    To make the command palette accessible, I'll connect the `Command` button in
    the `TopBar` to the state we just created.
  - '### Step 8: Enhance the Popover Component for Flexibility'
  - >-
    To improve reusability, I'm making the `Popover` component more flexible.
    I'm adding a `useTriggerWidth` prop so the popover's width can automatically
    match its trigger element, a common requirement. I'm also standardizing its
    default width and improving the props interface.
  - '### Step 9: Improve the Workspace Switcher Layout'
  - >-
    Finally, I'll update the `WorkspaceContent` component to use the new
    `useTriggerWidth` prop by default. This ensures the workspace switcher
    popover intelligently resizes to match the trigger's width, creating a more
    cohesive and professional look.
  - >-
    These changes significantly enhance your application shell, making it more
    feature-rich, robust, and ready for production use as a UI library
    foundation.
operations:
  - type: write
    path: package.json
    content: |+
      --- package.json
      +++ package.json
      @@ -19,7 +19,9 @@
           "@radix-ui/react-slot": "^1.0.2",
           "sonner": "^1.2.4",
           "@radix-ui/react-avatar": "^1.0.4",
      -    "@radix-ui/react-popover": "^1.0.7"
      +    "@radix-ui/react-popover": "^1.0.7",
      +    "@radix-ui/react-dialog": "^1.0.5",
      +    "cmdk": "^0.2.0"
         },
         "devDependencies": {
           "@types/node": "^20.10.0",

    patchStrategy: standard-diff
  - type: write
    path: src/components/ui/dialog.tsx
    content: |-
      import * as React from "react"
      import * as DialogPrimitive from "@radix-ui/react-dialog"
      import { X } from "lucide-react"

      import { cn } from "@/lib/utils"

      const Dialog = DialogPrimitive.Root

      const DialogTrigger = DialogPrimitive.Trigger

      const DialogPortal = DialogPrimitive.Portal

      const DialogClose = DialogPrimitive.Close

      const DialogOverlay = React.forwardRef<
        React.ElementRef<typeof DialogPrimitive.Overlay>,
        React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
      >(({ className, ...props }, ref) => (
        <DialogPrimitive.Overlay
          ref={ref}
          className={cn(
            "fixed inset-0 z-50 bg-background/80 backdrop-blur-sm data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
            className
          )}
          {...props}
        />
      ))
      DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

      const DialogContent = React.forwardRef<
        React.ElementRef<typeof DialogPrimitive.Content>,
        React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
      >(({ className, children, ...props }, ref) => (
        <DialogPortal>
          <DialogOverlay />
          <DialogPrimitive.Content
            ref={ref}
            className={cn(
              "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-card p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%]",
              "sm:rounded-2xl",
              className
            )}
            {...props}
          >
            {children}
            <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
              <X className="h-4 w-4" />
              <span className="sr-only">Close</span>
            </DialogPrimitive.Close>
          </DialogPrimitive.Content>
        </DialogPortal>
      ))
      DialogContent.displayName = DialogPrimitive.Content.displayName

      const DialogHeader = ({
        className,
        ...props
      }: React.HTMLAttributes<HTMLDivElement>) => (
        <div
          className={cn(
            "flex flex-col space-y-1.5 text-center sm:text-left",
            className
          )}
          {...props}
        />
      )
      DialogHeader.displayName = "DialogHeader"

      const DialogFooter = ({
        className,
        ...props
      }: React.HTMLAttributes<HTMLDivElement>) => (
        <div
          className={cn(
            "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
            className
          )}
          {...props}
        />
      )
      DialogFooter.displayName = "DialogFooter"

      const DialogTitle = React.forwardRef<
        React.ElementRef<typeof DialogPrimitive.Title>,
        React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
      >(({ className, ...props }, ref) => (
        <DialogPrimitive.Title
          ref={ref}
          className={cn(
            "text-lg font-semibold leading-none tracking-tight",
            className
          )}
          {...props}
        />
      ))
      DialogTitle.displayName = DialogPrimitive.Title.displayName

      const DialogDescription = React.forwardRef<
        React.ElementRef<typeof DialogPrimitive.Description>,
        React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
      >(({ className, ...props }, ref) => (
        <DialogPrimitive.Description
          ref={ref}
          className={cn("text-sm text-muted-foreground", className)}
          {...props}
        />
      ))
      DialogDescription.displayName = DialogPrimitive.Description.displayName

      export {
        Dialog,
        DialogPortal,
        DialogOverlay,
        DialogClose,
        DialogTrigger,
        DialogContent,
        DialogHeader,
        DialogFooter,
        DialogTitle,
        DialogDescription,
      }
    patchStrategy: replace
  - type: write
    path: src/components/ui/command.tsx
    content: |-
      import * as React from "react"
      import { type DialogProps } from "@radix-ui/react-dialog"
      import { Command as CommandPrimitive } from "cmdk"
      import { Search } from "lucide-react"

      import { cn } from "@/lib/utils"
      import { Dialog, DialogContent } from "@/components/ui/dialog"

      const Command = React.forwardRef<
        React.ElementRef<typeof CommandPrimitive>,
        React.ComponentPropsWithoutRef<typeof CommandPrimitive>
      >(({ className, ...props }, ref) => (
        <CommandPrimitive
          ref={ref}
          className={cn(
            "flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground",
            className
          )}
          {...props}
        />
      ))
      Command.displayName = CommandPrimitive.displayName

      interface CommandDialogProps extends DialogProps {}

      const CommandDialog = ({ children, ...props }: CommandDialogProps) => {
        return (
          <Dialog {...props}>
            <DialogContent className="overflow-hidden p-0 shadow-lg">
              <Command className="[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5">
                {children}
              </Command>
            </DialogContent>
          </Dialog>
        )
      }

      const CommandInput = React.forwardRef<
        React.ElementRef<typeof CommandPrimitive.Input>,
        React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>
      >(({ className, ...props }, ref) => (
        <div className="flex items-center border-b px-3" cmdk-input-wrapper="">
          <Search className="mr-2 h-4 w-4 shrink-0 opacity-50" />
          <CommandPrimitive.Input
            ref={ref}
            className={cn(
              "flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50",
              className
            )}
            {...props}
          />
        </div>
      ))

      CommandInput.displayName = CommandPrimitive.Input.displayName

      const CommandList = React.forwardRef<
        React.ElementRef<typeof CommandPrimitive.List>,
        React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>
      >(({ className, ...props }, ref) => (
        <CommandPrimitive.List
          ref={ref}
          className={cn("max-h-[300px] overflow-y-auto overflow-x-hidden", className)}
          {...props}
        />
      ))

      CommandList.displayName = CommandPrimitive.List.displayName

      const CommandEmpty = React.forwardRef<
        React.ElementRef<typeof CommandPrimitive.Empty>,
        React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>
      >((props, ref) => (
        <CommandPrimitive.Empty
          ref={ref}
          className="py-6 text-center text-sm"
          {...props}
        />
      ))

      CommandEmpty.displayName = CommandPrimitive.Empty.displayName

      const CommandGroup = React.forwardRef<
        React.ElementRef<typeof CommandPrimitive.Group>,
        React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>
      >(({ className, ...props }, ref) => (
        <CommandPrimitive.Group
          ref={ref}
          className={cn(
            "overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground",
            className
          )}
          {...props}
        />
      ))

      CommandGroup.displayName = CommandPrimitive.Group.displayName

      const CommandSeparator = React.forwardRef<
        React.ElementRef<typeof CommandPrimitive.Separator>,
        React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>
      >(({ className, ...props }, ref) => (
        <CommandPrimitive.Separator
          ref={ref}
          className={cn("-mx-1 h-px bg-border", className)}
          {...props}
        />
      ))
      CommandSeparator.displayName = CommandPrimitive.Separator.displayName

      const CommandItem = React.forwardRef<
        React.ElementRef<typeof CommandPrimitive.Item>,
        React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>
      >(({ className, ...props }, ref) => (
        <CommandPrimitive.Item
          ref={ref}
          className={cn(
            "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none aria-selected:bg-accent aria-selected:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
            className
          )}
          {...props}
        />
      ))

      CommandItem.displayName = CommandPrimitive.Item.displayName

      const CommandShortcut = ({
        className,
        ...props
      }: React.HTMLAttributes<HTMLSpanElement>) => {
        return (
          <span
            className={cn(
              "ml-auto text-xs tracking-widest text-muted-foreground",
              className
            )}
            {...props}
          />
        )
      }
      CommandShortcut.displayName = "CommandShortcut"

      export {
        Command,
        CommandDialog,
        CommandInput,
        CommandList,
        CommandEmpty,
        CommandGroup,
        CommandItem,
        CommandShortcut,
        CommandSeparator,
      }
    patchStrategy: replace
  - type: write
    path: src/store/appStore.ts
    content: >+
      --- src/store/appStore.ts

      +++ src/store/appStore.ts

      @@ -14,6 +14,7 @@
         isResizing: boolean
         isResizingRightPane: boolean
         isTopBarVisible: boolean
      +  isCommandPaletteOpen: boolean
         searchTerm: string
         
         // User Preferences
      @@ -34,6 +35,7 @@
         setReducedMotion: (reduced: boolean) => void
         setCompactMode: (compact: boolean) => void
         setPrimaryColor: (color: string) => void
      +  setCommandPaletteOpen: (open: boolean) => void
         setSearchTerm: (term: string) => void
         
         // Composite Actions
      @@ -56,6 +58,7 @@
         isResizing: false,
         isResizingRightPane: false,
         isTopBarVisible: true,
      +  isCommandPaletteOpen: false,
         autoExpandSidebar: true,
         reducedMotion: false,
         compactMode: false,
      @@ -85,6 +88,7 @@
             setReducedMotion: (reduced) => set({ reducedMotion: reduced }),
             setCompactMode: (compact) => set({ compactMode: compact }),
             setPrimaryColor: (color) => set({ primaryColor: color }),
      +      setCommandPaletteOpen: (open) => set({ isCommandPaletteOpen: open
      }),
             setSearchTerm: (term) => set({ searchTerm: term }),
             
             // Composite actions

    patchStrategy: standard-diff
  - type: write
    path: src/components/CommandPalette.tsx
    content: >-
      import * as React from 'react'

      import {
        CommandDialog,
        CommandEmpty,
        CommandGroup,
        CommandInput,
        CommandItem,
        CommandList,
        CommandSeparator,
      } from '@/components/ui/command'

      import { useAppStore } from '@/store/appStore'

      import { Home, Settings, Moon, Sun, Monitor, Smartphone, PanelRight,
      Maximize, Component } from 'lucide-react'


      export function CommandPalette() {
        const {
          isCommandPaletteOpen,
          setCommandPaletteOpen,
          setActivePage,
          toggleDarkMode,
          isDarkMode,
          setCompactMode,
          toggleFullscreen,
          openSidePane,
        } = useAppStore()

        React.useEffect(() => {
          const down = (e: KeyboardEvent) => {
            if (e.key === 'k' && (e.metaKey || e.ctrlKey)) {
              e.preventDefault()
              setCommandPaletteOpen(!isCommandPaletteOpen)
            }
          }
          document.addEventListener('keydown', down)
          return () => document.removeEventListener('keydown', down)
        }, [isCommandPaletteOpen, setCommandPaletteOpen])
        
        const runCommand = (command: () => void) => {
          setCommandPaletteOpen(false)
          command()
        }

        return (
          <CommandDialog open={isCommandPaletteOpen} onOpenChange={setCommandPaletteOpen}>
            <CommandInput placeholder="Type a command or search..." />
            <CommandList>
              <CommandEmpty>No results found.</CommandEmpty>
              <CommandGroup heading="Navigation">
                <CommandItem onSelect={() => runCommand(() => setActivePage('dashboard'))}>
                  <Home className="mr-2 h-4 w-4" />
                  <span>Go to Dashboard</span>
                </CommandItem>
                <CommandItem onSelect={() => runCommand(() => setActivePage('settings'))}>
                  <Settings className="mr-2 h-4 w-4" />
                  <span>Go to Settings</span>
                </CommandItem>
                <CommandItem onSelect={() => runCommand(() => setActivePage('toaster'))}>
                  <Component className="mr-2 h-4 w-4" />
                  <span>Go to Toaster Demo</span>
                </CommandItem>
              </CommandGroup>
              <CommandSeparator />
              <CommandGroup heading="Actions">
                <CommandItem onSelect={() => runCommand(toggleDarkMode)}>
                  {isDarkMode ? <Sun className="mr-2 h-4 w-4" /> : <Moon className="mr-2 h-4 w-4" />}
                  <span>Toggle Theme</span>
                </CommandItem>
                <CommandItem onSelect={() => runCommand(toggleFullscreen)}>
                  <Maximize className="mr-2 h-4 w-4" />
                  <span>Toggle Fullscreen</span>
                </CommandItem>
                <CommandItem onSelect={() => runCommand(() => openSidePane('settings'))}>
                  <PanelRight className="mr-2 h-4 w-4" />
                  <span>Open Settings in Side Pane</span>
                </CommandItem>
              </CommandGroup>
              <CommandSeparator />
              <CommandGroup heading="Preferences">
                <CommandItem onSelect={() => runCommand(() => setCompactMode(true))}>
                  <Smartphone className="mr-2 h-4 w-4" />
                  <span>Enable Compact Mode</span>
                </CommandItem>
                <CommandItem onSelect={() => runCommand(() => setCompactMode(false))}>
                  <Monitor className="mr-2 h-4 w-4" />
                  <span>Disable Compact Mode</span>
                </CommandItem>
              </CommandGroup>
            </CommandList>
          </CommandDialog>
        )
      }
    patchStrategy: replace
  - type: write
    path: src/components/AppShell.tsx
    content: |+
      --- src/components/AppShell.tsx
      +++ src/components/AppShell.tsx
      @@ -4,6 +4,7 @@
       import { MainContent } from './MainContent'
       import { RightPane } from './RightPane'
       import { TopBar } from './TopBar'
      +import { CommandPalette } from './CommandPalette'
       import { useAppStore } from '@/store/appStore'
       import { SIDEBAR_STATES, BODY_STATES } from '@/lib/utils'
       
      @@ -218,6 +219,7 @@
               </div>
             </div>
             <RightPane ref={rightPaneRef} />
      +      <CommandPalette />
           </div>
         )
       }

    patchStrategy: standard-diff
  - type: write
    path: src/components/TopBar.tsx
    content: |+
      --- src/components/TopBar.tsx
      +++ src/components/TopBar.tsx
      @@ -28,6 +28,7 @@
           activePage,
           setActivePage,
           searchTerm,
      +    setCommandPaletteOpen,
           setSearchTerm,
         } = useAppStore()
       
      @@ -155,6 +156,7 @@
               <div className={cn('flex items-center gap-3', isSearchFocused && activePage === 'dashboard' ? 'hidden lg:flex' : '')}>
       
                 <button
      +            onClick={() => setCommandPaletteOpen(true)}
                   className="h-10 w-10 flex items-center justify-center rounded-full hover:bg-accent transition-colors group"
                   title="Command Palette (Ctrl+K)"
                 >

    patchStrategy: standard-diff
  - type: write
    path: src/components/ui/popover.tsx
    content: >+
      --- src/components/ui/popover.tsx

      +++ src/components/ui/popover.tsx

      @@ -6,24 +6,30 @@
       
       const PopoverTrigger = PopoverPrimitive.Trigger
       
      -type PopoverContentProps = React.ComponentPropsWithoutRef<typeof
      PopoverPrimitive.Content>

      +interface PopoverContentProps

      +  extends React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
      {

      +  useTriggerWidth?: boolean

      +}
       
       const PopoverContent = React.forwardRef<
         React.ElementRef<typeof PopoverPrimitive.Content>,
         PopoverContentProps
      ->(({ className, align = "center", sideOffset = 4, ...props }, ref) => (

      +>(

      +  ({ className, align = "center", sideOffset = 4, useTriggerWidth =
      false, ...props }, ref) => (
         <PopoverPrimitive.Portal>
           <PopoverPrimitive.Content
             ref={ref}
             align={align}
             sideOffset={sideOffset}
             className={cn(
      -        "z-50 w-80 rounded-xl border bg-popover p-4
      text-popover-foreground shadow-xl outline-none
      data-[state=open]:animate-in data-[state=closed]:animate-out
      data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0
      data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95
      data-[side=bottom]:slide-in-from-top-2
      data-[side=left]:slide-in-from-right-2
      data-[side=right]:slide-in-from-left-2
      data-[side=top]:slide-in-from-bottom-2",

      +        "z-50 w-72 rounded-xl border bg-popover p-4
      text-popover-foreground shadow-xl outline-none
      data-[state=open]:animate-in data-[state=closed]:animate-out
      data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0
      data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95
      data-[side=bottom]:slide-in-from-top-2
      data-[side=left]:slide-in-from-right-2
      data-[side=right]:slide-in-from-left-2
      data-[side=top]:slide-in-from-bottom-2",

      +        useTriggerWidth && "w-[var(--radix-popover-trigger-width)]",
               className
             )}
             {...props}
           />
         </PopoverPrimitive.Portal>
       ))
       PopoverContent.displayName = PopoverPrimitive.Content.displayName
       
      -export { Popover, PopoverTrigger, PopoverContent, type
      PopoverContentProps }

      +export { Popover, PopoverTrigger, PopoverContent }

      +export type { PopoverContentProps }

    patchStrategy: standard-diff
  - type: write
    path: src/components/WorkspaceSwitcher.tsx
    content: "--- src/components/WorkspaceSwitcher.tsx\n+++ src/components/WorkspaceSwitcher.tsx\n@@ -218,11 +218,13 @@\n \ttitle = 'Workspaces',\n \tsearchable = false,\n \tonSearch,\n-\talign,\n+\talign = 'start',\n+\tuseTriggerWidth = true,\n \t...props\n }: WorkspaceContentProps) {\n \tconst {\n \t\tworkspaces,\n+\t\topen,\n \t\tselectedWorkspace,\n \t\tonWorkspaceSelect,\n \t\tgetWorkspaceId,\n@@ -275,7 +277,8 @@\n \treturn (\n \t\t<PopoverContent\n \t\t\tclassName={cn('p-0', className)}\n-\t\t\talign={align || 'start'}\n+\t\t\talign={align}\n+\t\t\tuseTriggerWidth={useTriggerWidth}\n \t\t\t{...props}\n \t\t>\n \t\t\t<div className=\"border-b px-4 py-3\">\n\n"
    patchStrategy: standard-diff
snapshot:
  src/components/ui/dialog.tsx: null
  src/components/ui/command.tsx: null
  src/components/CommandPalette.tsx: null
  package.json: |-
    {
      "name": "amazing-app-shell",
      "private": true,
      "version": "0.0.0",
      "type": "module",
      "scripts": {
        "dev": "vite",
        "build": "tsc && vite build",
        "lint": "eslint . --ext ts,tsx --report-unused-disable-directives --max-warnings 0",
        "preview": "vite preview"
      },
      "dependencies": {
        "react": "^18.2.0",
        "react-dom": "^18.2.0",
        "gsap": "^3.12.2",
        "zustand": "^4.4.7",
        "lucide-react": "^0.294.0",
        "clsx": "^2.0.0",
        "tailwind-merge": "^2.0.0",
        "class-variance-authority": "^0.7.0",
        "@radix-ui/react-slot": "^1.0.2",
        "sonner": "^1.2.4",
        "@radix-ui/react-avatar": "^1.0.4",
        "@radix-ui/react-popover": "^1.0.7"
      },
      "devDependencies": {
        "@types/node": "^20.10.0",
        "@types/react": "^18.2.37",
        "@types/react-dom": "^18.2.15",
        "@typescript-eslint/eslint-plugin": "^6.10.0",
        "@typescript-eslint/parser": "^6.10.0",
        "@vitejs/plugin-react": "^4.1.1",
        "autoprefixer": "^10.4.16",
        "eslint": "^8.53.0",
        "eslint-plugin-react-hooks": "^4.6.0",
        "eslint-plugin-react-refresh": "^0.4.4",
        "postcss": "^8.4.31",
        "tailwindcss": "^3.3.5",
        "typescript": "^5.2.2",
        "vite": "^4.5.0",
        "tailwindcss-animate": "^1.0.7"
      }
    }
  src/components/TopBar.tsx: |-
    import { useState } from 'react'
    import {
      Menu, 
      Maximize, 
      Minimize, 
      Moon, 
      Sun,
      Settings,
      Command,
      Zap,
      ChevronRight,
      Search,
      Filter,
      Plus,
      PanelRight,
    } from 'lucide-react'
    import { cn } from '@/lib/utils'
    import { BODY_STATES } from '@/lib/utils'
    import { useAppStore } from '@/store/appStore'

    interface TopBarProps {
      onToggleSidebar: () => void
      onToggleFullscreen: () => void
      onToggleDarkMode: () => void
    }

    export function TopBar({
      onToggleSidebar,
      onToggleFullscreen,
      onToggleDarkMode
    }: TopBarProps) {
      const { 
        bodyState, 
        isDarkMode, 
        openSidePane,
        sidePaneContent,
        activePage,
        setActivePage,
        searchTerm,
        setSearchTerm,
      } = useAppStore()

      const [isSearchFocused, setIsSearchFocused] = useState(false)

      const handleSettingsClick = () => {
        const isSettingsInSidePane = bodyState === BODY_STATES.SIDE_PANE && sidePaneContent === 'settings'

        // If we're on the settings page and it's not in the side pane, treat this as a "minimize" action.
        if (activePage === 'settings' && !isSettingsInSidePane) {
          openSidePane('settings');
          setActivePage('dashboard');
        } else {
          // In all other cases (on dashboard page, or settings already in pane),
          // just toggle the settings side pane.
          openSidePane('settings');
        }
      }

      const handleDashboardMoveToSidePane = () => {
        openSidePane('main');
      };

      const handleSettingsMoveToSidePane = () => {
        openSidePane('settings');
        setActivePage('dashboard');
      }

      const handleToasterMoveToSidePane = () => {
        openSidePane('toaster');
        setActivePage('dashboard');
      }

      return (
        <div className={cn(
          "h-20 bg-card/80 backdrop-blur-sm border-b border-border flex items-center justify-between px-6 z-50 gap-4",
          {
            'transition-all duration-300 ease-in-out': activePage === 'dashboard',
          }
        )}>
          {/* Left Section - Sidebar Controls & Breadcrumbs */}
          <div className="flex items-center gap-4">
            {/* Sidebar Controls */}
            <button
              onClick={onToggleSidebar}
              className={cn(
                "h-10 w-10 flex items-center justify-center rounded-full hover:bg-accent transition-colors"
              )}
              title="Toggle Sidebar"
            >
              <Menu className="w-5 h-5" />
            </button>

            {/* Breadcrumbs */}
            <div className={cn("hidden md:flex items-center gap-2 text-sm transition-opacity", {
              "opacity-0 pointer-events-none": isSearchFocused && activePage === 'dashboard'
            })}>
              <a href="#" className="text-muted-foreground hover:text-foreground transition-colors">Home</a>
              <ChevronRight className="w-4 h-4 text-muted-foreground" />
              <span className="font-medium text-foreground capitalize">{activePage}</span>
            </div>
          </div>

          {/* Right Section - Search, page controls, and global controls */}
          <div className={cn("flex items-center gap-3", isSearchFocused && activePage === 'dashboard' ? 'flex-1' : '')}>
            {/* Page-specific: Dashboard search and actions */}
            {activePage === 'dashboard' && (
              <div className="flex items-center gap-2 flex-1 justify-end">
                <div className={cn("relative transition-all duration-300 ease-in-out", isSearchFocused ? 'flex-1 max-w-lg' : 'w-auto')}>
                  <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4 pointer-events-none" />
                  <input
                    type="text"
                    placeholder="Search..."
                    value={searchTerm}
                    onFocus={() => setIsSearchFocused(true)}
                    onBlur={() => setIsSearchFocused(false)}
                    onChange={(e) => setSearchTerm(e.target.value)}
                    className={cn(
                      "pl-9 pr-4 py-2 h-10 border-none rounded-lg bg-card focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent transition-all duration-300 ease-in-out w-full",
                      isSearchFocused ? 'bg-background' : 'w-48'
                    )}
                  />
                </div>
                 <button className="h-10 w-10 flex-shrink-0 flex items-center justify-center hover:bg-accent rounded-full transition-colors">
                  <Filter className="w-5 h-5" />
                </button>
                 <button className="bg-primary text-primary-foreground px-4 py-2 rounded-full hover:bg-primary/90 transition-colors flex items-center gap-2 h-10 flex-shrink-0">
                  <Plus className="w-5 h-5" />
                  <span className={cn(isSearchFocused ? 'hidden sm:inline' : 'inline')}>New Project</span>
                </button>
              </div>
            )}
            
            {/* Page-specific: Move to side pane */}
            <div className={cn('flex items-center', isSearchFocused && activePage === 'dashboard' ? 'hidden md:flex' : '')}>
              {activePage === 'dashboard' && (
                <button onClick={handleDashboardMoveToSidePane} className="h-10 w-10 flex items-center justify-center hover:bg-accent rounded-full transition-colors" title="Move to Side Pane"><PanelRight className="w-5 h-5" /></button>
              )}
              {activePage === 'settings' && (
                <button onClick={handleSettingsMoveToSidePane} className="h-10 w-10 flex items-center justify-center hover:bg-accent rounded-full transition-colors" title="Move to Side Pane"><PanelRight className="w-5 h-5" /></button>
              )}
              {activePage === 'toaster' && (
                <button onClick={handleToasterMoveToSidePane} className="h-10 w-10 flex items-center justify-center hover:bg-accent rounded-full transition-colors" title="Move to Side Pane"><PanelRight className="w-5 h-5" /></button>
              )}
            </div>

            {/* Separator */}
            <div className={cn(
              'w-px h-6 bg-border mx-2', 
              (activePage !== 'dashboard' && activePage !== 'settings' && activePage !== 'toaster') || (isSearchFocused && activePage === 'dashboard') ? 'hidden' : ''
            )} />

            {/* Quick Actions */}
            <div className={cn('flex items-center gap-3', isSearchFocused && activePage === 'dashboard' ? 'hidden lg:flex' : '')}>

              <button
                className="h-10 w-10 flex items-center justify-center rounded-full hover:bg-accent transition-colors group"
                title="Command Palette (Ctrl+K)"
              >
                <Command className="w-5 h-5 group-hover:scale-110 transition-transform" />
              </button>

            <button
              className="h-10 w-10 flex items-center justify-center rounded-full hover:bg-accent transition-colors group"
              title="Quick Actions"
            >
              <Zap className="w-5 h-5 group-hover:scale-110 transition-transform" />
            </button>

            {/* Body State Controls */}
            <button
              onClick={() => openSidePane('details')}
              className={cn(
                "h-10 w-10 flex items-center justify-center rounded-full hover:bg-accent transition-colors group",
                bodyState === BODY_STATES.SIDE_PANE && sidePaneContent === 'details' && "bg-accent"
              )}
              title="Toggle Side Pane"
            >
              <div className="w-5 h-5 flex group-hover:scale-110 transition-transform">
                <div className="w-1/2 h-full bg-current opacity-60 rounded-l-sm" />
                <div className="w-1/2 h-full bg-current rounded-r-sm" />
              </div>
            </button>

            <button
              onClick={onToggleFullscreen}
              className={cn(
                "h-10 w-10 flex items-center justify-center rounded-full hover:bg-accent transition-colors group",
                bodyState === BODY_STATES.FULLSCREEN && "bg-accent"
              )}
              title="Toggle Fullscreen"
            >
              {bodyState === BODY_STATES.FULLSCREEN ? (
                <Minimize className="w-5 h-5 group-hover:scale-110 transition-transform" />
              ) : (
                <Maximize className="w-5 h-5 group-hover:scale-110 transition-transform" />
              )}
            </button>

            <div className="w-px h-6 bg-border mx-2" />

            {/* Theme and Settings */}
            <button
              onClick={onToggleDarkMode}
              className="h-10 w-10 flex items-center justify-center rounded-full hover:bg-accent transition-colors group"
              title="Toggle Dark Mode"
            >
              {isDarkMode ? (
                <Sun className="w-5 h-5 group-hover:scale-110 transition-transform" />
              ) : (
                <Moon className="w-5 h-5 group-hover:scale-110 transition-transform" />
              )}
            </button>

            <button
              onClick={handleSettingsClick}
              className="h-10 w-10 flex items-center justify-center rounded-full hover:bg-accent transition-colors group"
              title="Settings"
            >
              <Settings className="w-5 h-5 group-hover:rotate-90 transition-transform duration-300" />
            </button>
            </div>
          </div>
        </div>
      )
    }
  src/components/ui/popover.tsx: >-
    import * as React from "react"

    import * as PopoverPrimitive from "@radix-ui/react-popover"


    import { cn } from "@/lib/utils"


    const Popover = PopoverPrimitive.Root


    const PopoverTrigger = PopoverPrimitive.Trigger


    type PopoverContentProps = React.ComponentPropsWithoutRef<typeof
    PopoverPrimitive.Content>


    const PopoverContent = React.forwardRef<
      React.ElementRef<typeof PopoverPrimitive.Content>,
      PopoverContentProps
    >(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
      <PopoverPrimitive.Portal>
        <PopoverPrimitive.Content
          ref={ref}
          align={align}
          sideOffset={sideOffset}
          className={cn(
            "z-50 w-80 rounded-xl border bg-popover p-4 text-popover-foreground shadow-xl outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
            className
          )}
          {...props}
        />
      </PopoverPrimitive.Portal>
    ))

    PopoverContent.displayName = PopoverPrimitive.Content.displayName


    export { Popover, PopoverTrigger, PopoverContent, type PopoverContentProps }
  src/components/AppShell.tsx: |-
    import { useRef, useEffect } from 'react'
    import { gsap } from 'gsap'
    import { cn } from '@/lib/utils'
    import { EnhancedSidebar } from './EnhancedSidebar'
    import { MainContent } from './MainContent'
    import { RightPane } from './RightPane'
    import { TopBar } from './TopBar'
    import { useAppStore } from '@/store/appStore'
    import { SIDEBAR_STATES, BODY_STATES } from '@/lib/utils'

    export function AppShell() {
      const {
        sidebarState,
        bodyState,
        sidebarWidth,
        isDarkMode,
        isResizing,
        rightPaneWidth,
        isResizingRightPane,
        setRightPaneWidth,
        isTopBarVisible,
        setSidebarState,
        closeSidePane,
        setIsResizing,
        setSidebarWidth,
        toggleSidebar,
        peekSidebar,
        toggleFullscreen,
        setIsResizingRightPane,
        toggleDarkMode,
        reducedMotion,
        autoExpandSidebar,
        primaryColor
      } = useAppStore()
      
      const appRef = useRef<HTMLDivElement>(null)
      const sidebarRef = useRef<HTMLDivElement>(null)
      const mainContentRef = useRef<HTMLDivElement>(null)
      const rightPaneRef = useRef<HTMLDivElement>(null)
      const resizeHandleRef = useRef<HTMLDivElement>(null)
      const topBarContainerRef = useRef<HTMLDivElement>(null)

      // Animation duration based on reduced motion preference
      const animationDuration = reducedMotion ? 0.1 : 0.4

      // Set primary color
      useEffect(() => {
        document.documentElement.style.setProperty('--primary-hsl', primaryColor)
      }, [primaryColor])

      // Resize functionality
      useEffect(() => {
        const handleMouseMove = (e: MouseEvent) => {
          if (!isResizing) return
          
          const newWidth = Math.max(200, Math.min(500, e.clientX))
          setSidebarWidth(newWidth)
          
          if (sidebarRef.current) {
            gsap.set(sidebarRef.current, { width: newWidth })
          }
          if (resizeHandleRef.current) {
            gsap.set(resizeHandleRef.current, { left: newWidth })
          }
        }

        const handleMouseUp = () => {
          setIsResizing(false)
          document.body.style.cursor = ''
          document.body.style.userSelect = ''
        }

        if (isResizing) {
          document.body.style.cursor = 'col-resize'
          document.body.style.userSelect = 'none'
          document.addEventListener('mousemove', handleMouseMove)
          document.addEventListener('mouseup', handleMouseUp)
        }

        return () => {
          document.removeEventListener('mousemove', handleMouseMove)
          document.removeEventListener('mouseup', handleMouseUp)
        }
      }, [isResizing, setIsResizing, setSidebarWidth])

      // Resize functionality for Right Pane
      useEffect(() => {
        const handleMouseMove = (e: MouseEvent) => {
          if (!isResizingRightPane) return
          
          const newWidth = window.innerWidth - e.clientX
          setRightPaneWidth(newWidth)
        }

        const handleMouseUp = () => {
          setIsResizingRightPane(false)
          document.body.style.cursor = ''
          document.body.style.userSelect = ''
        }

        if (isResizingRightPane) {
          document.body.style.cursor = 'col-resize'
          document.body.style.userSelect = 'none'
          document.addEventListener('mousemove', handleMouseMove)
          document.addEventListener('mouseup', handleMouseUp)
        }

        return () => {
          document.removeEventListener('mousemove', handleMouseMove)
          document.removeEventListener('mouseup', handleMouseUp)
          document.body.style.cursor = ''
        }
      }, [isResizingRightPane, setIsResizingRightPane, setRightPaneWidth])

      // GSAP animations for sidebar transitions
      useEffect(() => {
        if (!sidebarRef.current || !mainContentRef.current || !resizeHandleRef.current) return

        const sidebar = sidebarRef.current
        const handle = resizeHandleRef.current
        
        let targetWidth = 0
        let targetOpacity = 1

        if (bodyState === BODY_STATES.FULLSCREEN) {
          targetWidth = 0;
          targetOpacity = 0;
        } else {
          switch (sidebarState) {
            case SIDEBAR_STATES.HIDDEN:
              targetWidth = 0
              targetOpacity = 0
              break
            case SIDEBAR_STATES.COLLAPSED:
              targetWidth = 64
              targetOpacity = 1
              break
            case SIDEBAR_STATES.EXPANDED:
              targetWidth = sidebarWidth
              targetOpacity = 1
              break
            case SIDEBAR_STATES.PEEK:
              targetWidth = sidebarWidth * 0.8
              targetOpacity = 0.95
              break
          }
        }

        const tl = gsap.timeline({ ease: "power3.out" })
        
        tl.to(sidebar, {
          width: targetWidth,
          opacity: targetOpacity,
          duration: animationDuration,
        })
        tl.to(handle, {
          left: targetWidth,
          duration: animationDuration,
        }, 0)

      }, [sidebarState, sidebarWidth, bodyState, animationDuration])

      // GSAP animations for body state transitions
      useEffect(() => {
        if (!mainContentRef.current || !sidebarRef.current || !rightPaneRef.current) return

        const ease = "power3.out"
        const isFullscreen = bodyState === BODY_STATES.FULLSCREEN

        const isSidePane = bodyState === BODY_STATES.SIDE_PANE

        // Right pane animation
        gsap.to(rightPaneRef.current, {
          width: rightPaneWidth,
          x: isSidePane ? 0 : rightPaneWidth + 5, // +5 to hide border
          duration: animationDuration,
          ease,
        })

        gsap.to(mainContentRef.current, {
          paddingTop: isFullscreen ? '0rem' : isTopBarVisible ? '5rem' : '0rem', // h-20 is 5rem
          duration: animationDuration,
          ease,
        })

        gsap.to(topBarContainerRef.current, {
          y: (isFullscreen || !isTopBarVisible) ? '-100%' : '0%',
          duration: animationDuration,
          ease,
        })
        
        // Add backdrop for side pane
        const backdrop = document.querySelector('.app-backdrop')
        if (isSidePane) {
          if (!backdrop) {
            const el = document.createElement('div')
            el.className = 'app-backdrop fixed inset-0 bg-black/30 z-[55]'
            appRef.current?.appendChild(el)
            gsap.fromTo(el, { opacity: 0 }, { opacity: 1, duration: animationDuration })
            el.onclick = () => closeSidePane()
          }
        } else {
          if (backdrop) {
            gsap.to(backdrop, { opacity: 0, duration: animationDuration, onComplete: () => backdrop.remove() })
          }
        }
      }, [bodyState, animationDuration, rightPaneWidth, closeSidePane, isTopBarVisible])

      return (
        <div 
          ref={appRef}
          className={cn(
            "relative h-screen w-screen overflow-hidden bg-background transition-colors duration-300",
            isDarkMode && "dark"
          )}
        >
          <div className="flex h-screen overflow-hidden">
            {/* Enhanced Sidebar */}
            <EnhancedSidebar
              ref={sidebarRef}
              onMouseEnter={() => {
                if (autoExpandSidebar && sidebarState === SIDEBAR_STATES.COLLAPSED) {
                  peekSidebar()
                }
              }}
              onMouseLeave={() => {
                if (autoExpandSidebar && sidebarState === SIDEBAR_STATES.PEEK) {
                  setSidebarState(SIDEBAR_STATES.COLLAPSED)
                }
              }}
            />

            {/* Resize Handle */}
            {sidebarState !== SIDEBAR_STATES.HIDDEN && (
              <div
                ref={resizeHandleRef}
                className={cn(
                  "absolute top-0 w-2 h-full bg-transparent hover:bg-primary/20 cursor-col-resize z-50 transition-colors duration-200 group -translate-x-1/2"
                )}
                onMouseDown={(e) => {
                  e.preventDefault()
                  setIsResizing(true)
                }}
              >
                <div className="w-0.5 h-full bg-border group-hover:bg-primary transition-colors duration-200 mx-auto" />
              </div>
            )}

            {/* Main Content Area */}
            <div className="relative flex-1 overflow-hidden bg-background">
              <div ref={topBarContainerRef} className="absolute inset-x-0 top-0 z-30">
                <TopBar
                  onToggleSidebar={toggleSidebar}
                  onToggleFullscreen={toggleFullscreen}
                  onToggleDarkMode={toggleDarkMode}
                />
              </div>
              
              {/* Main Content */}
              <MainContent
                ref={mainContentRef}
                bodyState={bodyState}
                onToggleFullscreen={toggleFullscreen}
              />
            </div>
          </div>
          <RightPane ref={rightPaneRef} />
        </div>
      )
    }
  src/components/WorkspaceSwitcher.tsx: "import * as React from 'react';\nimport { CheckIcon, ChevronsUpDownIcon, Search } from 'lucide-react';\nimport { Avatar, AvatarImage, AvatarFallback } from '@/components/ui/avatar';\nimport { cn } from '@/lib/utils';\nimport {\n\tPopover,\n\tPopoverTrigger,\n\tPopoverContent,\n\ttype PopoverContentProps,\n} from '@/components/ui/popover';\n\n// Generic workspace interface - can be extended\nexport interface Workspace {\n\tid: string;\n\tname: string;\n\t[key: string]: any; // Allow additional properties\n}\n\n// Context for workspace state management\ninterface WorkspaceContextValue<T extends Workspace> {\n\topen: boolean;\n\tsetOpen: (open: boolean) => void;\n\tselectedWorkspace: T | undefined;\n\tworkspaces: T[];\n\tonWorkspaceSelect: (workspace: T) => void;\n\tgetWorkspaceId: (workspace: T) => string;\n\tgetWorkspaceName: (workspace: T) => string;\n}\n\nconst WorkspaceContext = React.createContext<WorkspaceContextValue<any> | null>(\n\tnull,\n);\n\nfunction useWorkspaceContext<T extends Workspace>() {\n\tconst context = React.useContext(\n\t\tWorkspaceContext,\n\t) as WorkspaceContextValue<T> | null;\n\tif (!context) {\n\t\tthrow new Error(\n\t\t\t'Workspace components must be used within WorkspaceProvider',\n\t\t);\n\t}\n\treturn context;\n}\n\n// Main provider component\ninterface WorkspaceProviderProps<T extends Workspace> {\n\tchildren: React.ReactNode;\n\tworkspaces: T[];\n\tselectedWorkspaceId?: string;\n\tonWorkspaceChange?: (workspace: T) => void;\n\topen?: boolean;\n\tonOpenChange?: (open: boolean) => void;\n\tgetWorkspaceId?: (workspace: T) => string;\n\tgetWorkspaceName?: (workspace: T) => string;\n}\n\nfunction WorkspaceProvider<T extends Workspace>({\n\tchildren,\n\tworkspaces,\n\tselectedWorkspaceId,\n\tonWorkspaceChange,\n\topen: controlledOpen,\n\tonOpenChange,\n\tgetWorkspaceId = (workspace) => workspace.id,\n\tgetWorkspaceName = (workspace) => workspace.name,\n}: WorkspaceProviderProps<T>) {\n\tconst [internalOpen, setInternalOpen] = React.useState(false);\n\n\tconst open = controlledOpen ?? internalOpen;\n\tconst setOpen = onOpenChange ?? setInternalOpen;\n\n\tconst selectedWorkspace = React.useMemo(() => {\n\t\tif (!selectedWorkspaceId) return workspaces[0];\n\t\treturn (\n\t\t\tworkspaces.find((ws) => getWorkspaceId(ws) === selectedWorkspaceId) ||\n\t\t\tworkspaces[0]\n\t\t);\n\t}, [workspaces, selectedWorkspaceId, getWorkspaceId]);\n\n\tconst handleWorkspaceSelect = React.useCallback(\n\t\t(workspace: T) => {\n\t\t\tonWorkspaceChange?.(workspace);\n\t\t\tsetOpen(false);\n\t\t},\n\t\t[onWorkspaceChange, setOpen],\n\t);\n\n\tconst value: WorkspaceContextValue<T> = {\n\t\topen,\n\t\tsetOpen,\n\t\tselectedWorkspace,\n\t\tworkspaces,\n\t\tonWorkspaceSelect: handleWorkspaceSelect,\n\t\tgetWorkspaceId,\n\t\tgetWorkspaceName,\n\t};\n\n\treturn (\n\t\t<WorkspaceContext.Provider value={value}>\n\t\t\t<Popover open={open} onOpenChange={setOpen}>\n\t\t\t\t{children}\n\t\t\t</Popover>\n\t\t</WorkspaceContext.Provider>\n\t);\n}\n\n// Trigger component\ninterface WorkspaceTriggerProps extends React.ComponentProps<'button'> {\n\trenderTrigger?: (workspace: Workspace, isOpen: boolean) => React.ReactNode;\n  collapsed?: boolean;\n  avatarClassName?: string;\n}\n\nfunction WorkspaceTrigger({\n\tclassName,\n\trenderTrigger,\n  collapsed = false,\n  avatarClassName,\n\t...props\n}: WorkspaceTriggerProps) {\n\tconst { open, selectedWorkspace, getWorkspaceName } = useWorkspaceContext();\n\n\tif (!selectedWorkspace) return null;\n\n\tif (renderTrigger) {\n\t\treturn (\n\t\t\t<PopoverTrigger asChild>\n\t\t\t\t<button className={className} {...props}>\n\t\t\t\t\t{renderTrigger(selectedWorkspace, open)}\n\t\t\t\t</button>\n\t\t\t</PopoverTrigger>\n\t\t);\n\t}\n\n\treturn (\n\t\t<PopoverTrigger asChild>\n\t\t\t<button\n\t\t\t\tdata-state={open ? 'open' : 'closed'}\n\t\t\t\tclassName={cn(\n\t\t\t\t\t'flex w-full items-center justify-between text-sm',\n\t\t\t\t\t'focus:ring-ring focus:ring-2 focus:ring-offset-2 focus:outline-none',\n\t\t\t\t\tclassName,\n\t\t\t\t)}\n\t\t\t\t{...props}\n\t\t\t>\n\t\t\t\t<div className={cn(\"flex items-center gap-3\", collapsed ? \"w-full justify-center\" : \"min-w-0 flex-1\")}>\n\t\t\t\t\t<Avatar className={cn(avatarClassName)}>\n\t\t\t\t\t\t<AvatarImage\n\t\t\t\t\t\t\tsrc={(selectedWorkspace as any).logo}\n\t\t\t\t\t\t\talt={getWorkspaceName(selectedWorkspace)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<AvatarFallback className=\"text-xs\">\n\t\t\t\t\t\t\t{getWorkspaceName(selectedWorkspace).charAt(0).toUpperCase()}\n\t\t\t\t\t\t</AvatarFallback>\n\t\t\t\t\t</Avatar>\n\t\t\t\t\t{!collapsed && (\n\t\t\t\t\t\t<div className=\"flex min-w-0 flex-1 flex-col items-start\">\n\t\t\t\t\t\t\t<span className=\"truncate font-medium\">{getWorkspaceName(selectedWorkspace)}</span>\n\t\t\t\t\t\t\t<span className=\"text-muted-foreground truncate text-xs\">{(selectedWorkspace as any).plan}</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\t\t\t\t{!collapsed && <ChevronsUpDownIcon className=\"h-4 w-4 shrink-0 opacity-50\" />}\n\t\t\t</button>\n\t\t</PopoverTrigger>\n\t);\n}\n\n// Content component\ninterface WorkspaceContentProps\n\textends PopoverContentProps {\n\trenderWorkspace?: (\n\t\tworkspace: Workspace,\n\t\tisSelected: boolean,\n\t) => React.ReactNode;\n\ttitle?: string;\n\tsearchable?: boolean;\n\tonSearch?: (query: string) => void;\n}\n\nfunction WorkspaceContent({\n\tclassName,\n\tchildren,\n\trenderWorkspace,\n\ttitle = 'Workspaces',\n\tsearchable = false,\n\tonSearch,\n\talign,\n\t...props\n}: WorkspaceContentProps) {\n\tconst {\n\t\tworkspaces,\n\t\tselectedWorkspace,\n\t\tonWorkspaceSelect,\n\t\tgetWorkspaceId,\n\t\tgetWorkspaceName,\n\t} = useWorkspaceContext();\n\n\tconst [searchQuery, setSearchQuery] = React.useState('');\n\n\tconst filteredWorkspaces = React.useMemo(() => {\n\t\tif (!searchQuery) return workspaces;\n\t\treturn workspaces.filter((ws) =>\n\t\t\tgetWorkspaceName(ws).toLowerCase().includes(searchQuery.toLowerCase()),\n\t\t);\n\t}, [workspaces, searchQuery, getWorkspaceName]);\n\n\tReact.useEffect(() => {\n\t\tonSearch?.(searchQuery);\n\t}, [searchQuery, onSearch]);\n\n\tconst defaultRenderWorkspace = (\n\t\tworkspace: Workspace,\n\t\tisSelected: boolean,\n\t) => (\n\t\t<div className=\"flex min-w-0 flex-1 items-center gap-2\">\n\t\t\t<Avatar className=\"h-6 w-6\">\n\t\t\t\t<AvatarImage\n\t\t\t\t\tsrc={(workspace as any).logo}\n\t\t\t\t\talt={getWorkspaceName(workspace)}\n\t\t\t\t/>\n\t\t\t\t<AvatarFallback className=\"text-xs\">\n\t\t\t\t\t{getWorkspaceName(workspace).charAt(0).toUpperCase()}\n\t\t\t\t</AvatarFallback>\n\t\t\t</Avatar>\n\t\t\t<div className=\"flex min-w-0 flex-1 flex-col items-start\">\n\t\t\t\t<span className=\"truncate text-sm\">{getWorkspaceName(workspace)}</span>\n\t\t\t\t{(workspace as any).plan && (\n\t\t\t\t\t<span className=\"text-muted-foreground text-xs\">\n\t\t\t\t\t\t{(workspace as any).plan}\n\t\t\t\t\t</span>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t\t{isSelected && <CheckIcon className=\"ml-auto h-4 w-4\" />}\n\t\t</div>\n\t);\n\n\treturn (\n\t\t<PopoverContent\n\t\t\tclassName={cn('p-0', className)}\n\t\t\talign={align || 'start'}\n\t\t\t{...props}\n\t\t>\n\t\t\t<div className=\"border-b px-4 py-3\">\n\t\t\t\t<h3 className=\"text-sm font-semibold text-foreground\">{title}</h3>\n\t\t\t</div>\n\n\t\t\t{searchable && (\n\t\t\t\t<div className=\"border-b p-2\">\n\t\t\t\t\t<div className=\"relative\">\n\t\t\t\t\t\t<Search className=\"absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground\" />\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\tplaceholder=\"Search workspaces...\"\n\t\t\t\t\t\t\tvalue={searchQuery}\n\t\t\t\t\t\t\tonChange={(e) => setSearchQuery(e.target.value)}\n\t\t\t\t\t\t\tclassName=\"h-9 w-full rounded-md bg-transparent pl-9 text-sm placeholder:text-muted-foreground focus:bg-accent focus:outline-none\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t)}\n\n\t\t\t<div className=\"max-h-[300px] overflow-y-auto\">\n\t\t\t\t{filteredWorkspaces.length === 0 ? (\n\t\t\t\t\t<div className=\"text-muted-foreground px-3 py-2 text-center text-sm\">\n\t\t\t\t\t\tNo workspaces found\n\t\t\t\t\t</div>\n\t\t\t\t) : (\n\t\t\t\t\t<div className=\"space-y-1 p-2\">\n\t\t\t\t\t\t{filteredWorkspaces.map((workspace) => {\n\t\t\t\t\t\t\tconst isSelected =\n\t\t\t\t\t\t\t\tselectedWorkspace &&\n\t\t\t\t\t\t\t\tgetWorkspaceId(selectedWorkspace) === getWorkspaceId(workspace);\n\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\tkey={getWorkspaceId(workspace)}\n\t\t\t\t\t\t\t\t\tonClick={() => onWorkspaceSelect(workspace)}\n\t\t\t\t\t\t\t\t\tclassName={cn(\n\t\t\t\t\t\t\t\t\t\t'flex w-full items-center gap-2 rounded-md px-2 py-1.5 text-left text-sm',\n\t\t\t\t\t\t\t\t\t\t'hover:bg-accent hover:text-accent-foreground',\n\t\t\t\t\t\t\t\t\t\t'focus:outline-none',\n\t\t\t\t\t\t\t\t\t\tisSelected && 'bg-accent text-accent-foreground',\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{renderWorkspace\n\t\t\t\t\t\t\t\t\t\t? renderWorkspace(workspace, !!isSelected)\n\t\t\t\t\t\t\t\t\t\t: defaultRenderWorkspace(workspace, !!isSelected)}\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t})}\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t</div>\n\n\t\t\t{children && (\n\t\t\t\t<>\n\t\t\t\t\t<div className=\"border-t\" />\n\t\t\t\t\t<div className=\"p-1\">{children}</div>\n\t\t\t\t</>\n\t\t\t)}\n\t\t</PopoverContent>\n\t);\n}\n\nexport { WorkspaceProvider as Workspaces, WorkspaceTrigger, WorkspaceContent };"
  src/store/appStore.ts: >-
    import { create } from 'zustand'

    import { persist } from 'zustand/middleware'

    import { SIDEBAR_STATES, BODY_STATES, type SidebarState, type BodyState }
    from '@/lib/utils'


    export type ActivePage = 'dashboard' | 'settings' | 'toaster';


    interface AppState {
      // UI States
      sidebarState: SidebarState
      bodyState: BodyState
      isDarkMode: boolean
      sidePaneContent: 'details' | 'settings' | 'main' | 'toaster'
      activePage: ActivePage
      sidebarWidth: number
      rightPaneWidth: number
      isResizing: boolean
      isResizingRightPane: boolean
      isTopBarVisible: boolean
      searchTerm: string
      
      // User Preferences
      autoExpandSidebar: boolean
      reducedMotion: boolean
      compactMode: boolean
      primaryColor: string
      
      // Actions
      setSidebarState: (state: SidebarState) => void
      setBodyState: (state: BodyState) => void
      toggleDarkMode: () => void
      setActivePage: (page: ActivePage) => void
      setSidebarWidth: (width: number) => void
      setRightPaneWidth: (width: number) => void
      setIsResizing: (resizing: boolean) => void
      setIsResizingRightPane: (resizing: boolean) => void
      setTopBarVisible: (visible: boolean) => void
      setAutoExpandSidebar: (auto: boolean) => void
      setReducedMotion: (reduced: boolean) => void
      setCompactMode: (compact: boolean) => void
      setPrimaryColor: (color: string) => void
      setSearchTerm: (term: string) => void
      
      // Composite Actions
      toggleSidebar: () => void
      hideSidebar: () => void
      showSidebar: () => void
      peekSidebar: () => void
      toggleFullscreen: () => void
      openSidePane: (content: 'details' | 'settings' | 'main' | 'toaster') => void
      closeSidePane: () => void
      resetToDefaults: () => void
    }


    const defaultState = {
      sidebarState: SIDEBAR_STATES.EXPANDED as SidebarState,
      bodyState: BODY_STATES.NORMAL as BodyState,
      sidePaneContent: 'details' as const,
      activePage: 'dashboard' as ActivePage,
      isDarkMode: false,
      sidebarWidth: 280,
      rightPaneWidth: typeof window !== 'undefined' ? Math.max(300, Math.round(window.innerWidth * 0.6)) : 400,
      isResizing: false,
      isResizingRightPane: false,
      isTopBarVisible: true,
      autoExpandSidebar: true,
      reducedMotion: false,
      compactMode: false,
      primaryColor: '220 84% 60%',
      searchTerm: '',
    }


    export const useAppStore = create<AppState>()(
      persist(
        (set, get) => ({
          ...defaultState,
          
          // Basic setters
          sidePaneContent: 'details',
          setSidebarState: (state) => set({ sidebarState: state }),
          setBodyState: (state) => set({ bodyState: state }),
          setActivePage: (page) => set({ activePage: page }),
          toggleDarkMode: () => {
            const newMode = !get().isDarkMode
            set({ isDarkMode: newMode })
            document.documentElement.classList.toggle('dark', newMode)
          },
          setSidebarWidth: (width) => set({ sidebarWidth: Math.max(200, Math.min(500, width)) }),
          setRightPaneWidth: (width) => set({ rightPaneWidth: Math.max(300, Math.min(window.innerWidth * 0.8, width)) }),
          setIsResizing: (resizing) => set({ isResizing: resizing }),
          setIsResizingRightPane: (resizing) => set({ isResizingRightPane: resizing }),
          setTopBarVisible: (visible) => set({ isTopBarVisible: visible }),
          setAutoExpandSidebar: (auto) => set({ autoExpandSidebar: auto }),
          setReducedMotion: (reduced) => set({ reducedMotion: reduced }),
          setCompactMode: (compact) => set({ compactMode: compact }),
          setPrimaryColor: (color) => set({ primaryColor: color }),
          setSearchTerm: (term) => set({ searchTerm: term }),
          
          // Composite actions
          toggleSidebar: () => {
            const current = get().sidebarState
            if (current === SIDEBAR_STATES.HIDDEN) {
              set({ sidebarState: SIDEBAR_STATES.COLLAPSED })
            } else if (current === SIDEBAR_STATES.COLLAPSED) {
              set({ sidebarState: SIDEBAR_STATES.EXPANDED })
            } else if (current === SIDEBAR_STATES.EXPANDED) {
              set({ sidebarState: SIDEBAR_STATES.COLLAPSED })
            }
          },
          
          hideSidebar: () => set({ sidebarState: SIDEBAR_STATES.HIDDEN }),
          showSidebar: () => set({ sidebarState: SIDEBAR_STATES.EXPANDED }),
          peekSidebar: () => set({ sidebarState: SIDEBAR_STATES.PEEK }),
          
          toggleFullscreen: () => {
            const current = get().bodyState
            set({ 
              bodyState: current === BODY_STATES.FULLSCREEN ? BODY_STATES.NORMAL : BODY_STATES.FULLSCREEN 
            })
          },
          
          openSidePane: (content: 'details' | 'settings' | 'main' | 'toaster') => {
            const { bodyState, sidePaneContent } = get()
            if (bodyState === BODY_STATES.SIDE_PANE && sidePaneContent === content) {
              // If it's open with same content, close it.
              set({ bodyState: BODY_STATES.NORMAL });
            } else {
              // If closed, or different content, open with new content.
              set({ bodyState: BODY_STATES.SIDE_PANE, sidePaneContent: content });
            }
          },
          closeSidePane: () => {
            set({ bodyState: BODY_STATES.NORMAL })
          },
          
          resetToDefaults: () => {
            set(defaultState)
            // Also reset dark mode class on html element
            if (defaultState.isDarkMode) {
              document.documentElement.classList.add('dark')
            } else {
              document.documentElement.classList.remove('dark')
            }
          },
        }),
        {
          name: 'app-preferences',
          partialize: (state) => ({
            sidebarState: state.sidebarState,
            bodyState: state.bodyState,
            activePage: state.activePage,
            sidePaneContent: state.sidePaneContent,
            isDarkMode: state.isDarkMode,
            sidebarWidth: state.sidebarWidth,
            rightPaneWidth: state.rightPaneWidth,
            autoExpandSidebar: state.autoExpandSidebar,
            reducedMotion: state.reducedMotion,
            compactMode: state.compactMode,
            primaryColor: state.primaryColor,
            // searchTerm is not persisted
          }),
        }
      )
    )


    // Initialize dark mode on load

    if (typeof window !== 'undefined') {
      const stored = localStorage.getItem('app-preferences')
      if (stored) {
        const parsed = JSON.parse(stored)
        if (parsed.state?.isDarkMode) {
          document.documentElement.classList.add('dark')
        }
      }
    }
approved: true
linesAdded: null
linesRemoved: null
linesDifference: null
gitCommittedAt: '2025-10-10T22:14:10.696Z'
status: committed
id: 69
