uuid: d6d00e00-2e4d-4861-a0a0-07e86e7a2503
projectId: amazing-app-shell
createdAt: '2025-10-11T07:26:40.298Z'
gitCommitMsg: >-
  feat: Prepare app shell for library distribution and add configuration

  This commit implements several key changes to make the Amazing App Shell
  consumable as a distributable library:

  - Configures Vite for library mode build output. - Updates package.json to
  correctly define peer dependencies (React,
    Tailwind CSS).
  - Enhances AppShellProvider to accept `appName` and `appLogo` props,
    allowing for easy branding and configuration.
  - Refactors EnhancedSidebar to use the new global configuration from
    context.
  - Updates the main App.tsx to demonstrate the new configuration pattern. -
  Improves the README with updated installation instructions and usage
    examples.
promptSummary: >-
  Make the app shell ready for consumption as a library and centralize global
  configurations like the logo and app name.
reasoning:
  - >-
    Of course. To make your app shell ready for consumption as a library and
    centralize its configuration, I'll perform the following actions:
  - >-
    1.  **Configure for Library Build**: I will update `vite.config.ts` to build
    the project in library mode and modify `package.json` to correctly list peer
    dependencies like `react` and `tailwindcss`.
  - >-
    2.  **Centralize Configuration**: I will enhance `AppShellProvider` to
    accept `appName` and `appLogo` props. This will allow any consumer of the
    library to easily brand the shell.
  - >-
    3.  **Update Components**: The `EnhancedSidebar` will be updated to consume
    the new `appName` and `appLogo` from the context, removing the hardcoded
    values.
  - >-
    4.  **Update Demo App**: I will update `App.tsx` to pass the new
    configuration props, demonstrating how to use them.
  - >-
    5.  **Documentation**: Finally, I'll update the `README.md` with the correct
    installation instructions and usage examples for the new configuration
    options.
  - 'Here are the changes:'
  - '### 1. Update `package.json`'
  - >-
    I'll adjust dependencies to prepare the package for publishing, moving
    `react`, `react-dom`, and `tailwindcss` to `peerDependencies`.
  - '### 2. Configure Vite for Library Mode'
  - >-
    I'll replace the existing Vite configuration to enable library mode, which
    is essential for creating a distributable package.
  - '### 3. Update App Shell Context'
  - >-
    I will add `appName` and `appLogo` to the `AppShellProvider` so they can be
    configured globally.
  - '### 4. Update the Sidebar Component'
  - >-
    The `EnhancedSidebar` will now use the globally configured name and logo,
    with a fallback to the original design.
  - '### 5. Update the Demo Application'
  - >-
    I'll pass the `appName` and `appLogo` to `AppShellProvider` in the main
    `App.tsx` file to show how it works.
  - '### 6. Update Documentation'
  - >-
    Finally, I'll update `README.md` to reflect the new peer dependencies and
    show how to configure the app shell.
  - bash
  - >-
    -npm install amazing-app-shell react react-dom gsap lucide-react
    tailwind-merge class-variance-authority clsx
  - >-
    +npm install amazing-app-shell react react-dom tailwindcss gsap lucide-react
    tailwind-merge class-variance-authority clsx tailwindcss-animate
  - bash
  - >-
    -yarn add amazing-app-shell react react-dom gsap lucide-react tailwind-merge
    class-variance-authority clsx
  - >-
    +yarn add amazing-app-shell react react-dom tailwindcss gsap lucide-react
    tailwind-merge class-variance-authority clsx tailwindcss-animate
  - javascript
  - /** @type {import('tailwindcss').Config} */
  - '-module.tole = {'
  - +module.exports = {
  - // ... your other config
  - 'content: ['
  - '''./src/**/*.{js,ts,jsx,tsx}'','
  - // Add the path to the library's components
  - '''./node_modules/amazing-app-shell/dist/**/*.{js,ts,jsx,tsx}'','
  - '],'
  - '-  // ...'
  - '+  theme: {'
  - +    // ...
  - +  },
  - '+  plugins: [require(''tailwindcss-animate'')],'
  - '};'
  - tsx
  - import React from 'react';
  - import { AppShellProvider } from 'amazing-app-shell';
  - >-
    import { ToasterProvider } from 'amazing-app-shell'; // Re-exported for
    convenience
  - +import { Rocket } from 'lucide-react';
  - import { YourAppComponent } from './YourAppComponent';
  - function App() {
  - +  const myLogo = (
  - +    <div className="p-2 bg-primary/20 rounded-lg">
  - +      <Rocket className="w-5 h-5 text-primary" />
  - +    </div>
  - +  );
  - +
  - return (
  - '-    <AppShellProvider>'
  - +    <AppShellProvider appName="My Awesome App" appLogo={myLogo}>
  - <ToasterProvider>
  - <YourAppComponent />
  - </ToasterProvider>
  - '```'
  - >-
    These changes make the app shell significantly more robust, configurable,
    and ready to be packaged and distributed as a standalone library.
operations:
  - type: write
    path: package.json
    content: |
      <<<<<<< SEARCH
        "version": "1.0.0",
      =======
        "version": "1.0.1",
      >>>>>>> REPLACE
      <<<<<<< SEARCH
        "dependencies": {
          "@iconify/react": "^4.1.1",
          "@radix-ui/react-avatar": "^1.0.4",
          "@radix-ui/react-dialog": "^1.0.5",
          "@radix-ui/react-dropdown-menu": "^2.0.6",
          "@radix-ui/react-label": "^2.1.7",
          "@radix-ui/react-popover": "^1.0.7",
          "@radix-ui/react-slot": "^1.0.2",
          "@radix-ui/react-tabs": "^1.0.4",
          "class-variance-authority": "^0.7.0",
          "clsx": "^2.0.0",
          "cmdk": "^0.2.0",
          "gsap": "^3.12.2",
          "lucide-react": "^0.294.0",
          "react": "^18.2.0",
          "react-dom": "^18.2.0",
          "sonner": "^1.2.4",
          "tailwind-merge": "^2.0.0",
          "zustand": "^4.5.7"
        },
      =======
        "dependencies": {
          "@iconify/react": "^4.1.1",
          "@radix-ui/react-avatar": "^1.0.4",
          "@radix-ui/react-dialog": "^1.0.5",
          "@radix-ui/react-dropdown-menu": "^2.0.6",
          "@radix-ui/react-label": "^2.1.7",
          "@radix-ui/react-popover": "^1.0.7",
          "@radix-ui/react-slot": "^1.0.2",
          "@radix-ui/react-tabs": "^1.0.4",
          "class-variance-authority": "^0.7.0",
          "clsx": "^2.0.0",
          "cmdk": "^0.2.0",
          "gsap": "^3.12.2",
          "lucide-react": "^0.294.0",
          "sonner": "^1.2.4",
          "tailwind-merge": "^2.0.0",
          "zustand": "^4.5.7"
        },
        "peerDependencies": {
          "react": "^18.2.0",
          "react-dom": "^18.2.0",
          "tailwindcss": "^3.3.5"
        },
      >>>>>>> REPLACE
    patchStrategy: search-replace
  - type: write
    path: vite.config.ts
    content: |-
      import { defineConfig } from 'vite'
      import react from '@vitejs/plugin-react'
      import { fileURLToPath, URL } from 'url'
      import { resolve } from 'path'

      // https://vitejs.dev/config/
      export default defineConfig({
        plugins: [react()],
        resolve: {
          alias: {
            "@": fileURLToPath(new URL('./src', import.meta.url)),
          },
        },
        build: {
          lib: {
            entry: resolve(__dirname, 'src/index.ts'),
            name: 'AmazingAppShell',
            fileName: (format) => `amazing-app-shell.${format}.js`,
          },
          rollupOptions: {
            // make sure to externalize deps that shouldn't be bundled
            // into your library
            external: ['react', 'react-dom', 'tailwindcss'],
            output: {
              // Provide global variables to use in the UMD build
              // for externalized deps
              globals: {
                react: 'React',
                'react-dom': 'ReactDOM',
                tailwindcss: 'tailwindcss',
              },
            },
          },
        },
      })
    patchStrategy: replace
  - type: write
    path: src/context/AppShellContext.tsx
    content: >+
      --- src/context/AppShellContext.tsx

      +++ src/context/AppShellContext.tsx

      @@ -4,6 +4,7 @@
         useMemo,
         useCallback,
         type ReactNode,
      +  type ReactElement,
         type Dispatch,
       } from 'react';
       import { SIDEBAR_STATES, BODY_STATES, type SidebarState, type BodyState } from '@/lib/utils';
      @@ -23,6 +24,8 @@
         reducedMotion: boolean;
         compactMode: boolean;
         primaryColor: string;
      +  appName?: string;

      +  appLogo?: ReactElement;
       }
       
       type AppShellAction =
      @@ -52,6 +55,8 @@
         reducedMotion: false,
         compactMode: false,
         primaryColor: '220 84% 60%',
      +  appName: 'Amazing App',

      +  appLogo: undefined,
       };
       
       function appShellReducer(state: AppShellState, action: AppShellAction): AppShellState {
      @@ -69,7 +74,12 @@
           case 'SET_REDUCED_MOTION': return { ...state, reducedMotion: action.payload };
           case 'SET_COMPACT_MODE': return { ...state, compactMode: action.payload };
           case 'SET_PRIMARY_COLOR': return { ...state, primaryColor: action.payload };
      -    case 'RESET_TO_DEFAULTS': return defaultState;

      +    case 'RESET_TO_DEFAULTS':

      +      return {

      +        ...defaultState,

      +        appName: state.appName, // Preserve props passed to provider

      +        appLogo: state.appLogo,   // Preserve props passed to provider

      +      };
           default: return state;
         }
       }
      @@ -89,8 +99,17 @@
       
       const AppShellContext = createContext<AppShellContextValue | null>(null);
       
      -export function AppShellProvider({ children }: { children: ReactNode }) {

      -  const [state, dispatch] = useReducer(appShellReducer, defaultState);

      +interface AppShellProviderProps {

      +  children: ReactNode;

      +  appName?: string;

      +  appLogo?: ReactElement;

      +}

      +

      +export function AppShellProvider({ children, appName, appLogo }:
      AppShellProviderProps) {

      +  const [state, dispatch] = useReducer(appShellReducer, {

      +    ...defaultState,

      +    ...(appName && { appName }),

      +    ...(appLogo && { appLogo }),

      +  });
       
         // Side effect for primary color
         useEffect(() => {

    patchStrategy: standard-diff
  - type: write
    path: src/components/layout/EnhancedSidebar.tsx
    content: >+
      --- src/components/layout/EnhancedSidebar.tsx

      +++ src/components/layout/EnhancedSidebar.tsx

      @@ -64,12 +64,12 @@
       
       export const EnhancedSidebar = React.forwardRef<HTMLDivElement, SidebarProps>(
         ({ onMouseEnter, onMouseLeave }, ref) => {
      -    const { sidebarWidth, compactMode } = useAppShell();

      +    const { sidebarWidth, compactMode, appName, appLogo } =
      useAppShell();
           const [selectedWorkspace, setSelectedWorkspace] = React.useState(mockWorkspaces[0]);
       
           return (
             <Sidebar
               ref={ref}
               style={{ width: sidebarWidth }}
               onMouseEnter={onMouseEnter}
               onMouseLeave={onMouseLeave}
             >
               <SidebarContent>
                 <SidebarHeader>
      -            <div className="p-2 bg-primary/20 rounded-lg">

      -              <Rocket className="w-5 h-5 text-primary" />

      -            </div>

      -            <SidebarTitle>Amazing App</SidebarTitle>

      +            {appLogo || (

      +              <div className="p-2 bg-primary/20 rounded-lg">

      +                <Rocket className="w-5 h-5 text-primary" />

      +              </div>

      +            )}

      +            <SidebarTitle>{appName}</SidebarTitle>
                 </SidebarHeader>
       
                 <SidebarBody>

    patchStrategy: standard-diff
  - type: write
    path: src/App.tsx
    content: >
      --- src/App.tsx

      +++ src/App.tsx

      @@ -21,7 +21,7 @@
       import LoginPage from './pages/Login'
       
       // Import icons
      -import { LayoutDashboard, Settings, Component, Bell, SlidersHorizontal,
      ChevronsLeftRight, Search, Filter, Plus, PanelRight, ChevronRight } from
      'lucide-react'

      +import { LayoutDashboard, Settings, Component, Bell, SlidersHorizontal,
      ChevronsLeftRight, Search, Filter, Plus, PanelRight, ChevronRight, Rocket
      } from 'lucide-react'
       import { BODY_STATES } from './lib/utils'
       import { cn } from './lib/utils'
       
      @@ -194,7 +194,14 @@
       
         return (
           <div className="h-screen w-screen overflow-hidden bg-background">
      -      <AppShellProvider>

      +      <AppShellProvider

      +        appName="Amazing App"

      +        appLogo={

      +          <div className="p-2 bg-primary/20 rounded-lg">

      +            <Rocket className="w-5 h-5 text-primary" />

      +          </div>

      +        }

      +      >
               <ComposedApp />
             </AppShellProvider>
           </div>
    patchStrategy: standard-diff
  - type: write
    path: README.md
    content: |-
      --- README.md
      +++ README.md
      @@ -29,11 +29,11 @@
       ## Installation
       
       Install the package and its peer dependencies using your preferred package manager.
      -
       
    patchStrategy: standard-diff
  - type: write
    path: or
    content: |2-
       
       
    patchStrategy: replace
  - type: write
    path: '## Getting Started'
    content: |-
      @@ -43,15 +43,20 @@
       
       ### 1. Configure Tailwind CSS
       
       You need to configure Tailwind CSS to correctly process the styles from the library.
       
       **`tailwind.config.js`**
       
       
    patchStrategy: replace
  - type: write
    path: '@@ -71,13 +76,21 @@'
    content: |2-
       
       **`App.tsx`**
       
       
    patchStrategy: replace
snapshot:
  or: null
  '## Getting Started': null
  '@@ -71,13 +76,21 @@': null
  package.json: |
    {
      "name": "amazing-app-shell",
      "private": false,
      "version": "1.0.0",
      "type": "module",
      "files": [
        "dist"
      ],
      "main": "./dist/amazing-app-shell.umd.js",
      "module": "./dist/amazing-app-shell.es.js",
      "types": "./dist/index.d.ts",
      "exports": {
        ".": {
          "import": "./dist/amazing-app-shell.es.js",
          "require": "./dist/amazing-app-shell.umd.js"
        },
        "./dist/style.css": "./dist/style.css"
      },
      "scripts": {
        "dev": "vite",
        "build": "tsc && vite build",
        "lint": "eslint . --ext ts,tsx --report-unused-disable-directives --max-warnings 0",
        "preview": "vite preview"
      },
      "dependencies": {
        "@iconify/react": "^4.1.1",
        "@radix-ui/react-avatar": "^1.0.4",
        "@radix-ui/react-dialog": "^1.0.5",
        "@radix-ui/react-dropdown-menu": "^2.0.6",
        "@radix-ui/react-label": "^2.1.7",
        "@radix-ui/react-popover": "^1.0.7",
        "@radix-ui/react-slot": "^1.0.2",
        "@radix-ui/react-tabs": "^1.0.4",
        "class-variance-authority": "^0.7.0",
        "clsx": "^2.0.0",
        "cmdk": "^0.2.0",
        "gsap": "^3.12.2",
        "lucide-react": "^0.294.0",
        "react": "^18.2.0",
        "react-dom": "^18.2.0",
        "sonner": "^1.2.4",
        "tailwind-merge": "^2.0.0",
        "zustand": "^4.5.7"
      },
      "devDependencies": {
        "@types/node": "^20.10.0",
        "@types/react": "^18.2.37",
        "@types/react-dom": "^18.2.15",
        "@typescript-eslint/eslint-plugin": "^6.10.0",
        "@typescript-eslint/parser": "^6.10.0",
        "@vitejs/plugin-react": "^4.1.1",
        "autoprefixer": "^10.4.16",
        "eslint": "^8.53.0",
        "eslint-plugin-react-hooks": "^4.6.0",
        "eslint-plugin-react-refresh": "^0.4.4",
        "postcss": "^8.4.31",
        "tailwindcss": "^3.3.5",
        "tailwindcss-animate": "^1.0.7",
        "typescript": "^5.2.2",
        "vite": "^4.5.0"
      }
    }
  src/context/AppShellContext.tsx: >-
    import {
      createContext,
      useContext,
      useReducer,
      useEffect,
      useMemo,
      useCallback,
      type ReactNode,
      type Dispatch,
    } from 'react';

    import { SIDEBAR_STATES, BODY_STATES, type SidebarState, type BodyState }
    from '@/lib/utils';


    // --- State and Action Types ---


    interface AppShellState {
      sidebarState: SidebarState;
      bodyState: BodyState;
      sidePaneContent: 'details' | 'settings' | 'main' | 'toaster' | 'notifications';
      sidebarWidth: number;
      rightPaneWidth: number;
      isResizing: boolean;
      isResizingRightPane: boolean;
      isTopBarVisible: boolean;
      autoExpandSidebar: boolean;
      reducedMotion: boolean;
      compactMode: boolean;
      primaryColor: string;
    }


    type AppShellAction =
      | { type: 'SET_SIDEBAR_STATE'; payload: SidebarState }
      | { type: 'SET_BODY_STATE'; payload: BodyState }
      | { type: 'SET_SIDE_PANE_CONTENT'; payload: AppShellState['sidePaneContent'] }
      | { type: 'SET_SIDEBAR_WIDTH'; payload: number }
      | { type: 'SET_RIGHT_PANE_WIDTH'; payload: number }
      | { type: 'SET_IS_RESIZING'; payload: boolean }
      | { type: 'SET_IS_RESIZING_RIGHT_PANE'; payload: boolean }
      | { type: 'SET_TOP_BAR_VISIBLE'; payload: boolean }
      | { type: 'SET_AUTO_EXPAND_SIDEBAR'; payload: boolean }
      | { type: 'SET_REDUCED_MOTION'; payload: boolean }
      | { type: 'SET_COMPACT_MODE'; payload: boolean }
      | { type: 'SET_PRIMARY_COLOR'; payload: string }
      | { type: 'RESET_TO_DEFAULTS' };

    // --- Reducer ---


    const defaultState: AppShellState = {
      sidebarState: SIDEBAR_STATES.EXPANDED,
      bodyState: BODY_STATES.NORMAL,
      sidePaneContent: 'details',
      sidebarWidth: 280,
      rightPaneWidth: typeof window !== 'undefined' ? Math.max(300, Math.round(window.innerWidth * 0.6)) : 400,
      isResizing: false,
      isResizingRightPane: false,
      isTopBarVisible: true,
      autoExpandSidebar: true,
      reducedMotion: false,
      compactMode: false,
      primaryColor: '220 84% 60%',
    };


    function appShellReducer(state: AppShellState, action: AppShellAction):
    AppShellState {
      switch (action.type) {
        case 'SET_SIDEBAR_STATE': return { ...state, sidebarState: action.payload };
        case 'SET_BODY_STATE': return { ...state, bodyState: action.payload };
        case 'SET_SIDE_PANE_CONTENT': return { ...state, sidePaneContent: action.payload };
        case 'SET_SIDEBAR_WIDTH': return { ...state, sidebarWidth: Math.max(200, Math.min(500, action.payload)) };
        case 'SET_RIGHT_PANE_WIDTH': return { ...state, rightPaneWidth: Math.max(300, Math.min(window.innerWidth * 0.8, action.payload)) };
        case 'SET_IS_RESIZING': return { ...state, isResizing: action.payload };
        case 'SET_IS_RESIZING_RIGHT_PANE': return { ...state, isResizingRightPane: action.payload };
        case 'SET_TOP_BAR_VISIBLE': return { ...state, isTopBarVisible: action.payload };
        case 'SET_AUTO_EXPAND_SIDEBAR': return { ...state, autoExpandSidebar: action.payload };
        case 'SET_REDUCED_MOTION': return { ...state, reducedMotion: action.payload };
        case 'SET_COMPACT_MODE': return { ...state, compactMode: action.payload };
        case 'SET_PRIMARY_COLOR': return { ...state, primaryColor: action.payload };
        case 'RESET_TO_DEFAULTS': return defaultState;
        default: return state;
      }
    }


    // --- Context and Provider ---


    interface AppShellContextValue extends AppShellState {
      dispatch: Dispatch<AppShellAction>;
      // Composite actions for convenience
      toggleSidebar: () => void;
      hideSidebar: () => void;
      showSidebar: () => void;
      peekSidebar: () => void;
      toggleFullscreen: () => void;
      openSidePane: (content: AppShellState['sidePaneContent']) => void;
      closeSidePane: () => void;
      resetToDefaults: () => void;
    }


    const AppShellContext = createContext<AppShellContextValue | null>(null);


    export function AppShellProvider({ children }: { children: ReactNode }) {
      const [state, dispatch] = useReducer(appShellReducer, defaultState);

      // Side effect for primary color
      useEffect(() => {
        document.documentElement.style.setProperty('--primary-hsl', state.primaryColor);
      }, [state.primaryColor]);

      // Memoized composite actions using useCallback for stable function identities
      const toggleSidebar = useCallback(() => {
        const current = state.sidebarState;
        if (current === SIDEBAR_STATES.HIDDEN) dispatch({ type: 'SET_SIDEBAR_STATE', payload: SIDEBAR_STATES.COLLAPSED });
        else if (current === SIDEBAR_STATES.COLLAPSED) dispatch({ type: 'SET_SIDEBAR_STATE', payload: SIDEBAR_STATES.EXPANDED });
        else if (current === SIDEBAR_STATES.EXPANDED) dispatch({ type: 'SET_SIDEBAR_STATE', payload: SIDEBAR_STATES.COLLAPSED });
      }, [state.sidebarState]);

      const hideSidebar = useCallback(() => dispatch({ type: 'SET_SIDEBAR_STATE', payload: SIDEBAR_STATES.HIDDEN }), []);
      const showSidebar = useCallback(() => dispatch({ type: 'SET_SIDEBAR_STATE', payload: SIDEBAR_STATES.EXPANDED }), []);
      const peekSidebar = useCallback(() => dispatch({ type: 'SET_SIDEBAR_STATE', payload: SIDEBAR_STATES.PEEK }), []);
      
      const toggleFullscreen = useCallback(() => {
        const current = state.bodyState;
        dispatch({ type: 'SET_BODY_STATE', payload: current === BODY_STATES.FULLSCREEN ? BODY_STATES.NORMAL : BODY_STATES.FULLSCREEN });
      }, [state.bodyState]);

      const openSidePane = useCallback((content: AppShellState['sidePaneContent']) => {
        if (state.bodyState === BODY_STATES.SIDE_PANE && state.sidePaneContent === content) {
          // If it's open with same content, close it.
          dispatch({ type: 'SET_BODY_STATE', payload: BODY_STATES.NORMAL });
        } else {
          // If closed, or different content, open with new content.
          dispatch({ type: 'SET_SIDE_PANE_CONTENT', payload: content });
          dispatch({ type: 'SET_BODY_STATE', payload: BODY_STATES.SIDE_PANE });
        }
      }, [state.bodyState, state.sidePaneContent]);

      const closeSidePane = useCallback(() => dispatch({ type: 'SET_BODY_STATE', payload: BODY_STATES.NORMAL }), []);
      const resetToDefaults = useCallback(() => dispatch({ type: 'RESET_TO_DEFAULTS' }), []);

      const value = useMemo(() => ({ 
        ...state, 
        dispatch, 
        toggleSidebar,
        hideSidebar,
        showSidebar,
        peekSidebar,
        toggleFullscreen,
        openSidePane,
        closeSidePane,
        resetToDefaults,
      }), [
        state, 
        toggleSidebar,
        hideSidebar,
        showSidebar,
        peekSidebar,
        toggleFullscreen,
        openSidePane,
        closeSidePane,
        resetToDefaults
      ]);

      return (
        <AppShellContext.Provider value={value}>
          {children}
        </AppShellContext.Provider>
      );
    }


    // --- Hook ---


    export function useAppShell() {
      const context = useContext(AppShellContext);
      if (!context) {
        throw new Error('useAppShell must be used within an AppShellProvider');
      }
      return context;
    }
  src/components/layout/EnhancedSidebar.tsx: >-
    import React from 'react';

    import {
      Home,
      Settings,
      HelpCircle,
      Component,
      Rocket,
      MoreHorizontal,
      Bell,
      Search,
      FileText,
      Star,
      Trash2,
      FolderOpen,
      Mail,
      Bookmark,
      Download,
      User,
      Plus
    } from 'lucide-react';

    import { useAppStore, type ActivePage } from '@/store/appStore';

    import { useAppShell } from '@/context/AppShellContext';

    import { BODY_STATES } from '@/lib/utils';

    import {
      Workspaces,
      WorkspaceTrigger,
      WorkspaceContent,
      type Workspace,
    } from './WorkspaceSwitcher';

    import {
      DropdownMenu,
      DropdownMenuContent,
      DropdownMenuItem,
      DropdownMenuTrigger,
    } from '@/components/ui/dropdown-menu';

    import {
      Sidebar,
      SidebarContent,
      SidebarHeader,
      SidebarTitle,
      SidebarBody,
      SidebarFooter,
      SidebarSection,
      SidebarMenuItem,
      SidebarMenuButton,
      SidebarMenuAction,
      SidebarLabel,
      SidebarBadge,
      SidebarTooltip,
      SidebarIcon,
      useSidebar,
    } from './Sidebar';

    import { cn } from '@/lib/utils';


    interface MyWorkspace extends Workspace {
      logo: string;
      plan: string;
    }


    const mockWorkspaces: MyWorkspace[] = [
      { id: 'ws1', name: 'Acme Inc.', logo: 'https://avatar.vercel.sh/acme.png', plan: 'Pro' },
      { id: 'ws2', name: 'Monsters Inc.', logo: 'https://avatar.vercel.sh/monsters.png', plan: 'Free' },
      { id: 'ws3', name: 'Stark Industries', logo: 'https://avatar.vercel.sh/stark.png', plan: 'Enterprise' },
    ];


    const SidebarWorkspaceTrigger = () => {
      const { isCollapsed, compactMode } = useSidebar();

      return (
        <WorkspaceTrigger
          collapsed={isCollapsed}
          className={cn(
            'rounded-xl transition-colors hover:bg-accent/50 w-full',
            isCollapsed ? 'p-2' : 'p-3 bg-accent/50',
          )}
          avatarClassName={cn(compactMode ? 'h-8 w-8' : 'h-10 w-10')}
        />
      );
    };


    interface SidebarProps {
      onMouseEnter?: () => void;
      onMouseLeave?: () => void;
    }


    export const EnhancedSidebar = React.forwardRef<HTMLDivElement,
    SidebarProps>(
      ({ onMouseEnter, onMouseLeave }, ref) => {
        const { sidebarWidth, compactMode } = useAppShell();
        const [selectedWorkspace, setSelectedWorkspace] = React.useState(mockWorkspaces[0]);

        return (
          <Sidebar
            ref={ref}
            style={{ width: sidebarWidth }}
            onMouseEnter={onMouseEnter}
            onMouseLeave={onMouseLeave}
          >
            <SidebarContent>
              <SidebarHeader>
                <div className="p-2 bg-primary/20 rounded-lg">
                  <Rocket className="w-5 h-5 text-primary" />
                </div>
                <SidebarTitle>Amazing App</SidebarTitle>
              </SidebarHeader>

              <SidebarBody>
                <SidebarSection title="Main">
                  <AppMenuItem icon={Home} label="Dashboard" page="dashboard" />
                  <AppMenuItem icon={Search} label="Search" />
                  <AppMenuItem icon={Bell} label="Notifications" badge={3} page="notifications" opensInSidePane />
                </SidebarSection>
                
                <SidebarSection title="Workspace" collapsible defaultExpanded>
                  <AppMenuItem icon={FileText} label="Documents" hasActions>
                    <AppMenuItem icon={FileText} label="Recent" isSubItem />
                    <AppMenuItem icon={Star} label="Starred" isSubItem />
                    <AppMenuItem icon={Trash2} label="Trash" isSubItem />
                  </AppMenuItem>
                  <AppMenuItem icon={FolderOpen} label="Projects" hasActions />
                  <AppMenuItem icon={Mail} label="Messages" badge={12} />
                </SidebarSection>
                
                <SidebarSection title="Personal" collapsible>
                  <AppMenuItem icon={Bookmark} label="Bookmarks" />
                  <AppMenuItem icon={Star} label="Favorites" />
                  <AppMenuItem icon={Download} label="Downloads" />
                </SidebarSection>

                <SidebarSection title="Components" collapsible defaultExpanded>
                  <AppMenuItem icon={Component} label="Toaster" page="toaster" />
                </SidebarSection>
              </SidebarBody>

              <SidebarFooter>
                <SidebarSection>
                  <AppMenuItem icon={User} label="Profile" />
                  <AppMenuItem icon={Settings} label="Settings" page="settings" />
                  <AppMenuItem icon={HelpCircle} label="Help" />
                </SidebarSection>

                <div className={cn(compactMode ? 'mt-4' : 'mt-6')}>
                  <Workspaces
                    workspaces={mockWorkspaces}
                    selectedWorkspaceId={selectedWorkspace.id}
                    onWorkspaceChange={setSelectedWorkspace}
                  >
                    <SidebarWorkspaceTrigger />
                    <WorkspaceContent>
                      <button className="flex w-full items-center gap-2 rounded-sm px-2 py-2 text-left text-sm hover:bg-accent hover:text-accent-foreground focus:outline-none">
                        <Plus className="h-4 w-4" />
                        <span>Create Workspace</span>
                      </button>
                    </WorkspaceContent>
                  </Workspaces>
                </div>
              </SidebarFooter>
            </SidebarContent>
          </Sidebar>
        );
      },
    );

    EnhancedSidebar.displayName = 'EnhancedSidebar';



    // Example of a reusable menu item component built with the new Sidebar
    primitives

    interface AppMenuItemProps {
      icon: React.ElementType;
      label: string;
      badge?: number;
      hasActions?: boolean;
      children?: React.ReactNode;
      isSubItem?: boolean;
      page?: ActivePage;
      opensInSidePane?: boolean;
    }


    const AppMenuItem: React.FC<AppMenuItemProps> = ({ icon: Icon, label, badge,
    hasActions, children, isSubItem = false, page, opensInSidePane = false }) =>
    {
      const { handleNavigation, activePage } = useAppStore()
      const { compactMode, bodyState, sidePaneContent, openSidePane } = useAppShell()
      const { isCollapsed } = useSidebar();

      const isPageActive = (page: ActivePage) => {
        const pageToSidePaneContent: { [key in ActivePage]?: 'main' | 'settings' | 'toaster' | 'notifications' } = {
          dashboard: 'main',
          settings: 'settings',
          toaster: 'toaster',
          notifications: 'notifications',
        };
        return activePage === page || (bodyState === BODY_STATES.SIDE_PANE && sidePaneContent === pageToSidePaneContent[page]);
      };
      
      const isActive = page ? isPageActive(page) : false;

      const handleClick = () => {
        if (page) {
          if (opensInSidePane) {
            const pageToPaneMap: { [key in ActivePage]?: 'main' | 'settings' | 'toaster' | 'notifications' } = {
              dashboard: 'main',
              settings: 'settings',
              toaster: 'toaster',
              notifications: 'notifications',
            };
            if (pageToPaneMap[page]) openSidePane(pageToPaneMap[page]!)
          } else {
            handleNavigation(page);
          }
        }
      };

      return (
        <div className={isSubItem ? (compactMode ? 'ml-4' : 'ml-6') : ''}>
          <SidebarMenuItem>
            <SidebarMenuButton onClick={handleClick} isActive={isActive}>
              <SidebarIcon>
                <Icon className={isSubItem ? "w-3 h-3" : "w-4 h-4"}/>
              </SidebarIcon>
              <SidebarLabel>{label}</SidebarLabel>
              {badge && <SidebarBadge>{badge}</SidebarBadge>}
              <SidebarTooltip label={label} badge={badge} />
            </SidebarMenuButton>

            {hasActions && (
              <DropdownMenu>
                <DropdownMenuTrigger asChild>
                  <SidebarMenuAction>
                    <MoreHorizontal className="h-4 w-4" />
                  </SidebarMenuAction>
                </DropdownMenuTrigger>
                <DropdownMenuContent side="right" align="start">
                  <DropdownMenuItem>
                    <span>Edit {label}</span>
                  </DropdownMenuItem>
                  <DropdownMenuItem>
                    <span>Delete {label}</span>
                  </DropdownMenuItem>
                </DropdownMenuContent>
              </DropdownMenu>
            )}
          </SidebarMenuItem>
          {!isCollapsed && children && (
            <div className="space-y-1 mt-1">{children}</div>
          )}
        </div>
      );
    };
  README.md: >
    # Amazing App Shell


    [![npm
    version](https://img.shields.io/npm/v/amazing-app-shell.svg?style=flat)](https://www.npmjs.com/package/amazing-app-shell)

    [![License:
    MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)

    [![Build
    Status](https://img.shields.io/travis/com/your-username/amazing-app-shell.svg)](https://travis-ci.com/your-username/amazing-app-shell)


    A fully-featured, animated, and customizable application shell for React,
    built with TypeScript, Tailwind CSS, and powered by GSAP for smooth
    animations. Provide a modern, desktop-grade user experience out of the box.


    This library provides all the necessary components and hooks to build a
    complex application layout with a resizable sidebar, a dynamic main content
    area, a contextual side pane, and more.


    [**Live Demo (Storybook) →**](https://your-demo-link.com)

     <!-- TODO: Add a real preview image -->

    ---


    ## Key Features


    -   **Component-Based Architecture**: Build your shell by composing flexible
    and powerful React components.

    -   **Resizable Sidebar**: Draggable resizing with multiple states:
    `Expanded`, `Collapsed`, `Hidden`, and `Peek` (on hover).

    -   **Dynamic Body States**: Seamlessly switch between `Normal`,
    `Fullscreen`, and `Side Pane` views.

    -   **Smooth Animations**: Fluid transitions powered by GSAP for a premium
    feel.

    -   **Dark Mode Support**: First-class dark mode support, easily toggled.

    -   **Customizable Theming**: Easily theme your application using CSS
    variables, just like shadcn/ui.

    -   **State Management Included**: Simple and powerful state management via
    React Context and Zustand.

    -   **Command Palette**: Built-in command palette for quick navigation and
    actions.

    -   **TypeScript & Modern Tools**: Built with TypeScript, React, Vite, and
    Tailwind CSS for a great developer experience.


    ## Installation


    Install the package and its peer dependencies using your preferred package
    manager.


    ```bash

    npm install amazing-app-shell react react-dom gsap lucide-react
    tailwind-merge class-variance-authority clsx

    ```


    or


    ```bash

    yarn add amazing-app-shell react react-dom gsap lucide-react tailwind-merge
    class-variance-authority clsx

    ```


    ## Getting Started


    Follow these steps to integrate Amazing App Shell into your project.


    ### 1. Configure Tailwind CSS


    You need to configure Tailwind CSS to correctly process the styles from the
    library.


    **`tailwind.config.js`**


    ```javascript

    /** @type {import('tailwindcss').Config} */

    module.tole = {
      // ... your other config
      content: [
        './src/**/*.{js,ts,jsx,tsx}',
        // Add the path to the library's components
        './node_modules/amazing-app-shell/dist/**/*.{js,ts,jsx,tsx}',
      ],
      // ...
    };

    ```


    **`index.css` (or your main CSS file)**


    You need to import the library's stylesheet. It contains all the necessary
    base styles and CSS variables for theming.


    ```css

    /* Import Tailwind's base, components, and utilities */

    @import 'tailwindcss/base';

    @import 'tailwindcss/components';

    @import 'tailwindcss/utilities';


    /* Import the App Shell's stylesheet */

    @import 'amazing-app-shell/dist/style.css';

    ```


    ### 2. Set Up Providers


    Wrap your application's root component with `AppShellProvider` and
    `ToasterProvider`.


    **`App.tsx`**


    ```tsx

    import React from 'react';

    import { AppShellProvider } from 'amazing-app-shell';

    import { ToasterProvider } from 'amazing-app-shell'; // Re-exported for
    convenience

    import { YourAppComponent } from './YourAppComponent';


    function App() {
      return (
        <AppShellProvider>
          <ToasterProvider>
            <YourAppComponent />
          </ToasterProvider>
        </AppShellProvider>
      );
    }


    export default App;

    ```


    ### 3. Compose Your Shell


    The `<AppShell>` component is the heart of the library. You compose your
    layout by passing the `sidebar`, `topBar`, `mainContent`, and `rightPane`
    components as props.


    Here's a complete example:


    **`YourAppComponent.tsx`**


    ```tsx

    import {
      // Main Layout
      AppShell,
      MainContent,
      RightPane,
      TopBar,

      // Sidebar Primitives
      Sidebar,
      SidebarBody,
      SidebarContent,
      SidebarHeader,
      SidebarTitle,
      SidebarMenuItem,
      SidebarMenuButton,
      SidebarIcon,
      SidebarLabel,

      // Hooks & Context
      useAppShell,
    } from 'amazing-app-shell';

    import { Home, Settings, PanelRight } from 'lucide-react';


    // 1. Build your custom sidebar

    const MySidebar = () => {
      return (
        <Sidebar>
          <SidebarContent>
            <SidebarHeader>
              <SidebarTitle>My App</SidebarTitle>
            </SidebarHeader>
            <SidebarBody>
              <SidebarMenuItem>
                <SidebarMenuButton>
                  <SidebarIcon><Home /></SidebarIcon>
                  <SidebarLabel>Dashboard</SidebarLabel>
                </SidebarMenuButton>
              </SidebarMenuItem>
              <SidebarMenuItem>
                <SidebarMenuButton>
                  <SidebarIcon><Settings /></SidebarIcon>
                  <SidebarLabel>Settings</SidebarLabel>
                </SidebarMenuButton>
              </SidebarMenuItem>
            </SidebarBody>
          </SidebarContent>
        </Sidebar>
      );
    };


    // 2. Build your custom top bar content

    const MyTopBarContent = () => {
      const { openSidePane } = useAppShell();
      return (
        <button onClick={() => openSidePane('details')} title="Open Details">
          <PanelRight />
        </button>
      );
    };


    // 3. Build your main content

    const MyMainContent = () => {
      return (
        <div>
          <h1>Welcome to your Dashboard!</h1>
          <p>This is the main content area.</p>
        </div>
      );
    };


    // 4. Build your right pane

    const MyRightPane = () => {
      return (
        <div>
          <h3>Details Panel</h3>
          <p>Contextual information goes here.</p>
        </div>
      );
    };


    // 5. Assemble the App Shell

    export function YourAppComponent() {
      return (
        <AppShell
          sidebar={<MySidebar />}
          topBar={<TopBar><MyTopBarContent /></TopBar>}
          mainContent={<MainContent><MyMainContent /></MainContent>}
          rightPane={<RightPane>{<MyRightPane />}</RightPane>}
        />
      );
    }

    ```


    ## Component API


    ### Layout Components


    -   `<AppShellProvider>`: Wraps your app and provides the context for all
    hooks and components.

    -   `<AppShell>`: The main container that orchestrates the layout. Requires
    `sidebar`, `topBar`, `mainContent`, and `rightPane` props.

    -   `<TopBar>`: The header component. It's a container for your own controls
    and branding.

    -   `<MainContent>`: The primary content area of your application.

    -   `<RightPane>`: A panel that slides in from the right, perfect for
    details, forms, or secondary information.


    ### Sidebar Primitives


    The sidebar is built using a set of highly composable components.


    -   `<Sidebar>`: The root sidebar component.

    -   `<SidebarContent>`: Wrapper for all sidebar content.

    -   `<SidebarHeader>`, `<SidebarBody>`, `<SidebarFooter>`: Structural
    components to organize sidebar content.

    -   `<SidebarTitle>`: The title of your app, automatically hidden when the
    sidebar is collapsed.

    -   `<SidebarSection>`: A component to group menu items with an optional
    title.

    -   `<SidebarMenuItem>`: A wrapper for a single menu item, including the
    button and potential actions.

    -   `<SidebarMenuButton>`: The main clickable button for a menu item.

    -   `<SidebarIcon>`, `<SidebarLabel>`, `<SidebarBadge>`, `<SidebarTooltip>`:
    Atomic parts of a menu item.


    ### Ready-to-use Components


    -   `<UserDropdown>`: A pre-styled user profile dropdown menu.

    -   `<WorkspaceSwitcher>`: A complete workspace/tenant switcher component.

    -   `<PageHeader>`: A standardized header for your main content pages.

    -   `<CommandPalette>`: A powerful command palette for your application.


    ### UI Primitives


    The library also exports a set of UI components (Button, Card, Badge, etc.)
    based on shadcn/ui. You can import them directly from `amazing-app-shell`.


    ## Hooks


    -   `useAppShell()`: The primary hook to control the shell's state.
        -   `sidebarState`: Current state of the sidebar (`expanded`, `collapsed`, etc.).
        -   `bodyState`: Current body state (`normal`, `fullscreen`, `side_pane`).
        -   `toggleSidebar()`: Toggles the sidebar between expanded and collapsed.
        -   `openSidePane(content: string)`: Opens the right-hand pane.
        -   `closeSidePane()`: Closes the right-hand pane.
        -   `toggleFullscreen()`: Toggles fullscreen mode.
        -   `dispatch`: For more granular state control.
    -   `useToast()`: A hook to display toast notifications.
        -   `show({ title, message, variant, ... })`

    ## Theming


    Customizing the look and feel is straightforward. The library uses CSS
    variables for colors, border radius, etc., which you can override in your
    global CSS file.


    **`index.css`**


    ```css

    @layer base {
      :root {
        --background: 0 0% 100%;
        --foreground: 222.2 84% 4.9%;
        --primary: 262.1 83.3% 57.8%; /* New primary color: Violet */
        --primary-foreground: 210 40% 98%;
        --radius: 0.75rem; /* New border radius */
      }

      .dark {
        --background: 222.2 84% 4.9%;
        --foreground: 210 40% 98%;
        --primary: 262.1 83.3% 57.8%;
        --primary-foreground: 210 40% 98%;
      }
    }

    ```


    ## Contributing


    Contributions are welcome! Please read our [contributing
    guidelines](./CONTRIBUTING.md) to get started.


    ## License


    This project is licensed under the **MIT License**. See the
    [LICENSE](./LICENSE) file for details.
  vite.config.ts: |-
    import { defineConfig } from 'vite'
    import react from '@vitejs/plugin-react'
    import { fileURLToPath, URL } from 'url'

    // https://vitejs.dev/config/
    export default defineConfig({
      plugins: [react()],
      resolve: {
        alias: {
          "@": fileURLToPath(new URL('./src', import.meta.url)),
        },
      },
    })
  src/App.tsx: >-
    import React, { useEffect } from 'react'

    import { AppShell } from './components/layout/AppShell'

    import { AppShellProvider, useAppShell } from './context/AppShellContext'

    import { useAppStore } from './store/appStore'

    import { useAuthStore } from './store/authStore'

    import './index.css'


    // Import library components

    import { EnhancedSidebar } from './components/layout/EnhancedSidebar'

    import { MainContent } from './components/layout/MainContent'

    import { RightPane } from './components/layout/RightPane'

    import { TopBar } from './components/layout/TopBar'

    import { CommandPalette } from './components/global/CommandPalette'


    // Import page/content components

    import { DashboardContent } from './pages/Dashboard'

    import { SettingsPage } from './pages/Settings'

    import { ToasterDemo } from './pages/ToasterDemo'

    import { NotificationsPage } from './pages/Notifications'

    import { ContentInSidePanePlaceholder } from
    './components/shared/ContentInSidePanePlaceholder'

    import { SettingsContent } from './features/settings/SettingsContent'

    import LoginPage from './pages/Login'


    // Import icons

    import { LayoutDashboard, Settings, Component, Bell, SlidersHorizontal,
    ChevronsLeftRight, Search, Filter, Plus, PanelRight, ChevronRight } from
    'lucide-react'

    import { BODY_STATES } from './lib/utils'

    import { cn } from './lib/utils'



    // The content for the main area, with page routing logic

    function AppContent() {
      const { activePage, setActivePage } = useAppStore()
      const { bodyState, sidePaneContent, openSidePane } = useAppShell()

      const pageMap = {
        dashboard: {
          component: <DashboardContent />,
          sidePaneContent: 'main',
          icon: LayoutDashboard,
          name: 'dashboard',
        },
        settings: {
          component: <SettingsPage />,
          sidePaneContent: 'settings',
          icon: Settings,
          name: 'settings',
        },
        toaster: {
          component: <ToasterDemo />,
          sidePaneContent: 'toaster',
          icon: Component,
          name: 'toaster demo',
        },
        notifications: {
          component: <NotificationsPage />,
          sidePaneContent: 'notifications',
          icon: Bell,
          name: 'notifications',
        },
      } as const;

      const currentPage = pageMap[activePage];

      if (sidePaneContent === currentPage.sidePaneContent && bodyState === BODY_STATES.SIDE_PANE) {
        return (
          <ContentInSidePanePlaceholder 
            icon={currentPage.icon}
            title={`${currentPage.name.charAt(0).toUpperCase() + currentPage.name.slice(1)} is in Side Pane`}
            pageName={currentPage.name}
            onBringBack={() => {
              openSidePane(currentPage.sidePaneContent);
              setActivePage(activePage);
            }}
          />
        )
      }

      return currentPage.component;
    }


    // Content for the Top Bar

    function AppTopBar() {
      const { activePage, searchTerm, setSearchTerm } = useAppStore()
      const { openSidePane } = useAppShell()
      const [isSearchFocused, setIsSearchFocused] = React.useState(false);

      const handleMoveToSidePane = () => {
        const mapping = { dashboard: 'main', settings: 'settings', toaster: 'toaster', notifications: 'notifications' } as const;
        if (mapping[activePage]) openSidePane(mapping[activePage]);
      };

      return (
        <div className="flex items-center gap-3 flex-1">
          <div className={cn("hidden md:flex items-center gap-2 text-sm transition-opacity", {
              "opacity-0 pointer-events-none": isSearchFocused && activePage === 'dashboard'
          })}>
            <a href="#" className="text-muted-foreground hover:text-foreground transition-colors">Home</a>
            <ChevronRight className="w-4 h-4 text-muted-foreground" />
            <span className="font-medium text-foreground capitalize">{activePage}</span>
          </div>
          
          <div className="flex-1" />

          {/* Page-specific: Dashboard search and actions */}
          {activePage === 'dashboard' && (
          <div className="flex items-center gap-2 flex-1 justify-end">
            <div className={cn("relative transition-all duration-300 ease-in-out", isSearchFocused ? 'flex-1 max-w-lg' : 'w-auto')}>
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4 pointer-events-none" />
              <input
                type="text"
                placeholder="Search..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                onFocus={() => setIsSearchFocused(true)}
                onBlur={() => setIsSearchFocused(false)}
                className={cn(
                  "pl-9 pr-4 py-2 h-10 border-none rounded-lg bg-card focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent transition-all duration-300 ease-in-out w-full",
                  isSearchFocused ? 'bg-background' : 'w-48'
                )}
              />
            </div>
             <button className="h-10 w-10 flex-shrink-0 flex items-center justify-center hover:bg-accent rounded-full transition-colors">
              <Filter className="w-5 h-5" />
            </button>
             <button className="bg-primary text-primary-foreground px-4 py-2 rounded-full hover:bg-primary/90 transition-colors flex items-center gap-2 h-10 flex-shrink-0">
              <Plus className="w-5 h-5" />
              <span className={cn(isSearchFocused ? 'hidden sm:inline' : 'inline')}>New Project</span>
            </button>
          </div>
          )}

          {/* Page-specific: Move to side pane */}
          {['dashboard', 'settings', 'toaster', 'notifications'].includes(activePage) && (
            <button onClick={handleMoveToSidePane} className="h-10 w-10 flex items-center justify-center hover:bg-accent rounded-full transition-colors" title="Move to Side Pane"><PanelRight className="w-5 h-5" /></button>
          )}
        </div>
      )
    }


    // The main App component that composes the shell

    function ComposedApp() {
      const { sidePaneContent, closeSidePane } = useAppShell();
      const { setActivePage } = useAppStore();

      const contentMap = {
        main: { title: 'Dashboard', icon: LayoutDashboard, page: 'dashboard', content: <DashboardContent isInSidePane /> },
        settings: { title: 'Settings', icon: Settings, page: 'settings', content: <SettingsContent /> },
        toaster: { title: 'Toaster Demo', icon: Component, page: 'toaster', content: <ToasterDemo isInSidePane /> },
        notifications: { title: 'Notifications', icon: Bell, page: 'notifications', content: <NotificationsPage isInSidePane /> },
        details: { title: 'Details Panel', icon: SlidersHorizontal, content: <p className="text-muted-foreground">This is the side pane. It can be used to display contextual information, forms, or actions related to the main content.</p> }
      } as const;

      const currentContent = contentMap[sidePaneContent as keyof typeof contentMap] || contentMap.details;
      const CurrentIcon = currentContent.icon;

      const handleMaximize = () => {
        if ('page' in currentContent && currentContent.page) {
          setActivePage(currentContent.page as any);
        }
        closeSidePane()
      }

      const rightPaneHeader = (
          <>
          <div className="flex items-center gap-2">
            <CurrentIcon className="w-5 h-5" />
            <h2 className="text-lg font-semibold whitespace-nowrap">
              {currentContent.title}
            </h2>
          </div>
          
          {'page' in currentContent && currentContent.page && (
            <button
              onClick={handleMaximize}
              className="h-10 w-10 flex items-center justify-center hover:bg-accent rounded-full transition-colors mr-2"
              title="Move to Main View"
            >
              <ChevronsLeftRight className="w-5 h-5" />
            </button>
          )}
          </>
      );

      return (
        <AppShell
          sidebar={<EnhancedSidebar />}
          topBar={<TopBar><AppTopBar /></TopBar>}
          mainContent={<MainContent><AppContent /></MainContent>}
          rightPane={(
            <RightPane header={rightPaneHeader}>{currentContent.content}</RightPane>
          )}
          commandPalette={<CommandPalette />}
        />
      );
    }


    function App() {
      const isDarkMode = useAppStore((state) => state.isDarkMode)
      const { isAuthenticated, login, forgotPassword } = useAuthStore()

      useEffect(() => {
        document.documentElement.classList.toggle('dark', isDarkMode);
      }, [isDarkMode]);

      const handleLogin = async (email: string, password: string) => {
        try {
          await login(email, password)
        } catch (error) {
          console.error('Login failed:', error)
          // In a real app, you'd show an error message to the user
        }
      }

      const handleForgotPassword = async (email: string) => {
        try {
          await forgotPassword(email)
        } catch (error) {
          console.error('Forgot password failed:', error)
        }
      }

      const handleSignUp = () => {
        // In a real app, navigate to sign up page
        console.log('Navigate to sign up page')
      }

      if (!isAuthenticated) {
        return (
          <LoginPage
            onLogin={handleLogin}
            onForgotPassword={handleForgotPassword}
            onSignUp={handleSignUp}
          />
        )
      }

      return (
        <div className="h-screen w-screen overflow-hidden bg-background">
          <AppShellProvider>
            <ComposedApp />
          </AppShellProvider>
        </div>
      )
    }


    export default App
approved: false
linesAdded: null
linesRemoved: null
linesDifference: null
gitCommittedAt: null
status: undone
id: 111
