uuid: c2945d78-b1c4-406a-939e-2f844a47d34c
projectId: jeli-app-shell
createdAt: '2025-10-14T01:22:20.680Z'
gitCommitMsg: >-
  refactor(animations): abstract GSAP logic into reusable hooks

  - Create `useStaggeredAnimation` and `useIncrementalStaggeredAnimation` hooks
  in a new `useStaggeredAnimation.motion.ts` file to handle one-shot and
  incremental list animations respectively.

  - Refactor DataDemo components (`DataCardView`, `DataListView`,
  `DataDetailPanel`) to use the new animation hooks, removing duplicated GSAP
  code.

  - Consolidate `useDashboardAnimations` and `useDemoContentAnimations` into a
  single, more efficient hook (`useDashboardAnimations.motion.ts`).

  - Delete the redundant `useDemoContentAnimations.hook.ts`.

  - Update Dashboard components to use a cleaner container ref pattern for
  animations, improving component composition and simplifying the animation
  hook.
promptSummary: >-
  The user requested to execute Part 2 of a multi-part refactoring plan. The
  goal was to abstract repetitive GSAP animations into reusable hooks, following
  DRY principles, and reorganize animation-related files.
reasoning:
  - Executing Part 2 of our refactoring plan.
  - '### Part 2: Abstract Repetitive GSAP Animations'
  - >-
    We've identified several components with nearly identical GSAP animations,
    which violates the DRY principle. In this part, we will:
  - 1.  Create a new `*.motion.ts` file for reusable animation hooks.
  - >-
    2.  Implement two hooks: one for one-shot staggered animations and another
    for incrementally animating list items (for features like infinite scroll).
  - >-
    3.  Refactor all data view components (`DataListView`, `DataCardView`,
    `DataDetailPanel`) to use these new centralized hooks, removing duplicated
    code.
  - >-
    4.  Consolidate the two redundant dashboard animation hooks
    (`useDashboardAnimations.hook.ts` and `useDemoContentAnimations.hook.ts`)
    into a single, more efficient hook.
  - 5.  Delete the now-obsolete animation hook file.
  - >-
    6.  Update the `Dashboard` and `DemoContent` components to work with the
    new, streamlined animation system.
  - >-
    This will result in a much cleaner, more maintainable, and consistent
    animation implementation across the application.
  - >-
    First, I'll create a new file to house our reusable animation hooks.
    Following the new convention, this will be a `.motion.ts` file.
  - >-
    Now, let's refactor the data view components to use the new
    `useIncrementalStaggeredAnimation` hook for lists that support infinite
    scrolling.
  - >-
    The detail panel animates all its children when the `item` prop changes, so
    it will use the one-shot `useStaggeredAnimation` hook.
  - Next, I'll delete the redundant `useDemoContentAnimations.hook.ts`.
  - >-
    I'll rename `useDashboardAnimations.hook.ts` to
    `useDashboardAnimations.motion.ts` to adhere to our new file naming
    convention for animations.
  - >-
    Now, I'll update the consolidated hook. It will now use
    `useStaggeredAnimation` and accept container refs instead of an array of
    element refs, which is a cleaner pattern.
  - >-
    I'll refactor `DemoContent.tsx` to accept a `ref` via `React.forwardRef` and
    remove its own animation logic.
  - >-
    Finally, I'll update the main dashboard component to create the new
    container refs, pass them to the consolidated animation hook, and forward
    the appropriate ref to `DemoContent`.
operations:
  - type: write
    path: src/hooks/useStaggeredAnimation.motion.ts
    content: "import { useLayoutEffect, useRef } from 'react';\nimport { gsap } from 'gsap';\n\ninterface StaggeredAnimationOptions {\n\tstagger?: number;\n\tduration?: number;\n\ty?: number;\n\tscale?: number;\n\tease?: string;\n}\n\n/**\n * Animates the direct children of a container element with a staggered fade-in effect.\n * This version is for lists that might grow (e.g., infinite scroll). It only\n * animates new elements that are added to the container.\n *\n * @param containerRef Ref to the container element.\n * @param deps Dependency array. A change here that adds items will trigger the animation on the new items.\n * @param options Animation options.\n */\nexport function useIncrementalStaggeredAnimation<T extends HTMLElement>(\n\tcontainerRef: React.RefObject<T>,\n\tdeps: React.DependencyList,\n\toptions: StaggeredAnimationOptions = {},\n) {\n\tconst animatedItemsCount = useRef(0);\n\n\tconst { stagger = 0.1, duration = 0.5, y = 30, scale = 0.95, ease = 'power2.out' } = options;\n\n\tuseLayoutEffect(() => {\n\t\tif (!containerRef.current) return;\n\n\t\tconst children = Array.from(containerRef.current.children);\n\t\t// On dependency change, if the number of children is less than what we've animated,\n\t\t// it's a list reset (e.g., filtering), so reset the counter.\n\t\tif (children.length < animatedItemsCount.current) {\n\t\t\tanimatedItemsCount.current = 0;\n\t\t}\n\n\t\tconst newItems = children.slice(animatedItemsCount.current);\n\n\t\tif (newItems.length > 0) {\n\t\t\tgsap.fromTo(\n\t\t\t\tnewItems,\n\t\t\t\t{ y, opacity: 0, scale },\n\t\t\t\t{\n\t\t\t\t\tduration,\n\t\t\t\t\ty: 0,\n\t\t\t\t\topacity: 1,\n\t\t\t\t\tscale: 1,\n\t\t\t\t\tstagger,\n\t\t\t\t\tease,\n\t\t\t\t},\n\t\t\t);\n\t\t\tanimatedItemsCount.current = children.length;\n\t\t}\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t}, [containerRef, ...deps]);\n}\n\n/**\n * Animates the direct children of a container element with a staggered fade-in effect.\n * This version animates all children every time the dependencies change.\n * Ideal for content that is replaced, not appended to.\n *\n * @param containerRef Ref to the container element.\n * @param deps Dependency array to trigger the animation.\n * @param options Animation options.\n */\nexport function useStaggeredAnimation<T extends HTMLElement>(\n\tcontainerRef: React.RefObject<T>,\n\tdeps: React.DependencyList,\n\toptions: StaggeredAnimationOptions = {},\n) {\n\tconst { stagger = 0.08, duration = 0.6, y = 30, scale = 1, ease = 'power3.out' } = options;\n\n\tuseLayoutEffect(() => {\n\t\tif (containerRef.current?.children.length) {\n\t\t\tgsap.fromTo(\n\t\t\t\tcontainerRef.current.children,\n\t\t\t\t{ y, opacity: 0, scale },\n\t\t\t\t{\n\t\t\t\t\tduration,\n\t\t\t\t\ty: 0,\n\t\t\t\t\topacity: 1,\n\t\t\t\t\tscale: 1,\n\t\t\t\t\tstagger,\n\t\t\t\t\tease,\n\t\t\t\t},\n\t\t\t);\n\t\t}\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t}, [containerRef, ...deps]);\n}"
    patchStrategy: replace
  - type: write
    path: src/pages/DataDemo/components/DataCardView.tsx
    content: >+
      --- src/pages/DataDemo/components/DataCardView.tsx

      +++ src/pages/DataDemo/components/DataCardView.tsx

      @@ -1,37 +1,19 @@

      -import { useRef, useLayoutEffect } from 'react'

      -import { gsap } from 'gsap'

      +import { useRef } from 'react'
       import { cn } from '@/lib/utils'
       import { Badge } from '@/components/ui/badge'
       import { Avatar } from '@/components/ui/avatar'
       import { Calendar, Eye, Heart, Share, ArrowUpRight, Tag } from 'lucide-react'
       import type { ViewProps } from '../types'
       import { getStatusColor, getPriorityColor } from '../utils'
      +import { useIncrementalStaggeredAnimation } from
      '@/hooks/useStaggeredAnimation.motion'
       import { EmptyState } from './EmptyState'
       
       export function DataCardView({ data, onItemSelect, selectedItem, isGrid = false }: ViewProps) {
         const containerRef = useRef<HTMLDivElement>(null)
      -  const animatedItemsCount = useRef(0)

      -

      -  useLayoutEffect(() => {

      -    if (containerRef.current && data.length > animatedItemsCount.current)
      {

      -      const newItems = Array.from(containerRef.current.children).slice(

      -        animatedItemsCount.current

      -      );

      -      gsap.fromTo(

      -        newItems,

      -        { y: 40, opacity: 0, scale: 0.95 },

      -        {

      -          duration: 0.6,

      -          y: 0,

      -          opacity: 1,

      -          scale: 1,

      -          stagger: 0.1,

      -          ease: 'power2.out',

      -        },

      -      );

      -      animatedItemsCount.current = data.length;

      -    }

      -  }, [data]);

      +  useIncrementalStaggeredAnimation(containerRef, [data], { y: 40 });
       
         if (data.length === 0) {
           return <EmptyState />

    patchStrategy: standard-diff
  - type: write
    path: src/pages/DataDemo/components/DataListView.tsx
    content: >+
      --- src/pages/DataDemo/components/DataListView.tsx

      +++ src/pages/DataDemo/components/DataListView.tsx

      @@ -1,35 +1,16 @@

      -import { useRef, useLayoutEffect } from 'react'

      -import { gsap } from 'gsap'

      +import { useRef } from 'react'
       import { cn } from '@/lib/utils'
       import { Badge } from '@/components/ui/badge'
       import { Avatar } from '@/components/ui/avatar'
       import { Calendar, Eye, Heart, Share, ArrowRight } from 'lucide-react'
       import type { ViewProps } from '../types'
       import { getStatusColor, getPriorityColor } from '../utils'
      +import { useIncrementalStaggeredAnimation } from
      '@/hooks/useStaggeredAnimation.motion'
       import { EmptyState } from './EmptyState'
       
       export function DataListView({ data, onItemSelect, selectedItem }: ViewProps) {
         const listRef = useRef<HTMLDivElement>(null)
      -  const animatedItemsCount = useRef(0)

      -

      -  useLayoutEffect(() => {

      -    if (listRef.current && data.length > animatedItemsCount.current) {

      -      const newItems =
      Array.from(listRef.current.children).slice(animatedItemsCount.current);

      -      gsap.fromTo(newItems,

      -        { y: 30, opacity: 0 },

      -        {

      -          duration: 0.5,

      -          y: 0,

      -          opacity: 1,

      -          stagger: 0.08,

      -          ease: "power2.out",

      -        },

      -      );

      -      animatedItemsCount.current = data.length;

      -    }

      -  }, [data]);

      +  useIncrementalStaggeredAnimation(listRef, [data], { scale: 1, y: 30,
      stagger: 0.08, duration: 0.5 });
       
         if (data.length === 0) {
           return <EmptyState />

    patchStrategy: standard-diff
  - type: write
    path: src/pages/DataDemo/components/DataDetailPanel.tsx
    content: >+
      --- src/pages/DataDemo/components/DataDetailPanel.tsx

      +++ src/pages/DataDemo/components/DataDetailPanel.tsx

      @@ -1,7 +1,6 @@

      -import React, { useLayoutEffect, useRef } from 'react'

      -import { gsap } from 'gsap'

      +import React, { useRef } from 'react'
       import { cn } from '@/lib/utils'
       import { Badge } from '@/components/ui/badge'
       import { Avatar } from '@/components/ui/avatar'
      @@ -23,6 +22,7 @@
         Circle
       } from 'lucide-react' 
       import type { DataItem } from '../types'
      +import { useStaggeredAnimation } from
      '@/hooks/useStaggeredAnimation.motion'
       import { getStatusColor, getPriorityColor } from '../utils'
       
       interface DataDetailPanelProps {
      @@ -32,23 +32,8 @@
       
       export function DataDetailPanel({ item, onClose }: DataDetailPanelProps) {
         const contentRef = useRef<HTMLDivElement>(null)
      -

      -  useLayoutEffect(() => {

      -    if (item && contentRef.current) {

      -      gsap.fromTo(contentRef.current.children,

      -        { y: 30, opacity: 0 },

      -        {

      -          duration: 0.6,

      -          y: 0,

      -          opacity: 1,

      -          stagger: 0.08,

      -          ease: "power2.out"

      -        }

      -      )

      -    }

      -  }, [item])

      +  useStaggeredAnimation(contentRef, [item]);
       
         if (!item) {
           return null

    patchStrategy: standard-diff
  - type: delete
    path: src/pages/Dashboard/hooks/useDemoContentAnimations.hook.ts
  - type: rename
    from: src/pages/Dashboard/hooks/useDashboardAnimations.hook.ts
    to: src/pages/Dashboard/hooks/useDashboardAnimations.motion.ts
  - type: write
    path: src/pages/Dashboard/hooks/useDashboardAnimations.motion.ts
    content: >+
      --- src/pages/Dashboard/hooks/useDashboardAnimations.motion.ts

      +++ src/pages/Dashboard/hooks/useDashboardAnimations.motion.ts

      @@ -1,37 +1,30 @@
       import { useEffect } from 'react';
       import { gsap } from 'gsap';
       import { useAppShell } from '@/context/AppShellContext';
       import { BODY_STATES } from '@/lib/utils';
      +import { useStaggeredAnimation } from
      '@/hooks/useStaggeredAnimation.motion';
       
       export function useDashboardAnimations(
         contentRef: React.RefObject<HTMLDivElement>,
      -  cardsRef: React.MutableRefObject<(HTMLDivElement | null)[]>

      +  statsCardsContainerRef: React.RefObject<HTMLDivElement>,

      +  featureCardsContainerRef: React.RefObject<HTMLDivElement>,
       ) {
         const { bodyState } = useAppShell();
       
      +  // Animate cards on mount

      +  useStaggeredAnimation(statsCardsContainerRef, [], { y: 20, scale: 0.95
      });

      +  useStaggeredAnimation(featureCardsContainerRef, [], { y: 30, scale:
      0.95, stagger: 0.05 });

      +
         useEffect(() => {
           if (!contentRef.current) return;
       
           const content = contentRef.current;
      -    const cards = cardsRef.current.filter(Boolean);
       
           switch (bodyState) {
             case BODY_STATES.FULLSCREEN:
      -        gsap.to(content, {

      -          scale: 1.02,

      -          duration: 0.4,

      -          ease: "power3.out"

      -        });

      +        gsap.to(content, { scale: 1.02, duration: 0.4, ease: 'power3.out'
      });
               break;
             default:
      -        gsap.to(content, {

      -          scale: 1,

      -          duration: 0.4,

      -          ease: "power3.out"

      -        });

      +        gsap.to(content, { scale: 1, duration: 0.4, ease: 'power3.out'
      });
               break;
           }
      -

      -    // Stagger animation for cards

      -    gsap.fromTo(cards, 

      -      { y: 20, opacity: 0 },

      -      { 

      -        y: 0, 

      -        opacity: 1, 

      -        duration: 0.6,

      -        stagger: 0.1,

      -        ease: "power3.out"

      -      }

      -    );

      -

      -  }, [bodyState, contentRef, cardsRef]);

      +  }, [bodyState, contentRef]);
       }

    patchStrategy: standard-diff
  - type: write
    path: src/pages/Dashboard/DemoContent.tsx
    content: >+
      --- src/pages/Dashboard/DemoContent.tsx

      +++ src/pages/Dashboard/DemoContent.tsx

      @@ -1,4 +1,4 @@

      -import { useRef } from 'react'

      +import React, { useRef } from 'react'
       import { 
         Sparkles, 
         Zap, 
      @@ -13,15 +13,12 @@
         Settings
       } from 'lucide-react'
       import { cn } from '@/lib/utils'
       import { useAppStore } from '@/store/appStore'
       import { useAppShell } from '@/context/AppShellContext'
       import { Card } from '@/components/ui/card'
      -import { useDemoContentAnimations } from
      './hooks/useDemoContentAnimations.hook'
       
      -export function DemoContent() {

      +export const DemoContent = React.forwardRef<HTMLDivElement, {}>(function
      DemoContent(props, ref) {
         const { bodyState, sidebarState, compactMode } = useAppShell()
         const { isDarkMode } = useAppStore()
         const contentRef = useRef<HTMLDivElement>(null)
      -  const cardsRef = useRef<(HTMLDivElement | null)[]>([])

      -  useDemoContentAnimations(cardsRef);
       
         const features = [
           {
      @@ -82,11 +79,10 @@
             </div>
       
             {/* Feature Cards */}
      -      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3
      gap-6">

      +      <div ref={ref} className="grid grid-cols-1 md:grid-cols-2
      lg:grid-cols-3 gap-6">
               {features.map((feature, index) => (
                 <Card
                   key={feature.title}
      -            ref={el => cardsRef.current[index] = el}
                   className="group relative overflow-hidden border-border/50 p-6 hover:border-primary/30 hover:bg-accent/30 transition-all duration-300 cursor-pointer"
                 >
                   <div className="relative z-10">
      @@ -211,4 +207,4 @@
             </div>
           </div>
         )
      -}

      +})

    patchStrategy: standard-diff
  - type: write
    path: src/pages/Dashboard/index.tsx
    content: >+
      --- src/pages/Dashboard/index.tsx

      +++ src/pages/Dashboard/index.tsx

      @@ -16,7 +16,7 @@
       } from 'lucide-react'
       import { cn } from '@/lib/utils'
       import { DemoContent } from './DemoContent';
      -import { useDashboardAnimations } from
      './hooks/useDashboardAnimations.hook'

      +import { useDashboardAnimations } from
      './hooks/useDashboardAnimations.motion'
       import { useDashboardScroll } from './hooks/useDashboardScroll.hook'
       import { PageHeader } from '@/components/shared/PageHeader';
       import { Card } from '@/components/ui/card';
      @@ -93,11 +93,13 @@
       export function DashboardContent({ isInSidePane = false }: DashboardContentProps) {
           const scrollRef = useRef<HTMLDivElement>(null)
           const contentRef = useRef<HTMLDivElement>(null);
      -    const cardsRef = useRef<(HTMLDivElement | null)[]>([])

      +    const statsCardsContainerRef = useRef<HTMLDivElement>(null);

      +    const featureCardsContainerRef = useRef<HTMLDivElement>(null);
           const { showScrollToBottom, handleScroll, scrollToBottom } = useDashboardScroll(scrollRef, isInSidePane);
       
      -    useDashboardAnimations(contentRef, cardsRef);

      +    useDashboardAnimations(contentRef, statsCardsContainerRef,
      featureCardsContainerRef);
       
           const getTypeIcon = (type: ActivityItem['type']) => {
             switch (type) {
      @@ -123,11 +125,10 @@
                 />
               )}
                 {/* Stats Cards */}
      -        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4
      gap-6">

      +        <div ref={statsCardsContainerRef} className="grid grid-cols-1
      md:grid-cols-2 lg:grid-cols-4 gap-6">
                 {statsCards.map((stat, index) => (
                   <Card
                   key={stat.title}
      -            ref={el => cardsRef.current[index] = el}
                   className="p-6 border-border/50 hover:border-primary/30 transition-all duration-300 group cursor-pointer"
                 >
                   <div className="flex items-center justify-between">
      @@ -147,7 +148,7 @@
               </div>
       
               {/* Demo Content */}
      -        <DemoContent />

      +        <DemoContent ref={featureCardsContainerRef} />
       
               {/* Main Content Grid */}
               <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">

    patchStrategy: standard-diff
snapshot:
  src/hooks/useStaggeredAnimation.motion.ts: null
  src/pages/Dashboard/hooks/useDashboardAnimations.motion.ts: null
  src/pages/DataDemo/components/DataCardView.tsx: >-
    import { useRef, useLayoutEffect } from 'react'

    import { gsap } from 'gsap'

    import { cn } from '@/lib/utils'

    import { Badge } from '@/components/ui/badge'

    import { Avatar } from '@/components/ui/avatar'

    import { Calendar, Eye, Heart, Share, ArrowUpRight, Tag } from
    'lucide-react'

    import type { ViewProps } from '../types'

    import { getStatusColor, getPriorityColor } from '../utils'

    import { EmptyState } from './EmptyState'


    export function DataCardView({ data, onItemSelect, selectedItem, isGrid =
    false }: ViewProps) {
      const containerRef = useRef<HTMLDivElement>(null)
      const animatedItemsCount = useRef(0)

      useLayoutEffect(() => {
        if (containerRef.current && data.length > animatedItemsCount.current) {
          const newItems = Array.from(containerRef.current.children).slice(
            animatedItemsCount.current
          );
          gsap.fromTo(
            newItems,
            { y: 40, opacity: 0, scale: 0.95 },
            {
              duration: 0.6,
              y: 0,
              opacity: 1,
              scale: 1,
              stagger: 0.1,
              ease: 'power2.out',
            },
          );
          animatedItemsCount.current = data.length;
        }
      }, [data]);

      if (data.length === 0) {
        return <EmptyState />
      }

      return (
        <div 
          ref={containerRef}
          className={cn(
            "gap-6",
            isGrid
              ? "grid grid-cols-[repeat(auto-fit,minmax(280px,1fr))]"
              : "grid grid-cols-[repeat(auto-fit,minmax(320px,1fr))]"
          )}
        >
          {data.map((item) => {
            const isSelected = selectedItem?.id === item.id
            
            return (
              <div
                key={item.id}
                onClick={() => onItemSelect(item)}
                className={cn(
                  "group relative overflow-hidden rounded-3xl border bg-card/50 backdrop-blur-sm transition-all duration-500 cursor-pointer",
                  "hover:bg-card/80 hover:shadow-xl hover:shadow-primary/10 hover:border-primary/30 hover:-translate-y-2",
                  "active:scale-[0.98]",
                  isSelected && "ring-2 ring-primary/30 border-primary/40 bg-card/90 shadow-lg shadow-primary/20",
                )}
              >
                {/* Card Header with Thumbnail */}
                <div className="relative p-6 pb-4">
                  <div className="flex items-start justify-between mb-4">
                    <div className="w-16 h-16 bg-gradient-to-br from-primary/20 to-primary/10 rounded-2xl flex items-center justify-center text-3xl group-hover:scale-110 transition-transform duration-300">
                      {item.thumbnail}
                    </div>
                    <ArrowUpRight className="w-5 h-5 text-muted-foreground group-hover:text-primary group-hover:translate-x-1 group-hover:-translate-y-1 transition-all duration-300" />
                  </div>

                  {/* Priority indicator */}
                  <div className="absolute top-4 right-4">
                    <div className={cn(
                      "w-3 h-3 rounded-full",
                      item.priority === 'critical' && "bg-red-500",
                      item.priority === 'high' && "bg-orange-500",
                      item.priority === 'medium' && "bg-blue-500",
                      item.priority === 'low' && "bg-green-500"
                    )} />
                  </div>
                </div>

                {/* Card Content */}
                <div className="px-6 pb-6">
                  {/* Title and Description */}
                  <h3 className="font-semibold text-lg mb-2 group-hover:text-primary transition-colors line-clamp-2">
                    {item.title}
                  </h3>
                  <p className="text-muted-foreground text-sm mb-4 line-clamp-3">
                    {item.description}
                  </p>

                  {/* Status and Category */}
                  <div className="flex items-center gap-2 mb-4">
                    <Badge variant="outline" className={getStatusColor(item.status)}>
                      {item.status}
                    </Badge>
                    <Badge variant="outline" className="bg-accent/50 text-xs">
                      {item.category}
                    </Badge>
                  </div>

                  {/* Tags */}
                  <div className="flex items-center gap-1 mb-4">
                    <Tag className="w-3 h-3 text-muted-foreground" />
                    <div className="flex flex-wrap gap-1">
                      {item.tags.slice(0, 3).map((tag, index) => (
                        <span key={index} className="text-xs text-muted-foreground bg-muted/50 px-2 py-1 rounded-md">
                          {tag}
                        </span>
                      ))}
                      {item.tags.length > 3 && (
                        <span className="text-xs text-muted-foreground">
                          +{item.tags.length - 3}
                        </span>
                      )}
                    </div>
                  </div>

                  {/* Progress */}
                  <div className="mb-4">
                    <div className="flex items-center justify-between mb-2">
                      <span className="text-xs text-muted-foreground">Progress</span>
                      <span className="text-xs font-semibold">{item.metrics.completion}%</span>
                    </div>
                    <div className="w-full bg-muted rounded-full h-2">
                      <div 
                        className="bg-gradient-to-r from-primary to-primary/80 h-2 rounded-full transition-all duration-700 ease-out"
                        style={{ width: `${item.metrics.completion}%` }}
                      />
                    </div>
                  </div>

                  {/* Assignee */}
                  <div className="flex items-center gap-3 mb-4">
                    <Avatar className="w-8 h-8 text-sm">
                      {item.assignee.avatar}
                    </Avatar>
                    <div className="flex-1 min-w-0">
                      <p className="text-sm font-medium truncate">
                        {item.assignee.name}
                      </p>
                      <p className="text-xs text-muted-foreground truncate">
                        {item.assignee.email}
                      </p>
                    </div>
                  </div>

                  {/* Metrics */}
                  <div className="flex items-center justify-between text-xs text-muted-foreground">
                    <div className="flex items-center gap-3">
                      <div className="flex items-center gap-1">
                        <Eye className="w-3 h-3" />
                        {item.metrics.views}
                      </div>
                      <div className="flex items-center gap-1">
                        <Heart className="w-3 h-3" />
                        {item.metrics.likes}
                      </div>
                      <div className="flex items-center gap-1">
                        <Share className="w-3 h-3" />
                        {item.metrics.shares}
                      </div>
                    </div>
                    <div className="flex items-center gap-1">
                      <Calendar className="w-3 h-3" />
                      {new Date(item.updatedAt).toLocaleDateString()}
                    </div>
                  </div>
                </div>

                {/* Hover gradient overlay */}
                <div className="absolute inset-0 bg-gradient-to-br from-primary/5 via-transparent to-primary/5 opacity-0 group-hover:opacity-100 transition-opacity duration-500 pointer-events-none" />
                
                {/* Selection indicator */}
                {isSelected && (
                  <div className="absolute inset-0 bg-gradient-to-br from-primary/10 to-primary/5 pointer-events-none" />
                )}
              </div>
            )
          })}
        </div>
      )
    }
  src/pages/DataDemo/components/DataListView.tsx: >-
    import { useRef, useLayoutEffect } from 'react'

    import { gsap } from 'gsap'

    import { cn } from '@/lib/utils'

    import { Badge } from '@/components/ui/badge'

    import { Avatar } from '@/components/ui/avatar'

    import { Calendar, Eye, Heart, Share, ArrowRight } from 'lucide-react'

    import type { ViewProps } from '../types'

    import { getStatusColor, getPriorityColor } from '../utils'

    import { EmptyState } from './EmptyState'


    export function DataListView({ data, onItemSelect, selectedItem }:
    ViewProps) {
      const listRef = useRef<HTMLDivElement>(null)
      const animatedItemsCount = useRef(0)

      useLayoutEffect(() => {
        if (listRef.current && data.length > animatedItemsCount.current) {
          const newItems = Array.from(listRef.current.children).slice(animatedItemsCount.current);
          gsap.fromTo(newItems,
            { y: 30, opacity: 0 },
            {
              duration: 0.5,
              y: 0,
              opacity: 1,
              stagger: 0.08,
              ease: "power2.out",
            },
          );
          animatedItemsCount.current = data.length;
        }
      }, [data]);

      if (data.length === 0) {
        return <EmptyState />
      }

      return (
        <div ref={listRef} className="space-y-4">
          {data.map((item) => {
            const isSelected = selectedItem?.id === item.id
            
            return (
              <div
                key={item.id}
                onClick={() => onItemSelect(item)}
                className={cn(
                  "group relative overflow-hidden rounded-2xl border bg-card/50 backdrop-blur-sm transition-all duration-300 cursor-pointer",
                  "hover:bg-card/80 hover:shadow-lg hover:shadow-primary/5 hover:border-primary/20",
                  "active:scale-[0.99]",
                  isSelected && "ring-2 ring-primary/20 border-primary/30 bg-card/90"
                )}
              >
                <div className="p-6">
                  <div className="flex items-start gap-4">
                    {/* Thumbnail */}
                    <div className="flex-shrink-0">
                      <div className="w-14 h-14 bg-gradient-to-br from-primary/20 to-primary/10 rounded-xl flex items-center justify-center text-2xl">
                        {item.thumbnail}
                      </div>
                    </div>

                    {/* Content */}
                    <div className="flex-1 min-w-0">
                      <div className="flex items-start justify-between mb-3">
                        <div className="flex-1 min-w-0">
                          <h3 className="font-semibold text-lg mb-1 group-hover:text-primary transition-colors">
                            {item.title}
                          </h3>
                          <p className="text-muted-foreground text-sm mb-3 line-clamp-2">
                            {item.description}
                          </p>
                        </div>
                        <ArrowRight className="w-5 h-5 text-muted-foreground group-hover:text-primary group-hover:translate-x-1 transition-all duration-300 ml-4 flex-shrink-0" />
                      </div>

                      {/* Badges */}
                      <div className="flex items-center gap-2 mb-4">
                        <Badge variant="outline" className={getStatusColor(item.status)}>
                          {item.status}
                        </Badge>
                        <Badge variant="outline" className={getPriorityColor(item.priority)}>
                          {item.priority}
                        </Badge>
                        <Badge variant="outline" className="bg-accent/50">
                          {item.category}
                        </Badge>
                      </div>

                      {/* Meta info */}
                      <div className="flex items-center justify-between">
                        <div className="flex items-center gap-4">
                          {/* Assignee */}
                          <div className="flex items-center gap-2">
                            <Avatar className="w-7 h-7 text-sm">
                              {item.assignee.avatar}
                            </Avatar>
                            <span className="text-sm text-muted-foreground font-medium">
                              {item.assignee.name}
                            </span>
                          </div>

                          {/* Date */}
                          <div className="flex items-center gap-1 text-xs text-muted-foreground">
                            <Calendar className="w-3 h-3" />
                            {new Date(item.updatedAt).toLocaleDateString()}
                          </div>
                        </div>

                        {/* Metrics */}
                        <div className="flex items-center gap-4 text-xs text-muted-foreground">
                          <div className="flex items-center gap-1">
                            <Eye className="w-3 h-3" />
                            {item.metrics.views}
                          </div>
                          <div className="flex items-center gap-1">
                            <Heart className="w-3 h-3" />
                            {item.metrics.likes}
                          </div>
                          <div className="flex items-center gap-1">
                            <Share className="w-3 h-3" />
                            {item.metrics.shares}
                          </div>
                        </div>
                      </div>

                      {/* Progress bar */}
                      <div className="mt-4">
                        <div className="flex items-center justify-between mb-2">
                          <span className="text-xs text-muted-foreground">Progress</span>
                          <span className="text-xs font-medium">{item.metrics.completion}%</span>
                        </div>
                        <div className="w-full bg-muted rounded-full h-1.5">
                          <div 
                            className="bg-gradient-to-r from-primary to-primary/80 h-1.5 rounded-full transition-all duration-500 ease-out"
                            style={{ width: `${item.metrics.completion}%` }}
                          />
                        </div>
                      </div>
                    </div>
                  </div>
                </div>

                {/* Hover gradient overlay */}
                <div className="absolute inset-0 bg-gradient-to-r from-primary/5 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300 pointer-events-none" />
              </div>
            )
          })}
        </div>
      )
    }
  src/pages/DataDemo/components/DataDetailPanel.tsx: |-
    import React, { useLayoutEffect, useRef } from 'react'
    import { gsap } from 'gsap'
    import { cn } from '@/lib/utils'
    import { Badge } from '@/components/ui/badge'
    import { Avatar } from '@/components/ui/avatar'
    import { Button } from '@/components/ui/button'
    import { 
      ArrowLeft,
      Calendar, 
      Clock, 
      Eye, 
      Heart, 
      Share, 
      Download,
      FileText,
      Image,
      Video,
      File,
      ExternalLink,
      Tag,
      User,
      BarChart3,
      TrendingUp,
      CheckCircle,
      AlertCircle,
      Circle
    } from 'lucide-react' 
    import type { DataItem } from '../types'
    import { getStatusColor, getPriorityColor } from '../utils'

    interface DataDetailPanelProps {
      item: DataItem | null
      onClose: () => void
    }

    export function DataDetailPanel({ item, onClose }: DataDetailPanelProps) {
      const contentRef = useRef<HTMLDivElement>(null)

      useLayoutEffect(() => {
        if (item && contentRef.current) {
          gsap.fromTo(contentRef.current.children,
            { y: 30, opacity: 0 },
            {
              duration: 0.6,
              y: 0,
              opacity: 1,
              stagger: 0.08,
              ease: "power2.out"
            }
          )
        }
      }, [item])

      if (!item) {
        return null
      }

      const getFileIcon = (type: string) => {
        switch (type.toLowerCase()) {
          case 'pdf': return FileText
          case 'image':
          case 'png':
          case 'jpg':
          case 'jpeg': return Image
          case 'video':
          case 'mp4': return Video
          default: return File
        }
      }

      const getStatusIcon = (status: string) => {
        switch (status) {
          case 'completed': return CheckCircle
          case 'active': return Circle
          case 'pending': return AlertCircle
          default: return Circle
        }
      }

      return (
        <div ref={contentRef} className="h-full flex flex-col">
          {/* Header */}
          <div className="p-6 border-b border-border/50 bg-gradient-to-r from-card/50 to-card/30 backdrop-blur-sm">
            <Button variant="ghost" onClick={onClose} className="mb-4 -ml-4">
              <ArrowLeft className="w-4 h-4 mr-2" />
              Back to list
            </Button>
            <div className="flex items-start gap-4 mb-4">
              <div className="w-16 h-16 bg-gradient-to-br from-primary/20 to-primary/10 rounded-2xl flex items-center justify-center text-3xl flex-shrink-0">
                {item.thumbnail}
              </div>
              <div className="flex-1 min-w-0">
                <h1 className="text-2xl font-bold mb-2 leading-tight">
                  {item.title}
                </h1>
                <p className="text-muted-foreground">
                  {item.description}
                </p>
              </div>
            </div>

            {/* Status badges */}
            <div className="flex items-center gap-2 mb-4">
              <Badge variant="outline" className={getStatusColor(item.status)}>
                {React.createElement(getStatusIcon(item.status), { className: "w-3 h-3 mr-1" })}
                {item.status}
              </Badge>
              <Badge variant="outline" className={getPriorityColor(item.priority)}>
                {item.priority}
              </Badge>
              <Badge variant="outline" className="bg-accent/50">
                {item.category}
              </Badge>
            </div>

            {/* Progress */}
            <div className="space-y-2">
              <div className="flex items-center justify-between">
                <span className="text-sm font-medium">Progress</span>
                <span className="text-sm font-bold">{item.metrics.completion}%</span>
              </div>
              <div className="w-full bg-muted rounded-full h-3">
                <div 
                  className="bg-gradient-to-r from-primary to-primary/80 h-3 rounded-full transition-all duration-1000 ease-out"
                  style={{ width: `${item.metrics.completion}%` }}
                />
              </div>
            </div>
          </div>

          {/* Content */}
          <div className="flex-1 overflow-y-auto">
            <div className="p-6 space-y-6">
              {/* Assignee Info */}
              <div className="bg-card/30 rounded-2xl p-4 border border-border/30">
                <div className="flex items-center gap-1 mb-3">
                  <User className="w-4 h-4 text-muted-foreground" />
                  <h3 className="font-semibold text-sm">Assigned to</h3>
                </div>
                <div className="flex items-center gap-3">
                  <Avatar className="w-12 h-12">
                    {item.assignee.avatar}
                  </Avatar>
                  <div>
                    <p className="font-medium">{item.assignee.name}</p>
                    <p className="text-sm text-muted-foreground">{item.assignee.email}</p>
                  </div>
                </div>
              </div>

              {/* Metrics */}
              <div className="bg-card/30 rounded-2xl p-4 border border-border/30">
                <div className="flex items-center gap-1 mb-3">
                  <BarChart3 className="w-4 h-4 text-muted-foreground" />
                  <h3 className="font-semibold text-sm">Engagement Metrics</h3>
                </div>
                <div className="grid grid-cols-[repeat(auto-fit,minmax(80px,1fr))] gap-4">
                  <div className="text-center">
                    <div className="flex items-center justify-center gap-1 mb-1">
                      <Eye className="w-4 h-4 text-blue-500" />
                    </div>
                    <p className="text-2xl font-bold">{item.metrics.views}</p>
                    <p className="text-xs text-muted-foreground">Views</p>
                  </div>
                  <div className="text-center">
                    <div className="flex items-center justify-center gap-1 mb-1">
                      <Heart className="w-4 h-4 text-red-500" />
                    </div>
                    <p className="text-2xl font-bold">{item.metrics.likes}</p>
                    <p className="text-xs text-muted-foreground">Likes</p>
                  </div>
                  <div className="text-center">
                    <div className="flex items-center justify-center gap-1 mb-1">
                      <Share className="w-4 h-4 text-green-500" />
                    </div>
                    <p className="text-2xl font-bold">{item.metrics.shares}</p>
                    <p className="text-xs text-muted-foreground">Shares</p>
                  </div>
                </div>
              </div>

              {/* Tags */}
              <div className="bg-card/30 rounded-2xl p-4 border border-border/30">
                <div className="flex items-center gap-1 mb-3">
                  <Tag className="w-4 h-4 text-muted-foreground" />
                  <h3 className="font-semibold text-sm">Tags</h3>
                </div>
                <div className="flex flex-wrap gap-2">
                  {item.tags.map((tag, index) => (
                    <span
                      key={index}
                      className="bg-muted/50 text-muted-foreground px-3 py-1 rounded-full text-xs font-medium"
                    >
                      {tag}
                    </span>
                  ))}
                </div>
              </div>

              {/* Content Details */}
              {item.content && (
                <div className="bg-card/30 rounded-2xl p-4 border border-border/30">
                  <h3 className="font-semibold text-sm mb-3">Project Details</h3>
                  <div className="space-y-4">
                    <div>
                      <h4 className="font-medium text-sm mb-2">Summary</h4>
                      <p className="text-sm text-muted-foreground leading-relaxed">
                        {item.content.summary}
                      </p>
                    </div>
                    <div>
                      <h4 className="font-medium text-sm mb-2">Description</h4>
                      <p className="text-sm text-muted-foreground leading-relaxed">
                        {item.content.details}
                      </p>
                    </div>
                  </div>
                </div>
              )}

              {/* Attachments */}
              {item.content?.attachments && item.content.attachments.length > 0 && (
                <div className="bg-card/30 rounded-2xl p-4 border border-border/30">
                  <h3 className="font-semibold text-sm mb-3">Attachments</h3>
                  <div className="space-y-2">
                    {item.content.attachments.map((attachment, index) => {
                      const IconComponent = getFileIcon(attachment.type)
                      return (
                        <div
                          key={index}
                          className="flex items-center gap-3 p-3 bg-muted/30 rounded-xl hover:bg-muted/50 transition-colors cursor-pointer group"
                        >
                          <IconComponent className="w-5 h-5 text-muted-foreground" />
                          <div className="flex-1 min-w-0">
                            <p className="text-sm font-medium truncate group-hover:text-primary transition-colors">
                              {attachment.name}
                            </p>
                            <p className="text-xs text-muted-foreground">
                              {attachment.type} • {attachment.size}
                            </p>
                          </div>
                          <Button size="sm" variant="ghost" className="opacity-0 group-hover:opacity-100 transition-opacity">
                            <Download className="w-4 h-4" />
                          </Button>
                        </div>
                      )
                    })}
                  </div>
                </div>
              )}

              {/* Timeline */}
              <div className="bg-card/30 rounded-2xl p-4 border border-border/30">
                <div className="flex items-center gap-1 mb-3">
                  <Clock className="w-4 h-4 text-muted-foreground" />
                  <h3 className="font-semibold text-sm">Timeline</h3>
                </div>
                <div className="space-y-3">
                  <div className="flex items-center gap-2 text-sm">
                    <Calendar className="w-3 h-3 text-muted-foreground" />
                    <span className="text-muted-foreground">Created:</span>
                    <span className="font-medium">
                      {new Date(item.createdAt).toLocaleDateString('en-US', {
                        year: 'numeric',
                        month: 'long',
                        day: 'numeric'
                      })}
                    </span>
                  </div>
                  <div className="flex items-center gap-2 text-sm">
                    <TrendingUp className="w-3 h-3 text-muted-foreground" />
                    <span className="text-muted-foreground">Last updated:</span>
                    <span className="font-medium">
                      {new Date(item.updatedAt).toLocaleDateString('en-US', {
                        year: 'numeric',
                        month: 'long',
                        day: 'numeric'
                      })}
                    </span>
                  </div>
                  {item.dueDate && (
                    <div className="flex items-center gap-2 text-sm">
                      <AlertCircle className="w-3 h-3 text-orange-500" />
                      <span className="text-muted-foreground">Due date:</span>
                      <span className="font-medium text-orange-600">
                        {new Date(item.dueDate).toLocaleDateString('en-US', {
                          year: 'numeric',
                          month: 'long',
                          day: 'numeric'
                        })}
                      </span>
                    </div>
                  )}
                </div>
              </div>
            </div>
          </div>

          {/* Footer Actions */}
          <div className="p-6 border-t border-border/50 bg-card/30">
            <div className="flex gap-3">
              <Button className="flex-1" size="sm">
                <ExternalLink className="w-4 h-4 mr-2" />
                Open Project
              </Button>
              <Button variant="outline" size="sm">
                <Share className="w-4 h-4 mr-2" />
                Share
              </Button>
            </div>
          </div>
        </div>
      )
    }
  src/pages/Dashboard/hooks/useDemoContentAnimations.hook.ts: |-
    import { useEffect } from 'react';
    import { gsap } from 'gsap';

    export function useDemoContentAnimations(
      cardsRef: React.MutableRefObject<(HTMLDivElement | null)[]>
    ) {
      useEffect(() => {
        const cards = cardsRef.current.filter(Boolean);
        
        // Animate cards on mount
        gsap.fromTo(cards, 
          { y: 30, opacity: 0, scale: 0.95 },
          { 
            y: 0, 
            opacity: 1, 
            scale: 1,
            duration: 0.6,
            stagger: 0.1,
            ease: "power3.out"
          }
        )
      // eslint-disable-next-line react-hooks/exhaustive-deps
      }, []);
    }
  src/pages/Dashboard/hooks/useDashboardAnimations.hook.ts: |-
    import { useEffect } from 'react';
    import { gsap } from 'gsap';
    import { useAppShell } from '@/context/AppShellContext';
    import { BODY_STATES } from '@/lib/utils';

    export function useDashboardAnimations(
      contentRef: React.RefObject<HTMLDivElement>,
      cardsRef: React.MutableRefObject<(HTMLDivElement | null)[]>
    ) {
      const { bodyState } = useAppShell();

      useEffect(() => {
        if (!contentRef.current) return;

        const content = contentRef.current;
        const cards = cardsRef.current.filter(Boolean);

        switch (bodyState) {
          case BODY_STATES.FULLSCREEN:
            gsap.to(content, {
              scale: 1.02,
              duration: 0.4,
              ease: "power3.out"
            });
            break;
          default:
            gsap.to(content, {
              scale: 1,
              duration: 0.4,
              ease: "power3.out"
            });
            break;
        }

        // Stagger animation for cards
        gsap.fromTo(cards, 
          { y: 20, opacity: 0 },
          { 
            y: 0, 
            opacity: 1, 
            duration: 0.6,
            stagger: 0.1,
            ease: "power3.out"
          }
        );

      }, [bodyState, contentRef, cardsRef]);
    }
  src/pages/Dashboard/DemoContent.tsx: >-
    import { useRef } from 'react'

    import { 
      Sparkles, 
      Zap, 
      Rocket, 
      Star, 
      Heart,
      Layers,
      Code,
      Palette,
      Smartphone,
      Monitor,
      Settings
    } from 'lucide-react'

    import { cn } from '@/lib/utils'

    import { useAppStore } from '@/store/appStore'

    import { useAppShell } from '@/context/AppShellContext'

    import { Card } from '@/components/ui/card'

    import { useDemoContentAnimations } from
    './hooks/useDemoContentAnimations.hook'


    export function DemoContent() {
      const { bodyState, sidebarState, compactMode } = useAppShell()
      const { isDarkMode } = useAppStore()
      const contentRef = useRef<HTMLDivElement>(null)
      const cardsRef = useRef<(HTMLDivElement | null)[]>([])
      useDemoContentAnimations(cardsRef);

      const features = [
        {
          icon: <Sparkles className="w-6 h-6" />,
          title: "Amazing Animations",
          description: "Powered by GSAP for smooth, buttery animations",
          color: "from-emerald-500 to-teal-500"
        },
        {
          icon: <Zap className="w-6 h-6" />,
          title: "Lightning Fast",
          description: "Built with Vite and optimized for performance",
          color: "from-amber-500 to-orange-500"
        },
        {
          icon: <Layers className="w-6 h-6" />,
          title: "Multiple States",
          description: "Fullscreen, side pane, and normal viewing modes",
          color: "from-emerald-500 to-green-500"
        },
        {
          icon: <Code className="w-6 h-6" />,
          title: "TypeScript",
          description: "Fully typed with excellent developer experience",
          color: "from-green-500 to-emerald-500"
        },
        {
          icon: <Palette className="w-6 h-6" />,
          title: "Beautiful Design",
          description: "Shadcn/ui components with Tailwind CSS",
          color: "from-teal-500 to-emerald-500"
        },
        {
          icon: <Settings className="w-6 h-6" />,
          title: "Customizable",
          description: "Extensive settings and preferences panel",
          color: "from-slate-500 to-gray-500"
        }
      ]

      const stats = [
        { label: "Components", value: "12+", color: "text-emerald-600" },
        { label: "Animations", value: "25+", color: "text-teal-600" },
        { label: "States", value: "7", color: "text-primary" },
        { label: "Settings", value: "10+", color: "text-amber-600" }
      ]

      return (
        <div ref={contentRef} className="p-8 space-y-12">
          {/* Hero Section */}
          <div className="text-center space-y-4">
            <div className="flex items-center justify-center gap-2 mb-4">
              <Rocket className="w-8 h-8 text-primary" />
              <h1 className="text-4xl font-bold bg-gradient-to-r from-primary to-primary/60 bg-clip-text text-transparent">Jeli App Shell</h1>
            </div>
            <p className="text-lg text-muted-foreground max-w-2xl mx-auto">
              A super flexible application shell with resizable sidebar, multiple body states, 
              smooth animations, and comprehensive settings - all built with modern web technologies.
            </p>
            
            {/* Quick Stats */}
            <div className="flex items-center justify-center gap-12 mt-8">
              {stats.map((stat) => (
                <div key={stat.label} className="text-center">
                  <div className={cn("text-2xl font-bold", stat.color)}>{stat.value}</div>
                  <div className="text-sm text-muted-foreground">{stat.label}</div>
                </div>
              ))}
            </div>
          </div>

          {/* Feature Cards */}
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {features.map((feature, index) => (
              <Card
                key={feature.title}
                ref={el => cardsRef.current[index] = el}
                className="group relative overflow-hidden border-border/50 p-6 hover:border-primary/30 hover:bg-accent/30 transition-all duration-300 cursor-pointer"
              >
                <div className="relative z-10">
                  <div className="w-12 h-12 rounded-full bg-primary/10 flex items-center justify-center text-primary mb-4 group-hover:scale-110 group-hover:bg-primary/20 transition-transform">
                    {feature.icon}
                  </div>
                  
                  <h3 className="text-lg font-semibold mb-2">{feature.title}</h3>
                  <p className="text-muted-foreground text-sm">{feature.description}</p>
                </div>
              </Card>
            ))}
          </div>

          {/* Technology Stack */}
          <Card className="border-border/50 p-6">
            <h2 className="text-2xl font-bold mb-6 flex items-center gap-2">
              <Star className="w-6 h-6 text-yellow-500" />
              Technology Stack
            </h2>
            
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
              {[
                { name: "React 18", desc: "Latest React with hooks" },
                { name: "TypeScript", desc: "Type-safe development" },
                { name: "Vite", desc: "Lightning fast build tool" },
                { name: "Tailwind CSS", desc: "Utility-first styling" },
                { name: "GSAP", desc: "Professional animations" },
                { name: "Zustand", desc: "Lightweight state management" },
                { name: "Shadcn/ui", desc: "Beautiful components" },
                { name: "Lucide Icons", desc: "Consistent iconography" }
              ].map((tech) => (
                <div key={tech.name} className="bg-background rounded-xl p-4 border border-border/50">
                  <h4 className="font-medium">{tech.name}</h4>
                  <p className="text-sm text-muted-foreground">{tech.desc}</p>
                </div>
              ))}
            </div>
          </Card>

          {/* Current State Display */}
          <Card className="border-border/50 p-6">
            <h2 className="text-xl font-bold mb-4 flex items-center gap-2">
              <Monitor className="w-5 h-5" />
              Current App State
            </h2>
            
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
              <div className="text-center p-3 bg-background rounded-xl">
                <div className="text-sm text-muted-foreground">Sidebar</div>
                <div className="font-medium capitalize">{sidebarState}</div>
              </div>
              <div className="text-center p-3 bg-background rounded-xl">
                <div className="text-sm text-muted-foreground">Body State</div>
                <div className="font-medium capitalize">{bodyState.replace('_', ' ')}</div>
              </div>
              <div className="text-center p-3 bg-background rounded-xl">
                <div className="text-sm text-muted-foreground">Theme</div>
                <div className="font-medium">{isDarkMode ? 'Dark' : 'Light'}</div>
              </div>
              <div className="text-center p-3 bg-background rounded-xl">
                <div className="text-sm text-muted-foreground">Mode</div>
                <div className="font-medium">{compactMode ? 'Compact' : 'Normal'}</div>
              </div>
            </div>
          </Card>

          {/* Interactive Demo */}
          <div className="text-center space-y-4">
            <h2 className="text-2xl font-bold flex items-center justify-center gap-2">
              <Heart className="w-6 h-6 text-red-500" />
              Try It Out!
            </h2>
            <p className="text-muted-foreground">
              Use the controls in the top bar to explore different states, toggle the sidebar, 
              or open settings to customize the experience. The sidebar is resizable by dragging the edge!
            </p>
            
            <div className="flex items-center justify-center gap-4 pt-4">
              <div className="flex items-center gap-2 text-sm text-muted-foreground">
                <Smartphone className="w-4 h-4" />
                <span>Responsive</span>
              </div>
              <div className="flex items-center gap-2 text-sm text-muted-foreground">
                <Zap className="w-4 h-4" />
                <span>Fast</span>
              </div>
              <div className="flex items-center gap-2 text-sm text-muted-foreground">
                <Star className="w-4 h-4" />
                <span>Beautiful</span>
              </div>
            </div>
          </div>
        </div>
      )
    }
  src/pages/Dashboard/index.tsx: >-
    import { useRef } from 'react'

    import { 
      BarChart3, 
      TrendingUp, 
      Users, 
      DollarSign, 
      Activity,
      Calendar,
      Clock,
      MessageSquare,
      FileText,
      Star,
      ChevronRight,
      MoreVertical,
      ArrowDown
    } from 'lucide-react'

    import { cn } from '@/lib/utils'

    import { DemoContent } from './DemoContent';

    import { useDashboardAnimations } from './hooks/useDashboardAnimations.hook'

    import { useDashboardScroll } from './hooks/useDashboardScroll.hook'

    import { PageHeader } from '@/components/shared/PageHeader';

    import { Card } from '@/components/ui/card';

    import { PageLayout } from '@/components/shared/PageLayout';


    interface StatsCard {
      title: string
      value: string
      change: string
      trend: 'up' | 'down'
      icon: React.ReactNode
    }


    interface ActivityItem {
      id: string
      type: 'comment' | 'file' | 'meeting' | 'task'
      title: string
      description: string
      time: string
      user: string
    }


    const statsCards: StatsCard[] = [
      {
        title: "Total Revenue",
        value: "$45,231.89",
        change: "+20.1%",
        trend: "up",
        icon: <DollarSign className="w-5 h-5" />
      },
      {
        title: "Active Users",
        value: "2,350",
        change: "+180.1%",
        trend: "up",
        icon: <Users className="w-5 h-5" />
      },
      {
        title: "Conversion Rate",
        value: "12.5%",
        change: "+19%",
        trend: "up",
        icon: <TrendingUp className="w-5 h-5" />
      },
      {
        title: "Performance",
        value: "573ms",
        change: "-5.3%",
        trend: "down",
        icon: <Activity className="w-5 h-5" />
      }
    ]


    const recentActivity: ActivityItem[] = [
      {
        id: "1",
        type: "comment",
        title: "New comment on Project Alpha",
        description: "Sarah Johnson added a comment to the design review",
        time: "2 minutes ago",
        user: "SJ"
      },
      {
        id: "2",
        type: "file",
        title: "Document uploaded",
        description: "quarterly-report.pdf was uploaded to Documents",
        time: "15 minutes ago",
        user: "MD"
      },
      {
        id: "3",
        type: "meeting",
        title: "Meeting scheduled",
        description: "Weekly standup meeting scheduled for tomorrow 9 AM",
        time: "1 hour ago",
        user: "RW"
      },
      {
        id: "4",
        type: "task",
        title: "Task completed",
        description: "UI wireframes for mobile app completed",
        time: "2 hours ago",
        user: "AL"
      }
    ]


    interface DashboardContentProps {
      isInSidePane?: boolean;
    }


    export function DashboardContent({ isInSidePane = false }:
    DashboardContentProps) {
        const scrollRef = useRef<HTMLDivElement>(null)
        const contentRef = useRef<HTMLDivElement>(null);
        const cardsRef = useRef<(HTMLDivElement | null)[]>([])
        const { showScrollToBottom, handleScroll, scrollToBottom } = useDashboardScroll(scrollRef, isInSidePane);

        useDashboardAnimations(contentRef, cardsRef);

        const getTypeIcon = (type: ActivityItem['type']) => {
          switch (type) {
            case 'comment':
              return <MessageSquare className="w-4 h-4" />
            case 'file':
              return <FileText className="w-4 h-4" />
            case 'meeting':
              return <Calendar className="w-4 h-4" />
            case 'task':
              return <Star className="w-4 h-4" />
            default:
              return <Activity className="w-4 h-4" />
          }
        }

        return (
          <PageLayout scrollRef={scrollRef} onScroll={handleScroll} ref={contentRef} isInSidePane={isInSidePane}>
            {/* Header */}
            {!isInSidePane && (
              <PageHeader
                title="Dashboard"
                description="Welcome to the Jeli App Shell demo! Explore all the features and customization options."
              />
            )}
              {/* Stats Cards */}
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
              {statsCards.map((stat, index) => (
                <Card
                key={stat.title}
                ref={el => cardsRef.current[index] = el}
                className="p-6 border-border/50 hover:border-primary/30 transition-all duration-300 group cursor-pointer"
              >
                <div className="flex items-center justify-between">
                  <div className="p-3 bg-primary/10 rounded-full group-hover:bg-primary/20 transition-colors">
                    {stat.icon}
                  </div>
                  <div className={cn(
                    "text-sm font-medium",
                    stat.trend === 'up' ? "text-green-600" : "text-red-600"
                  )}>
                    {stat.change}
                  </div>
                </div>
                <div className="mt-4">
                  <h3 className="text-2xl font-bold">{stat.value}</h3>
                  <p className="text-sm text-muted-foreground mt-1">{stat.title}</p>
                </div>
              </Card>
              ))}
            </div>

            {/* Demo Content */}
            <DemoContent />

            {/* Main Content Grid */}
            <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
            {/* Chart Area */}
            <div className="lg:col-span-2 space-y-6">
              {/* Analytics Chart */}
              <Card className="p-6 border-border/50">
                <div className="flex items-center justify-between mb-6">
                  <h3 className="text-lg font-semibold">Analytics Overview</h3>
                  <button className="h-8 w-8 flex items-center justify-center hover:bg-accent rounded-full transition-colors">
                    <MoreVertical className="w-5 h-5" />
                  </button>
                </div>
                
                {/* Mock Chart */}
                <div className="h-64 bg-gradient-to-br from-primary/10 to-transparent rounded-xl flex items-center justify-center border border-border/50">
                  <div className="text-center">
                    <BarChart3 className="w-12 h-12 text-primary mx-auto mb-2" />
                    <p className="text-muted-foreground">Chart visualization would go here</p>
                  </div>
                </div>
              </Card>

              {/* Recent Projects */}
              <Card className="p-6 border-border/50">
                <div className="flex items-center justify-between mb-6">
                  <h3 className="text-lg font-semibold">Recent Projects</h3>
                  <button className="text-primary hover:text-primary/80 text-sm font-medium flex items-center gap-1">
                    View All
                    <ChevronRight className="w-4 h-4" />
                  </button>
                </div>
                
                <div className="space-y-4">
                  {[
                    { name: "E-commerce Platform", progress: 75, team: 5, deadline: "Dec 15" },
                    { name: "Mobile App Redesign", progress: 45, team: 3, deadline: "Jan 20" },
                    { name: "Marketing Website", progress: 90, team: 4, deadline: "Dec 5" }
                  ].map((project) => (
                    <div key={project.name} className="p-4 bg-accent/30 rounded-xl hover:bg-accent/50 transition-colors cursor-pointer">
                      <div className="flex items-center justify-between mb-2">
                        <h4 className="font-medium">{project.name}</h4>
                        <span className="text-sm text-muted-foreground">{project.progress}%</span>
                      </div>
                      <div className="w-full bg-muted rounded-full h-2 mb-3">
                        <div 
                          className="bg-primary h-2 rounded-full transition-all duration-500"
                          style={{ width: `${project.progress}%` }}
                        />
                      </div>
                      <div className="flex items-center justify-between text-sm text-muted-foreground">
                        <span>{project.team} team members</span>
                        <span>Due {project.deadline}</span>
                        </div>
                    </div>
                  ))}
                </div>
              </Card>
            </div>

            {/* Sidebar Content */}
            <div className="space-y-6">
              {/* Quick Actions */}
              <Card className="p-6 border-border/50">
                <h3 className="text-lg font-semibold mb-4">Quick Actions</h3>
                <div className="space-y-3">
                  {[
                    { icon: <FileText className="w-4 h-4" />, label: "Create Document", color: "bg-blue-500/10 text-blue-600" },
                    { icon: <Calendar className="w-4 h-4" />, label: "Schedule Meeting", color: "bg-green-500/10 text-green-600" },
                    { icon: <Users className="w-4 h-4" />, label: "Invite Team", color: "bg-purple-500/10 text-purple-600" },
                    { icon: <BarChart3 className="w-4 h-4" />, label: "View Reports", color: "bg-orange-500/10 text-orange-600" }
                  ].map((action) => (
                    <button
                      key={action.label}
                      className="w-full flex items-center gap-3 p-3 hover:bg-accent rounded-lg transition-colors text-left"
                    >
                      <div className={cn("p-2 rounded-full", action.color)}>
                        {action.icon}
                      </div>
                      <span className="font-medium">{action.label}</span>
                    </button>
                  ))}
                </div>
              </Card>

              {/* Recent Activity */}
              <Card className="p-6 border-border/50">
                <h3 className="text-lg font-semibold mb-4">Recent Activity</h3>
                <div className="space-y-4">
                  {recentActivity.map((activity) => (
                    <div key={activity.id} className="flex items-start gap-3 p-3 hover:bg-accent/30 rounded-xl transition-colors cursor-pointer">
                      <div className="p-2 bg-primary/10 rounded-full flex-shrink-0">
                        {getTypeIcon(activity.type)}
                      </div>
                      <div className="flex-1 min-w-0">
                        <h4 className="font-medium text-sm mb-1">{activity.title}</h4>
                        <p className="text-xs text-muted-foreground mb-2">{activity.description}</p>
                        <div className="flex items-center gap-2 text-xs text-muted-foreground">
                          <Clock className="w-3 h-3" />
                          <span>{activity.time}</span>
                          <div className="w-5 h-5 bg-primary rounded-full flex items-center justify-center text-primary-foreground text-xs font-medium">
                            {activity.user}
                          </div>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </Card>
            </div>
          </div>
          {showScrollToBottom && (
            <button
              onClick={scrollToBottom}
              className="fixed bottom-8 right-8 w-12 h-12 bg-primary text-primary-foreground rounded-full flex items-center justify-center shadow-lg hover:bg-primary/90 transition-all animate-fade-in z-[51]"
              style={{ animation: 'bounce 2s infinite' }}
              title="Scroll to bottom"
            >
              <ArrowDown className="w-6 h-6" />
            </button>
          )}
          </PageLayout>
        )
    }
approved: true
linesAdded: null
linesRemoved: null
linesDifference: null
gitCommittedAt: null
status: committed
id: 255
