uuid: c4086438-6b83-4903-b0ec-1c6f496350d7
projectId: jeli-app-shell
createdAt: '2025-10-15T03:22:23.421Z'
gitCommitMsg: >-
  refactor(layout): move sidebar toggle to sidebar header

  - Removed the sidebar toggle button from the TopBar. - Placed the sidebar
  toggle button within the SidebarHeader, making it visible only when the
  sidebar is expanded. - Aligned breadcrumbs/page titles to the left of the
  TopBar by moving the `children` prop.
promptSummary: >-
  Move sidebar toggle from TopBar to Sidebar, and left-align breadcrumbs in
  TopBar.
reasoning:
  - >-
    Here are the changes to move the sidebar toggle button and adjust the TopBar
    layout.
  - >-
    First, I'll modify the `TopBar` component. I'm removing the sidebar toggle
    button and moving the `children` (which are expected to be breadcrumbs or
    page titles) to the left side of the bar. This fulfills the request to have
    breadcrumbs aligned to the very left.
  - >-
    Next, I'll update the `Sidebar` component to include the toggle button. The
    button will be placed inside the `SidebarHeader` and will only be visible
    when the sidebar is expanded. It uses `ml-auto` to push itself to the right
    edge of the header, keeping the logo and title on the left.
  - >-
    These changes correctly relocate the sidebar toggle functionality and adjust
    the TopBar layout as requested.
operations:
  - type: write
    path: src/components/layout/TopBar.tsx
    content: >+
      --- src/components/layout/TopBar.tsx

      +++ src/components/layout/TopBar.tsx

      @@ -1,7 +1,6 @@
       import React from 'react';
       import {
      -  Menu, 
         Moon, 
         Sun,
         Settings,
      @@ -23,8 +22,7 @@
         const bodyState = useAppShellStore(s => s.bodyState)
         const isDarkMode = useAppShellStore(s => s.isDarkMode);
         const { 
      -    toggleSidebar, 
           setCommandPaletteOpen,
           toggleDarkMode,
         } = useAppShellStore.getState();
      @@ -36,25 +34,13 @@
           )}>
             {/* Left Section - Sidebar Controls & Breadcrumbs */}
             <div className="flex items-center gap-4">
      -        {/* Sidebar Controls */}

      -        <button

      -          onClick={toggleSidebar}

      -          className={cn(

      -            "h-10 w-10 flex items-center justify-center rounded-full
      hover:bg-accent transition-colors"

      -          )}

      -          title="Toggle Sidebar"

      -        >

      -          <Menu className="w-5 h-5" />

      -        </button>

      -

      +        {children}
             </div>
       
             {/* Right Section - page controls, and global controls */}
             <div className="flex items-center gap-3">
      -        {children}

      -

      -        {/* Separator */}

      -        <div className="w-px h-6 bg-border mx-2" />

      -
               {/* Quick Actions */}
               <div className="flex items-center gap-3">
       

    patchStrategy: standard-diff
  - type: write
    path: src/components/layout/Sidebar.tsx
    content: >+
      --- src/components/layout/Sidebar.tsx

      +++ src/components/layout/Sidebar.tsx

      @@ -1,5 +1,5 @@
       import * as React from 'react';
      -import { ChevronDown } from 'lucide-react';

      +import { ChevronDown, PanelLeftClose } from 'lucide-react';
       import { Slot } from '@radix-ui/react-slot';
       import { useAppShellStore } from '@/store/appShell.store';
       import { SIDEBAR_STATES } from '@/lib/utils';
      @@ -79,20 +79,32 @@
       // --- Sidebar Header ---
       const SidebarHeader = React.forwardRef<
         HTMLDivElement,
         React.HTMLAttributes<HTMLDivElement>
      ->(({ className, ...props }, ref) => {

      +>(({ className, children, ...props }, ref) => {
         const { isCollapsed } = useSidebar();
      +  const { toggleSidebar } = useAppShellStore.getState();
         return (
           <div
             ref={ref}
             className={cn(
               'flex items-center gap-3',
               isCollapsed ? 'justify-center' : 'px-3',
               'h-16',
               className,
             )}
      -      {...props}

      -    />

      +      {...props}

      +    >

      +      {children}

      +      {!isCollapsed && (

      +        <button

      +          onClick={toggleSidebar}

      +          className="ml-auto flex h-8 w-8 flex-shrink-0 items-center
      justify-center rounded-md hover:bg-accent transition-colors"

      +          title="Collapse Sidebar"

      +        >

      +          <PanelLeftClose className="w-4 h-4" />

      +        </button>

      +      )}

      +    </div>
         );
       });
       SidebarHeader.displayName = 'SidebarHeader';

    patchStrategy: standard-diff
snapshot:
  src/components/layout/Sidebar.tsx: >-
    import * as React from 'react';

    import { ChevronDown } from 'lucide-react';

    import { Slot } from '@radix-ui/react-slot';

    import { useAppShellStore } from '@/store/appShell.store';

    import { SIDEBAR_STATES } from '@/lib/utils';

    import { cn } from '@/lib/utils';

    import { Button } from '@/components/ui/button';


    // --- Context ---

    interface SidebarContextValue {
      isCollapsed: boolean;
      isPeek: boolean;
      compactMode: boolean;
    }


    const SidebarContext = React.createContext<SidebarContextValue |
    null>(null);


    // eslint-disable-next-line react-refresh/only-export-components

    export const useSidebar = () => {
      const context = React.useContext(SidebarContext);
      if (!context) {
        throw new Error('useSidebar must be used within a Sidebar component');
      }
      return context;
    };


    // --- Main Sidebar Component ---

    interface SidebarProps extends React.HTMLAttributes<HTMLDivElement> {
      children: React.ReactNode;
    }


    const Sidebar = React.forwardRef<HTMLDivElement, SidebarProps>(
      ({ children, className, ...props }, ref) => {
        const sidebarState = useAppShellStore(s => s.sidebarState);
        const compactMode = useAppShellStore(s => s.compactMode);
        const isCollapsed = sidebarState === SIDEBAR_STATES.COLLAPSED;
        const isPeek = sidebarState === SIDEBAR_STATES.PEEK;

        return (
          <SidebarContext.Provider value={{ isCollapsed, isPeek, compactMode }}>
            <div
              ref={ref}
              className={cn(
                'relative bg-card flex-shrink-0',
                'h-full',
                isPeek && 'shadow-xl z-40',
                compactMode && 'text-sm',
                className,
              )}
              {...props}
            >
              {isPeek && <div className="absolute inset-0 bg-background/80 backdrop-blur-sm" />}
              {children}
            </div>
          </SidebarContext.Provider>
        );
      },
    );

    Sidebar.displayName = 'Sidebar';


    // --- Sidebar Content Wrapper ---

    const SidebarContent = React.forwardRef<
      HTMLDivElement,
      React.HTMLAttributes<HTMLDivElement>
    >(({ className, ...props }, ref) => {
      const { compactMode } = useSidebar();
      return (
        <div
          ref={ref}
          className={cn(
            'relative z-10 h-full flex flex-col',
            compactMode ? 'p-3' : 'p-4',
            className,
          )}
          {...props}
        />
      );
    });

    SidebarContent.displayName = 'SidebarContent';


    // --- Sidebar Header ---

    const SidebarHeader = React.forwardRef<
      HTMLDivElement,
      React.HTMLAttributes<HTMLDivElement>
    >(({ className, ...props }, ref) => {
      const { isCollapsed } = useSidebar();
      return (
        <div
          ref={ref}
          className={cn(
            'flex items-center gap-3',
            isCollapsed ? 'justify-center' : 'px-3',
            'h-16',
            className,
          )}
          {...props}
        />
      );
    });

    SidebarHeader.displayName = 'SidebarHeader';


    const SidebarTitle = React.forwardRef<
      HTMLParagraphElement,
      React.HTMLAttributes<HTMLParagraphElement>
    >(({ className, ...props }, ref) => {
      const { isCollapsed } = useSidebar();
      if (isCollapsed) return null;
      return (
        <h1
          ref={ref}
          className={cn('text-lg font-bold nav-label', className)}
          {...props}
        />
      );
    });

    SidebarTitle.displayName = 'SidebarTitle';


    // --- Sidebar Body ---

    const SidebarBody = React.forwardRef<
      HTMLDivElement,
      React.HTMLAttributes<HTMLDivElement>
    >(({ className, ...props }, ref) => (
      <div
        ref={ref}
        className={cn(
          'flex-1 overflow-y-auto space-y-6 pt-4',
          className,
        )}
        {...props}
      />
    ));

    SidebarBody.displayName = 'SidebarBody';


    // --- Sidebar Footer ---

    const SidebarFooter = React.forwardRef<
      HTMLDivElement,
      React.HTMLAttributes<HTMLDivElement>
    >(({ className, ...props }, ref) => {
      const { compactMode } = useSidebar();
      return (
        <div
          ref={ref}
          className={cn('pt-4 border-t border-border', compactMode && 'pt-3', className)}
          {...props}
        />
      );
    });

    SidebarFooter.displayName = 'SidebarFooter';


    // --- Sidebar Section ---

    const SidebarSection = React.forwardRef<
      HTMLDivElement,
      React.HTMLAttributes<HTMLDivElement> & {
        title?: string;
        collapsible?: boolean;
        defaultExpanded?: boolean;
      }
    >(({ title, collapsible = false, defaultExpanded = true, children, ...props
    }, ref) => {
      const { isCollapsed } = useSidebar();
      const [isExpanded, setIsExpanded] = React.useState(defaultExpanded);

      const handleToggle = () => {
        if (collapsible) {
          setIsExpanded(!isExpanded);
        }
      };

      return (
        <div ref={ref} className="space-y-1" {...props}>
          {!isCollapsed && title && (
            <div
              className={cn(
                'flex items-center justify-between px-3 text-xs font-medium text-muted-foreground uppercase tracking-wider',
                collapsible && 'cursor-pointer hover:text-foreground transition-colors',
              )}
              onClick={handleToggle}
            >
              <span className="section-title">{title}</span>
              {collapsible && (
                <ChevronDown
                  className={cn(
                    'section-chevron w-3 h-3 transition-transform',
                    isExpanded ? 'rotate-0' : '-rotate-90',
                  )}
                />
              )}
            </div>
          )}
          {(!collapsible || isExpanded || isCollapsed) && (
            <nav className="space-y-1">{children}</nav>
          )}
        </div>
      );
    });

    SidebarSection.displayName = 'SidebarSection';


    // --- Sidebar Menu Item ---

    const SidebarMenuItem = React.forwardRef<
      HTMLDivElement,
      React.HTMLAttributes<HTMLDivElement>
    >(({ className, ...props }, ref) => {
      return <div ref={ref} className={cn('group/item relative flex items-stretch', className)} {...props} />;
    });

    SidebarMenuItem.displayName = 'SidebarMenuItem';



    // --- Sidebar Menu Button ---

    interface SidebarMenuButtonProps extends
    React.ButtonHTMLAttributes<HTMLButtonElement> {
      asChild?: boolean;
      isActive?: boolean;
    }

    const SidebarMenuButton = React.forwardRef<HTMLButtonElement,
    SidebarMenuButtonProps>(
      ({ className, asChild = false, isActive, ...props }, ref) => {
        const { isCollapsed, compactMode } = useSidebar();
        const Comp = asChild ? Slot : 'button';

        return (
          <Comp
            ref={ref}
            className={cn(
              'group flex items-center gap-3 rounded-lg cursor-pointer transition-all duration-200 w-full text-left flex-1',
              compactMode ? 'px-2 py-1.5' : 'px-4 py-2.5',
              'hover:bg-accent',
              isActive && 'bg-primary text-primary-foreground hover:bg-primary/90',
              isCollapsed && 'justify-center',
              className
            )}
            {...props}
          />
        );
      }
    );

    SidebarMenuButton.displayName = 'SidebarMenuButton';


    // --- Sidebar Menu Action ---

    const SidebarMenuAction = React.forwardRef<
      HTMLButtonElement,
      React.ButtonHTMLAttributes<HTMLButtonElement>
    >(({ className, ...props }, ref) => {
      const { isCollapsed } = useSidebar();
      if (isCollapsed) return null;
      return (
        <Button
          ref={ref}
          variant="ghost"
          size="icon"
          className={cn(
            'absolute right-1 top-1/2 -translate-y-1/2 h-8 w-8 rounded-md opacity-0 group-hover/item:opacity-100 transition-opacity',
            'focus:opacity-100', // show on focus for accessibility
            className
          )}
          {...props}
        />
      );
    });

    SidebarMenuAction.displayName = 'SidebarMenuAction';


    // --- Sidebar Menu Label ---

    const SidebarLabel = React.forwardRef<
      HTMLSpanElement,
      React.HTMLAttributes<HTMLSpanElement>
    >(({ className, ...props }, ref) => {
      const { isCollapsed } = useSidebar();
      if (isCollapsed) return null;
      return (
        <span
          ref={ref}
          className={cn('nav-label flex-1 font-medium truncate', className)}
          {...props}
        />
      );
    });

    SidebarLabel.displayName = 'SidebarLabel';



    // --- Sidebar Menu Badge ---

    const SidebarBadge = React.forwardRef<
      HTMLSpanElement,
      React.HTMLAttributes<HTMLSpanElement>
    >(({ className, children, ...props }, ref) => {
      const { isCollapsed } = useSidebar();
      if (isCollapsed) return null;
      const badgeContent = typeof children === 'number' && children > 99 ? '99+' : children;
      return (
        <span
          ref={ref}
          className={cn(
            'nav-badge bg-destructive text-destructive-foreground text-xs px-1.5 py-0.5 rounded-full min-w-[1.25rem] text-center',
            className
          )}
          {...props}
        >
          {badgeContent}
        </span>
      );
    });

    SidebarBadge.displayName = 'SidebarBadge';



    // --- Sidebar Tooltip ---

    interface SidebarTooltipProps extends React.HTMLAttributes<HTMLDivElement> {
      label: string;
      badge?: number | string;
    }

    const SidebarTooltip = ({ label, badge, className, ...props }:
    SidebarTooltipProps) => {
      const { isCollapsed } = useSidebar();
      if (!isCollapsed) return null;
      return (
        <div
          className={cn(
            'absolute left-full ml-2 px-2 py-1 bg-popover text-popover-foreground text-sm rounded-md shadow-lg opacity-0 group-hover:opacity-100 transition-opacity pointer-events-none whitespace-nowrap z-50',
            className
          )}
          {...props}
        >
          {label}
          {badge && (
            <span className="ml-2 bg-destructive text-destructive-foreground text-xs px-1.5 py-0.5 rounded-full">
              {typeof badge === 'number' && badge > 99 ? '99+' : badge}
            </span>
          )}
        </div>
      );
    };

    SidebarTooltip.displayName = 'SidebarTooltip';



    // --- Icon Wrapper for consistent sizing ---

    const SidebarIcon = ({ children, className }: { children: React.ReactNode,
    className?: string }) => {
      return (
        <div className={cn("flex-shrink-0 w-4 h-4", className)}>
          {children}
        </div>
      )
    }


    export {
      Sidebar,
      SidebarContent,
      SidebarHeader,
      SidebarTitle,
      SidebarBody,
      SidebarFooter,
      SidebarSection,
      SidebarMenuItem,
      SidebarMenuButton,
      SidebarMenuAction,
      SidebarLabel,
      SidebarBadge,
      SidebarTooltip,
      SidebarIcon
    };
  src/components/layout/TopBar.tsx: |-
    import React from 'react';
    import {
      Menu, 
      Moon, 
      Sun,
      Settings,
      Command,
      Zap,
    } from 'lucide-react'
    import { cn } from '@/lib/utils'
    import { BODY_STATES } from '@/lib/utils'
    import { useAppViewManager } from '@/hooks/useAppViewManager.hook'
    import { UserDropdown } from './UserDropdown'
    import { ViewModeSwitcher } from './ViewModeSwitcher'
    import { useAppShellStore } from '@/store/appShell.store'

    interface TopBarProps {
      children?: React.ReactNode
    }

    export const TopBar = React.memo(({
      children,
    }: TopBarProps) => {
      const bodyState = useAppShellStore(s => s.bodyState)
      const isDarkMode = useAppShellStore(s => s.isDarkMode);
      const { 
        toggleSidebar, 
        setCommandPaletteOpen,
        toggleDarkMode,
      } = useAppShellStore.getState();
      const viewManager = useAppViewManager();

      return (
        <div className={cn(
          "h-20 bg-background border-b border-border flex items-center justify-between px-6 z-50 gap-4"
        )}>
          {/* Left Section - Sidebar Controls & Breadcrumbs */}
          <div className="flex items-center gap-4">
            {/* Sidebar Controls */}
            <button
              onClick={toggleSidebar}
              className={cn(
                "h-10 w-10 flex items-center justify-center rounded-full hover:bg-accent transition-colors"
              )}
              title="Toggle Sidebar"
            >
              <Menu className="w-5 h-5" />
            </button>

          </div>

          {/* Right Section - page controls, and global controls */}
          <div className="flex items-center gap-3">
            {children}

            {/* Separator */}
            <div className="w-px h-6 bg-border mx-2" />

            {/* Quick Actions */}
            <div className="flex items-center gap-3">

              <button
                onClick={() => setCommandPaletteOpen(true)}
                className="h-10 w-10 flex items-center justify-center rounded-full hover:bg-accent transition-colors group"
                title="Command Palette (Ctrl+K)"
              >
                <Command className="w-5 h-5 group-hover:scale-110 transition-transform" />
              </button>

            <button
              className="h-10 w-10 flex items-center justify-center rounded-full hover:bg-accent transition-colors group"
              title="Quick Actions"
            >
              <Zap className="w-5 h-5 group-hover:scale-110 transition-transform" />
            </button>

            {bodyState !== BODY_STATES.SPLIT_VIEW && <ViewModeSwitcher />}

            <div className="w-px h-6 bg-border mx-2" />

            {/* Theme and Settings */}
            <button
              onClick={toggleDarkMode}
              className="h-10 w-10 flex items-center justify-center rounded-full hover:bg-accent transition-colors group"
              title="Toggle Dark Mode"
            >
              {isDarkMode ? (
                <Sun className="w-5 h-5 group-hover:scale-110 transition-transform" />
              ) : (
                <Moon className="w-5 h-5 group-hover:scale-110 transition-transform" />
              )}
            </button>

            <button
              onClick={() => viewManager.toggleSidePane('settings')}
              className="h-10 w-10 flex items-center justify-center rounded-full hover:bg-accent transition-colors group"
              title="Settings"
            >
              <Settings className="w-5 h-5 group-hover:rotate-90 transition-transform duration-300" />
            </button>
            <UserDropdown />
            </div>
          </div>
        </div>
      )
    });
approved: false
linesAdded: null
linesRemoved: null
linesDifference: null
gitCommittedAt: null
status: undone
id: 311
